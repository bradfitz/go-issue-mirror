{
	"id": 51278497,
	"number": 1930,
	"state": "closed",
	"title": "FAQ/blog: why not contrapositive subtyping",
	"body": "\u003cpre\u003eI forget the real term; it's something like that.\n\nexample question:\n\u003ca href=\"http://www.syntax-k.de/projekte/go-review\"\u003ehttp://www.syntax-k.de/projekte/go-review\u003c/a\u003e\n\nLimited Duck Typing\nUnfortunately, Duck Typing is incomplete. Imagine an interface like this:\ntype Arithmetic interface {\n\tAdd(other int) Arithmetic\n}\nThe function parameter and return value for Add will limit the automatic typing. An\nobject that has a method func (this MyObj) Add(other int) MyObj does not conform to\nArithmetic. There are more examples like this, and for some of them it's not easy to\ndecide if Duck Typing should cover them or the current rules are better. You can get\ninto a lot of non-obvious trouble, so again it's a case of \u0026quot;maybe it's better we\nkeep it simple\u0026quot;, but again I am not totally convinced.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2014-12-08T10:10:36Z",
	"created_at": "2011-06-08T02:34:58Z",
	"updated_at": "2016-06-24T19:30:33Z"
}
