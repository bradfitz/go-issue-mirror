{
	"id": 66081213,
	"body": "\u003ca id=\"c14\"\u003e\u003c/a\u003eComment 14:\n\n\u003cpre\u003eAn update:\n\n1) Rob's split stack overflow. All the signs point to the stack trace being correct\nexcept for s/Syscall/RawSyscall/ (itself a long story). That is, the goroutine stack was\ndefinitely in the call to fork, or it had returned from fork but not yet executed any\nother calls. That fact, combined with Rob's comment that the go command (which this is\nclearly a trace for) continued executing instead of dying, very strongly suggests that\nthe split stack overflow happened in the child of fork. I cannot explain how. I have\nmultiple theories, all fairly unlikely, and all involving signals arriving at the child\nat just the wrong time. The most likely theory combines the signal with an OS X kernel\nbug. None are worth recounting in detail. CL 10360048, out for review, cleans up the\nstack trace that a split stack overflow shows. If the bug happens again (and it's not\nthe OS X kernel bug) then the stack trace should have enough information next time.\n\n2) I still haven't written any real code, so I haven't run into the problem again. But I\nam willing to assume for now that I only observed the problem before rebuilding on June\n13 around 12:00 PDT and that the fix is the same as 3. (Until then my Go tree on that\nmachine had last been built on April 29.)\n\n3) Fixed (see previous update, in comment #11).\n\nOnce CL 10360048 is submitted, I will close this bug, and then we can review the\npreemption stuff. After that, I hope there will be no changes to anything involving\nstacks again for a while, so that things can settle.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-06-19T13:20:16Z",
	"updated_at": "2014-12-08T10:31:19Z"
}
