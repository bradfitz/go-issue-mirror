{
	"id": 170101253,
	"body": "I also ran into the invalid `root` value on Windows bug and was going to file an issue, but I found this existing one.\r\n\r\n\u003e I think part of this confusion is from me misunderstanding the purpose of srcRoot. I had\r\nbeen using the Root field from 'go list' directly, but it looks like it should be\r\n\u003e `filepath.Join(pkg.Root, \"src\")`\r\n\r\nIt should be `pkg.SrcRoot`, which is already set to that value. /cc @kr\r\n\r\n\u003e - importPath isn't part of the function's signature. Copy-paste error\r\nfrom somewhere?\r\n\r\nYou're right, `importPath` is confusing because it makes it sound like a variable, but there is no such variable anywhere. Perhaps it meant to say \"thus root is a prefix of import path\", meaning `root` is a prefix of the import path of the package that is in in `dir`.\r\n\r\n\u003e On Windows, the root parameter contains backslashes.\r\n\u003e But an import path is conventionally slash-separated,\r\n\u003e not a filepath as implemented here. (It's a slice of dir.)\r\n\r\nI can confirm, and I think it's a bug. Here's the rationale. The documentation says:\r\n\r\n\u003e On return, root is the import path corresponding to the root of the repository\r\n\r\nIf I understand correctly, an import path is defined as a `/`-separated path (source [here](https://golang.org/cmd/go/#hdr-Import_path_syntax)).\r\n\r\nHowever, as @kr said, on Windows, there's a bug in that the returned `root` value uses `\\` as separators.\r\n\r\nConsider this snippet being executed on Windows:\r\n\r\n```Go\r\npkg, err := build.Import(\"example.com/repo/subpackage\", \"\", build.FindOnly)\r\nif err != nil {\r\n\tpanic(err)\r\n}\r\n_, root, err := FromDir(pkg.Dir, pkg.SrcRoot)\r\nif err != nil {\r\n\tpanic(err)\r\n}\r\nfmt.Println(root)\r\n```\r\n\r\nOn Windows, that snippet will print `example.com\\repo`, which is incorrect (it is not an import path corresponding to repo root, it has a wrong `\\` character). On OS X and Linux it will print `example.com/repo` correctly.\r\n\r\nThe fix is simple:\r\n\r\n```diff\r\ndiff --git a/go/vcs/vcs.go b/go/vcs/vcs.go\r\nindex a702496..b615508 100644\r\n--- a/go/vcs/vcs.go\r\n+++ b/go/vcs/vcs.go\r\n@@ -348,7 +348,7 @@ func FromDir(dir, srcRoot string) (vcs *Cmd, root string, err error) {\r\n \tfor len(dir) \u003e len(srcRoot) {\r\n \t\tfor _, vcs := range vcsList {\r\n \t\t\tif fi, err := os.Stat(filepath.Join(dir, \".\"+vcs.Cmd)); err == nil \u0026\u0026 fi.IsDir() {\r\n-\t\t\t\treturn vcs, dir[len(srcRoot)+1:], nil\r\n+\t\t\t\treturn vcs, filepath.ToSlash(dir[len(srcRoot)+1:]), nil\r\n \t\t\t}\r\n \t\t}\r\n \r\n```\r\n\r\nI can make a CL that fixes this issue.",
	"user": {
		"login": "shurcooL",
		"id": 1924134,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-08T19:34:01Z",
	"updated_at": "2016-01-09T04:51:05Z"
}
