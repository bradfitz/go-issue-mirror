{
	"id": 73665931,
	"number": 10716,
	"state": "open",
	"title": "x/build: builds waiting on resources shouldn't be in building state",
	"body": "/cc @crawshaw @adg \r\n\r\nThe reverse BuildletPool impl is cheating a bit or interacting weirdly with the rest of the coordinator: instead of blocking on returning a buildlet, it instead \"starts\" a bunch of builds even if there's not an idle iPhone available.  And then each builds looks like it's in progress on build.golang.org (with happy blue gopher), but in reality they're all just stuck, for 4 hours (!?) here:\r\n\r\n![screen shot 2015-05-06 at 9 04 59 am](https://cloud.githubusercontent.com/assets/2621/7497401/03c23cc2-f3cf-11e4-9471-dad60e920c2c.png)\r\n\r\nArguably, the GCE pool impl might do this too, but it happens much less often so it's been easier to miss and ignore.\r\n\r\nWe should have make quota a more first-class concept within the coordinator and have different states for \"waiting\" vs \"building\".  And when quota becomes available, we should prioritize which waiting build gets to go next.  Right now the one who gets lucky and grabs a mutex gets to go next.\r\n\r\nThen, once we have two states, we should make build.golang.org have two colors of gophers: gray for waiting, and blue for actively building.\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Builders"
		}
	],
	"comments": 2,
	"created_at": "2015-05-06T16:09:44Z",
	"updated_at": "2015-06-11T20:59:32Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
