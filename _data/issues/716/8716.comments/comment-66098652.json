{
	"id": 66098652,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3 by **brady**:\n\n\u003cpre\u003eAn example of where this becomes necessary is basically any flag used in testing since\nit is impossible to interject some kind of setup between flag processing and test start\nwithout having to put a sync.Once object at the top of every single test (since who\nknows which will run given the users command line flags.. etc)\n\nSo if the intention is that the flag library never be used by anything but main then I\nguess I can see your argument. Ideally though a library could use flags to set things\nthat impact it at runtime rather than forcing the main() function to cram all of that\nlogic in. For example, setting up proxy settings might be a flag driven function (as\nwell as being exposed via helpers in the library directly). This becomes much more\nimportant as abstraction layers get setup. Say you want a flag that says which API\nendpoint you should target as part of your client library, should the author of the\napplication have to know about the existence of these options and program them into\nmain() even though it doesn't impact their code path in any way?\n\nI like go for having a common flag library that unifies the ability for many different\nthings to all act the same and not requires the author of main() to have knowledge of a\nlibrary used three abstraction layers deep, while still giving the end user to have the\nability to change the flag if necessary. It ends up like init(), a way for the caller to\nset things up prior to things getting real such that blah.Do() doesn't need to be\nlittered around in a hundred places.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-19T01:37:04Z",
	"updated_at": "2014-12-08T10:48:19Z"
}
