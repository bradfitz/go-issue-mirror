{
	"id": 173464526,
	"body": "I did some debuging here:\r\n```\r\ndiff --git a/src/cmd/link/internal/ld/ldpe.go b/src/cmd/link/internal/ld/ldpe.go\r\nindex 8439c06..d8788c9 100644\r\n--- a/src/cmd/link/internal/ld/ldpe.go\r\n+++ b/src/cmd/link/internal/ld/ldpe.go\r\n@@ -128,6 +128,8 @@ type PeObj struct {\r\n }\r\n \r\n func ldpe(f *obj.Biobuf, pkg string, length int64, pn string) {\r\n+\tfmt.Printf(\"\\nprocessing file %s\\n\\n\", pn)\r\n+\tdefer fmt.Printf(\"\\ndone with %s\\n\", pn)\r\n \tif Debug['v'] != 0 {\r\n \t\tfmt.Fprintf(\u0026Bso, \"%5.2f ldpe %s\\n\", obj.Cputime(), pn)\r\n \t}\r\n@@ -199,6 +201,7 @@ func ldpe(f *obj.Biobuf, pkg string, length int64, pn string) {\r\n \t// read symbols\r\n \tpeobj.pesym = make([]PeSym, peobj.fh.NumberOfSymbols)\r\n \r\n+\tfmt.Printf(\"\\npe symbols for %v:\\n\", pn)\r\n \tpeobj.npesym = uint(peobj.fh.NumberOfSymbols)\r\n \tobj.Bseek(f, int64(base)+int64(peobj.fh.PointerToSymbolTable), 0)\r\n \tfor i := 0; uint32(i) \u003c peobj.fh.NumberOfSymbols; i += numaux + 1 {\r\n@@ -223,6 +226,9 @@ func ldpe(f *obj.Biobuf, pkg string, length int64, pn string) {\r\n \t\tif numaux \u003c 0 {\r\n \t\t\tnumaux = 0\r\n \t\t}\r\n+\t\tif strings.Contains(pn, \"issue13672.a\") {\r\n+\t\t\tfmt.Printf(\"%d: %v\\t\\tsection=%d value=0x%x\\n\", i, peobj.pesym[i].name, peobj.pesym[i].sectnum, peobj.pesym[i].value)\r\n+\t\t}\r\n \t}\r\n \r\n \t// create symbols for mapped sections\r\n@@ -287,6 +293,7 @@ func ldpe(f *obj.Biobuf, pkg string, length int64, pn string) {\r\n \t\t\tcontinue\r\n \t\t}\r\n \r\n+\t\tfmt.Printf(\"\\npe relocations for section %v:\\n\", rsect.name)\r\n \t\tr = make([]Reloc, rsect.sh.NumberOfRelocations)\r\n \t\tobj.Bseek(f, int64(peobj.base)+int64(rsect.sh.PointerToRelocations), 0)\r\n \t\tfor j = 0; j \u003c int(rsect.sh.NumberOfRelocations); j++ {\r\n@@ -297,6 +304,10 @@ func ldpe(f *obj.Biobuf, pkg string, length int64, pn string) {\r\n \t\t\trva := Le32(symbuf[0:])\r\n \t\t\tsymindex := Le32(symbuf[4:])\r\n \t\t\ttype_ := Le16(symbuf[8:])\r\n+\t\t\tif rsect.name == \".text\" \u0026\u0026 strings.Contains(pn, \"issue13672.a\") {\r\n+\t\t\t\tfmt.Printf(\"%d: type=%v rva=0x%x symindex=%v\\n\", j, type_, rva, symindex)\r\n+\t\t\t}\r\n+\r\n \t\t\tif err = readpesym(peobj, int(symindex), \u0026sym); err != nil {\r\n \t\t\t\tgoto bad\r\n \t\t\t}\r\n@@ -348,6 +359,13 @@ func ldpe(f *obj.Biobuf, pkg string, length int64, pn string) {\r\n \t\ts = rsect.sym\r\n \t\ts.R = r\r\n \t\ts.R = s.R[:rsect.sh.NumberOfRelocations]\r\n+\r\n+\t\tif rsect.name == \".text\" \u0026\u0026 strings.Contains(pn, \"issue13672.a\") {\r\n+\t\t\tfmt.Printf(\"\\ngo relocations for section %v:\\n\", s.Name)\r\n+\t\t\tfor i, r := range s.R {\r\n+\t\t\t\tfmt.Printf(\"%d: Off=0x%x Sym(addr=%p name=%s type=%d dynimplib=%s extname=%s value=0x%x size=0x%x)\\n\", i, r.Off, r.Sym, r.Sym.Name, r.Sym.Type, r.Sym.Dynimplib, r.Sym.Extname, r.Sym.Value, r.Sym.Size)\r\n+\t\t\t}\r\n+\t\t}\r\n \t}\r\n \r\n \t// enter sub-symbols into symbol table.\r\n```\r\nand I get this output\r\n```\r\nC:\\dev\\src\\issues\\issue13672\u003ego build -ldflags=\"-linkmode=internal\"\r\n# issues/issue13672\r\n\r\nprocessing file $WORK\\issues\\issue13672.a(_all.o)\r\n\r\n\r\npe symbols for $WORK\\issues\\issue13672.a(_all.o):\r\n0: .file\t\tsection=65534 value=0x12\r\n2: .text\t\tsection=1 value=0x0\r\n4: .data\t\tsection=3 value=0x0\r\n6: .bss\t\tsection=8 value=0x0\r\n8: .debug_info\t\tsection=10 value=0x0\r\n10: .debug_abbrev\t\tsection=11 value=0x0\r\n12: .debug_aranges\t\tsection=9 value=0x0\r\n14: .debug_line\t\tsection=12 value=0x0\r\n16: .rdata$zzz\t\tsection=5 value=0x20\r\n18: .file\t\tsection=65534 value=0x31\r\n20: Print\t\tsection=1 value=0x0\r\n22: _cgo_7d1619ce4bb5_Cfunc_Print\t\tsection=1 value=0x50\r\n23: .text\t\tsection=1 value=0x0\r\n25: .data\t\tsection=3 value=0x0\r\n27: .bss\t\tsection=8 value=0x0\r\n29: .rdata\t\tsection=4 value=0x0\r\n31: .xdata\t\tsection=7 value=0x0\r\n33: .pdata\t\tsection=6 value=0x0\r\n35: .debug_info\t\tsection=10 value=0x18f\r\n37: .debug_abbrev\t\tsection=11 value=0x19\r\n39: .debug_loc\t\tsection=15 value=0x0\r\n41: .debug_aranges\t\tsection=9 value=0x20\r\n43: .debug_line\t\tsection=12 value=0x1d\r\n45: .rdata$zzz\t\tsection=5 value=0x0\r\n47: .debug_frame\t\tsection=13 value=0x0\r\n49: .file\t\tsection=65534 value=0x44\r\n51: mingw_getsp\t\tsection=1 value=0x60\r\n53: longjmp\t\tsection=1 value=0x66\r\n54: .debug_info\t\tsection=10 value=0x4e5\r\n56: .debug_abbrev\t\tsection=11 value=0x16c\r\n58: .debug_line\t\tsection=12 value=0xc8\r\n60: .text\t\tsection=1 value=0x60\r\n62: .data\t\tsection=3 value=0x0\r\n64: .bss\t\tsection=8 value=0x0\r\n66: .debug_aranges\t\tsection=9 value=0x50\r\n68: __imp_longjmp\t\tsection=0 value=0x0\r\n69: puts\t\tsection=0 value=0x0\r\n70: _setjmp\t\tsection=0 value=0x0\r\n\r\npe relocations for section .text:\r\n0: type=4 rva=0x16 symindex=70\r\n1: type=4 rva=0x21 symindex=29\r\n2: type=4 rva=0x26 symindex=69\r\n3: type=4 rva=0x41 symindex=53\r\n4: type=4 rva=0x69 symindex=68\r\n\r\ngo relocations for section main(.text):\r\n0: Off=0x16 Sym(addr=0xc0820697a0 name=_setjmp type=41 dynimplib=msvcrt.dll extname=_setjmp value=0x0 size=0x0)\r\n1: Off=0x21 Sym(addr=0xc082f190e0 name=main(.rdata) type=8 dynimplib= extname=main(.rdata) value=0x0 size=0x20)\r\n2: Off=0x26 Sym(addr=0xc0820705a0 name=puts type=41 dynimplib=msvcrt.dll extname=puts value=0x0 size=0x0)\r\n3: Off=0x41 Sym(addr=0xc082070240 name=longjmp type=41 dynimplib=msvcrt.dll extname=longjmp value=0x0 size=0x0)\r\n4: Off=0x69 Sym(addr=0xc082070240 name=longjmp type=41 dynimplib=msvcrt.dll extname=longjmp value=0x0 size=0x0)\r\n\r\npe relocations for section .pdata:\r\n\r\ndone with $WORK\\issues\\issue13672.a(_all.o)\r\n\r\nprocessing file C:\\dev\\go/pkg/windows_amd64/runtime/cgo.a(_all.o)\r\n\r\n\r\npe symbols for C:\\dev\\go/pkg/windows_amd64/runtime/cgo.a(_all.o):\r\n\r\npe relocations for section .text:\r\n\r\npe relocations for section .pdata:\r\n\r\ndone with C:\\dev\\go/pkg/windows_amd64/runtime/cgo.a(_all.o)\r\n```\r\n\r\nNote that _all.o .text section has two interesting pe relocations: 3 and 4. 3 has symindex=53 which points to symbol\r\n```\r\n53: longjmp\t\tsection=1 value=0x66\r\n```\r\nthat points to small longjmp function in .text. While 4 has symindex=68 which points to symbol\r\n```\r\n68: __imp_longjmp\t\tsection=0 value=0x0\r\n```\r\nwhich is just a place for external function (longjmp that gcc hoping to find in msvcrt.dll).\r\n\r\nYou can also see those relocations converted into \"go relocations\". But \"go relocatoins\" 3 and 4 points to the same symbol. And this symbol settings match neither original longjmp nor __imp_longjmp settings. So I am not surprised that linker generates invalid code here.\r\n\r\nI think this is all to do with symbol renaming we do in readpesym.\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-21T05:51:12Z",
	"updated_at": "2016-01-21T05:51:12Z"
}
