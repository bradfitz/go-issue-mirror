{
	"id": 91762426,
	"number": 11462,
	"state": "closed",
	"title": "runtime: golang scheduler is not preemptive - it's cooperative?",
	"body": "If you run this code with only one go routine:\r\n\r\n```\r\npackage main\r\n \r\nimport \"fmt\"\r\nimport \"runtime\"\r\nimport \"time\"\r\n \r\nfunc cpuIntensive(p *int) {\r\n  for i := 1; i \u003c= 100000000000; i++ {\r\n    *p = i\r\n  }\r\n}\r\n \r\nfunc main() {\r\n  runtime.GOMAXPROCS(1)\r\n \r\n  x := 0\r\n  go cpuIntensive(\u0026x)\r\n \r\n  time.Sleep(100 * time.Millisecond)\r\n \r\n  // printed only after cpuIntensive is completely finished\r\n  fmt.Printf(\"x = %d.\\n\", x)\r\n}\r\n```\r\n\r\nScheduler is paralized, and Printf is NOT printed after 100ms as expected, but after all  job is done in cpuintensive()  go routine.\r\n\r\nBut if programmer insert `runtime.Gosched()` in intensive for loop of routine, cooperative scheduler works  fine.\r\n\r\nIs this by design or are there plans to make Golang scheduler preemptive?\r\n",
	"user": {
		"login": "GoranP",
		"id": 2116949,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2015-06-29T15:16:39Z",
	"created_at": "2015-06-29T09:58:56Z",
	"updated_at": "2016-06-29T21:01:36Z"
}
