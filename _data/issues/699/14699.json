{
	"id": 139134033,
	"number": 14699,
	"state": "closed",
	"title": "cmd/compile: unexpected heap allocation passing pointer to non-escaping closure",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n1.6\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\ndarwin\r\n\r\n3. What did you do?\r\n  ```go\r\n\t// Run with `go test -run - -bench . -benchmem -gcflags '-m -l -e'`\r\n\tfunc BenchmarkClosurePtrFromArg(b *testing.B) {\r\n\t\tinc := func(k *int) {\r\n\t\t\t*k++\r\n\t\t}\r\n\t\tfor j := 0; j \u003c b.N; j++ {\r\n\t\t\tvar i int // does escape\r\n\t\t\tinc(\u0026i)\r\n\t\t}\r\n  \t}\r\n```\r\n  See https://github.com/tschottdorf/goplay/tree/master/alloc_tests\r\n\r\n4. What did you expect to see?\r\n\r\n I'd expect i to not be allocated on the heap. The following very similar examples keep it on the stack:\r\n\r\n  ```go\r\n\tfunc BenchmarkClosureVarFromScope(b *testing.B) {\r\n\t\tfor j := 0; j \u003c b.N; j++ {\r\n\t\t\tvar i int // does not escape\r\n\t\t\tinc := func() {\r\n\t\t\t\ti++\r\n\t\t\t}\r\n\t\t\tinc()\r\n\t\t}\r\n\t}\r\n\r\n\tfunc BenchmarkClosurePtrFromScope(b *testing.B) {\r\n\t\tfor j := 0; j \u003c b.N; j++ {\r\n\t\t\tvar i int // does not escape\r\n\t\t\tptr := \u0026i\r\n\t\t\tinc := func() {\r\n\t\t\t\t*ptr++\r\n\t\t\t}\r\n\t\t\tinc()\r\n\t\t}\r\n\t}\r\n\r\n\tfunc incExt(k *int) {\r\n\t\t*k++\r\n\t}\r\n\r\n\tfunc BenchmarkFuncPtrFromArg(b *testing.B) {\r\n\t\tfor j := 0; j \u003c b.N; j++ {\r\n\t\t\tvar i int // does not escape\r\n\t\t\tincExt(\u0026i)\r\n\t\t\tif i != 1 {\r\n\t\t\t\tb.Fatal()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n```\r\n\r\n5. What did you see instead?\r\n`i` escapes to the heap.\r\n\r\ncc @tamird \r\n",
	"user": {
		"login": "tschottdorf",
		"id": 5076964,
		"type": "User",
		"site_admin": false
	},
	"comments": 10,
	"closed_at": "2016-03-31T03:10:40Z",
	"created_at": "2016-03-08T00:13:08Z",
	"updated_at": "2016-03-31T03:21:00Z"
}
