{
	"id": 66094820,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9:\n\n\u003cpre\u003eThanks for the diagnosis Alex.\n\nsaar, I'd like to know more about why something (it was mentioned this\nwas coming from a library, not your code) is calling os.ClearEnv. It\nfeels to me that there will be a better way to achieve what that code\nwants without having to drain the entire environment.\n\n\u003e syscall.Clearenv does not clear process environment. But it has this comment\n\u003e \"// TODO(bradfitz): pass through to C\". So I think it is something that\n\u003e still to happen (if anyone cares about it). So I think windows version is\n\u003e more correct here. Mind you windows syscall.Clearenv is actually setting all\n\u003e vars to blank, instead of actually deleting them.\n\u003e\n\u003e Leaving issue closed until I hear better suggestions.\n\nThanks Alex, you are correct. It's hard to describe the behaviour\nos.ClearEnv on unix because it is both 1. incorrect, 2. implementation\nspecific (I have no idea what gccgo does in this case). It's even more\nconfusing when os/exec is used as the default environment it passes\ndown to the child *is* the in memory copy, not the original, and that\nwould be empty if os.ClearEnv is called.\u003c/pre\u003e",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-05-20T04:52:44Z",
	"updated_at": "2014-12-08T10:44:22Z"
}
