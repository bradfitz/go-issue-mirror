{
	"id": 51284531,
	"number": 6002,
	"state": "closed",
	"title": "json.Unmarshal should use `json:key_name` conversion",
	"body": "by **andy@livefyre.com**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n1. Create JSON byteslice =\u0026gt; \n    jsonBlob := []byte(`{\u0026quot;foo_bar\u0026quot;: \u0026quot;baz\u0026quot;}`)\n2. Define struct =\u0026gt; \n    type Quux struct { FooBar string `json:foo_bar`}\n3. Unmarshal into declared Quux =\u0026gt; \n    var myQuux Quux\n    err := json.Unmarshal(jsonBlob, \u0026amp;myQuux)\n    fmt.Println(myQuux)\n\nWhat is the expected output?\n{baz}\n\nWhat do you see instead?\n{ }\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g\n\nWhich operating system are you using?\nDarwin/OSX\n\nWhich version are you using?  (run 'go version')\ngo version go1.1.1 darwin/amd64\n\nPlease provide any additional information below.\n\nI expected the struct field's tag value (described here:\n\u003ca href=\"http://golang.org/pkg/encoding/json/#Marshal)\"\u003ehttp://golang.org/pkg/encoding/json/#Marshal)\u003c/a\u003e to work in both Marshal and Unmarshal.\nThis would help keep my variable names idiomatic, as well as satisfy external\nrequirements.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:33:01Z",
	"created_at": "2013-07-31T19:12:21Z",
	"updated_at": "2016-06-24T22:53:09Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
