{
	"id": 66090536,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11:\n\n\u003cpre\u003eLet's not re-open this issue. Here's a comment from rsc:\n\n\"go vet has a check for what I believe we should support long term. The Go 1.3 release\nnotes very nearly promised this (\u003ca href=\"http://golang.org/doc/go1.3#garbage_collector)\"\u003ehttp://golang.org/doc/go1.3#garbage_collector)\u003c/a\u003e. The\ncases it allows are (given p unsafe.Pointer, v reflect.Value, h *reflect.SliceHeader or\n*reflect.StringHeader):\n\nunsafe.Pointer(uintptr(p) +/- delta))\nunsafe.Pointer(uintptr(p))\nunsafe.Pointer(v.Pointer())\nunsafe.Pointer(v.UnsafeAddr())\nunsafe.Pointer(h.Data)\n\nThe header variable h must be a pointer to an actual slice or string values; you cannot\njust say 'var h reflect.SliceHeader' and use it.\"\n\nThe text in \u003ca href=\"http://golang.org/doc/go1.3#garbage_collector\"\u003ehttp://golang.org/doc/go1.3#garbage_collector\u003c/a\u003e has been updated and mentions\ngo vet as well. We may want to emphasize this again in the 1.4 release notes.\n\nI'm not against exact rules, but the spec is probably not where they should be.\n\nGiving exact rules also is not very helpful unless mechanically checked, hence go vet.\nI've tried to propose a modified unsafe package that would have reduced the \"dangerous\"\noperations to one, but it's not really making a big difference and still requires manual\ninspection (besides the general opposition to changing the API).\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-10-24T04:05:46Z",
	"updated_at": "2014-12-08T10:39:56Z"
}
