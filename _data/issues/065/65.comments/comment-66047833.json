{
	"id": 66047833,
	"body": "\u003ca id=\"c14\"\u003e\u003c/a\u003eComment 14 by **Damir.Azdajic**:\n\n\u003cpre\u003eWon't you have to check for unused code blocks in the optimizer stage anyways?\nSo why not delay the return check to the optimizer stage and deal with it there?\n\nTake this modified example, which also outputs the same return error in GoLang:\nfunc example(x int) int {\n    return 19; //Good for debugging, bad if one forgets about it\n    \n//But should the following code be included in the final binary since it's unreachable?\n//If the answer is to exclude the code, then it's more of a reason to postpone return\nchecking to the optimizer stage\n    if x == 0 {\n        return 5;\n    } else {\n        return x;\n    }\n}\n\nFirst when generating the intermediate code for each function, automatically append a\nreturn at the end of the function upon hitting the last }.\n\nThen in the optimizing stage, for every intermediate opcode have a flag denoting\ntraversed or not traversed,\nand run through the code taking both paths. If a branch tries to go to an already\ntraversed location, hits a return, or break, then the end of that path has been found.\n\nLet's assume the intermediate code looks like so:\nfunction example\n..input x int\n..output t0 int\n\n..t0 = 0 #Spec states function returns are initiated to 0 on function entry\n\n..t0 = 19 #Carry out our return (obviously the t0 = 0 would get ditched once optimized)\n..return\n\n..cmp x, 0\n..bne label0\n..t0 = 5\n..return\n..bra label1 #Automatically added by if/else block generation - but rendered useless\nbecause of the \"return\" above\nlabel0:\n..t0 = x\n..return\nlabel1:\n..return #The automatically appended return at end of function, done by the intermediate\ncode generation stage\n\nAnd once we run through it:\nfunction example\n..input x int\n..output t0 int\n\n..t0 = 0 (Traversed)\n\n..t0 = 19 (Traversed)\n..return (Traversed)\n\n..cmp x, 0 (Untraversed)\n..bne label0 (Untraversed)\n..t0 = 5 (Untraversed)\n..return (Untraversed)\n..bra label1 (Untraversed)\nlabel0:\n..t0 = x (Untraversed)\n..return (Untraversed)\nlabel1:\n..return (Untraversed)\n\nThen we drop all the untraversed lines and end up with this:\nfunction example\n..input x int\n..output t0 int\n\n..t0 = 0 (Traversed) #Once the symbols are optomized, this line should be dropped\nobviously\n\n..t0 = 19 (Traversed)\n..return (Traversed) #Return is last\n\nBut let's say the function was this:\nfunc example(x int) int {\n    if x == 0 {\n        return 5;\n    } else {\n        return x;\n    }\n}\n\nSo the intermediate code would be this:\nfunction example\n..input x int\n..output t0 int\n\n..t0 = 0 #Spec states function returns are initiated to 0 on function entry\n\n..cmp x, 0\n..bne label0\n..t0 = 5\n..return\n..bra label1 #Automatically added by if/else block generation - but rendered useless\nbecause of the \"return\" above\nlabel0:\n..t0 = x\n..return\nlabel1:\n..return #The automatically appended return at end of function, done by the intermediate\ncode generation stage\n\nThen in the optimizing stage, when traversing we get:\nfunction example\n..input x int\n..output t0 int\n\n..t0 = 0 (Traversed 1)\n\n..cmp x, 0 (Traversed 2 )\n..bne label0 (Traversed 3) #both branches taken\n..t0 = 5 (Traversed 3.a.1)\n..return (Traversed 3.a.2)\n..bra label1 (Untraversed)\nlabel0:\n..t0 = x (Traversed 3.b.1)\n..return (Traversed 3.b.1)\nlabel1:\n..return (Untraversed)\n\nDrop the untraversed lines:\nfunction example\n..input x int\n..output t0 int\n\n..t0 = 0 (Traversed 1)\n\n..cmp x, 0 (Traversed 2 )\n..bne label0 (Traversed 3) #both branches taken\n..t0 = 5 (Traversed 3.a.1)\n..return (Traversed 3.a.2)\nlabel0:\n..t0 = x (Traversed 3.b.1)\n..return (Traversed 3.b.1) #Return is last, okay\n\n\nFurthermore, I think the compiler should not treat this as an full-stop-error, but\ninstead as a warning.\n\nThe spec already claims all return values are declared to 0 upon entry of the function.\nSo the lack of an explicit return only implies a defined state - a return of 0\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-10-19T07:29:03Z",
	"updated_at": "2014-12-08T10:03:06Z"
}
