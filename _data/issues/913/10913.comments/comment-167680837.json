{
	"id": 167680837,
	"body": "I'd be interested in picking this up—which includes writing the proposal—but want to hash out the design a little more and am seeking feedback: \r\n\r\n**Q. How should the revision/branch/tag support work? Ideally we want to support all three forms but we will need ways to identify which form the `go-imports` tag is referring to.**\r\n**Proposed Answer**: `\u003cmeta name=\"go-import\" content=\"import-prefix vcs repo-root repo-rev\"\u003e` where `repo-rev` is of the form `branch=$name`, `rev=$commit` or `tag=$tag`.\r\n\r\n**Q: What does backward compatibility look like here?**\r\n**Proposed Answer**: Because older versions of the Go tool will not be aware of the additional tag, they will likely (TODO: check this) pull from `HEAD` instead of the specified rev. This implicit behaviour will be confusing to package consumers as a package author might set up the import URL as `getattest.io/pkgname tag=v2`, but the consumer won't get this revision and might wonder why their program is breaking or otherwise different.\r\n\r\nShould we fail outright here? Rely on `// +build go1.7` in the package itself to prevent the behaviour (has other ramifications)? This needs more thought. One solution may be to re-order the `go-imports` format to force this failure—e.g. `import-prefix vcs repo-rev repo-root`—at the risk of a confusing error message from earlier versions of `go get` and other tools.\r\n\r\nThere are likely other questions here as well, but I wanted to get these down to get the discussion moving.\r\n",
	"user": {
		"login": "elithrar",
		"id": 18544,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-28T23:53:38Z",
	"updated_at": "2015-12-28T23:59:51Z"
}
