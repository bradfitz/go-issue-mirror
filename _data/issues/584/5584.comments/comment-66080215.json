{
	"id": 66080215,
	"body": "\u003ca id=\"c22\"\u003e\u003c/a\u003eComment 22 by **mgspross**:\n\n\u003cpre\u003eI'm experiencing a similar issue (FreeOSMemory/garbage collection is not returning\nmemory to the OS consistently) on a 64-bit Windows 7 machine, particularly with the\ngo1.3.3 windows/386 release (but also to varying degrees with other releases).\n\nI've attached a simple test program to demonstrate the problem. It waits 5 seconds,\nallocates ~95MB of memory via a slice, sets it to nil, and periodically calls\nFreeOSMemory to try to return the memory to the OS.\n\nBy watching the \"Private Working Set\" column for the program in the Windows task manager\nwhile it is running, you can see the memory usage starts out small (as to be expected),\nincreases to include the 95MB of allocated memory, and then decreases (or doesn't...)\nafter FreeOSMemory is called, depending on the go version used.\n\nThe amount of memory actually returned to the OS varies with different go releases as\nwell (I tested the most recent releases). Here are my findings, running memtest.go with\n\"go run memtest.go\" on various go releases:\n\n * go1.3.2 windows/386: The memory is never returned to the OS.\n * go1.3.2 windows/amd64: This works correctly. The memory is released and the memory usage returns to close to what it was when the program started (memory in-use was ~1.5MB after FreeOSMemory was called).\n * go1.3.3 windows/386: The memory is never returned to the OS.\n * go1.3.3 windows/amd64: This works correctly (memory in-use was ~1.5MB after FreeOSMemory was called).\n * go1.4rc1 windows/386: Some memory is returned, bu not all of it: ~13.5MB was still in use after FreeOSMemory was called.\n * go1.4rc1 windows/amd64: Some memory is returned, but not all of it: ~7.6MB was still in use after FreeOSMemory was called.\n\nThese results were all repeatable which each respective release.\n\nI kept the program very simple, and didn't bother allocating a larger amount of memory\nbecause it is was still able to clearly demonstrate the differences in behavior across\nthe different go builds tested (on my machine at least).\n\nI haven't tested yet with other allocation sizes, and I'm not sure if some of this\nbehavior is expected.\n\nMy results seem to indicate that 1.3.2 windows/amd64 and 1.3.3 windows/amd64 do the best\njob of returning as much memory as possible back to the OS, as the memory usage returns\nvery nearly to the amount of memory in-use when the test program is first started (prior\nto allocating the slice).\n\nI'm no expert on Windows memory management, but I thought it was interesting that the\n386 and amd64 builds behave so differently, and wondered whether running the 386 build\non an amd64 machine might be a factor. I haven't be able to test the 386 build on a\n32-bit Windows installation as of yet, but I wanted to try that as well for comparison,\nand still can if that would be helpful.\n\nP.S. I'm using the 386 build because my the program I'm writing uses interacts with\nlegacy 32-bit Windows COM libraries, so I can't use the amd64 build in my current\nsituation.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/5584/22/memtest.go\"\u003ememtest.go\u003c/a\u003e (647 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-11-25T07:19:39Z",
	"updated_at": "2014-12-08T10:30:23Z"
}
