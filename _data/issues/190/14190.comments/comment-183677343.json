{
	"id": 183677343,
	"body": "I have figured out the reason this bug is happening. The issue is that behavior of `vfs.NameSpace` is not consistent with expectations of how a normal file system behaves and that causes typical directory traversal algorithms to break on `vfs.NameSpace`.\r\n\r\nThe issue is that `NameSpace` is implemented with the implicit assumption that it will be used with a `FileSystem` mounted at root mount point with other `FileSystem`s mounted somewhere within that. This is of course the use case of `godoc` as also explained in the  documentation of `vfs.NameSpace` where GOROOT is being mounted at root. \r\n\r\nThe use case above mounts several folders under root but nothing at root breaking this implicit assumption. Unless we explicitly bind a `FileSystem` directory at root mount-point \"/\" of vfs.NameSpace , running `Open()` or `Stat()` on root \"/\" causes a `not found` error (or a return value that won't be a directory if we mount a file). This happens even though `ReadDir()` correctly resolves and lists the contents of the root directory as expected. \r\n\r\nMost algorithms that traverse a directory structure either `Open()` or `Stat()` the root before reading the contents. The `not found` error that comes when a directory is not explicitly bound at the root mount causes the traversal routine to fail fast without trying to list directory contents. This happens in http.FileServer and I had a similar failure in another piece of directory traversing code I am writing.\r\n\r\nI was able to get the right behavior by If i mount an empty directory at root like below.\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"golang.org/x/tools/godoc/vfs\"\r\n\t\"golang.org/x/tools/godoc/vfs/httpfs\"\r\n\t\"log\"\r\n\t\"net/http\"\r\n\t\"os\"\r\n)\r\n\r\nfunc main() {\r\n\tns := vfs.NameSpace{}\r\n\t// Folder3 is simply an empty folder to be mounted at the root mount point\r\n\tns.Bind(\"/\", vfs.OS(\"Folder3\"), \"/\", vfs.BindReplace)\r\n\tns.Bind(\"/music\", vfs.OS(\"Folder1\"), \"/\", vfs.BindReplace)\r\n\tns.Bind(\"/videos\", vfs.OS(\"Folder2\"), \"/\", vfs.BindReplace)\r\n\r\n\tfis, err := ns.ReadDir(\"/\")\r\n\tif err != nil {\r\n\t\tlog.Println(err)\r\n\t\tos.Exit(1)\r\n\t}\r\n\tfor _, fi := range fis {\r\n\t\tlog.Println(fi.Name())\r\n\t}\r\n\thttp.Handle(\"/\", http.FileServer(httpfs.New(ns)))\r\n\thttp.ListenAndServe(\":9090\", http.DefaultServeMux)\r\n}\r\n```\r\n\r\nI think the least disruptive resolution to this issue will be to add a `NewNamespace()` function to create a `NameSpace` that automatically mounts at root mount point \"/\" an implementation of `FileSystem` that simply emulates an empty directory so this surprising behavior doesn't occur. The advantage of this approach is that absolutely nothing would change for any current usage of `NameSpace` by `godoc` and any other existing programs while new programs can just use the provided function.\r\n\r\nHappy to work on a CL if the approach sounds ok.",
	"user": {
		"login": "srinathh",
		"id": 2973973,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-13T14:34:03Z",
	"updated_at": "2016-02-13T14:34:03Z"
}
