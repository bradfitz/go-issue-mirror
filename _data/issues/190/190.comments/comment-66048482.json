{
	"id": 66048482,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eI downloaded your files and got:\n\n; gotest\nno test files found\n; \n\nThe file should be called gocouch_test.go not gocouch-test.go.\nI will change gotest to echo the file pattern (*_test.go) when\nit says there are no test files.\n\nAfter renaming gocouch-test.go to gocouch_test.go, I get\n\n; gotest\nrm -f _test/gocouch.a _gotest_.6\n6g -o _gotest_.6 gocouch.go    gocouch_test.go\ngocouch_test.go:10: undefined: gocouch\nmake: *** [_gotest_.6] Error 1\n;\n\nThis error is because gocouch_test.go is in package gocouch,\nso it can and must refer to identifiers directly: NewServer, not\ngocouch.NewServer.  After making those three changes:\n\n; hg diff gocouch_test.go\ndiff -r a483551bcbbe gocouch_test.go\n--- a/gocouch_test.go\tSat Nov 14 23:12:22 2009 -0800\n+++ b/gocouch_test.go\tSat Nov 14 23:12:43 2009 -0800\n@@ -7,7 +7,7 @@\n var dbname string = \"test123\";\n \n func clean(t *testing.T) {\n-  server := gocouch.NewServer(\"\u003ca href=\"http://127.0.0.1:5984\"\u003ehttp://127.0.0.1:5984\u003c/a\u003e\");\n+  server := NewServer(\"\u003ca href=\"http://127.0.0.1:5984\"\u003ehttp://127.0.0.1:5984\u003c/a\u003e\");\n   \n   contains,_ := server.Contains(dbname) ;\n \n@@ -22,7 +22,7 @@\n \n func TestCreate(t *testing.T) {\n   clean(t);\n-  server := gocouch.NewServer(\"\u003ca href=\"http://127.0.0.1:5984\"\u003ehttp://127.0.0.1:5984\u003c/a\u003e\");\n+  server := NewServer(\"\u003ca href=\"http://127.0.0.1:5984\"\u003ehttp://127.0.0.1:5984\u003c/a\u003e\");\n   status, err := server.Create(dbname);\n   if err != nil || status == false {\n     t.Error(err.String());\n@@ -31,7 +31,7 @@\n \n func TestDelete(t *testing.T) {\n   clean(t);\n-  server := gocouch.NewServer(\"\u003ca href=\"http://127.0.0.1:5984\"\u003ehttp://127.0.0.1:5984\u003c/a\u003e\");\n+  server := NewServer(\"\u003ca href=\"http://127.0.0.1:5984\"\u003ehttp://127.0.0.1:5984\u003c/a\u003e\");\n   status, err := server.Create(dbname);\n   if err != nil || status == false {\n     t.Error(err.String());\n;\n\nI get this:\n\n; gotest\nrm -f _test/gocouch.a _gotest_.6\n6g -o _gotest_.6 gocouch.go    gocouch_test.go\nrm -f _test/gocouch.a\ngopack grc _test/gocouch.a _gotest_.6 \n--- FAIL: gocouch.TestCreate\n\tserver.create:dial tcp 127.0.0.1:5984: connection refused\n--- FAIL: gocouch.TestDelete\n\tserver.create:dial tcp 127.0.0.1:5984: connection refused\n\tserver.delete:dial tcp 127.0.0.1:5984: connection refused\nFAIL\n;\n\n\u003e Also, in general, I don't think that gotest should be so coupled with the \n\u003e go build system. If I'm writing a go program, I should be able to choose \n\u003e whatever build system I want, and still be able to use gotest for unit \n\u003e tests. \n\nThis is a nice ideal, but I doubt we will reach it.  Much of gotest's\nsimplicity is derived from the fact that it is integrated into and\nassumes the current build system.  I hope that before too long\nwe will be able to replace make with something that knows more\nabout Go, but then gotest will depend on the replacement.\n\nRuss\u003c/pre\u003e\n\n\n\n_Status changed to **Started**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-11-15T07:16:21Z",
	"updated_at": "2014-12-08T10:03:35Z"
}
