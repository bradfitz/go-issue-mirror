{
	"id": 66098582,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003eThe statement in your function is\n\n        return opts, flagSet.Parse(args[1:])\n\nThe function call flagSet.Parse(args[1:]) changes the value of opts.  So the result of\nthe return statement depends on the order in which Go evaluates \"opts\" and\n\"flagSet.Parse(args[1:])\".  I assume we can agree on that.\n\nYou now seem to be asserting that it is a bug that the program behaves differently on\nx86 and ppc64le.  However, for better or for worse, the order of evaluation in Go is not\nfully defined: see \u003ca href=\"http://golang.org/ref/spec#Order_of_evaluation\"\u003ehttp://golang.org/ref/spec#Order_of_evaluation\u003c/a\u003e .  In particular, the\norder of evaluation of a variable reference is not defined with respect to a function\ncall.  So the compiler is free to make different choices on different targets.  And it\ndoes.  This is not a bug.\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-16T14:18:38Z",
	"updated_at": "2014-12-08T10:48:13Z"
}
