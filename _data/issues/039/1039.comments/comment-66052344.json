{
	"id": 66052344,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eI am not inclined to break json.Unmarshal just to accept some buggy JSON found on the\ninternet.\nThe exact bug varies from producer to producer.  For example, in addition\nto the case you identified, some sites omit the [ ] around what should be\nan array containing a single object.  It's not possible to change the package\nto add a special case for every possible breakage on the internet.\n\nHowever, it *is* possible to write your own implementations of \njson.Unmarshaler that do handle the bugs.  For example, when I was\nplaying with Remember The Milk's JSON API a while back I wrote this code:\n\n// RTM sends bogus JSON arrays.\n// Introduce special types to work around the crappy input.\n// \u003ca href=\"https://groups.google.com/group/rememberthemilk-api/t/68d7a005d46dc391\"\u003ehttps://groups.google.com/group/rememberthemilk-api/t/68d7a005d46dc391\u003c/a\u003e\n\ntype tags []string\nfunc (p *tags) UnmarshalJSON(data []byte) os.Error {\n\tif data[0] == '[' {\n\t\treturn json.Unmarshal(data, (*[]string)(p))\n\t}\n\tvar resp struct {\n\t\tTag *json.RawMessage\n\t}\n\tif err := json.Unmarshal(data, \u0026resp); err != nil {\n\t\treturn err\n\t}\n\tif resp.Tag == nil {\n\t\treturn nil\n\t}\n\tif (*resp.Tag)[0] == '{' {\n\t\t*p = make(tags, 1)\n\t\treturn json.Unmarshal(*resp.Tag, \u0026(*p)[0])\n\t}\n\treturn json.Unmarshal(*resp.Tag, (*[]string)(p))\n}\n\ntype notes []*note\nfunc (p *notes) UnmarshalJSON(data []byte) os.Error {\n\tif data[0] == '[' {\n\t\treturn json.Unmarshal(data, (*[]*note)(p))\n\t}\n\tvar resp struct {\n\t\tNote *json.RawMessage\n\t}\n\tif err := json.Unmarshal(data, \u0026resp); err != nil {\n\t\treturn err\n\t}\n\tif resp.Note == nil {\n\t\treturn nil\n\t}\n\tif (*resp.Note)[0] == '{' {\n\t\t*p = make(notes, 1)\n\t\treturn json.Unmarshal(*resp.Note, \u0026(*p)[0])\n\t}\n\treturn json.Unmarshal(*resp.Note, (*[]*note)(p))\n}\n\ntype tasks []*task\nfunc (p *tasks) UnmarshalJSON(data []byte) os.Error {\n\tif data[0] == '[' {\n\t\treturn json.Unmarshal(data, (*[]*task)(p))\n\t}\n\t*p = make(tasks, 1)\n\treturn json.Unmarshal(data, \u0026(*p)[0])\n}\n\ntype taskLists []*taskList\nfunc (p *taskLists) UnmarshalJSON(data []byte) os.Error {\n\tif data[0] == '[' {\n\t\treturn json.Unmarshal(data, (*[]*taskList)(p))\n\t}\n\t*p = make(taskLists, 1)\n\treturn json.Unmarshal(data, \u0026(*p)[0])\n}\n\ntype taskSerieses []*taskSeries\nfunc (p *taskSerieses) UnmarshalJSON(data []byte) os.Error {\n\tif data[0] == '[' {\n\t\treturn json.Unmarshal(data, (*[]*taskSeries)(p))\n\t}\n\t*p = make(taskSerieses, 1)\n\treturn json.Unmarshal(data, \u0026(*p)[0])\n}\u003c/pre\u003e\n\n\n_Owner changed to **r...@golang.org**._\n\n_Status changed to **WorkingAsIntended**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-10-11T21:23:51Z",
	"updated_at": "2014-12-08T10:06:46Z"
}
