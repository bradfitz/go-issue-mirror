{
	"id": 170119995,
	"body": "Awesome.\r\n\r\nHere's the relevant readelf output for the cgo-generated source:\r\n\r\n```\r\n  Compilation Unit @ offset 0x0:\r\n   Length:        0x14c (32-bit)\r\n   Version:       2\r\n   Abbrev Offset: 0x0\r\n   Pointer Size:  8\r\n \u003c0\u003e\u003cb\u003e: Abbrev Number: 1 (DW_TAG_compile_unit)\r\n    \u003cc\u003e   DW_AT_producer    : (indirect string, offset: 0x7e): GNU C 4.8.4 -m64 -mtune=generic -march=x86-64 -gdwarf-2 -fstack-protector\t\r\n    \u003c10\u003e   DW_AT_language    : 1\t(ANSI C)\r\n    \u003c11\u003e   DW_AT_comp_dir    : (indirect string, offset: 0x5d): /home/austin/go.dev/austin/13039\t\r\n    \u003c15\u003e   DW_AT_stmt_list   : 0x0\t\r\n \u003c1\u003e\u003c19\u003e: Abbrev Number: 2 (DW_TAG_typedef)\r\n    \u003c1a\u003e   DW_AT_name        : AAA\t\r\n    \u003c1e\u003e   DW_AT_decl_file   : 1\t\r\n    \u003c1f\u003e   DW_AT_decl_line   : 4\t\r\n    \u003c20\u003e   DW_AT_type        : \u003c0x24\u003e\t\r\n \u003c1\u003e\u003c24\u003e: Abbrev Number: 3 (DW_TAG_pointer_type)\r\n    \u003c25\u003e   DW_AT_byte_size   : 8\t\r\n    \u003c26\u003e   DW_AT_type        : \u003c0x2a\u003e\t\r\n \u003c1\u003e\u003c2a\u003e: Abbrev Number: 4 (DW_TAG_structure_type)\r\n    \u003c2b\u003e   DW_AT_name        : aaa\t\r\n    \u003c2f\u003e   DW_AT_byte_size   : 8\t\r\n    \u003c30\u003e   DW_AT_decl_file   : 1\t\r\n    \u003c31\u003e   DW_AT_decl_line   : 6\t\r\n    \u003c32\u003e   DW_AT_sibling     : \u003c0x45\u003e\t\r\n \u003c2\u003e\u003c36\u003e: Abbrev Number: 5 (DW_TAG_member)\r\n    \u003c37\u003e   DW_AT_name        : val\t\r\n    \u003c3b\u003e   DW_AT_decl_file   : 1\t\r\n    \u003c3c\u003e   DW_AT_decl_line   : 6\t\r\n    \u003c3d\u003e   DW_AT_type        : \u003c0x45\u003e\t\r\n    \u003c41\u003e   DW_AT_data_member_location: 2 byte block: 23 0 \t(DW_OP_plus_uconst: 0)\r\n \u003c2\u003e\u003c44\u003e: Abbrev Number: 0\r\n \u003c1\u003e\u003c45\u003e: Abbrev Number: 2 (DW_TAG_typedef)\r\n    \u003c46\u003e   DW_AT_name        : BBB\t\r\n    \u003c4a\u003e   DW_AT_decl_file   : 1\t\r\n    \u003c4b\u003e   DW_AT_decl_line   : 5\t\r\n    \u003c4c\u003e   DW_AT_type        : \u003c0x19\u003e\r\n```\r\n\r\nThe cause of the problem is that the two typedefs at 0x19 and 0x45 participate in a cycle. We start reading at the 0x19 typedef, put it in the type cache, then start constructing its underlying type. At this point, its \"Type\" field is still nil. This reads the pointer type at 0x24, which reads the struct type at 0x2a, which reads the typedef at 0x45, which reads the typedef at 0x19. This is in the cache, so we return it immediately, but then the readType of the 0x45 typedef tries to get its size and crashes because the 0x19 Type field is still nil.\r\n\r\nI think we simply can't combine the steps of constructing the type graph and computing type sizes because these two steps may need to ground out at different points in cycles. Reading always terminates the cycle where it entered it, which is the 0x19 typedef here, but computing the size needs to terminate the cycle in a basic or pointer type, which is the 0x24 pointer here.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-08T20:48:42Z",
	"updated_at": "2016-01-08T20:48:42Z"
}
