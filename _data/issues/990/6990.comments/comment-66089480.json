{
	"id": 66089480,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eEven if we switch arg from strings.Fields to splitQuotedFields, it turns out we're\nalready using args after the action (\"run\") for args passed to the program itself\n(instead of the Go tool).\n\n                out, err := runcmd(append([]string{\"go\", \"run\", t.goFileName()}, args...)...)\n\ne.g.:\n\n$ cat $GOROOT/test/args.go\n// run arg1 arg2\n\n// Copyright 2009 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Test os.Args.\n\npackage main\n\nimport \"os\"\n\nfunc main() {\n\tif len(os.Args) != 3 {\n\t\tpanic(\"argc\")\n\t}\n\tif os.Args[1] != \"arg1\" {\n\t\tpanic(\"arg1\")\n\t}\n\tif os.Args[2] != \"arg2\" {\n\t\tpanic(\"arg2\")\n\t}\n}\n\n\n\nDo we want a different action, like \"runflags\"?  I don't think run.go and the shell\nrunner should know that -ldflags is special and takes on additional arg.\u003c/pre\u003e\n\n\n_Owner changed to @rsc._\n\n_Status changed to **WaitingForReply**._",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-01-17T22:24:08Z",
	"updated_at": "2014-12-08T10:38:54Z"
}
