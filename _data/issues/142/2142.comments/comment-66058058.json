{
	"id": 66058058,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eHi,\n\nthanks for the suggestion and leads! I'm currently using sparsetable from the sparsehash\nproject in the C++ version to manage up to 1\u0026lt;\u0026lt;32 pointers to variable length\nblocks. The overhead per block is 2.36 bits plus 8 bytes for the pointer itself on\n64-bit. It's effectively a huge hash table where the hashed value itself is discarded\nwith sparsetable being abused as a memory allocation manager! The hash table is slotted\nby ranges to allow multi-threaded access. Obviously there is the overhead of the malloc\nimplementation as well (tried tcmalloc, faster-but eats memory!). \n\nYour suggestion would involve writing a custom memory allocator which does sound like a\nmore difficult proposition :) I wonder if there's any internal Google projects to do\nwith threadsafe/goroutinesafe sparse hash tables in Go? I suppose the requirement is\nsome kind of bitmapped memory allocation with GC. All memory allocators need to\ndeallocate memory at some point anyway, so the question is who is best to do it :)\n\nCheers,\nDonovan.\u003c/pre\u003e",
	"user": {
		"login": "donovanhide",
		"id": 138108,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-04-16T14:09:12Z",
	"updated_at": "2014-12-22T06:02:20Z"
}
