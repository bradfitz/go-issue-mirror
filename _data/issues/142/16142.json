{
	"id": 161591587,
	"number": 16142,
	"state": "closed",
	"title": "net/url: getting the host[name] (or port) of a URL",
	"body": "For [the hstspreload.appspot.com code](https://github.com/chromium/hstspreload.appspot.com), I have found myself needing to do two things:\r\n\r\n- Tell if a request is from localhost.\r\n- Tell if the `Origin` header of a CORS request matches a certain hostname.\r\n\r\nI was disappointed to find that `url.URL` does not actually provide a direct way to get the *host*, as used in [the definition](https://tools.ietf.org/html/rfc6454#section-4) of web [origins](https://en.wikipedia.org/wiki/Same-origin_policy). This meaning of host sometimes goes by different names (e.g. hostname, domain), but it is simply called \"host\" for security-critical definitions in mechanisms like [HSTS](https://tools.ietf.org/html/rfc6797), [HPKP](https://tools.ietf.org/html/rfc7469), and [CSP](https://www.w3.org/TR/CSP/#source-list-syntax).\r\n\r\nIn addition, it is also not straightforward to get the port of a URL in Go.\r\n\r\n# Proposal\r\n\r\nI know that changing the meaning of `url.URL.Host` would break Go's [compatibility guarantee](https://golang.org/doc/go1compat). Therefore, would it be possible to do one of the following?\r\n\r\n- Add a `HostName` field to `url.URL`\r\n- Add one of the following to the standard library, possibly based on [http.canonicalAddr()](https://github.com/golang/go/blob/1f446432ddfd64f1507e7c85cd603d3c5ae60094/src/net/http/transport.go#L1862):\r\n  - A method in the `url` package: `url.URL.HostName()`\r\n  - A function in one of the packages under `net`: `HostName(u *url.URL) (string, error)`\r\n\r\n(Same ideas for `Port`.)\r\n\r\nI used the name `HostName` here as a parallel with Javascript (see below), but the exact name doesn't matter.\r\n\r\n# Status Quo\r\n\r\nThis is the current behaviour:\r\n\r\n    u, err := url.Parse(\"http://localhost:8080\")\r\n    fmt.Printf(\"%s\", u.Host) // \"localhost:8080\"\r\n    fmt.Printf(\"%s\", u.Port) // ERROR: doesn't exist.\r\n\r\nI understand that grouping the host and port can be convenient for some developers, and someone has pointed out to me that this matches the behaviour of Javascript, e.g. `location.host`. However, Javascript has solved this in a backwards-compatible way by offering `hostname` and `port` as additional fields:\r\n\r\n    var a = document.createElement(\"a\");\r\n    a.href = \"https://localhost:8080\";\r\n    console.log(a.host);     // \"localhost:8080\"\r\n    console.log(a.hostname); // \"localhost\"\r\n    console.log(a.port);     // \"8080\"\r\n\r\n    a.href = \"https://github.com\";\r\n    console.log(a.host);     // \"github.com\"\r\n    console.log(a.hostname); // \"github.com\"\r\n    console.log(a.port);     // \"\"\r\n\r\nIf I understand correctly, *there is no way to get the host of a URL in a straightforward and semantic way in Go*. By \"semantic\", I mean \"consistent with the  behaviour of the `net` and `url` packages, treated opaquely\".\r\n\r\n## A simple approach\r\n\r\nIf a developer wants to compare the host of a URL against an expected value, a simple solution that they might try is:\r\n\r\n    wantHost = \"localhost\"\r\n    u, err := url.Parse(\"http://localhost:8080\")\r\n    if strings.HasPrefix(u.Host, wantHost) {\r\n      fmt.Printf(\"okay!\")\r\n    }\r\n\r\nHowever, this is **completely insecure**. `google.com.phishing.evil.com` will match `wantHost == \"google.com\"`. Now, we can fix this by doing by forcing the comparison to include the colon iff there is one:\r\n\r\n    wantHost = \"localhost\"\r\n    u, err := url.Parse(\"http://localhost:8080\")\r\n    if u.Host == wantHost || strings.HasPrefix(u.Host, wantHost+\":\") {\r\n      fmt.Printf(\"okay!\")\r\n    }\r\n\r\nHowever, this requires an uncomfortable plunge into the semantics of `u.Host` when we just need a foolproof way to do a security check. I find that very uncomfortable.\r\n\r\nIn addition, I don't expect that developers will always follow this chain of reasoning to the end. Either out of accident or laziness, they may make assumptions that only one of `u.Host == wantHost` or `strings.HasPrefix(u.Host, wantHost+\":\")` is necessary for their use case. This is safe, but could introduce a bug. If their test conditions only ever have a case with a port (`localhost:8080`), or only without a port (say, from a form that accepts pasted URLs from users), the bug might linger for a long while.\r\n\r\n## A better approach?\r\n\r\nNow, let's say that the simple solution doesn't cut it for you. For example:\r\n\r\n1) You need to calculate the host of a URL rather than comparing it against something.\r\n2) You want a solution that does not make *any* assumptions about URLs that are not made by the core Go packages (URLs are complicated, so this is a good goal).\r\n\r\nOnce you have a parsed URL, you can try to use `net.SplitHostPort()`:\r\n\r\n    u, err := url.Parse(\"http://localhost:8080\")\r\n    host, port, err := net.SplitHostPort(u.Host)\r\n\r\nHowever, this will fail if you pass in a URL without a port:\r\n\r\n    u, err := url.Parse(\"http://github.com\")\r\n    host, port, err := net.SplitHostPort(u.Host)\r\n\r\n    // err is: \"missing port in address github.com\"\r\n\r\nNow, you could detect whether `u.Host` contains a `:`, and conditionally call `net.SplitHostPort(u.Host)` iff it doesn't, but I firmly believe that this is outside the scope of what a Go developer should be expected to do. It requires implementing handling two errors + a branch, and *still* requires a \"semantic plunge\", to use my terminology from before.\r\n\r\nTo me, it is also counterintuitive that one part of the core library (`url.Parse`) outputs a host+port field with an optional port, while another one (`net.SplitHostPort`) requires the port. I certainly made the mistake of assuming that it was okay to pass the the value from `url.Parse` to `net.SplitHostPort` â€“ I didn't catch the mistake in local testing because the input always had a port (`localhost:8080`), and it didn't show up in production because it was a rare place where I [fell back to the safe path without surfacing an error](https://github.com/chromium/hstspreload.appspot.com/blob/9dd1b69f0871e57bf04a4067dc2ba1819982b6b7/hstsserver.go#L25). Note that this concern also applies in cases where someone is trying to determine the port of a URL.\r\n\r\nAt this point, I've run out of good ideas for getting the host of a URL safely, using the standard libraries. Please do let me know if I've missed something. It might be the case that there is a great way to do this, and a simple update to [the `url.URL` comments](https://golang.org/pkg/net/url/#URL) would help someone like me figure out what to do if I want to get the actual host of a URL.\r\n",
	"user": {
		"login": "lgarron",
		"id": 248078,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 16,
	"closed_at": "2016-09-09T22:57:16Z",
	"created_at": "2016-06-22T04:29:23Z",
	"updated_at": "2016-09-09T23:30:40Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	},
	"reactions": {
		"total_count": 3,
		"+1": 3
	}
}
