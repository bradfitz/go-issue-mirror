{
	"id": 149085249,
	"number": 15347,
	"state": "closed",
	"title": "language:   \"iface\" keyword",
	"body": "\r\n# Proposal: \"iface\" keyword\r\n\r\nAuthor(s): Leszek Dubiel\r\nLast updated: 2016-04-20\r\n\r\n## Abstract\r\n\r\nGo's syntax is clean and compact, but still verbose. Keywords are short and idomatic -- `func` to define function, not a full word `function`, `var` for variable, `const` for constant. \r\n\r\nKeyword `interface` doesn't fit that rules and because it's long, reading programs that use lots of interfaces is hard. \r\n\r\nThis proposal **doesn't aim at reducing number of keystrokes, but to improve readability**. \r\n\r\n\r\n## Background\r\n\r\nLong `interface` keyword is very dominant: \r\n\r\n\tfunc Map(f func(interface{}) interface{}, xs []interface{}) []interface{} {\r\n\t\tvar ys = make([]interface{}, len(xs))\r\n\t}\r\n\ttype shape interface {\r\n    \t\tarea() float64\r\n\t}\r\n\r\nThis is easier to read: \r\n\r\n\tfunc Map(f func(iface{}) iface{}, xs []iface{}) []iface{} {\r\n\t\tvar ys = make([]iface{}, len(xs))\r\n\t}\r\n\ttype shape iface {\r\n    \t\tarea() float64\r\n\t}\r\n\r\nMore examples (http://bouk.co/blog/idiomatic-generics-in-go/): \r\n\r\n\tfunc Map(in interface{}, fn func(interface{}) interface{}) interface{} {\r\n\t\tval := reflect.ValueOf(in)\r\n\t\tout := make([]interface{}, val.Len())\r\n\t\r\n\t\tfor i := 0; i \u003c val.Len(); i++ {\r\n\t\t\tout[i] = fn(val.Index(i).Interface())\r\n\t\t}\r\n\t\r\n\t\treturn out\r\n\t}\r\n\t\r\n\tfunc Reduce(in interface{}, memo interface{}, fn func(interface{}, interface{}) interface{}) interface{} {\r\n\t\tval := reflect.ValueOf(in)\r\n\t\r\n\t\tfor i := 0; i \u003c val.Len(); i++ {\r\n\t\t\tmemo = fn(val.Index(i).Interface(), memo)\r\n\t\t}\r\n\t\r\n\t\treturn memo\r\n\t}\r\n\t\r\n\tfunc Filter(in interface{}, fn func(interface{}) bool) interface{} {\r\n\t\tval := reflect.ValueOf(in)\r\n\t\tout := make([]interface{}, 0, val.Len())\r\n\t\r\n\t\tfor i := 0; i \u003c val.Len(); i++ {\r\n\t\t\tcurrent := val.Index(i).Interface()\r\n\t\r\n\t\t\tif fn(current) {\r\n\t\t\t\tout = append(out, current)\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn out\r\n\t}\r\n\t\r\nversus: \r\n\r\n\tfunc Map(in iface{}, fn func(iface{}) iface{}) iface{} {\r\n\t\tval := reflect.ValueOf(in)\r\n\t\tout := make([]iface{}, val.Len())\r\n\t\r\n\t\tfor i := 0; i \u003c val.Len(); i++ {\r\n\t\t\tout[i] = fn(val.Index(i).Interface())\r\n\t\t}\r\n\t\r\n\t\treturn out\r\n\t}\r\n\t\r\n\tfunc Reduce(in iface{}, memo iface{}, fn func(iface{}, iface{}) iface{}) iface{} {\r\n\t\tval := reflect.ValueOf(in)\r\n\t\r\n\t\tfor i := 0; i \u003c val.Len(); i++ {\r\n\t\t\tmemo = fn(val.Index(i).Interface(), memo)\r\n\t\t}\r\n\t\r\n\t\treturn memo\r\n\t}\r\n\t\r\n\tfunc Filter(in iface{}, fn func(iface{}) bool) iface{} {\r\n\t\tval := reflect.ValueOf(in)\r\n\t\tout := make([]iface{}, 0, val.Len())\r\n\t\r\n\t\tfor i := 0; i \u003c val.Len(); i++ {\r\n\t\t\tcurrent := val.Index(i).Interface()\r\n\t\r\n\t\t\tif fn(current) {\r\n\t\t\t\tout = append(out, current)\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn out\r\n\t}\r\n\t\r\n\r\n## Compatibility\r\n\r\nAdd `iface` keyword that is an alias of `interface`. After a few years have passed add compiler warning about obsolete long `interface`. It would be backwards compatibile. \r\n\r\n",
	"user": {
		"login": "leszekdubiel",
		"id": 17785717,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "LanguageChange"
		},
		{
			"name": "Proposal"
		},
		{
			"name": "Proposal-Declined"
		}
	],
	"assignee": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"comments": 9,
	"closed_at": "2016-04-18T20:16:12Z",
	"created_at": "2016-04-18T08:47:59Z",
	"updated_at": "2016-04-18T20:16:12Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	},
	"reactions": {
		"total_count": 6,
		"-1": 6
	}
}
