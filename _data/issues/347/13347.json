{
	"id": 118154782,
	"number": 13347,
	"state": "closed",
	"title": "runtime: spell out rules for finalizers, and implement them",
	"body": "While finalizers are problematic in various ways, they are part of the runtime package.  The rules for finalizers are too vague.\r\n\r\nFor example, it is tempting to use them with C pointers.  Store the C pointer as a field in a Go struct, and put a finalizer on a pointer to the Go struct.  When the Go struct is finalized, free the C pointer.  Unfortunately, the very last time you use the Go object, it is dead as you are making the call with the C pointer.  There is technically nothing that prevents the finalizer from being called as you pass the pointer to C, so the finalizer can run and free the pointer before the C code gets a chance to execute.\r\n\r\nOne way to fix this problem would be for the compiler to force all receivers to be live until the end of a method.  Then a finalizer is safe if it is a method.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"comments": 10,
	"closed_at": "2016-05-18T20:42:57Z",
	"created_at": "2015-11-21T00:21:30Z",
	"updated_at": "2016-05-18T20:42:57Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
