{
	"id": 216040716,
	"body": "@dsymonds \r\n\r\n\u003e Reproducible builds only really matter at the binary (main) level\r\n\r\nWhilst I agree that for binaries it makes lots of sense to vendor everything, I question your point about reproducible builds not being relevant for libraries. \r\n\r\nSurely for the _developers of a library_ (group 1), having reproducible builds is important, as is ensuring a consistent development experience, i.e. everybody working from the same commit of external dependencies at a given point in time? In this situation, vendoring [per the Go 1.5 definition](https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit) is not the solution; GOPATH augmentation works best*. \r\n\r\nFor the _developers of binaries_ (group 2) that have various external library dependencies, I agree with you, it's down to them to vendor (Go 1.5 approach) as they wish. \r\n\r\nThe problem of working out what versions (commits) of external dependencies to use at a given point in time is common to groups 1 and 2. I'm not aware of any tooling that helps answer this question right now (where \"answer\" means _\"give me the latest compatible commits of all my external dependencies\"_, where \"compatible\" could be defined as _\"`go test ./...` has a zero exit code\"_)\r\n\r\nDealing with multiple copies of external dependencies in a given repository (imagine a repository that has `n` binaries and `m` libraries) is a related but orthogonal problem, and is the subject of this [proposal](https://docs.google.com/document/d/1n5y3mZPs_4PjI80a0vZEaHLe7r9PeiiE9xsIrQFT8Is/edit).\r\n\r\n_* incidentally, I've tried to sketch out what I mean by this approach [here](https://github.com/myitcv/go-symlink)_",
	"user": {
		"login": "myitcv",
		"id": 3374574,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-01T13:02:24Z",
	"updated_at": "2016-05-01T13:02:24Z"
}
