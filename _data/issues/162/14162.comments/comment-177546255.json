{
	"id": 177546255,
	"body": "Let's posit that the GC is perfect: every time an object is no longer referenced, it is freed immediately and thus available for reuse. In this case, my original proposal to reserve a buffer for use during OOM recovery makes recovery viable. Functions which expect to do large allocations register an interest in being notified that we had to eat into the emergency buffer. If any allocation fails and the reserved buffer is sitting there, the buffer is dereferenced and freed, notifications of \"we are running on reserve power\" are sent, and normal processing continues. The application can decide how big the reserve buffer is.\r\n\r\nMy proposal deals with the scenarios you describe.\r\n\r\nNote that my proposal is not an arms race with the GC. The underlying issue is not with the behaviour of the GC. The underlying issue is the lack of a backpressure mechanism. The core problem is that the application has no way to find out that memory is running low and no way to effectively react (stop all allocations which are likely to be large).",
	"user": {
		"login": "rgooch",
		"id": 9002662,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-31T16:42:22Z",
	"updated_at": "2016-01-31T16:42:22Z"
}
