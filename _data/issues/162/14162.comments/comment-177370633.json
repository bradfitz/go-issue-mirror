{
	"id": 177370633,
	"body": "1: I often run systems with overcommit off, because I would rather have the (C) application \"run out\" of memory a little earlier than have it killed when it starts using memory it was promised.\r\n\r\n2: If emergency stop-the-world garbage collection were to provide feedback to the application, this might be viable. If the feedback is in the form of a function the application can call to detect that STW GC was performed, it would have to be evaluated to determine how effective it is in practice. If there is not enough memory that can be garbage collected to fulfill the memory allocations before the next check, there will still be a panic. Some obvious examples would be a large make/append of a slice or a call to one of the encoders. On the other hand, if the feedback mechanism is to generate a recoverable panic(), it gives the application the ability to stop offending allocations even inside library code.\r\n\r\n3: If you read my opening email, I stated that the application recovery code would probably need to call runtime.GC().",
	"user": {
		"login": "rgooch",
		"id": 9002662,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-31T03:16:39Z",
	"updated_at": "2016-01-31T03:16:39Z"
}
