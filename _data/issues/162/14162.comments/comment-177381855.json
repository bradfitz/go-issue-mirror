{
	"id": 177381855,
	"body": "\u003e 1: I often run systems with overcommit off, because I would rather have the (C) application \"run out\" of memory a little earlier than have it killed when it starts using memory it was promised.\r\n\r\nInteresting. Does Go have any problems running with overcommit disabled? It may be that large PROT_NONE mappings don't count against committed memory (which would make sense, but they do count against ulimit -v, which does not make sense).\r\n\r\n\u003e 2: If emergency stop-the-world garbage collection were to provide feedback to the application, this might be viable. ...\r\n\r\nI don't think a recoverable panic is a technically viable solution for the reasons I mentioned in my comment (namely, allocations on system goroutines and system stacks), unless you're only interested in catching large failed allocations. So, what about the emergency GC approach? What sort of specific feedback would be useful to an application so it could scale to fit the resources in response to triggering emergency GCs? Would the latency of emergency GCs be a problem, or is taking a latency hit better than having the application die? Alternatively, could the runtime provide feedback or mechanisms that would be useful for staying under the memory limit, rather than trying to deal with the consequences once you've already run out (and is this only useful in a strictly single tenant system)?\r\n\r\n\u003e 3: If you read my opening email, I stated that the application recovery code would probably need to call runtime.GC().\r\n\r\nI did read your opening email (how else would I have replied?). I have now re-read it a few times and I think your penultimate paragraph is proposing \"yes\" to both of my questions: that GC would happen twice during the recovery (both at the beginning and at the end), and that the second time would be triggered by the application recovery code after it had unwound and dropped references. Am I interpreting your proposal correctly?",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-31T04:21:39Z",
	"updated_at": "2016-01-31T04:21:39Z"
}
