{
	"id": 146494896,
	"number": 15162,
	"state": "open",
	"title": "Proposal: allow importing of vendored package even not if not in the same subtree",
	"body": "Recent golang-dev discussion [https://groups.google.com/forum/#!topic/golang-dev/4FfTBfN2YaI]\r\nmentions a problem that a library package vendors a package and also expose the (API) interfaces\r\nfrom that vendored package in an exported interface.\r\n\r\nBecause outside packages can't import the vendored package, outside packages can't implement\r\nthe interface.\r\n\r\nHowever, vendored package is not supposed to be a mechanism to hide packages (we have\r\ninternal packages for that purpose), I propose that we make cmd/go allow importing of\r\nvendored package using the explicit import path (`\"path/to/pkg/vendor/pkgA\"`), unless the\r\nvendored package is also part of internal packages (`\"path/to/pkg/internal/vendor/pkgA\"`).\r\n\r\nThe rationale is that I think just forbidding library packages (as oppose to binaries) from\r\nvendoring packages is not going to work and there are legitimate reasons to vendor a\r\npackage in a library package. Importing a vendored package this way is equivalent to\r\nusing a certain version of a package chosen by the maintainer of the vendoring package,\r\nwhich also makes sense.\r\n\r\nThis change will also make vendoring and internal package more orthogonal (internal\r\nto control visibility, and vendor to provide a mechanism for import path rewrite).",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		},
		{
			"name": "Vendoring"
		}
	],
	"assignee": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"comments": 13,
	"created_at": "2016-04-07T02:57:00Z",
	"updated_at": "2016-09-26T23:27:26Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	},
	"reactions": {
		"total_count": 3,
		"+1": 3
	}
}
