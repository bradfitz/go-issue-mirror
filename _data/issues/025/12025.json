{
	"id": 99108474,
	"number": 12025,
	"state": "closed",
	"title": "reflect: DeepEqual fails for nested NaN values",
	"body": "\u003e What version of Go are you using (go version)?\r\n\r\ngo version go1.4 linux/amd64\r\n\r\n\u003e What operating system and processor architecture are you using?\r\n\r\nFedora Linux 20, 3.19.8-100.fc20.x86_64 #1 SMP kernel\r\n\r\n\u003e What did you do?\r\n\u003e What did you expect to see?\r\n\u003e What did you see instead?\r\n\r\nI tried to compare a map that contains NaN values for a fixed key using `reflect.DeepEqual` and the result was `true`. I expected `false` because two NaN values are never equal. `reflect.DeepEqual(math.NaN(), math.NaN())` is also false.\r\n\r\n\tpackage main\r\n\r\n\timport \"fmt\"\r\n\timport \"math\"\r\n\timport \"reflect\"\r\n\r\n\tfunc main() {\r\n\t\tfmt.Println(reflect.DeepEqual(math.NaN(), math.NaN()))\r\n\t\r\n\t\ta := map[string]float64{\"a\": math.NaN()}\r\n\t\tfmt.Println(reflect.DeepEqual(a, a))\r\n\t\r\n\t\tb := []float64{math.NaN()}\r\n\t\tfmt.Println(reflect.DeepEqual(b, b))\r\n\t}\r\n\r\noutputs:\r\n\r\n\tfalse\r\n\ttrue\r\n\ttrue",
	"user": {
		"login": "tgpfeiffer",
		"id": 873082,
		"type": "User",
		"site_admin": false
	},
	"comments": 19,
	"closed_at": "2015-12-11T05:50:21Z",
	"created_at": "2015-08-05T03:21:44Z",
	"updated_at": "2015-12-11T05:50:21Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
