{
	"id": 211929394,
	"body": "Having the goroutines attempting to help out early in the GC while roots\nare still being scanned seems like the problem. Fighting for a small amount\nof work at this point might not be efficient. In the case where the root\nscan is not complete and there are no work bufs available we could just\nallow the goroutine to go ahead and allocate. This is part of the larger\ndiscussion about what kinds of availability promises the Go GC wants to\nmake. At this point 200us is in the noise, hopefully it won't be in the\nnoise in the 1.8 timeframe.\n\n\n\nOn Tue, Apr 19, 2016 at 2:01 AM, Dmitry Vyukov \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e go version devel +318da8d Sat Apr 16 02:55:03 2016 +0000 linux/amd64\n\u003e\n\u003e I've looked at http benchmark trace:\n\u003e [image: trace]\n\u003e \u003chttps://cloud.githubusercontent.com/assets/1095328/14628858/f047c932-0601-11e6-8405-ce35de5bb539.png\u003e\n\u003e trace.zip \u003chttps://github.com/golang/go/files/225283/trace.zip\u003e\n\u003e\n\u003e At the beginning of marking all goroutines are both in debt and cannot\n\u003e scan anything (because GC goroutines are busy with roots and did not\n\u003e produce enough workbufs yet). So what happens is that all procs cycle\n\u003e through all runnable goroutines and park them on assistQueue. That's first\n\u003e 200us of GC with small goroutine boxes all blocking in gcAssistAlloc.\n\u003e\n\u003e gcAssistAlloc must be able to help with root scanning, because it may be\n\u003e the only available GC work. Switching to other goroutines makes small\n\u003e sense, because the first malloc will trigger assist and will bring us to\n\u003e where we started.\n\u003e\n\u003e Maybe it also makes sense to give goroutines some temporal credit in the\n\u003e beginning of GC. Currently we start concurrent phase just to force every\n\u003e goroutine to assist. If it turns out that we need aggressive assists, we\n\u003e can make up for it later. But in the expected case GC is triggered at such\n\u003e point that we don't need any assists. The idea is similar to\n\u003e https://go-review.googlesource.com/#/c/20969 but not black and white\n\u003e (GOGC=199 requires assists, while GOGC=200 does not need them entirely).\n\u003e\n\u003e You can also see that Proc 4 is idle for some reason and does not help GC.\n\u003e\n\u003e â€”\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/15361\u003e\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-19T13:47:19Z",
	"updated_at": "2016-04-19T13:47:19Z"
}
