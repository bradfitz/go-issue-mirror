{
	"id": 51281281,
	"number": 3871,
	"state": "closed",
	"title": "runtime, cgo: cgo call to setgid hangs on GNU/Linux",
	"body": "\u003cpre\u003eThis program hangs on GNU/Linux.\n\npackage main\n\n/*\n#include \u0026lt;sys/types.h\u0026gt;\n#include \u0026lt;unistd.h\u0026gt;\n*/\nimport \u0026quot;C\u0026quot;\n\nimport \u0026quot;fmt\u0026quot;\n\nfunc main() {\n\ti, errno := C.setgid(1)\n\tfmt.Println(i, errno)\n}\n\nThe problem is that when a threaded program calls setgid, the pthreads library sends a\nSIGSETXID signal to each thread, and waits for the thread to acknowledge it.  The Go\nruntime overrides the default signal handler with a Go-specific one.  Since the\nos/signal package is not imported, the Go-specific signal handler simply ignores\nSIGSETXID.  This means that the acknowledgement is never sent, and the program hangs.\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:20:27Z",
	"created_at": "2012-07-27T04:22:07Z",
	"updated_at": "2016-06-24T22:22:08Z"
}
