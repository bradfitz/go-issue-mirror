{
	"id": 125026007,
	"body": "Re Go's philosophy- we can have it out on IRC if you like. Tl;dr I think this philosophy is actively positive because it turns out people are fallible and computers are better at diligently checking things.\r\n\r\nI would be onboard with an `insecure`, although I suspect that the chances of upstreaming it are pretty slim for the compatibility reasons above.\r\n\r\nI mostly don't buy the argument that  people can't implement safe crypto primitives. It seems like conflating the concerns here. A password generator a perfect of an example that can be implemented safely by nearly anyone, but impossible to be implemented safely on top of a deterministically seeded RNG.\r\n\r\nI also get the impression from nearly everything about Go's stdlib that it's optimised for the 90% case, with the suggestion that if you're in the 10% outliers you might need to dig a bit more to do what you want (Or reconsider whether what you're trying to do is actually correct). That seems to me like given the state of entropy pools on modern systems, backing onto a CSPRG should be safe, and in the event that you **do** manage to exhaust the pool, or that your program because untenably slow you can seek out alternative solutions.\r\n\r\nIt seems to me that cases where you can't use system RNG, or have specific needs about it's entropy would always fall into the 10% case.",
	"user": {
		"login": "richo",
		"id": 476418,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-26T18:37:57Z",
	"updated_at": "2015-07-26T18:37:57Z"
}
