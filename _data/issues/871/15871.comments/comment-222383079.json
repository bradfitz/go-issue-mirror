{
	"id": 222383079,
	"body": "\u003e Would there be a reason to not do so?\r\n\r\nThere are several.\r\n\r\n1. The go release schedule is very strict. One version every 6 months, and 3 months of freeze before the release. Want to change something in your lockfree map implementation (performance improvements, bug fixing..) and publish the changes right away? You can't. You'll have to wait for the next go release. Only then the people using your code will get the new version.\r\n\r\n2. Maintenance. If you publish code as a library, it's your responsibility to maintain it. But the moment you add something to the language, it becomes everyone's responsibility. The original author loses interest? It doesn't matter: the go team (and the other contributors) will have to maintain the code (and fix bugs in the code) forever and ever.  \r\n\r\n3. Retro-compatibility. This is similar to 1, but about the design of the new feature. Want to change something? The API you designed could be improved? Extended in a non-retro-compatible way? Easy, in an external package: implement the change and publish a new version (maybe using SemVer to signal a breaking change). You can't do that for the core language. Once it's in, it stays in. Anything that was exposed to the public can't be changed or fixed.  \r\n\r\n4. The core language is more or less frozen. Finished. Done. [It has been for a few years](https://groups.google.com/d/msg/golang-dev/4XitbJPUa9A/cMLTasAWDgAJ).\r\n\r\nThe common wisdom is that unless you have very good reasons to request for something new to be part of the core language or the standard library, you should publish it in a go-gettable package.\r\n\r\nAre your proposed additions impossible or significantly harder to implement as a go-gettable package? What are the benefits of including them in the core language instead?\r\n\r\n\r\n\r\n",
	"user": {
		"login": "ALTree",
		"id": 3586803,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-29T21:14:18Z",
	"updated_at": "2016-05-29T21:19:29Z"
}
