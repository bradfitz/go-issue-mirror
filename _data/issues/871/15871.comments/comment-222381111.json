{
	"id": 222381111,
	"body": "@minux Would there be a reason to not do so? I hate to answer your question with a question, but overall, even if it goes mostly unused, an actual built-in type (optional and Go 1.0 compatible at that, I.E it doesn't break it so there's no harm), the fact that Go is inherently an concurrent language, then the ability to use a fundamental data structure such a hash map, concurrently, would only improve upon the language, wouldn't it? \r\n\r\nIf even a few people needed a high-performance concurrent data structure, and someone offered to do it for them (well tested and benchmarked), without breaking anything, why wouldn't it be accepted? \r\n\r\nThat's not the only thing I thought of doing however. If I can add a concurrent hash map, then perhaps other types of maps can be added for special occasions. I.E, printing all keys in a hash map in sorted order would be a lot less efficient than a tree map, and giving the user the option to do so, once again, without breaking compatibility, can only be a good thing. Quite a few other languages provide different data structures, why just have one? Etc.\r\n\r\nTo be fair, I'm going off on what my mentor wants me to do, and I also find this an interesting project to undertake.\r\n\r\nThanks for your suggestion about golang-dev, I'll definitely check that out.",
	"user": {
		"login": "theif519",
		"id": 4269990,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-29T20:31:51Z",
	"updated_at": "2016-05-29T20:31:51Z"
}
