{
	"id": 222387276,
	"body": "\u003e extend on the Garbage Collector to allow it to be lock-free\r\n\r\nThe GC is already geared towards avoiding pauses. See e.g. https://www.youtube.com/watch?v=aiv1JOfMjm0. So: why lock free? What is the end goal? You may find that the existing GC is already well on its way.\r\n\r\n\u003e extending on the language to allow marking the lower bits of pointers for a lock-free mark-and-sweep collection\r\n\r\nThe main Go compiler and runtime has generally declined to play bit-twiddling games. There are many temptations: tagged pointers for representing pointers to small ints, stealing the lower bits of pointers for GC, packing len and cap into a single word to shrink most slices to two words, and more. Doing such optimizations has big costs: It makes debugging harder, it makes understanding the compiler and runtime harder, it makes C interop harder, it makes writing assembly implementations harder. I suspect that it will never happen, but at the least, it will be a long time--all the low hanging fruit will have to go first, and all of the medium-hanging fruit too. :)\r\n\r\n\u003e I'm assuming this is even more likely to be rejected than the concurrent map because it changes EVERYTHING,\r\n\r\nWell, what is has going for it is that it involves no language changes. Implementation details are exactly the sort of thing that is changing now; see e.g. the new SSA backend in Go 1.7 and beyond. However, (a) the existing GC is fairly sophisticated and (b) the GC/compiler/runtime interaction is in my opinion easily the most complicated, intricate, difficult part of the implementation. That suggests that it is probably not a good place for a project that you aim to contribute back within a semester. It might make an interesting learning project, though.\r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-29T22:44:30Z",
	"updated_at": "2016-05-29T22:44:30Z"
}
