{
	"id": 250935437,
	"body": "\u003e \"If people want to use our processes, I think that a better approach is to find a way to use those processes outside of the project. That's a solution that scales much better.\" - @adg https://github.com/golang/go/issues/17244#issue-179371715\r\n\r\nRegarding my own proposal (#15406), the goal was to utilize the Go builders to test across multiple architectures. Making the tools accessible outside of the x/ packages (#17312) is a better solution than moving a package into x.\r\n\r\n\u003e \"It is actually a medium-term goal of mine to support third-party repositories\"  - @bradfitz https://groups.google.com/d/msg/golang-dev/SVrNHQU1oEM/b13BeZHVBwAJ\r\n\r\n--\r\n\r\n\u003e Putting something in the sub-repositories does not imply support. People are not more or less inclined to work on a package just because it's in a sub-repository.\" - @adg https://github.com/golang/go/issues/17244#issue-179371715\r\n\r\nCase in point, the `fsnotify` and `winfsnotify` packages in https://github.com/golang/exp haven't been updated in over 2 years. I've abandoned them in favour of the [fsnotify organization](https://github.com/fsnotify/fsnotify).\r\n\r\n--\r\n\r\n\u003e \"I think it would be better to have a scalable mechanism for identifying and maintaining good packages, and I don't see why that should be, or even can be, associated with golang.org/x.\" - @ianlancetaylor https://github.com/golang/go/issues/17244#issuecomment-249923601\r\n\r\nGodoc.org already provides a start. A [search for websockets](https://godoc.org/?q=websockets) ranks gorilla/websocket higher than x/net/websocket. It is imported more and has more stars on GitHub. \r\n\r\nYet people may gravitate towards the x/ package due to it's \"official\" status, even if gorilla/websocket [is faster](https://github.com/hashrocket/websocket-shootout/issues/9#issuecomment-244587799) and subjectively better:\r\n\r\n\u003e  This already happened with websocket, where the package in /x/net is not the best implementation, but people use it because it's there. - @adg https://github.com/golang/go/issues/17244#issuecomment-250603608\r\n\r\n--\r\n\r\n\u003e From my perspective, being able to work under an x allows me to reach out to the go approvers and this is what I care when I am designing ecosystem-wide core libraries for a niche topic. I don't think it is possible once the experimentation is not considered a part of the Go project. - @rakyll https://github.com/golang/go/issues/17244#issuecomment-250005746\r\n\r\nI see no technical reason why Go team members and other skilled gophers with the *time* and *interest* in a USB package couldn't provide code reviews and feedback to a package located under /rakyll or a /gousb organization.\r\n\r\n\u003e \"I think Gerrit might not be critical given Github PRs are becoming better.\" - @rakyll https://github.com/golang/go/issues/17244#issuecomment-250260049\r\n\r\nAgreed on that. From my perspective, GitHub has caught up with what advantages Gerrit once provided. https://groups.google.com/forum/#!msg/golang-dev/Tk1rSAdiz10/\r\n\r\n\u003e \"Shouldn't they be able to put their high quality code in a repo somewhere else, and have it be regarded just as highly as anything in /x? Code should be judged on its own merits, not by its location.\" - @adg https://github.com/golang/go/issues/17244#issuecomment-250009629\r\n\r\nAbsolutely.\r\n\r\n--\r\n\r\nInstead of proposing what should or shouldn't be in the subrepos, I'd personally like to see a series of proposals that remove any advantage of using the x/subrepos.\r\n\r\nThat includes making tools like the Go builders, Gerrit (for those who want it), and licensing (like [CLAHub](https://www.clahub.com/)) available to Git repositories anywhere.\r\n\r\nIt also means improving discovery. A curated list still isn't scalable, but I've read several mentions of reviews and ratings in this thread. There are other metrics, like number of imports, GitHub stars, passing tests, test coverage, and linting (lint/vet/fmt). Whether as part of GoDoc.org or a separate endeavour, I think discovering the best packages can be solved in a scalable way the embraces the whole community.\r\n\r\nThere is no reason why the Go team should be responsible for vetting all the foundational libraries for Go. The Go community is filled with intelligent people with a wide range of experience. Resources like [CodeReviewComments](https://github.com/golang/go/wiki/CodeReviewComments) encourage more gophers to use good practices. What else can be done in the area of education?\r\n\r\nUltimately, I'd like to see less of a divide between how the Go team and the larger Go community operate, with everyone having access to the best tools.\r\n\r\nInstead of placing demands on the Go team through the x/ subrepos, why don't we give the Go team space and as much help as we can? Allow them to [be involved in and with the community](https://gobot.io/blog/2014/04/29/taking-the-stage-at-gophercon/) wherever their interests lay.",
	"user": {
		"login": "nathany",
		"id": 4566,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 8,
		"+1": 5,
		"heart": 3
	},
	"created_at": "2016-10-01T20:25:03Z",
	"updated_at": "2016-10-01T22:47:43Z"
}
