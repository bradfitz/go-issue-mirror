{
	"id": 250160399,
	"body": "I largely agree with Quentin here. In my experience, having a solid base of fundamental libraries is key to being productive in a language. Look at Java, Objective-C/Swift, .Net.  All have comprehensive standard libraries. \r\n\r\nadg's reasons for inclusion have a lot of positive sides too:\r\n\r\n1. (1): Stability: having an \"official\" package gives assurances it won't be replaced by a new \"blessed\" one willy nilly. Go's adoption started taking off after the 1.0 guarantees were given. Stability of fundamental packages matters as well. urllib2 debacles should be rare and are an acceptable collateral damage.\r\n1. (1): Efforts: having \"official\" packages guides efforts towards such packages, instead of across competing standards.\r\n1. (4, 5): Consistency: having some standard review process and inclusion process is more likely to lead to uniformity of API than a selection of best-of-bread sources.  It is easier to enforce consistencies on third-party contributors if a \"golang.org\" stamp is to be given.\r\n1. (2): Support: The golang.org stamp could assure hosting, an initial blessing of API and providing standard policies.  It does not have to mean active support from the Go team. This can come from the community.\r\n1. (3): Branding/Trust: The golang.org is a brand. For a newcomer considering Go, core functionality consisting of a list of blessed package will not nearly instill as much confidence as a list of official packages providing the same.\r\n1. (1): Availability: Ever had a high-quality package disappear on you? I have. \r\n1. Commercial: I think many businesses will not adopt Go if fundamental functionality only exists in the form of no-guarantee, blessed packages with inconsistent licenses, guarantees of  API stability, etc.\r\n\r\nI understand that the Go team does not have enough cycles. But in my opinion, a blessed package model doesn't scale for users and will hamper Go adoption.  \r\n\r\nThe solution, I think, should come from scaling the subrepo approach, maybe by using a hybrid form. Here are some thoughts:\r\n\r\n0. There would be 3 groups of subrepos:\r\n    * 2 and 3: Go-team (and contributors) internal infrastructure.\r\n    * 1 and 4: semi-blessed/ official tools and packages, what roughly would be part of a standard \r\n       release for other languages.\r\n    * Experimental, including mobile, exp, but possibly also counterparts to x repos with experimental packages.\r\n1. The golang.org/x \"official\" repos would give some guarantee of having gone through a process and quality control, without necessarily having support of Go-team members.\r\n2. To limit the number of proposals, the kind of repos/packages that can make it in should be reasonably well-defined. A guide could be what other languages/frameworks provide.\r\n3. The Go team would still have a list of blessed repos. Blessed repos with fundamental functionality could make it official after some trial. This also gives more weight to blessed repos.\r\n4. Proposals to include something in golang.org/x should be more of the from \"please include this existing repo\" rather than \"please implement this repo\".  A reply to a proposal could be suggestions to API changes or other tweaks.\r\n5. Short of that, an answer to a proposal could be, \"Sure we suggest someone implements it in experimental and if certain criteria are met it will be included in official\".\r\n7. Each repo has a group of maintainers and approvers which may be outside of the Go team .\r\n8. There could be some way to review Important API changes by a mixed Go and external team. (Note that, as Quentin suggested, there would not be many more packages in x).\r\n9. Different repos may have different SLAs, but are required to have one.\r\n10. Repos in x could have some automated enforcement like ensuring a stable API surface, code coverage, linter, perhaps, not losing performance on benchmarks, etc.\r\n11. golang.org/x repos could be required to adhere to a stricter style guide than one would usually impose as a requirement on \"blessed\" packages.\r\n\r\nTo have a good quality list of \"blessed\" packages will either be also a lot of work (verifying APIs of probably more packages than you would normally include in an x subrepo), or it will inherently mean it will be of lesser quality than an official list. If it _is_ of the same quality, it still can never instill as much trust as confidence as an \"official\" list, unless we include \"blessed\" packages in an official release, which seems even more work to me. Even worse, never having had \"official\" subrepos is one thing, but giving them up is a clear signal of throwing in the towel. So to me, trying to reduce/spread the burden of maintaining golang.org, rather then shedding it, seems crucial.",
	"user": {
		"login": "mpvl",
		"id": 6445383,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-28T13:04:49Z",
	"updated_at": "2016-09-28T13:04:49Z"
}
