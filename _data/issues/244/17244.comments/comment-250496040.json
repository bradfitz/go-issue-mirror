{
	"id": 250496040,
	"body": "If the problem is burnout, then consider there is a hidden cost to the \"trusted\" approach. People need to be responsible to train, mentor, and guide newly \"trusted\" individuals into doing the right thing, at least to the existing standards, to the point where eventually they need no oversight. This will introduce some lag time initially as those who train the new folks will be pulling something of a double duty.\r\n\r\nYou might say that only folks who don't need oversight would be picked, but this is not realistically possible. The greatest engineer in the world still has ramp up moving into a new system or a new codebase.\r\n\r\nUltimately, I disagree with seeing Go get \"smaller\" as a result of these issues. I want to see Go get bigger. I want a standard library (even if it has different tiers of service or guarantees) that feels large and inclusive. Especially with Go, where the community ethos is always to do as much as possible with the stdlib before reaching out to a dependent library.\r\n\r\nSolving the human cost issues and making it so these things aren't so taxing on the current team (whether that is a process change, the \"trusted\" approach, or some other solution) sound a lot more palatable in nature to me, someone who uses the language and wants to continue to see it grow, than the alternatives.\r\n\r\nBut i recognize that the reason why the core maintainers want it smaller is because it is likely _exhausting_ to try and keep up with all of these changes / proposals / etc. But in my (likely uninformed) opinion, closing off or making it harder to put new things into the stdlib is a step backwards. The strongest part of Go is the community itself, and the community desperately wants to be involved in helping to shape the future of the language.",
	"user": {
		"login": "StabbyCutyou",
		"id": 1528618,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-29T15:13:41Z",
	"updated_at": "2016-09-29T15:13:41Z"
}
