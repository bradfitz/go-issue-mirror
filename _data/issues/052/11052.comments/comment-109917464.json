{
	"id": 109917464,
	"body": "FYI: All the shells shipped with OS X, including `zsh`, work fine with `/etc/paths.d`, and your installer is probably fine. Like Stuart says, this is an issue specifically with oh-my-zsh. The OMZ installer modifies the installing user's `~/.zshrc` in a way that breaks `/etc/paths.d`, by clobbering `$PATH` with a static copy of its value as of the time of installation. The symptoms of this are that later-installed programs that use the `/etc/paths.d` mechanism will not be picked up for that user. \r\n\r\n(Prezto probably \"works\" just by undoing the OMZ breakage. Installing OMZ or fixing the user's `~/.zshrc` should work too.)\r\n\r\nIf you run in to this in the future, first thing to do is probably check for OMZ and/or a broken `~/.zshrc` or other user shell rc file. The paths from `/etc/paths.d` are added by the system-wide `/etc/zshenv`, `/etc/profile`, or `/etc/csh.login` rc files. If the user's shell rc file sets the path like the following, but does not include `$PATH` itself, that breaks inheritance of the system-wide path definitions.\r\n\r\n```shell\r\n# BUG! This will break /etc/paths.d\r\nPATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/texbin:\r\n# Okay:\r\nPATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/texbin:$PATH\r\n```\r\n\r\nI don't know what the issue with `bash` would be. (Unless you were getting in to `bash` by running a non-login `bash` from within a broken `zsh` session, which would have just inherited this `~/.zshrc` breakage?)",
	"user": {
		"login": "apjanke",
		"id": 2618447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-08T08:57:20Z",
	"updated_at": "2015-06-08T08:57:26Z"
}
