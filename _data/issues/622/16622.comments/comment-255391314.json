{
	"id": 255391314,
	"body": "Thanks @kostya-sh for helping to clarify this and for the repo.\n\nTo restate the problem, the issue is:\n\n1. We have code x/y that imports x/y/internal/z. This works.\n2. We add x/vendor/x/y/internal/z.\n3. Now x/y's import of x/y/internal/z is interpreted as really meaning x/vendor/x/y/internal/z, but the rules for \"internal\" visibility disallow that.\n\nThis follows from the definitions of internal and vendor.\n\nThe definition of internal is intentionally about source directory location and not about comparing just import paths. If you have $GOPATH1/src/internal/foo then $GOPATH2/src/bar is not allowed to import \"internal/foo\" even though $GOPATH1/src/quux is. It is also intentional that internal's definition does not mention vendor, and vendor's definition does not mention internal. They are independent concepts.\n\nI understand that this case shows they interact in an unexpected way, but if we make an exception then they will interact in different unexpected ways. I don't think there's an obvious \"everything is simple now\" solution, so I would prefer to avoid introducing new special cases.\n\nI am not sure that internal is doing much work in the example. It might be best to rename the repo to something like base, core, common, lib.\n\nIf this keeps coming up in other contexts we can revisit. But for now I'd like to be conservative and leave things alone.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-21T14:25:26Z",
	"updated_at": "2016-10-21T14:25:26Z"
}
