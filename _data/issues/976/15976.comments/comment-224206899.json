{
	"id": 224206899,
	"body": "It is intended behavior in the sense that calling `t.Error` or `t.Fatal` *after* the Test function has returned was *undefined* behavior. If you think about it, there is a no sensible action in this situation other than to complain loudly. If we were to ignore the `Error` (as in 1.6 behavior), that leads to tests that may mistakenly report pass, when it was intended that they fail. If we were to allow `Error` after the `Test` function returned, then the tests may pass or fail in non-deterministic ways, especially if the `Test` in question happened to be the last `Test` run.\r\n\r\nThus, correct Go tests must ensure that they don't call `Error` or `Fatal` after the `Test` completes.",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-07T07:55:04Z",
	"updated_at": "2016-06-07T07:55:59Z"
}
