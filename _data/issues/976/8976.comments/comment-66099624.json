{
	"id": 66099624,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eIn a previous job I spent a lot of time on timekeeping stuff. I'm of the mind that for\nnewer intel CPUs (basically all of the 64bit cpus) RDTSC _can_ be guaranteed to at least\nbe monotonically increasing at a given rate, irrespective of changing of power\nmanagement and clock speeds. This is a good thing.\n\nHowever, when you have multiple cores on a die, or multiple cpu packages on a machine,\nRDTSC is not guaranteed to report a monotonically increasing value. That is, if you call\nRDTSC and then your thread is rescheduled onto another core, the second RDTSC\ninstruction _may_ report a value which is slightly behind the first (where slightly is\nin the scale of a small % of a counter moving in the gigahertz range).\n\nMy knowledge of this is about three years out of date, but when I looked into the linux\nkernel code, it is not possible to set the TSC counter accurately so the linux kernel\ncan only zero the counter across each CPU as it is coming online, which gets the\ncounters close (again with a % of something free running in the ghz range). \n\nAt the time the PPTP software I was using ran in kernel mode and pinned itself to one\nCPU core thereby eliminating a potential that TSC counters may drift between cores or\nmay not be monotonic with respect to other cores.\n\nThis also explains why the build is failing on the smartos solaris builder, but not on\nthe sol11 builder, the former is running on real hardware, a big machine with multiple\nsockets, where the latter is running inside vmware which goes to some lengths to 'fix'\nRDTSC by virtualising the isntruction.\u003c/pre\u003e",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-10-21T20:45:00Z",
	"updated_at": "2014-12-08T10:49:22Z"
}
