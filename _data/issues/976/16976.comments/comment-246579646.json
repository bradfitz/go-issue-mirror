{
	"id": 246579646,
	"body": "I was thinking about having append expand into unused space,\nbut now I understand it's both difficult to implement (because\nour gc bitmap doesn't keep track of the object boundary at\nbyte granularity), and also hard to implement efficiently (because\nexpanding backing array into unused space will result in a race\nif more than one goroutine tries to expand one slice, which result\nin unnecessary contention.)\n\nExpanding the make syntax for slices doesn't mean we also have\nto accept the new syntax for other makeable types (channel, map)\ntoo. For example, the make([]T, len, cap) has no directly counterpart\nfor make(chan T, cap), make(map[K]V, init_cap). That being said,\nI still think it ties the language to the implementation too tight and\nthe spec can't guarantee anything about what the capacity for\nmake([]int, N, ...) would be (except that it's \u003e= N).\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-13T05:38:09Z",
	"updated_at": "2016-09-13T05:38:09Z"
}
