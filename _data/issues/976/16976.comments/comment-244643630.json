{
	"id": 244643630,
	"body": "@robpike I admit it is tricky, but before I put this proposal together, I actually tried it expecting the described behavior.  It has always been an expectation of mine that `append` would return a slice with the appropriate capacity.  That it did not return one with no extra args was the surprising part.   \r\n\r\nAs for revealing implementation details:  I think your argument would be stronger if it was earlier in the history of Go, when the runtime was changing more often.  There is still performance on the table, and the alternative I think would be overall worse:  copy pasting the current buffer allocation scheme.  Once people do this, they will either be locked into it and miss out as the allocator evolves, or have to check the Go minor version to pick which copy of the allocator to use.  By not doing inside Go, you don't stop it from happening; you just force it into everyone's application, and badly.  The application and the runtime need to align at least somewhat to not waste CPU cycles. The implementation details eventually become the API for better or worse.  ",
	"user": {
		"login": "carl-mastrangelo",
		"id": 8943572,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-05T01:57:44Z",
	"updated_at": "2016-09-05T02:06:43Z"
}
