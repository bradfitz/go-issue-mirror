{
	"id": 185990648,
	"body": "\u003eI really don't want to accept spaces, and I really don't want to add new API surface to whitelist broken things.\r\n\r\nI agree. I guess the question I was posing here is: are we OK in saying we do not wish to support older specifications that do not implement this HTTP restriction? I'm thinking about cases where these specs were written when this wasn't explicitly forbidden. My example of the Chef server being one of them.\r\n\r\n\u003ehttp2 is explicitly against this too. Would Chef 11.x ever use http2 in any sort of deployment?\r\n\r\nUnfortunately, I can't speak on behalf of the Chef community. But to spitball, I don't believe they would, no.\r\n\r\n\u003eWhat if we just explicitly whitelist Hashed Path? That's gross, but so is everything else.\r\n\r\nWe could whitelist it, I suppose. It feels absolutely gross, and I'd probably shy away from it. I would *not* want to litter the stdlib with things like that. If we did decide to go the whitelist route, that still leaves Go in a state that may be broken for other projects. If we're going to whitelist one non-compliant header, we should give the ability for others to do the same. But then there goes more in to the `net/http` package.\r\n\r\n\u003eAlternatively we do nothing and say if you don't want to upgrade from Chef 11 to Chef 12, don't upgrade from Go 1.5 to Go 1.6 either and keep your old software stack old. (kinda joking, but kinda not)\r\n\r\nMaybe. We use the Goiardi project listed above, and it works well for us in specific cases where we don't want to stand up a Chef server with all of its dependencies. We do want to upgrade to Chef 12, there are just a lot of yaks in the way. This may be bigger than just the Chef project, but it just so happened to be the case where I ran in to it.",
	"user": {
		"login": "theckman",
		"id": 787332,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-19T00:23:09Z",
	"updated_at": "2016-02-19T00:25:13Z"
}
