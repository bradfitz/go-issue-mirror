{
	"id": 51289227,
	"number": 9201,
	"state": "open",
	"title": "sync: prohibit unlocking mutex in a different goroutine",
	"body": "\u003cpre\u003esync.Mutex allows lock/unlock in different goroutines:\n\n\u003ca href=\"http://golang.org/pkg/sync/#Mutex.Unlock\"\u003ehttp://golang.org/pkg/sync/#Mutex.Unlock\u003c/a\u003e\n\u0026quot;A locked Mutex is not associated with a particular goroutine. It is allowed for\none goroutine to lock a Mutex and then arrange for another goroutine to unlock it.\u0026quot;\n\nAnd the same for RWMutex:\n\u003ca href=\"http://golang.org/pkg/sync/#RWMutex.Unlock\"\u003ehttp://golang.org/pkg/sync/#RWMutex.Unlock\u003c/a\u003e\n\nThe possibility to unlock the mutex in a different goroutine is very rarely used in real\ncode. And if you really need something more complex than lock/unlock in a single\ngoroutine, you can always use channels.\n\nBut it creates several problems:\n1. Deadlock detection becomes impossible, as there is no notion of \u0026quot;critical\nsections\u0026quot;.\n2. Similarly static lock annotations becomes impossible for the same reason.\n3. Optimizations like hardware lock elision (see e.g. Intel HLE) become impossible.\n\nWe should prohibit possibility to unlock in a different goroutine in Go2.\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Go2"
		}
	],
	"comments": 17,
	"created_at": "2014-12-04T08:50:11Z",
	"updated_at": "2015-04-14T19:45:25Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
