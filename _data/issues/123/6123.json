{
	"id": 51284710,
	"number": 6123,
	"state": "closed",
	"title": "sync: mutex.TryLock",
	"body": "\u003cpre\u003eThis has come up several times on the mailing list. Looking for something like this to\nbe provided in sync.Mutex:\n\nfunc (m *Mutex) TryLock() (locked bool) {\n\tlocked = atomic.CompareAndSwapInt32(\u0026amp;m.state, 0, mutexLocked)\n\tif locked \u0026amp;\u0026amp; raceenabled {\n\t\traceAcquire(unsafe.Pointer(m))\n\t}\n\treturn\n}\n\nNow you could use CompareAndSwapInt32 yourself. But it gets tricky when you need to use\nLock in one function, and TryLock in another on the same mutex.\n\nThe typical use-case is something like this:\n\nif m.TryLock() {\n    // do something\n} else {\n    // do something else\n}\n\nIt's very similar to select default for channels:\n\nselect {\ncase \u0026lt;-c:\n// do something\ndefault:\n// do something else\n}\n\nThe difference being that with such a function you can do this with a primitive.\n\nOther languages provide this functionality:\n\nJava:\n\u003ca href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Lock.html#tryLock()\"\u003ehttp://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Lock.html#tryLock()\u003c/a\u003e\nObjective-C:\n\u003ca href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSLock_Class/Reference/Reference.html#//apple_ref/occ/instm/NSLock/tryLock\"\u003ehttps://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSLock_Class/Reference/Reference.html#//apple_ref/occ/instm/NSLock/tryLock\u003c/a\u003e\n\nA \u0026quot;LockBeforeTime\u0026quot; would also be useful, but I understand that's more\ndifficult to implement.\u003c/pre\u003e",
	"user": {
		"login": "lukescott",
		"id": 486224,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 20,
	"closed_at": "2014-12-18T01:44:31Z",
	"created_at": "2013-08-12T22:30:59Z",
	"updated_at": "2016-07-18T19:45:13Z"
}
