{
	"id": 250212167,
	"body": "If you don't mind me asking: when I first read the context package docs, I assumed I would do something like this to have per-request database transactions associated with per-request contexts:\r\n\r\n```\r\nfunc (h *MyHTTPHandler) ServeHTTP(w http.RequestWriter, r *http.Request) {\r\n    ctx := context.Background()\r\n    tx, err := globalDBConn.Begin()\r\n    if err != nil { /* report error and return */ }\r\n    ctx = context.WithValue(ctx, \"tx\", tx)\r\n    err = h.realHandle(ctx, w, r)\r\n    if err != nil { tx.Rollback(); /* report error */ }\r\n    err = tx.Commit(); // and so on\r\n}\r\n```\r\n\r\nAm I wrong about this, given all these new methods? I admittedly don't quite get what a context *should* store, apart from the general \"request-scoped values\".",
	"user": {
		"login": "andlabs",
		"id": 718242,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-28T15:59:23Z",
	"updated_at": "2016-09-28T16:01:19Z"
}
