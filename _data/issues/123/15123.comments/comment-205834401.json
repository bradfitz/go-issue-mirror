{
	"id": 205834401,
	"body": "I like @pbnjay's idea of having tying contexts into Tx -- even if we have to add a way to \"begin\" a fake transaction, or create an interface that `*sql.Tx` will be made to implement, and which is additionally consumed for non-transactional database contexts.\r\n\r\nWith the \"magic first argument\" behavior, there are too many open questions. What happens if a user passes in a first argument that implements both `driver.Value` _and_ `context.Context`? There is already also the open question about whether it should be the first or last value, and users will have the same question (and make mistakes which may pass silently, depending on how much validation the driver does). The only way to find out if a context with a 5 minute deadline is actually being used for query aborts is to construct a query that takes 5 minutes.\r\n\r\nAlso, users may infer that multiple contexts may be passed in (whichever is cancelled first), or have subtle bugs that didn't occur before but can occur now, such as sorting the parameter `[]interface{}` for a generated \"IN\" query, say for debugging clarity, in a wrapper in front of Query/Exec.\r\n\r\nI don't think we need a parallel API, but we can shift the proposal to a couple new methods that flow into the existing API (and don't sacrifice type-safety).",
	"user": {
		"login": "extemporalgenome",
		"id": 536740,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-05T14:31:34Z",
	"updated_at": "2016-04-05T14:32:45Z"
}
