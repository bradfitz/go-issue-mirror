{
	"id": 66083847,
	"body": "\u003ca id=\"c10\"\u003e\u003c/a\u003eComment 10:\n\n\u003cpre\u003eIMHO TryLock (let me stick to the OP's proposed name to not add confusion) is a\nreasonable thing to have. But only in a classical, old school world of threads. Threads\nare expensive. Both to create and to switch context to. Whenever there's an option to\nblocking such expensive thing and do whatever useful instead, then it buys better\nresource allocation - hopefully. However, this is sort of a manual scheduling. Or at\nleast scheduling \"hint\".\n\nIn the \"new\" world composed of goroutines the above doesn't hold anymore. Goroutines are\ncheap. Both to create and to switch context to. When a goroutine gets blocked, no drama\nhappens. Typically there are other goroutines in the ready state available for\nscheduling. If not, the process sleeps, but that's what good processes are expected to\ndo when idle b/c of blocked on I/O, timer, ...\n\nAlso, \"explicit\" scheduling by blocking on mutexes or channel operations is more easily\nreasoned about than is the case of a goroutine which tries to get a lock, in which case\nit does Foo, but if that fails it performs Bar.\n\nConclusion: I think that adding TryLock encourages programming practices obsolete from\nthe Go execution model POV (like eg. busy waiting). Make your goroutines simple; doing\none thing and doing it well. It'll save you headaches while bug hunting.\n\n-1 from me.\u003c/pre\u003e",
	"user": {
		"login": "cznic",
		"id": 729580,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-13T07:36:55Z",
	"updated_at": "2014-12-08T10:33:40Z"
}
