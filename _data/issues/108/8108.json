{
	"id": 51287685,
	"number": 8108,
	"state": "closed",
	"title": "non-uniform compiler behavior",
	"body": "by **egor.shalashnikov**:\n\n\u003cpre\u003eIn \u003ca href=\"http://golang.org/doc/effective_go.html#pointers_vs_values\"\u003ehttp://golang.org/doc/effective_go.html#pointers_vs_values\u003c/a\u003e it says that:\n\n\u0026quot;The rule about pointers vs. values for receivers is that value methods can be\ninvoked on pointers and values, but pointer methods can only be invoked on pointers.\nThis is because pointer methods can modify the receiver; invoking them on a copy of the\nvalue would cause those modifications to be discarded.\u0026quot;\n\nBut this is seems true only for the interfaces. For an ordinary functions call, it seems\ncompiler doesn't care about whether it is a pointer to struct or a just a struct value:\n\u003ca href=\"http://play.golang.org/p/P_BNt8SoNN\"\u003ehttp://play.golang.org/p/P_BNt8SoNN\u003c/a\u003e\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:44:58Z",
	"created_at": "2014-05-27T21:15:11Z",
	"updated_at": "2016-06-25T01:35:24Z"
}
