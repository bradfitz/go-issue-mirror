{
	"id": 111904950,
	"body": "Yes, sorry, I misspoke: GOMAXPROCS sets a limit on the number of concurrently running threads of execution, not on the number of goroutines.\r\n\r\nThe Go runtime only permits one thread to execute fork at a time, so the number of concurrent calls to fork should be irrelevant.  What matters is that a single thread should not hang in fork, because there should always be another thread available to serve the FUSE request.\r\n\r\nI don't know the details of how FUSE works in Go.  I assume that some goroutine is sitting around waiting for FUSE requests.  Can you find that goroutine the stack dump?  Why is it not ready to handle the request?\r\n\r\nI can't help but notice that the exec appears to have been invoked by a call to unmount within the FUSE library.  It is possible that the FUSE library is in effect deadlocking against itself?",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-15T02:39:41Z",
	"updated_at": "2015-06-15T02:39:41Z"
}
