{
	"id": 66077040,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6 by **tylor@torbit.com**:\n\n\u003cpre\u003e\u003e\u003e \"I'm inclined not to say anything.\"\n\nPerhaps having a matrix/table laying out the exact number for each arch/platform is\nexcessive (although I think it sounds extremely useful), I think something needs to be\nsaid.\n\nTake x86_64/linux for example, unless I am mistaken as of 1.0.3 the maximum heap size is\n8 GB; that is so low I know it has caused some potential users of Go to defer using Go\nin production. I believe Go 1.1/x86_64/linux supports up to 128 GB of heap. The\ndifference is between 8 GB and 128 GB is the difference between many programs not having\nenough heap for their working sets and having so much more possible heap that many users\ndon't even have enough memory to back it.\n\nA compromise? What about saying something like this in the notes?\n\n\"Many platforms have had significant increases in the maximum amount of assessable heap\nmemory. For example, Go 1.1 on Linux/amd64 supports up to 128 GB of heap whereas the\nprevious stable Go release, 1.0.3, only supported 8 GB.\"\n\nThe logic here is that people in the community and potential Go users will at least be\naware there have been major changes in regards to maximum memory and can investigate\nfurther if desired.\n\nMy apologies if my understanding of the situation is flawed.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-04-02T03:52:44Z",
	"updated_at": "2014-12-08T10:27:36Z"
}
