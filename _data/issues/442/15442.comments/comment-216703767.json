{
	"id": 216703767,
	"body": "The GC needs to preempt a goroutine in a timely fashion. Preemption happens\nat GC safepoints which include function calls as well as various channel\nand scheduler commands. If the time between these safepoints is large then\nthe GC may not be able to make progress. For loops such as \"for {}\" that do\nnot contain a safepoint this can hang the system.\n\nThere are a couple of ways to avoid this issue, one is to accept the fact\nthat the GC may be delayed until the loop is exited and if need be add a\nruntime.Gosched call in the loop. Another is to teach the compiler to\ndetect loops that do not contain a GC safepoint and insert a check and a\nsafepoint. This overhead may adversely affect the performance of tight\nloops that folks care a lot about. At the cost of increasing the size of\nbinaries the compiler could unroll the loop to improve performance.\nUnfortunately a compiler can't tell how long a loop will run and in fact\nwhether or not it will exit. Any fix will have a downside.\n\nAt the end of the day it is a matter of where the community wants to put\nits resources. Education seems to be the best way forward for now. Write\nprograms that terminate is a good first bit of advice. Another piece is to\navoid tight loops that execute for a long time that do not contain function\ncalls, yields, or channel operations.\n\n\nOn Sun, May 1, 2016 at 10:25 AM, Antonenko Artem \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e It does show it but it doesn't tell the reason. for {} is not the reason,\n\u003e it's how GC works is what causes the issue. for {} just triggers it. The\n\u003e whole point here is understand why.\n\u003e\n\u003e I agree and as I said, for {} is useless in real code. What I forgot to\n\u003e mention is it's not me who found that issue\n\u003e http://stackoverflow.com/questions/36826622/why-is-the-following-code-sample-stuck-after-some-iterations/\n\u003e I couldn't understand why it behaves like it does, started playing with it\n\u003e and decided to open an issue.\n\u003e\n\u003e It's an edge case when people learning Go. And most of the time they are\n\u003e about goroutines scheduling. For example, you insert for {} and suddenly\n\u003e your goroutines are no longer scheduled because GOMAXPROCS=1 and scheduler\n\u003e is never given a chance to execute any other goroutine. People still have\n\u003e difficulties with that but at least SO has many great answers that cover\n\u003e exactly why it works like that. There're many blog posts that cover the\n\u003e scheduler and from that it's obvious why.\n\u003e\n\u003e But the issue here is not covered anywhere. Which leads to a bigger\n\u003e problem - the lack of good diagnostic messages when process locks up and\n\u003e people don't understand why. Yes, it's useless non-production code but it's\n\u003e very important when you're learning new stuff. You're playing with it,\n\u003e deliberately triggering edge cases to understand the limitations. And it's\n\u003e good when program tells you that you reached the limit. Right now your\n\u003e program just hangs. To understand why you either need to ask another\n\u003e question on SO which will be closed as duplicate or left unanswered or you\n\u003e google anything on Go runtime, read blog posts, Go team mail lists and\n\u003e Google Docs. Here it didn't help me. No one gave an answer to that SO\n\u003e question, accepted answer is wrong. And it's not like there isn't anyone\n\u003e who understands Go well - many answers are from Google employees themselves.\n\u003e\n\u003e So it would be goos to either print diagnostic messages which might not be\n\u003e very easy in these cases. Or insert runtime.Gosched() and solve these\n\u003e issues once and for all.\n\u003e\n\u003e Sorry for such a long comment.\n\u003e\n\u003e â€”\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/15442#issuecomment-216044725\u003e\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-04T00:05:26Z",
	"updated_at": "2016-05-04T00:05:26Z"
}
