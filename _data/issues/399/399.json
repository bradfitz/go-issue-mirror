{
	"id": 51276430,
	"number": 399,
	"state": "closed",
	"title": "Multiple initialization warnings in 8l",
	"body": "by **merrick.jd**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n1. Place attached files into same directory\n2. 8g p.go; 8g main.go; 8l main.8\n\nWhat is the expected output? What do you see instead?\n- Expected output is no error on compilation and 8.out is generated.\n  Running the problem will result in \u0026quot;1\u0026quot; being displayed\n- Actual output is no 8.out file is generated, and the following\n  console warnings are issued:\n(2)\tDATA\textratype·p.T+0(SB)/4,$go.string·\u0026quot;T\u0026quot;+0(SB)\nMHeapMap_Preallocate: multiple initialization\n(2)\tDATA\textratype·p.T+4(SB)/4,$go.string·\u0026quot;p\u0026quot;+0(SB)\nMHeapMap_Preallocate: multiple initialization\n(2)\tDATA\textratype·p.T+8(SB)/4,$extratype·p.T+20(SB)\nMHeapMap_Preallocate: multiple initialization\n(2)\tDATA\ttype·p.T+0(SB)/4,$type·*runtime.IntType+0(SB)\nMHeapMap_Preallocate: multiple initialization\n(2)\tDATA\ttype·p.T+4(SB)/4,$type·p.T+8(SB)\nMHeapMap_Preallocate: multiple initialization\n(2)\tDATA\ttype·p.T+8(SB)/4,$4\nMHeapMap_Preallocate: multiple initialization\n(2)\tDATA\ttype·p.T+12(SB)/4,$1343364955\nMHeapMap_Preallocate: multiple initialization\n(2)\tDATA\ttype·p.T+17(SB)/1,$4\nMHeapMap_Preallocate: multiple initialization\n(2)\tDATA\ttype·p.T+18(SB)/1,$4\nMHeapMap_Preallocate: multiple initialization\n(2)\tDATA\ttype·p.T+19(SB)/1,$130\nMHeapMap_Preallocate: multiple initialization\n(2)\tDATA\ttype·p.T+20(SB)/4,$go.string·\u0026quot;p.T\u0026quot;+0(SB)\nMHeapMap_Preallocate: multiple initialization\n(2)\tDATA\ttype·p.T+24(SB)/4,$extratype·p.T+0(SB)\nMHeapMap_Preallocate: multiple initialization\n\nWhat is your $GOOS?  $GOARCH?\nlinux\n386\n\nWhich revision are you using?  (hg identify)\n- cb140bac9ab0 release.2009-11-12/release [where problem first found]\n- e205103b02e7 tip [where problem still exists after 'hg pull -u']\n\nPlease provide any additional information below.\n- Discussed on golang-nuts: (URLs split below)\n  - My original problem:\n    - \u003ca href=\"http://groups.google.com/group/golang-nuts/browse_thread/thread\"\u003ehttp://groups.google.com/group/golang-nuts/browse_thread/thread\u003c/a\u003e\n        /66466cc48d4a3ce1\n  - Very probably a duplicate -- shows the problem is with 6l too:\n    - \u003ca href=\"http://groups.google.com/group/golang-nuts/browse_thread/thread\"\u003ehttp://groups.google.com/group/golang-nuts/browse_thread/thread\u003c/a\u003e\n        /5832989b8218dc13\n- This works:\n  - 8g p.go; gopack grc p.a p.8; 8g main.go; 8l main.8\n- At other times, the steps \u0026quot;8g p.go; 8g main.go; 8l main.8\u0026quot; (with the\n  same dependencies [imports] between the files), links O.K.  For example,\n  if p.go simply exported integer constants or integer variables, a\n  main.go that used those exported items would result in no link error.\n  Perhaps the problem occurs whenever a type is exported, as in my\n  example below.  Just speculation.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/399/0/main.go\"\u003emain.go\u003c/a\u003e (91 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/399/0/p.go\"\u003ep.go\u003c/a\u003e (21 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2014-12-08T10:04:27Z",
	"created_at": "2009-12-09T02:25:28Z",
	"updated_at": "2016-06-24T19:10:12Z"
}
