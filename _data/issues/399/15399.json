{
	"id": 150087924,
	"number": 15399,
	"state": "closed",
	"title": "html/template: XSS risk with external JSON",
	"body": "Go version: `go version go1.6 darwin/amd64`\r\n\r\nThe following program highlights an XSS risk when injecting externally obtained JSON via `template.JS`:\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"html/template\"\r\n\t\"os\"\r\n)\r\n\r\nfunc main() {\r\n\tvalidExternalJSON := `{field: \"\u003c/script\u003e\u003cscript\u003ealert('You have been pwned!');\u003c/script\u003e\u003cscript\u003e\"}`\r\n\r\n\tt := template.Must(template.New(\"\").Parse(`\u003cscript\u003evar x = {{.}}; alert(x.field);\u003c/script\u003e`))\r\n\tif err := t.Execute(os.Stdout, template.JS(validExternalJSON)); err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n```\r\n\r\nThis is somewhat unexpected, since the documentation of `template.JS` says \"JS encapsulates a known safe EcmaScript5 Expression\", which intuitively any valid JSON should fulfill. The documentation should at least include a warning about this use case. Even better for avoiding this situation would be a `template.JSON` type which automatically gets sanitized via `json.HTMLEscape` before rendering.",
	"user": {
		"login": "neelance",
		"id": 16184,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Security"
		}
	],
	"assignee": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"comments": 14,
	"closed_at": "2016-05-18T18:31:56Z",
	"created_at": "2016-04-21T14:19:05Z",
	"updated_at": "2016-05-18T18:31:56Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	},
	"reactions": {
		"total_count": 4,
		"+1": 2,
		"-1": 2
	}
}
