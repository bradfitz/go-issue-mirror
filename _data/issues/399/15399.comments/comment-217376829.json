{
	"id": 217376829,
	"body": "@neelance said on the CL:\r\n\r\n\u003e This improves the situation, but in my opinion it does not resolve #15399. The fallacy described in that issue is still quite likely: I can have a \"trusted source\" which always gives me valid JSON and not some bad JS. I could even see that it gets \"included verbatim\" in the output. Still, it is not trivially apparent to me that the \u003econtent of a string\u003c inside of the JSON can break my neck.\r\n\r\nTo include JSON you should parse the JSON with `json.Unmarshal` and then pass the resultant object into the template, where it will be converted back to JSON when included in a JavaScript context.\r\n\r\nBy its very nature, `template.JS` is an escape hatch for people who understand the risks. And it's for that reason that I would never use it myself with any user-provided content: I don't fully understand the risks. \r\n\r\nWe could further document, in the case of `template.JS`, that a JSON object may contain strings that can escape the JS context, but that seems like belaboring the point to me. There are many, many ways that such escape hatches can be abused. Should we enumerate them all in the docs? Opinions?",
	"user": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-05-06T08:09:13Z",
	"updated_at": "2016-05-06T08:09:13Z"
}
