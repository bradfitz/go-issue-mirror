{
	"id": 51279157,
	"number": 2399,
	"state": "closed",
	"title": "Incorrect validity check in json package",
	"body": "\u003cpre\u003eThe json package has a whitelist of allowed characters for strings that's implemented in\nthe isValidTag() function:\n\nfunc isValidTag(s string) bool {\n        if s == \u0026quot;\u0026quot; {\n                return false\n        }\n        for _, c := range s {\n                if c != '$' \u0026amp;\u0026amp; c != '-' \u0026amp;\u0026amp; c != '_' \u0026amp;\u0026amp; !unicode.IsLetter(c) \u0026amp;\u0026amp; !unicode.IsDigit(c) {\n                        return false\n                }\n        }\n        return true\n}\n\nHowever, JSON is much more permissive.  RFC 4627 and json.org agree:\n\n  The representation of strings is similar to conventions used in the C\n  family of programming languages.  A string begins and ends with\n  quotation marks.  All Unicode characters may be placed within the\n  quotation marks except for the characters that must be escaped:\n  quotation mark, reverse solidus, and the control characters (U+0000\n  through U+001F).\n\nThis means that the JSON package is not able to handle tag names that have, for example,\na space in them.\u003c/pre\u003e",
	"user": {
		"login": "gjemiller",
		"id": 10053572,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 5,
	"closed_at": "2014-12-08T10:12:50Z",
	"created_at": "2011-10-25T19:56:31Z",
	"updated_at": "2016-06-24T21:19:49Z"
}
