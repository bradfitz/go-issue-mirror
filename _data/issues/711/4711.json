{
	"id": 51282519,
	"number": 4711,
	"state": "closed",
	"title": "runtime: goroutines do not get scheduled for a long time for no obvious reason",
	"body": "by **myannikos**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n1. run the attached program (schedtest.go)\n\nWhat is the expected output?\n\n \u0026quot;suffixarray done\u0026quot; after a few minutes, normal termination after 1h\n\nWhat do you see instead?\n\n--- \n\npanic: 4m21.822623s*** last run took 22.669666ss\n\ngoroutine 4 [running]:\nmain.handler()\n        /home/mjy/svn/morework/gh/trunk/go/gh/schedtest.go:42 +0x159\ncreated by main.main\n        /home/mjy/svn/morework/gh/trunk/go/gh/schedtest.go:49 +0x23\n\ngoroutine 1 [sleep]:\ntime.Sleep(0x34630b8a000, 0x40d134)\n        /usr/local/go/src/pkg/runtime/ztime_amd64.c:21 +0x49\nmain.main()\n        /home/mjy/svn/morework/gh/trunk/go/gh/schedtest.go:50 +0x38\n\ngoroutine 2 [syscall]:\ncreated by runtime.main\n        /usr/local/go/src/pkg/runtime/proc.c:221\n\ngoroutine 3 [running]:\nindex/suffixarray.(*suffixSortable).updateGroups(0xf84002d7c0, 0xf80861e33f,\n0xf84002d7c0, 0xf84002d780)\n        /usr/local/go/src/pkg/index/suffixarray/qsufsort.go:150 +0xf4\nindex/suffixarray.qsufsort(0x255f3f0, 0xbebc2000bebc200, 0x0, 0x0, 0x0, ...)\n        /usr/local/go/src/pkg/index/suffixarray/qsufsort.go:58 +0x28a\nindex/suffixarray.New(0x255f3f0, 0xbebc2000bebc200, 0x0, 0xbebc200, 0x1, ...)\n        /usr/local/go/src/pkg/index/suffixarray/suffixarray.go:36 +0x36\nmain._func_001()\n        /home/mjy/svn/morework/gh/trunk/go/gh/schedtest.go:29 +0x5e\ncreated by main.initÂ·1\n        /home/mjy/svn/morework/gh/trunk/go/gh/schedtest.go:31 +0xa9\n\ngoroutine 5 [syscall]:\ncreated by addtimer\n        /usr/local/go/src/pkg/runtime/ztime_amd64.c:72\n\n---\n\nThis can be reproduced every time (tested on 3 different hosts with different hardware\n[8-48 cores] several times).\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n\n6g\n\nWhich operating system are you using?\n\nDebian Squeeze x86-64\n\nWhich version are you using?  (run 'go version')\n\n1.0.3\n\nPlease provide any additional information below.\n\nDespite GOMAXPROCS(40), this program uses fewer threads usually (but not 1). Attaching\ngdb to the program during a freeze showed that all but the thread executing the\nsuffixarray goroutine were in runtime.futex (nextgandundlock() =\u0026gt;\nruntimeÂ·notesleep(\u0026amp;m-\u0026gt;havenextg) =\u0026gt; ...), so it seems that the scheduler\nsimply decided to ignore the stalled goroutine for a while.\n\n(gdb) info threads\n  Id   Target Id         Frame\n* 6    Thread 0x7fe3087d7700 (LWP 4188) 0x0000000000410dbc in nextgandunlock ()\n    at /usr/local/go/src/pkg/runtime/proc.c:635\n  5    Thread 0x7fe30779e700 (LWP 4189) runtime.futex ()\n    at /usr/local/go/src/pkg/runtime/sys_linux_amd64.s:238\n  4    Thread 0x7fe306f9d700 (LWP 4196) runtime.futex ()\n    at /usr/local/go/src/pkg/runtime/sys_linux_amd64.s:238\n  3    Thread 0x7fe30679c700 (LWP 4197) runtime.futex ()\n    at /usr/local/go/src/pkg/runtime/sys_linux_amd64.s:238\n  2    Thread 0x7fe305f9b700 (LWP 4198) runtime.futex ()\n    at /usr/local/go/src/pkg/runtime/sys_linux_amd64.s:238\n  1    Thread 0x7fe3090bb700 (LWP 4187) 0x00000000004d8b95 in sort.doPivot (\n    data=\u0026quot;(*suffixarray.suffixSortable)0xf87c9f9c40\u0026quot;, lo=208, hi=400, midlo=\n    400, midhi=0) at /usr/local/go/src/pkg/sort/sort.go:132\n\nThe systems were sometimes slightly busy and others not, the panic still happens always\nafter around 4 minutes (possibly directly related to CPU speed; 2200-2400 MHz Opterons\ntake ~4m10s-4m20s, a 2500 MHz Xeon L5420 took 6m40s to panic with 35s freeze) and until\nthen 1 core/thread is 100% busy as expected. I'm confident this isn't an OS issue\n(sync/bdflush or other periodic tasks), but unsure whether this is related to the\nspecific workload (index/suffixarray) or not, or perhaps to garbage collection incurred\nby the workload.\n\nIt is noteworthy that the stalled/frozen goroutine (the one calling panic()) seems to be\nscheduled normally most of the time (can be verified by printing a timestamp at every\niteration), i.e. it does not stall frequently for smaller periods of time, there are\njust a few very long freezes.\n\nThis issue was discovered while working a net/http handler with background\ninitialization using index/suffixarray, the http requests would sometimes take more than\n1 minute to get serviced for no apparent reason (normal time \u0026lt; 1s), so this is a\ncritical issue for us.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/4711/0/schedtest.go\"\u003eschedtest.go\u003c/a\u003e (909 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 9,
	"closed_at": "2014-12-08T10:24:57Z",
	"created_at": "2013-01-26T16:09:28Z",
	"updated_at": "2016-06-24T22:31:49Z"
}
