{
	"id": 66073942,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eI can reproduce with 6g at tip on OS X.\n\nAdding debugging to schedtest.go (attached) and dumping GC stats, I'm seeing very long\npauses (e.g. 21 seconds, 53 seconds) to call runtime.ReadMemStats, which stops \u0026 starts\nthe world.  (Related \u003ca href=\"https://golang.org/issue/543\"\u003eissue #543\u003c/a\u003e)\n\nOne run, with more timing stats:\n\nba12:Downloads bradfitz$ ./schedtest \nLOOP top, after 7.844us\npre-sleep\nsleep took 1.003262237s; memstats took 244.515509ms\nLOOP top, after 1.247902904s\npre-sleep\nsleep took 1.001041542s; memstats took 418.383059ms\nLOOP top, after 2.66737814s\npre-sleep\nsleep took 1.011342901s; memstats took 53.438422048s\nLOOP top, after 57.120758412s\npre-sleep\nsleep took 1.001049449s; memstats took 6.048307932s\nLOOP top, after 1m4.170686279s\npre-sleep\nsleep took 1.000274058s; memstats took 2.49208148s\nLOOP top, after 1m7.663089665s\npre-sleep\nsleep took 1.001094104s; memstats took 106.5589ms\nLOOP top, after 1m8.770792374s\npre-sleep\nsleep took 1.001060231s; memstats took 528.78366ms\nLOOP top, after 1m10.300674956s\npre-sleep\nsleep took 1.001099273s; memstats took 1.131269383s\nLOOP top, after 1m12.43310151s\npre-sleep\nsleep took 1.00112323s; memstats took 1.035799945s\nLOOP top, after 1m14.470085597s\npre-sleep\nsleep took 1.001172835s; memstats took 345.542111ms\nLOOP top, after 1m15.817086253s\npre-sleep\nsleep took 1.001113293s; memstats took 1.076934101s\nLOOP top, after 1m17.895196148s\npre-sleep\nsleep took 1.000835364s; memstats took 1.058811374s\nLOOP top, after 1m19.95489456s\npre-sleep\nsleep took 1.000831293s; memstats took 1.116587457s\nLOOP top, after 1m22.072365923s\npre-sleep\nsleep took 1.001034017s; memstats took 1.791271877s\nLOOP top, after 1m24.86471664s\npre-sleep\nsleep took 1.001031231s; memstats took 2.013633903s\nLOOP top, after 1m27.879439194s\npre-sleep\nsleep took 1.000508188s; memstats took 3.328111562s\nLOOP top, after 1m32.208108372s\npre-sleep\nsleep took 1.00008488s; memstats took 2.666808768s\nLOOP top, after 1m35.875049042s\npre-sleep\nsleep took 1.001076599s; memstats took 4.179466379s\nLOOP top, after 1m41.055647523s\npre-sleep\nsleep took 1.001082076s; memstats took 4.033235492s\nLOOP top, after 1m46.090018921s\npre-sleep\nsleep took 1.001060985s; memstats took 5.618739775s\nLOOP top, after 1m52.709861631s\npre-sleep\nsleep took 1.001118993s; memstats took 5.7058984s\nLOOP top, after 1m59.416922918s\npre-sleep\nsleep took 1.000661647s; memstats took 6.623373153s\nLOOP top, after 2m7.041016967s\npre-sleep\nsleep took 1.00110405s; memstats took 8.931115264s\nLOOP top, after 2m16.973290401s\npre-sleep\nsleep took 1.000133431s; memstats took 9.452178825s\nLOOP top, after 2m27.425654007s\npre-sleep\nsleep took 1.000758979s; memstats took 11.252431011s\nLOOP top, after 2m39.678885347s\npre-sleep\nsleep took 1.0003939s; memstats took 12.977625084s\nLOOP top, after 2m53.656954293s\npre-sleep\nsleep took 1.007229564s; memstats took 16.913870111s\nLOOP top, after 3m11.581945136s\npre-sleep\nsleep took 1.00105351s; memstats took 20.395030411s\nLOOP top, after 3m32.978080382s\npre-sleep\nsleep took 1.001116228s; memstats took 21.289239101s\nLOOP top, after 3m55.26850829s\npre-sleep\nsuffixarray done  \u0026lt;-\n***************************************************************************\nsleep took 3m23.461937165s; memstats took 26.409427392s\nGC happened. Stats: runtime.MemStats{Alloc:0xbef95ac8, TotalAlloc:0xbfc91a10,\nSys:0xcbfc3908, Lookups:0x2d, Mallocs:0x1be, Frees:0x116, HeapAlloc:0xbef95ac8,\nHeapSys:0xbfd00000, HeapIdle:0xd3a000, HeapInuse:0xbefc6000, HeapReleased:0x0,\nHeapObjects:0xa8, StackInuse:0x6000, StackSys:0x40000, MSpanInuse:0x1b38,\nMSpanSys:0x20000, MCacheInuse:0x3758, MCacheSys:0x20000, BuckHashSys:0x15f8f8,\nNextGC:0x17df2e290, LastGC:0x12dcf048049bd906, PauseTotalNs:0x2f5fb1053a,\nPauseNs:[256]uint64{0x329fe, 0x22b082, 0xf01d00, 0x2f5e9b0dba, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, NumGC:0x4, EnableGC:true, DebugGC:false,\nBySize:[61]struct { Size uint32; Mallocs uint64; Frees uint64 }{struct { Size uint32;\nMallocs uint64; Frees uint64 }{Size:0x0, Mallocs:0x0, Frees:0x0}, struct { Size uint32;\nMallocs uint64; Frees uint64 }{Size:0x8, Mallocs:0x6, Frees:0x3}, struct { Size uint32;\nMallocs uint64; Frees uint64 }{Size:0x10, Mallocs:0xed, Frees:0xcf}, struct { Size\nuint32; Mallocs uint64; Frees uint64 }{Size:0x20, Mallocs:0xe, Frees:0x2}, struct { Size\nuint32; Mallocs uint64; Frees uint64 }{Size:0x30, Mallocs:0x10, Frees:0x0}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0x40, Mallocs:0x3, Frees:0x1}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0x50, Mallocs:0x8, Frees:0x0}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0x60, Mallocs:0x1, Frees:0x0}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0x70, Mallocs:0x7, Frees:0x6}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0x80, Mallocs:0x3, Frees:0x1}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0x90, Mallocs:0x1, Frees:0x0}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0xa0, Mallocs:0x1, Frees:0x0}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0xb0, Mallocs:0x2, Frees:0x0}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0xc0, Mallocs:0x4, Frees:0x2}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0xd0, Mallocs:0x3, Frees:0x0}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0xe0, Mallocs:0x3, Frees:0x0}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0xf0, Mallocs:0x6, Frees:0x6}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0x100, Mallocs:0x14, Frees:0x1}, struct\n{ Size uint32; Mallocs uint64; Frees uint64 }{Size:0x120, Mallocs:0x1, Frees:0x0},\nstruct { Size uint32; Mallocs uint64; Frees uint64 }{Size:0x140, Mallocs:0x1,\nFrees:0x0}, struct { Size uint32; Mallocs uint64; Frees uint64 }{Size:0x160,\nMallocs:0x0, Frees:0x0}, struct { Size uint32; Mallocs uint64; Frees uint64\n}{Size:0x180, Mallocs:0x1, Frees:0x0}, struct { Size uint32; Mallocs uint64; Frees\nuint64 }{Size:0x1c0, Mallocs:0x5, Frees:0x2}, struct { Size uint32; Mallocs uint64;\nFrees uint64 }{Size:0x200, Mallocs:0x7, Frees:0x5}, struct { Size uint32; Mallocs\nuint64; Frees uint64 }{Size:0x240, Mallocs:0x1, Frees:0x0}, struct { Size uint32;\nMallocs uint64; Frees uint64 }{Size:0x280, Mallocs:0x0, Frees:0x0}, struct { Size\nuint32; Mallocs uint64; Frees uint64 }{Size:0x2c0, Mallocs:0x0, Frees:0x0}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0x300, Mallocs:0x0, Frees:0x0}, struct\n{ Size uint32; Mallocs uint64; Frees uint64 }{Size:0x340, Mallocs:0x0, Frees:0x0},\nstruct { Size uint32; Mallocs uint64; Frees uint64 }{Size:0x400, Mallocs:0x7,\nFrees:0x5}, struct { Size uint32; Mallocs uint64; Frees uint64 }{Size:0x480,\nMallocs:0x2, Frees:0x0}, struct { Size uint32; Mallocs uint64; Frees uint64\n}{Size:0x500, Mallocs:0x0, Frees:0x0}, struct { Size uint32; Mallocs uint64; Frees\nuint64 }{Size:0x580, Mallocs:0x0, Frees:0x0}, struct { Size uint32; Mallocs uint64;\nFrees uint64 }{Size:0x600, Mallocs:0x4, Frees:0x2}, struct { Size uint32; Mallocs\nuint64; Frees uint64 }{Size:0x680, Mallocs:0x2, Frees:0x0}, struct { Size uint32;\nMallocs uint64; Frees uint64 }{Size:0x800, Mallocs:0x4, Frees:0x1}, struct { Size\nuint32; Mallocs uint64; Frees uint64 }{Size:0x900, Mallocs:0xc, Frees:0x0}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0xa00, Mallocs:0x3, Frees:0x1}, struct\n{ Size uint32; Mallocs uint64; Frees uint64 }{Size:0xc00, Mallocs:0x0, Frees:0x0},\nstruct { Size uint32; Mallocs uint64; Frees uint64 }{Size:0xd00, Mallocs:0x0,\nFrees:0x0}, struct { Size uint32; Mallocs uint64; Frees uint64 }{Size:0x1000,\nMallocs:0x2, Frees:0x1}, struct { Size uint32; Mallocs uint64; Frees uint64\n}{Size:0x1100, Mallocs:0x0, Frees:0x0}, struct { Size uint32; Mallocs uint64; Frees\nuint64 }{Size:0x1200, Mallocs:0x1, Frees:0x0}, struct { Size uint32; Mallocs uint64;\nFrees uint64 }{Size:0x1400, Mallocs:0x2, Frees:0x0}, struct { Size uint32; Mallocs\nuint64; Frees uint64 }{Size:0x1800, Mallocs:0x5, Frees:0x5}, struct { Size uint32;\nMallocs uint64; Frees uint64 }{Size:0x1a00, Mallocs:0x0, Frees:0x0}, struct { Size\nuint32; Mallocs uint64; Frees uint64 }{Size:0x1b00, Mallocs:0x0, Frees:0x0}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0x2000, Mallocs:0x7, Frees:0x1}, struct\n{ Size uint32; Mallocs uint64; Frees uint64 }{Size:0x2200, Mallocs:0x0, Frees:0x0},\nstruct { Size uint32; Mallocs uint64; Frees uint64 }{Size:0x2800, Mallocs:0x8,\nFrees:0x1}, struct { Size uint32; Mallocs uint64; Frees uint64 }{Size:0x2900,\nMallocs:0x0, Frees:0x0}, struct { Size uint32; Mallocs uint64; Frees uint64\n}{Size:0x3000, Mallocs:0x0, Frees:0x0}, struct { Size uint32; Mallocs uint64; Frees\nuint64 }{Size:0x3700, Mallocs:0x1, Frees:0x1}, struct { Size uint32; Mallocs uint64;\nFrees uint64 }{Size:0x4000, Mallocs:0x1, Frees:0x1}, struct { Size uint32; Mallocs\nuint64; Frees uint64 }{Size:0x4500, Mallocs:0x0, Frees:0x0}, struct { Size uint32;\nMallocs uint64; Frees uint64 }{Size:0x5000, Mallocs:0x1, Frees:0x1}, struct { Size\nuint32; Mallocs uint64; Frees uint64 }{Size:0x5300, Mallocs:0x0, Frees:0x0}, struct {\nSize uint32; Mallocs uint64; Frees uint64 }{Size:0x6000, Mallocs:0x0, Frees:0x0}, struct\n{ Size uint32; Mallocs uint64; Frees uint64 }{Size:0x6100, Mallocs:0x0, Frees:0x0},\nstruct { Size uint32; Mallocs uint64; Frees uint64 }{Size:0x7000, Mallocs:0x1,\nFrees:0x1}, struct { Size uint32; Mallocs uint64; Frees uint64 }{Size:0x8000,\nMallocs:0x8, Frees:0x1}}}\npanic: 7m53.091432457s*** last run took 3m23.461937165ss\n\ngoroutine 4 [running]:\nmain.handler()\n\t/Users/bradfitz/Downloads/schedtest.go:69 +0x596\n----- stack segment boundary -----\ncreated by main.main\n\t/Users/bradfitz/Downloads/schedtest.go:75 +0x23\n\ngoroutine 1 [sleep]:\ntime.Sleep(0x34630b8a000, 0x11fc2)\n\t/Users/bradfitz/go/src/pkg/runtime/ztime_darwin_amd64.c:20 +0x2f\nmain.main()\n\t/Users/bradfitz/Downloads/schedtest.go:76 +0x38\n\ngoroutine 2 [syscall]:\ncreated by runtime.main\n\t/Users/bradfitz/go/src/pkg/runtime/proc.c:225\n\ngoroutine 5 [syscall]:\ncreated by addtimer\n\t/Users/bradfitz/go/src/pkg/runtime/ztime_darwin_amd64.c:73\n\ngoroutine 7 [sleep]:\ntime.Sleep(0x2540be400, 0x12070)\n\t/Users/bradfitz/go/src/pkg/runtime/ztime_darwin_amd64.c:20 +0x2f\nmain.func·001()\n\t/Users/bradfitz/Downloads/schedtest.go:32 +0x2a\ncreated by main.func·002\n\t/Users/bradfitz/Downloads/schedtest.go:34 +0xfe\n\n\nNotice the 203 second GC event (0x2f5e9b0dba nanos).\n\nI imagine time.Sleep can block runtime·tsleep -\u0026gt; addtimer -\u0026gt; runtime·malloc\ntrying to grow the timer heap, or runtime·park -\u0026gt; runtime·gosched -\u0026gt; schedule. \nBut I don't actually know the scheduler or runtime.  Just adding notes here.\u003c/pre\u003e\n\n\n\n_Status changed to **Accepted**._\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/4711/2/schedtest.go\"\u003eschedtest.go\u003c/a\u003e (1352 bytes)",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-01-26T18:51:26Z",
	"updated_at": "2014-12-22T06:21:45Z"
}
