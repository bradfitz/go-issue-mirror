{
	"id": 67458873,
	"body": "I appreciate you clearing up the fact that aesHash is not a crypto quality hash. Unfortunately, \"now matters are worse.\"\r\n\r\nI still feel strongly that Go should seriously consider using a crypto quality hash for the map implementation in 1.5. As the code and slides referenced above demonstrate, using a seed with  CitiyHash and Murmur3 is completely broken. Pick any seed you want, it doesn't make any difference. Yet, you still mention the \"per-map random seed\". It almost seems as if you are claiming you can thwart \"hash-flooding DoS\" attacks with your new hash code by doing a \"judicious xor or two\" combined with a random seed based on \"some process startup randomness\"? Is that your claim? If so, I suggest you write it up and present a paper for peer review. Why not send it to the SipHash authors for review? I am serious. Better to be proactively picked apart then to cower after you've been hacked.\r\n\r\nOne fine point about SipHash. If SipHash is parameterized (the benchmarked version below is not) without a performance loss and Go's map were ever hacked, binaries could be patched to increase c and/or d (# rounds) and the attacks could be instantly mitigated.\r\n\r\nMy AesHash vs SipHash benchmarks are very different than the numbers you mention. Mine are Go 1.4 w/ asm numbers. Only the hash function is called and the result is not saved. In my numbers siphash starts off 1.5 times slower for a 4 byte keys and ends up 2.1 times slower with 1k keys. My machine is an Intel i7-2860QM @ 2.5 GHz. Code is all in HashLand but you have to recompile to get these results. Results below. Assume for a second my numbers are correct.\r\n\r\nI understand that everyone is motivated to increase the performance of Go. Me too, that's why I wrote #9337. Creating a new language is more than winning the benchmark wars. Go isn't going to win that one anyway.\r\n\r\nPerhaps SipHash could be further optimized using AVX or AVX2 instructions. Perhaps the number of d rounds could be decreased. Maybe there's a faster crypto hash out there. Google should expend some of it's considerable resources to develop the next great high performance crypto hashing algorithm, pay some others to do so, or hold a $10M contest to find one.\r\n\r\n**Go can mitigate \"hash-flooding DoS\" attacks with a 2X performance hit to map. I admit that a 2X speed decrease is a big deal. Users would complain. Let's face the facts. Many users will continue to pump uncontrolled keys directly from the web into maps and put themselves, their employers, and maybe even our country, at risk. Look at the headlines today (\"Sony\"). Look at the slides I pointed to above where the SipHash authors pick appart Python, Java, and others. It takes real leadership to slow the map implementation down 1.5-2.1x to increase Go's security. Security is more important than it ever was. Performance is less important than it ever was. Please adjust your priorities. I beg you to reconsider.**\r\n\r\n\t\"aeshash\"\r\n\t\tksize=4, n=100 M, size=400 MB, 62 Mhashes/sec, 246.8 MB/sec\r\n\t\tksize=8, n=100 M, size=800 MB, 56 Mhashes/sec, 450.1 MB/sec\r\n\t\tksize=16, n=100 M, size=1 GB, 57 Mhashes/sec, 905.6 MB/sec\r\n\t\tksize=32, n=100 M, size=3 GB, 45 Mhashes/sec, 1.4 GB/sec\r\n\t\tksize=64, n=100 M, size=6 GB, 31 Mhashes/sec, 2.0 GB/sec\r\n\t\tksize=512, n=10 M, size=5 GB, 6 Mhashes/sec, 3.1 GB/sec\r\n\t\tksize=1024, n=10 M, size=10 GB, 3 Mhashes/sec, 3.2 GB/sec\r\n\r\n\t\"siphash\"\r\n\t\tksize=4, n=100 M, size=400 MB, 41 Mhashes/sec, 165.4 MB/sec\r\n\t\tksize=8, n=100 M, size=800 MB, 31 Mhashes/sec, 246.5 MB/sec\r\n\t\tksize=16, n=100 M, size=1 GB, 25 Mhashes/sec, 405.3 MB/sec\r\n\t\tksize=32, n=100 M, size=3 GB, 20 Mhashes/sec, 655.8 MB/sec\r\n\t\tksize=64, n=100 M, size=6 GB, 14 Mhashes/sec, 924.2 MB/sec\r\n\t\tksize=512, n=10 M, size=5 GB, 3 Mhashes/sec, 1.4 GB/sec\r\n\t\tksize=1024, n=10 M, size=10 GB, 1 Mhashes/sec, 1.5 GB/sec\r\n",
	"user": {
		"login": "tildeleb",
		"id": 834628,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-18T09:07:20Z",
	"updated_at": "2014-12-18T09:07:20Z"
}
