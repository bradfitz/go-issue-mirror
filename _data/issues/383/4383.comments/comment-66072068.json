{
	"id": 66072068,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003ethe more separate non-atomic state, states and branches we have, the more tricky it\nbecomes to reason about it\nI am thinking about something along the lines of:\n\nNote note;\nuint32 mask[...];\nuint32 state;\n// can be in 3 states: (1) no signals, no waiter, (2) have signals, (3) have waiter.\n\nsigsend()\n{\n  set bit in mask\n  in a CAS loop {\n    if state==0 -\u003e state=HAVE_SIGNALS\n    if state==HAVE_SIGNALS -\u003e do nothing\n    is state==HAVE_WAITER -\u003e state=HAVE_SIGNALS, signal note\n  }\n}\n\nsignal_recv()\n{\n  for(;;) {\n    the same logic with local copy\n    in a CAS loop {\n      if state==0 -\u003e state=HAVE_WAITER, block on note, clear note\n      if state==HAVE_SIGNALS -\u003e state=0, recheck mask\n      is state==HAVE_WAITER -\u003e throw\n    }\n  }\n}\n\nThis brings 2 simplifications: (1) we have both conditions in a single var (have\nsignals, have waiters), so it's slightly simpler to reason, (2) if signal_recv sets\nstate=HAVE_WAITER, then it always blocks after that.\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-11-27T14:48:53Z",
	"updated_at": "2014-12-08T10:23:17Z"
}
