{
	"id": 246662927,
	"body": "I think is better leave input parameter types to database drivers as they vary among different database venders.\r\n\r\nWe could also create a `database/sql/commontypes` package, but that could well be a third-party package. The only benefit I can see, that a `commontypes` package over driver specific, is that for code portability across different database. But that will depends on how your database drivers convert between database types and common types, and that might suit your needs. A better approach will be write a migrator that traversal the AST and substitute between driver types as your needs.\r\n\r\nThe problem here is that we can't really pass custom types to `Exec()` and `Query()` now. In `database/sql`, all args are converted to `database/sql/driver.Value` then pass to the underlying database driver, and `Value` only allow [some primitive types] (https://godoc.org/database/sql/driver#Value). What the default converter does is auto-dereference to those values, and even we implement the [`Valuer`](https://godoc.org/database/sql/driver#Valuer) interface with our custom type, it will rejected by [`IsValue()`](https://godoc.org/database/sql/driver#IsValue) check in `database/sql`. The only way to by pass this check is use a prepared statement and implement [`ColumnConverter`](https://godoc.org/database/sql/driver#ColumnConverter) interface and the type should not implement `Valuer`.\r\n\r\nThe solution is let the custom types in database drivers implement the `Valuer` interface by return its value as is. Then let `IsValue()` accept those types by defined a new interface in `database/sql/drivers`, that `IsValue()` can call to check arguments' type of `Exec()` and `Query()` is acceptable by underlying drivers. And all the custom types should also implement this interface.\r\n\r\nFor output types, if needed, it could implement the [`Scanner`](https://godoc.org/database/sql#Scanner) interface. But I think it will be much rare than input types as converting database types to Go types is much clear than converting Go types to database types that could have length and precision requirements.",
	"user": {
		"login": "noblehng",
		"id": 6649504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-13T12:16:51Z",
	"updated_at": "2016-09-13T12:22:17Z"
}
