{
	"id": 159348654,
	"body": "@sargun, arbitrary func calls won't happen, for the reasons Ian explained. They'll be basically impossible to use correctly.\r\n\r\n@ianlancetaylor, the argument you're making also applies to closing file descriptors, yet we do that. So there must be a slightly different line. My guess is that it's based on how common/complex the operations are. New mounts do seem a bit rare.\r\n\r\nIn Plan 9, rfork(2) let you change the current process; you only got a new process if you included the RFPROC bit. So on a Plan 9 system you could call rfork(RFNAMEG) to put the calling thread in its own name space group, do you bind mounts, and then fork/exec. Translated into Go, it would be something like\r\n\r\n    go func() {\r\n        runtime.LockOSThread()\r\n        syscall.Rfork(syscall.RFNAMEG)\r\n        ... binds/mounts ...\r\n        result = ForkExec(...)\r\n        c \u003c- result\r\n    }()\r\n    result := \u003c-c\r\n\r\nIt would be very nice if there were some equivalent on Linux, but as far as I can tell that functionality (operating on the current thread) was dropped along the way from rfork to clone.\r\n",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-24T17:28:26Z",
	"updated_at": "2015-11-24T17:28:53Z"
}
