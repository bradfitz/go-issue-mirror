{
	"id": 139259839,
	"number": 14708,
	"state": "closed",
	"title": "encoding: empty values are not considered during unmarshal",
	"body": "Hello there !\r\n\r\nOn any golang version  (1.5 or 1.6 ).\r\n\r\n```\r\n# http://play.golang.org/p/71ZtR0mX9K\r\npackage main\r\n\r\nimport (\r\n\t\"encoding/json\"\r\n\t\"fmt\"\r\n)\r\n\r\ntype FooBar struct {\r\n\tFoo int `json:\"Foo,omitempty\"`\r\n\tBar int `json:\"Bar,omitempty\"`\r\n}\r\n\r\nvar (\r\n\tfoo1 = `{\"Foo\": 1}`\r\n\tbar1 = `{\"Bar\": 1}`\r\n)\r\n\r\nfunc main() {\r\n\tfb := FooBar{}\r\n\r\n\tjson.Unmarshal([]byte(foo1), \u0026fb)\r\n\tfmt.Printf(\"%+v\\n\", fb)\r\n\r\n\tjson.Unmarshal([]byte(bar1), \u0026fb)\r\n\tfmt.Printf(\"%+v\\n\", fb)\r\n}\r\n```\r\noutputs \r\n```\r\n{Foo:1 Bar:0}\r\n{Foo:1 Bar:0}\r\n```\r\n\r\nI assume it's because as its not set it's considered empty and omitted.\r\n\r\nBut this can provoque weird behaviours when you reuse structs twice or have an unmarshal loop that read a file. Or worse, when you rewrite a that file with a loop in a different format.\r\n\r\n---\r\nPossible solutions: \r\n\r\n* add a `reset()` builtin, the one that's called just after allocation ? How would that work with pointers ?\r\n* make the encoding pkgs reset unset fields in *Unmarshal* using reflection ?\r\n* just tell people to be careful\r\n\r\ncheers !",
	"user": {
		"login": "azr",
		"id": 1024852,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2016-03-08T14:20:41Z",
	"created_at": "2016-03-08T11:59:10Z",
	"updated_at": "2016-03-08T14:20:41Z"
}
