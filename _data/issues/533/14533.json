{
	"id": 136813540,
	"number": 14533,
	"state": "closed",
	"title": "runtime/race: runaway memory consumption",
	"body": "The following benchmark consumes unlimited amount of memory:\r\n\r\n```go\r\nfunc BenchmarkSyncLeak(b *testing.B) {\r\n\tconst (\r\n\t\tG = 1000\r\n\t\tS = 1000\r\n\t\tH = 10\r\n\t)\r\n\tvar wg sync.WaitGroup\r\n\twg.Add(G)\r\n\tfor g := 0; g \u003c G; g++ {\r\n\t\tgo func() {\r\n\t\t\tdefer wg.Done()\r\n\t\t\thold := make([][]uint32, H)\r\n\t\t\tfor i := 0; i \u003c b.N; i++ {\r\n\t\t\t\ta := make([]uint32, S)\r\n\t\t\t\tatomic.AddUint32(\u0026a[rand.Intn(len(a))], 1)\r\n\t\t\t\thold[rand.Intn(len(hold))] = a\r\n\t\t\t}\r\n\t\t\t_ = hold\r\n\t\t}()\r\n\t}\r\n\twg.Wait()\r\n}\r\n```\r\n\r\nThe main cause is that race runtime does not wipe stale synchronization objects from heap memory blocks.",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "RaceDetector"
		}
	],
	"assignee": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-05-03T11:01:15Z",
	"created_at": "2016-02-26T20:59:55Z",
	"updated_at": "2016-05-03T11:01:15Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
