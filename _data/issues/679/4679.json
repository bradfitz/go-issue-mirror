{
	"id": 51282473,
	"number": 4679,
	"state": "closed",
	"title": "spec: allow P(x) with type P unsafe.Pointer",
	"body": "\u003cpre\u003eThe following program compiles and runs (both gc and gccgo):\n\npackage main\nimport \u0026quot;unsafe\u0026quot;\ntype P unsafe.Pointer\nfunc main() {\n\tvar x uintptr\n\t_ = P(x)\n}\n\nThe conversion P(x) should not be legal. According to the spec (\n\u003ca href=\"http://tip.golang.org/ref/spec#Package_unsafe\"\u003ehttp://tip.golang.org/ref/spec#Package_unsafe\u003c/a\u003e ):\n\n\u0026quot;Any pointer or value of underlying type uintptr can be converted into a Pointer\nand vice versa.\u0026quot;\n\nIt does not say \u0026quot;into a (unsafe.)Pointer type\u0026quot; - only _the_ (unsafe.)Pointer\ntype.\n\nIt also opens the door for unsafe-ness to escape. With:\n\npackage safe\nimport \u0026quot;unsafe\u0026quot;\ntype Pointer unsafe.Pointer\n\nOne can now write:\n\npackage main\nimport \u0026quot;safe\u0026quot;\nfunc main() {\n\tvar x uintptr\n\t_ = safe.Pointer(x)\n}\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2014-12-08T10:24:47Z",
	"created_at": "2013-01-18T23:22:49Z",
	"updated_at": "2016-06-24T22:31:27Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
