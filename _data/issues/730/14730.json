{
	"id": 139513709,
	"number": 14730,
	"state": "closed",
	"title": "Compiler incorrectly rounds float32(1e-45) to 0",
	"body": "1. What version of Go are you using (`go version`)?\r\n1.6\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nlinux amd64\r\n\r\n3. What did you do?\r\nhttps://play.golang.org/p/1zJjQLBlMK\r\n\r\n4. What did you expect to see?\r\nI want `float32(1e-45) == float32(math.SmallestNonzeroFloat32)` to be true\r\n\r\n5. What did you see instead?\r\nI got `float32(1e-45) == 0` to be true, which is unexpected.\r\nHowever `float32(1.1e-45) == float32(math.SmallestNonzeroFloat32)` is true, as expected.\r\nI don't know whether there are other values that may be affected as well.  I have not tried to find the faulty code.\r\n\r\nI think that `fmt.{Print,Scan}` and `strconv.{Append,Format,Parse}Float` are correct; at least my manual testing showed that I could perform roundtrips from `math.SmallestNonzeroFloat32`, and some other manually-tested values.\r\n\r\nBut I believe that the compiler is doing the wrong thing, since `1e-45` is closer to `math.SmallestNonzeroFloat32` than it is to `0`.  The spec says that we should \"round to the nearest representable constant\" and \"rounding using IEEE 754 round-to-even rules\" in the sections on constants and conversions, respectively.\r\nhttps://golang.org/ref/spec#Constants\r\nhttps://golang.org/ref/spec#Conversions\r\n\r\nFYI the reason this is affecting me is because I have written a Go code generator, for an IDL language similar to protobufs.  My language supports generating Go constants and values.  When I generate a constant representing `math.SmallestNonzeroFloat32`, I end up with `float32(1e-45)` in my generated code, but that is broken since it is interpreted as `float32(0)` by the Go compiler.\r\n\r\nNote that this is a different problem from https://github.com/golang/go/issues/12576, which has examples where very small non-zero floating-point exact constants should be rounded to 0, and the question is whether to pick -0 or 0, and we've (now) picked 0.",
	"user": {
		"login": "tatatodd",
		"id": 5453737,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-03-09T17:06:32Z",
	"created_at": "2016-03-09T08:47:36Z",
	"updated_at": "2016-03-09T17:06:32Z"
}
