{
	"id": 140800926,
	"number": 14822,
	"state": "open",
	"title": "cmd/compile: incorrect shift error with large constant shift count",
	"body": "The spec says (https://golang.org/ref/spec#Operators):\r\n\u003e The right operand in a shift expression must have unsigned integer type or be an untyped constant\r\n\u003e that can be converted to unsigned integer type.\r\n\r\nAll of go, gotype and gccgo seem to allow any unsigned type as the right operand. However, if the right operand is untyped, all of them seem to try to convert the operand specifically to `uint`, as opposed to, say, trying to find some unsigned integer type, capable of representing the value.\r\n\r\n```Go\r\npackage main\r\nconst A0 uint64 = 0xffffffff + 1\r\nconst A1 = 0xffffffff\r\nconst A2 = 0xffffffff + 1\r\nvar B, C uint64\r\nfunc main() {\r\n\tC = B \u003c\u003c A0\r\n\tC = B \u003c\u003c A1\r\n\tC = B \u003c\u003c A2 // error\r\n}\r\n```\r\n\r\nIf this is the intended behavior, then the spec should look like:\r\n\r\n\u003e The right operand in a shift expression must have unsigned integer type or be an untyped constant\r\n\u003e that can be converted to `uint`.\r\n",
	"user": {
		"login": "momchil-velikov",
		"id": 5541560,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"created_at": "2016-03-14T21:21:10Z",
	"updated_at": "2016-10-20T14:11:42Z",
	"milestone": {
		"id": 2053058,
		"number": 49,
		"title": "Go1.9"
	}
}
