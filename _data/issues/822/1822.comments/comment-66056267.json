{
	"id": 66056267,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eIf by halt you mean hang, I may be hitting a similiar manifestation of this bug on\nlinux/8g version weekly.2011-06-09 8703+.\n\nI'm playing around with making my own zmq binding. I have var q []*C.zmq_pollitem_t and\nattempting to index q immediately hangs the application. I verified this with print\ntraces, as well.\n\nThe -S output of the line fmt.Println(p.q[1]) is attached. It calls, in order,\nruntime.new (the name is suspect in this context, but that could be valid for all I\nknow), runtime.panicindex, runtime.convT2E, and, of course, fmt.Println. It should be\nnoted that at this point in the code that q[1] is an invalid index. So either panicindex\nor new is hanging, as far as I can tell. I haven't looked at the code for either but I'm\nassuming that panicindex is rather simple, so my guess would be that new is the enemy.\n\nI should also note that, before the method where the above trace is called, I\nprepopulate p.q with some blank pollitems then resize the slice to 0 len, so array\naccess works fine then. Above the println I take the len and cap of q just fine and\nresize the slice by 1 just fine. The first array access after that is what hangs.\n\nI'm sorry for the incomplete report. I'm going to dig into this further until I get to\nthe bottom of it, but I may be too busy for a few days and I figure I may as well post\nwhat I have now in case it helps.\n\nIf I can work it down to a minimial test case I'll definitely post that. I can post the\ncode I have now but it's rather large and most of it is irrelevant.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1822/5/l.S\"\u003el.S\u003c/a\u003e (2158 bytes)",
	"user": {
		"login": "jimmyfrasche",
		"id": 375553,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-06-15T21:04:27Z",
	"updated_at": "2014-12-08T10:10:03Z"
}
