{
	"id": 66048190,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6 by **bubblboy**:\n\n\u003cpre\u003eHere you go:\n\nHello,\n\nThe most recent mercurial version of Go's compiler creates illegal\nbinaries on this armv5tel architecture. It is a QNAP TS-110 (a NAS). I\ncompiled 5g by doing ./all-arm.bash in the /src dir. This is what\nhappens when I try to run hello world:\n\nlocaladmin@h:/tmp$ cat \u0026gt;hello.go \u0026lt;\u0026lt;EOF\npackage main\n\nimport \"fmt\"\n\nfunc main() {\nfmt.Printf(\"hello, world\\n\")\n}\nEOF\nlocaladmin@h:/tmp$ 5g hello.go\nlocaladmin@h:/tmp$ 5l hello.5\nlocaladmin@h:/tmp$ ./5.out\nOtillåten instruktion\nlocaladmin@h:/tmp$ echo $?\n132\nlocaladmin@h:/tmp$ gdb 5.out\nGNU gdb (GDB) 7.0-debian\nCopyright (C) 2009 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later \u0026lt;\u003ca href=\"http://gnu.org/licenses/gpl.html\u0026gt\"\u003ehttp://gnu.org/licenses/gpl.html\u0026gt\u003c/a\u003e;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"arm-linux-gnueabi\".\nFor bug reporting instructions, please see:\n\u0026lt;\u003ca href=\"http://www.gnu.org/software/gdb/bugs/\u0026gt\"\u003ehttp://www.gnu.org/software/gdb/bugs/\u0026gt\u003c/a\u003e;...\nReading symbols from /tmp/5.out...(no debugging symbols found)...done.\n(gdb) run\nStarting program: /tmp/5.out \n\nProgram received signal SIGILL, Illegal instruction.\n0x0003ca28 in ?? ()\n(gdb) continue\nContinuing.\n\nProgram terminated with signal SIGILL, Illegal instruction.\nThe program no longer exists.\n(gdb) quit\nlocaladmin@h:/tmp$ objdump -DS 5.out \u0026gt; 5.objdump\nlocaladmin@h:/tmp$ nl -b a 5.objdump | grep -HC 4 3ca28\n(standard in)- 53718       3ca18:       e28ef000        add     pc, lr, #0\n(standard in)- 53719       3ca1c:       e59d1004        ldr     r1, [sp, #4]\n(standard in)- 53720       3ca20:       e59d2008        ldr     r2, [sp, #8]\n(standard in)- 53721       3ca24:       e59d300c        ldr     r3, [sp, #12]\n(standard in): 53722       3ca28:       e1910f9f        ldrex   r0, [r1]\n(standard in)- 53723       3ca2c:       e1520000        cmp     r2, r0\n(standard in)- 53724       3ca30:       1a000004        bne     0x3ca48\n(standard in)- 53725       3ca34:       e1810f93        strex   r0, r3, [r1]\n(standard in)- 53726       3ca38:       e3500000        cmp     r0, #0\n(standard in): 53727       3ca3c:       1afffff9        bne     0x3ca28\n(standard in)- 53728       3ca40:       e3a00001        mov     r0, #1\n(standard in)- 53729       3ca44:       e28ef000        add     pc, lr, #0\n(standard in)- 53730       3ca48:       e3a00000        mov     r0, #0\n(standard in)- 53731       3ca4c:       e28ef000        add     pc, lr, #0\n--\n(standard in)-153142       3ca18:       00000065        andeq   r0, r0, r5, rrx\n(standard in)-153143       3ca1c:       00000000        andeq   r0, r0, r0\n(standard in)-153144       3ca20:       2eed1000        cdpcs   0, 14, cr1, cr13, \ncr0, {0}\n(standard in)-153145       3ca24:       6d617266        sfmvs   f7, 2, [r1, #-408]!     \n; (stclvs 2, cr7, [r1, #-408]!) ; 0xfffffe68\n(standard in):153146       3ca28:       00000065        andeq   r0, r0, r5, rrx\n(standard in)-153147       3ca2c:       00000000        andeq   r0, r0, r0\n(standard in)-153148       3ca30:       72f00400        rscsvc  r0, r0, #0\n(standard in)-153149       3ca34:       656c6665        strbvs  r6, [ip, #-1637]!       \n; 0x665\n(standard in)-153150       3ca38:       b7c27463        strblt  r7, [r2, r3, ror #8]\n\nThe test results from /test are meaningless because they require\nqemu-arm, which is a dependency monster that I would rather not even\nlook at with this NAS.\n\nThat is pretty much all the meaningful information that I could get out\nof this executable. The second block does not look like a text section\nto me; 6672616d65 (little endian) in ASCII reads \"frame\". If the objdump\nreflects the mapping that GDB reports, 0xe1910f9f is supposedly an\nillegal instruction. I did the same for other programs in the /test\ndirectory, and all seem to fail at an ldrex instruction. The page\n\u0026lt;\u003ca href=\"http://www.keil.com/support/man/docs/armasm/armasm_cihbghef.htm\u0026gt\"\u003ehttp://www.keil.com/support/man/docs/armasm/armasm_cihbghef.htm\u0026gt\u003c/a\u003e; says\nthat: “ARM LDREX and STREX are available in ARMv6 and above.”\n\nI am not too sure on whether this lack of support for ARMv5 is a feature\nor a bug. Also, how necessary is the instruction? It seems quite useful.\nDoes providing an alternative seriously damage the so thread-centered\nGo performance?\n\nThank you,\n\nHraban Luyat\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-12-23T17:56:04Z",
	"updated_at": "2014-12-22T05:44:18Z"
}
