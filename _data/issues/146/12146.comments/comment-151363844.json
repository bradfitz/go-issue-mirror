{
	"id": 151363844,
	"body": "@extemporalgenome There's nothing that *requires* us to sort the keys:  the JSON spec defines object keys as unordered (http://www.json.org/) and Go's hashmaps obviously don't maintain ordering.\r\n\r\nThe desire to sort the keys stems from maintaining consistency: the encoding/json package currently has the (undocumented) behavior that it always sorts the string keys lexicographically  (e.g. http://stackoverflow.com/questions/18668652/how-to-produce-json-with-sorted-keys-in-go).  With this, the encoded JSON is stable -- i.e. in tests you can compare against a fixed constant string to validate.\r\n\r\nIf we change this behavior for string keys, I think we will break a LOT of tests (and examples), so I would not want to do this without a very compelling reason.\r\n\r\nWe could consider option 2 where custom encoding.TextMarshaller would get sorted by type but within that type the order would be random -- that would only affect new code.  But the behavior may be confusingly inconsistent.",
	"user": {
		"login": "augustoroman",
		"id": 676565,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-27T03:46:06Z",
	"updated_at": "2015-10-27T03:46:06Z"
}
