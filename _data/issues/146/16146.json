{
	"id": 161609686,
	"number": 16146,
	"state": "open",
	"title": "image/gif: gif decoding fails `with too much image data`",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\ngo version devel +1f44643 Wed Jun 22 00:12:55 2016 +0000 darwin/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/Users/emmanuelodeke/go/bin\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/emmanuelodeke/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/Users/emmanuelodeke/go/src/go.googlesource.com/go\"\r\nGOTOOLDIR=\"/Users/emmanuelodeke/go/src/go.googlesource.com/go/pkg/tool/darwin_amd64\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/kn/s30g1srd4h50bh6sd322tppm0000gn/T/go-build038095302=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\n\r\n3. What did you do?\r\nRun program at https://play.golang.org/p/NqqvAkiIao with source of http://ualberta.ca/~odeke/tx.gif\r\n```shell\r\n$ go run NqqvAkiIao.go --source http://ualberta.ca/~odeke/tx.gif\r\n```\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n\r\n\r\n4. What did you expect to see?\r\nSuccessful decoding of a gif with no errors\r\n\r\n5. What did you see instead?\r\n`gif: too much image data`\r\n\r\n\r\n/cc @montanaflynn who reported this issue first.\r\n\r\nCode inlined\r\n```go\r\n/*\r\n  After running this gif\r\n      https://67.media.tumblr.com//b02659b27081314a412215f4eb31dacf/tumblr_nu2x4whJgy1udf6d3o1_400.gif\r\n  through ffmpeg, Go fails to decode the gif with error:\r\n      `gif: too much image data`\r\n\r\n  Command:\r\n  $ ffmpeg -i https://67.media.tumblr.com//b02659b27081314a412215f4eb31dacf/tumblr_nu2x4whJgy1udf6d3o1_400.gif outf.gif\r\n  $ go run main.go --source outf.gif\r\n  - Repro URL\r\n  http://ualberta.ca/~odeke/tx.gif\r\n\r\n  Interestingly:\r\n  - The outfile is 1.0MB.\r\n  - The original file is 1.4MB.\r\n*/\r\npackage main\r\n\r\nimport (\r\n\t\"flag\"\r\n\t\"image/gif\"\r\n\t\"log\"\r\n\t\"net/http\"\r\n\t\"path/filepath\"\r\n\t\"strings\"\r\n)\r\n\r\nfunc localAndNetBasedClient() *http.Client {\r\n\ttransport := new(http.Transport)\r\n\ttransport.RegisterProtocol(\"file\", http.NewFileTransport(http.Dir(\"/\")))\r\n\tclient := new(http.Client)\r\n\tclient.Transport = transport\r\n\treturn client\r\n}\r\n\r\nvar httpPrefixes = []string{\"http\", \"https\"}\r\n\r\nfunc ensureFitForFetch(source string) string {\r\n\tfor _, prefix := range httpPrefixes {\r\n\t\tif strings.HasPrefix(source, prefix) {\r\n\t\t\treturn source\r\n\t\t}\r\n\t}\r\n\r\n\tabsSource, err := filepath.Abs(source)\r\n\tif err == nil {\r\n\t\tsource = absSource\r\n\t}\r\n\treturn strings.Join([]string{\"file://\", source}, \"/\")\r\n}\r\n\r\nfunc main() {\r\n\tvar source string\r\n\tflag.StringVar(\u0026source, \"source\",\r\n\t\t\"https://67.media.tumblr.com//b02659b27081314a412215f4eb31dacf/tumblr_nu2x4whJgy1udf6d3o1_400.gif\",\r\n\t\t\"the URI of the gif you want to ensure properly decodes in Go\")\r\n\tflag.Parse()\r\n\r\n\tclient := localAndNetBasedClient()\r\n\tsource = ensureFitForFetch(source)\r\n\tres, err := client.Get(source)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\tdefer res.Body.Close()\r\n\r\n\tif _, err := gif.DecodeAll(res.Body); err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n}\r\n```",
	"user": {
		"login": "odeke-em",
		"id": 4898263,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		}
	],
	"assignee": {
		"login": "nigeltao",
		"id": 8565232,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"created_at": "2016-06-22T07:15:39Z",
	"updated_at": "2016-10-07T18:48:08Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
