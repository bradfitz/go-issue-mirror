{
	"id": 66051835,
	"body": "\u003ca id=\"c59\"\u003e\u003c/a\u003eComment 59:\n\n\u003cpre\u003eFor a problem of this generality, \"fixed\" is a difficult word.  The core problem is that\nthe garbage collector is not fully precise.  This can cause a value that does not\ncontain a pointer to appear to be a pointer, which prevents the garbage collector from\ncollecting the memory block to which the non-pointer appears to point.  In practice this\nhappens most often with floating point values; integers rarely appear to be pointers,\nbut floating point value sometimes do.\n\nSo much for the background.  In Go 1.1 the GC is far more precise than the GC in Go 1.0.\n That means that these sorts of problems are vastly less likely to occur when using Go\n1.1 than they are with Go 1.0.  In particular in Go 1.1 the heap is almost entirely\nprecisely typed, and floating point values in the heap will never be mistaken for\npointers.\n\nHowever, the problem is not entirely fixed because even in Go 1.1 the GC is not entirely\nprecise.  In particular in Go 1.1 stack frames are not precisely typed.  So if, for\nexample, you have a bunch of floating point local variables, those variables can appear\nto be pointers while the function is live and cause the GC to fail to collect various\nmemory blocks.  This is not likely to be a problem for most programs, but it is\ncertainly possible.\n\nIn Go 1.2 the GC will be even more precise than it is in Go 1.1.  On tip the GC is\nalready precise for function arguments and results.  Go 1.2 may be precise for local\nvariables on the stack.  It may even be fully precise.  But it's too early to tell\nwhether this work, which is ongoing, will be complete for Go 1.2.\n\nSo the current status is that most programs that did not work with Go 1.0 should now\nwork fine with Go 1.1.  However, it is possible to construct test cases that will not\nwork well with Go 1.1.  And there is a very small chance that your real program will\naccidentally happen to be one of those test cases.  But it's a very small chance.  Also,\nif you are so unfortunate as to encounter that chance, you do have options in Go 1.1\nthat you did not have in Go 1.0: you can force your non-pointers that appear to be\npointers off the stack into the heap.  That will give you a bit more heap allocation,\nbut in return the GC will collect more data.\n\nHope this helps.\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-06-13T16:12:39Z",
	"updated_at": "2014-12-08T10:06:20Z"
}
