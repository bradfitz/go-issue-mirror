{
	"id": 66051843,
	"body": "\u003ca id=\"c67\"\u003e\u003c/a\u003eComment 67:\n\n\u003cpre\u003etrent@wireover.com,\n\n\u003e I recall another issue about Go memory management - something about Go requiring a\nlarge contiguous chunk of RAM when a program launches, which on 32-bit systems can fail\nin certain circumstances. I can't seem to find updated info on this issue - is it still\na problem with Go 1.1? Can you characterize this issue? \n\nI think you are talking about \u003ca href=\"https://golang.org/issue/2323\"\u003ehttps://golang.org/issue/2323\u003c/a\u003e.\nLooking at the issue again, Go used to reserve one large block of about 800MB memory.\nChecking a recently built Go program (with vmmap), I can see it reserves 2 large blocks\nof about 250MB and 500MB instead now. So, that should be an improvement here.\n\n\u003e ... Are there still any memory-management concerns with this?\n\nThere is also issue of Go not returning committed memory back to Windows\n\u003ca href=\"https://golang.org/issue/4960\"\u003ehttps://golang.org/issue/4960\u003c/a\u003e and\n\u003ca href=\"https://golang.org/issue/5584\"\u003ehttps://golang.org/issue/5584\u003c/a\u003e. It is a big issue, as far as I am\nconcerned, if your program requires \"a lot\" of memory occasionally, because once it has\nbeen allocated, it won't get released back to OS until your process will exit. So your\nwhole system will suffer. If your process is short lived, or you don't require excessive\namounts of memory you should be OK.\n\nAlex\u003c/pre\u003e",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-06-24T02:00:29Z",
	"updated_at": "2014-12-08T10:06:20Z"
}
