{
	"id": 69095155,
	"body": "I ported libc hypot to go and it seems to be accurate (tested on million random float64, 100% of the time the result was bit-for-bit equal to the one from glibc).\r\n\r\nUnfortunatly the go code is slower (at least on x86_64) than the current (inaccurate) assembly implementation. And understably so: the guarantee that the error on the result will be below 1 ulp requires quite some work - more than 100 lines of C - while the current assembly implementation uses like a dozen of machine instructions.\r\n\r\nSome quick benchmarks (go1.4 linux/amd64). Two small floats:\r\n```\r\nBenchmarkHypotOld\t50000000\t        24.9 ns/op\r\nBenchmarkHypotNew\t20000000\t        86.3 ns/op\r\n```\r\n\r\nA small float and a huge one\r\n```\r\nBenchmarkHypotOld\t50000000\t        24.9 ns/op\r\nBenchmarkHypotNew\t30000000\t        42.5 ns/op\r\n```\r\nThoughts?\r\nToo slow? Is it worth a CL? \r\n\r\n",
	"user": {
		"login": "ALTree",
		"id": 3586803,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-07T21:27:59Z",
	"updated_at": "2015-01-07T21:27:59Z"
}
