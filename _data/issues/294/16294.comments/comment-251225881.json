{
	"id": 251225881,
	"body": "I've narrowed down the issue more, and as such I can start posting examples.\r\n\r\nThe bug seems to appear in our database code that queries rows and transforms the results to structures. We have another trace that has the object with the bad pointer in it:\r\n\r\n```\r\nruntime: pointer 0xc0442bf570 to unallocated spanidx=0x115f span.base()=0xc0442be000 span.limit=0xc04431c000 span.state=2\r\nruntime: found in object at *(0xc0426ee410+0x18)\r\nobject=0xc0426ee410 k=0x6021377 s.base()=0xc0426ee000 s.limit=0xc0426effe0 s.sizeclass=6 s.elemsize=80\r\n *(object+0) = 0x642350\r\n *(object+8) = 0xac469f\r\n *(object+16) = 0x44\r\n *(object+24) = 0xc0442bf570 \u003c==\r\n *(object+32) = 0x2\r\n *(object+40) = 0x2\r\n *(object+48) = 0xc0442bf560\r\n *(object+56) = 0x1\r\n *(object+64) = 0x1\r\n *(object+72) = 0x0\r\nfatal error: found bad pointer in Go heap (incorrect use of unsafe or cgo?)\r\n\r\n...\r\n\r\ngoroutine 61 [chan receive]:\r\nxxx/db.ExecuteDBFunc(0xc0426ee410, 0x0, 0x0)\r\n\tC:/jenkins/workspace/Stage-SSE3-Core-Win64/src/github.com/steelseries/ssenext/db/db.go:21 +0x69\r\nxxx/db.QueryRow(0xac469f, 0x44, 0xc0435dd590, 0x2, 0x2, 0xc0435dd580, 0x1, 0x1, 0x100000000000053, 0x0)\r\n\tC:/jenkins/workspace/Stage-SSE3-Core-Win64/src/github.com/steelseries/ssenext/db/db.go:127 +0xcb\r\n```\r\n\r\nThe `0xc0426ee410` object is actually a function. `ExecuteDBFunc` and `QueryRows` look like this:\r\n\r\n```\r\ntype DBFunc func(*connector.Connection) error\r\ntype RowTransformFunc func(*sql.Rows) (interface{}, error)\r\n\r\nfunc ExecuteDBFunc(f DBFunc) error {\r\n\truntime.GC()\r\n\tconn := connector.GetDBConnection()\r\n\tdefer conn.Release()\r\n\treturn f(conn)\r\n}\r\n\r\nfunc QueryRows(query string, input []interface{}, transformFunc RowTransformFunc) (results []interface{}, err error) {\r\n\r\n\tf := func(conn *connector.Connection) error {\r\n\t\tstmt, err := conn.Prepare(query)\r\n\t\tif err != nil {\r\n\t\t\treturn err\r\n\t\t}\r\n\t\tdefer stmt.Close()\r\n\r\n\t\trows, _ := stmt.Query(input...)\r\n\t\tdefer rows.Close()\r\n\t\tfor rows.Next() {\r\n\t\t\tr, err := transformFunc(rows)\r\n\r\n\t\t\tif err != nil {\r\n\t\t\t\treturn err\r\n\t\t\t}\r\n\r\n\t\t\tresults = append(results, r)\r\n\t\t}\r\n\t\treturn nil\r\n\t}\r\n\r\n\terr = ExecuteDBFunc(f)\r\n\treturn\r\n}\r\n``` \r\n\r\nconnection.Connection is just a wrapper around a `sql.DB` object.\r\n\r\n```\r\ntype Connection struct {\r\n\t*sql.DB\r\n}\r\n\r\nvar pool = make(chan *Connection, MaxConnections)\r\n\r\nfunc (c *Connection) Release() {\r\n\tpool \u003c- c\r\n}\r\n\r\nfunc GetDBConnection() *Connection {\r\n\treturn \u003c-pool\r\n}\r\n```\r\n\r\nDoes any of this look suspicious? Trying to reproduce the issue intentionally is not causing the crash, and our testers only encounter the issue after the program is running for an hour or two.",
	"user": {
		"login": "ToadKing",
		"id": 1023440,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-03T21:01:32Z",
	"updated_at": "2016-10-03T21:09:19Z"
}
