{
	"id": 85553730,
	"number": 11082,
	"state": "closed",
	"title": "crypto/elliptic: GenerateKey does not sample secret keys uniformly",
	"body": "While sampling secret key from the random source, the GenerateKey method reads enough bytes from the randomness source, masks excessive bits, XORs first bit with 0x42, finds the integer representation of the bytes and then multiplies the base point by the corresponding integer.\r\n\r\nHowever, during the scalar multiplication, the residue of that integer divided by the base point order is implicitly taken and used while doing scalar multiplication. As the base point order does not (usually) wholly divide the possible randomness space, then some secret keys are more probable than others.\r\n\r\nAs an example, if we use P-256 and the randomness source returns either `ffbdffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552` or `0042000000000000000000000000000000000000000000000000000000000001` (both in hex-encoded form), the returned public keys are the same.\r\n(The code for the example is at http://play.golang.org/p/iI3AGbLm1H)\r\n\r\nI would recommend using the approach taken by Int method in the crypto/rand package.",
	"user": {
		"login": "ivokub",
		"id": 1309050,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "agl",
		"id": 21203,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2015-12-08T17:39:34Z",
	"created_at": "2015-06-05T15:03:27Z",
	"updated_at": "2015-12-08T17:39:34Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
