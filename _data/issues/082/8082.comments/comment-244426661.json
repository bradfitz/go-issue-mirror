{
	"id": 244426661,
	"body": "\u003e that section was added a year ago, …\r\n\r\nRight, under the specific exception noted here:\r\n```\r\nSpecification errors. If it becomes necessary to address an inconsistency or incompleteness in the specification, resolving the issue could affect the meaning or legality of existing programs. We reserve the right to address such issues, including updating the implementations. Except for security issues, no incompatible changes to the specification would be made.\r\n```\r\n\r\n\u003e Removing func/type/var/const at package scope\r\n\r\nThis has not been done with a single Golang stdlib change. Even when those things have been obsoleted. c.f. os.SEEK_XXX. `“Deprecated: Use io.SeekStart, io.SeekCurrent, and io.SeekEnd.”`\r\n\r\n\u003e Adding a method to an interface\r\n\r\nThis is also not done. This is why there is a type flag.Value and a type flag.Getter\r\n\r\n\u003e Removing a method from an interface\r\n\r\nAlso not done, as noted above.\r\n\r\nAlso, Golang stdlib interfaces are designed to be tight. That is, they do not implement more functions than is absolutely necessary. That is why there is io.Reader, io.ReadCloser, io.ReaderAt, etc\r\n\r\n\u003e Adding a field to a struct\r\n\u003e Adding a method to a type\r\n\r\nAlready mentioned above as an exception to the breaking compat guarantee.\r\n\r\n\u003e Removing a field from a struct\r\n\u003e Removing a method from a type\r\n\r\nAlso never done. `src/archive/zip/struct.go:        CompressedSize     uint32 // Deprecated: Use CompressedSize64 instead.`\r\n\r\n\u003e Changing a function/method signature\r\n\r\nNever done in Go1. This example is a struct of functions, but still, same idea. If you need change the signature of a function/method, you introduce a new, more specifically named function, and then make the deprecated calls use the new signature under the hood:\r\n\r\n```\r\n        // DialContext specifies the dial function for creating unencrypted TCP connections.\r\n        // If DialContext is nil (and the deprecated Dial below is also nil),\r\n        // then the transport dials using package net.\r\n        DialContext func(ctx context.Context, network, addr string) (net.Conn, error)\r\n\r\n        // Dial specifies the dial function for creating unencrypted TCP connections.\r\n        //\r\n        // Deprecated: Use DialContext instead, which allows the transport\r\n        // to cancel dials as soon as they are no longer needed.\r\n        // If both are set, DialContext takes priority.\r\n        Dial func(network, addr string) (net.Conn, error)\r\n```\r\n\r\n\u003e This severely limits the kind of changes you can do to your API if you want to claim backwards compatibility.\r\n\r\nIt limits the form, but not the actual changes you can make. But the advantage of needing only run a compat compile test on your code for the new version to make sure it doesn't horrible break things has a very, very strong advantage here. And is worth the occasional, split interface… and besides now the interface is much more specific about the contract it fulfills, rather than be a ridiculous horrible mess of every idea someone had at the time, but are we ever going to use them? Who knows.",
	"user": {
		"login": "puellanivis",
		"id": 10839126,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-02T16:42:00Z",
	"updated_at": "2016-09-02T16:42:00Z"
}
