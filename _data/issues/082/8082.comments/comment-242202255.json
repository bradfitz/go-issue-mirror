{
	"id": 242202255,
	"body": "@ianlancetaylor “No decisions have been made about this proposal.” Just because no formal decision has been made does not mean that I haven't changed my mind. People have presented a reasoned argument that due to the Go 1 compat promise, this change cannot be made without breaking _some_ possible code. As such, I now agree that the mainline Go 1.x cannot implement this proposal  without violating that compat promise, which is a no go.\r\n\r\n@mewmew “My question is then, if this proposal were to be implemented, would that also allow for the above use-case (and consequently mandate an update of the FAQ entry)?” No, it would not allow for your desired use-case. The proper solution to what you're trying to do is to type-assert to type.Int from type.Type.\r\n\r\n@kostya-sh “… because `context.CancelFunc` type (e.g. returned from `WithCancel` method) is not the same type as `x/net/context.CancelFunc`” but the `CancelFunc` type does not actually appear in either `Context` interface. As such regardless of these those two named function types being and remaining different, both `Contex` interfaces are still identical.\r\n\r\n@dlsniper “it's an implementation bug” This is not an implementation bug. The current behavior is strictly in conformance with the specification. It is difficult to—in anyway meaningful way—call this a “bug”.",
	"user": {
		"login": "puellanivis",
		"id": 10839126,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-24T20:45:10Z",
	"updated_at": "2016-08-24T20:45:10Z"
}
