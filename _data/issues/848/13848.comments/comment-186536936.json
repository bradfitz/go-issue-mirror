{
	"id": 186536936,
	"body": "When performance optimizing a write of a large string *without* WriteString, this may be a reasonable set of solutions:\r\n\r\n1. io.WriteString(w, s)\r\nThis doesn't work since io.WriteString calls Write([]byte(s)) once as well and as discussed above. Once the implicit *single* Write is documented, people will know this isn't what they want.\r\n\r\n2. io.Copy(w, strings.NewReader(s))\r\nFirst, io.Copy is a fairly reasonable function to use in this scenario, since most people instinctively know that Copy does some type of chunked transfer. Second, strings.Reader is the probably the most sensible type to use to convert a string to an io.Reader. Thus, it's the perfect place to make the change. Arguably, someone could use bytes.NewBufferString(s), but I don't think use of that is popular and certainly wouldn't be the clearer choice in this scenario. Thus, it is unlikely that we will have to make this optimization to other implementors of io.WriterTo given the clear choice to use strings.Reader in this situation. I believe that's the concern in the CL.\r\n\r\n3. Add w.WriteString to types that need it\r\nReality is that many writers do not support WriteString (zip.Writer, tar.Writer, flate.Writer, gzip.Writer, lzw.Writer, etc...) and I don't think it's reasonable to expect all writers to have WriteString as well. The implementation of which may not be under your control. Plus, I'm not a fan of the expansion of the API for Writers with WriteString.\r\n\r\n4. Allocate a buffer and chunk it yourself (few lines or so)\r\nNot a huge deal if people just chunk stuff themselves. I'm okay with this as well.",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-20T07:40:00Z",
	"updated_at": "2016-02-20T07:51:22Z"
}
