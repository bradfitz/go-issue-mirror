{
	"id": 150171106,
	"number": 15403,
	"state": "open",
	"title": "proposal: internal/cpu: new package to expose processor capabilities",
	"body": "We have a lot of packages in the std that uses specialized instructions\r\nthat are not always present. Most of the times, the package will detect\r\nthe required features by themselves. This is fine but will lead to code\r\nduplication. And as Bryan Chan mentioned on https://golang.org/cl/22201,\r\neven if the processor provides way to detect certain optional features,\r\nit's still better to use AT_HWCAP from Linux auxv because that also\r\ntakes kernel support into account.\r\n\r\nOnly the runtime can access auxv, so it makes sense for the runtime\r\nto query the processor capabilities and provide that to the packages.\r\n\r\nI propose that we add an internal package `internal/cpu` that exposes\r\ncapability flags for the current processor so that each std packages\r\ncould query it directly instead of having a runtime detection routine\r\nthat duplicates the work.\r\n\r\nAnother benefit is that, some processors, like ARM, doesn't provide\r\na way to do runtime capability detection, so we have to rely on the\r\nkernel to provide this information. Different kernels provide different\r\nmechanisms for this (sysctl for BSD and auxv for linux), so providing\r\na package that abstracts those OS-dependent feature away is also\r\nbeneficial.\r\n\r\nWe might promote the package to runtime/cpu if deemed fit, but that's\r\nout of the scope for this proposal.\r\n\r\nThe package could be modeled after the Linux's AT_HWCAP bits,\r\nand it will be processor dependent.",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 10,
	"created_at": "2016-04-21T19:37:02Z",
	"updated_at": "2016-10-18T01:21:56Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	},
	"reactions": {
		"total_count": 4,
		"+1": 4
	}
}
