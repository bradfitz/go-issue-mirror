{
	"id": 51285501,
	"number": 6648,
	"state": "closed",
	"title": "cmd/compile: obscure error messages for large constants",
	"body": "by **borman@google.com**:\n\n\u003cpre\u003eIssue filed on suggestion of Ian\n\nWhat steps will reproduce the problem?\n\nBuild the following package:\n\npackage b\n\nvar f = []float64 {\n\t47634102635436893179040485073748265163400240214004076398607741693502376385799646303105256699577209032590132615988260237052123652332890095616,\n\t12438414054641300055918190849808704283732243800785472203727097932000687811897290487171609691949473988773572358313712866199772466321053448142848,\n}\n\nWhat is the expected output?\n\nA more meaningful error message (ideally no message, theoretically it should compile)\nAppending a .0 to both constants results in the code compiling correctly.\n\nWhat do you see instead?\n\nThe first element generates the messages:\n./b.go:4: constant addition overflow\n./b.go:4: overflow in constant\n\nThe second element generates the messages:\n./b.go:5: constant multiplication overflow\n./b.go:5: overflow in constant\n\nIf the first element is commented out the second element generates:\n./b.go:5: ovf in mpaddxx\n./b.go:5: constant multiplication overflow\n./b.go:5: overflow in constant\n\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\nstandard compiler, 6g\n\nWhich operating system are you using?\nMac OSX 10.8.5\n\nWhich version are you using?  (run 'go version')\ngo version go1.2rc2 darwin/amd64\n\n\nPlease provide any additional information below.\n\nThe first constant is 2^464, the second is 92!  Both of these values can be represented\nin a float64 without loss of precision.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"closed_at": "2016-07-27T11:34:09Z",
	"created_at": "2013-10-23T17:39:02Z",
	"updated_at": "2016-07-27T11:34:09Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
