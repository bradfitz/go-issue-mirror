{
	"id": 192538725,
	"body": "What are people's thoughts on using a different algorithm? It's significantly more work, but has the possibility to run significantly faster.\r\n\r\nThe current algorithm, qsufsort, runs in O(nlogn), but relies on the standard library sort, which incurs some performance penalty.\r\n\r\nPossible alternatives:\r\n* Improve qsufsort, by inlining the sort implementation directly into it. My guess is that it will become ~3x faster, but will still be ~40% slower than SAIS.\r\n* Use [SAIS](https://sites.google.com/site/yuta256/sais), which runs in O(n), but is ~10% slower than divsufsort.\r\n* Use [divsufsort](https://github.com/y-256/libdivsufsort), which runs in O(nlogn), but is generally considered the fastest where n is not ridiculously large.\r\n\r\nAlthough divsufsort seems to be state-of-the-art, it is also fairly complicated. SAIS, however, is a significantly simpler algorithm comparable to qsufsort and may be worth investigating. A port of SAIS that I did was \u003e5x faster than the standard library's version of qsufsort.\r\n\r\nSome performance numbers for the C libraries are here: https://github.com/y-256/libdivsufsort/blob/wiki/SACA_Benchmarks.md\r\n\r\nP.S. I'm interested in suffix arrays because they are easiest way of doing the burrows-wheeler transform needed for a bzip2 encoder.",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-05T00:43:10Z",
	"updated_at": "2016-03-05T00:59:08Z"
}
