{
	"id": 66055319,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eHere is the order of events for getting both locked up:\n\nA) Thread 0 executes, stops in cv.wait()\nB) Thread 1 executes, sets state to 1, calls cv.signal()\nC) Thread 2 executes, stops in cv.wait()\nD) Thread 2 unblocks, due to signal from (B)\nE) Thread 2 loops, blocks again on cv.wait()\n\nDeadlock, with two goroutines dead.  In this case, not even Broadcast will help.\n\nThere's actually an improvement we can make to avoid (C) happening when Signal() takes\nthe number of goroutines from 1 to 0, but in the end it still boils down to the\nexpectation of which goroutine Signal() is awakening.\n\nThat said, please post the snippet you have with real code.  I'll have a look at it.\u003c/pre\u003e\n\n\n_Owner changed to @niemeyer._\n\n_Status changed to **Thinking**._",
	"user": {
		"login": "niemeyer",
		"id": 378683,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-05-31T12:07:33Z",
	"updated_at": "2014-12-08T10:09:15Z"
}
