{
	"id": 156905531,
	"number": 15845,
	"state": "open",
	"title": "cmd/compile: load after writebarrier call instead of spilling",
	"body": "The inplace append optimization (CLs 21813 and 22197) use a trick to avoid a spill: When doing `*dst = src` via a write barrier, immediately do `src = *dst`. (Search for a comment like \"load the value we just stored to avoid having to spill it\" in ssa.go.)\r\n\r\nIf `src` is used again, it doesn't need to be spilled before the write barrier; it is a load either way, but we can skip the spill/store. If `src` isn't used again, the load will be eliminated as dead code.\r\n\r\nPerhaps should we investigate extending this trick to all writebarrier-enabled pointer stores. Thoughts?\r\n\r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		},
		{
			"name": "Performance"
		}
	],
	"comments": 3,
	"created_at": "2016-05-26T05:19:55Z",
	"updated_at": "2016-10-20T14:20:50Z",
	"milestone": {
		"id": 2053058,
		"number": 49,
		"title": "Go1.9"
	}
}
