{
	"id": 96854043,
	"number": 11845,
	"state": "closed",
	"title": "os, runtime: should not have to wait for 10 EPIPE failures before raising SIGPIPE",
	"body": "Back in https://go.googlesource.com/go/+/f7d3eb9db97a65a43b8d6b8bf42b8698fe4468ee we added code so that if we saw 10 EPIPE failures in a row on the same file descriptor, we would exit the program.  Today we exit the program by raising a SIGPIPE signal, but we still wait for 10 failures.  That leads to issues like https://golang.org/issue/11839 and workarounds like https://golang.org/cl/12571.\r\n\r\nNow that we have the os/signal package, Go programs have the mechanisms they need to control this.  I propose that we change the Go runtime to not handle SIGPIPE by default.  If os/signal.Notify is used for SIGPIPE, that only at that point should we add a handler for SIGPIPE.  Then we should remove the EPIPE handling from the os package, and treat it like any other error.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"comments": 13,
	"closed_at": "2016-01-05T01:24:41Z",
	"created_at": "2015-07-23T16:34:08Z",
	"updated_at": "2016-01-05T02:00:16Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
