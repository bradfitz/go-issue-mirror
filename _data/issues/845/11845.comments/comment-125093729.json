{
	"id": 125093729,
	"body": "This proposal would make Go programs act like C programs by default: writing to a closed pipe would cause the program to exit due to a SIGPIPE signal.  To avoid that, a Go program would have to call signal.Ignore(syscall.SIGPIPE), which I agree is not ideal because it's Unix-specific.\r\n\r\nI also agree that this might be a bad default for Go.  In that case, I think we need a simple way for Go programs to say that they should exit when writing to a closed pipe, to avoid the contortions required to check for EPIPE.  It would be appropriate for any Go program that acts as a command line client to make that call.  Right now, a Go program can do it by calling syscall.Reset(syscall.SIGPIPE), and perhaps the go tool should do that at least for the help command.  But, again, it's Unix-specific.\r\n\r\nMaybe we need something like runtime.ExitOnBrokenPipe(bool).",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-27T05:43:30Z",
	"updated_at": "2015-07-27T05:43:30Z"
}
