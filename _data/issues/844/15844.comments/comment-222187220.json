{
	"id": 222187220,
	"body": "This turns out to be a real pain to do in SSA, so I added it to the frontend instead. Even the fairly simple fix there has pleasing results for package strconv, which makes heavy use of these kinds of checks, both directly and via package unicode.\r\n\r\n```\r\nname                          old time/op  new time/op   delta\r\nAtof64Decimal-8               41.4ns ± 3%   38.9ns ± 2%   -5.89%  (p=0.000 n=24+25)\r\nAtof64Float-8                 48.5ns ± 0%   46.8ns ± 3%   -3.64%  (p=0.000 n=20+23)\r\nAtof64FloatExp-8              97.7ns ± 4%   93.5ns ± 1%   -4.25%  (p=0.000 n=25+20)\r\nAtof64Big-8                    187ns ± 8%    162ns ± 2%  -13.54%  (p=0.000 n=24+22)\r\nAtof64RandomBits-8             250ns ± 6%    233ns ± 5%   -6.76%  (p=0.000 n=25+25)\r\nAtof64RandomFloats-8           160ns ± 0%    152ns ± 0%   -5.00%  (p=0.000 n=21+22)\r\nAtof32Decimal-8               41.1ns ± 1%   38.7ns ± 2%   -5.86%  (p=0.000 n=24+24)\r\nAtof32Float-8                 46.1ns ± 1%   43.5ns ± 3%   -5.63%  (p=0.000 n=21+24)\r\nAtof32FloatExp-8               101ns ± 4%    100ns ± 2%   -1.59%  (p=0.000 n=24+23)\r\nAtof32Random-8                 136ns ± 3%    133ns ± 3%   -2.83%  (p=0.000 n=22+22)\r\nAtoi-8                        33.8ns ± 3%   30.6ns ± 3%   -9.51%  (p=0.000 n=24+25)\r\nAtoiNeg-8                     31.6ns ± 3%   29.1ns ± 2%   -8.05%  (p=0.000 n=23+24)\r\nAtoi64-8                      48.6ns ± 1%   43.8ns ± 1%   -9.81%  (p=0.000 n=20+23)\r\nAtoi64Neg-8                   47.1ns ± 4%   42.0ns ± 2%  -10.83%  (p=0.000 n=25+25)\r\nFormatFloatDecimal-8           177ns ± 9%    178ns ± 6%     ~     (p=0.460 n=25+25)\r\nFormatFloat-8                  282ns ± 6%    282ns ± 3%     ~     (p=0.954 n=25+22)\r\nFormatFloatExp-8               259ns ± 7%    255ns ± 6%     ~     (p=0.089 n=25+24)\r\nFormatFloatNegExp-8            253ns ± 6%    254ns ± 6%     ~     (p=0.941 n=25+24)\r\nFormatFloatBig-8               340ns ± 6%    341ns ± 8%     ~     (p=0.600 n=22+25)\r\nAppendFloatDecimal-8          79.4ns ± 0%   80.6ns ± 6%     ~     (p=0.861 n=20+25)\r\nAppendFloat-8                  175ns ± 3%    174ns ± 0%     ~     (p=0.722 n=25+20)\r\nAppendFloatExp-8               142ns ± 4%    142ns ± 2%     ~     (p=0.948 n=25+24)\r\nAppendFloatNegExp-8            137ns ± 2%    138ns ± 2%   +0.70%  (p=0.001 n=24+25)\r\nAppendFloatBig-8               218ns ± 3%    218ns ± 4%     ~     (p=0.596 n=25+25)\r\nAppendFloatBinaryExp-8        80.0ns ± 4%   78.0ns ± 1%   -2.43%  (p=0.000 n=24+21)\r\nAppendFloat32Integer-8        82.3ns ± 3%   79.3ns ± 4%   -3.69%  (p=0.000 n=24+25)\r\nAppendFloat32ExactFraction-8   143ns ± 2%    143ns ± 0%     ~     (p=0.177 n=23+19)\r\nAppendFloat32Point-8           175ns ± 3%    175ns ± 3%     ~     (p=0.062 n=24+25)\r\nAppendFloat32Exp-8             139ns ± 2%    137ns ± 4%   -1.05%  (p=0.001 n=24+24)\r\nAppendFloat32NegExp-8          134ns ± 0%    137ns ± 4%   +2.06%  (p=0.000 n=22+25)\r\nAppendFloat64Fixed1-8         97.8ns ± 0%   98.6ns ± 3%     ~     (p=0.711 n=20+25)\r\nAppendFloat64Fixed2-8          110ns ± 3%    110ns ± 5%   -0.45%  (p=0.037 n=24+24)\r\nAppendFloat64Fixed3-8          102ns ± 3%    102ns ± 3%     ~     (p=0.684 n=24+24)\r\nAppendFloat64Fixed4-8          112ns ± 3%    110ns ± 0%   -1.43%  (p=0.000 n=25+18)\r\nFormatInt-8                   3.18µs ± 4%   3.10µs ± 6%   -2.54%  (p=0.001 n=24+25)\r\nAppendInt-8                   1.81µs ± 5%   1.80µs ± 5%     ~     (p=0.648 n=25+25)\r\nFormatUint-8                   812ns ± 6%    816ns ± 6%     ~     (p=0.777 n=25+25)\r\nAppendUint-8                   536ns ± 4%    538ns ± 3%     ~     (p=0.798 n=20+22)\r\nQuote-8                        605ns ± 6%    602ns ± 9%     ~     (p=0.573 n=25+25)\r\nQuoteRune-8                   99.5ns ± 8%  100.2ns ± 7%     ~     (p=0.432 n=25+25)\r\nAppendQuote-8                  361ns ± 3%    363ns ± 4%     ~     (p=0.085 n=25+25)\r\nAppendQuoteRune-8             23.3ns ± 3%   22.4ns ± 2%   -3.79%  (p=0.000 n=25+24)\r\nUnquoteEasy-8                  146ns ± 4%    145ns ± 5%     ~     (p=0.112 n=24+24)\r\nUnquoteHard-8                  804ns ± 6%    771ns ± 6%   -4.10%  (p=0.000 n=25+24)\r\n```\r\n\r\nThis optimization is only safe for constant bounds, because if the low bound is higher than the high bound, their difference underflows. It therefore doesn't help the `scanobject` check. However, `scanobject` can be adjusted manually; I plan to do so.\r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-27T16:07:23Z",
	"updated_at": "2016-05-27T16:23:26Z"
}
