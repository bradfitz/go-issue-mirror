{
	"id": 251684839,
	"body": "\u003e cannot support TLS without major work\r\n\r\nPerhaps I'm missing something, but is it not as simple as using either [Accept](https://golang.org/pkg/net/rpc/#Accept) or [ServeConn](https://golang.org/pkg/net/rpc/#ServeConn) with a TLS net.Listener or TLS net.Conn?\r\n\r\n```\r\nlistener, _ := tls.Listen(\"tcp\", \":1234\", config)\r\nrpc.Accept(listener)\r\n```\r\n\r\nAs you said, nice API, no need for an IDL or other dependencies, and I would add simple, composable, and powerful.  It's among the easiest RPC mechanisms to implement for Go, scales well, and achieves high throughput with low latency.  grpc to me isn't really an alternative as it's design is focused on completely different goals.  grpc provides many additional capabilities, but at the cost of the things that make net/rpc desirable.",
	"user": {
		"login": "robmccoll",
		"id": 2169777,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 3,
		"+1": 3
	},
	"created_at": "2016-10-05T14:06:53Z",
	"updated_at": "2016-10-05T14:13:08Z"
}
