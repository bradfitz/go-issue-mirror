{
	"id": 241943270,
	"body": "The following anecdotes of my experience with net/rpc and GRPC only makes sense if my understanding that freezing net/rpc would impact the growth of net/rpc/jsonrpc is correct? If not, I just wasted 15 minutes writing this. Here goes: \r\n\r\nI have worked with both net/rpc/jsonrpc and grpc in my projects. Incidentally both use cases were: Go server \u003c-\u003e JSON RPC Java Client. The first use case was to net/rpc/jsonrpc on localhost for automation testing of a phone (uiautomator) and second was a proper Android app using GRPC's streaming capabilities. \r\n\r\nIn my experience, setting up net/rpc/jsonrpc was trivial, and there was enough Java JSONRPC support to be found while GRPC took a bit of work setting up.\r\n\r\n1.  Firstly you need to premeditate your API design in the IDL which does sounds nice but is a pain if you want to get a prototype done quickly. \r\n\r\n2. Even though I was able to setup TLS on Android, till day I am not sure whether the setup was right since the documentation is lacking(checked again, the documentation is in the same state).\r\n  \r\n3. I had to write \"weird\" extra code to utilize the blockingStub in an executor pool. \r\n\r\nI guess points 2 \u0026 3 stem from the fact that there hasn't been enough work on GRPC to form a standard body of work. Also I realise 2 \u0026 3 are client issues but when you choose GRPC the client libraries get chosen for you by default. \r\n\r\nnet/rpc/jsonrpc provides a lot of flexibility of choice while picking a client library and is quicker and easier to use. ",
	"user": {
		"login": "adnaan",
		"id": 758447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-24T02:51:33Z",
	"updated_at": "2016-08-24T02:52:59Z"
}
