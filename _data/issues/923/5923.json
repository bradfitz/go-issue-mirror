{
	"id": 51284390,
	"number": 5923,
	"state": "closed",
	"title": "time: Year overflow for time.Date",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\n// Get the value of \ntime.Unix(-0x7FFFFFFBF5184BFB, -0x8000000000000000).Year() // good -292277022399\n// and compare it to the one just below \ntime.Unix(-0x7FFFFFFBF5184BFC, -0x8000000000000000).Year() // bad 292277026854\n\nYou can play with it here : \u003ca href=\"http://play.golang.org/p/SnAdKtD-_y\"\u003ehttp://play.golang.org/p/SnAdKtD-_y\u003c/a\u003e\n\nWhat is the expected output?\nYear should be in the same order as the timestamp\n\nWhat do you see instead?\nYear overflows\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\ngc/bin/go tool 6g\n\nWhich operating system are you using?\nLinux 64bits\n\nWhich version are you using?  (run 'go version')\ngo version go1.1.1 linux/amd64\n\nPlease provide any additional information below.\nIt might be completely minor but I could imagine some security issues in validation\nfunctions checking if the year of a given date is in the past.\u003c/pre\u003e",
	"user": {
		"login": "gbin",
		"id": 975564,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2014-12-08T10:32:31Z",
	"created_at": "2013-07-19T20:57:14Z",
	"updated_at": "2016-06-24T22:52:18Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
