{
	"id": 51285932,
	"number": 6923,
	"state": "open",
	"title": "spec: asymmetry between const and var conversions",
	"body": "\u003cpre\u003eThis is not a request for a language change; I am just documenting a weakness of the\ncurrent const conversion rules: it confuses people that one can convert -1 to a uint,\nbut only if the -1 is stored in variable. That is,\n\nvar s = uint(-1)\n\nis illegal: constant -1 overflows uint\n\nThat is clear, but it's also clear what I mean when I write this and it's a shame that I\ncan't express what I mean as a constant, especially since\n\nvar m = -1\nvar s = uint(m)\n\nworks. There is a clumsy workaround for this case, involving magic bit operations, but\nthe problem can turn up in other less avoidable ways:\n\nconst N int = 1234\nconst x int = N*1.5\n\nfails yet\n\nconst N = 1234\nconst x int = N*1.5\n\nsucceeds. (Note the missing \u0026quot;int\u0026quot; in the declaration of N.) This can be\nrewritten as\n\nconst x int = N*3/2\n\nbut if the floating point constant is itself named (as with the -1 in the uint example),\nit becomes impossible to express the constant value in Go even though its value seems\nclear.\n\nAgain, not asking for a change, just pointing out a clumsy result of the existing rules\u003c/pre\u003e",
	"user": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "LanguageChange"
		},
		{
			"name": "Thinking"
		}
	],
	"comments": 5,
	"created_at": "2013-12-10T00:32:43Z",
	"updated_at": "2015-04-14T19:45:21Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
