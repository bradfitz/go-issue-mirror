{
	"id": 66069085,
	"body": "\u003ca id=\"c7\"\u003e\u003c/a\u003eComment 7:\n\n\u003cpre\u003eActually, there's a difference between the current wording of the spec (\"In any\ncomparison, the first operand must be assignable to the type of the second operand, or\nvice versa.\" and \"The result of a comparison can be assigned to any boolean type. If the\ncontext does not demand a specific boolean type, the result has type bool.\") and my\nsuggestion that the result of a comparison should always be an untyped boolean:\n\npackage p\n\ntype mybool bool\n\nvar (\n\tx, y = 1, 2\n\tb bool\n\tm mybool\n\n\t_ bool = x \u0026lt; y\n\t_ mybool = x \u0026lt; y\n\t_ = b == (x \u0026lt; y)\n\t_ = m == (x \u0026lt; y) // legal according to spec but currently broken for gc (mismatched types mybool and bool) - reported in \u003ca href=\"https://golang.org/issue/3915\"\u003eissue #3915\u003c/a\u003e\n\n\t_ = b \u0026\u0026 (x \u0026lt; y)\n\t_ = m \u0026\u0026 (x \u0026lt; y) // illegal: mismatched types mybool and bool\n)\n\nMy suggestion (\"all comparisons result in an untyped bool\") would make the last \u0026\u0026\noperation legal, it currently isn't, and gc does the right thing.\n\nTo summarize: The current wording in the spec makes the result of comparisons behave\n\"almost\" like untyped booleans except when such a result is used as an operand in a \u0026\u0026\nor || operation.\n\nThus making the change in the spec is a language change, albeit one that does not\ninvalidate programs that compile now. If we don't do the spec change, we should clarify\nthe section on comparisons.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-09-13T17:02:09Z",
	"updated_at": "2014-12-22T06:17:18Z"
}
