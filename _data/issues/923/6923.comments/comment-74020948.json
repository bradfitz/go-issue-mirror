{
	"id": 74020948,
	"body": "@ianlancetaylor That's a good point. @minux 's suggestion could work (as in uint(int(-1)), or because -1 would \"default\" to int, uint(-1) - but defaulting to int cuts precision where we may not want it).\r\n\r\nBut I think it's not that bad because we can easily give \"meaning\" to an integer constant by defining it's concrete representation as two's complement like we do for variables - w/o defining that representation we couldn't explain uint(x) for an int variable x either.\r\n\r\nFor a start, let's just consider typed and untyped integer constants x: In either case, they would be considered as represented in \"infinite precision\" two's complement. Then, conversions of the form T(x), where x is another integer type would simply apply any truncation needed and assign a type. E.g.,\r\n\r\nint16(0x12345678) = 0x5678 of type int16\r\nbyte(-1) = 0xff of type byte\r\n\r\netc.\r\n\r\nFor floating point numbers it's similar. An untyped floating point constant would be arbitrarily precise, converting to a float32 and float64 would cut precision to 24 or 53bits respectively, and possibly underflow (value might become +/-0) or overflow (value might become +/-Inf - some of this is currently unspecified for variables but could be tied down, incl. rounding mode).\r\n\r\nAlong the same lines I think one could make float-\u003eint and int-\u003efloat conversions work.\r\n\r\nBut we may not need to go as far. The concrete issue is conversions between integer types. We could be pragmatic and simply state that integer constants are considered represented in infinite precision two's complement, and explicit type conversions do the \"obvious\" truncation/sign extension and type assignment.\r\n",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-12T05:44:08Z",
	"updated_at": "2015-02-12T05:44:08Z"
}
