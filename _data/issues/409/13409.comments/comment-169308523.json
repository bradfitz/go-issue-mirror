{
	"id": 169308523,
	"body": "OK, thanks. With the corrected output I now see that:\r\n\r\n1. Using Go's openpgp library you encrypt a file with \\r characters.\r\n2. Using Go's openpgp library to decrypt produces the original bytes verbatim.\r\n3. Using the gpg command line tool to decrypt strips the \\r characters.\r\n\r\nThat sounds like a problem in gpg, not Go's openpgp library. \r\n\r\nCan you check whether a round trip using gpg alone (leave Go openpgp completely out of it) preserves the \\r characters? \r\n\r\nIf gpg cannot round trip a binary file containing \\r characters, then I think it's just gpg's issue, although it may be intended that gpg is only used for text, and binary uses may be expected to do base64 or uuencoding or something like that first. But if gpg _can_ round trip a binary file containing \\r's, then maybe Go's openpgp library encryption in step 1 is failing to set some kind of \"binary-safe\" bit in the encrypted output.\r\n\r\nThanks.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-06T12:02:26Z",
	"updated_at": "2016-01-06T12:02:26Z"
}
