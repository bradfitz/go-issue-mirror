{
	"id": 74194511,
	"body": "Plans:\r\n\r\n* Store builds in a GCS bucket called `go-builder-tarballs`\r\n* Name the tarballs `$HASH.$BUILDER.tar.gz`\r\n* Overwrite existing tarballs; shouldn't happen except in weird circumstances where we re-trigger builds\r\n* In `buildInVM` run `make.bash`, then simultaneously push the tarball to GCS and run `run.bash`.\r\n* *checkpoint*\r\n* Add subrepo revision discovery to the findWork loop (requires changes on the dashboard side)\r\n* Add new `subrepo` and `subrepoRev` fields to `builderRev`  \r\n* Pass a builderRev value through from the main loop to `startBuilding`, `startBuildingInVM`\r\n* Add logic to `buildInVM` to do subrepo builds (fetch go tree tarball from gcs, fetch sub-repo tarball from gerrit, resolve any dependencies at master (the dashboard doesn't track transitive dependencies between subrepos unfortunately), run `go test`)\r\n\r\nIssues to resolve:\r\n\r\n* Garbage collection of old tarballs? Do we care? At, say, 50mb * 20 builders * 50 commits = 50gb/day. That's quite a lot.\r\n  * How to manage gc? Hard to think of a means that doesn't track state somehow. \r\n",
	"user": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-13T02:25:58Z",
	"updated_at": "2015-05-13T05:03:04Z"
}
