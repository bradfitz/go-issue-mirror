{
	"id": 241585456,
	"body": "Is this one instance of the general problem that a package whose name differs from its containing directory won't be found by goimports anymore?\r\n\r\ni.e. if I have `$GOPATH/src/github.com/akalin/mymain/main.go` with:\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"github.com/akalin/mypkg\"\r\n\t\"github.com/akalin/mypkg2\"\r\n)\r\n\r\nfunc main() {\r\n\tmypkg.Foo()\r\n\tmyotherpkg.Bar()\r\n}\r\n```\r\n\r\nwhere the `mypkg` package is in `github.com/akalin/mypkg`, but the `myotherpkg` package is in `github.com/akalin/mypkg2`, then goimports will automatically insert the first import if omitted, but won't insert the second import if omitted? (This is the current behavior, according to my tests.)\r\n\r\nSounds like this is a casualty of the new speed improvements. If so, it's unfortunate but understandable. I didn't run into this with protobuf packages, but with similar auto-generated code, namely https://github.com/keybase/client/tree/master/go/protocol , which has package name `keybase1` but directory name `protocol`.\r\n\r\nIt's probably impossible to solve this in general without slowing down goimports again, but I wonder if we could have some sort of convention for auto-generated code, such that the directory name is some function of the package name, e.g. `pkgName + \"Autogen\"`.",
	"user": {
		"login": "akalin-keybase",
		"id": 13270622,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-22T23:47:23Z",
	"updated_at": "2016-08-22T23:47:23Z"
}
