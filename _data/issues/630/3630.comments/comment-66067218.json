{
	"id": 66067218,
	"body": "\u003ca id=\"c7\"\u003e\u003c/a\u003eComment 7:\n\n\u003cpre\u003eHere's a real example (\u003ca href=\"http://play.golang.org/p/ddFnVS6F-_\"\u003ehttp://play.golang.org/p/ddFnVS6F-_\u003c/a\u003e -- works locally--I assume\nplay restricts listen, etc):\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc Handler(w http.ResponseWriter, req *http.Request) {\n\tif req.Method == \"POST\" {\n\t\temail := req.FormValue(\"email\")\n\t\t// ...\n\t\tfmt.Println(\"Sending confirmation email to:\", email)\n\t}\n}\n\nconst DeceitUrl =\n\"\u003ca href=\"http://localhost:21847/handler?realLookingGarbage\u0026verylongquerystringlalala\u0026someA92581258KJQWTQ9125812512590\u0026email=bwahah%40eliteteam.ro\"\u003ehttp://localhost:21847/handler?realLookingGarbage\u0026verylongquerystringlalala\u0026someA92581258KJQWTQ9125812512590\u0026email=bwahah%40eliteteam.ro\u003c/a\u003e\"\n\nfunc main() {\n\thttp.Handle(\"/handler\", http.HandlerFunc(Handler))\n\tgo http.ListenAndServe(\":21847\", nil)\n\thttp.DefaultClient.Post(DeceitUrl, \"application/x-www-form-urlencoded\", strings.NewReader(\"email=usersrealemail@example.com\"))\n}\n\n\n# go run req.go\nSending confirmation email to: bwahah@eliteteam.ro\n\n\nAssuming that the page handler is doing nothing but checking whether the request type is\nPOST, this will let a malicious user override arbitrary values in the form via the\nquerystring by e.g. sending them an email with a \"link\" that's actually href'ing\nsomething else. This particular example works because the form posts to the same page\n(no action value in \u0026lt;form\u0026gt;), so the query string is retained. You could expect\ndevelopers to always use \"action=/somepage\", or users to read the whole querystring even\nif it's very long, but this doesn't feel right to me.\n\nSimilarly, if a dev isn't actually checking the request method for e.g. an account\ndeletion handler, one could easily get a user to click on a link that goes to\n/confirmdeleteaccount?confirmed=1 (although I think this is a weaker argument since they\n_should_ be employing CSRF tokens/referer checking anyway, and similar POST requests are\njust slightly harder to forge.)\n\nMaybe giving POST params precedence over GET ones is all that's needed to solve the\nfirst issue, and I think that actually makes sense in general (POSTs being \"heavier\"\nthan GET.)\u003c/pre\u003e",
	"user": {
		"login": "patrickmn",
		"id": 72885,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-05-17T23:26:15Z",
	"updated_at": "2014-12-22T06:14:57Z"
}
