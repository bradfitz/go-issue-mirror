{
	"id": 190527278,
	"body": "Let's assume there is a program that accepts a parameter `-o`, it only accepts this parameter if `-o` is in this format:\r\n\r\n```\r\nsomeprogram -o\"………\"\r\n```\r\n\r\nIt does **not accept**:\r\n\r\n```\r\nsomeprogram \"-o………\"\r\n```\r\n\r\nSo `someprogram` user **can't do** this in shell: `someprogram \"-oC:\\Folder with space\\\"`\r\nBut **can do** this: `someprogram -o\"C:\\Folder with space\\\"`\r\n\r\n***This is how this program behaves, it is coded this way***, it does not allow `quotes dash o path quotes` because the programmer doesn't use a good parsing method. Programmer coded their program so only it accepts values if parameter meets this format: `dash o quotes path quotes`\r\n\r\nWindows doesn't have any problem and executes this command `someprogram -o\"C:\\Folder with space\\` without any errors. When you execute the exact command in Go, it escapes things inaccurately and adds `\\` in front of `C:\\Folder with space\\` thus command fails.\r\n\r\n`someprogram` has to use `-o\"...\"` format to work, because `someprogram -o\"C:\\Folder with space\\\"` **works in Command Prompt, it should work in Go too**:\r\n\r\n```go\r\ncmd := exec.Command(\"someprogram\", `-o\"C:\\Folder with space\\\"`)\r\ncmd.Run() // doesn't work, path becomes \\C:\\Folder with space\\, program fails\r\n```\r\n",
	"user": {
		"login": "dogancelik",
		"id": 486818,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-01T03:48:58Z",
	"updated_at": "2016-03-01T03:59:07Z"
}
