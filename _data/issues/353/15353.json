{
	"id": 149277596,
	"number": 15353,
	"state": "open",
	"title": "x/crypto/openpgp: fails to handle expired subkeys correctly",
	"body": "Hello,\r\n\r\nimporting OpenPGP keys with expired signature subkeys, but a valid non-expired signature subkey, is not being handled correctly by golang.org/x/crypto/openpgp functions such as ReadEntity.\r\n\r\nWhat I am experiencing is that when the imported public key has a single non-expired signature subkey then there are no issues.\r\n\r\nHowever if the imported key has one or more expired signature subkeys, and a valid one as the last packet, only the first expired subkey is considered when creating the PublicKey object, making it invalid for encryption.\r\n\r\nI am attaching a public key that exhibits these properties, the key was parsed as follows:\r\n\r\nkeyBlock, _ := armor.Decode(keyFile)\r\nreader := packet.NewReader(keyBlock.Body)\r\nentity, _ := openpgp.ReadEntity(reader)\r\n\r\nand later used with openpgp.Encrypt().\r\n\r\nCurrently gpg --export, even with --export-options export-minimal, always carry expired signature subkeys (despite gpg documentation suggesting the contrary). This means that I have no easy way of exporting the public key in a way which  is friendly to golang.org/x/crypto/openpgp, unless I am missing something.\r\n\r\nLet me know if you need further information to debug this.\r\n\r\nThanks!\r\n\r\n[test_key.txt](https://github.com/golang/go/files/224819/test_key.txt)\r\n",
	"user": {
		"login": "abarisani",
		"id": 8976118,
		"type": "User",
		"site_admin": false
	},
	"comments": 0,
	"created_at": "2016-04-18T21:28:52Z",
	"updated_at": "2016-04-18T22:45:08Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
