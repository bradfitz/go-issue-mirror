{
	"id": 51282006,
	"number": 4353,
	"state": "closed",
	"title": "cmd/gc: GOARCH=386: invalid reuse of register",
	"body": "\u003cpre\u003eWhen I run this program (reduced from a file generated by test/index.go)\n\npackage main\n\nvar aib [100000]int\nvar paib *[100000]int = \u0026amp;aib\nvar i64 int64 = 100023\n\nfunc main() {\n\t_ = paib[i64]\n}\n\nwith GOARCH=amd64 I get\n\npanic: runtime error: index out of range\n\ngoroutine 1 [running]:\nmain.main()\n\t/home/iant/foo3.go:8 +0x3c\n\ngoroutine 2 [syscall]:\ncreated by runtime.main\n\t/home/iant/go2/src/pkg/runtime/proc.c:225\nexit status 2\n\n\nWhen I run it with GOARCH=386 I get\n\nunexpected fault address 0x186b7\nthrow: fault\n[signal 0xb code=0x1 addr=0x186b7 pc=0x8048c3d]\n\ngoroutine 1 [running]:\nmain.main()\n\t/home/iant/foo3.go:8 +0x3d\n\ngoroutine 2 [syscall]:\ncreated by runtime.main\n\t/home/iant/go2/src/pkg/runtime/proc.c:225\nexit status 2\n\n\nThe GOARCH=amd64 panic is correct: this is an \u0026quot;index out of range.\u0026quot;  It is not\nan \u0026quot;unexpected fault address.\u0026quot;\n\nThe generated code with GOARCH=386 is\n\n--- prog list \u0026quot;main\u0026quot; ---\n0000 (/home/iant/foo3.go:7) TEXT    main+0(SB),$0-0\n0001 (/home/iant/foo3.go:8) MOVL    paib+0(SB),BX\n0002 (/home/iant/foo3.go:8) MOVL    i64+0(SB),BX\n0003 (/home/iant/foo3.go:8) MOVL    i64+4(SB),DX\n0004 (/home/iant/foo3.go:8) MOVL    DX,CX\n0005 (/home/iant/foo3.go:8) MOVL    BX,AX\n0006 (/home/iant/foo3.go:8) CMPL    DX,$0\n0007 (/home/iant/foo3.go:8) JNE     $1,13\n0008 (/home/iant/foo3.go:8) MOVL    BX,BP\n0009 (/home/iant/foo3.go:8) LEAL    (BX),SI\n0010 (/home/iant/foo3.go:8) TESTB   $0,(SI)\n0011 (/home/iant/foo3.go:8) CMPL    BP,$100000\n0012 (/home/iant/foo3.go:8) JCS     $1,15\n0013 (/home/iant/foo3.go:8) CALL    ,runtime.panicindex+0(SB)\n0014 (/home/iant/foo3.go:8) UNDEF   ,\n0015 (/home/iant/foo3.go:8) LEAL    (SI)(BP*4),SI\n0016 (/home/iant/foo3.go:8) MOVL    (SI),AX\n0017 (/home/iant/foo3.go:9) RET     ,\n\nThe problem occurs at the start: the value of paib is loaded into bx (0002).  Then the\nlow-order 32-bit of i64 is loaded into bx (0003).  Then we load the contents of bx into\nsi (0009).  That instruction expects bx to hold paib, but instead it holds the low-order\n32 bits of i64.\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:23:06Z",
	"created_at": "2012-11-06T14:33:17Z",
	"updated_at": "2016-06-24T22:27:47Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
