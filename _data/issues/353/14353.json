{
	"id": 134117107,
	"number": 14353,
	"state": "open",
	"title": "net/http: arbitrary string between port and path in url is silently accepted",
	"body": "1) Run a (Go) webserver (on e.g. localhost:8080)\r\n\r\n2) Run this as client:\r\n\r\n\tpackage main\r\n\t\r\n\timport (\r\n\t\t\"io\"\r\n\t\t\"log\"\r\n\t\t\"os\"\r\n\t\t\"net/http\"\r\n\t)\r\n\t\r\n\tfunc main() {\r\n\t\t // works with \"http://localhost:8080foobar/valid_path\" too\r\n\t\tresp, err := http.Get(\"http://localhost:8080foobar/\")\r\n\t\tif err != nil {\r\n\t\t\tlog.Fatal(err)\r\n\t\t}\r\n\t\tdefer resp.Body.Close()\r\n\t\tif _, err := io.Copy(os.Stdout, resp.Body); err != nil {\r\n\t\t\tlog.Fatal(err)\r\n\t\t}\r\n\t}\r\n\r\n3) Notice how the \"foobar\" string between the port and the url path does not seem to be a problem.\r\nI was expecting to get an error with such an URL.\r\n\r\nI did not dig any further to see where that leniency comes from, because maybe that's not an actual concern. Let me know and I can look into it.\r\n\r\ngo version: go1.6beta2 linux/amd64\r\n",
	"user": {
		"login": "mpl",
		"id": 626071,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		}
	],
	"comments": 9,
	"created_at": "2016-02-16T22:41:58Z",
	"updated_at": "2016-10-07T19:50:40Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
