{
	"id": 51284307,
	"number": 5864,
	"state": "closed",
	"title": "runtime: possible map-related memory leak",
	"body": "by **lionghostshop**:\n\n\u003cpre\u003eThanks.\n\nWhat steps will reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\nRun code below\npackage main \n\nimport (\n\t\u0026quot;text/scanner\u0026quot;\n\t\u0026quot;os\u0026quot;\n\t//\u0026quot;io\u0026quot;\n\t\u0026quot;math/rand\u0026quot;\n\t\u0026quot;fmt\u0026quot;\n\t\u0026quot;time\u0026quot;\n\t//\u0026quot;strconv\u0026quot;\n\t\u0026quot;runtime/pprof\u0026quot;\n)\n\nfunc run() int {\n\tvar cin scanner.Scanner\n\tstart:=time.Now().UnixNano()\n\tf,_:=os.Open(\u0026quot;/dev/shm/benchmark.txt\u0026quot;)\n\tdefer f.Close()\n\tcin.Init(f)\n\ttok:=cin.Scan()\n\tm:=make(map[string]string)\n\tfor tok!=scanner.EOF{\n\t\tkey:=cin.TokenText()\n\t\tcin.Scan()\n\t\tval:=cin.TokenText()\n\t\t//fmt.Printf(\u0026quot;(%s) (%s)\\n\u0026quot;,key,val)\n\t\tm[key]=val\n\t\t//delete(m,key)\n\t\ttok=cin.Scan()\n\t}\n\tend:=time.Now().UnixNano()\n\tfmt.Printf(\u0026quot;First half %d\\n\u0026quot;, (end-start)/1000000 )\n\tstart=time.Now().UnixNano()\n\tsum:=0\n\tfor key,_:=range m{\n\t\ta,_:=strconv.Atoi(key)\n\t\tb,_:=strconv.Atoi(val)\n\t\t//a:=1\n\t\t//b:=2\n\t\tsum+=a*b\n\t\t//delete(m,key)\n\t}\n\tend=time.Now().UnixNano()\n\tfmt.Printf(\u0026quot;Second half %d\\n\u0026quot;, (end-start)/1000000 )\n\tm=nil\n\treturn sum\n}\nfunc main() {\n\tf,_:=os.OpenFile(\u0026quot;/dev/shm/benchmark.txt\u0026quot;,os.O_APPEND|os.O_CREATE|os.O_TRUNC|os.O_WRONLY,0600)\n\tfor i:=0;i\u0026lt;1000000;i++{\n\t\tf.WriteString(fmt.Sprintf(\u0026quot;%d %d\\n\u0026quot;,rand.Int31(),rand.Int31() ))\n\t}\n\tf.Close()\n\tsum:=0\n\tfor i:=0;i\u0026lt;100;i++ {\n\t\tsum+=run()\n\t\tif i == 10 {\n\t\t\tw,_:=os.OpenFile(\u0026quot;memory.dump\u0026quot;,os.O_APPEND|os.O_CREATE|os.O_TRUNC|os.O_WRONLY,0600)\n\t\t\tpprof.WriteHeapProfile(w)\n\t\t\tw.Close()\n\t\t//\tbreak\n\t\t}\n\t}\n\tfmt.Println(sum)\n}\n\n\n\nWhat is the expected output?\nThe memory should not grow continuously \n\nWhat do you see instead?\nThe memory grows continuously\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\nAMD 64 bit go under linux\n\nWhich operating system are you using?\nFedora 19 64 bit\n\nWhich version are you using?  (run 'go version')\n1.1.1\nIn fact, I checked out the source code. So the version should be slightly newer than\n1.1.1\n\nPlease provide any additional information below.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 17,
	"closed_at": "2014-12-08T10:32:12Z",
	"created_at": "2013-07-11T11:57:18Z",
	"updated_at": "2016-06-24T22:51:40Z"
}
