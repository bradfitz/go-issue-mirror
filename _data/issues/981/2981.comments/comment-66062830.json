{
	"id": 66062830,
	"body": "\u003ca id=\"c28\"\u003e\u003c/a\u003eComment 28 by **beatgammit**:\n\n\u003cpre\u003eI agree with #7 and like the interface idea in comment #16. This makes it more-or-less a\ndup of 3343.\n\nI'm writing a generalized test result saving/reporting package based on TAP-Y/J as\ndefined by Ruby's tapout\n(\u003ca href=\"https://github.com/rubyworks/tapout/wiki/TAP-Y-J-Specification)\"\u003ehttps://github.com/rubyworks/tapout/wiki/TAP-Y-J-Specification)\u003c/a\u003e. The specification\nisn't well written, but it does optionally allow for a lot of useful information.\n\nA short list of useful information that I would like to see the testing package support:\n\n- line numbers and stack-traces of failures\n- metadata (e.g. TODO means the test failure doesn't indicate a general failure, good\nfor TDD); not yet supported by testing.T, but would be nice\n- skipped tests w/reason\n- elapsed time (can be calculated if tests are run in series)\n- test coverage\n\nIt would be nice to have a formal notion of test suites, test cases and tests, but for\nnow packages (or perhaps files?) and functions can be used as test cases and tests\nrespectively. TAP-Y/J (and perhaps JUnit as well) has a notion of embedding test cases\nwithin other test cases, but I don't think this is useful enough to complicate the\ntesting package.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-04-05T19:21:12Z",
	"updated_at": "2014-12-08T10:15:32Z"
}
