{
	"id": 240430967,
	"body": "@nodirt, in #14313, @rsc and I proposed an extended form of the current text benchmark format that, in particular, supports arbitrary metric:value pairs. Since your proposal builds on the existing, rigid testing.BenchmarkResults, we would lose this capability in JSON output. This has proven invaluable in more sophisticated benchmarks such as the [x/benchmarks](https://golang.org/x/benchmarks) and [gcbench](https://github.com/aclements/go-gcbench) since it lets us leverage our existing tools for benchmark analysis for important metrics beyond the limited set understood by the testing package.\r\n\r\nArguably this is an issue with testing.BenchmarkResult, but since we can't change the existing fields, here are a few ways I can think of to address this:\r\n\r\n1. Introduce a JSONBenchmarkResult to parallel JSONResult that consists simply of the number of iterations and a map from string metric names to float64 values.\r\n\r\n2. Make JSONResult.Benchmark a map[string]float64 with the convention that the \"N\" entry is the number of iterations.\r\n\r\n3. Take advantage of the parallel between structs and maps in JSON and say that other producers are allowed to add fields to the benchmark result. However, this would mean that consumers have to define their own type paralleling JSONResult in order to swap in a map that can accept arbitrary key: value pairs for the benchmark.\r\n\r\n4. Add a map[string]float64 field to testing.BenchmarkResult for \"additional metrics\". Since this is adding a field, it would not violate the Go 1 compatibility promise.\r\n\r\nMy other question is how your proposal deals with subtests/subbenchmarks. I assume this is simply part of the Name field and that the string follows the same convention as it does in the text output, but wanted to check.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-17T14:33:12Z",
	"updated_at": "2016-08-17T14:33:12Z"
}
