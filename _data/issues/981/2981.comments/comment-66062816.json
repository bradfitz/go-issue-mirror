{
	"id": 66062816,
	"body": "\u003ca id=\"c14\"\u003e\u003c/a\u003eComment 14:\n\n\u003cpre\u003eI spent a while looking into this. I think it's too complex to get into Go 1.1. The hard\npart is making sure that every possible case ends up printing json and not text intended\nfor humans. \n\nFirst there is the problem that all test output needs to be caught, even output\ngenerated with fmt.Printf or the builtin println or panic traces, and even if the test\nbinary exits unexpectedly. The only truly feasible way to do this is to make the go\ncommand interpret the test binary output and generate the JSON from that interpretation. \n\nI started to try to make that a little easier by adding a -test.outputprefix flag to\nspecify a prefix string that the test binary will put at the beginning of each line that\nit generates, so that the structure of the test output can be seen more readily. That's\nin CL 7678044.\n\nBut then the next problem is making the go command parse that output and generate JSON.\nAnd the go command must also catch all its own output and convert it to JSON\nequivalents, not just for running tests but also for build failures and the like. That's\na bigger task, and at some point it starts to seem like maybe we should make the go\ncommand just have a little bit of framing and have a separate program whose only job is\nto invoke the go command (or, perhaps, also a test binary directly) and parse the output\nand turn it into JSON.\n\nThis is too big a change for what time we have remaining for Go 1.1. Perhaps we can\nfigure out what the story is by Go 1.2. For now, an external tool that parses the go\ncommand output (and therefore also the test binary output, if using go test -v) seems\nlike the best choice. And then once that exists we can think about small framing changes\nto make the parsing less confusable.\u003c/pre\u003e\n\n_Labels changed: added **go1.2**, removed **go1.1**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-11T20:12:05Z",
	"updated_at": "2014-12-08T10:15:32Z"
}
