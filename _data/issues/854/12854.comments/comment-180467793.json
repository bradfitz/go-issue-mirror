{
	"id": 180467793,
	"body": "@neild Yes, that's exactly the issue.\r\n\r\nThe major problem with the \"untyped literal\" perspective is the ambiguity (or asymmetry) between struct field names and map keys.  Given the following program:\r\n\r\n    const animal = \"gopher\"\r\n    var x = {animal: \"rabbit\"}\r\n\r\nwhat should the type of `x` be?  (Is it `map[string]string`, or `struct{ animal string }`?)\r\n\r\nIf that question has a well-defined answer, then the spec for untyped literals must contain an arbitrary bias toward either structs or maps and programmers will have to remember which way that bias runs.  (The situation is analogous to C++'s \"most vexing parse\".)\r\n\r\nIf ambiguous cases are defined as a program error, users will be confused and surprised when they accidentally run afoul of it.  (Analogous to Go's existing parsing ambiguity for composite literals in brace-delimited control-flow statements.)",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-05T17:51:45Z",
	"updated_at": "2016-02-05T17:51:45Z"
}
