{
	"id": 66061199,
	"body": "\u003ca id=\"c16\"\u003e\u003c/a\u003eComment 16:\n\n\u003cpre\u003eFor TestRoundTripGzip I missed one more error check. Lets see if\nDefaultTransport.RoundTrip fails too:\n\ndiff -r 1107a7d3cb07 src/pkg/net/http/transport_test.go\n--- a/src/pkg/net/http/transport_test.go\tFri Jan 27 17:51:53 2012 +1100\n+++ b/src/pkg/net/http/transport_test.go\tWed Feb 08 16:07:02 2012 +1100\n@@ -441,7 +441,10 @@\n \t\t}\n \t\tif accept == \"gzip\" {\n \t\t\trw.Header().Set(\"Content-Encoding\", \"gzip\")\n-\t\t\tgz, _ := gzip.NewWriter(rw)\n+\t\t\tgz, e := gzip.NewWriter(rw)\n+\t\t\tif e != nil {\n+\t\t\t\tt.Error(e)\n+\t\t\t}\n \t\t\tgz.Write([]byte(responseBody))\n \t\t\tgz.Close()\n \t\t} else {\n@@ -453,14 +456,23 @@\n\n \tfor i, test := range roundTripTests {\n \t\t// Test basic request (no accept-encoding)\n-\t\treq, _ := NewRequest(\"GET\", fmt.Sprintf(\"%s/?testnum=%d\u0026expect_accept=%s\", ts.URL, i,\ntest.expectAccept), nil)\n+\t\treq, e := NewRequest(\"GET\", fmt.Sprintf(\"%s/?testnum=%d\u0026expect_accept=%s\", ts.URL, i,\ntest.expectAccept), nil)\n+\t\tif e != nil {\n+\t\t\tt.Fatal(e)\n+\t\t}\n \t\tif test.accept != \"\" {\n \t\t\treq.Header.Set(\"Accept-Encoding\", test.accept)\n \t\t}\n \t\tres, err := DefaultTransport.RoundTrip(req)\n+\t\tif err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n \t\tvar body []byte\n \t\tif test.compressed {\n-\t\t\tgzip, _ := gzip.NewReader(res.Body)\n+\t\t\tgzip, e := gzip.NewReader(res.Body)\n+\t\t\tif e != nil {\n+\t\t\t\tt.Fatal(e)\n+\t\t\t}\n \t\t\tbody, err = ioutil.ReadAll(gzip)\n \t\t\tres.Body.Close()\n \t\t} else {\n\nYou applied diff correctly, because your stack trace matches my program source. So just\ndo it again please.\n\nDo not worry about error you see when you run all.bash. It is known and has been fixed.\n\nDo not need to run all.bash after changing files in net/http, just run\n\ngo test -test.v -test.run TestRoundTripGzip\n\nlike you did, and it will rebuild all that is required.\n\nAs to TestStreamingGet, you can't just add w.Write(make([]byte, 4000000)) in places you\nlike, because this will send 4000000 bytes of 0. Instead, lets put some debug print\nstatements to see what is happening:\n\ndiff -r 1107a7d3cb07 src/pkg/net/http/client_test.go\n--- a/src/pkg/net/http/client_test.go\tFri Jan 27 17:51:53 2012 +1100\n+++ b/src/pkg/net/http/client_test.go\tWed Feb 08 16:56:58 2012 +1100\n@@ -326,22 +326,30 @@\n func TestStreamingGet(t *testing.T) {\n \tsay := make(chan string)\n \tts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\t\tfmt.Printf(\"| flushing:\\n\")\n \t\tw.(Flusher).Flush()\n+\t\tfmt.Printf(\"| flushed:\\n\")\n \t\tfor str := range say {\n-\t\t\tw.Write([]byte(str))\n+\t\t\tfmt.Printf(\"| sending: %s\\n\", str)\n+\t\t\tn, e := w.Write([]byte(str))\n+\t\t\tfmt.Printf(\"| sent: %d %v\\n\", n, e)\n \t\t\tw.(Flusher).Flush()\n+\t\t\tfmt.Printf(\"| flushed:\\n\")\n \t\t}\n \t}))\n \tdefer ts.Close()\n \n \tc := \u0026Client{}\n+\tfmt.Printf(\". connecting: %s\\n\", ts.URL)\n \tres, err := c.Get(ts.URL)\n \tif err != nil {\n \t\tt.Fatal(err)\n \t}\n+\tfmt.Printf(\". connected:\\n\")\n \tvar buf [10]byte\n \tfor _, str := range []string{\"i\", \"am\", \"also\", \"known\", \"as\", \"comet\"} {\n \t\tsay \u0026lt;- str\n+\t\tfmt.Printf(\". say \u0026lt;-: %v\\n\", str)\n \t\tn, err := io.ReadFull(res.Body, buf[0:len(str)])\n \t\tif err != nil {\n \t\t\tt.Fatalf(\"ReadFull on %q: %v\", str, err)\n@@ -353,6 +361,7 @@\n \t\tif got != str {\n \t\t\tt.Fatalf(\"Expected %q, got %q\", str, got)\n \t\t}\n+\t\tfmt.Printf(\". received: %v\\n\", got)\n \t}\n \tclose(say)\n \t_, err = io.ReadFull(res.Body, buf[0:1])\n\nThank you.\n\n\nAlex\u003c/pre\u003e",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-02-08T05:59:18Z",
	"updated_at": "2014-12-22T06:05:14Z"
}
