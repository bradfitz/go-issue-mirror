{
	"id": 120661531,
	"body": "\u003e Concern 1: Can't Create http.Server.Conn from net.Conn\r\n\r\nBrad is the expert here; I really know nothing. However, there is [`net/http.Server.Serve`](https://golang.org/pkg/net/http/#Server.Serve), which allows one to use any [`net.Listener`](https://golang.org/pkg/net/#Listener) as a source of connections. Since `net.Listener` is an interface, your concrete type can do whatever you want to the connections it produces. I suspect that would give you the flexibility that you need. (For an example, see the [source code to `ListenAndServeTLS`](https://golang.org/src/net/http/server.go?s=55253:55321#L1843).)\r\n\r\n\u003e Concern 2: Can't replace or delete from RootCAs\r\n\r\nThere's an error in your understanding here: `x509.CertPool` is used *only* for verification. Your step three, under \"And what happens when a browser connects\" is thus incorrectâ€”the certificate chain that the server returns is taken only from the result of `GetCertificate`. Although the return value of `GetCertificate` is a [`*Certificate`](https://tip.golang.org/pkg/crypto/tls/#Certificate), note that the structure contains a `[][]byte` for the actual DER data. In Go that's like a `std::vector\u003cstd::string\u003e` from C++: it's one or more DER-encoded certificates. The server returns exactly those certificates to the client, and in the given order. It doesn't try to build a chain at all.",
	"user": {
		"login": "agl",
		"id": 21203,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-11T21:03:25Z",
	"updated_at": "2015-07-11T21:03:25Z"
}
