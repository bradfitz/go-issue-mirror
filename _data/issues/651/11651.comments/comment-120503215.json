{
	"id": 120503215,
	"body": "Thanks Brad,\r\n\r\nHere's a user story:\r\n* Bob sign up with Awesome Host\r\n* He gets a free domain that points to one of Awesome Host's servers\r\n* He uploads some files and they go into a specific path /srv/www/bob.example.com\r\n* Now someone visits bob.example.com.\r\n* The server checks in it's [memory] cache, but there is no certificate\r\n* There server checks a well-known location on disk /etc/letsencrypt/live/bob.example.com, no dice\r\n* The server runs letsencrypt and then downloads the certificates to /etc/letsencrypt/live/bob.example.com\r\n\r\nInstead of knowing what all hosts and certificates are beforehand, and without having to restart the server, the service can host secure websites dynamically. That's what I'm doing. It's as easy as pie in node.js because they expose an SNICallback before certificates are handled.\r\n\r\nSince go currently requires so much statically defined up-front, the easiest way to accomplish this is to manually create a tlsConn from a net.Conn and then pass that to http.newConn.\r\n\r\nAlso, it's not exposing \"internals\" any more than it used to or any more than the TLS and net modules currently do (see my example). It's simply exposing a capability.\r\n\r\nI suppose you could also add an SNICallback like node.js does, but from the code I looked at, it seems that that would be far more changes rather than taking the approach that http.ListenAndServe and http.ListenAndServeTLS approach, which would simply encapsulate capability in a composite style.\r\n\r\nAnother option perhaps would be to move a more complete version of what I've created as [https.ListenAndServeSNI](https://github.com/coolaj86/authentication-as-a-service/blob/master/https/https.go#L64), which still needs an SNICallback.\r\n\r\nIs that explanation clear?\r\n\r\n",
	"user": {
		"login": "coolaj86",
		"id": 122831,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-10T19:33:27Z",
	"updated_at": "2015-07-10T19:33:27Z"
}
