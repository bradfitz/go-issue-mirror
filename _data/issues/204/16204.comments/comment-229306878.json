{
	"id": 229306878,
	"body": "Hello there @JadenTeng, I am not qualified to answer this bug because I don't know much about encoding/gob but I made something here https://play.golang.org/p/8PB1oN2eFO that perhaps could be useful for comparing behaviors across diferent encoders. They all have different behaviors of course, but I found it encoding/gob can successfully encode a nil map, I also think the nil you are passing in being untyped might be a bit of a problem for encoding/gob. I also came across this documentation from encoding/gob\r\n\u003cimg width=\"952\" alt=\"screen shot 2016-06-29 at 2 27 14 am\" src=\"https://cloud.githubusercontent.com/assets/4898263/16447355/14344be6-3da1-11e6-87e3-0bf232349605.png\"\u003e\r\n\r\nI don't have the different versions of Go built on this machine to test out when it could have started, but from the source code, it seems like the behavior has been in for a long time https://github.com/golang/go/blame/master/src/encoding/gob/encoder.go so a change might break compatibility with older programs?\r\n\r\n* As for the code to play around with the different encoders json, xml and gob, it is inlined below:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"bytes\"\r\n\t\"encoding/gob\"\r\n\t\"encoding/json\"\r\n\t\"encoding/xml\"\r\n\t\"fmt\"\r\n\t\"io\"\r\n)\r\n\r\ntype encoder interface {\r\n\tEncode(interface{}) error\r\n}\r\n\r\ntype encoderType int\r\n\r\nconst (\r\n\tJSON encoderType = iota\r\n\tXML\r\n\tGOB\r\n)\r\n\r\nfunc (e encoderType) String() string {\r\n\tswitch e {\r\n\tcase JSON:\r\n\t\treturn \"json\"\r\n\tcase XML:\r\n\t\treturn \"xml\"\r\n\tcase GOB:\r\n\t\treturn \"gob\"\r\n\tdefault:\r\n\t\treturn \"unknown\"\r\n\t}\r\n}\r\n\r\nfunc (et encoderType) encoderProducer() func(io.Writer) encoder {\r\n\tswitch et {\r\n\tcase JSON:\r\n\t\treturn func(w io.Writer) encoder { return json.NewEncoder(w) }\r\n\tcase GOB:\r\n\t\treturn func(w io.Writer) encoder { return gob.NewEncoder(w) }\r\n\tcase XML:\r\n\t\treturn func(w io.Writer) encoder { return xml.NewEncoder(w) }\r\n\tdefault:\r\n\t\treturn nil\r\n\t}\r\n}\r\n\r\nfunc (et encoderType) nilBehavior(src interface{}) (serializedBytes []byte, err interface{}) {\r\n\tdefer func() {\r\n\t\tif rerr := recover(); rerr != nil {\r\n\t\t\tswitch rerr := rerr.(type) {\r\n\t\t\tcase error:\r\n\t\t\t\terr = rerr\r\n\t\t\tdefault:\r\n\t\t\t\terr = fmt.Errorf(\"%v\", rerr)\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n\tbuf := new(bytes.Buffer)\r\n\tencoderFn := et.encoderProducer()\r\n\terr = encoderFn(buf).Encode(src)\r\n\tserializedBytes = buf.Bytes()\r\n\treturn\r\n}\r\n\r\nfunc main() {\r\n\tvar fn func() error = nil\r\n\tgob.Register(fn)\r\n\ttestCases := [...]struct {\r\n\t\ttyp       encoderType\r\n\t\twantErr   error\r\n\t\twantBytes []byte\r\n\t\tvalue     interface{}\r\n\t}{\r\n\t\t{JSON, nil, []byte(\"null\\n\"), nil},\r\n\t\t{JSON, nil, []byte(\"null\\n\"), map[string]string(nil)},\r\n\r\n\t\t{XML, nil, []byte(\"\"), nil},\r\n\r\n\t\t{GOB, nil, []byte(\"\"), nil},\r\n\t\t{GOB, nil, []byte(\"\\x0e\\xff\\x81\\x04\\x01\\x02\\xff\\x82\\x00\\x01\\f\\x01\\f\\x00\\x00\\x04\\xff\\x82\\x00\\x00\"), map[string]string(nil)},\r\n\t\t{GOB, nil, []byte(\"\"), func() (fn func() error) { return }},\r\n\t\t{GOB, nil, []byte(\"\\x03\\f\\x00\\x00\"), new(string)},\r\n\t}\r\n\r\n\tfor i, tt := range testCases {\r\n\t\tgotBytes, gotErr := tt.typ.nilBehavior(tt.value)\r\n\t\tif !bytes.Equal(gotBytes, tt.wantBytes) {\r\n\t\t\tfmt.Printf(\"#%d: %s: gotBytes=%q wantBytes=%q\\n\", i, tt.typ, gotBytes, tt.wantBytes)\r\n\t\t}\r\n\r\n\t\tif gotErr != tt.wantErr {\r\n\t\t\tfmt.Printf(\"#%d: %s: gotErr=%v wantErr=%v\\n\", i, tt.typ, gotErr, tt.wantErr)\r\n\t\t}\r\n\t}\r\n}\r\n```",
	"user": {
		"login": "odeke-em",
		"id": 4898263,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-29T09:35:14Z",
	"updated_at": "2016-06-29T09:35:14Z"
}
