{
	"id": 89035210,
	"number": 11254,
	"state": "closed",
	"title": "encoding/hex: Suggestions for doc improvements",
	"body": "Quoting from https://groups.google.com/d/msg/golang-nuts/eV3uNlEFPrc/KeHIjyN2oVEJ (not all of this is appropriate in my opinion, but it is useful information from a Go newbie):\r\n\r\nNow, let's look at a specific package, e.g. https://golang.org/pkg/encoding/hex/\r\n\r\nAlready, we can see there are no examples here, making it tough for a newcomer to follow along with.  For example, it's not clear that the functions that are listed here need to be prefixed with the \"hex.\" prefix.  Yes, that's a simple language thing, but if it's not re-enforced in the documentation with a few examples, it takes that much longer to learn.\r\n\r\nConsider this (BAD/CONFUSING):\r\nvar ErrLength = errors.New(\"encoding/hex: odd length hex string\")\r\n\r\nWhat is that?  My first assumption is that this is some type of package variable because it's under the \"Variables\" heading.  It's only by comparing this to other packages that I can guess that this is a reference to a particular error message.  But without an example to see how it might arise, I have no idea what to do with this info or what exactly it pertains to.\r\n\r\nBETTER: include an example of working with the returned variables to see how/why they might be relevant or omit this entirely and just list the message strings.  \r\n\r\nBAD: func Dumper\r\n\r\nThis \"crosses the beams\" by referencing another package: \"io\".  Without an example to work off of, it's not clear how one might instantiate an io.Writer or what might be done with an io.WriteCloser.  We end up banging our heads on a different wall over at the \"io\" docs.\r\n\r\nBETTER: include an example here so we aren't on a wild goose chase to figure out how to instantiate io.Writer objects.\r\n\r\nBAD: func DecodeString\r\n\r\nAgain, no example, so immediately I have to pay the toll of fiddling with this to see how it works.  Perhaps an example like this:\r\n\r\n    bytes, _ := hex.DecodeString(\"AE\")\r\n    fmt.Println(hex.EncodeToString(bytes)) // ae (lowercase)\r\n\r\n\r\nIt might be worth mentioning that the output is always lowercase, and it would be good to explain the behavior that pops up if your input is out of range, e.g. \"XX\".  This is why it would be useful to describe the parameters and output in their own dedicated sections.\r\n\r\nBAD: func Decode\r\n\r\nThe explanation includes \"Decode decodes src into DecodedLen(len(src)) bytes\" -- nesting like that is more concise, but it's harder to follow.  I'm not entirely sure I understand what this function does.  Again, an example would help clarify this more than paragraphs of text.\r\n\r\nBETTER: ???",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		}
	],
	"comments": 6,
	"closed_at": "2016-09-08T19:51:19Z",
	"created_at": "2015-06-17T14:36:16Z",
	"updated_at": "2016-09-08T19:51:19Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
