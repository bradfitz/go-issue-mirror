{
	"id": 230163551,
	"body": "\u003e\u003e Did you know trait in rust language(@mezoni)? It's very similar to interface in golang, but support default implementation.\r\n\r\nMixins, traits used in OOP.\r\nAlso I know abstract classes.\r\nAlso I know that in Go language there are no such thing as OOP and inheritance.\r\nWhat benefits from the `mixins` and `traits` in the Go language if the Go language does not supports inheritance?\r\nAlso I know that the Go language does not supports `abstract` and `virtual` methods only because they are useless in the Go language (without inheritance).\r\n\r\nP.S.\r\nIn computer programming, a `trait` is a concept used in `object-oriented programming`, which represents a set of methods that can be used to extend the functionality of a `class`.\r\n\r\nI think that these terms are not an applicable to the Go language.\r\n- Object-oriented programming\r\n- Class\r\n\r\nThe Go language supports only a value based types.\r\nMost of them are bits based structs.\r\nEven an `int16` type is only a struct with a length of the 16 bits.\r\nThis is the main advantage: a value based types with support of references (pointers).\r\n",
	"user": {
		"login": "mezoni",
		"id": 2311549,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-03T17:03:22Z",
	"updated_at": "2016-07-03T17:03:22Z"
}
