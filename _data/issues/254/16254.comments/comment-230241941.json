{
	"id": 230241941,
	"body": "What would fmt.Println(\u0026baz{}) print?\n\nIn other words if a type implements two interfaces that have default\nmethods with the same name, which of them the type should \"inherit\"?\nOn Jul 4, 2016 15:47, \"mezoni\" \u003cnotifications@github.com\u003e wrote:\n\n\u003e Another interesting approach:\n\u003e\n\u003e type Foo interface {\n\u003e   String()\n\u003e }\n\u003e // Default implfunc (r Foo) String() string {\n\u003e   return \"Foo\"\n\u003e }\n\u003e type Baz interface {\n\u003e   Foo\n\u003e }\n\u003e // Default implfunc (r Baz) String() string {\n\u003e   return \"Baz\"\n\u003e }\n\u003e type baz struct {\n\u003e }\n\u003e func main() {\n\u003e   var baz Baz\n\u003e   var foo Foo\n\u003e   baz :=  \u0026baz{}\n\u003e   fmt.Prinln(baz) // =\u003e \"baz\"\n\u003e   foo :=  \u0026baz{}\n\u003e   fmt.Prinln(foo) // =\u003e \"foo\"\n\u003e }\n\u003e\n\u003e How this works?\n\u003e The fmt.Println() takes an agrument as the interface {}.\n\u003e The interface {} holds info about the type.\n\u003e\n\u003e The foo := \u0026baz{} is an type Foo interface{} value.\n\u003e The type Foo interface{} has its own default implemenattion.\n\u003e\n\u003e The baz := \u0026baz{} is an type Baz interface{} value.\n\u003e The type Baz interface{} has its own default implemenattion.\n\u003e\n\u003e â€”\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/16254#issuecomment-230238228\u003e, or mute\n\u003e the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe/AGy9A6qAr0hiePENb8CDRSQtqQ64pHNzks5qSMi5gaJpZM4JD1Cm\u003e\n\u003e .\n\u003e\n",
	"user": {
		"login": "kostya-sh",
		"id": 7126275,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-04T09:04:38Z",
	"updated_at": "2016-07-04T09:04:38Z"
}
