{
	"id": 230391769,
	"body": "Here is an exmaple from package `io`:\r\n\r\n```go\r\n// src/io.go\r\ntype Writer interface {\r\n    Write(b []byte) (n int, err error)\r\n}\r\n\r\ntype stringWriter interface {\r\n    WriteString(s string) (n int, err error)\r\n}\r\n\r\nfunc WriteString(w Writer, s string) (n int, err error) {\r\n    if sw, ok := w.(stringWriter); ok {\r\n        return sw.WriteString(s)\r\n    }\r\n    return w.Write([]byte(s))\r\n}\r\n```\r\nBut, if we have this feature(`Default implementation for interface`), we can rewrite it like below:\r\n```go\r\ntype Writer interface {\r\n    Write(b []byte) (n int, err error)\r\n}\r\n\r\nfunc (w Writer) WriteString(s string) (n int, err error) {\r\n    return w.Write([]byte(s))\r\n}\r\n```\r\nThe strange interface `stringWriter` not needed because your implemented `Writer` can overides `WriteString` method. And using `WriteString` as a method of `Writer` maybe better than a package-level function.",
	"user": {
		"login": "mkideal",
		"id": 16500461,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-05T05:42:23Z",
	"updated_at": "2016-07-05T05:46:02Z"
}
