{
	"id": 170112261,
	"body": "There's one thing to consider.\r\n\r\nThe work the runtime does to randomize map iteration order is 100% justified because every time you iterate over a map you get a different order, so you are seeing the effects of the randomization 100% of the times.\r\n\r\nThat wouldn't be true for sort.Sort randomization. You write \r\n\r\n\u003e It would only take N swaps to shuffle things quite well\r\n\r\nbut you don't really care about \"shuffling the array well\". What you really care about is the chance that N swaps change the order of the sorted array. Suppose you do the math and find out that that chance is really small, unless the array has a lot of repeated entries. \r\n\r\nThat would mean that you are always paying a price for a benefit that has **zero** chances to affect the user for arrays with no repeated entries, a very small chance to be seen if the array has a moderated number of repeated entries, and a decent chance to be a real benefit only for arrays with a decent number of repeated entries.\r\n\r\nThe bottom line is that one thing is to pay a (maybe) small price for something that has a visible effect 100% of the times, and another thing is to pay a (maybe) small price for something that has a (maybe) very small chance to actually do something useful. If the final result of the sorting is unchanged, the work spent shuffling is 100% wasted.\r\n\r\nJust a random thought. I didn't do any math, nor run any benchmark.\r\n\r\n\r\n",
	"user": {
		"login": "ALTree",
		"id": 3586803,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-08T20:16:44Z",
	"updated_at": "2016-01-08T20:16:44Z"
}
