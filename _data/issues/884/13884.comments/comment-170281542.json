{
	"id": 170281542,
	"body": "Thanks for pointing out that this is for 1.7, I had lost that part of the\nthread.\n\nThanks for listening to my side of the story.\n\nDave\n\nOn Sun, 10 Jan 2016, 08:07 Russ Cox \u003cnotifications@github.com\u003e wrote:\n\n\u003e Please note that this issue is not for Go 1.6. It is marked as a crazy idea\n\u003e for Go 1.7, one that we could try early and see (or not).\n\u003e\n\u003e Please also note that the suggestion is to flip a coin to decide the order\n\u003e of equal values. Shuffling the input was an implementation detail, and Ian\n\u003e came up with a simpler, cheaper implementation. But the implementation is\n\u003e not important, just the effect. I've retitled the bug accordingly.\n\u003e\n\u003e The only possible visible difference between sorting algorithms is how they\n\u003e arrange equal values. There was discussion on the CL about whether to\n\u003e accept the Go 1.6 change at all, exactly because it would break things. I\n\u003e decided that we couldn't reasonably turn down a 10-20% improvement for fear\n\u003e of breaking code depending on unspecified behavior. But as expected it does\n\u003e break things.\n\u003e\n\u003e Re \"now I have to update all my code and check my tests\", that's basically\n\u003e true for Go 1.6 with just the algorithmic change. The idea in this issue -\n\u003e flipping a coin for equal values, so that all future algorithmic changes\n\u003e are invisible - is meant to make it possible to respond \"and this is the\n\u003e last time you'll need to do that when you update to a new Go version.\"\n\u003e\n\u003e But again, it's a crazy idea, and it's not for Go 1.6.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/13884#issuecomment-170281061\u003e.\n\u003e\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-09T21:13:53Z",
	"updated_at": "2016-01-09T21:13:53Z"
}
