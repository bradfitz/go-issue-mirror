{
	"id": 170302372,
	"body": "We should emphasize that in the docs, yes, but I am not sure it will have\nmuch effect. Most of us here know this already and don't need the reminder\nand yet (1) the package example for sort had this bug until we fixed it\nearlier this cycle, and (2) the Go compiler had this bug in its register\nallocator, which I discovered as different compiler output from the C\nversion (using OS X qsort) and the Go version (using sort.Sort).\n\nPeople will write code that depends on the internals of sort and not\nrealize it. It's incredibly easy. We do it too. The question is should we\nleave that kind of bug undetected, a landmine to discover when moving\nbetween different versions or implementations of Go, or should we make it\nlikely to show up in ordinary testing and use? I honestly don't know. I see\nthe arguments on both sides.\n\nIt will be interesting to see how much trouble the sort change gives people\nupdating to Go 1.6 (once it is out).\n\nI will note that we had a similar problem last cycle with programs\n(especially tests) implicitly depending on scheduling order and breaking\nfrom Go 1.4 to Go 1.5, so we put some randomness into the scheduler when\nusing -race, precisely to make that kind of bug likely to show up. In that\ncase we did not see a way to randomize the relevant decisions in the\ngeneral case without a significant slowdown. There are things that are\ndifferent about sort.Sort, but not everything.\n",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-10T02:42:34Z",
	"updated_at": "2016-01-10T02:42:34Z"
}
