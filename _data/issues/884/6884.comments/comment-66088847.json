{
	"id": 66088847,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eThere's a known failing test case for this already in the tree,\n\n        {\n                broken: true,\n                name:   \"struct comment\",\n                pkg:    \"time\",\n                in: `package main\n\n// This is a comment before a struct.\ntype T struct {\n        t  time.Time\n}\n`,\n                out: `package main\n\nimport \"time\"\n\n// This is a comment before a struct.\ntype T struct {\n        t time.Time\n}\n`,\n        },\n\n\nMaybe Robert can suggest what the proper fix would be.\n\nIn the astutil directory:\n\n$ go test -v\n\n--- PASS: TestAddImport (0.00 seconds)\n\timports_test.go:209: struct comment is known broken:\n\t\tgot: package main\n\n\t\timport\n\n\t\t// This is a comment before a struct.\n\t\t\"time\"\n\n\t\ttype T struct {\n\t\t\tt time.Time\n\t\t}\n\n\t\twant: package main\n\n\t\timport \"time\"\n\n\t\t// This is a comment before a struct.\n\t\ttype T struct {\n\t\t\tt time.Time\n\t\t}\n\timports_test.go:216: AST before:\n\t\t     0  *ast.File {\n\t\t     1  .  Doc: nil\n\t\t     2  .  Package: struct comment:1:1\n\t\t     3  .  Name: *ast.Ident {\n\t\t     4  .  .  NamePos: struct comment:1:9\n\t\t     5  .  .  Name: \"main\"\n\t\t     6  .  .  Obj: nil\n\t\t     7  .  }\n\t\t     8  .  Decls: []ast.Decl (len = 1) {\n\t\t     9  .  .  0: *ast.GenDecl {\n\t\t    10  .  .  .  Doc: *ast.CommentGroup {\n\t\t    11  .  .  .  .  List: []*ast.Comment (len = 1) {\n\t\t    12  .  .  .  .  .  0: *ast.Comment {\n\t\t    13  .  .  .  .  .  .  Slash: struct comment:3:1\n\t\t    14  .  .  .  .  .  .  Text: \"// This is a comment before a struct.\"\n\t\t    15  .  .  .  .  .  }\n\t\t    16  .  .  .  .  }\n\t\t    17  .  .  .  }\n\t\t    18  .  .  .  TokPos: struct comment:4:1\n\t\t    19  .  .  .  Tok: type\n\t\t    20  .  .  .  Lparen: -\n\t\t    21  .  .  .  Specs: []ast.Spec (len = 1) {\n\t\t    22  .  .  .  .  0: *ast.TypeSpec {\n\t\t    23  .  .  .  .  .  Doc: nil\n\t\t    24  .  .  .  .  .  Name: *ast.Ident {\n\t\t    25  .  .  .  .  .  .  NamePos: struct comment:4:6\n\t\t    26  .  .  .  .  .  .  Name: \"T\"\n\t\t    27  .  .  .  .  .  .  Obj: *ast.Object {\n\t\t    28  .  .  .  .  .  .  .  Kind: type\n\t\t    29  .  .  .  .  .  .  .  Name: \"T\"\n\t\t    30  .  .  .  .  .  .  .  Decl: *(obj @ 22)\n\t\t    31  .  .  .  .  .  .  .  Data: nil\n\t\t    32  .  .  .  .  .  .  .  Type: nil\n\t\t    33  .  .  .  .  .  .  }\n\t\t    34  .  .  .  .  .  }\n\t\t    35  .  .  .  .  .  Type: *ast.StructType {\n\t\t    36  .  .  .  .  .  .  Struct: struct comment:4:8\n\t\t    37  .  .  .  .  .  .  Fields: *ast.FieldList {\n\t\t    38  .  .  .  .  .  .  .  Opening: struct comment:4:15\n\t\t    39  .  .  .  .  .  .  .  List: []*ast.Field (len = 1) {\n\t\t    40  .  .  .  .  .  .  .  .  0: *ast.Field {\n\t\t    41  .  .  .  .  .  .  .  .  .  Doc: nil\n\t\t    42  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {\n\t\t    43  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {\n\t\t    44  .  .  .  .  .  .  .  .  .  .  .  NamePos: struct comment:5:2\n\t\t    45  .  .  .  .  .  .  .  .  .  .  .  Name: \"t\"\n\t\t    46  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {\n\t\t    47  .  .  .  .  .  .  .  .  .  .  .  .  Kind: var\n\t\t    48  .  .  .  .  .  .  .  .  .  .  .  .  Name: \"t\"\n\t\t    49  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 40)\n\t\t    50  .  .  .  .  .  .  .  .  .  .  .  .  Data: nil\n\t\t    51  .  .  .  .  .  .  .  .  .  .  .  .  Type: nil\n\t\t    52  .  .  .  .  .  .  .  .  .  .  .  }\n\t\t    53  .  .  .  .  .  .  .  .  .  .  }\n\t\t    54  .  .  .  .  .  .  .  .  .  }\n\t\t    55  .  .  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {\n\t\t    56  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {\n\t\t    57  .  .  .  .  .  .  .  .  .  .  .  NamePos: struct comment:5:5\n\t\t    58  .  .  .  .  .  .  .  .  .  .  .  Name: \"time\"\n\t\t    59  .  .  .  .  .  .  .  .  .  .  .  Obj: nil\n\t\t    60  .  .  .  .  .  .  .  .  .  .  }\n\t\t    61  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {\n\t\t    62  .  .  .  .  .  .  .  .  .  .  .  NamePos: struct comment:5:10\n\t\t    63  .  .  .  .  .  .  .  .  .  .  .  Name: \"Time\"\n\t\t    64  .  .  .  .  .  .  .  .  .  .  .  Obj: nil\n\t\t    65  .  .  .  .  .  .  .  .  .  .  }\n\t\t    66  .  .  .  .  .  .  .  .  .  }\n\t\t    67  .  .  .  .  .  .  .  .  .  Tag: nil\n\t\t    68  .  .  .  .  .  .  .  .  .  Comment: nil\n\t\t    69  .  .  .  .  .  .  .  .  }\n\t\t    70  .  .  .  .  .  .  .  }\n\t\t    71  .  .  .  .  .  .  .  Closing: struct comment:6:1\n\t\t    72  .  .  .  .  .  .  }\n\t\t    73  .  .  .  .  .  .  Incomplete: false\n\t\t    74  .  .  .  .  .  }\n\t\t    75  .  .  .  .  .  Comment: nil\n\t\t    76  .  .  .  .  }\n\t\t    77  .  .  .  }\n\t\t    78  .  .  .  Rparen: -\n\t\t    79  .  .  }\n\t\t    80  .  }\n\t\t    81  .  Scope: *ast.Scope {\n\t\t    82  .  .  Outer: nil\n\t\t    83  .  .  Objects: map[string]*ast.Object (len = 1) {\n\t\t    84  .  .  .  \"T\": *(obj @ 27)\n\t\t    85  .  .  }\n\t\t    86  .  }\n\t\t    87  .  Imports: nil\n\t\t    88  .  Unresolved: []*ast.Ident (len = 1) {\n\t\t    89  .  .  0: *(obj @ 56)\n\t\t    90  .  }\n\t\t    91  .  Comments: []*ast.CommentGroup (len = 1) {\n\t\t    92  .  .  0: *(obj @ 10)\n\t\t    93  .  }\n\t\t    94  }\n\n\t\tAST after:\n\t\t     0  *ast.File {\n\t\t     1  .  Doc: nil\n\t\t     2  .  Package: struct comment:1:1\n\t\t     3  .  Name: *ast.Ident {\n\t\t     4  .  .  NamePos: struct comment:1:9\n\t\t     5  .  .  Name: \"main\"\n\t\t     6  .  .  Obj: nil\n\t\t     7  .  }\n\t\t     8  .  Decls: []ast.Decl (len = 2) {\n\t\t     9  .  .  0: *ast.GenDecl {\n\t\t    10  .  .  .  Doc: nil\n\t\t    11  .  .  .  TokPos: -\n\t\t    12  .  .  .  Tok: import\n\t\t    13  .  .  .  Lparen: -\n\t\t    14  .  .  .  Specs: []ast.Spec (len = 1) {\n\t\t    15  .  .  .  .  0: *ast.ImportSpec {\n\t\t    16  .  .  .  .  .  Doc: nil\n\t\t    17  .  .  .  .  .  Name: nil\n\t\t    18  .  .  .  .  .  Path: *ast.BasicLit {\n\t\t    19  .  .  .  .  .  .  ValuePos: -\n\t\t    20  .  .  .  .  .  .  Kind: STRING\n\t\t    21  .  .  .  .  .  .  Value: \"\\\"time\\\"\"\n\t\t    22  .  .  .  .  .  }\n\t\t    23  .  .  .  .  .  Comment: nil\n\t\t    24  .  .  .  .  .  EndPos: -\n\t\t    25  .  .  .  .  }\n\t\t    26  .  .  .  }\n\t\t    27  .  .  .  Rparen: -\n\t\t    28  .  .  }\n\t\t    29  .  .  1: *ast.GenDecl {\n\t\t    30  .  .  .  Doc: *ast.CommentGroup {\n\t\t    31  .  .  .  .  List: []*ast.Comment (len = 1) {\n\t\t    32  .  .  .  .  .  0: *ast.Comment {\n\t\t    33  .  .  .  .  .  .  Slash: struct comment:3:1\n\t\t    34  .  .  .  .  .  .  Text: \"// This is a comment before a struct.\"\n\t\t    35  .  .  .  .  .  }\n\t\t    36  .  .  .  .  }\n\t\t    37  .  .  .  }\n\t\t    38  .  .  .  TokPos: struct comment:4:1\n\t\t    39  .  .  .  Tok: type\n\t\t    40  .  .  .  Lparen: -\n\t\t    41  .  .  .  Specs: []ast.Spec (len = 1) {\n\t\t    42  .  .  .  .  0: *ast.TypeSpec {\n\t\t    43  .  .  .  .  .  Doc: nil\n\t\t    44  .  .  .  .  .  Name: *ast.Ident {\n\t\t    45  .  .  .  .  .  .  NamePos: struct comment:4:6\n\t\t    46  .  .  .  .  .  .  Name: \"T\"\n\t\t    47  .  .  .  .  .  .  Obj: *ast.Object {\n\t\t    48  .  .  .  .  .  .  .  Kind: type\n\t\t    49  .  .  .  .  .  .  .  Name: \"T\"\n\t\t    50  .  .  .  .  .  .  .  Decl: *(obj @ 42)\n\t\t    51  .  .  .  .  .  .  .  Data: nil\n\t\t    52  .  .  .  .  .  .  .  Type: nil\n\t\t    53  .  .  .  .  .  .  }\n\t\t    54  .  .  .  .  .  }\n\t\t    55  .  .  .  .  .  Type: *ast.StructType {\n\t\t    56  .  .  .  .  .  .  Struct: struct comment:4:8\n\t\t    57  .  .  .  .  .  .  Fields: *ast.FieldList {\n\t\t    58  .  .  .  .  .  .  .  Opening: struct comment:4:15\n\t\t    59  .  .  .  .  .  .  .  List: []*ast.Field (len = 1) {\n\t\t    60  .  .  .  .  .  .  .  .  0: *ast.Field {\n\t\t    61  .  .  .  .  .  .  .  .  .  Doc: nil\n\t\t    62  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {\n\t\t    63  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {\n\t\t    64  .  .  .  .  .  .  .  .  .  .  .  NamePos: struct comment:5:2\n\t\t    65  .  .  .  .  .  .  .  .  .  .  .  Name: \"t\"\n\t\t    66  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {\n\t\t    67  .  .  .  .  .  .  .  .  .  .  .  .  Kind: var\n\t\t    68  .  .  .  .  .  .  .  .  .  .  .  .  Name: \"t\"\n\t\t    69  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 60)\n\t\t    70  .  .  .  .  .  .  .  .  .  .  .  .  Data: nil\n\t\t    71  .  .  .  .  .  .  .  .  .  .  .  .  Type: nil\n\t\t    72  .  .  .  .  .  .  .  .  .  .  .  }\n\t\t    73  .  .  .  .  .  .  .  .  .  .  }\n\t\t    74  .  .  .  .  .  .  .  .  .  }\n\t\t    75  .  .  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {\n\t\t    76  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {\n\t\t    77  .  .  .  .  .  .  .  .  .  .  .  NamePos: struct comment:5:5\n\t\t    78  .  .  .  .  .  .  .  .  .  .  .  Name: \"time\"\n\t\t    79  .  .  .  .  .  .  .  .  .  .  .  Obj: nil\n\t\t    80  .  .  .  .  .  .  .  .  .  .  }\n\t\t    81  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {\n\t\t    82  .  .  .  .  .  .  .  .  .  .  .  NamePos: struct comment:5:10\n\t\t    83  .  .  .  .  .  .  .  .  .  .  .  Name: \"Time\"\n\t\t    84  .  .  .  .  .  .  .  .  .  .  .  Obj: nil\n\t\t    85  .  .  .  .  .  .  .  .  .  .  }\n\t\t    86  .  .  .  .  .  .  .  .  .  }\n\t\t    87  .  .  .  .  .  .  .  .  .  Tag: nil\n\t\t    88  .  .  .  .  .  .  .  .  .  Comment: nil\n\t\t    89  .  .  .  .  .  .  .  .  }\n\t\t    90  .  .  .  .  .  .  .  }\n\t\t    91  .  .  .  .  .  .  .  Closing: struct comment:6:1\n\t\t    92  .  .  .  .  .  .  }\n\t\t    93  .  .  .  .  .  .  Incomplete: false\n\t\t    94  .  .  .  .  .  }\n\t\t    95  .  .  .  .  .  Comment: nil\n\t\t    96  .  .  .  .  }\n\t\t    97  .  .  .  }\n\t\t    98  .  .  .  Rparen: -\n\t\t    99  .  .  }\n\t\t   100  .  }\n\t\t   101  .  Scope: *ast.Scope {\n\t\t   102  .  .  Outer: nil\n\t\t   103  .  .  Objects: map[string]*ast.Object (len = 1) {\n\t\t   104  .  .  .  \"T\": *(obj @ 47)\n\t\t   105  .  .  }\n\t\t   106  .  }\n\t\t   107  .  Imports: []*ast.ImportSpec (len = 1) {\n\t\t   108  .  .  0: *(obj @ 15)\n\t\t   109  .  }\n\t\t   110  .  Unresolved: []*ast.Ident (len = 1) {\n\t\t   111  .  .  0: *(obj @ 76)\n\t\t   112  .  }\n\t\t   113  .  Comments: []*ast.CommentGroup (len = 1) {\n\t\t   114  .  .  0: *(obj @ 30)\n\t\t   115  .  }\n\t\t   116  }\n\n\n\nOne gross way would be to resort to manipulating the text of the program rather than the\nAST.\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-12-05T12:12:53Z",
	"updated_at": "2014-12-08T10:38:19Z"
}
