{
	"id": 66075160,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eIf we want to follow Python, then in Go what would\n    for i, v := range []int{1} {\n    } else {\n        fmt.Println(i, v)\n    }\nprint?  In Python the else clause is executed after the range terminates.  In Go the\nvariables i and v would most likely be visible in the else clause, by analogy with the\nif statement and because there are cases where it would be useful.  But this is\nconfusing, so perhaps i and v should not be visible, but then what is the point of the\nelse clause?  Or perhaps a for range should not execute the else clause, but then we\naren't following Python.\n\nIt's easy to implement the else clause with two goto statements.  Or if you don't like\ngoto you can use loops like\n    L1: for a := true; a; a = false {\n    }\nand labelled break statements.\n\nI can't see a strong reason for for/else in Go.  It's not necessary, and the scoping is\neither confusing or different from if/else.\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-02-25T23:26:03Z",
	"updated_at": "2014-12-08T10:26:00Z"
}
