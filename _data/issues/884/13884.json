{
	"id": 125677507,
	"number": 13884,
	"state": "closed",
	"title": "proposal: sort: return equal values in non-deterministic order",
	"body": "Crazy idea, but what if sort.Sort randomly permuted its input a bit before starting?\r\n\r\nGo 1.6 has a different sort.Sort than Go 1.5 and I've seen at least a dozen test failures at Google that were implicitly depending on the old algorithm. The usual scenario is that you sort a slice of structs by one field in the struct. If there are entries with that field equal but others unequal and you expect a specific order for the structs at the end, you are depending on sort.Sort's algorithm. A later sort.Sort might make a different choice and produce a different order. This makes programs not portable from one version of Go to another, much like map hash differences used to make programs not portable from one architecture to another. We solved maps by randomizing the iteration order a bit. In the map case it's not a full permutation, but just enough variation to make tests obviously flaky.\r\n\r\nI wonder if we should do the same for sort.Sort. It would only take N swaps to shuffle things quite well, and we already use N\\*log(N) swaps, so N\\*(log(N)+1) is not likely to be noticed. That would also protect a bit against malicious inputs.\r\n\r\nIt would surprise people, especially people who think sort.Sort == sort.Stable. But the rationale is that it's better to surprise them the first time they run the code instead of however many Go releases later.\r\n\r\n/cc @robpike, @griesemer, @ianlancetaylor, @aclements, @dr2chase",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		},
		{
			"name": "Proposal-Declined"
		}
	],
	"comments": 25,
	"closed_at": "2016-02-26T17:39:14Z",
	"created_at": "2016-01-08T19:31:52Z",
	"updated_at": "2016-02-26T17:39:14Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	}
}
