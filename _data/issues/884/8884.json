{
	"id": 51288826,
	"number": 8884,
	"state": "open",
	"title": "runtime: efficient access to thread-local data",
	"body": "\u003cpre\u003eCurrently we have 3 performance issues with accesses to thread-local data (g/m/p):\n1. Accesses require non-inlinable function calls.\n2. The only thread-local var is now g, while most frequently accesses data is in m. So\nmost of the accesses has an additional indirection.\n3. We do lots of duplicate loads of g/m.\n\nWe need to:\n1. Make the thread-local var m (instead of g).\n2. Move stack guard of the current g into m (that's the only hot data in g).\n3. Declare runtime.curm variable in runtime, teach the compiler to recognize it and turn\ninto tls access.\n4. Teach compiler to not do unnecessary duplicate loads of curm (like in\n\u003ca href=\"https://golang.org/issue/4946)\"\u003ehttps://golang.org/issue/4946)\u003c/a\u003e.\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"comments": 2,
	"created_at": "2014-10-07T10:38:35Z",
	"updated_at": "2015-04-14T19:45:25Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
