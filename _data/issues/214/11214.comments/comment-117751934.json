{
	"id": 117751934,
	"body": "Thanks for the report. The out of control memory use really smells like a bug in gdb, but I'll dig in to this a bit to see if I can figure out anything more concrete.\r\n\r\n\u003e After killing gdb, I get fatal error: runtime: split stack overflow\r\n\r\nThis part isn't surprising. \"goroutine 2 bt\" works by temporarily modifying the thread's PC and SP registers to trick gdb into generating the backtrace we want. It's supposed to set them back after the backtrace, but if gdb dies before that happens, the Go process will resume with one thread's PC and SP and all other state (including the expected stack bounds) from another thread. As soon as it reaches a stack growth check, it will detect an \"out of bounds\" SP. It could easily die in more spectacular ways, too.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-01T17:02:14Z",
	"updated_at": "2015-07-01T17:02:14Z"
}
