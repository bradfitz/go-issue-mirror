{
	"id": 251222250,
	"body": "Hmm, after studying the code again I think the comment above is wrong, my apologies. I'll see if I can put together a better bug report, but I think (I haven't fully verified this) the following is happening:\r\n\r\n1. The desired register information is being dropped when it is propagated backwards through phis [here](https://github.com/golang/go/blob/d0e92f61e5c5c59395d9b1a3b4f5c7b90dec5bc8/src/cmd/compile/internal/ssa/regalloc.go#L2322) and so it doesn't make it to the initial register allocation of the value.\r\n2. The desired register information at the start of the block with the `STMG` in it (B2) is being overridden by the dynamically calculated values present in the previous block (B1) [here](https://github.com/golang/go/blob/d0e92f61e5c5c59395d9b1a3b4f5c7b90dec5bc8/src/cmd/compile/internal/ssa/regalloc.go#L949).\r\n\r\n(2) is what I was trying to talk about in my comment above, although (1) is probably the more important bit. 'Fixing' (2) would probably result in code similar to that generated by https://golang.org/cl/29732, albeit with values moved into their desired registers at the start of the block rather than just before they are clobbered.",
	"user": {
		"login": "mundaym",
		"id": 15000766,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-03T20:48:14Z",
	"updated_at": "2016-10-03T20:48:14Z"
}
