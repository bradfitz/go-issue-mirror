{
	"id": 51288947,
	"number": 8983,
	"state": "open",
	"title": "cmd/compile: package type name collision with built-in types in compiler error messages",
	"body": "by **sedevelopers01**:\n\n\u003cpre\u003ev1.3.3\n\nThread on go-nuts:\n\n    \u003ca href=\"https://groups.google.com/forum/#\"\u003ehttps://groups.google.com/forum/#\u003c/a\u003e!topic/golang-nuts/Ed3gU3EjbaI\n\nProblem:\n\n    When you define a package level \u0026quot;error\u0026quot; type (lower-case) it shadows the built-in error type and causes error messages like:\n\n    \u0026gt; Cannot use errors.New(\u0026quot;something wrong\u0026quot;) (type error) as type error in return argument\n\nSolutions proposed:\n\n    Maybe the type name could be shown as \u0026quot;built in type error\u0026quot; in error messages, and the same for \u0026quot;built in type int\u0026quot;.\n\n    Or, on the other hand, maybe the locally defined type should be shown as \u0026quot;type foo.error\u0026quot; where foo is the package name in which it is defined.\n\n    And then, why not both? That would make all error messages redundantly unambiguous.\n\n    We've tried very hard to keep error messages concise. Perhaps we could just add the context where there is ambiguity.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2014-10-23T12:19:22Z",
	"updated_at": "2015-06-29T03:14:12Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
