{
	"id": 66081560,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3 by **fish@soundcloud.com**:\n\n\u003cpre\u003eHere (ubuntu 13.04) it reports 19.5 bits as well. But it seems like it's actually\nhitting the go implementation (not libc) since changing the code (adding some debug\nstatement) actually works - although 'go env' shows CGO_ENABLED=\"1\".\nAnyway, if this is an issue it should be fixed in the go implementation as well.\n\nNow regarding whether it's an issues in practice: It really depends on what you're\nimplementing. If an attacker can't predict when and what the victim is querying, it\nshouldn't be a problem. But if the attacker can guess or even control it, like in the\ncase someone builds an caching dns resolver, some kind of proxy or just something\nresolving the same name continuously, it becomes very feasible to exploit it.\n\nAnyway, I personally would expect that both source port and id are unpredictable for any\ndns (client) implementation. Ruby for example is using a secure random number for both\nport and id: \u003ca href=\"https://github.com/ruby/ruby/blob/trunk/lib/resolv.rb#L602\"\u003ehttps://github.com/ruby/ruby/blob/trunk/lib/resolv.rb#L602\u003c/a\u003e\nI would bet that's the same for almost all other dns client implementation.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-06-24T15:58:11Z",
	"updated_at": "2014-12-08T10:31:37Z"
}
