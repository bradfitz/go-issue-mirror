{
	"id": 51287038,
	"number": 7665,
	"state": "closed",
	"title": "cmd/cgo: pointer to exported function in package scope only works if cast to another type",
	"body": "\u003cpre\u003eWhat does 'go version' print?\ngo version devel +a70a32dc121a Thu Mar 27 20:23:16 2014 +0000 linux/amd64\ngo version devel +1afdecdd77c1 Sat Mar 29 17:10:25 2014 -0400 darwin/amd64 (testing both\ndarwin/amd64 and darwin/386)\n\nWhat steps reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n\npackage main\n\nimport \u0026quot;fmt\u0026quot;\nimport \u0026quot;unsafe\u0026quot;\n\n// extern void f(void);\nimport \u0026quot;C\u0026quot;\n\n//export f\nfunc f() {}\n\nvar bad unsafe.Pointer = C.f\nvar good uintptr = uintptr(C.f)\n\nfunc main() {\n\tfmt.Printf(\u0026quot;0x%X | 0x%X 0x%X | 0x%X\\n\u0026quot;, bad, good, unsafe.Pointer(good), C.f)\n}\n\n\nWhat happened?\n(this output from the linux/amd64 build running with go run)\n0x0 | 0x400F00 0x400F00 | 0x400F00\n\nWhat should have happened instead?\n0x400F00 | 0x400F00 0x400F00 | 0x400F00\n\nPlease provide any additional information below.\nIt does not matter how C.f is stored in bad (if it is stored directly as above, if it is\na member of a structure, a member of a slice of structures (my use case, for\ninitialization), etc.): if it's not cast to uintptr() or something else, I get nil. This\nonly affects package scope (as the last print shows).\u003c/pre\u003e",
	"user": {
		"login": "andlabs",
		"id": 718242,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 9,
	"closed_at": "2014-12-08T10:42:33Z",
	"created_at": "2014-03-30T21:42:46Z",
	"updated_at": "2016-06-25T01:31:04Z",
	"milestone": {
		"id": 1067211,
		"number": 17,
		"title": "Go1.3"
	}
}
