{
	"id": 51288838,
	"number": 8893,
	"state": "open",
	"title": "cmd/go: critical path scheduling",
	"body": "\u003cpre\u003eCurrently go tool schedules work in topological order, this leads to suboptimal\nparallelization. It's possible that towards end, very few work items are available\nleading to idle processors.\n\nCritical path scheduling gives much better results in this respect:\n\u003ca href=\"http://en.wikipedia.org/wiki/Critical_path_method\"\u003ehttp://en.wikipedia.org/wiki/Critical_path_method\u003c/a\u003e\n\nHere is a prototype CL:\n\u003ca href=\"https://golang.org/cl/13235046/diff/3001/src/cmd/go/build.go\"\u003ehttps://golang.org/cl/13235046/diff/3001/src/cmd/go/build.go\u003c/a\u003e\nI've observed up to 2x 'go test -a std' speedup on a 32-way machine.\n\nWe can also assign meaningful weights to work nodes: e.g. test \u0026gt; link \u0026gt; compile.\nIt would also be super useful to somehow assign weights to test nodes proportional to\ntest run time (e.g. runtime tests take significantly more than than most packages). This\nwill have significant effect even on low-core machines (as runtime tests will start\nfirst).\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "ToolSpeed"
		}
	],
	"assignee": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"comments": 30,
	"created_at": "2014-10-07T12:39:45Z",
	"updated_at": "2016-05-14T23:17:27Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
