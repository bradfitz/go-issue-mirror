{
	"id": 51601084,
	"number": 9245,
	"state": "open",
	"title": "math/big: better multiply primitives",
	"body": "Suggestions from Torbj√∂rn Granlund (personal e-mail):\r\n\r\n\"\r\nThe multiply primitives, in particular addMulVVW surely deserves more\r\nattention:\r\n\r\n  Offset the pointers so that you can index with a counter register\r\n  which goes from -n to 0, saving the CMPQ.\r\n\r\n  Unroll.  You can save most of the ADCQ $0, R that way.  Basically,\r\n  do one run with just MULQ where you sum the old highpart (DX) with\r\n  the new lowpart (AX).  You will need some MOVQ to move DX\r\n  out-of-the-way too.  Then do a new run over these sums where you\r\n  bring in the memory addend.  This should double the speed on some\r\n  newer CPUs.\r\n\r\n  A good addMulVVW is probably really the first thing to write in\r\n  assembly; addition and subtraction is much less important, usually.\r\n\"",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 0,
	"created_at": "2014-12-10T19:36:48Z",
	"updated_at": "2015-10-26T16:42:47Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
