{
	"id": 215384801,
	"body": "I'm having the same result with `go build`, but I'll check the layout extensively. I followed the recommended layout from [glide](https://github.com/Masterminds/glide) - in the main README, which should be this:\r\n\r\n~~~\r\n$GOPATH(/go)/src/your-project\r\n  |__ main.go (Where your main code lives)\r\n  |__ subpackage/\r\n  |     |__ subpackage.go (You can create subpackages)\r\n  |     \\__ ...\r\n  |__ ... (Other files or subpackages)\r\n  \\__ vendor/\r\n        |__ github.com/namsral/flag\r\n        |__ github.com/gorilla/mux\r\n        \\__ ...\r\n~~~\r\n\r\nSo if I understand you, instead of using \"subpackage\" I should create `src/subpackage` and use import \"subpackage\" as a replacement? I'm just about to go AFK into a meeting, and I'll try this asap. But it really seems that I shouldn't. Importing subpackages which reside in the same level is done with \"./package\", which is a documented thing somewhere. It actually *works*... at least some packages use a slightly different approach to structure the sources in the same way, with the double-slash import option:\r\n\r\n~~~\r\npackage main // import \"github.com/janeczku/go-dnsmasq\"\r\nimport \"github.com/janeczku/go-dnsmasq/hostsfile\"\r\n~~~\r\n\r\nIs there a way to achieve something similar for local development without a recognized VCS location? I believed until now that: import \"./package\" was it.",
	"user": {
		"login": "titpetric",
		"id": 233360,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-28T10:45:22Z",
	"updated_at": "2016-04-28T10:45:22Z"
}
