{
	"id": 120351954,
	"number": 13478,
	"state": "closed",
	"title": "fmt: fmt.Printf(\"%b\", []byte{...}) fails unnecessarily",
	"body": "Formatting any slice (or array) but []byte in binary using the %b format code works. For example:\r\n\r\n  fmt.Printf(\"%d\", []int{1,2,3})         -\u003e       [ 1 10 11 ]\r\n\r\nbut if the members of the array or slice are byte then the special case fmtBytes() is invoked, and it lacks a %b case. So instead the formatting fails:\r\n\r\n  fmt.Printf(\"%b\", []byte{1,2,3})       -\u003e     %!b([]uint8=[1 2 3])\r\n\r\nLooking at the code in src/fmt/ I don't think it would be hard to not only make %b work on []byte, but to also make it work nicely, like %x and % x do, giving something like:\r\n\r\n  fmt.Printf(\"% b\", []byte{1,2,3})       -\u003e     00000001 00000010 00000011\r\n\r\nwhich is the binary equivalent of the special case % x operation on a []byte, which, for reference, produces:\r\n\r\n  fmt.Printf(\"% x\", []byte{1,2,3})       -\u003e     01 02 03\r\n\r\nI see this behavior in go 1.5.1 on linux/amd64 and linux/arm, but the behavior isn't new, nor is it specific to those OS/ARCH combinations.",
	"user": {
		"login": "nsd20463",
		"id": 6062588,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-03-27T21:34:55Z",
	"created_at": "2015-12-04T07:56:01Z",
	"updated_at": "2016-03-27T21:34:55Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
