{
	"id": 137531015,
	"body": "Can you run it with\nGODEBUG=gctrace=1 turned on and capture the output? This will let us know\nif the GC is the culprit.\nAlso what is the machine/OS and is anything else going on on the machine.\nThe only other time I've\nseen a situation like this is when the app is inactive and the OS decides\nto take all of the apps resources\naway leaving the app with very some small part of a single CPU.\n\n\n\nOn Thu, Sep 3, 2015 at 1:15 PM, Evgeny \u003cnotifications@github.com\u003e wrote:\n\n\u003e @hallas \u003chttps://github.com/hallas\u003e My app is simple web server that gets\n\u003e tasks and process them in external goroutine, i developed it on 1.4 and i\n\u003e did not get so big pauses, but when i just rebuild it with 1.5 i get\n\u003e 10,20-50 sec pauses.\n\u003e Also at the screenshots application is in \"sleep\" mode - not process any\n\u003e tasks, and as you can see at moment when GC caused spike application do not\n\u003e allocate new memory, than is why i think may be new GC algoritm has some\n\u003e new rules that i should follow.\n\u003e Most part data in my app is stored in [][10]int64, most big slice hash 120\n\u003e 000 elements.\n\u003e\n\u003e (and sorry for my English)\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/12478#issuecomment-137516696\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-03T18:08:35Z",
	"updated_at": "2015-09-03T18:08:35Z"
}
