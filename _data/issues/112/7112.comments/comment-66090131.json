{
	"id": 66090131,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4 by **rasmus@mindplay.dk**:\n\n\u003cpre\u003e\u003e We are not going to introduce a new language feature and say \"but you can only use it\nfor structs and struct fields.\"\n\nI guess I don't understand how else this feature would be useful or applicable to\nanything else - you can already reflect on structs (and other types) with compile-time\nchecking, using e.g. reflect.TypeOf(MyType{}) ... so you don't need another way to solve\nthat problem.\n\nTo turn your argument around, why isn't that language feature already available for\nfields the same as it is for structs? Or what's missing, or what went wrong, that the\nexisting feature don't \"work\" for fields?\n\nIn one sense, if MyType is a type of the kind struct, then MyType.MyField is a type of\nthe kind field; a field is a member of a set of fields in a type of kind struct, but it\nis also it's own thing. Field values attach and separate from their parent structs\nnaturally and easily - but field \"types\" do not willing separate from their parent\nstruct and are unreachable without them.\n\nI'm trying to view this from a conceptual point of view rather than from a technical\npoint of view - I realize the technical side of it is more complicated than that, but\nconceptually, it seems somewhat incomplete when viewed that way... where by \"complete\",\nI mean fields, not just their values, are a tangible thing that you can refer to, the\nsame way you refer to a type.\n\nI guess, where else, or how, or in what way do you picture this feature would be\napplicable? Or are you saying it's not, and therefore is not useful or general enough to\nbe justified? (if so, I guess I would argue it's not so much a new feature, and perhaps\nin a sense more the completion of another existing feature...)\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-01-14T01:07:29Z",
	"updated_at": "2014-12-08T10:39:34Z"
}
