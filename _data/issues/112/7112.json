{
	"id": 51286206,
	"number": 7112,
	"state": "open",
	"title": "language: static field (and type) references",
	"body": "by **rasmus@mindplay.dk**:\n\n\u003cpre\u003eFor the purposes of (primarily) reflective meta-programming, Go needs a syntax for\nstatic/lexical field (and possibly type) references - that is, some sort of value\nrepresentation of \u0026quot;struct.field\u0026quot;, such as is required and implemented by\nunsafe.ArbitraryType, as used by the Alignof() and Offsetof() functions:\n\n\u003ca href=\"http://godoc.org/unsafe\"\u003ehttp://godoc.org/unsafe\u003c/a\u003e\n\nIt is currently only possible to reference a type indirectly, by creating an empty\ninstance of a value and using reflection, e.g.:\n\n    t := reflect.TypeOf(MyType{})\n\nThis is probably acceptable in most cases, as you can typically do this once, in a\npackage, and have your reflect.Type value initialized and available without repeatedly\ncreating and throwing away garbage values.\n\nAs for fields, the problem is worse - the only means of obtaining a value representing a\nfield are awkward, complicated, and unreliable.\n\nThe simplest and most obvious approach, is to reference the field by name, using a\nstring:\n\n\ttype Foo struct {\n\t\tBar string\n\t}\n\n\tt := reflect.TypeOf(Foo{})\n\t\n\tf, _ := t.FieldByName(\u0026quot;Bar\u0026quot;)\n\nThe name \u0026quot;Bar\u0026quot; can't be checked at compile-time, but has to be checked at\nrun-time - since it is actually referencing a source-code element, it should be\ncheckable at compile-time, but there is no syntax to do so.\n\nOne of the more complicated solutions I came up with, involves reflection, measuring the\ndistance between the start of a parent struct and it's field, and searching for the\nstruct.field with the determined offset:\n\n\u003ca href=\"http://play.golang.org/p/-geaQaj7Ee\"\u003ehttp://play.golang.org/p/-geaQaj7Ee\u003c/a\u003e\n\nThis is \u0026quot;type safe\u0026quot; at compile-time, to the extent that this is currently\npossible, and with some limitations; for one, establishing a direct connection between\nthe parent struct and the field, is not possible - which means you could pass a struct\nof a different type (or a different instance of the right type) and a field that doesn't\nmatch, and you would get a run-time panic.\n\nFor the purposes of reflective meta-programming, being able to statically reference\ntypes and fields would be invaluable to me. Go provides annotations (\u0026quot;tags\u0026quot;)\nfor fields, but does not provide any way to directly select one of these fields, in a\nstatically safe type-checked manner; which means that tags are only useful for tasks\nwhere iterating over the entire structure and inspecting all the fields is necessary\nand/or possible - pin pointing an exact field, e.g. for the purposes of extracting it's\ntag, is not currently possible; or at least not in a simple, reliable, type-safe way.\n\nMy first impulse when attempting to reference a type or field as a value, was something\nlike this:\n\n\ttype Foo struct {\n\t\tBar string\n\t}\n\n\tt := Foo\n\tf := Foo.Bar\n\nOf course, that doesn't mean anything at all, and doesn't work.\n\nI'm proposing one of three solutions to this shortcoming. I'm not a language architect,\nso I have no real bias towards one or the other - these are just the three ways I could\nthink of.\n\nOne would be to actually make the above examples mean something - so that, when Foo is\nassigned to variable, there is a resulting implicit type representing that specific type\n(call it 'Foo for the sake of argument), e.g. for a defined type:\n\n    type struct Foo {\n        Bar string\n        Baz int\n    }\n\nThere is an implied type: (psuedo code)\n\n    type struct 'Foo {\n        'Name string\n        'Pkg string\n        Bar Field\n        Baz Field\n    }\n\nWhich would enable you to refer to types directly:\n\n    f := Foo.Bar // Field\n\nThe Field type in this example is some lightweight, built-in type containing a reference\nto the parent 'Foo type - the 'Foo type itself contains the package and type-name as\nstrings, so we can use reflection to obtain information about the type.\n\nThe second approach would be an actual operator used to reference types or fields, e.g.:\n\n    t := 'Foo // 'Foo\n    f := 'Foo.Bar // Field\n\nThis approach is similar to the first, but more explicit - types and members do not have\na direct, literal value; you have to \u0026quot;ask\u0026quot; for it.\n\nThis could also (optionally) work for locally typed variables, e.g.:\n\n    v := Foo{}\n    t := 'v // 'Foo\n    f := 'v.Bar // Field\n\nThe last approach I could think of is very different from the two first, and involves\nintroducing some kind of indirection operator - for the sake of argument, I'm using the\napostrophe as the operator in this example:\n\n    v := Foo{Bar: \u0026quot;Hello\u0026quot;}\n    f := 'v.Bar // FieldRef\n    \n    // indirectly reading the value:\n    fmt.Sprintf(\u0026quot;%v\u0026quot;, f.Get() === v.Bar) // \u0026quot;true\u0026quot;\n    \n    // indirectly writing the value:\n    f.Set(\u0026quot;World\u0026quot;)\n    fmt.Sprintf(\u0026quot;%v\u0026quot;, v.Bar === \u0026quot;World\u0026quot;) // \u0026quot;true\u0026quot;\n\nIn this case, a new type FieldRef is introduced - it contains information like the\npackage and type-name of the struct, a pointer to the actual struct, and the name (or\nindex) of the referenced field within that struct. It provides methods to read/write\n(without type-safety, as per reflection) the value of the referenced member.\n\nIn other words, the big difference from the first two examples, is that this approach\nlets you statically reference a struct.field with compile-time type-safety, while also\nreferencing an actual value - in the two first examples, the reference to a type/field\nis explicit, while in the last case, the type/field is picked up from a (locally typed)\nvariable.\n\nAs pointed out by others (on the forums) this approach may have less general use, and\ncould \u0026quot;grow out of control\u0026quot;, since it is applies to a very specific use-case.\n\nAs stated, I am not a language architect, and several people did point out various\ndrawbacks to all of these approaches. Refer to the discussion here for more details:\n\n\u003ca href=\"https://groups.google.com/forum/#\"\u003ehttps://groups.google.com/forum/#\u003c/a\u003e!topic/golang-nuts/69B5ZUUNHbM\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "LanguageChange"
		}
	],
	"comments": 5,
	"created_at": "2014-01-13T15:10:55Z",
	"updated_at": "2015-04-14T19:45:22Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
