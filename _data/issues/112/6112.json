{
	"id": 51284694,
	"number": 6112,
	"state": "closed",
	"title": "flag: ability to ignore unknown flags",
	"body": "by **mitchell.hashimoto**:\n\n\u003cpre\u003eThe \u0026quot;flag\u0026quot; package currently has three error handling techniques: panic, exit,\nand continue. In the face of an unknown flag, the most lenient error handling mechanism\n\u0026quot;continue\u0026quot; still returns an error. This is correct behavior. I propose adding\nanother error handling mechanism or SOME flag to allow unknown flags to be okay (but\nreport other errors).\n\nThe use case I have is that I develop a binary that has many subcommands, like git. E.g.\n\u0026quot;git status\u0026quot; \u0026quot;git commit\u0026quot; etc. I have a handful of globally\navailable flags such as \u0026quot;--debug\u0026quot; \u0026quot;--machine-readable\u0026quot; and others\nthat I'd love to parse early. Unfortunately, I can't easily with the flag package. By\nthe time the command is known and further command line flags are setup, it is too late\nto parse these.\n\nIt would be nice for flag to be able to ignore unknown keys and just do a best-effort\nparse. Other types of errors (returned from flag.Value and such) should still be errors.\n\nI imagine this would work best as a new `SetX` method, maybe `SetAllowUnknown` or\nsomething. I defer that to more experienced Gophers.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2014-12-08T10:33:35Z",
	"created_at": "2013-08-12T02:16:25Z",
	"updated_at": "2016-06-24T22:54:50Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
