{
	"id": 51284266,
	"number": 5836,
	"state": "closed",
	"title": "encoding/json: U+2028 and U+2029 generate invalid JavaScript",
	"body": "\u003cpre\u003eThe basic problem is that U+2028 and U+2029 are invalid in a JavaScript string literal,\nwhich means you must encode them as the six-character literals like \u0026quot;\\u2028\u0026quot;\nwhen generating JSON.  This post discusses further how JSON is not a subset of\nJavaScript:\n\u003ca href=\"https://medium.com/joys-of-javascript/42a28471221d\"\u003ehttps://medium.com/joys-of-javascript/42a28471221d\u003c/a\u003e\n\nThis code snippet demonstrates the problem.  When I paste the printed snippet into\nChrome's JavaScript console I get an invalid token error.\n\u003ca href=\"http://play.golang.org/p/cs_I0Az8cI\"\u003ehttp://play.golang.org/p/cs_I0Az8cI\u003c/a\u003e\n\nPS: it's not really's Go's problem that the (valid) JSON it generates is not parseable\nas JavaScript.  But encoding/json already does some not-required-by-JSON encoding (the\nway it HTML-escaping angle brackets), so it seems silly to not encode these rare\ncharacters as well; might as well do them as part of HTML-escaping.\n\n\n$ go version\ngo version devel +7e6f9b9091c4 Wed Jun 19 09:44:40 2013 -0700 linux/amd64\u003c/pre\u003e",
	"user": {
		"login": "evmar",
		"id": 3847,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Security"
		}
	],
	"assignee": {
		"login": "dsymonds",
		"id": 31506,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2014-12-08T10:32:04Z",
	"created_at": "2013-07-04T02:09:16Z",
	"updated_at": "2016-06-24T22:51:23Z"
}
