{
	"id": 66086246,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eIn particular, I used this in my jsonpointer implementation as it allowed me to get the\ninformation out *significantly* faster and with less memory overhead (i.e. didn't have\nto construct a big map[string]interface{} of all the parts and walk it).\n\nThis is what I get out of it, in practice:\n\nUsing only what's in encoding/json (blob of JSON to map):\n\nBenchmarkLargeMap\t      20\t 103041502 ns/op\t  18.83 MB/s\t 8139008 B/op\t  220394 allocs/op\n\nUsing the scanner approach so I can throw away all the parts that aren't interesting and\nstop when I get to the part I'm seeking.\n\nBenchmarkLarge3Key\t  100000\t     24502 ns/op\t79194.52 MB/s\t    7258 B/op\t      89\nallocs/op\nBenchmarkLargeShallow\t    2000\t    876675 ns/op\t2213.44 MB/s\t   33155 B/op\t    2718\nallocs/op\nBenchmarkLargeMissing\t      50\t  35058577 ns/op\t  55.35 MB/s\t  922645 B/op\t  101772\nallocs/op\nBenchmarkLargeIdentity\t 5000000\t       711 ns/op\t2726464.30 MB/s\t     566 B/op\t       5\nallocs/op\nBenchmarkLargeBest\t  500000\t      3893 ns/op\t498379.24 MB/s\t    1445 B/op\t      24\nallocs/op\n\n\nI've got another project that is needing the incremental scan right now which is why\nthis just came up.\n\nIn the meantime, I'm occasionally pulling in go's json improvements and exposing the\nscanner.\u003c/pre\u003e",
	"user": {
		"login": "dustin",
		"id": 1779,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-27T18:44:21Z",
	"updated_at": "2014-12-08T10:35:54Z"
}
