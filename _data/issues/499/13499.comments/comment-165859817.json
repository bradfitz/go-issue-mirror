{
	"id": 165859817,
	"body": "I do not plan to fix this. Not exactly working as intended, but not worth fixing.\r\n\r\nThe design of the assembler, using the go/scanner package as the low-level lexer, makes this annoying to fix. The assembler doesn't see spaces, it sees a stream of tokens (and a comment is seen as a token). I suppose it might be possible to observe that a comment fills the precise gap between the token before and the token after, and that within a macro definition, that implies token pasting, but that is a very fiddly and particular detail I'd prefer not to inject (assuming it's even possible).\r\n\r\nThis is a narrow, rare, and peculiar compatibility detail that, in the example here at least, is easy to work around using numbered offset labels (3(PC) etc.). I do not think it's worth fixing.\r\n\r\nThe existence of a C preprocessor in the assembler is mostly a historical artifact that is occasionally useful but can encourage trickery. For the long-term simplicity of the assembler and its input, I'd rather discourage trickery.\r\n\r\nI also observe that the preprocessor used here, even in the old assembler, is pre-ANSI C in design. If you want a modern preprocessor of any form, I suggest using one and coupling it with go generate.",
	"user": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-18T18:10:58Z",
	"updated_at": "2015-12-18T18:10:58Z"
}
