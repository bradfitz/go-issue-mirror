{
	"id": 139367762,
	"number": 14718,
	"state": "closed",
	"title": "runtime: append to nil slice slower than make and copy",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n- What version of Go are you using (`go version`)?\r\n`go version go1.6 darwin/amd64`\r\n\r\n- What operating system and processor architecture are you using (`go env`)?\r\n`\r\nGOARCH=\"amd64\"\r\nGOOS=\"darwin\"\r\n`\r\n\r\n- What did you do?\r\n(Use play.golang.org to provide a runnable example, if possible.)\r\n```\r\npackage main\r\n\r\nimport (\r\n        \"testing\"\r\n)\r\n\r\nvar c =  []byte(\"1789678900001234567890\")\r\n\r\nfunc BenchmarkBBytes(b *testing.B) {\r\n        for i := 0; i \u003c b.N; i++ {\r\n                d := make([]byte, len(c))\r\n                copy(d, c)\r\n        }\r\n}\r\n\r\nfunc BenchmarkBString(b *testing.B) {\r\n        for i := 0; i \u003c b.N; i++ {\r\n                _ = append([]byte(nil), c...)\r\n        }\r\n}\r\n```\r\n\r\n- What did you expect to see?\r\n\r\nThe two patterns would produce the same code and have the same performance. \r\n\r\n- What did you see instead?\r\n\r\nInstead, the make and copy pattern (`BenchmarkBBytes`) seems to be faster by about **12 ns**, or **16%**. See https://github.com/cockroachdb/cockroach/pull/4963.\r\n\r\n```\r\nBenchmarkBBytes-4   20000000            59.6 ns/op        32 B/op          1 allocs/op\r\nBenchmarkBString-4  20000000            71.0 ns/op        32 B/op          1 allocs/op\r\n```\r\n\r\n",
	"user": {
		"login": "nvanbenschoten",
		"id": 5438456,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"comments": 4,
	"closed_at": "2016-03-08T23:13:34Z",
	"created_at": "2016-03-08T19:17:10Z",
	"updated_at": "2016-03-08T23:13:34Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
