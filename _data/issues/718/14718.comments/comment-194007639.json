{
	"id": 194007639,
	"body": "The major reason is that when you do make([]byte, n), you get an allocation with len==cap==n.  The runtime doesn't have to do much work to decide what to allocate and what to zero.\r\n\r\nWhen you do append(nil, ..slice of n bytes..), you actually get more capacity.  In this case, you get a slice with a length of 22 and a capacity of 32.  The increased capacity is there to anticipate future appends.  The runtime spends some additional time computing what the right capacity should be and initializing those extra bytes.\r\n\r\nAlso, the append path generally has more overhead, see #11419 for an example.\r\n\r\nWe should be able to fix some of this, but probably not all.  For instance, there is a divide to compute how many extra elements we can fit when we round the allocation up to a size class (runtime/slice.go:92).  That divide would be hard to get rid of, and probably accounts for a good chunk of the difference you're seeing.",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-08T23:00:09Z",
	"updated_at": "2016-03-08T23:00:09Z"
}
