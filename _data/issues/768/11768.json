{
	"id": 95767060,
	"number": 11768,
	"state": "open",
	"title": "runtime: make it possible to know the go initialization in shared libraries is finished without calling a go function",
	"body": "Please see [golang-nuts â€º How to export C variables from Go shared libraries?](https://groups.google.com/d/msg/golang-nuts/IAw-d5mXzk8/7QpXyPAa930J) for discussion.\r\n\r\nI tried to write a Go shared library to make Apache or nginx modules.\r\nWhat I would like to do is exporting a C struct variable, not a C function, from a Go shared library.\r\n\r\n# 1. What version of Go are you using (go version)?\r\n\r\n1.5beta2\r\n\r\n```\r\n$ go version\r\ngo version go1.5beta2 linux/amd64\r\n```\r\n\r\n# 2. What operating system and processor architecture are you using?\r\n\r\nUbuntu Linux trusty amd64\r\n\r\n```\r\n$ uname -a\r\nLinux vagrant-ubuntu-trusty-64 3.13.0-55-generic #92-Ubuntu SMP Sun Jun 14 18:32:20 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\n# 3. What did you do?\r\n\r\nOpen a Go shared library written from a C main program. Please refer to the commit https://github.com/hnakamur/export_c_variable_from_go_dll_experiment/tree/0972d57461b091aed35c9ed083af0edae0c885cc for source codes.\r\n\r\n[runtime_load.c](https://github.com/hnakamur/export_c_variable_from_go_dll_experiment/blob/1951dfb411dcff8986687ca98f801505397fc6cf/Makefile)\r\n\r\n```\r\n#include \u003cstdio.h\u003e\r\n#include \u003cdlfcn.h\u003e\r\n\r\nint main(int argc, char **argv) {\r\n\tprintf(\"runtime_load started\\n\");\r\n\tvoid *handle = dlopen(\"libgodll.so\", RTLD_LAZY);\r\n\tif (!handle) {\r\n\t\tprintf(\"dlopen failed\\n\");\r\n\t\treturn 1;\r\n\t}\r\n\tprintf(\"after dlopen. handle=%llx\\n\", (long long unsigned)handle);\r\n\tint *i_ptr = dlsym(handle, \"i\");\r\n\tprintf(\"i=%d\\n\", *i_ptr);\r\n#ifndef NO_DLCLOSE\r\n\tprintf(\"calling dlclose\\n\");\r\n\tdlclose(handle);\r\n\tprintf(\"after dlclose\\n\");\r\n#endif\r\n\treturn 0;\r\n}\r\n```\r\n\r\n[libgodll.go](https://github.com/hnakamur/export_c_variable_from_go_dll_experiment/blob/1951dfb411dcff8986687ca98f801505397fc6cf/libgodll.go)\r\n\r\n```\r\npackage main\r\n\r\n// int i;\r\nimport \"C\"\r\n\r\nfunc init() {\r\n\tC.i = 1\r\n}\r\n\r\n//export libInit\r\nfunc libInit() {}\r\n\r\nfunc main() {}\r\n```\r\n\r\n[Makefile](https://github.com/hnakamur/export_c_variable_from_go_dll_experiment/blob/1951dfb411dcff8986687ca98f801505397fc6cf/Makefile)\r\n\r\n```\r\ntest_runtime: runtime_load libgodll.so\r\n\tLD_LIBRARY_PATH=. ./runtime_load\r\n\techo status=$$?\r\n\r\ntest_compiletime: compiletime_load libgodll.so\r\n\tLD_LIBRARY_PATH=. ./compiletime_load\r\n\techo status=$$?\r\n\r\nruntime_load: runtime_load.c\r\n\t$(CC) -o runtime_load runtime_load.c $(CFLAGS) -ldl\r\n\r\ncompiletime_load: libgodll.so compiletime_load.c\r\n\t$(CC) -o compiletime_load compiletime_load.c -L. -lgodll\r\n\r\nlibgodll.so: libgodll.go\r\n\tgo build -buildmode=c-shared -o libgodll.so libgodll.go\r\n\r\nclean:\r\n\t-rm runtime_load compileitme_load core libgodll.h libgodll.so\r\n```\r\n\r\nWith these source codes above, I ran `make test_runtime`\r\n\r\n# 4. What did you expect to see?\r\n\r\nI expect to see `i=1` is printed at https://github.com/hnakamur/export_c_variable_from_go_dll_experiment/blob/0972d57461b091aed35c9ed083af0edae0c885cc/runtime_load.c#L13\r\n\r\n# 5. What did you see instead?\r\n\r\nActually `i=0` is printed at https://github.com/hnakamur/export_c_variable_from_go_dll_experiment/blob/0972d57461b091aed35c9ed083af0edae0c885cc/runtime_load.c#L13\r\nPlease see https://github.com/hnakamur/export_c_variable_from_go_dll_experiment/tree/0972d57461b091aed35c9ed083af0edae0c885cc#load-a-shared-library-at-runtime-using-dlopen for the whole output.\r\n\r\nWhen I added `usleep(1000 * 1000)` between `dlopen` and referencing `i`, `i=1` is printed at https://github.com/hnakamur/export_c_variable_from_go_dll_experiment/blob/1951dfb411dcff8986687ca98f801505397fc6cf/runtime_load.c#L14\r\nPlease see https://github.com/hnakamur/export_c_variable_from_go_dll_experiment/tree/1951dfb411dcff8986687ca98f801505397fc6cf#load-a-shared-library-at-runtime-using-dlopen for the whole output.\r\n\r\nPlease refer to the commit https://github.com/hnakamur/export_c_variable_from_go_dll_experiment/tree/1951dfb411dcff8986687ca98f801505397fc6cf for source codes.\r\n\r\n[runtime_load.c](https://github.com/hnakamur/export_c_variable_from_go_dll_experiment/blob/1951dfb411dcff8986687ca98f801505397fc6cf/runtime_load.c)\r\n\r\n```\r\n#include \u003cstdio.h\u003e\r\n#include \u003cdlfcn.h\u003e\r\n\r\nint main(int argc, char **argv) {\r\n\tprintf(\"runtime_load started\\n\");\r\n\tvoid *handle = dlopen(\"libgodll.so\", RTLD_LAZY);\r\n\tif (!handle) {\r\n\t\tprintf(\"dlopen failed\\n\");\r\n\t\treturn 1;\r\n\t}\r\n\tprintf(\"after dlopen. handle=%llx\\n\", (long long unsigned)handle);\r\n\tusleep(1000 * 1000);\r\n\tint *i_ptr = dlsym(handle, \"i\");\r\n\tprintf(\"i=%d\\n\", *i_ptr);\r\n#ifndef NO_DLCLOSE\r\n\tprintf(\"calling dlclose\\n\");\r\n\tdlclose(handle);\r\n\tprintf(\"after dlclose\\n\");\r\n#endif\r\n\treturn 0;\r\n}\r\n```\r\n\r\nI would like to know when the Go initialization of shared libraries is finished without calling a Go function.\r\n\r\nIdeally, I would like to set values of C variables at Go shared library compile time, instead of updating values of C variables with `init()` in a Go shared library.",
	"user": {
		"login": "hnakamur",
		"id": 19299,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2015-07-17T23:52:46Z",
	"updated_at": "2015-12-05T04:28:44Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
