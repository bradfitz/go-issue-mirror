{
	"id": 66095664,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3 by **MihaiBorobocea**:\n\n\u003cpre\u003eWhat is the intended behavior when using precision and %q with strings?\nIn the example above:\nfmt.Printf(\"%.1q\\n\", \"hello\") // -\u003e \"h\"\nThe string is truncated to length 1 *before* the quoting.\n\nThe logic is straightforward in src/pkg/fmt/format.go::fmt_q():\n\ttruncate()\n\tquote()\n\tpad_to_width()\ncurrently at line number:\n\u003ca href=\"https://code.google.com/p/go/source/browse/src/pkg/fmt/format.go#325\"\u003ehttps://code.google.com/p/go/source/browse/src/pkg/fmt/format.go#325\u003c/a\u003e\n\nIf the goal here is a strictly quoted string, since quoting can introduce escape\nsequences «A\\nB» → «A\\\\\\nB» the library can't blindly trim the result and surround\nit with quotes: \"A\\\\\\\" is invalid, and likely dangerous.\n\nIf the current behavior (or compromise) is the intended one, maybe mention it in the\ndocs (an exception applicable only to these “quoting” verbs)? It took me some time\nto reason about this and figure out why the printed string is longer than the precision\nI'm giving.\n\nI'm leaning towards calling it a bug because, as a user of the fmt package, I expect\n.precision to always work the same, without me reasoning about the package's internals.\nAt least that's what I expected in the absence of disclaimers.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-06-24T00:52:55Z",
	"updated_at": "2014-12-08T10:45:13Z"
}
