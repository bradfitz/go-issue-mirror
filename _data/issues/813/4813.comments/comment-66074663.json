{
	"id": 66074663,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eIn this program:\n\npackage main\n\nfunc main() {\n\tconst d = 1.0\n\tconst e = 1e0\n\tslice := make([]byte, 10)\n\t_ = slice[d]\n\t_ = slice[e]\n\t_ = slice[d:e]\n}\n\nThe question is whether the context of being an index expression is sufficient to\nconvert the constant to int. The spec says:\n\n\"A constant may be given a type explicitly by a constant declaration or conversion, or\nimplicitly when used in a variable declaration or an assignment or as an operand in an\nexpression.\"\n\nThe constants d and e here are being used as operands in an expression, but the\nexpression does not demand a specific type. Whereas x+d demands that d have the type of\nx, slice[d] does not require a specific type: it accepts any integer type. In the\nabsence of an explicit type suggestion, the constant takes its default type, float64.\nAnd float64 is not an integer type.\n\nCC'ing r, gri, ken, iant in case they disagree.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-02-15T16:28:22Z",
	"updated_at": "2014-12-08T10:25:34Z"
}
