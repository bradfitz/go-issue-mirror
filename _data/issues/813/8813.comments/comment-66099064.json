{
	"id": 66099064,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eThe link error is easy: the mingw being used is too old, and a newer one must be used if\nyou want to run the tests. Updating would probably bring fewer gcc bugs too.\n\nBut the builders have the new enough mingw and are still seeing failures when the test\nexecutes. I am co-opting this issue for that problem, which I do not understand.\n\nHere is an execution failure.\n\u003ca href=\"http://build.golang.org/log/9668ce8fb8053933ba0782562a271078b9205811\"\u003ehttp://build.golang.org/log/9668ce8fb8053933ba0782562a271078b9205811\u003c/a\u003e\n\nThe runtime frames are missing.\nThe runtime frames are controlled by setting the GOTRACEBACK environment variable to 2.\nThe run.bat script does this when running misc/cgo/test.\nThe test itself checks os.Getenv(\"GOTRACEBACK\") == \"2\" before starting the test.\n\nSo %GOTRACEBACK% *is* 2, but the runtime is still not printing frames.\nIt looks to me like on Windows the runtime uses env_posix.go but should\nreally be using a Windows-specific implementation of getenv.\nLike on Plan 9, I don't believe the environment is just handed to the process on startup.\nInstead the getenv implementation should do what syscall.Getenv does.\n(Perhaps there are ASCII versions that can be used to avoid the UTF-16 decoding.)\n\nGreat story, except that somehow this test is passing at tip.\n\nWhy does runtime.getenv work on Windows at tip but apparently not work on the 1.3\nrelease branch?\u003c/pre\u003e\n\n_Labels changed: added **release-go1.3.3**._\n\n\n_Status changed to **Accepted**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-30T01:34:06Z",
	"updated_at": "2014-12-08T10:48:44Z"
}
