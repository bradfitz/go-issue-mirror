{
	"id": 113456516,
	"number": 13056,
	"state": "open",
	"title": "runtime: lock_sema.go uses LIFO ordering for waking blocked Ms",
	"body": "In the lock_sema.go implementation of mutexes, lock handles contention by adding the current M to the front of the linked list of waiting Ms, and then unlock wakes up the M at the front of the list.  I.e., waiting Ms are awoken in LIFO order.\r\n\r\nIs it worth changing unlock to awake the M at the *end* of the list to effect a FIFO order?\r\n\r\nFor comparison, lock_futex.go leaves resolving contention to the OS.  On Linux, futex wakeup ordering doesn't seem to be guaranteed, but they do at least currently appear to use FIFO ordering (for threads with the same priority/nice level): http://lists.openwall.net/linux-kernel/2015/01/24/106",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2015-10-26T21:36:54Z",
	"updated_at": "2015-11-05T01:53:18Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
