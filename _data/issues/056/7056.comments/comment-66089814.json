{
	"id": 66089814,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003eSomething rather bizarre seems to be happening here... the sys_freebsd_amd64.s file has\nno INT $0x80 instructions - they are all SYSCALL (as they should be for native AMD64).\n\nOn a FreeBSD amd64 9.2-RELEASE host, a basic hello.go compiled with the Go 1.1.1 FreeBSD\nbinary distribution results in the following for runtime.settls (note the 0x0f 0x05\nsyscall instruction):\n\n$ objdump -d hello\n\n000000000041e2f0 \u0026lt;runtime.settls\u0026gt;:\n  41e2f0:       48 83 ec 08             sub    $0x8,%rsp\n  41e2f4:       48 83 c7 10             add    $0x10,%rdi\n  41e2f8:       48 89 3c 24             mov    %rdi,(%rsp)\n  41e2fc:       48 89 e6                mov    %rsp,%rsi\n  41e2ff:       48 c7 c7 81 00 00 00    mov    $0x81,%rdi\n  41e306:       48 c7 c0 a5 00 00 00    mov    $0xa5,%rax\n  41e30d:       0f 05                   syscall\n  ...\n\nThe exact same code compiled with Go tip (or with the Go 1.2 binary distribution)\nproduces the following (note the 0xcd 0x80 or int $0x80 instruction, along with the\nadditional mov instruction):\n\n$ objdump -d hello\n\n0000000000422120 \u0026lt;runtime.settls\u0026gt;:\n  422120:       48 83 ec 08             sub    $0x8,%rsp\n  422124:       48 83 c7 10             add    $0x10,%rdi\n  422128:       48 89 3c 24             mov    %rdi,(%rsp)\n  42212c:       48 89 e6                mov    %rsp,%rsi\n  42212f:       48 c7 c7 81 00 00 00    mov    $0x81,%rdi\n  422136:       48 c7 c0 a5 00 00 00    mov    $0xa5,%rax\n  42213d:       4c 89 d1                mov    %r10,%rcx\n  422140:       cd 80                   int    $0x80\n  ...\n\nUsing Go tip to manually compile a .s file (with 'go tool 6a' and 'go tool 6l') that\nonly has a main.init and main.main, both containing single SYSCALL instructions, results\nin the following:\n\n6.out:     file format elf64-x86-64-freebsd\n\nDisassembly of section .text:\n\n0000000000400c00 \u0026lt;main.init\u0026gt;:\n  400c00:       0f 05                   syscall\n        ...\n\n0000000000400c10 \u0026lt;main.main\u0026gt;:\n  400c10:       0f 05                   syscall\n        ...\n\nSo the SYSCALL instruction is being preserved in this case. However, whatever is causing\nit is definitely converting the ASYSCALL into an AINT prior to liblink - changing the\nAINT opcode in liblink/asm6.c results in a corresponding binary change for\nruntime.settls and others. And this seems to be FreeBSD amd64 specific (it does not\nhappen on linux/amd64 or openbsd/amd64...)\u003c/pre\u003e",
	"user": {
		"login": "4a6f656c",
		"id": 8142769,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-01-03T16:58:33Z",
	"updated_at": "2014-12-22T06:31:13Z"
}
