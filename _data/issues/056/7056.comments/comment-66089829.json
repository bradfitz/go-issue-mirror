{
	"id": 66089829,
	"body": "\u003ca id=\"c21\"\u003e\u003c/a\u003eComment 21:\n\n\u003cpre\u003eTo summarize the problem: \n\nFreeBSD amd64 kernels always support SYSCALL for invoking system calls; they support INT\n$0x80 only when COMPAT_FREEBSD32 is enabled.\n\nBut SYSCALL is buggy (\u003ca href=\"https://golang.org/issue/6372\"\u003eissue #6372\u003c/a\u003e) except on very new FreeBSDs.\n\nSo on those older FreeBSDs we have a choice between \"use INT $0x80\", which crashes\nreliably when COMPAT_FREEBSD32 is missing, or \"use SYSCALL\", which crashes randomly on\nall systems except very new kernels. Today we choose the former.\n\nThat seems like the right choice to me.\n\nThis doesn't seem to have been a particularly big problem for Go 1.2, so I think we can\nleave things alone for Go 1.3. Let's document that due to a FreeBSD kernel bug,\nfreebsd/amd64 systems require kernels built with COMPAT_FREEBSD32 (since Go 1.2).\n\nOnce the widely used released FreeBSD kernels all have the SYSCALL bug fix, we can go\nback to SYSCALL. But not for Go 1.3.\u003c/pre\u003e\n\n_Labels changed: added **documentation**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-04-03T11:36:45Z",
	"updated_at": "2014-12-08T10:39:15Z"
}
