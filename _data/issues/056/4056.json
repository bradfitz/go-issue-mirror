{
	"id": 51281571,
	"number": 4056,
	"state": "closed",
	"title": "runtime: limit number of operating system threads",
	"body": "\u003cpre\u003eIt comes up repeatedly that programs with large numbers of goroutines spawn far more\noperating system threads than they can reasonably use, because the Go runtime is trying\nnot to find itself in a situation where every thread is blocked in the operating system.\nUnfortunately this means that if something in the OS gets backed up Go just keeps making\nmore threads as more goroutines get stuck there. For example if DNS queries (done via\ncgo) get stuck for a little while, then a program with 5000 HTTP-fetching goroutines\nwill end up with 5000 threads attempting DNS queries. The usual \u0026quot;solution\u0026quot; is\nfor callers of cgo code to limit by hand the number of goroutines entering that code.\n\nI wonder if the runtime should expose a setting giving the maximum number of OS threads\nto use. 256 or 512 could be a reasonable default - those seem quite high and all the\ntrouble I have seen has been with far more threads. It would probably be like \n\n// MaxOSThreads sets the maximum number of OS threads that will\n// be used to run the current Go program and returns the previous setting.\n// If n \u0026lt; 1, it does not change the current setting. The default is 256.\nfunc MaxThreads(n int) int\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 35,
	"closed_at": "2014-12-08T10:21:31Z",
	"created_at": "2012-09-09T14:15:13Z",
	"updated_at": "2016-06-24T22:24:21Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
