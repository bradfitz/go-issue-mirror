{
	"id": 51285012,
	"number": 6327,
	"state": "closed",
	"title": "assignment to iteration variable in for loops: behavior unclear from spec",
	"body": "by **nautigar**:\n\n\u003cpre\u003eConsider the following code:\n\n\tx := []int{1, 2, 3}\n\t\n\tfor k := range x {\n\t\tfmt.Println(k)\n\t\tk = 0\t\n\t\tfmt.Println(k)\n\t}\n\n\nWhat is the expected output?\n\nI don't know what to expect, my closest guess would be\nan endless loop printing zeros, like running\n\n\tfor k := 0; k \u0026lt; len(x); k++ {\n\t\tfmt.Println(k)\n\t\tk = 0\t\n\t\tfmt.Println(k)\n\t\t}\n\nWhat do you see instead?\n\n0\n0\n1\n0\n2\n0\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n\nthe playground\n\nPlease provide any additional information below.\n\nAlthough there is only one declaration for variable k, there seem to be two instances of\nk, as if k was redeclared inside the for loop. The mere assignment to k seems to hide\nthe iteration variable. Is this the intended behavior? Is it defined in the spec?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:34:47Z",
	"created_at": "2013-09-04T18:14:15Z",
	"updated_at": "2016-06-25T01:18:07Z"
}
