{
	"id": 51276346,
	"number": 327,
	"state": "closed",
	"title": "reflect.InterfaceValue does not have Implements(*reflect.InterfaceType) bool method",
	"body": "by **wmundt42**:\n\n\u003cpre\u003eThere is currently no way, via the reflection interface, to do a\nconditional set.  Such a set would have the semantics of the two-result\ntype assertion in the language itself, but would allow the use of such\nsemantics on types passed around as variables.\n\nProposed semantics:\n\nfunc (v *InterfaceValue) ConditionalSet(x Value) (ok bool)\n{\n        if x implements v or x is the zero interface value {\n                set v to x;\n                returns true;\n        } else {\n                set v to zero interface value;\n                return false;\n        }\n}\n\nThis would allow reflection-based checks on whether a value implements an\ninterface, and also (by construction of zero Value instances) whether any\nreflect.Type implements a particular reflect.InterfaceType without having\nto iterate the methods and evaluate the logic manually.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2014-12-08T10:04:08Z",
	"created_at": "2009-11-24T22:10:52Z",
	"updated_at": "2016-06-24T19:08:24Z"
}
