{
	"id": 66050751,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eThe spec is not very precise about what should happen when you pass a function \nreturning two results as the actual parameter for a ...T formal parameter. We should \nbe clarifying this.\n\nSuperficially, this looks like a compiler bug. The following modification of your \nprogram seems to hang:\n\npackage main\n\nimport (\n\t\"fmt\"\n)\n\n// Foo and Bar are never actually called\n// If they were commented out, the wrong behavior will disappear\nfunc foo(string) ([]byte, bool) { return nil, false }\nfunc bar()                      { fmt.Println(foo(\"test\")) }\n\n\nfunc sample_data() ([]byte, bool) { return []byte{1, 2, 3}, false }\n\nfunc println(args ... interface{}) {\n\tprintln(\"len = \", len(args))\n}\n\n\nfunc main() {\n\t// This is correct of course\n\t//fmt.Println([]byte{1, 2, 3}, false)\n\tprintln([]byte{1, 2, 3}, false)\n\n\t// If we reference the return value at first, it works fine\n\tr, e := sample_data()\n\t//fmt.Println(r, e)\n\tprintln(r, e)\n\n\t//fmt.Println(sample_data()) // \u0026lt;-- strange result happens\n\tprintln(sample_data()) // \u0026lt;-- strange result happens\n}\u003c/pre\u003e\n\n\n_Owner changed to **r...@golang.org**._",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-03-12T22:43:51Z",
	"updated_at": "2014-12-22T05:51:11Z"
}
