{
	"id": 94398002,
	"number": 11662,
	"state": "closed",
	"title": "time: document that time.Tick causes a resource leak",
	"body": "Calling `time.Tick` causes a `Ticker` to leak because there is no interface to `Stop()` it.\r\n\r\nHere is a demonstration which starts 100,000 go routines each of which calls `time.Tick` then closes the go routines down again in an orderly fashion\r\n\r\nhttp://play.golang.org/p/zy5X4hAq0I\r\n\r\nIt sleeps at the end so you can run top or equivalent and see that it will be using 100% of a CPU core keeping the `Ticker`s up to date even though the user no longer has access to them.\r\n\r\nThis is unfortunate but it was decided in #8001 that it was too difficicult to `Stop` the `Ticker`s when they are garbage collected.\r\n\r\nThe documentation for `NewTicker` got changed after this, but not the documentation for `Tick`.\r\n\r\nIt currently reads \r\n\r\n\u003e Tick is a convenience wrapper for NewTicker providing access to the ticking channel only. Useful for clients that have no need to shut down the ticker.\r\n\r\nIt doesn't say why you might want to shut the Ticker down.\r\n\r\nMy suggestion for a re-word is this\r\n\r\n\u003e Tick is a convenience wrapper for NewTicker providing access to the ticking channel only. Note that this leaks associated resources; use NewTicker and Stop to avoid that.\r\n\r\nThat is possibly too alarmist, but I wanted the docs to note clearly that using `time.Tick` is leaking something which can't be recovered.\r\n",
	"user": {
		"login": "ncw",
		"id": 536803,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		},
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 0,
	"closed_at": "2015-07-13T01:35:46Z",
	"created_at": "2015-07-10T21:31:24Z",
	"updated_at": "2016-07-13T16:06:35Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
