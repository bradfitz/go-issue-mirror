{
	"id": 51288115,
	"number": 8386,
	"state": "closed",
	"title": "encoding/json: difference in behavior if embed a concrete type or interface for the same value",
	"body": "by **bsr203**:\n\n\u003cpre\u003eWhat does 'go version' print?\ngo version go1.2.1 darwin/amd64\n\nWhat steps reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n\nPlease see this thread \u003ca href=\"https://groups.google.com/forum/#\"\u003ehttps://groups.google.com/forum/#\u003c/a\u003e!topic/golang-nuts/oi61EuR-a3g\n\nIn this example,  \u003ca href=\"http://play.golang.org/p/YdFR9Aoj5O\"\u003ehttp://play.golang.org/p/YdFR9Aoj5O\u003c/a\u003e , the struct type is embedded, and\nthe json marshaled output is {\u0026quot;id\u0026quot;:\u0026quot;_id_\u0026quot;}\n\nIn this example, \u003ca href=\"http://play.golang.org/p/wchW_HBGKD\"\u003ehttp://play.golang.org/p/wchW_HBGKD\u003c/a\u003e ,  the interface is embedded, and\nthe json marshaled output is {\u0026quot;Ider\u0026quot;:{\u0026quot;id\u0026quot;:\u0026quot;_id_\u0026quot;}}\n\n\nWhat should have happened instead?\nI like to get the first output ({\u0026quot;id\u0026quot;:\u0026quot;_id_\u0026quot;}) with the interface\nembedded. \n\nPlease provide any additional information below.\nAs per rog,\n\nUnfortunately, unless the fields are statically determinable, \nI don't think you can. \n\nThis is arguably a bug, as the documentation says: \n\u0026quot;Anonymous struct fields are usually marshaled as if their inner exported \nfields were fields in the outer struct\u0026quot; with no caveat to say \nthat only applies if the inner field is not an interface type.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		},
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2014-12-08T10:46:34Z",
	"created_at": "2014-07-17T19:11:53Z",
	"updated_at": "2016-06-25T01:38:14Z",
	"milestone": {
		"id": 1067218,
		"number": 21,
		"title": "Go1.4"
	}
}
