{
	"id": 185986823,
	"body": "I don't have too much of an opinion regarding new .a and .o files (since I don't deal with compiler/linker stuff).\r\n\r\nAs the one who's been touching archive/tar lately, I support using zip over tar. The tar \"format\" is pretty fragmented and essentially consists of variety of popular and incompatible extensions (of which, only a few have a specification). And of the ones that have a specification, the behavior of the tar utility that introduced a given format doesn't always match the specified behavior. In contrast (as mentioned), the zip format is well defined (even if it is somewhat complicated) and Go's implementation of zip is less buggy then tar, IMHO. \r\n\r\nWhat are the extensions to archive/zip that @rogpeppe is adding? ~~Does it have to deal with trying to extend zip.File.Open to return an io.ReadCloser that satisfies io.ReaderAt and/or io.Seeker under for the zip.Store method? As it is today, zip.File.Open does not return something that can be random-accessed (like the proposal assumes is possible).~~\r\n\r\nEdit:  I figured out that random-access on individual files can be achieved by a combination of zip.File.DataOffset and zip.File.CompressedSize64. Disregard my concern.",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-19T00:05:41Z",
	"updated_at": "2016-02-19T03:33:27Z"
}
