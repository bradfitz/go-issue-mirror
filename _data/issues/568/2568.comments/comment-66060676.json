{
	"id": 66060676,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eHere is some more evidence (+P means accepted by P, -P means rejected by P):\n\nint(x,)           +gc  +gccgo  +go/parser\n[]byte(x,)      -gc  -gccgo  +go/parser\n([]byte)(x,)    -gccgo  +gc  +go/parser\n\nThe spec grammar explicitly disallows the comma (\n\u003ca href=\"http://tip.golang.org/ref/spec#Conversions\"\u003ehttp://tip.golang.org/ref/spec#Conversions\u003c/a\u003e ):\n\nConversion = Type \"(\" Expression \")\" .\n\nHowever, the spec grammar is ambiguous as there is overlap with function calls. In\ngeneral, a parser cannot decide if T(x) is a conversion or a function call without\nsemantic analysis.\n\nIn general it would be somewhat painful to retroactively report a syntax error after\ntype checking determined that T(x,) is in fact a conversion rather than a call.\n\nI propose that we change the spec in a backward-compatible way and permit a trailing\ncomma in this case:\n\nConversion = Type \"(\" Expression [ \",\"] \")\" .\n\nIt's trivial to adjust the compilers to accept the optional comma in cases where they\ndon't do so, yet.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-09-19T22:19:54Z",
	"updated_at": "2014-12-08T10:13:43Z"
}
