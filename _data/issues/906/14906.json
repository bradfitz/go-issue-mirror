{
	"id": 142549326,
	"number": 14906,
	"state": "closed",
	"title": "Cross-compilation produces different binaries",
	"body": "1. What version of Go are you using (`go version`)?\r\n1.6\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\ndarwin amd64 \u0026 linux amd64\r\n\r\n3. What did you do?\r\nI cross-compiled a 20MB binary on darwin for linux, which I run inside a docker scratch container. I also compiled the same program with the same dependencies on a Ubuntu 14.04 machine.\r\n\r\n4. What did you expect to see?\r\nI expected the binary to be the same and execute the same inside Docker.\r\n\r\n5. What did you see instead?\r\nThe binary cross-compiled on darwin worked just fine inside the scratch container, but the Ubuntu compiled binary exited saying that a file was not found. When running the \"broken\" binary in a docker container with a debian base image, it then ran. \r\n\r\nI am not using cgo or anything similar. It's a fairly large $work application, so I can't easily reproduce it, but this behavior has been tested across multiple machines and environments. It seems as though something is being statically linked into the darwin binary that is not being linked in the Ubuntu compiled binary.",
	"user": {
		"login": "derekperkins",
		"id": 3588778,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2016-03-22T19:04:55Z",
	"created_at": "2016-03-22T05:02:56Z",
	"updated_at": "2016-03-22T21:37:35Z"
}
