{
	"id": 66047710,
	"body": "\u003ca id=\"c26\"\u003e\u003c/a\u003eComment 26 by **anthony.g.basile**:\n\n\u003cpre\u003eI maintain the hardened (ie pax) kernel for gentoo.  Some observations\n\n1) applying pax markings base on whether the *current* running kernel is pax enabled or\nnot is a bad idea.  Consider: we build under a vanilla kernel and don't pax mark, we\nboot into a pax kernel and we get breakage.\n\n2a) i don't want to get into a full out debate, but i can't see how a language that\nneeds an rwx mmap can be safe.  you have to write to an area of memory presumeably\nbecause of some conditions external to the program, like user input.  you then turn\naround and execute that.  how is this not a vector for exploit?\n\n2b) i have written a utility to drop the x from an executable stack, but my guess is\nthat it will just break stuff, given that wx memory is consciously part of go's design.\n\n3) anytime you try to mangle an elf as paxctl -c does, you can expect breakage.  on\ngentoo, we patch binutils so all our binaries have a PT_PAX program header.  so the only\nthings that stick out are \"foreign\" elfs like skype (which is also self checking etc etc\nmaking paxctl -c a really bad idea there).  however, i think if you start doing paxctl\n-cm on elfs where you are not certain of the internals, you need to test/convince\nyourself that you are not introducing some badness.  converting PT_GNU_STACK to PT_PAX\nmay not be harmless.  i'd feel a lot better if you could get away with just paxctl -m.\n\ni don't use go and i'm not familiar with it, so i really can't say where to go from here.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-05-19T02:11:13Z",
	"updated_at": "2014-12-08T10:03:00Z"
}
