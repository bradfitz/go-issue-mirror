{
	"id": 176122587,
	"number": 17047,
	"state": "open",
	"title": "Mark long lived objects with a special flag",
	"body": "Hi, \r\n\r\nI've been thinking on how to make finding memory leaks a bit easier for Go users.\r\n\r\nI would like to ask if it's possible to introduce a runtime flag like `GODEBUG=gctrace=3` where the GC would \"paint\" the long lived objects that live over a long period of time in the memory of the program. Say this could be configured via ` GODEBUG=gctrace=3,longlived=100s` which would express that the user sees the objects that are present for more than 100 seconds printed when the GC runs (the display can be done at a frequency of a few seconds apart so that it doesn't overload output in case of very large applications). An alternative would be maybe instead of a time span to configure a number of GC runs that would need to pass in order for an object to be considered old (but that would imply the user is very savvy about the GC, how it works and how the application should perform).\r\n\r\nI know this would imply a runtime penalty but when trying to find a memory leak performance is not the priority.\r\n\r\nWhat do you think? Would this be possible? If you need further details to clarify this please let me know.\r\n\r\nThank you.",
	"user": {
		"login": "dlsniper",
		"id": 607868,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FeatureRequest"
		}
	],
	"comments": 2,
	"created_at": "2016-09-09T22:07:53Z",
	"updated_at": "2016-09-11T09:19:00Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
