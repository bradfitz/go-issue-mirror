{
	"id": 117545258,
	"number": 13299,
	"state": "open",
	"title": "x/term: ReadKey() interface",
	"body": "Now that there is x/term (#13104) there should be some user stories.\r\n\r\nThe story here is that in LXC we have console client and server separated by websocket channel. Client uses os.Stdin to read the input from user. Server interprets what is being sent to it (passes it to pty?) Client most likely uses Read function from https://golang.org/pkg/io/#Reader, for which os.Stdin.Read() returns nothing on Windows.\r\n\r\nThis interface on Linux is flawed in the first place, because I personally don't understand what it should return on read from os.Stdin if I hit arrow key. What cryptic code it returns/expects on Linux part is a separate mystery to me. \r\n\r\nSo perhaps there should be a better interface - synchronous ReadKey() and that will return keys in a sequence, and combinations of keys are also tracked.\r\n\r\nAnd if we catch keys, it is better to returns values that are serializable in some cross-platform formats to avoid dependency on certain import and receive ability to switch packages who provide ReadKey() interface easily. I'd use strings like Ctrl-Q etc.\r\n\r\nHopefully that's clear. And I want to use Ctrl-Q in golang programs and Ctrl-V for my own purposes. And I also don't want Linux terminal to hang if I kill go process somewhere in the middle after go already switched terminal to some non-friendly state for its own purpose.",
	"user": {
		"login": "techtonik",
		"id": 515889,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"created_at": "2015-11-18T09:22:43Z",
	"updated_at": "2015-12-28T16:25:07Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
