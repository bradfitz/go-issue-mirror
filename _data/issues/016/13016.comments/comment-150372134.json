{
	"id": 150372134,
	"body": "@crawshaw @hyangah \r\nIt was mentioned on https://go-review.googlesource.com/#/c/16159/ that generating resource ids from R.java might be worth looking into. I'm actually not sure if `R.java` was meant literally (as I don't know where that'd be available in sdk, is it?) but each platform folder does contain an android.jar that has most everything that would be required, including the `android/R.class` file.\r\n\r\nWriting a bare-bones class parser specific to cmd gomobile's needs would be ok I think, so that's one option.\r\n\r\nAnother option is to use `aapt` which is capable of printing out resource information from `android.jar`. See `aapt l -a android.jar | grep resource` for example. I consider this an option since `aapt` is already required to run tests but some details might have to be inferred. This would be simpler to parse but prone to issues if aapt decides to change it's output.\r\n\r\nWith that said, I just recalled an xml autocomplete plugin I had written a long a while back for android layouts. This was possible due resources in a platforms `data/res` folder in the sdk. I believe this contains **all** the information required for auto-generating identifiers and it's well structured xml.\r\n\r\nFor example:\r\nThe `values/attrs_manifest.xml` file contains all possible attributes available in a manifest. The theme attribute is listed as `\u003cattr name=\"theme\" format=\"reference\" /\u003e`. The format attr tells us how to serialize when writing out. By convention, this also informs us that valid references are located in `res/values/themes.xml` which contains, for example, `\u003cstyle name=\"Theme.NoTitleBar.Fullscreen\"\u003e`. We can now reference `values/public.xml` for the id, `\u003cpublic type=\"style\" name=\"Theme.NoTitleBar.Fullscreen\" id=\"0x01030007\" /\u003e`\r\n\r\nAs another short example, in `values/attrs_manifest.xml` is `\u003cattr name=\"screenOrientation\"\u003e...`. This node has children of type `\u003cenum/\u003e`, e.g. `\u003cenum name=\"landscape\" value=\"0\" /\u003e`.\r\n\r\nThe point is these xml resources can be used to not only auto-generate resource identifiers, but also determine during generation what valid values are. This would allow gomobile cmd to identify bad values during compile instead of finding out you have an invalid manifest when attempting to install the apk.\r\n\r\nIf there's interest in this approach, I can work on a CL.",
	"user": {
		"login": "dskinner",
		"id": 92266,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-22T22:20:52Z",
	"updated_at": "2015-10-22T22:20:52Z"
}
