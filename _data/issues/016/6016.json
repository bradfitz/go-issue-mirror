{
	"id": 51284551,
	"number": 6016,
	"state": "closed",
	"title": "cmd/gc: infinite loop with -race flag",
	"body": "\u003cpre\u003e% go get labix.org/v2/mgo\n% go test -i -race labix.org/v2/mgo\n\nThis goes into an infinite loop and eats\nup arbitrary amounts of memory when doing so.\n\nI instrumented genlist to print out the\nlist nodes if it had traversed more than a million:\n\n\tprint(\u0026quot;genlist %p; node %J\\n\u0026quot;, l, l-\u0026gt;n);\n\nA sample output is this:\n\ngenlist 7ffff4338a30; node  u(100) l(5503) tc(1)\ngenlist 7ffff441cf30; node  u(100) l(5503) tc(1)\ngenlist 7ffff4338a30; node  u(100) l(5503) tc(1)\ngenlist 7ffff441cf30; node  u(100) l(5503) tc(1)\ngenlist 7ffff4338a30; node  u(100) l(5503) tc(1)\n\nThe command line that failed in this way was:\n/home/rog/go/pkg/tool/linux_amd64/6g -o $WORK/labix.org/v2/mgo/_obj/_go_.6 -race -p\nlabix.org/v2/mgo -complete -D _/home/rog/src/go/src/labix.org/v2/mgo -I $WORK -I\n/home/rog/src/go/pkg/linux_amd64_race ./auth.go ./cluster.go ./doc.go ./gridfs.go\n./log.go ./queue.go ./server.go ./session.go ./socket.go ./stats.go\n\nI've verified that this behaviour occurs both on tip (a6a9792f94ac)\nand go1.1.1.\u003c/pre\u003e",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "RaceDetector"
		}
	],
	"comments": 5,
	"closed_at": "2014-12-08T10:33:07Z",
	"created_at": "2013-08-02T15:17:57Z",
	"updated_at": "2016-06-24T22:53:18Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
