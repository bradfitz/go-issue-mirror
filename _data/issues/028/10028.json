{
	"id": 59261753,
	"number": 10028,
	"state": "closed",
	"title": "runtime: getRandomData slows Go programs down on Plan 9",
	"body": "We experienced the Go programs running on a Plan 9\r\nmachine on GCE to be irregularly slow.\r\n\r\nFor example:\r\n\r\n```\r\n% go test -v -run TestGoNil\r\n=== RUN TestGoNil\r\n--- PASS: TestGoNil (0.31s)\r\nPASS\r\nok   runtime 0.397s\r\n% go test -v -run TestGoNil\r\n=== RUN TestGoNil\r\n--- PASS: TestGoNil (5.27s)\r\nPASS\r\nok   runtime 7.004s\r\n```\r\n\r\nWith Go 1.4, the whole all.rc took more than 90 minutes\r\nto complete.\r\n\r\nAfter profiling the Go programs, we noticed that\r\nsometimes, they spent much more time reading.\r\n\r\nFast:\r\n\r\n```\r\n% iostats go test -v -run TestGoNil\r\n=== RUN TestGoNil\r\n--- PASS: TestGoNil (0.41s)\r\nPASS\r\nok  \truntime\t0.501s\r\n\r\nread      23176119 bytes, 154556.8 Kb/sec\r\nwrite     7041578 bytes, 49864.14 Kb/sec\r\nprotocol  31405437 bytes, 28192.42 Kb/sec\r\nrpc       24803 count\r\n```\r\n\r\nSlow:\r\n\r\n```\r\n% iostats go test -v -run TestGoNil\r\n=== RUN TestGoNil\r\n--- PASS: TestGoNil (2.25s)\r\nPASS\r\nok  \truntime\t2.332s\r\n\r\nread      23172023 bytes, 11346.04 Kb/sec\r\nwrite     7041588 bytes, 52504.14 Kb/sec\r\nprotocol  31401489 bytes, 10594.57 Kb/sec\r\nrpc       24806 count\r\n```\r\n\r\nWe figured out that extra time was spent reading /dev/random.\r\n\r\nThe Go runtime use random data to initialize hash table\r\nkeys and reduce collision. Every Go process starts by\r\nacquiring random data from the operating system.\r\nOn Plan 9, it reads the /dev/random file, which provides\r\na stream of random numbers generated by the kernel.\r\n\r\nhttps://github.com/golang/go/blob/d5e4c4/src/runtime/alg.go#L320\r\n\r\nThe generation of random numbers in the Plan 9 kernel\r\nis trivial. A kernel process is running a loop incrementing\r\na variable. After each clock tick, the value of the variable\r\nis read and appended in the random circular buffer.\r\n\r\nhttps://github.com/0intro/plan9/blob/11e8c8/sys/src/9/port/random.c#L61\r\n\r\nGenerating random bytes this way is slow, but for some\r\nreason, it's much slower on GCE than on QEMU or\r\nreal hardware.\r\n\r\nSince every Go process is starting by reading 128 bytes\r\nfrom /dev/random, the buffer regularly runs out of random\r\ndata, and the processes are blocking on read. This is\r\namplified by the fact that now, the Go compiler itself is\r\nalso a Go program.\r\n\r\nWe should probably not use /dev/random to initialize the\r\nGo hash table keys on Plan 9. It's obviously too slow for\r\nthis use.\r\n\r\nAs a workaround, I wrote a simple user-space file system,\r\nsitting on top of /dev/random, but providing pseudo-random\r\nnumbers, initialized from the kernel random source. Thus,\r\nit is able to generate much more numbers per second.\r\n\r\nThis way, on GCE, the Go programs now run 3x to 9x\r\nfaster than before.\r\n\r\nNow, on GCE, all.rc takes 10 minutes to complete with Go 1.4\r\nand 15 minutes with the current master branch.\r\n",
	"user": {
		"login": "0intro",
		"id": 6043744,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "0intro",
		"id": 6043744,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2015-03-01T18:36:13Z",
	"created_at": "2015-02-27T16:49:17Z",
	"updated_at": "2016-06-25T02:02:14Z"
}
