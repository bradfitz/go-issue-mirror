{
	"id": 66090024,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eYes, it would be handy. Lots of benchmarks do this. And even more do not, but should.\n\nIn the dashboard benchmarks I use the following helper function:\n\n// Parallel is a public helper function that runs f N times in P*GOMAXPROCS goroutines.\nfunc Parallel(N uint64, P int, f func()) {\n        numProcs := P * runtime.GOMAXPROCS(0)\n        var wg sync.WaitGroup\n        wg.Add(numProcs)\n        for p := 0; p \u0026lt; numProcs; p++ {\n                go func() {\n                        defer wg.Done()\n                        for int64(atomic.AddUint64(\u0026N, ^uint64(0))) \u0026gt;= 0 {\n                                f()\n                        }\n                }()\n        }\n        wg.Wait()\n}\n\nOne aspect to consider is that generally it also needs to know \"grain size\", because\nsynchronizing on each iteration can outweigh the thing-under-test. If it's incorporated\ninto testing package, then probably we can remember ns/op from previous runs and thus\neasily calculate grain size.\u003c/pre\u003e\n\n_Labels changed: added **repo-main**, **release-go1.3maybe**._",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-01-10T12:32:39Z",
	"updated_at": "2014-12-22T06:31:26Z"
}
