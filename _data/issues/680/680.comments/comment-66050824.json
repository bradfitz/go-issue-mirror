{
	"id": 66050824,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eTypically, languages consider the following characters or character pairs as new line\nindicators:\n\nLF\nCR\nCR LF\n\n(C#, Java, Python). C# also specifies three additional Unicode chars (next line char\nU+2085, line sep char U+2028, and paragraph sep char U+2029).\n\nSingle CRs were used by old Macintosh OSs. We can probably ignore them. Programs\ncontaining only CRs are likely not going to compile and thus at least a user is alerted\nto the problem.\n\nWe could allow the additional Unicode chars, but I am not convinced it is important - in\nthe interest of simplicity I would not add them.\n\nSince CR LR contains an LF, it will be properly recognized as a newline and things work\nas expected with respect to parsing lines and semicolon insertion.\n\nThus, additionally inserted CRs in CR LF sequences are treated as white space and are\nnot visible to a program except if they occur in multi-line raw strings. Files compiled\non different platforms should all behave the same, so compiling a file on a Windows\nmachine should not result in different raw strings than the same file compiled on a Unix\nmachine.\n\nIt looks like there are two possible ways to go:\n\na) We don't change the language spec. It is the source file creator's responsibility to\nbe aware of potential extra CRs in multi-line raw strings (and often, it won't matter).\n\nb) We change the language spec. As proposed before, one option is to say that all CR LF\nsequences are replaced by LFs, in the scanning phase.\n\ngofmt effectively does b) with every program except for raw strings which it preserves\nuntouched.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-05-04T23:10:35Z",
	"updated_at": "2014-12-08T10:05:29Z"
}
