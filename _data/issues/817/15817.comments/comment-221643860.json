{
	"id": 221643860,
	"body": "@titpetric To be very clear: \"Shadowing\" is not the same as \"redeclaration\". A redeclaration is a Go-specific concept which permits a variable, which must have been previously declared **in the same block**, to appear again on the lhs of a `:=` short variable declaration.\r\n\r\nShadowing is the notion of a new, different, but equally named object (variable, constant, type, etc.) making another object declared in an outer block (scope) inaccessible as that object is now \"in the shadow\" of the object declared in the inner block.\r\n\r\nJava is one of the first languages which doesn't permit shadowing, and it was then followed by C#. The idea in Java was to prevent programming errors.\r\n\r\nPreventing shadowing is a pretty severe violation of the encapsulation notion of a block: If shadowing is not permitted, the validity of identifier declarations inside a block depend on the surroundings of that block. The choice of new identifiers is all of sudden restricted by the enclosing environment.\r\n\r\nThe solution here is not to restrict the language unnaturally, but to provide tools (go vet) to find common errors.\r\n",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"heart": 1
	},
	"created_at": "2016-05-25T17:15:48Z",
	"updated_at": "2016-05-25T17:15:48Z"
}
