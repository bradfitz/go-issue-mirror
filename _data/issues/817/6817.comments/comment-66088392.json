{
	"id": 66088392,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eThis continually bites me.  I have an interface that has both network and filesystem\nimplementations and the network one works great (firing off a bounded number of\ngoroutines: say, 1000) but then the filesystem implementation of the interface kills the\nOS, and my code has to manually limit itself, which feels like a layering violation. \nThe runtime should do the right thing for me.\n\nruntime/debug.SetMaxThreads sets the max threads Go uses before it blows up.\n\nIf we can't do async filesystem IO everywhere (and I don't think we can), then I think\nwe should have something like runtime/debug.SetMaxFSThreads that controls the size of\nthe pool of thread doing filesystem operations but blocks instead of crashes.  That\nmeans for the read/write syscalls, we'd have to know which fds are marked non-blocked\n(network stuff) and which aren't.\n\nOr we put all this capping logic in pkg/os, perhaps opt-in.\n\npkg os\nfunc SetMaxFSThreads(n int)\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-11-23T16:30:35Z",
	"updated_at": "2014-12-08T10:37:53Z"
}
