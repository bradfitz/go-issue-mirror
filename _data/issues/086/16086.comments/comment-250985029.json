{
	"id": 250985029,
	"body": "+1 to using source-based importer. We were running `go vet` in our CI environment and weren't running `go install ./...` first, so there were many issues which were not flagged in our CI environment but would be flagged locally if the packages were built, which was extremely confusing.\r\n\r\nFor reference, here's a self-contained test that demonstrates the issue (wrote it with the intent of including it in a bug before finding this issue):\r\n\r\n```go\r\npackage main_test\r\n\r\nimport (\r\n\t\"io/ioutil\"\r\n\t\"os\"\r\n\t\"os/exec\"\r\n\t\"path\"\r\n\t\"testing\"\r\n)\r\n\r\nconst (\r\n\ttestMain = `package main\r\nimport \"github.com/nmiyake/govetbug/testprint\"\r\nfunc main() {\r\n\ttestprint.Print(\"hello, %v!\", \"world\")\r\n}\r\n`\r\n\ttestPrint = `package testprint\r\nimport \"fmt\"\r\nfunc Print(msgAndArgs ...interface{}) {\r\n\tif len(msgAndArgs) == 0 {\r\n\t\treturn\r\n\t}\r\n\tfmt.Printf(msgAndArgs[0].(string), msgAndArgs[1:]...)\r\n}\r\n`\r\n)\r\n\r\n// (1) Create a file that calls a \"Print\" function in another package in a manner that should trigger a go vet error\r\n// (2) Run \"go vet .\" on the project\r\n//\r\n// Expected: go vet issues are reported\r\n// Actual: go vet reports no failures\r\n//\r\n// (4) Run \"go install ./...\" on the project\r\n// (5) Run \"go vet .\" on the project\r\n//\r\n// Expected: output/behavior is the same as running after (2)\r\n// Actual: go vet now reports the failures as originally expected\r\nfunc TestGoVet(t *testing.T) {\r\n\t// create tmpDir to act as test GOPATH\r\n\ttmpDir, err := ioutil.TempDir(\"\", \"\")\r\n\tif err != nil { panic(err) }\r\n\tdefer os.RemoveAll(tmpDir)\r\n\r\n\terr = os.Setenv(\"GOPATH\", tmpDir)\r\n\tif err != nil { panic(err) }\r\n\r\n\t// write test print file\r\n\ttestPrintDir := path.Join(tmpDir, \"src/github.com/nmiyake/govetbug/testprint\")\r\n\terr = os.MkdirAll(testPrintDir, 0755)\r\n\tif err != nil { panic(err) }\r\n\terr = ioutil.WriteFile(path.Join(testPrintDir, \"testprint.go\"), []byte(testPrint), 0644)\r\n\tif err != nil { panic(err) }\r\n\r\n\t// write out test main file\r\n\ttestMainDir := path.Join(tmpDir, \"src/github.com/nmiyake/govetbug\")\r\n\terr = ioutil.WriteFile(path.Join(testMainDir, \"main.go\"), []byte(testMain), 0644)\r\n\tif err != nil { panic(err) }\r\n\r\n\tcmd := exec.Command(\"go\", \"vet\", \".\")\r\n\tcmd.Dir = testMainDir\r\n\toutput, err := cmd.CombinedOutput()\r\n\t// Expect \"possible formatting directive in Print call\" error, but does not occur\r\n\tif err != nil {\r\n\t\tt.Errorf(\"%v failed: %v\", cmd.Args, string(output))\r\n\t}\r\n\r\n\t// install the package\r\n\tcmd = exec.Command(\"go\", \"install\", \"./...\")\r\n\tcmd.Dir = testMainDir\r\n\toutput, err = cmd.CombinedOutput()\r\n\tif err != nil {\r\n\t\tt.Errorf(\"%v failed: %v\", cmd.Args, string(output))\r\n\t}\r\n\r\n\tcmd = exec.Command(\"go\", \"vet\", \".\")\r\n\tcmd.Dir = testMainDir\r\n\toutput, err = cmd.CombinedOutput()\r\n\t// \"possible formatting directive in Print call\" is reported after \"go install ./...\" is run\r\n\tif err != nil {\r\n\t\tt.Errorf(\"%v failed: %v\", cmd.Args, string(output))\r\n\t}\r\n}\r\n```",
	"user": {
		"login": "nmiyake",
		"id": 4267425,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-02T17:59:14Z",
	"updated_at": "2016-10-02T17:59:14Z"
}
