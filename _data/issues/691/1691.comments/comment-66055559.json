{
	"id": 66055559,
	"body": "\u003ca id=\"c17\"\u003e\u003c/a\u003eComment 17:\n\n\u003cpre\u003eThe problem with comment #10 is that you would either\na) need to know what the definition of wchar_t is on the target platform\nb) use the mbtowc() family of functions - which requires you to know what the multibyte\nencoding is\nIf we can guarantee that all systems supported by Go have a multibyte encoding of UTF-8,\nthen we can implement this portably. Alas:\n\n$ uname -a\nLinux pietro-laptop 3.13.0-29-generic #52-Ubuntu SMP Wed May 28 12:42:47 UTC 2014 x86_64\nx86_64 x86_64 GNU/Linux\n$ cat multibyte.c\n#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;stdlib.h\u0026gt;\n#include \u0026lt;limits.h\u0026gt;\n#include \u0026lt;string.h\u0026gt;\n#include \u0026lt;errno.h\u0026gt;\n#include \u0026lt;locale.h\u0026gt;\n\nint main(void)\n{\n    wchar_t wide = L'ä¸–';\n    char multibyte[MB_LEN_MAX];\n    int i, n;\n\n    setlocale(LC_ALL, \"\");\n    errno = 0;\n    n = wctomb(multibyte, wide);\n    if (n == -1) {\n        fprintf(stderr, \"error %s\\n\", strerror(errno));\n        return 1;\n    }\n    if (n == 0) {\n        fprintf(stderr, \"weird: wctomb() returned 0 (no bytes in output)\\n\");\n        return 2;\n    }\n    for (i = 0; i \u0026lt; n; i++)\n        printf(\"%02X \", multibyte[i]);\n    printf(\"\\n\");\n    return 0;\n}\n$ LC_CTYPE= ./a.out \nFFFFFFE4 FFFFFFB8 FFFFFF96 \n$ LC_CTYPE=en_US.UTF8 ./a.out\nFFFFFFE4 FFFFFFB8 FFFFFF96 \n$ LC_CTYPE=ja_JP.SJIS ./a.out \nFFFFFF90 FFFFFFA2 \n\nSo as far as I can gather, a C.CWString() would need to be platform-specific.\n\nFor Windows, we can either\n- do the work on the Go side: have unicode/utf16 do the conversion (this is what package\nsyscall does)\n- do the work on the C side: use MultiByteToWideChar() in kernel32.dll by passing\nCP_UTF8 as the first argument (which should work regardless of locale)\n\nFor the Unixes, though, I'm not sure... other than linking to libiconv, which I imagine\nisn't optimal, or flat out not providing it since it isn't used much to begin with, in\nwhich case for Windows we could just say use the routines in package syscall.\n\n(I have wanted to prune through cgo myself sometime.)\u003c/pre\u003e",
	"user": {
		"login": "andlabs",
		"id": 718242,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-06-02T15:08:44Z",
	"updated_at": "2014-12-22T05:54:48Z"
}
