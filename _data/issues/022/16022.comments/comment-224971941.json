{
	"id": 224971941,
	"body": "I can reproduce this on Linux with GOMAXPROCS=1 on go1.6.\r\n\r\nWhat is happening is that you are spawning 600,000 goroutines. Depending on how the scheduler behaves, if all are spawned before any finish, you'll use up to ~1.3GB (~2K per goroutine).  If goroutines finish faster than you spawn them, then memory usage will be quite low.  That's why GOMAXPROCS matters, and why the GC at point A affects things.\r\n\r\nWhen you get to the sleep, Go is not using the ~1.3GB anymore.  But it hasn't given that memory back to the OS yet.  Wait 5 minutes or call debug.FreeOSMemory.",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-09T17:44:18Z",
	"updated_at": "2016-06-09T17:44:18Z"
}
