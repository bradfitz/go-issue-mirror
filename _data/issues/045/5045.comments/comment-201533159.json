{
	"id": 201533159,
	"body": "My two cents from the peanut gallery: It might be worth expanding the sync/atomic API to include explicit ordering annotations. Much of the discussion in this bug resolves around the question \"what is the right guarantee for each operation in sync/atomic?\" I am not convinced there exists a good answer to this question, as Dmitry's examples have shown. C++ avoids this question entirely by having each atomic operation explicitly specify its ordering requirements. That approach may seem more complex, but it has benefits:\r\n\r\n- Algorithms that use atomics are extremely subtle. Ordering annotations document exactly what the author assumes, which helps the reader reason about correctness. Hans Boehm makes a similar argument [here](http://www.hboehm.info/c++mm/ordering_integrated.html):\r\n\r\n  \u003e [Using explicit ordering constraints] makes it harder to ignore ordering issues. Ignoring them is almost always a mistake at this level. A number of existing atomics interfaces suffer from either sloppiness in dealing with memory ordering, or from making it impossible to state some useful ordering constraints. Empirically, this has resulted in many bugs.\r\n\r\n- The runtime can use the weakest (fastest) hardware primitives available that satisfy the programmer's constraints. This benefits the program at the cost of some implementation complexity in the runtime. Note that the runtime need not be as complex as it may seem -- it's perfectly reasonable for the runtime to implement all operations using the strongest ordering (sequential consistency) by default, then later add faster implementations for a small number of weaker annotations as needed.\r\n\r\nSections 5 and 6 of [this paper](http://www.hpl.hp.com/techreports/2008/HPL-2008-56.pdf) are also good reading.",
	"user": {
		"login": "tombergan",
		"id": 13954200,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-25T21:54:29Z",
	"updated_at": "2016-03-25T21:54:29Z"
}
