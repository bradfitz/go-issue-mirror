{
	"id": 66076302,
	"body": "\u003ca id=\"c20\"\u003e\u003c/a\u003eComment 20:\n\n\u003cpre\u003eIt's simple. We need to replace:\n\n--------------------------\nTo guarantee that a read r of a variable v observes a particular write w to v, ensure\nthat w is the only write r is allowed to observe. That is, r is guaranteed to observe w\nif both of the following hold:\n\nw happens before r.\nAny other write to the shared variable v either happens before w or after r.\nThis pair of conditions is stronger than the first pair; it requires that there are no\nother writes happening concurrently with w or r.\n\nWithin a single goroutine, there is no concurrency, so the two definitions are\nequivalent: a read r observes the value written by the most recent write w to v. When\nmultiple goroutines access a shared variable v, they must use synchronization events to\nestablish happens-before conditions that ensure reads observe the desired writes.\n\nThe initialization of variable v with the zero value for v's type behaves as a write in\nthe memory model.\n\nReads and writes of values larger than a single machine word behave as multiple\nmachine-word-sized operations in an unspecified order.\n--------------------------\n\nwith:\n\n--------------------------\nIf there is more than one such w, the behavior is undefined.\n\nThe initialization of variable v with the zero value for v's type behaves as a write in\nthe memory model.\n--------------------------\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-15T19:43:32Z",
	"updated_at": "2014-12-08T10:26:58Z"
}
