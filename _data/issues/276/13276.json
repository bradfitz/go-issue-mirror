{
	"id": 117150287,
	"number": 13276,
	"state": "closed",
	"title": "net/url: Parsing of absolute Windows filepaths without scheme",
	"body": "Parsing a Windows filepath without scheme yields an invalid url:\r\nExamples: https://play.golang.org/p/QuBFiU_1b1\r\n```\r\n# Working when prefixed with file:///\r\nfile:///c:\\foo\\bar\r\nScheme: file\r\nHost: \r\nPath: /c:\\foo\\bar\r\n\r\nfile:///c:/foo/bar\r\nScheme: file\r\nHost: \r\nPath: /c:/foo/bar\r\n\r\n# Not working with only 2 leading slashes\r\nfile://c:\\foo\\bar\r\nScheme: file\r\nHost: c:\\foo\\bar\r\nPath: \r\n\r\n# Host containing colon but without port should not be valid?\r\nfile://c:/foo/bar\r\nScheme: file\r\nHost: c:\r\nPath: /foo/bar\r\n\r\n# Expected: Scheme: empty, Path: input\r\nc:\\foo\\bar\r\nScheme: c\r\nHost: \r\nPath: \r\n\r\n# Expected: Scheme: empty, Path: input\r\nc:/foo/bar\r\nScheme: c\r\nHost: \r\nPath: /foo/bar\r\n```\r\n\r\nThe middle two tests aren't real bugs though, I guess.",
	"user": {
		"login": "JaCoB1123",
		"id": 642504,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2015-11-16T15:45:26Z",
	"created_at": "2015-11-16T15:35:03Z",
	"updated_at": "2015-11-16T15:45:26Z"
}
