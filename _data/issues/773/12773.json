{
	"id": 108719067,
	"number": 12773,
	"state": "open",
	"title": "proposal: os: introduce Executable to return the path of the current executable",
	"body": "This proposes to introduce a new API in package os that addresses #4057.\r\n```\r\npackage os\r\n\r\n// Executable returns the path name for the executable that starts the\r\n// current process. The result is the path is used to start the the current\r\n// process, but there is no guarantee that the path is still pointing to\r\n// the correct executable.\r\n//\r\n// The main use case is finding resources located relative to an executable.\r\n//\r\n// Not all OS support this, but all popular ones do.\r\nfunc Executable() (string, error)\r\n```\r\n\r\nThis API has been proposed before, but rejected on the ground that it's impossible\r\nto formally define its semantic, but that's because the old proposal says the result\r\ncan be used to re-exec the current process. If we relax the condition that it returns\r\nthe original path that starts the current process, its semantic is fully defined on\r\nall supported platforms. Not being to re-exec the current process is not a big issue\r\nas the primary use case is to find relatively positioned resource files (i.e. OS X app\r\nbundles.)\r\n\r\nThe implementation is already available in https://golang.org/cl/6736069, we just\r\nhave to brought it up to date.\r\n\r\nI'd like to thank @kardianos for the suggestion of the new semantic.",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		},
		{
			"name": "Proposal-Accepted"
		}
	],
	"assignee": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"comments": 40,
	"created_at": "2015-09-28T18:29:14Z",
	"updated_at": "2016-10-23T22:53:42Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	}
}
