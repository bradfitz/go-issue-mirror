{
	"id": 51278285,
	"number": 1773,
	"state": "closed",
	"title": "binding variables in inline functions",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\nCode:\n\npackage main\n\nimport (\n        \u0026quot;fmt\u0026quot;\n        \u0026quot;time\u0026quot;\n)\n\nfunc fire(ch chan int, k int) {\n        for i := 0; i \u0026lt; k; i++ {\n                go func() {\n                        ch \u0026lt;- i\n                }()\n        }\n        time.Sleep(1e9)\n        close(ch)\n}\n\nfunc main() {\n        var k int = 5\n        r := make([]int, k)\n        ch := make(chan int)\n        go fire(ch, k)\n        for {\n                i, ok := \u0026lt;-ch\n                if !ok {\n                        break\n                }\n                r[i]++\n        }\n        fmt.Printf(\u0026quot;%#v\\n\u0026quot;, r)\n}\n\nWhat is the expected output?\n\n  [1, 1, 1, 1, 1]\n\nWhat do you see instead?\n\n  panic: runtime error: index out of range\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n\n  6g\n\nWhich operating system are you using?\n\n Darwin\n\nWhich revision are you using?  (hg identify)\n\n748aecdab19b+ tip\n\nPlease provide any additional information below.\n\nI was expecting that the variable \u0026quot;i\u0026quot;, inside the inline function inside\nfire(),\nis a new local variable which gets initialized to the value of the variable\n\u0026quot;i\u0026quot; in the outer iteration. \nPerhaps I was wrong? \n\nIt seems that the variable \u0026quot;i\u0026quot; is shared by all copies of the inline function\nand they\nall see the value 5 since they are executed after the loop ends.\n\nIs this OK with the spec?\u003c/pre\u003e",
	"user": {
		"login": "petar",
		"id": 285131,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:09:50Z",
	"created_at": "2011-05-03T01:30:35Z",
	"updated_at": "2016-06-24T19:28:31Z"
}
