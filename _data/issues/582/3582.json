{
	"id": 51280841,
	"number": 3582,
	"state": "closed",
	"title": "runtime: enable stack pointers during trace of stack overflow",
	"body": "\u003cpre\u003eamd64/darwin.\nThe stack appears to be the m0 OS stack, since it is not allocated and the fmt test does\nnot use cgo (so it's not some other thread's stack).  Perhaps we are setting the limits\nwrong for the m0 stack.  Or perhaps it is an unexpected signal.  Regardless, I'd like to\nunderstand this.\n\n\n\n---------- Forwarded message ----------\nFrom: Jonathan Pittman \u0026lt;jonathan.mark.pittman@gmail.com\u0026gt;\nDate: Fri, Apr 27, 2012 at 07:54\nSubject: Re: [go-nuts] Re: go1.0.1 released\nTo: Peter Kleiweg \u0026lt;pkleiweg@xs4all.nl\u0026gt;\nCc: golang-nuts \u0026lt;golang-nuts@googlegroups.com\u0026gt;\n\n\nNot sure if anyone else saw this.  With respect to the new go1.0.1 release, I just\nran...\n\nhg pull\nhg update release\n./all.bash\n\nand then in the middle of the \u0026quot;# Testing packages.\u0026quot; section, I saw...\n\n\nruntime: split stack overflow: 0x2747cd8 \u0026lt; 0x2748000\nthrow: runtime: split stack overflow\n\ngoroutine 1 [chan receive]:\nmain.(*builder).do(0xf8400fe180, 0xf8401d5000, 0xf8401bb000, 0x1)\n/Users/jonathanpittman/go/src/cmd/go/build.go:606 +0x3e4\nmain.runTest(0x45e598, 0xf840001480, 0x300000003, 0xf8400f6880)\n/Users/jonathanpittman/go/src/cmd/go/test.go:367 +0x1aa1\nmain.main()\n/Users/jonathanpittman/go/src/cmd/go/main.go:141 +0x426\n\ngoroutine 2 [syscall]:\ncreated by runtime.main\n/Users/jonathanpittman/go/src/pkg/runtime/proc.c:221\n\n\u0026lt;some go routines omitted for brevity\u0026gt;\n\ngoroutine 342 [syscall]:\nsyscall.Syscall()\n/Users/jonathanpittman/go/src/pkg/syscall/asm_darwin_amd64.s:14 +0x5\nsyscall.Read(0x6, 0xf840138200, 0x20000000200, 0x0, 0x0, ...)\n/Users/jonathanpittman/go/src/pkg/syscall/zsyscall_darwin_amd64.go:810 +0x78\nos.(*File).read(0xf8401d4b78, 0xf840138200, 0x20000000200, 0x1c1460, 0x0, ...)\n/Users/jonathanpittman/go/src/pkg/os/file_unix.go:163 +0x58\nos.(*File).Read(0xf8401d4b78, 0xf840138200, 0x20000000200, 0x0, 0x0, ...)\n/Users/jonathanpittman/go/src/pkg/os/file.go:95 +0x83\nbytes.(*Buffer).ReadFrom(0xf84080fae0, 0xf840104600, 0xf8401d4b78, 0x0, 0x0, ...)\n/Users/jonathanpittman/go/src/pkg/bytes/buffer.go:153 +0x199\nio.Copy(0xf84013dba0, 0xf84080fae0, 0xf840104600, 0xf8401d4b78, 0x0, ...)\n/Users/jonathanpittman/go/src/pkg/io/io.go:340 +0xc2\nos/exec._func_003(0xf84019b050, 0xf8401d4b70, 0x78133, 0x1c1888, 0x445ab, ...)\n/Users/jonathanpittman/go/src/pkg/os/exec/exec.go:201 +0x5a\nos/exec._func_004(0xf8401d4b50, 0xf840264900, 0x0, 0x0)\n/Users/jonathanpittman/go/src/pkg/os/exec/exec.go:260 +0x1e\ncreated by os/exec.(*Cmd).Start\n/Users/jonathanpittman/go/src/pkg/os/exec/exec.go:261 +0x65e\ngo build fmt: exit status 2\n\nand a few lines further down it had...\n\nFAIL fmt [build failed]\n\nI ran all.bash again, but could not reproduce the problem.  Everything built and tested\nfine.  Thought I would mention it in case it comes up again or is related to some\nobscure bug.\n\nOn Fri, Apr 27, 2012 at 5:19 AM, Peter Kleiweg \u0026lt;pkleiweg@xs4all.nl\u0026gt; wrote:\n\u0026gt;\n\u0026gt; Will there be a release 'weekly' with these changes? I am using some\n\u0026gt; of the experimental packages, but would also like to have the updates\n\u0026gt; from go1.0.1.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Suggested"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2014-12-08T10:18:52Z",
	"created_at": "2012-05-01T03:23:55Z",
	"updated_at": "2016-06-24T22:18:31Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
