{
	"id": 51276678,
	"number": 587,
	"state": "closed",
	"title": "Format of number in const declaration causes deadlock",
	"body": "by **marius@vastech.co.za**:\n\n\u003cpre\u003eI have found a strange problem where the format in which a number constant is declared\ncauses \ndeadlock. The same program runs fine with:\n\nconst nUM_SERVERS = 10 // works\n\nbut crashes with:\n\nconst nUM_SERVERS = 1e1 // causes deadlock\n\nThe same happens for numbers of any size, even for:\n\nconst nUM_SERVERS = 1e0 // causes deadlock\n\nand \n\nconst nUM_SERVERS = 1e6 // causes deadlock\n\nThis const is used in only place in the program:\n\nvar svrCh [nUM_SERVERS]chan int\n\nThe same problem occurs when the relevant literals are used in the var declaration.\n\nThe full test program is attached below. \n\n\u0026gt; hg identify\n7a249afa5ed3 tip\n\nGOARCH=amd64\nGOOS=darwin\n\nTo reproduce the problem:\n\nComment the nUM_SERVERS declaration at the top of the program as follows:\n\n/*const nUM_SERVERS = 10 // works*/\nconst nUM_SERVERS = 1e1 // causes deadlock\n\nCompile and run:\n6g tstGo.go; 6l tstGo.6; ./6.out\n\nI expect something like the following output:\n\nstart of output\u0026gt;\n\nsetup complete in  0.000111 s\n1000 msgs sent in  0.004202 s\n\n\u0026lt;end of output\n\nThe output above was generated by the following constant declaration configuration:\n\nconst nUM_SERVERS = 10 // works\n/*const nUM_SERVERS = 1e1 // causes deadlock*/\n\nInstead the following output is generated:\n\nsetup complete in  4.3e-05 s\nthrow: all goroutines are asleep - deadlock!\n\npanic PC=0x2c5068\nthrow+0x3e /Users/marius/local/go/src/pkg/runtime/runtime.c:74\n\tthrow(0x52cc3, 0x0)\nnextgandunlock+0x15a /Users/marius/local/go/src/pkg/runtime/proc.c:344\n\tnextgandunlock()\nscheduler+0xe0 /Users/marius/local/go/src/pkg/runtime/proc.c:509\n\tscheduler()\nmstart+0x47 /Users/marius/local/go/src/pkg/runtime/proc.c:400\n\tmstart()\nbsdthread_start+0x14 /Users/marius/local/go/src/pkg/runtime/darwin/amd64/sys.s:148\n\tbsdthread_start()\n\ngoroutine 2 [4]:\ngosched+0x4e /Users/marius/local/go/src/pkg/runtime/proc.c:530\n\tgosched()\nruntime.selectgo+0x3d0 /Users/marius/local/go/src/pkg/runtime/chan.c:792\n\truntime.selectgo(0x29e400, 0x0)\nmain.bank+0xee /Users/marius/nextPrj/gotest/tstGo.go:70\n\tmain.bank(0x2a3180, 0x0, 0x2a31e0, 0x0)\ngoexit /Users/marius/local/go/src/pkg/runtime/proc.c:140\n\tgoexit()\n0x2a3180 unknown pc\n\ngoroutine 1 [4]:\ngosched+0x4e /Users/marius/local/go/src/pkg/runtime/proc.c:530\n\tgosched()\nchanrecv+0x39b /Users/marius/local/go/src/pkg/runtime/chan.c:326\n\tchanrecv(0x2a3240, 0x0, 0x2a5f10, 0x0, 0x0, ...)\nruntime.chanrecv1+0x50 /Users/marius/local/go/src/pkg/runtime/chan.c:423\n\truntime.chanrecv1(0x2a3240, 0x0)\nmain.spray+0x7f /Users/marius/nextPrj/gotest/tstGo.go:35\n\tmain.spray(0x2a3240, 0x0)\nmain.main+0x270 /Users/marius/nextPrj/gotest/tstGo.go:26\n\tmain.main()\nmainstart+0xf /Users/marius/local/go/src/pkg/runtime/amd64/asm.s:54\n\tmainstart()\ngoexit /Users/marius/local/go/src/pkg/runtime/proc.c:140\n\tgoexit()\n\n\nThe full test program follows:\ntstGo.go:\n-------------------------------\n\npackage main\n\nimport(\n\t\u0026quot;fmt\u0026quot;\n\t\u0026quot;time\u0026quot;\n)\n\n/*const nUM_SERVERS = 10 // works*/\nconst nUM_SERVERS = 1e1 // causes deadlock\n\nconst nUM_MSGS = 1e3\nconst cREDIT = 30\nvar svrCh [nUM_SERVERS]chan int\n\nfunc main() {\n\tstartTime := time.Nanoseconds()\n\tbankReqCh := make(chan *reqCredit)\n\tbankRelCh := make(chan int)\n\tgo bank(bankReqCh, bankRelCh)\n\trespCh := make(chan int)\n\tfor i := 0; i \u0026lt; len(svrCh); i++ {\n\t\tsvrCh[i] = make(chan int)\n\t\tgo svr(i, svrCh[i], respCh, bankReqCh, bankRelCh)\n\t}\n\tfmt.Println(\u0026quot;setup complete in \u0026quot;, float64(time.Nanoseconds()-startTime)/1.0e9, \u0026quot;s\u0026quot;)\n\tspray(respCh)\n}\n\nfunc spray(respCh chan int) {\n\tstartTime := time.Nanoseconds()\n\tfor i := 0; i \u0026lt; len(svrCh); i++ {\n\t\tsvrCh[i] \u0026lt;- 1\n\t}\n\tfor numMsgs := 0; numMsgs \u0026lt; nUM_MSGS; {\n\t\tsvr := \u0026lt;- respCh\n\t\tnumMsgs++\n\t\tsvrCh[svr] \u0026lt;- 1\n\t}\n\tfmt.Println(nUM_MSGS, \u0026quot;msgs sent in \u0026quot;, float64(time.Nanoseconds()-startTime)/1.0e9, \u0026quot;s\u0026quot;)\n}\n\nfunc svr(id int, clientReq chan int, clientRsp chan int, bankReq chan *reqCredit,\nbankRel chan int) \n{\n\treply := make(chan int)\n\treq := reqCredit{reply, 1}\n\n\tfor {\n\t\t\u0026lt;- clientReq\n\t\tbankReq \u0026lt;- \u0026amp;req\n\t\tcredit := \u0026lt;- reply\n\t\tbankRel \u0026lt;- credit\n\t\tclientRsp \u0026lt;- id\n\t}\n}\n\ntype reqCredit struct {\n\treplyTo chan int\n\tcredit\tint\n}\n\nfunc bank(request chan *reqCredit, release chan int) {\n\tcredit := cREDIT\n\tfor {\n\t\tif credit \u0026gt; 0 {\n\t\t\tselect {\n\t\t\t\tcase req := \u0026lt;- request:\n\t\t\t\t\tcredit -= req.credit\n\t\t\t\t\treq.replyTo \u0026lt;- req.credit\n\t\t\t\tcase c := \u0026lt;- release:\n\t\t\t\t\tcredit += c\n\t\t\t}\n\t\t}else{\n\t\t\tc := \u0026lt;- release\n\t\t\tcredit += c\n\t\t}\n\t}\n}\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2014-12-08T10:05:08Z",
	"created_at": "2010-02-04T16:11:40Z",
	"updated_at": "2016-06-24T19:13:34Z"
}
