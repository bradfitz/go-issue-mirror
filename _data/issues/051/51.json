{
	"id": 51275985,
	"number": 51,
	"state": "closed",
	"title": "On uniprocessor darwin machine, major performance hit for GOMAXPROCS \u003e 1",
	"body": "by **consalus**:\n\n\u003cpre\u003e(on darwin 386)\n\nI created a simple test program (attached) to compare the cost of\nenumerating integers with a channel and a generating goroutine to the old\nfashioned loop way.\n\nHowever, I noticed that the version that uses the channel\n\n(invoke with 8.out -max 1000000 -method 0)\n\ncan be an order of magnitude slower with GOMAXPROCS \u0026gt; 1.\n\nIt consistently takes 0.200s or so with GOMAXPROCS=1,\nbut with GOMAXPROCS=2, it is often as much as 5s, but sometimes as low as\n0.3s.\n\nThis isn't a terrible thing, since I shouldn't be setting GOMAXPROCS \u0026gt; 1 on\na uniprocessor machine, but I wouldn't expect the performance impact to be\nso variable or significant.\n\n\n\nWhat is the expected output? What do you see instead?\n\nI'd expect a lesser and more consistent performance hit.\n\nWhat is your $GOOS?  $GOARCH?\n\ndarwin 386\n\nWhich revision are you sync'ed to?  (hg log -l 1)\n\nchangeset:   3977:a522a4541e0e\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/51/0/try.go\"\u003etry.go\u003c/a\u003e (742 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:03:02Z",
	"created_at": "2009-11-11T17:51:07Z",
	"updated_at": "2016-06-24T19:00:04Z"
}
