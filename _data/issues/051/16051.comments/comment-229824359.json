{
	"id": 229824359,
	"body": "A C function that took 30ns is, optimistically, at most 50 machine\ninstructions, assuming the code cache is hot and the code in question\nperforms only memory accesses that are already in the L1 data cache.\n\nWhat work can realistically be done in that few number of cycles that\ncannot be rewritten in Go?\n\nOn Fri, 1 Jul 2016, 10:15 Daniel Eloff \u003cnotifications@github.com\u003e wrote:\n\n\u003e I'll grant that, but I'm still not content to leave that much performance\n\u003e on the floor. I'm going to try the race detector C calling approach and see\n\u003e how much of a difference it makes in my use case. I'll report back in a\n\u003e couple weeks with some numbers hopefully.\n\u003e\n\u003e A faster CGO mechanism allows calling C functions that do less work. e.g.\n\u003e if the C function takes 200ns and we speed up the CGO mechanism to 30ns\n\u003e (which seems to have been true in past Go versions), then the total calling\n\u003e time for that function goes from 400 to 230ns, almost twice as fast. If the\n\u003e C function itself takes 30ns, then it goes from 230ns to 60ns, which is a\n\u003e four fold improvement. That opens up more options when designing APIs.\n\u003e\n\u003e I just spent two days implementing a function in assembly in Go because it\n\u003e needed popcnt, prefetch, and bsr. It could have been implemented in two\n\u003e hours in C, but the CGO overhead makes it a non-starter. In other places I\n\u003e duplicate code between C and Go (using very unidiomatic Go with lots of\n\u003e unsafe) to avoid the CGO overhead.\n\u003e\n\u003e â€”\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/16051#issuecomment-229823348\u003e, or mute\n\u003e the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe/AAAcA864gdwx_X3mtM1OEZFUon2m5hBaks5qRFwogaJpZM4I0hlW\u003e\n\u003e .\n\u003e\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-01T00:22:54Z",
	"updated_at": "2016-07-01T00:22:54Z"
}
