{
	"id": 66068055,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eThinking about alternatives, the following would work for my Join example:\n\n// Join joins the elements yielded by next using sep, formatting each element of a as %v\nwould.\nfunc Join(sep string, next func() (interface{}, bool)) string\n\ntimes := []time.Time{ t1, t2, t3 }\nvar i int\ns := Join(\",\", func() (interface{}, bool) {\n  if i \u0026lt; len(times) {\n    t := times[i]\n    i++\n    return t, true\n  }\n  return nil, false\n})\n\nOr, if we assume indexed access:\nfunc Join(sep string, at func(i int) (interface{}, bool)) string\n\ntimes := []time.Time{ t1, t2, t3 }\ns := Join(\",\", func(i int) (interface{}, bool) {\n  if i \u0026lt; len(times) {\n    return times[i], true\n  }\n  return nil, false\n})\n\nThis is probably more efficient than what I proposed in this issue, since it avoids\nallocating a new slice.\u003c/pre\u003e",
	"user": {
		"login": "Sajmani",
		"id": 9734877,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-08-16T17:42:51Z",
	"updated_at": "2014-12-22T06:15:55Z"
}
