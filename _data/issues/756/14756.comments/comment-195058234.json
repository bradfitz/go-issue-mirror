{
	"id": 195058234,
	"body": "Hi @bradfitz,\r\n\r\nSo a profile would be appended to to the `json` bit of a `json` tag for a struct field. For example:\r\n\r\n```\r\ntype Person struct {\r\n    Password `json:\"-\" json.secure:\"password\"`\r\n}\r\n```\r\n\r\nI think the above enhancement to JSON tags is fairly straight-forward and simple. It doesn't offer breaking changes; only additive ones.\r\n\r\nA profile simply notes a secondary, tertiary, etc. means of describing the JSON tag behavior depending upon the active profile(s) when marshaling types. \r\n\r\nRegarding the use of the Marshaler interface, that's a very good point. I actually [do use that](https://github.com/akutz/goof/blob/master/goof.go#L277) when it's appropriate, but the use case I'm suggesting with this proposal is different.\r\n\r\nObviously one big difference between Go and a language like Java or C# is the absence of threads (in a meaningful manner for 99% of basic development). This of course means the absence of things like [Thread Locals](https://msdn.microsoft.com/en-us/library/dd642243(v=vs.110).aspx) and [DI Thread Scopes](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/SimpleThreadScope.html). Additionally this means it's difficult to know from a runtime perspective the provenance/context of a call by the time the type's `MarshalJSON` function is invoked. \r\n\r\nSide note, if `MarshalJSON` would provide the [`context.Context` parameter](https://blog.golang.org/context), I wouldn't be filing this proposal.\r\n\r\nHowever, because there's no context for the `MarshalJSON` function, there's no standard manner to imply a context externally or consume a context from within that function. At best you could define some meaningful switch/flag/context field on each type related to the issue. That would, though, require either:\r\n\r\n1. Manually marshaling the type to JSON since you cannot call `MarshalJSON` on a type from within its implementation of the `MarshalJSON` function without getting a recursive loop, or\r\n2. Using reflection to first iterate over the type's exported fields and put them into a `map[string]interface{}` and then use `json.Marshal` to marshal the map instead of the type (after applying the logic associated with profiles with respect to the tags of course).\r\n\r\nI do something similar to No. 2 above in the [Golf package](https://github.com/akutz/golf/blob/master/golf.go#L139) where I defined a tag to compliment `json` called `golf` for purposes similar to this proposal for profiles. However, the issue is that all packages that wish to afford themselves of Golf must first import Golf at the point at which a type is marshaled. \r\n\r\nThis proposal would enable an across-the-board, consistent manner to influence when individual fields are marshaled using `encoding/json` based on an extension to the `json` tag specification as well as enabling profiles for the `encoding/json` package and/or invoking a `Marshal` variant with an explicit profile.",
	"user": {
		"login": "akutz",
		"id": 101085,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-10T21:31:14Z",
	"updated_at": "2016-03-10T21:35:44Z"
}
