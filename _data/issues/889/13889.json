{
	"id": 125764396,
	"number": 13889,
	"state": "closed",
	"title": "proposal: bytes, strings: add ReadBytes(byte) ([]byte, error), ReadString(byte) (string, error) to Reader",
	"body": "One of the use-cases of `byte.Reader` is parsing a binary format.\r\nThere are some formats use an unpredictable length structure such as NUL-terminated string.\r\nUnfortunately, current API set doesn't treat  it well. \r\n\r\nFor example:\r\n```\r\nbr := byte.NewReader(data)\r\n\r\nfunc decodeCString(br *bytes.Reader, data []byte) string {\r\n  rest := data[br.Size()-br.Len():]\r\n\r\n  i := bytes.IndexByte(rest, 0x0)\r\n  if i == -1 {\r\n    panic(\"invalid\")\r\n  }\r\n\r\n  br.Seek(i+1, 1)\r\n\r\n  return string(rest[:i])\r\n}\r\n```\r\n\r\nI think `decodeCString` has 2 problems.\r\n\r\n1. it still need to keep `data` variable.\r\n2. it manually update internal state by `.Size`, `.Len` and `.Seek`.\r\n\r\nI want to write it like this:\r\n```\r\nfunc decodeCString(br *bytes.Reader) string {\r\n  bs, err := br.ReadBytes(0x0)\r\n  if err != nil {\r\n    panic(\"invalid\")\r\n  }\r\n\r\n  return string(bs[:len(bs)-1])\r\n}\r\n```\r\n\r\nI know some people prefer `bytes.Buffer` because of convenience, even if data is read only.\r\nI want to discourage such a situation.\r\n\r\nSame things are also applicable to `strings.Reader`.\r\n\r\nThank you.\r\n\r\nhiro",
	"user": {
		"login": "hirochachacha",
		"id": 898442,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2016-01-15T15:03:05Z",
	"created_at": "2016-01-09T15:18:32Z",
	"updated_at": "2016-01-15T15:03:05Z"
}
