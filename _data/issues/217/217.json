{
	"id": 51276192,
	"number": 217,
	"state": "closed",
	"title": "Goroutine launching should return a completion channel",
	"body": "\u003cpre\u003eHere's an idea I've been stewing over: have 'go f()' return a channel\nthat will be written to when the goroutine finishes.\n\nThe typical use case for a goroutine that does something that you want\nto block on is this:\n\nfunc DoSomething(done chan \u0026lt;- int) {\n  // do some processing...\n  done \u0026lt;- 1;\n}\n\nfunc main() {\n  done := make(chan int, 1);\n  go DoSomething(done);\n  // do something else\n  \u0026lt;-done;  // wait\n  // do more things\n}\n\nIf the return value of 'go f()' was a channel, this would simplify to:\n\nfunc DoSomething() {\n  // do some processing...\n}\n\nfunc main() {\n  somethingIsDone := go DoSomething();\n  // do something else\n  \u0026lt;-somethingIsDone;\n  // do more things\n}\n\nObviously this doesn't permit any new functionality, and so is not\nstrictly necessary, but it does make a common idiom significantly\nsimpler. Existing code would work exactly as it does now, and it means\nthat functions don't need to be augmented with goroutine-awareness to\nbe used in this fashion (e.g. library functions where you don't care\nabout the return value).\u003c/pre\u003e",
	"user": {
		"login": "dsymonds",
		"id": 31506,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "LanguageChange"
		}
	],
	"comments": 12,
	"closed_at": "2014-12-08T10:03:41Z",
	"created_at": "2009-11-16T04:18:07Z",
	"updated_at": "2016-06-24T19:05:05Z"
}
