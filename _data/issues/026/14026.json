{
	"id": 127592704,
	"number": 14026,
	"state": "closed",
	"title": "x/exp/shiny: x11driver makes it impossible to implement screen.Buffer",
	"body": "I have a type (a graphical widget) that implements screen.Buffer, which I've been using happily with gldriver, under darwin. The documentation is [here](https://godoc.org/sigint.ca/graphics/editor), and there is an example program sigint.ca/graphics/editor/example/multi if you are interested. \r\n\r\nThe widget is implemented as a type Editor which implements screen.Buffer, and is drawn to a shiny window as follows:\r\n```go\r\nwidget := editor.NewEditor(size, font, nil)\r\n...\r\nwin.Upload(image.ZP, widget, widget.Bounds())\r\n```\r\n\r\nHowever, when I tested my code on linux recently, I quickly ran into a problem:\r\n\r\n```go\r\nfunc (w *windowImpl) Upload(dp image.Point, src screen.Buffer, sr image.Rectangle) {\r\n\tsrc.(*bufferImpl).upload(w, xproto.Drawable(w.xw), w.xg, w.s.xsi.RootDepth, dp, sr)\r\n}\r\n```\r\n\r\nUnlike gldriver, methods implemented by x11driver assume that any screen.Buffer, screen.Texture, etc. passed to them are the implementations provided by x11driver, and panic when they are not.\r\n\r\nIs this restriction necessary? Should I rethink my strategy? Why provide an interface if it's not allowed to be implemented?",
	"user": {
		"login": "jnjackins",
		"id": 449232,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2016-01-21T02:52:33Z",
	"created_at": "2016-01-20T02:52:56Z",
	"updated_at": "2016-01-21T05:00:20Z"
}
