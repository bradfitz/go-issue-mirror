{
	"id": 221983429,
	"body": "By client side I'm assuming we are talking about end to end, which is what matters. I'm also assuming the trace is from the server and the numbers are in ms.\r\n\r\nFrom the gctrace I notice this line \r\n\r\ngc 17 @5.964s 10%: 0+0+235 ms clock, 0+275/166/108+942 ms cpu, 456-\u003e456-\u003e283 MB, 456 MB goal, 4 P (forced)\r\n\r\nindicating a 235ms STW pause. The \"(forced)\" annotation means that GC 17 is the result of a call to runtime.GC() which does a STW collection instead of a concurrent GC. Removing the runtime.GC() call from server code will eliminate that STW pause which may be the problem. If the client pauses could be matched with the server GC pauses that would help confirm it is a GC issue. It says \"Ready\" just before the call to runtime.GC(), what does that mean? \r\n\r\nFrom the trace it also looks like the code spends 5 seconds populating the in-(go)heap database. This can be deduced by looking at the heap sizes which reach 456MB at GC 17 and then the server goes into a steady state where no GC activity happens between 5.96 seconds and 34 .93 seconds. \r\n\r\nLet us know if removing the runtime.GC() call helps and if the client pauses are coordinated with the server GC times. Finally if it is easy to calculate 95, 99 and 99.9 percentiles on the client that would also be interesting.\r\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-26T20:22:11Z",
	"updated_at": "2016-05-26T20:22:11Z"
}
