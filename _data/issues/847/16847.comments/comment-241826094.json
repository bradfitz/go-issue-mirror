{
	"id": 241826094,
	"body": "When I use google-api-go-client's SetOpaque function,\r\n\r\n```go\r\nfunc SetOpaque(u *url.URL) {\r\n        u.Opaque = \"//\" + u.Host + u.Path\r\n}\r\n```\r\n\r\non,\r\n\r\n```go\r\n        req, _ := http.NewRequest(\"GET\", \"https://www.google.com/humans.txt\", nil)\r\n        SetOpaque(req.URL)\r\n```\r\n\r\nWhat happens is that http2 package uses `req.URL.RequestURI()` to generate the `:path` and that generates the string \"https://www.google.com/humans.txt\".\r\n\r\nGoogle GFE surprisingly accepts that:\r\n\r\n```\r\n2016/08/23 18:12:12 http2: Transport encoding header \":authority\" = \"www.google.com\"\r\n2016/08/23 18:12:12 http2: Transport encoding header \":method\" = \"GET\"\r\n2016/08/23 18:12:12 http2: Transport encoding header \":path\" = \"https://www.google.com/humans.txt\"\r\n2016/08/23 18:12:12 http2: Transport encoding header \":scheme\" = \"https\"\r\n```\r\n\r\n... no clue why. Maybe for compatibility for broken people like us. I'll ask.\r\n\r\nSo @buro9, what issue are you talking about? google-api-go-client seems to work. Or are you using it against non-Google hosts for things like go-endpoints?",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-23T18:20:03Z",
	"updated_at": "2016-08-23T18:20:03Z"
}
