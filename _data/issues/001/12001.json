{
	"id": 98819362,
	"number": 12001,
	"state": "open",
	"title": "encoding/json: Marshaler/Unmarshaler not stream friendly",
	"body": "The Marshaler/Unmarshaler interface deals with whole []byte slices:\r\n\r\n```go\r\ntype Marshaler interface {\r\n        MarshalJSON() ([]byte, error)\r\n}\r\ntype Unmarshaler interface {\r\n        UnmarshalJSON([]byte) error\r\n}\r\n```\r\n\r\nIf you're dealing with a type that encodes to an array that has a large number of objects inside you have to encode all of into a single []byte.\r\n\r\nThe encoding/xml package is, unlike encoding/json, stream friendly:\r\n\r\n```go\r\ntype Marshaler interface {\r\n        MarshalXML(e *Encoder, start StartElement) error\r\n}\r\ntype Unmarshaler interface {\r\n        UnmarshalXML(d *Decoder, start StartElement) error\r\n}\r\n```\r\n\r\nWith MarshalXML you can call e.Encode/e.EncodeElement/e.EncodeToken.\r\n\r\nSince encoding/json is gaining Token()/EncodeToken() methods it would be really helpful to have a Marshaler/Unmarshaler interface that can take advantage of that. Perhaps something along the lines of:\r\n\r\n```go\r\ntype Encoder interface {\r\n        EncodeJSON(e *Encoder) error\r\n}\r\ntype Decoder interface {\r\n        DecodeJSON(d *Decoder) error\r\n}\r\n```\r\n\r\nSince Marshaler/Unmarshaler can't be changed. Or something like:\r\n\r\n```go\r\ntype Marshaler2 interface {\r\n        MarshalJSON(e *Encoder) error\r\n}\r\ntype Unmarshaler2 interface {\r\n        UnmarshalJSON(d *Decoder) error\r\n}\r\n```",
	"user": {
		"login": "lukescott",
		"id": 486224,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"created_at": "2015-08-03T19:14:17Z",
	"updated_at": "2015-10-30T13:08:02Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
