{
	"id": 76052036,
	"body": "I am not disputing that there is a race. What I am suggesting is fixing\nthis race gives the illusion that concurrent read/close works, and POSIX\ndoesn't guarantee this.\n\nOn Thu, Feb 26, 2015 at 7:41 AM, Alvaro Lopez Ortega \u003c\nnotifications@github.com\u003e wrote:\n\n\u003e Imagine the following three events happening one after the other:\n\u003e\n\u003e 1. f1.Close()\n\u003e 2. f2 = os.Open()  // Same file descriptor could well be reused\n\u003e 3. f1.Read()\n\u003e\n\u003e In that case, the call to f1.Read() would actually be reading from an\n\u003e invalid file descriptor. Setting the internal .fd property to -1 prevents\n\u003e that situation.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/10001#issuecomment-76051817\u003e.\n\u003e\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-25T20:42:59Z",
	"updated_at": "2015-02-25T20:42:59Z"
}
