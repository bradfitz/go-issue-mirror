{
	"id": 217575395,
	"body": "Ha, OK: background then. I'm using GopherJS to [transpile some projects to JS](https://github.com/cathalgarvey/go-freeboard) for a dashboard. While this is the sort of case where large JS files are OK, because it's a long-running browser App and load-times are OK, I noticed that the binaries were huge.\r\n\r\nTwo obvious culprits were `net/http`, which was pulling in transpilations of the entire TLS stack, and `fmt`, which has a reputation for being large.\r\n\r\nSo, while Go binaries being large is generally simply taken as a fact of life in `go build` land, over in `gopherjs build` land it's another story, because 3.5M JS libraries are essentially useless unless the comprise the whole core product.\r\n\r\n..hence my recent crusade to try and reduce the use of `fmt.Errorf` when `errors` would suffice. I don't yet know that to be the case in `encoding/json`, because at least here the `f` part of `Errorf` appears to be leveraged, as is the de-interfacing powers of `fmt`.",
	"user": {
		"login": "cathalgarvey",
		"id": 1167837,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-06T22:11:22Z",
	"updated_at": "2016-05-06T22:11:22Z"
}
