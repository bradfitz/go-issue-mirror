{
	"id": 171890190,
	"number": 16787,
	"state": "closed",
	"title": "io/ioutil hangs with too big output from os/exec stderr and stdout pipes ",
	"body": "**What version of Go are you using (`go version`)?**\r\n* 1.6.2\r\n* 1.6.3\r\n* 1.7\r\n\r\n**What operating system and processor architecture are you using (`go env`)?**\r\n\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/usr/src/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build726085245=/tmp/go-build -gno-record-gcc-switches\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n**What did you do?**\r\n\r\nLet's use exec.Command to catch both stdout and stderr.\r\nOne of the pipes gets around 82855 chars ( magic number is between 65536 - 131072 ). Now ioutil.ReadAll will hang if I try to read from the second pipe before the first one ( full one ). \r\n\r\nHere is the simplified example that only cat a file. \r\nOriginal code was checking error and there is none of them there: \r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"io/ioutil\"\r\n    \"os/exec\"\r\n)\r\n\r\nfunc main() {\r\n    cmd := exec.Command(\"cat\", \"file\")\r\n    stdout, _ := cmd.StdoutPipe()\r\n    stderr, _ := cmd.StderrPipe()\r\n    cmd.Start()\r\n    be, _ := ioutil.ReadAll(stderr)\r\n    bo, _ := ioutil.ReadAll(stdout)\r\n\r\n    cmd.Wait()\r\n    fmt.Printf(\"%d be size \\n\", len(be))\r\n    fmt.Printf(\"%d bo size \\n\", len(bo))\r\n}\r\n```\r\n\r\nIf order of ReadAll would be opposite, this example will run correctly.\r\n\r\n*What did you expect to see?*\r\nError or information in docs that those pipes should be handled differently.\r\n\r\n*What did you see instead?*\r\nBinary never exits.\r\n\r\nStrace : \r\n```\r\n[pid 18746] select(0, NULL, NULL, NULL, {0, 20}) = 0 (Timeout)\r\n[pid 18746] select(0, NULL, NULL, NULL, {0, 20}) = 0 (Timeout)\r\n[pid 18746] select(0, NULL, NULL, NULL, {0, 20}) = 0 (Timeout)\r\n[pid 18746] select(0, NULL, NULL, NULL, {0, 20}) = 0 (Timeout)\r\n[pid 18746] futex(0xc420056110, FUTEX_WAKE, 1 \u003cunfinished ...\u003e\r\n[pid 18750] \u003c... futex resumed\u003e )       = 0\r\n[pid 18746] \u003c... futex resumed\u003e )       = 1\r\n[pid 18750] futex(0xc420056110, FUTEX_WAIT, 0, NULL \u003cunfinished ...\u003e\r\n[pid 18746] select(0, NULL, NULL, NULL, {0, 20}) = 0 (Timeout)\r\n[pid 18746] futex(0x53fc98, FUTEX_WAIT, 0, {60, 0}\r\n\r\n) = -1 ETIMEDOUT (Connection timed out)\r\n[pid 18746] select(0, NULL, NULL, NULL, {0, 20}) = 0 (Timeout)\r\n[pid 18746] futex(0x53fc98, FUTEX_WAIT, 0, {60, 0}\r\n```\r\n\r\nStack: \r\n```\r\ngoroutine 1 [syscall, locked to thread]:\r\nsyscall.Syscall(0x0, 0x6, 0xc829b06000, 0x200, 0x0, 0xc82685daa0, 0x60)\r\n\t/usr/local/go/src/syscall/asm_linux_amd64.s:18 +0x5\r\nsyscall.read(0x6, 0xc829b06000, 0x200, 0x200, 0xc829b06200, 0x0, 0x0)\r\n\t/usr/local/go/src/syscall/zsyscall_linux_amd64.go:783 +0x5f\r\nsyscall.Read(0x6, 0xc829b06000, 0x200, 0x200, 0xc829b06000, 0x0, 0x0)\r\n\t/usr/local/go/src/syscall/syscall_unix.go:161 +0x4d\r\nos.(*File).read(0xc82a0faac8, 0xc829b06000, 0x200, 0x200, 0x7f4700000001, 0x0, 0x0)\r\n\t/usr/local/go/src/os/file_unix.go:228 +0x53\r\nos.(*File).Read(0xc82a0faac8, 0xc829b06000, 0x200, 0x200, 0x200, 0x0, 0x0)\r\n\t/usr/local/go/src/os/file.go:95 +0x8a\r\nbytes.(*Buffer).ReadFrom(0xc82026e8a0, 0x7f47d95dc1f8, 0xc82a0faac8, 0x0, 0x0, 0x0)\r\n\t/usr/local/go/src/bytes/buffer.go:176 +0x23f\r\nio/ioutil.readAll(0x7f47d95dc1f8, 0xc82a0faac8, 0x200, 0x0, 0x0, 0x0, 0x0, 0x0)\r\n\t/usr/local/go/src/io/ioutil/ioutil.go:33 +0x156\r\nio/ioutil.ReadAll(0x7f47d95dc1f8, 0xc82a0faac8, 0x0, 0x0, 0x0, 0x0, 0x0)\r\n\t/usr/local/go/src/io/ioutil/ioutil.go:42 +0x51\r\n```\r\n",
	"user": {
		"login": "marek-polewski",
		"id": 8818674,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-08-18T13:23:51Z",
	"created_at": "2016-08-18T12:34:04Z",
	"updated_at": "2016-08-18T13:23:51Z"
}
