{
	"id": 66054507,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eMaybe, the amount of real time (note: not the CPU time) consumed by the stop-the-world\naction could be lowered by unmapping (the 'munmap' system call in Linux) the stacks of\nall OS threads except the stack of the OS thread (=X) which was the 1st one to enter the\nstop-the-world function. Ys=[all threads except X]. Since Ys will most likely try to use\nthe stack in a very short time (for example, via the ESP register on i386), it will\ntrigger a page fault in them. The sole purpose of these page faults is to \"stop\" Ys from\nthread X as soon as possible.\n\nNote: the \"stop\" is in parentheses because it could also be implemented by a C for-loop\nwhich is started as a consequence of making the page fault.\n\nI wonder what would be the actual performance of this in Linux.\n\nThe GNU debugger (gdb) would be confused by this. Maybe, this can be partially solved by\nthe Go program having a special boolean variable for controlling whether to use the\ncurrent stop-the-world implementation or the page-faulting stop-the-world implementation.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-03-05T08:27:23Z",
	"updated_at": "2014-12-08T10:08:35Z"
}
