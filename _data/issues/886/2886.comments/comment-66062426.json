{
	"id": 66062426,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eThe Content-Type sniffing was always intended as a \"do the right thing\" default\nmechanism so the most common situations would not require explicit effort from the\nprogrammer to get the correct HTTP behaviour. In that sense, using the first 512 bytes\nof the response for sniffing HEAD follows that.\n\nOn the other hand, HEAD is explicitly meant to be a lightweight GET for finding the\nmetadata about an object without transferring the object. Note that the RFC only says\nthe HEAD response headers SHOULD (not \"MUST\") be the same as for GET, so there's no\nrequirement for Content-Type to be present for a HEAD request. Further, the whole point\nof sniffing to auto-set a Content-Type for a GET is to help ensure that HTTP clients\n(mostly browsers) behave correctly and don't do their own sniffing; a HEAD response has\nno such concerns since, by definition, there is no body for an HTTP client to sniff and\nmisinterpret. In this sense sniffing for HEAD does not seem necessary or important.\n\nNote that there is *nothing* that precludes an HTTP handler from explicitly setting\nContent-Type, nor explictly handling HEAD differently from GET. In other words, for\nthose who particularly care there is already a way to do it. The question of this bug is\nwhether to try to do it automatically for simplistic handlers, namely those that just\nstart writing to their http.ResponseWriter.\n\nMy inclination would be that HEAD is meant to be more lightweight than GET, and there's\nno need to sniff. The one thing that would really sway me is an answer to this question:\nWhat HTTP clients particularly care about the Content-Type in a HEAD response?\u003c/pre\u003e",
	"user": {
		"login": "dsymonds",
		"id": 31506,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-01-12T23:46:56Z",
	"updated_at": "2014-12-08T10:15:11Z"
}
