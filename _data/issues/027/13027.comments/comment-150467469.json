{
	"id": 150467469,
	"body": "Sorry for being brief. This has come up before. I'll expand on some of my thoughts about this:\r\n\r\n- The obvious way to implement something like this is to recognize an `Iterable` interface (or similar), and allow types to implement that interface to be used with range.\r\n- In Go the only way toÂ execute code is with a function call. There is no operator overloading, no subtype inheritance, no generators (what you're asking for), etc. This means to read Go code you just follow the function calls; you needn't look at a piece of code and wonder whether it is executing some code somewhere else. If there's a function call then you can follow execution into a function. If there isn't, you can keep reading down the page. This property improves readability, and one of Go's key design objectives is readability.\r\n- The language doesn't treat any interfaces specially. The only interface recognized by the spec is `error`, but that exists as a built in convention and nothing more. The introduction of `Iterable` would establish a new precedent. We are now 6 major releases into Go 1, and it is unlikely we will make such a dramatic change at this point.\r\n",
	"user": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-23T04:30:21Z",
	"updated_at": "2015-10-23T04:30:21Z"
}
