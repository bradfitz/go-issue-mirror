{
	"id": 66083310,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9:\n\n\u003cpre\u003eLeaving it as is results in easy to reason behaviour and avoids overcomplicated edge\ncases, as can be seen by the mkdir example above.\n\nI tested some other libraries handling of URIs/URLs (on Mac OS X 10.9)\n\nPython 2 and 3\n    \u003e\u003e\u003e urlparse('http:///C:/Directory/')\n    ParseResult(scheme='http', netloc='', path='/C:/Directory/', params='', query='', fragment='')\n    \u003e\u003e\u003e urlparse('http:///Directory/')\n    ParseResult(scheme='http', netloc='', path='/Directory/', params='', query='', fragment='')\n    \u003e\u003e\u003e urlparse('\u003ca href=\"http://www.google.com/\"\u003ehttp://www.google.com/\u003c/a\u003e')\n    ParseResult(scheme='http', netloc='www.google.com', path='/', params='', query='', fragment='')\n\nNode.JS 0.10.26\n    \u003e url.parse('file:///C:/Directory/').pathname\n    '/C:/Directory/'\n    \u003e url.parse('http:///Directory/').pathname\n    '/Directory/'\n    \u003e url.parse('\u003ca href=\"http://www.google.com/\"\u003ehttp://www.google.com/\u003c/a\u003e').pathname\n    '/'\n\nJava 1.6.0 (java.net.URL and getPath())\n    URL(\"file:///C:/Directory/\");   // =\u003e /C:/Directory/\n    URL(\"file:///Directory/\");      // =\u003e /Directory/\n    URL(\"\u003ca href=\"http://www.google.com/\"\u003ehttp://www.google.com/\u003c/a\u003e\");  // =\u003e /\n\nMono 3.2.7 (System.Uri and AbsolutePath)\n    uri = new Uri(\"file:///C:/Directory/\");   // =\u003e C:/Directory/\n    uri = new Uri(\"file:///Directory/\");      // =\u003e /Directory/\n    uri = new Uri(\"\u003ca href=\"http://www.google.com/\"\u003ehttp://www.google.com/\u003c/a\u003e\");  // =\u003e /\n\nOf these, only Mono (.Net in general?) will parse the URI differently, removing the\nleading '/'' infront of a drive letter.\n\nGiven this and reading RFC3986 for Generic syntax for URI\n(\u003ca href=\"http://tools.ietf.org/html/rfc3986)\"\u003ehttp://tools.ietf.org/html/rfc3986)\u003c/a\u003e, it is best to just treat the path as Go currently\ndoes. In addition, reading the file-scheme RFC draft\n(\u003ca href=\"http://www.ietf.org/id/draft-kerwin-file-scheme\"\u003ehttp://www.ietf.org/id/draft-kerwin-file-scheme\u003c/a\u003e or\n\u003ca href=\"https://github.com/phluid61/file-uri-scheme)\"\u003ehttps://github.com/phluid61/file-uri-scheme)\u003c/a\u003e shows how many edge cases there can be if\nwe start treating file-schemes, so it might be hard to draw the line for file-scheme\nPath parsing? Can we just let the Path be the path as specified by RFC 3986 (in decoded\nform as the documentation in net/url states)?\n\nIn my view, the current behaviour matches Go's least-surprise property.\u003c/pre\u003e",
	"user": {
		"login": "mariosnikolaou",
		"id": 828154,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-05T22:52:28Z",
	"updated_at": "2014-12-08T10:33:09Z"
}
