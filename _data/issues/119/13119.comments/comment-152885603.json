{
	"id": 152885603,
	"body": "I don't think this has anything to do with type safety of Go.\nYou're manipulating the objects behind the compiler's back.\n\nActually you don't even need to have two GOPATH to do\nthis. You first build package and c, then change the source\nof package a, rebuild it but keeping the mtime of both source\nand .a file the same as the original one, and finally build b.\n\nThe proposed change also introduces a major problem:\ntwo different builds of the same package will produce\ndifferent buildID, so we lost the ability produce identical\nbinaries given identical inputs: the toolchain is no longer\ndeterministic.\n\nTo really fix the problem without breaking the deterministic\nconstraint is very hard, we basically have to include a hash\nof the source code into the buildID (just hashing the exported\ninterface is not enough, because it's possible to only change\nthe internal implementation of some non-exported functions\nand achieve the same arbitrary memory read).\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-02T01:16:47Z",
	"updated_at": "2015-11-02T01:16:47Z"
}
