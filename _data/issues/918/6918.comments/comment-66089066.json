{
	"id": 66089066,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eAnd just for the reference:\nI did also a lot of benchmarking an profiling a few weeks ago. 2 MySQL drivers are\ncompared in our benchmark suite: \u003ca href=\"https://github.com/go-sql-driver/sql-benchmark\"\u003ehttps://github.com/go-sql-driver/sql-benchmark\u003c/a\u003e\n\nI noticed 2 other things, which could be optimized:\n\nFor each Query a slice of all column names is requested just to determine to number of\ncolumns for the dest slice. It would be better to just ask the driver for the number\ninstead: \u003ca href=\"https://golang.org/cl/17580043/\"\u003ehttps://golang.org/cl/17580043/\u003c/a\u003e (will be mailed when the tree is open\nagain).\n\nThe pooling logic does a lot of insertions in a list, which produces a lot (relatively)\nof garbage: \u003ca href=\"http://files.julienschmidt.com/public/gostuff/exec.mem.new.svg\"\u003ehttp://files.julienschmidt.com/public/gostuff/exec.mem.new.svg\u003c/a\u003e\n\nOne option would be to somehow allow the reuse of list.Elements (\n\u003ca href=\"http://golang.org/pkg/container/list/#Element\"\u003ehttp://golang.org/pkg/container/list/#Element\u003c/a\u003e ) in the list package.\nI'm also experimenting a bit with the pooling logic, separating it from the rest of the\ndatabase/sql package, hoping, that it could be pluggable / exchangeable in a future\nversion (as it was requested before). Currently, this approach does not use \ncontainer/list at all. I'll let you know on the dev mailinglist, if my experiments lead\nto something useful.\u003c/pre\u003e",
	"user": {
		"login": "julienschmidt",
		"id": 944947,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-12-09T19:17:22Z",
	"updated_at": "2014-12-08T10:38:32Z"
}
