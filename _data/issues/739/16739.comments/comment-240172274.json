{
	"id": 240172274,
	"body": "Can you compare that with Go 1.6?\r\n\r\nFor your Go 1.7 output, I see:\r\n```\r\ngo package net: built with netgo build tag; using Go's DNS resolver\r\n```\r\n\r\nI think the relevant change in Go 1.7 was 72c11808 (net: don't do DNS for onion and local addresses) for #13705.\r\n\r\nWhen @mikioh mentioned RFC 6762, which says:\r\n\r\n```\r\n   This document specifies that the DNS top-level domain \".local.\" is a\r\n   special domain with special semantics, namely that any fully\r\n   qualified name ending in \".local.\" is link-local, and names within\r\n   this domain are meaningful only on the link where they originate.\r\n   This is analogous to IPv4 addresses in the 169.254/16 prefix or IPv6\r\n   addresses in the FE80::/10 prefix, which are link-local and\r\n   meaningful only on the link where they originate.\r\n\r\n   Any DNS query for a name ending with \".local.\" MUST be sent to the\r\n   mDNS IPv4 link-local multicast address 224.0.0.251 (or its IPv6\r\n   equivalent FF02::FB).  The design rationale for using a fixed\r\n   multicast address instead of selecting from a range of multicast\r\n   addresses using a hash function is discussed in Appendix B.\r\n   Implementers MAY choose to look up such names concurrently via other\r\n   mechanisms (e.g., Unicast DNS) and coalesce the results in some\r\n   fashion.  Implementers choosing to do this should be aware of the\r\n   potential for user confusion when a given name can produce different\r\n   results depending on external network conditions (such as, but not\r\n   limited to, which name lookup mechanism responds faster).\r\n```\r\n\r\nI missed this part:\r\n\r\n\u003e Implementers MAY choose to look up such names concurrently via other\r\n   mechanisms (e.g., Unicast DNS) and coalesce the results in some\r\n   fashion. \r\n\r\nAnd currently we're just always skipping DNS for *.local addresses:\r\n\r\n```go\r\n// avoidDNS reports whether this is a hostname for which we should not                                      \r\n// use DNS. Currently this includes only .onion and .local names,                                           \r\n// per RFC 7686 and RFC 6762, respectively. See golang.org/issue/13705.                                     \r\nfunc avoidDNS(name string) bool {  \r\n        if name == \"\" {  \r\n                return true  \r\n        }  \r\n        if name[len(name)-1] == '.' {  \r\n                name = name[:len(name)-1]  \r\n        }  \r\n        return stringsHasSuffixFold(name, \".onion\") || stringsHasSuffixFold(name, \".local\")  \r\n}  \r\n```\r\n\r\nWe should probably relax the *.local case, at least for the `netgo` case, but maybe in all cases.\r\n\r\nI doubt it's relevant, but what is your /etc/resolv.conf and /etc/nsswitch.conf?\r\n\r\n/cc @mikioh @mdempsky @ianlancetaylor for any opinions and whether this is Go 1.7.1 worthy.\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	},
	"created_at": "2016-08-16T17:17:11Z",
	"updated_at": "2016-08-16T17:17:11Z"
}
