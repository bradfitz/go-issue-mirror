{
	"id": 178446401,
	"number": 17184,
	"state": "closed",
	"title": "net/url: url.String() produces invalid relative URL when first segment of path contains \":\"",
	"body": "### What version of Go are you using (`go version`)?\r\n`go version go1.7.1 darwin/amd64`\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/user/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/Cellar/go/1.7.1/libexec\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.7.1/libexec/pkg/tool/darwin_amd64\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/jv/fp0q8rhx427f6p892mh4mpx40000gn/T/go-build154120093=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n### What did you do?\r\n\r\nCreated a simple file server using `http.FileServer` to serve a directory containing a file with a colon (\":\") in the name.\r\n\r\n``` go\r\npackage main\r\n\r\nimport \"net/http\"\r\n\r\nfunc main() {\r\n\thttp.Handle(\"/\", http.FileServer(http.Dir(\"files\")))\r\n\thttp.ListenAndServe(\"127.0.0.1:8000\", nil)\r\n}\r\n```\r\n\r\n```\r\n# ls -1 files\r\nnormal_file\r\nweird:file\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nOn browsing to `127.0.0.1:8000` I expected a list of the two files shown above and that I would be able to retrieve their contents by clicking their respective links.\r\n\r\n### What did you see instead?\r\n\r\nI was able to retrieve `normal_file`, but selecting `weird:file` appeared to do nothing. Viewing the source, it became apparent that the browser was interpreting `weird:` as the scheme.\r\n\r\n``` html\r\n\u003cpre\u003e\r\n\u003ca href=\"normal_file\"\u003enormal_file\u003c/a\u003e\r\n\u003ca href=\"weird:file\"\u003eweird:file\u003c/a\u003e\r\n\u003c/pre\u003e\r\n```\r\n\r\nPer [RFC 3986, Section 4.2](https://tools.ietf.org/html/rfc3986#section-4.2):\r\n\r\n\u003e A path segment that contains a colon character (e.g., \"this:that\")\r\n   cannot be used as the first segment of a relative-path reference, as\r\n   it would be mistaken for a scheme name.  Such a segment must be\r\n   preceded by a dot-segment (e.g., \"./this:that\") to make a relative-\r\n   path reference.\r\n\r\nI think the correct place to resolve the behavior is in [URL.String()](https://github.com/golang/go/blob/2bc5f1258e049e1d59711046e5c865500eefa159/src/net/url/url.go#L673). It's comment states `String reassembles the URL into a valid URL string.`, which is not accurate in this case of only a relative path with a colon in the first segment.\r\n\r\nI'd be happy to contribute a fix. I believe adding the below [before writing the path](https://github.com/golang/go/blob/2bc5f1258e049e1d59711046e5c865500eefa159/src/net/url/url.go#L716) would correct the behavior for the specific case, without affecting the output otherwise.\r\n\r\n``` go\r\n\t\tif buf.Len() == 0 {\r\n\t\t\tcIdx, sIdx := strings.IndexByte(path, ':'), strings.IndexByte(path, '/')\r\n\t\t\tif cIdx \u003e -1 \u0026\u0026 (sIdx \u003c 0 || cIdx \u003c sIdx) {\r\n\t\t\t\tbuf.WriteString(\"./\")\r\n\t\t\t}\r\n\t\t}\r\n```\r\n\r\nThis produces:\r\n``` html\r\n\u003cpre\u003e\r\n\u003ca href=\"normal_file\"\u003enormal_file\u003c/a\u003e\r\n\u003ca href=\"./weird:file\"\u003eweird:file\u003c/a\u003e\r\n\u003c/pre\u003e\r\n```",
	"user": {
		"login": "vcabbage",
		"id": 10789027,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2016-09-22T18:26:49Z",
	"created_at": "2016-09-21T19:53:08Z",
	"updated_at": "2016-09-22T18:26:49Z"
}
