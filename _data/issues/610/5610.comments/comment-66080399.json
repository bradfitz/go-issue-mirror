{
	"id": 66080399,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3 by **jon.forums**:\n\n\u003cpre\u003ePeter, please clarify; I don't yet see your point. Do you think the example patch is\nwrong?\n\nWhile it's true the documented behavior of C/C++\nSetEnvironmentVariableW(L\"NOEXIST_ENV_VAR\", NULL) is to request deletion, it's a bit of\na red herring. The key point is that this Go code\n\n  os.Setenv(\"NOEXIST_ENV_VAR\", \"\")\n\nperforms differently on Win7 and XP even though the marshalled Go code is (I suspect)\nthe same.\n\nWhat's interesting to me (a Go source noob) is that pushing a Go \"\\x00\" as the envar\nvalue works for Win7 and XP, while pushing a Go nil fails on XP but works on Win7.\n\nI don't yet understand how Go nil's are marshalled, and whether the marshalled result is\nviewed the same as a NULL from SetEnvironmentVariableW's perspective. For example, what\nif the marshalled nil is not viewed as a NULL but some corrupted LPWSTR value? Could\nthis explain the Win7/XP difference if the Win7's impl improved error checking? Who\nknows, but I'm hoping to find time to hack some C Win32 code to find out more.\n\nTo be clear, I currently think this is a MSFT implementation bug that Go should\ncompensate for as simply and cleanly as possible.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-06-01T23:13:59Z",
	"updated_at": "2014-12-08T10:30:34Z"
}
