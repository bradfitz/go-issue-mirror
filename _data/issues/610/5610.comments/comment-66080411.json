{
	"id": 66080411,
	"body": "\u003ca id=\"c14\"\u003e\u003c/a\u003eComment 14 by **jon.forums**:\n\n\u003cpre\u003eAlex,\n\nLet's see if I persuade you that:\n\n1) Go's incorrect impl of os.Setenv and WinXP/Win7 differences in MSFT's\nSetEnvironmentVariableW impl are conspiring to create this bug.\n2) Deleting single env var from Go is a separate issue.\n3) MSFT's poor API for deleting single env vars should not be directly surfaced to Go.\n\n\nTesting a few scenarios via this Go code\n\n  \u003ca href=\"http://play.golang.org/p/-i3IPGq9VB\"\u003ehttp://play.golang.org/p/-i3IPGq9VB\u003c/a\u003e\n\ngives the following multi-platform \"expected\" results\n\n  # OS X Snow Leopard, Arch Linux 3.9.7, and Windows 7 (32bit)\n  # Arch Linux 3.9.7 and Windows 7 (64bit)\n  ---\u003e read nonexistent `GO_TEST_ENVAR` value: ``\n  ---\u003e write `GO_TEST_ENVAR` to `bogus envar value`\n  ---\u003e read `GO_TEST_ENVAR` value: `bogus envar value`\n  ---\u003e write `GO_TEST_ENVAR` to empty string\n  ---\u003e read `GO_TEST_ENVAR` value: ``\n  ---\u003e read `GO_NONEXIST_TEST_ENVAR` value: ``\n  ---\u003e write `GO_NONEXIST_TEST_ENVAR` to empty string\n  ---\u003e read `GO_NONEXIST_TEST_ENVAR` value: ``\n\nand this \"fail\" result on WinXP 32bit:\n\n  # Windows XP SP3 (32bit)\n  ---\u003e read nonexistent `GO_TEST_ENVAR` value: ``\n  ---\u003e write `GO_TEST_ENVAR` to `bogus envar value`\n  ---\u003e read `GO_TEST_ENVAR` value: `bogus envar value`\n  ---\u003e write `GO_TEST_ENVAR` to empty string\n  ---\u003e read `GO_TEST_ENVAR` value: ``\n  ---\u003e read `GO_NONEXIST_TEST_ENVAR` value: ``\n  setenv: The system could not find the environment option that was entered.\n\nThe difference is due to Go incorrectly converting an empty string into a nil *and*\nMSFT's SetEnvironmentVariableW different XP/7 behavior for nonexistent env vars.\n\nAlthough this failure occurs when deleting a nonexistent env var, deleting a single env\nvar is a separate issue since the original Go code's intent is to *set* an env var to an\nempty string. Go shouldn't be changing programmer intention.\n\nMSFT's dual-purpose SetEnvironmentVariableW API for setting *and* deleting an env var is\na poor idea that does not clearly communicate intention, and should not be directly\nsupported in Go. Go should abstract deleting an env var as a separate cross-platform\nAPI. For example, in C I might use MSFT's API to set an env var via\n\n  SetEnvironmentVariableW(L\"NONEXIST_ENV_VAR\", L\"blah\")\n\nbut the following don't clearly communicate intention:\n\n  SetEnvironmentVariableW(L\"NONEXIST_ENV_VAR\", L\"\")\n  SetEnvironmentVariableW(L\"NONEXIST_ENV_VAR\", NULL)\n\nAre they both meant to \"delete\" the env var, or something else? While convenient, MSFT's\ndual purpose API is a bad idea and I don't want to see this code style in Go.\n\nCurrently, I don't believe there is a way from Go to delete a single env var. Instead of\nhijacking os.Setenv, I'd rather see Go fall into the clear-and-explicit camp via API like\n\n  func Clearenv()\n  func Getenv(key string) error\n  func Setenv(key, value string) error\n  func Delenv(key string) error\n\nwhere Delenv is responsible for only deleting a single env var and Setenv is responsible\nfor only setting a single envar.\n\nIt seems Go could provide these abstractions in a cross-platform way, but I've not\nlooked into it. I plan to carve out some time and play with the C API for Linux, OS X,\nand Windows to convince myself Go could abstract deleting a single env var without\nhijacking os.Setenv.\n\nSince it appears there is currently no Go API to delete a single env var, we're not\ntalking about removing existing functionality. I believe os.Setenv can be fixed and it\ncan stay focused on setting env vars rather than catering to MSFT's set/delete semantics.\n\nJon\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-06-24T17:18:43Z",
	"updated_at": "2014-12-08T10:30:35Z"
}
