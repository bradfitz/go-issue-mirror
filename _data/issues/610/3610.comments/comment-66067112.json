{
	"id": 66067112,
	"body": "\u003ca id=\"c31\"\u003e\u003c/a\u003eComment 31:\n\n\u003cpre\u003eThis Happy Eyeballs implementation does not comply with\n\u003ca href=\"http://tools.ietf.org/html/rfc6555#section-4.1\"\u003ehttp://tools.ietf.org/html/rfc6555#section-4.1\u003c/a\u003e\n\n\"\"\"\n   Thus, to avoid harming IPv4-only hosts, implementations MUST prefer\n   the first IP address family returned by the host's address preference\n   policy, unless implementing a stateful algorithm described in\n   Section 4.2.  This usually means giving preference to IPv6 over IPv4,\n   although that preference can be overridden by user configuration or\n   by network configuration [ADDR-SELECT].  If the host's policy is\n   unknown or not attainable, implementations MUST prefer IPv6 over\n   IPv4.\n\"\"\"\n\nNote that \"MUST\" is stronger than \"SHOULD\" in RFC-speak.\n\nI wrote a test client, and repeated invocations show that IPv4 and IPv6\naddresses are reported at random.  This behavior is considered harmful,\nfor the reasons laid out in section 4.1\n\nHere's the test client I'm using:\n\npackage main\n\nimport (\n        \"net\"\n        \"fmt\"\n)\n\nfunc main() {\n        dialer := net.Dialer{DualStack: true}\n        conn, err := dialer.Dial(\"tcp\", \"ds.test-ipv6.com:80\")\n        if err != nil {\n                panic(\"Dial\")\n        }\n        fmt.Fprintf(conn, \"GET /ip/ HTTP/1.0\\r\\n\\r\\n\")\n        buf := make([]byte, 4096)\n        conn.Read(buf)\n        println(string(buf))\n}\u003c/pre\u003e",
	"user": {
		"login": "pmarks-net",
		"id": 4578188,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-07-30T23:33:31Z",
	"updated_at": "2014-12-08T10:19:04Z"
}
