{
	"id": 131958146,
	"body": "Designing an API where a piece of code may or may not run and if it does it\nwill run at a non-deterministic time has always led me to pain.\n\nCurrently (1.5) managing finalization happens during the stop the world\nmark termination phase of the GC. A large part of the remaining latency in\n1.5 is related to dealing with finalization. We will be able to move leaf\nobject that need to be finalize out of the stop the world part of the GC\ninto the sweep phase. Objects containing pointers will be more difficult\nbut mostly doable in the 1.6 timeframe. And yes we have customers with use\ncases that are being hit by this so we are motivated.\n\nOffering both seems reasonable, if the memory being leaked becomes a bigger\nproblem than using finalization then one can use the finalizer backed API.\n\nOn Mon, Aug 17, 2015 at 3:28 PM, Burcu Dogan \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e The downside is the memory leak. Each sensor.Manager allocates several\n\u003e underlying resources.\n\u003e\n\u003e We debated finalization vs Closer interface a couple of times in different\n\u003e contexts for the mobile project. In this particular case, I would prefer\n\u003e not to implement io.Closer because it is fine not to have a guarantee --\n\u003e the leak is not expensive. The only concern is the unexpected finalizations\n\u003e as it was the case at #10636 \u003chttps://github.com/golang/go/issues/10636\u003e.\n\u003e sensor.Manager instances are likely to be long-living, similar to\n\u003e al.Context.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/12169#issuecomment-131936860\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-17T20:51:57Z",
	"updated_at": "2015-08-17T20:51:57Z"
}
