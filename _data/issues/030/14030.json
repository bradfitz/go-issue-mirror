{
	"id": 127608527,
	"number": 14030,
	"state": "closed",
	"title": "x/net/http2: Server can write invalid HTTP/2 if handler writes before reading 100-continue request body",
	"body": "I had this in an old local dev branch, never completed:\r\n\r\n```patch\r\n func (sc *serverConn) writeFrame(wm frameWriteMsg) {\r\n        sc.serveG.check()\r\n+\r\n+       // http2 handlers can conccurently read and write.\r\n+       // If they already wrote headers, ignore a 100-continue\r\n+       // header generated by the reader part.\r\n+       println(fmt.Sprintf(\"Frame write for %v of type %T\", wm.stream, wm.write))\r\n+       switch wm.write.(type) {\r\n+       case *writeResHeaders:\r\n+               wm.stream.wroteHeaders = true\r\n+       case write100ContinueHeadersFrame:\r\n+               if wm.stream.wroteHeaders {\r\n+                       sc.scheduleFrameWrite()\r\n+                       return\r\n+               }\r\n+       }\r\n+\r\n```\r\n\r\nThe http2 Server supports an http.Handler concurrently reading the request body while the response body is also being streamed.\r\n\r\nBut because the Go http servers have always automatically sent 100-continue headers in response to \"Expect: 100-continue\" in requests, there's a potential bug in Go's http2 server where the automatic `HEADERS` frame (with header field `:status`=`100`) gets sent AFTER the handler has already started writing, if separate goroutines are reading \u0026 writing.\r\n\r\nOr not. But I don't think there's a test or precautions in the code about it. We might be getting lucky from some other layer.\r\n\r\nInvestigate. Low priority, though, since handlers don't typically do this, and people don't really use 100-continue.\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsInvestigation"
		}
	],
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"closed_at": "2016-05-21T01:30:22Z",
	"created_at": "2016-01-20T05:37:45Z",
	"updated_at": "2016-05-21T19:24:51Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
