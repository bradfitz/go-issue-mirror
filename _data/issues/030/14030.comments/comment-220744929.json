{
	"id": 220744929,
	"body": "Confirmed that this is a bug.\r\n\r\nI wrote this test:\r\n\r\n```go\r\n// golang.org/issue/14030                                                                                                                                                    \r\nfunc TestExpect100ContinueAfterHandlerWrites(t *testing.T) {\r\n        const msg = \"Hello\"\r\n        const msg2 = \"World\"\r\n                \r\n        doRead := make(chan bool, 1)\r\n        defer close(doRead) // fallback cleanup                                                                                                                              \r\n                \r\n        st := newServerTester(t, func(w http.ResponseWriter, r *http.Request) {\r\n                io.WriteString(w, msg)\r\n                w.(http.Flusher).Flush()\r\n \r\n                // Do a read, which might force a 100-continue status to be sent.                                                                                            \r\n                \u003c-doRead \r\n                r.Body.Read(make([]byte, 10))\r\n        \r\n                io.WriteString(w, msg2) \r\n \r\n        }, optOnlyServer)\r\n        defer st.Close()\r\n \r\n        tr := \u0026Transport{TLSClientConfig: tlsConfigInsecure}\r\n        defer tr.CloseIdleConnections()\r\n                \r\n        req, _ := http.NewRequest(\"POST\", st.ts.URL, io.LimitReader(neverEnding('A'), 2\u003c\u003c20))\r\n        req.Header.Set(\"Expect\", \"100-continue\")\r\n \r\n        res, err := tr.RoundTrip(req) \r\n        if err != nil {\r\n                t.Fatal(err) \r\n        } \r\n        defer res.Body.Close()\r\n                \r\n        buf := make([]byte, len(msg))\r\n        if _, err := io.ReadFull(res.Body, buf); err != nil {\r\n                t.Fatal(err)\r\n        }\r\n        if string(buf) != msg {\r\n                t.Fatalf(\"msg = %q; want %q\", buf, msg)\r\n        } \r\n        \r\n        doRead \u003c- true\r\n        \r\n        if _, err := io.ReadFull(res.Body, buf); err != nil {\r\n                t.Fatal(err)\r\n        }\r\n        if string(buf) != msg2 {\r\n                t.Fatalf(\"second msg = %q; want %q\", buf, msg2)\r\n        }\r\n}\r\n```\r\n\r\nAnd it results in:\r\n\r\n```\r\n=== RUN   TestExpect100ContinueAfterHandlerWrites\r\n--- FAIL: TestExpect100ContinueAfterHandlerWrites (0.03s)\r\n        transport_test.go:1963: connection error: PROTOCOL_ERROR\r\nFAIL\r\nexit status 1   \r\n```\r\n\r\n(where line 1963 is the second read....)\r\n\r\nSo we are sending a bogus 100 continue mid-data.\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-21T00:01:51Z",
	"updated_at": "2016-05-21T00:01:51Z"
}
