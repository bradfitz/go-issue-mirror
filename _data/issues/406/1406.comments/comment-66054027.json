{
	"id": 66054027,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eThe Linux description of CLONE_PARENT says\n\n       CLONE_PARENT\n              (Linux 2.4 onwards) If CLONE_PARENT  is  set,  then\n              the  parent  of the new child (as returned by getp\u0006\n              pid(2)) will be the same as  that  of  the  calling\n              process.\n\n              If  CLONE_PARENT is not set, then (as with fork(2))\n              the child's parent is the calling process.\n\n              Note that it is the parent process, as returned  by\n              getppid(2),  which  will be signaled when the child\n              terminates.\n\nMy reading of that is that if Go does not set CLONE_PARENT,\nthen in a multithreaded program that does\n\n    thread 1 starts\n    thread 1 clones to create thread 2\n    thread 1 exits\n    thread 2 exits  # program is done\n\nWhen thread 1 exits the original parent may or may not get told,\nbut that when thread 2 exits, it definitely won't, because thread 2's\nparent is thread 1.\n\nHowever, looking at the source code it appears that CLONE_THREAD\nimplies the CLONE_PARENT-like behavior, so that CLONE_PARENT\nis not necessary in our calls.  (It's great how all those bits are so\nnon-orthogonal.)\n\n\u003ca href=\"http://lxr.linux.no/linux+v2.6.37/kernel/fork.c#L1238\"\u003ehttp://lxr.linux.no/linux+v2.6.37/kernel/fork.c#L1238\u003c/a\u003e\n\nIt looks like we can take CLONE_PARENT out entirely, because\nCLONE_THREAD implies the behavior we want.\n\nos.Getppid does not cache, but in general it's hard to control which\nOS thread you are using: the goroutines are multiplexed onto OS threads.\nTo test the behavior of Getppid from two different OS threads you need\nto call runtime.LockOSThread in one goroutine and then start another one.\nThe original will be locked to its original thread, forcing the other to\nhave its own thread.\n\nNo, there is no cache.\n\nThe kernel explicitly disallows CLONE_PARENT with init so that the process\ngraph, where the links are the parent relation, is always a single tree and not\na forest of disconnected trees.\n\n\u003ca href=\"http://www.mail-archive.com/devel\"\u003ehttp://www.mail-archive.com/devel\u003c/a\u003e@openvz.org/msg16396.html\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"runtime\"\n)\n\nfunc ShowPids() {\n\tfmt.Printf(\"P: %d; PP: %d\\n\", os.Getpid(), os.Getppid())\n}\n\nfunc main() {\n\truntime.LockOSThread()\n\tShowPids()\n\tc := make(chan int)\n\tfor i := 0; i \u0026lt; 10; i++ {\n\t\tgo func() {\n\t\t\truntime.LockOSThread()\n\t\t\tShowPids()\n\t\t\tc \u0026lt;- 1\n\t\t}()\n\t}\n\tfor i := 0; i \u0026lt; 10; i++ {\n\t\t\u0026lt;-c\n\t}\n}\n\n\nRuss\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-01-13T15:01:49Z",
	"updated_at": "2014-12-22T05:53:49Z"
}
