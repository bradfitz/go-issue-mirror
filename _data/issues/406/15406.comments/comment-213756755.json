{
	"id": 213756755,
	"body": "## Contributing\r\n\r\nAnother goal I have is to help divide up the work and make it easier to contribute. Right now it is quite daunting to contribute to fsnotify. I think that has a lot to do with it supporting multiple platforms with all the low-level bits tangled in with the user-space extras intended to make it more consistent and usable for users.\r\n\r\nBy splitting this into layers, Linux users interested interested the low-level bits could work on a package for inotify or even a driver for inotify without worrying so much about cross-cutting concerns. Meanwhile, other people could work on filling in the gaps with user-space code across multiple notification systems, working with the inotify package/driver rather than directly with InotifyInit and Epoll.\r\n\r\n## Testing\r\n\r\nFinally, I really want to improve the testing story. A better architecture will help, no doubt. Also, I'd like to build out a set of test helpers especially for integration tests that exercise the file system notifications in a myriad of ways. Make a subdirectory, touch a file, rename a file, etc., etc. Building up a library of things to check, and making it easier and cleaner to add additional tests when bugs arise.\r\n\r\nI'd like to experiment with each file notification system independently to see whether a \"golden file\" approach with an -update flag could be used to capture and verify behaviour reliably across architectures. Right now this is just a theory, but if it works, we could have one set of tests that expect different behaviours from each driver, but expect the behaviours to be consistent over time. It could also help catalog the odd behaviours of each different file notification system, so we know which gaps need to filled to build a consistent experience at the top layer.",
	"user": {
		"login": "nathany",
		"id": 4566,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-23T15:13:23Z",
	"updated_at": "2016-04-23T15:59:17Z"
}
