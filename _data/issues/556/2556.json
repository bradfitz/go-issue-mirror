{
	"id": 51279378,
	"number": 2556,
	"state": "closed",
	"title": "runtime: detect infinite recursion during stack growth",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\nThis simple code reveals an infinite print loop: \npackage main \nimport \u0026quot;fmt\u0026quot; \nimport \u0026quot;log\u0026quot; \nimport \u0026quot;runtime/debug\u0026quot; \nvar count = 0 \ntype foo struct { \n  i int \n} \n\nfunc (f foo) String() string { \n  count++ \n  if count \u0026gt; 10 { \n    debug.PrintStack() \n    panic(\u0026quot;call stack too large\u0026quot;) \n  } \n  return fmt.Sprintf(\u0026quot;foo@%p value: %d\u0026quot;, f, f.i) \n} \n\nfunc main() { \n  f := foo{i: 3} \n  // ok \n  log.Println(fmt.Sprintf(\u0026quot;foo@%p value: %d\u0026quot;, \u0026amp;f, f.i)) \n  // inf loop \n  log.Printf(\u0026quot;foo@%p, value: %d\\n\u0026quot;, f, f.i) \n} \n\nIf you take out the loop protection in the code, you will end up crashing with no system\nmemory left.\n\nWhat is the expected output?\nThere should be a callstack protection so that the program wouldn't chew up all the\nsystem memories.\n\nWhat do you see instead?\nhang and eat up all the memories.\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g, 8g\n\nWhich operating system are you using?\nLinux 386/amd64\n\nWhich revision are you using?  (hg identify)\ntip\n\nPlease provide any additional information below.\n\nIan's comment:\n\nI think we should use the depth we are already passing down to catch \nthis kind of loop before we eat all of memory.\u003c/pre\u003e",
	"user": {
		"login": "i3d",
		"id": 105068,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 8,
	"closed_at": "2014-12-08T10:13:38Z",
	"created_at": "2011-12-12T20:21:34Z",
	"updated_at": "2016-06-24T21:21:45Z"
}
