{
	"id": 222271795,
	"body": "I poked through a bunch of switch statements. Based on what I saw, the two near term changes I would like to make are using ranges and bitmasks for dense integers that share a branch target. (For example, `case 99, 100, 101:` and `case 99, 109, 119:`.)\r\n\r\nIt's not obvious to me how this should interact with binary search, assuming the goal is to minimize the number of branches. If just ranges were supported, it'd be easy: Assign a weight of one to every range (including singleton ranges) and then pick a pivot value that balances those weights. With bitmasks, however, things are more complicated. Bitmask-able sets of values interact with each other (`case 1, 3, 5:` and `case 1, 2, 8:`) and with themselves (a case with, say, every odd number less than 100 must be split up somewhere into multiple bitmasks), so moving the pivot left or right no longer has an incrementally calculable, monotonic effect. \r\n\r\nI'd love suggestions or references. I'd rather find something simple and cheap that limits the worst case rather than something optimal.\r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-27T23:07:00Z",
	"updated_at": "2016-05-27T23:07:00Z"
}
