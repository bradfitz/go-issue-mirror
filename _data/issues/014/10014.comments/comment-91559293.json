{
	"id": 91559293,
	"body": "Easy exchange of Go heap data into C programs (which I am not at all sure\nis a feature) pretty much requires that we leave struct fields exactly as\nwe found them and also mimic C layout rules (I have some experience with\nthis).  I would not be so quick to write off the goodness of reordering\nfields; it can be a GC optimization, for example, if all referenced\npointers are clustered into a single cache line, instead of being scattered\ninto two.  GC also boils down to bulk data movement; to the extent that\nthis can be reduced by slightly compressing the in-memory representation,\nGC is assisted.  Alternately, for the same maximum heap size, a 10%\nreduction in footprint is equivalent to allowing 120% overhead instead of\n100%.\n\nThis would however require a second knob for all those places where the\nexpert programmer (how many of those are there, really?) does reorder\nfields for cache line purposes.  Having run across code in years past where\n\"expert\" programmers did twiddly things without leaving the slightest hint\nabout intent or importance, I don't necessarily see this as a bad thing,\nthough I understand it is counter to the Go Way.\n\nOn Fri, Apr 10, 2015 at 1:38 AM, Russ Cox \u003cnotifications@github.com\u003e wrote:\n\n\u003e It seems fine to me for the spec not to guarantee anything about struct\n\u003e field order in memory. The spec doesn't operate at that level.\n\u003e\n\u003e That said, no Go compiler should probably ever reorder struct fields. That\n\u003e seems like it is trying to solve a 1970s problem, namely packing structs to\n\u003e use as little space as possible. The 2010s problem is to put related fields\n\u003e near each other to reduce cache misses, and (unlike the 1970s problem)\n\u003e there is no obvious way for the compiler to pick an optimal solution. A\n\u003e compiler that takes that control away from the programmer is going to be\n\u003e that much less useful, and people will find better compilers.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/10014#issuecomment-91436342\u003e.\n\u003e\n",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-10T13:34:35Z",
	"updated_at": "2015-04-10T13:34:35Z"
}
