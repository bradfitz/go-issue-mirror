{
	"id": 66051255,
	"body": "\u003ca id=\"c12\"\u003e\u003c/a\u003eComment 12:\n\n\u003cpre\u003eI think this bug is related to this one: \u003ca href=\"https://golang.org/issue/886\"\u003ehttps://golang.org/issue/886\u003c/a\u003e\n\nBecause the fix I've introduced in \u003ca href=\"https://golang.org/issue/886\"\u003eissue #886\u003c/a\u003e also changes behaviour of cgo calls. And\nnow I look into \"runtime/cgocall.c\", it appears that cgo uses the same locking mechanics\nas runtime.LockOSThread(), therefore it is very likely that this is exactly the same bug.\n\nShort bug description: more than one running thread when GC is active, resulting in\nshared usage of thread local memory cache (aka mcache), which is not thread safe. A race\ncondition.\u003c/pre\u003e",
	"user": {
		"login": "nsf",
		"id": 12567,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-06-29T14:53:26Z",
	"updated_at": "2014-12-08T10:05:52Z"
}
