{
	"id": 150152069,
	"number": 15402,
	"state": "closed",
	"title": "log.Fatal and defer w.Close",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n1.6.1\r\n\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nGOARCH=\"amd64\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\n\r\n3. What did you do?\r\nIf possible, provide a recipe for reproducing the error.\r\nUsing the log package, use the SetOutput, for example:\r\n\t\tlg,lgerr := os.Create(logfile)\r\n\t\tif lgerr != nil {\r\n\t\t\tfatal(fmt.Sprintf(\"os.Create() Error:%v\\n\",lgerr))\r\n\t\t}\r\n\t\tw = bufio.NewWriter(lg)\r\n\t\tdefer w.Flush()\r\n\t\tdefer lg.Close()\r\n\t\tlog.SetOutput(w)\r\n\r\nThen log some messages, then lastly use log.Fatal to terminate.\r\n\r\nThe defer to w.Flush() isn't called and the log file doesn't include the last buffer containing the error messages prior to the os.Exit\r\n\r\n4. What did you expect to see?\r\nI expected the log package to flush the underlying Writer before exiting.\r\n\r\n5. What did you see instead?\r\nThe log file was truncated (or if short, was empty), making debugging more difficult. \r\n\r\nThe work around was to write my own function, which used a non-Fatal logger method to output the last message; then use a Flush (which required me to make the Writer global - yuck) and then called the Fatal method.\r\n\r\nThank you.\r\n\r\n\r\n",
	"user": {
		"login": "mandolyte",
		"id": 1289437,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-04-21T18:42:36Z",
	"created_at": "2016-04-21T18:22:42Z",
	"updated_at": "2016-04-21T18:42:36Z"
}
