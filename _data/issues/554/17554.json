{
	"id": 184664733,
	"number": 17554,
	"state": "open",
	"title": "net: ability to replace Resolver impl",
	"body": "The `net.Resolver` struct has the following TODOs:\r\n\r\n```\r\n// A Resolver looks up names and numbers.\r\n//\r\n// A nil *Resolver is equivalent to a zero Resolver.\r\ntype Resolver struct {\r\n\t// PreferGo controls whether Go's built-in DNS resolver is preferred\r\n\t// on platforms where it's available. It is equivalent to setting\r\n\t// GODEBUG=netdns=go, but scoped to just this resolver.\r\n\tPreferGo bool\r\n\r\n\t// TODO(bradfitz): optional interface impl override hook\r\n\t// TODO(bradfitz): Timeout time.Duration?\r\n}\r\n```\r\n\r\nI'm interested in overriding the implementation. Specifically, I'd like to write a lookup function that ignores TTL's/returns the last good IP addresses if the DNS provider times out or returns an error instead of returning valid IP addresses. In theory that would help reliability during outages like Dyn's, where many sites were probably still available at their last known IP addresses, but the DNS resolver returned no responses for those sites. \r\n\r\nI could override the DialContext currently, but that feels like overriding too much.\r\n\r\nI'm happy to suggest ideas for an interface but I haven't done a ton of work with DNS and don't trust my instincts too much. @bradfitz, do you have ideas for the interface? I checked the commit and Github issues and couldn't find anything.\r\n",
	"user": {
		"login": "kevinburke",
		"id": 234019,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsDecision"
		}
	],
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2016-10-23T01:03:09Z",
	"updated_at": "2016-10-24T16:12:24Z",
	"milestone": {
		"id": 2053058,
		"number": 49,
		"title": "Go1.9"
	}
}
