{
	"id": 51287756,
	"number": 8150,
	"state": "open",
	"title": "spec: define \"interface value\"",
	"body": "by **gnormington@gopivotal.com**:\n\n\u003cpre\u003eThe spec mentions \u0026quot;interface value\u0026quot; seven times but does not define the term.\nDefining the term carefully would help to avoid some common misunderstandings, most\nnotably \u003ca href=\"http://golang.org/doc/faq#nil_error\"\u003ehttp://golang.org/doc/faq#nil_error\u003c/a\u003e.\n\nThe spec says \u0026quot;Two interface values are equal if they have identical dynamic types\nand equal dynamic values or if both have value nil.\u0026quot; from which we can infer:\n\n1. An interface value may have a dynamic type, and\n\n2. An interface value may have a dynamic value, and either\n\n3a. An interface value may have value nil, or\n\n3b. An interface value may be nil.\n\nI think the spec sentence should really say \u0026quot;Two interface values are equal if\n[...] or if both are nil.\u0026quot; which would imply 3b rather than 3a.\n\nThe spec also says \u0026quot;The static type (or just type) of a variable is the type\ndefined by its declaration. Variables of interface type also have a distinct dynamic\ntype, which is the actual type of the value stored in the variable at run time. The\ndynamic type may vary during execution but is always assignable to the static type of\nthe interface variable. For non-interface types, the dynamic type is always the static\ntype.\u0026quot; from which we can additionally infer (assuming a variable of interface type\nalways contains an interface value):\n\n4. An interface value has a static type which is the interface type of the value.\n\nNotice that 4 doesn't appear to be true for nil interface values, so I think the above\nparagraph needs fixing too (\u0026quot;[...] Non-nil variables of interface type also have a\ndistinct dynamic type, [...]\u0026quot;)\n\nAlthough I suspect the FAQ isn't normative, it provides a helpful insight, \u0026quot;[...]\nthe return value is an error interface value holding (*MyError, nil)\u0026quot;, from which\nwe can infer:\n\n5. The interface value may have a nil dynamic value.\n\nHere is a speculative description of an interface value, with some educated guesses\nthrown in, to give an impression of where all this might lead:\n\nAn interface value is the value of a variable of interface type. An interface value is\neither nil or has both a dynamic type and a dynamic value.\n\nA nil interface value always results from [is assigned from, passed as a parameter,\nreturned, etc.] a literal nil value since any other value has a non-nil dynamic type.\n\nThe static type of an interface value is an interface type [and it would be nice to\nspell out *which* interface type!].\n\nIf a non-nil interface value has a non-nil dynamic value, then the actual type of the\ndynamic value is equal to the dynamic type of the interface value. The dynamic value of\na non-nil interface value may be nil.\n\nThe dynamic type of a non-nil interface value is never nil. The dynamic type of a\nnon-nil interface value implements the static type of the interface value.\n\nAn interface value compares (==) equal to nil if and only if it is nil; a non-nil\ninterface value never compares (==) equal to nil. [This latter statement may be out of\nplace in the definition of interface value, but should at least be linked to from the\ndefinition. But given \u003ca href=\"http://golang.org/doc/faq#nil_error\"\u003ehttp://golang.org/doc/faq#nil_error\u003c/a\u003e, it may be worth having some\nrepetition of this point.]\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 11,
	"created_at": "2014-06-04T14:52:16Z",
	"updated_at": "2015-07-15T05:28:26Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
