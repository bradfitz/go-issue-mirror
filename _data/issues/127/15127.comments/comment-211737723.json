{
	"id": 211737723,
	"body": "I took a look at this. I don't have a complete answer for it, but want to document my findings here.\r\n\r\nThis behavior is caused by the \"annihilation\" logic shared between encoding and decoding. For encoding, this makes sense: since the two sources might have different value, we might as well not write anything. One might argue that this should be an error. I'm not sure what the rationale is, but the doc on dominantField function ( https://golang.org/src/encoding/json/encode.go#L1139 ) and a test (TestDuplicatedFieldDisappears) indicate that it's a deliberate decision.\r\n\r\nSince encode makes a decision to not error, I think we should refrain from returning an error from the decode side. One way to solve this issue is to give decode its own version of dominantField that does \"union\" instead of \"annihilation\", setting all \"conflicted\" fields to the same value.\r\n\r\nOf course, another way out is to document this behavior and keep the implementation as is. What do you think?\r\n\r\n(Please let me know if golang-dev is a better place for this discussion.)",
	"user": {
		"login": "pongad",
		"id": 1617025,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-19T05:40:28Z",
	"updated_at": "2016-04-19T05:40:28Z"
}
