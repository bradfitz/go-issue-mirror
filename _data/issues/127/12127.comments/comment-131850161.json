{
	"id": 131850161,
	"body": "@mpvl, thank you for your feedback. Please find my comments below.\r\n\r\nPrecision and rounding mode should be available to operations on big.Decimal because of the following reasons:\r\n- very often it is practical to limit precision during calculations. E.g. result of multiplication of 3 numbers with 5 digits after decimal point can have 5^3=625 digits after decimal point. If precision is unbounded operations will become slow. It is less error prone to set precision once instead of rounding results after each operation.\r\n- to implement decimal32, decimal64, decimal128 fixed point IEEE 754 types and operations\r\n\r\nNumber of trailing zeroes is determined by the scale, not precision. The precision is the upper limit on the number of significant digits in a result. E.g. for 1.2000, scale is 4 and precision could be any number \u003e=2. \r\n\r\nI prefer Decimal name rather than Dec but I will leave the decision to golang team.\r\n\r\nI agree that `math` is a better place for `RoundingMode` (and probably `Accuracy`) than `math/big` as it is applicable not only to the arbitrary precision numbers but also to float32 and float64 and the proposed Round function might be useful addition to `math` package. I am not sure if this still can be changed. @griesemer ?\r\n\r\nMethods to convert between big.Decimal and float32, float64, big.Int, big.Float and big.Rat will be part of this proposal.\r\n\r\nVarious accounting rounding rules are not described in IEEE 754 standard and don't have to be supported by big.Decimal. It should be easy to implement them if necessary though. For example last 2 digits required for Swiss rounding (as described at (http://blog.syspro.com/2013/09/12/rounding-accounting) could be calculated by setting scale to 4 and getting reminder of division by 0.01.",
	"user": {
		"login": "kostya-sh",
		"id": 7126275,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-17T14:52:30Z",
	"updated_at": "2015-08-17T14:52:30Z"
}
