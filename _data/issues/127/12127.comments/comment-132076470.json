{
	"id": 132076470,
	"body": "@kostya-sh Regarding your question: Both the math and math/big package are subject to the Go compatibility rules - thus we can add stuff but in general we cannot change or remove existing API. One could define Accuracy and RoundingMode in math and redefine the same constants in math/big. But let's not get bogged down by implementation details for now.\r\n\r\nI'm worried that this proposal's scope is growing rather than becoming more focused. There's two questions to be answered:\r\n\r\n1) Is this a proposal for a commercially viable decimal number/fixed-point package?\r\n2) Is this a proposal for an arbitrary precision decimal package?\r\n\r\nIf the goal is to make Go a viable language for business/commercial applications (which I think would be a great goal), than a first step might be an easy-to-use, standards-compliant implementation of a fixed-point decimal package (from what I understand so far, 128bit seems plenty). Such a package doesn't need to be under math or math/big. It could be the base of a larger library of business-related packages.\r\n\r\nIf the goal is an arbitrary precision decimal type, I think it would simply be an extension of package big (as in big.Decimal). \r\n\r\nI think the proposal should focus on one of the two, I'm not convinced that they need to be combined. My vote would be for making this about 1): A proposal for commercially viable decimal number/fixed-point package. This is the more interesting one, with potential for large impact if done well.\r\n\r\nInstead of focusing on a concrete implementation, the proposal should define exactly what would be needed for commercial applications. Business/accounting software experts, anyone?\r\n\r\n",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-18T05:34:27Z",
	"updated_at": "2015-08-18T05:34:27Z"
}
