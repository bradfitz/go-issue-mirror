{
	"id": 171493745,
	"body": "\u003e Could you elaborate why? If there are issues (I haven't tested on 32-bit platforms yet) using int would probably work fine.\r\n\r\nJust to clarify, it is possible to use int64 type to represent scale even on 32-bit platforms, however big.Int with the corresponding number of decimal digits simply won't fit in available 2Gb of memory. Actually I doubt it will even fit in memory on 64-bit platforms ;) So using int64 for scale and precision is a bit pointless.\r\n\r\nint32 (not int) should be enough. Also it makes Decimal smaller (by 8 bytes - 4 for prec, 4 for scale) and some operations are easier to implement correctly. E.g. in Cmp you have ` hi.scale - lo.scale` (https://github.com/EricLagergren/decimal/blob/master/decimal.go#L493). However you do not check for overflow. If scale is int32 then checking for overflow is trivial as you can do all arithmetic operations using int64 and compare the final result with max.MaxInt32",
	"user": {
		"login": "kostya-sh",
		"id": 7126275,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-14T01:29:14Z",
	"updated_at": "2016-01-14T01:29:14Z"
}
