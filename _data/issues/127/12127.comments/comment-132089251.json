{
	"id": 132089251,
	"body": "@griesemer as far as I know Accuracy and RoundingMode are new types in Go 1.5. The only reason I asked the question is that now (before 1.5 final release) is the only time they still can be moved without breaking compatibility. I don't have a strong opinion on the location of these types though and if you think that they are defined in the right package let them be.\r\n\r\nI agree with you that the scope of this proposal should be limited. I saw a few questions on StackOverflow ([1](http://stackoverflow.com/questions/31946344/why-does-go-treat-a-postgresql-numeric-decimal-columns-as-uint8), [2](http://stackoverflow.com/questions/31503742/how-do-i-format-a-currency-with-commas-and-2-decimal-places), [3](http://stackoverflow.com/questions/19238175/what-is-the-best-way-to-convert-a-currency-from-float-to-integer-in-go), [4](http://stackoverflow.com/questions/20596428/how-to-represent-currency-in-go), [5](http://stackoverflow.com/questions/31778173/what-type-to-use-to-correctly-handle-division-of-odd-numbers-of-cents-or-small), [6](http://stackoverflow.com/questions/26008004/go-type-for-purchasing-financial-calculations)) that would be very easy to answer if Go had big.Decimal type. That was my original motivation for creating this proposal.\r\n\r\nI am by no means an expert but I have some experience working with financial (though not accounting) applications in Java. It provides arbitrary precision decimal class (java.math.BigDecimal) in the core library and it is recommended to use this class for monetary calculations. It also integrates nicely with decimal database types via JDBC API. These are the reasons I believe that `big.Decimal` should be good enough for the most commercial (and not only) applications. The main complaints about BigDecimal in Java are:\r\n- Verbose API. Go (similar to Java) doesn't support operator overloading though, so it is unlikely that the Go API can be made significantly less verbose.\r\n- Poor performance (comparing to native floating point types). Still It is still reasonably fast and applications that need to be as fast as possible tend to use double or long types to represent amounts (e.g. http://vanillajava.blogspot.com/2011/08/double-your-money-again.html)\r\n\r\nI would prefer to keep this proposal limited to big.Decimal and create another proposal for \"a commercially viable decimal number/fixed-point package\". It probably should be discussed on the mailing list as proposals on github issue tracker are visible only to the limited number of interested developers.",
	"user": {
		"login": "kostya-sh",
		"id": 7126275,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-18T06:32:40Z",
	"updated_at": "2015-08-18T06:32:40Z"
}
