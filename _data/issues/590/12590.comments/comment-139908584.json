{
	"id": 139908584,
	"body": "Hi @hyangah, I was able to get rid of the dylib warning by linking against the archive itself (within the .framework folder) rather than the framework. If you attempt to add a framework, the path gets added to xcode's framework search paths which I guess it assumes are dynamic.. which causes the dylib warning. Don't think that was contributing to the crash. I linked directly against the static library and it went away.\r\n\r\nThe crash is 100% reproducible on iphone5. If I remove the library linkage app runs fine, if I add it in it gets the crash at the below mentioned area. I appreciate the help. \r\n\r\n```\r\nException Type:  EXC_BAD_ACCESS (SIGSEGV)\r\nException Subtype: KERN_INVALID_ADDRESS at 0xe5171008\r\nTriggered by Thread:  0\r\n\r\nThread 0 name:  Dispatch queue: com.apple.main-thread\r\nThread 0 Crashed:\r\n0   ???                           \t0xe5171008 0 + -451473400\r\n1   dyld                          \t0x1fe19c1c ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const\u0026) + 20\r\n2   dyld                          \t0x1fe17004 ImageLoader::recursiveInitialization(ImageLoader::LinkContext const\u0026, unsigned int, ImageLoader::InitializerTimingList\u0026, ImageLoader::UninitedUpwards\u0026) + 352\r\n3   dyld                          \t0x1fe16e5a ImageLoader::processInitializers(ImageLoader::LinkContext const\u0026, unsigned int, ImageLoader::InitializerTimingList\u0026, ImageLoader::UninitedUpwards\u0026) + 106\r\n4   dyld                          \t0x1fe17130 ImageLoader::runInitializers(ImageLoader::LinkContext const\u0026, ImageLoader::InitializerTimingList\u0026) + 52\r\n5   dyld                          \t0x1fe0ce40 dyld::initializeMainExecutable() + 164\r\n6   dyld                          \t0x1fe1043e dyld::_main(macho_header const*, unsigned long, int, char const**, char const**, char const**, unsigned long*) + 2722\r\n7   dyld                          \t0x1fe0c226 dyldbootstrap::start(macho_header const*, int, char const**, long, macho_header const*, unsigned long*) + 398\r\n8   dyld                          \t0x1fe0c040 _dyld_start + 64\r\n\r\nThread 1:\r\n0   dyld                          \t0x1fe1ddcc ImageLoaderMachOCompressed::trieWalk(unsigned char const*, unsigned char const*, char const*) + 180\r\n1   dyld                          \t0x1fe1ded4 ImageLoaderMachOCompressed::findExportedSymbol(char const*, ImageLoader const**) const + 64\r\n2   dyld                          \t0x1fe19268 ImageLoaderMachO::findExportedSymbol(char const*, bool, ImageLoader const**) const + 28\r\n3   dyld                          \t0x1fe19268 ImageLoaderMachO::findExportedSymbol(char const*, bool, ImageLoader const**) const + 28\r\n4   dyld                          \t0x1fe1e5d0 ImageLoaderMachOCompressed::resolveTwolevel(ImageLoader::LinkContext const\u0026, ImageLoader const*, bool, char const*, bool, ImageLoader const**) + 48\r\n5   dyld                          \t0x1fe1e798 ImageLoaderMachOCompressed::resolve(ImageLoader::LinkContext const\u0026, char const*, unsigned char, long, ImageLoader const**, ImageLoaderMachOCompressed::LastLookup*, bool) + 212\r\n6   dyld                          \t0x1fe1fcb2 ImageLoaderMachOCompressed::doBindFastLazySymbol(unsigned int, ImageLoader::LinkContext const\u0026, void (*)(), void (*)()) + 154\r\n7   dyld                          \t0x1fe0ea92 dyld::fastBindLazySymbol(ImageLoader**, unsigned long) + 142\r\n8   libdyld.dylib                 \t0x34661090 dyld_stub_binder + 16\r\n9   libBacktraceRecording.dylib   \t0x008fe7d8 0x8fc000 + 10200\r\n10  libsystem_pthread.dylib       \t0x347a6e0a _pthread_body + 126\r\n11  libsystem_pthread.dylib       \t0x347a6d86 _pthread_start + 114\r\n12  libsystem_pthread.dylib       \t0x347a4b10 thread_start + 4\r\n\r\nThread 0 crashed with ARM Thread State (32-bit):\r\n    r0: 0x0063f80c    r1: 0x003c9215      r2: 0xe5171008      r3: 0x00001000\r\n    r4: 0x000a9d58    r5: 0x1fe2f988      r6: 0x003c9215      r7: 0x008f9718\r\n    r8: 0x00000002    r9: 0x370a99dc     r10: 0x00000003     r11: 0x0063f80c\r\n    ip: 0x370a9120    sp: 0x008f96e0      lr: 0x1fe19aef      pc: 0xe5171008\r\n  cpsr: 0x80000010\r\n```",
	"user": {
		"login": "scisci",
		"id": 1807438,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-13T19:05:02Z",
	"updated_at": "2015-09-13T19:05:02Z"
}
