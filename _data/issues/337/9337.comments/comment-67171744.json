{
	"id": 67171744,
	"body": "@minux Thanks for the info about the rotates, much appreciated. I think the comment in walk.c says what I was trying to say.\r\n`// TODO: Could allow s and 32-s if s is bounded (maybe s\u002631 and 32-s\u002631).`\r\n\r\nStill I think it bears repeating that I saw it a comment somewhere that GCC recognizes this\r\n`func rot(x, k uint32) uint32 {\r\n\treturn x \u003c\u003c k | x \u003e\u003e (32 - k)\r\n}`\r\nas the idiom, without the `\u002631`. I haven't verified that yet, but I will at some point.\r\n\r\nI guess I can get what I want today for the ROT instruction if I am willing to flush the function call to `rot` and expand the shifts by hand, but at some loss of clarity as to what is going on in the algorithm.\r\n\r\nSo `a ^= rot(c, 4)` becomes `a ^= c\u003c\u003c4  | c\u003e\u003e28`\r\n\r\nCould the compiler do the \u002631 or \u002663 for the shift/rotate amounts for you?",
	"user": {
		"login": "tildeleb",
		"id": 834628,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-16T15:01:34Z",
	"updated_at": "2014-12-16T15:01:34Z"
}
