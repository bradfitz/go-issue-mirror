{
	"id": 132386423,
	"body": "IDK. I always thought that inlining and a stack frame were antithetical. From my perspective if function A is inlined into B then function A ceases to exist as a function. Function A becomes more like a textual hygienic macro that was expanded. Do you agree with that?\r\n\r\nThe whole idea of inlining is twofold:\r\n\r\n1. Avoid a stack frame and sav/ret overhead which can be very substantial. Admittedly this is not quite the same issue as maintaining a \"stack trace\" for debugging and I gather from the above that some symbol table formats have support for inlined functions.\r\n\r\n2. Provide further opportunity for an optimizer after inlining such as CSE elimination, shared registers, various kinds of lifting, peephole optimizations and so on. \r\n\r\nI guess the question is what's the overhead for maintaining a backtrace without a stack frame or will an inlined function require a stack frame just for debugging? If the latter, I will be bummed out.\r\n\r\nI have one idea that comes to mind. Suppose functions declared inside other functions could be inlined without a backtrace entry? Obviously for this to work closures would need to be eligible for inlining. Perhaps this would offer the right amount of flexibility and control without adding any kind of syntax adornments to the language.\r\n\r\nTop level functions always get a valid stack trace but local functions don't have the guarantee. That would work for me. Comments?",
	"user": {
		"login": "tildeleb",
		"id": 834628,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-18T23:04:32Z",
	"updated_at": "2015-08-18T23:04:32Z"
}
