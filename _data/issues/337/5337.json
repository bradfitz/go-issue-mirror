{
	"id": 51283487,
	"number": 5337,
	"state": "closed",
	"title": "runtime: Process terminates with segmentation fault",
	"body": "by **hb@hannobraun.de**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\nWe're seeing frequent crashes due to segmentation faults in our production\nsystem. So far, we were unable to find any pattern. Sometimes a whole day goes by\nwithout a single crash, then it crashes a few times the next morning within a few hours.\n\nUnfortunately we haven't seen this issue outside of production and don't know how to\nreproduce it.\n\n\nWhat is the expected output?\nWe expect the process to keep running.\n\n\nWhat do you see instead?\nThe process crashes and creates a core dump. It doesn't seem to generate any output.\n\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g\n\n\nWhich operating system are you using?\n64-bit Linux\n\n\nWhich version are you using?  (run 'go version')\ngo version devel +0704ea89235b Tue Apr 16 09:08:06 2013 -0700 linux/amd64\n\n\nPlease provide any additional information below.\nWe first saw this issue with Go 1.0.3. We later upgraded to a recent development version\n(see above), which didn't seem to change anything about this error.\n\nWe're not using package unsafe or cgo, nor do our dependencies\n(\u003ca href=\"http://labix.org/mgo\"\u003ehttp://labix.org/mgo\u003c/a\u003e and \u003ca href=\"https://github.com/go-sql-driver/mysql)\"\u003ehttps://github.com/go-sql-driver/mysql)\u003c/a\u003e.\n\nI have analyzed the core dumps from the crashing process. This is an excerpt\nfrom the gdb session:\n\nProgram terminated with signal 11, Segmentation fault.\n#0  runtime.gentraceback (pc0=void, sp=void, gp=void, skip=void, pcbuf=void, max=void,\nfn=void, arg=void)\n    at /usr/lib/go/src/pkg/runtime/traceback_x86.c:88\n88\t\t\t\t\tlr = *(uintptr*)fp;\nLoading Go Runtime support.\n(gdb) list\n83\t\t\tif(fp == nil) {\n84\t\t\t\tfp = sp;\n85\t\t\t\tif(pc \u0026gt; f-\u0026gt;entry \u0026amp;\u0026amp; f-\u0026gt;frame \u0026gt;= sizeof(uintptr))\n86\t\t\t\t\tfp += f-\u0026gt;frame - sizeof(uintptr);\n87\t\t\t\tif(lr == 0)\n88\t\t\t\t\tlr = *(uintptr*)fp;\n89\t\t\t\tfp += sizeof(uintptr);\n90\t\t\t} else if(lr == 0)\n91\t\t\t\tlr = *(uintptr*)fp;\n92\t\n(gdb) bt\n#0  runtime.gentraceback (pc0=void, sp=void, gp=void, skip=void, pcbuf=void, max=void,\nfn=void, arg=void)\n    at /usr/lib/go/src/pkg/runtime/traceback_x86.c:88\n#1  0x000000000041c743 in runtime.sigprof (pc=void, sp=void, lr=void, gp=void) at\n/usr/lib/go/src/pkg/runtime/proc.c:1790\n#2  0x000000000041e931 in runtime.sighandler (sig=void, info=void, ctxt=void, gp=void)\nat /usr/lib/go/src/pkg/runtime/signal_amd64.c:51\n#3  0x0000000000428144 in runtime.sigtramp () at\n/usr/lib/go/src/pkg/runtime/sys_linux_amd64.s:207\n#4  0x0000000000428160 in ?? () at /usr/lib/go/src/pkg/runtime/sys_linux_amd64.s:213\n#5  0x0000000000000000 in ?? ()\n(gdb) info args\npc0 = void\nsp = void\ngp = void\nskip = void\npcbuf = void\nmax = void\nfn = void\narg = void\n(gdb) info locals\nsafe = 32679\nwaspanic = 0\nf = 0\nstk = -88088648\nfp = 0\ntracepc = 9245952\nlr = 0\npc = 4450320\nsawnewstack = 0\nn = 1\ni = 1\n\nI can't share the core dump publically, but I can mail it to any project member.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 45,
	"closed_at": "2014-12-08T10:28:48Z",
	"created_at": "2013-04-23T11:15:49Z",
	"updated_at": "2016-06-24T22:38:40Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
