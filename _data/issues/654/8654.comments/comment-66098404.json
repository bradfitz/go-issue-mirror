{
	"id": 66098404,
	"body": "\u003ca id=\"c21\"\u003e\u003c/a\u003eComment 21 by **peter.e.bergner**:\n\n\u003cpre\u003eminux wrote:\n\u003e yes, i propose both gc and gccgo use power64 and power64le.\n\nI agree gc and gccgo should use a common GOARCH value, but I don't think\nchanging the gccgo GOARCH value is a good idea, since there are already\ngccgo compilers released and being used in distros (Ubuntu, etc.) that\nuse the ppc64 value.  Since there is no released gc compiler we have to\nbe compatible with, why not change gc to match gccgo's ppc64 value?\n\nYou also mention in another comment that gc and gccgo don't have to\nagree on the GOARCH value and although that is true, I believe it is\nhighly desirable that they do match and since ppc64 gc support has not\nbeen released yet, we can easily make that happen by having gc match\ngccgo's ppc64 GOARCH value.\n\nIf gc and gccgo don't match, then that just make porting packages that\nrely on GOARCH that were developed on one compiler all that much harder\nto get working on the other.  If we pick a common value, then that is\njust one less thing to worry about.\n\n\n\u003e we need a way to differentiate big/little endian when generating\n\u003e the code, so we need two goarches.\n\nI agree that we need to differentiate between ppc64 big-endian versus\nlittle-endian.  I thought someone (Ian?) mentioned that we should have\nthe same GOARCH value for both big-endian and little-endian.  If that\nis the case, what would be the mechanism to differentiate between the\ntwo?  A different macro like GOENDIAN or ???  I'll state I'm not against\na different GOARCH value for little-endian versus big-endian, but can\nbe persuaded either way.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-10T17:47:06Z",
	"updated_at": "2014-12-08T10:48:01Z"
}
