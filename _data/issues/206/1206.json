{
	"id": 51277493,
	"number": 1206,
	"state": "closed",
	"title": "gofmt formats the + operator inconsistently depending on context",
	"body": "\u003cpre\u003eHere is a tiny Go program:\n\npackage main\n\nimport \u0026quot;fmt\u0026quot;\n\nfunc main() {\n\tvar i, j int\n\ts := \u0026quot;word\u0026quot;\n\ti = j + 1\n\tif s[i:j + 1] == \u0026quot;no\u0026quot; {\n\t\tfmt.Println(\u0026quot;oops\u0026quot;)\n\t}\n\tm := make(map[string]int)\n\tm[\u0026quot;a\u0026quot; + \u0026quot;b\u0026quot;] = 5\n\ts = \u0026quot;a\u0026quot; + \u0026quot;b\u0026quot;\n}\n\nNotice the two \u0026quot;j + 1\u0026quot; and two \u0026quot;a\u0026quot; + \u0026quot;b\u0026quot; expressions. Here\nis what gofmt test.go produces:\n\npackage main\n\nimport \u0026quot;fmt\u0026quot;\n\nfunc main() {\n\tvar i, j int\n\ts := \u0026quot;word\u0026quot;\n\ti = j + 1\n\tif s[i:j+1] == \u0026quot;no\u0026quot; {\n\t\tfmt.Println(\u0026quot;oops\u0026quot;)\n\t}\n\tm := make(map[string]int)\n\tm[\u0026quot;a\u0026quot;+\u0026quot;b\u0026quot;] = 5\n\ts = \u0026quot;a\u0026quot; + \u0026quot;b\u0026quot;\n}\n\nIt seems that when the + operator is used inside square brackets surrounding whitespace\nis removed; but in other contexts the surrounding whitespace is left alone. Personally I\nwish it was left alone, but if you want to force consistency then surely it ought to be\none way or the other (and my preference is to have a space either side of binary\noperators).\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n8g\n\nWhich operating system are you using?\nUbuntu 32-bit\n\nWhich revision are you using?  (hg identify)\n70ed048caad2+ tip\u003c/pre\u003e",
	"user": {
		"login": "mark-summerfield",
		"id": 1773348,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2014-12-08T10:07:21Z",
	"created_at": "2010-10-15T15:02:31Z",
	"updated_at": "2016-06-24T19:21:24Z"
}
