{
	"id": 58148151,
	"number": 9926,
	"state": "closed",
	"title": "spec: clarify that modifying map elements in place while iterating is legal",
	"body": "The [spec][spec-range] implies that adding to and removing from maps while iterating is legal by defining the semantics of doing so:\r\n\r\n\u003e If map entries that have not yet been reached are removed during iteration, the corresponding iteration values will not be produced. If map entries are created during iteration, that entry may be produced during the iteration or may be skipped.\r\n\r\nAs far as I can tell though, it doesn't explicitly specify that existing keys may be modified but not removed. For example:\r\n\r\n```Go\r\nvar m map[string]int\r\n\r\n[...]\r\n\r\nfor k, v := range m {\r\n  m[k] = v + 1\r\n}\r\n```\r\n\r\nIs the above program guaranteed to be legal? Given the strong guarantees on adding and removing elements it seems natural to assume it would be, but explicit clarification from the spec might be good.\r\n\r\n[spec-range]: http://golang.org/ref/spec#RangeClause",
	"user": {
		"login": "jacobsa",
		"id": 202895,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 5,
	"closed_at": "2015-02-19T02:25:38Z",
	"created_at": "2015-02-18T23:50:32Z",
	"updated_at": "2016-06-25T02:01:14Z"
}
