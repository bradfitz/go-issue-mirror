{
	"id": 66053187,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eDuplicate of \u003ca href=\"https://golang.org/issue/377\"\u003eissue #377\u003c/a\u003e.\n\n\"Each if, for, and switch statement is considered to be in its own implicit block.\"\n\nBlocks, The Go Programming Language Specification.\n\u003ca href=\"http://golang.org/doc/go_spec.html#Blocks\"\u003ehttp://golang.org/doc/go_spec.html#Blocks\u003c/a\u003e\n\n\"Unlike regular variable declarations, a short variable declaration may redeclare\nvariables provided they were originally declared in the same block with the same type,\nand at least one of the non-blank variables is new.\"\n\n\"In some contexts such as the initializers for if, for, or switch statements, they can\nbe used to declare local temporary variables (Â§Statements).\"\n\nShort variable declarations, The Go Programming Language Specification.\n\u003ca href=\"http://golang.org/doc/go_spec.html#Short_variable_declarations\"\u003ehttp://golang.org/doc/go_spec.html#Short_variable_declarations\u003c/a\u003e\n\nThe behavior for all short variable declarations is the same. The short variable\ndeclaration of i in the for statement block doesn't redeclare the variable i in the\nouter block since \"a short variable declaration may redeclare variables provided they\nwere originally declared in the same block.\" Therefore, the variable i in the for\nstatement block, a local temporary variable, is not used.\n\nA simpler illustration.\n\n\tvar x int = 0\n\t{\n\t\tx := 1\n\t}\n\tprint(x)\n\nerror: 3: x declared and not used\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-11-02T14:22:15Z",
	"updated_at": "2014-12-08T10:07:30Z"
}
