{
	"id": 226527945,
	"body": "    runtime: memory allocated by OS (0x7f092000) not in usable range [0x8f958000,0xffffffff)\r\n\r\nThis error means that the runtime set up a bitmap describing all memory in the range `[0x8f958000,0xffffffff)`, and it asked the OS for memory in that range using `mmap`, but the OS gave it back memory that was not in that range.  Use `strace -f` to see the sequence of `mmap` calls.  Just before the failure you should see an `mmap` requesting memory somewhere in that range, but the OS returning a different value.  You should confirm that, to make sure that my analysis is correct.\r\n\r\nThese adjustments could be the result of mmap randomization, which I believe is more aggressive in newer kernels.  What are the values of `/proc/sys/vm/mmap_rnd_bits` and `/proc/sys/vm/mmap_rnd_compat_bits`?\r\n\r\nAs was mentioned above, this should be fixed in the upcoming 1.7 release by https://golang.org/cl/20471.  But we are not going to backport that to the 1.6 release series.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-16T15:50:10Z",
	"updated_at": "2016-06-16T15:50:10Z"
}
