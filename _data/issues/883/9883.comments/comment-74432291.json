{
	"id": 74432291,
	"body": "There is a _difference_ between a nil slice (say, []int(nil)) and an empty slice (say, []int{}). That's why there's a nil value. It does represent the \"not present\" value (as in a pointer that is not present).\r\n\r\nIf nil were the \"zero\" value for other types as well, say a type S struct{ x int }, one would expect similar behavior. But the zero value of an S is S{}. So S(nil) would have to mean the same, and that's odd. Or at the very least there would be two different ways to express the same basic construct, for not very good reasons - something we rather want to avoid (of course there's other things in the language that can be expressed in various ways, var decls come to mind, but those fall out from more general rules).\r\n\r\nSo thanks for the idea, but this is working as intended. Also, the right forum for suggestions like this is golang-nuts where you will find a much more rich ground for fruitful discussions of the pros and cons of language ideas.\r\n\r\nPS: Please let's not offensively disgrace other languages - language design is very hard, and almost all languages have borrowed important ideas from predecessors. Thanks.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-15T19:26:32Z",
	"updated_at": "2015-02-15T19:26:32Z"
}
