{
	"id": 235279130,
	"body": "I was curious if that seemingly incorrectly used filepath.Join(foo, \"\") was used elsewhere, so took a quick look last night and noticed a similar issue here in master in the method that computes subpackages:\r\n\r\nhttps://github.com/golang/tools/blob/ed69e84b1518b5857a9f4e01d1f9cefdcc45246e/refactor/rename/mvpkg.go#L148\r\n\r\n```go\r\n\t\tif !strings.HasPrefix(pkg, path.Join(dir, \"\")) {\r\n\t\t\treturn\r\n\t\t}\r\n```\r\n\r\nI think the expectation of the author here might have been that appending the empty string would cause a slash to be appended (similar to what might have been the incorrect expectation about the `filepath.Join(from, \"\")` earlier that had the `// Ensure directories have a trailing separator` comment).\r\n\r\nIn any event, it seems the logic here in is wrong, because packages with shared prefixes can incorrectly match here in this `subpackages` method.\r\n\r\nFor example, if you set up the following (and note the shared prefix between the first two):\r\n\r\ngithub.com/user/old_something\r\ngithub.com/user/old_something_else\r\ngithub.com/user/new_something_else\r\n\r\nAnd then try to move old_something to new_something, in theory that should work (and old_something_else should be left alone).\r\n\r\nHowever, because old_something_else shares a prefix with old_something (where old_something is the user's requested 'from'), the code here in `subpackages` incorrectly thinks old_something_else is a sub-package of old_something, and incorrectly sets up the `destinations` map (that is, intending to move old_something_else when it shouldn't), and hence the code gets ready to (incorrectly) move old_something_else to new_something_else, which then collides with the pre-existing new_something_else, which reports an error\r\n\r\ngomvpkg: invalid move destination: github.com/user/new_something; package or subpackage github.com/user/new_something_else already exists.\r\n\r\nI think (but did not confirm) that would happen on Linux as well (that is, not specific to backslash vs. forward slash confusion on Windows).\r\n\r\nThat's one example I could see would fail and then tested it (and it did give incorrect error above), but I think  in theory a different example could also incorrectly update an \"innocent bystander\" package's contents based on a second \"innocent bystander\" package sharing a prefix with a package that is being moved (though some chance other defensive sanity checks would prevent it and/or the subsequent code might otherwise \"get lucky\"; I didn't try a different test).\r\n\r\nFinally, I believe this is likely already 100% clear to anyone who worked on #16384, but to summarize the current state of #16384 (as of right now and when I looked at it a couple days ago):\r\n\r\n* Issue #16384 is marked closed in github\r\n* Associated CL that is merged: https://go-review.googlesource.com/#/c/24943/\r\n* Associated CL that is not yet merged: https://go-review.googlesource.com/#/c/24969/\r\n\r\nWhen I had looked at it before, I had incorrectly thought #16384 was 'done' and in master.  Alex above pointed out above that CL 24969 is still pending, which is the CL that re-enables the tests, so only part of the changes for #16384 are currently in master.",
	"user": {
		"login": "thepudds",
		"id": 20628140,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-26T14:09:49Z",
	"updated_at": "2016-07-26T15:40:39Z"
}
