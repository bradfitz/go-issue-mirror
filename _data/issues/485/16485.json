{
	"id": 167254733,
	"number": 16485,
	"state": "open",
	"title": "x/tools/refactor/rename: fails to move nested packages on Windows with error \"invalid move destination ...  package or subpackage \u003corigpkg\u003e already exists\" (suspect backslash vs. forward slash issue)",
	"body": "**1) What version of Go are you using (`go version`)?**\r\n\r\n```\r\ngo version go1.5.2 windows/amd64\r\n```\r\nNote: One of my colleagues first hit this same problem on 1.6.2.  I personally happen to be still be using go 1.5.2 and would prefer not to upgrade right now on my laptop, but I at least endeavored to get the latest gomvpkg (which is where I think the bug is) and still saw this problem. In other words, I don't think this is specific to my having a core of 1.5.2, and I think this problem is present in the latest versions. \r\n\r\n**2) What operating system and processor architecture are you using (`go env`)?**\r\n\r\n```\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOEXE=.exe\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOOS=windows\r\nset GOPATH=C:\\temp\\golang_bug_report\\refactor\\work\r\nset GORACE=\r\nset GOROOT=C:\\Go\r\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_amd64\r\nset GO15VENDOREXPERIMENT=\r\nset CC=gcc\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\n```\r\n\r\n**3) What did you do?**\r\n\r\nTry to move a nested package on Windows using gomvpkg, such as:\r\n\r\n```\r\n%GOPATH%\\bin\\gomvpkg -from github.com/user/originalhello -to github.com/user/newhello\r\n```\r\nDetails below, including (hopefully) exact steps to reproduce at the bottom.\r\n\r\n**4) What did you expect to see?**\r\n\r\nThe package moved.\r\n\r\n**5) What did you see instead?**\r\n\r\nFailed to move package, with error:\r\n\r\ngomvpkg: invalid move destination: github.com/user/newhello; package or subpackage github.com/user/originalhello already exists.\r\n\r\n## Details\r\n\r\nWhen moving a nested package such as \"github.com/user/originalhello\", gomvpkg fails with error reporting that the *original* package already exists, such as:\r\n\r\ngomvpkg: invalid move destination: github.com/user/newhello; package or subpackage github.com/user/**originalhello** already exists.\r\n \r\nOn Linux, moving the same nested packages seems to work.\r\n\r\nI suspect that the code is getting confused about backslash vs. slash on Windows, which causes a strings.Replace to fail, which then causes the code to think that the destination is the same as the source, which then causes sanity checking to fail, which then causes a failure to move the package as well as an error stating the (incorrect) destination already exists.\r\n \r\n(The primary problem is that the package move fails -- the fact that the error message is complaining that the *original* package exists is a little confusing, given that upon reading the error message one might think \"Of course the original package exists, but why is that causing a failure??\". But I think that's due to the later code I think appropriately being paranoid and I think appropriately detecting that the earlier code had come up with an incorrect destination).\r\n\r\nNote: I am guessing that this particular failure is neither fixed by nor caused by #16384 (\"refactor/rename: fix two bugs related to MS Windows' path separator\") that was merged ~9 days ago. I could reproduce this particular failure both before the fix for #16384, as well as I seemed to still be able to reproduce this particular failure after updating to get the fix for #16384.\r\n\r\nI'll confess I'm still relatively new to Go, so please take with a healthy dose of salt, but I'm guessing this is the problematic code:\r\n\r\nhttps://github.com/golang/tools/blob/ed69e84b1518b5857a9f4e01d1f9cefdcc45246e/refactor/rename/mvpkg.go#L83\r\n\r\n```go\r\n\t\t// Ensure directories have a trailing separator.\r\n\t\tdest := strings.Replace(pkg,\r\n\t\t\tfilepath.Join(from, \"\"),\r\n\t\t\tfilepath.Join(to, \"\"),\r\n\t\t\t1)\r\n\t\tdestinations[pkg] = filepath.ToSlash(dest)\r\n```\r\n\t\t\r\nIf you set up a simple 'github.com/user/originalhello' package (detailed steps at end), and then do:\r\n\r\n```\r\n%GOPATH%\\bin\\gomvpkg -from github.com/user/originalhello -to github.com/user/newhello\r\n```\r\n\r\nThen, the corresponding values of the main variables in the snippet above will be:\r\n\r\n```\r\n              pkg:  \"github.com/user/originalhello\"\r\n             from:  \"github.com/user/originalhello\"\r\n               to:  \"github.com/user/newhello\"\r\n```\r\n\r\nAnd then strings.Replace will fail because `from` and `to` are first transformed to backslash on Windows by filepath.Join, with sample string values that are then passed into strings.Replace (substituting sample string values in here for illustration) would be:\r\n\r\n```go\r\n  \"github.com/user/originalhello\" := strings.Replace(\"github.com/user/originalhello\",\r\n                                                     \"github.com\\\\user\\\\originalhello\",\r\n                                                     \"github.com\\\\user\\\\newhello\",\r\n                                                     1)\r\n```\r\n\r\nNote that the strings.Replace in this case is a no-op due to the mismatch between backslash vs. forward slash (that is, strings.Replace returns a string containing **originalhello**, rather than the expected **newhello**).\r\n\r\nThe net result is the destination ends up incorrectly being the **same** as the source:\r\n\r\n```\r\n       the destination for pkg:  \"github.com/user/originalhello\"\r\n          is destinations[pkg]:  \"github.com/user/originalhello\"\r\n```\r\n\r\nWhich I think then triggers this error in the later validation code that sees the incorrect *destination* of 'originalhello' already exist:\r\n\r\ngomvpkg: invalid move destination: github.com/user/newhello; package or subpackage github.com/user/**originalhello** already exists.\r\n\t\r\nDetailed steps to reproduce at the end, including a few fmt.Print's that I used to output (more or less) the more detailed explanatory text above.\r\n\r\n## Possible fix\r\n\r\nI'm definitely not 100% sure of this, but I suspect one fix might be to change from 'filepath.Join' to be 'path.Join' given I **think** that `pkg`, `from`, and `to` are import paths (with forward slashes) at this point and not locations on disk (with back slashes). \r\n\r\n```diff\r\ndiff --git a/refactor/rename/mvpkg.go b/refactor/rename/mvpkg.go\r\nindex cd416c5..e44b975 100644\r\n--- a/refactor/rename/mvpkg.go\r\n+++ b/refactor/rename/mvpkg.go\r\n@@ -81,8 +81,8 @@ func Move(ctxt *build.Context, from, to, moveTmpl string) error {\r\n                }\r\n                // Ensure directories have a trailing separator.\r\n                dest := strings.Replace(pkg,\r\n-                       filepath.Join(from, \"\"),\r\n-                       filepath.Join(to, \"\"),\r\n+                       path.Join(from, \"\"),\r\n+                       path.Join(to, \"\"),\r\n                        1)\r\n                destinations[pkg] = filepath.ToSlash(dest)\r\n        }\r\n```\r\n\r\nThat at least seemed to solve it for me, and \"go test golang.org/x/tools/refactor/rename\" still passes with that change (on Windows, anyway).\r\n\r\nIf that is the proper fix, then it might be the case that the subsequent \"destinations[pkg] = filepath.ToSlash(dest)\" might no longer be needed, but I did not look at that aspect carefully at all (nor did I try to test removing that filepath.ToSlash)\r\n\t\t\t\t\r\nOr, if the appropriate fix is not changing filepath.Join to path.Join here, then I would guess the fix is otherwise to make the slash \u0026 backslash transformations consistent so that the strings.Replace succeeds. \r\n\r\n## Detailed steps to reproduce\r\n\r\nEither follow these steps, or in theory pasting this into a Windows command prompt should work:\r\n\r\n```batch\r\nREM  Follow steps from \"How to Write Go Code\" to set up a workspace, except \r\nREM  name your package 'originalhello' rather than 'hello':\r\n\r\nmkdir C:\\temp\\golang_bug_report\\refactor\\work\r\nset GOPATH=C:\\temp\\golang_bug_report\\refactor\\work\r\necho %GOPATH%\r\nmkdir %GOPATH%\\src\\github.com\\user\r\n\r\nREM  Create a hello world in github.com/user/originalhello:\r\nmkdir %GOPATH%\\src\\github.com\\user\\originalhello\r\n\r\nREM  Create a file named hello.go in %GOPATH%\\src\\github.com\\user\\originalhello\\hello.go, e.g.,:\r\nnotepad %GOPATH%\\src\\github.com\\user\\originalhello\\hello.go\r\n```\r\n\r\n// ---------------------------\r\n// sample file contents for hello.go:\r\n// ---------------------------\r\n\r\n```go\r\npackage originalhello\r\n\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n\tfmt.Printf(\"Hello, world.\\n\")\r\n}\r\n```\r\n\r\nAnd then continue on:\r\n\r\n```batch\r\nREM  Confirm we can build this\r\ngo install github.com/user/originalhello\r\n\r\nREM  Get gomvpkg\r\ngo get golang.org/x/tools/cmd/gomvpkg\r\n\r\nREM  Run it! Try to rename .../originalhello to .../newhello, which incorrectly fails:\r\n\r\n%GOPATH%\\bin\\gomvpkg -from github.com/user/originalhello -to github.com/user/newhello\r\n```\r\n\r\nFor me these steps then cause following error:\r\n\r\ngomvpkg: invalid move destination: github.com/user/newhello; package or subpackage github.com/user/originalhello already exists.\r\n\r\n## Sample fmt.Println to dump incorrect Windows behavior of gomvpkg\r\n\r\nAs mentioned above, here are the sample fmt.Print's that I used to try to illustrate the incorrect behavior when called on Windows with a nested package.  (Apologies in advance if this is confusing, but these fmt.Print's include some explanatory text that assume the presence of the bug and that the bug is being triggered via the detailed steps to reproduce above. In other words, these are the fmt.Print's I happen to use to generate the more detailed text for my explanation above in this bug write up, so sending these along as well in case helpful):\r\n\r\n```diff\r\ndiff --git a/refactor/rename/mvpkg.go b/refactor/rename/mvpkg.go\r\nindex cd416c5..46c651a 100644\r\n--- a/refactor/rename/mvpkg.go\r\n+++ b/refactor/rename/mvpkg.go\r\n@@ -83,10 +83,30 @@ func Move(ctxt *build.Context, from, to, moveTmpl string) error {\r\n                dest := strings.Replace(pkg,\r\n                        filepath.Join(from, \"\"),\r\n                        filepath.Join(to, \"\"),\r\n                        1)\r\n                destinations[pkg] = filepath.ToSlash(dest)\r\n+\r\n+               fmt.Printf(\"\\nWith these inputs:\\n\\n\")\r\n+               fmt.Printf(\"              pkg:  %q\\n\", pkg)\r\n+               fmt.Printf(\"             from:  %q\\n\", from)\r\n+               fmt.Printf(\"               to:  %q\\n\", to)\r\n+\r\n+               fmt.Printf(\"\\nReplace will fail when 'to' and 'from' are transformed to backslash on Windows:\\n\\n\")\r\n+               fmt.Printf(`  %q := strings.Replace(%q,\r\n+                                                    %q,\r\n+                                                    %q,\r\n+                                                    1)`,\r\n+                       destinations[pkg],\r\n+                       pkg,\r\n+                       filepath.Join(from, \"\"),\r\n+                       filepath.Join(to, \"\"))\r\n+\r\n+               fmt.Printf(\"\\n\\nNet result is destination ends up incorrectly being same as source:\\n\\n\")\r\n+               fmt.Printf(\"   destination for:  %q\\n\", pkg)\r\n+               fmt.Printf(\"                is:  %q\\n\\n\", destinations[pkg])\r\n+\r\n        }\r\n```\r\n",
	"user": {
		"login": "thepudds",
		"id": 20628140,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"created_at": "2016-07-24T21:12:09Z",
	"updated_at": "2016-07-29T21:08:10Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
