{
	"id": 168492626,
	"number": 16552,
	"state": "open",
	"title": "x/crypto/ssh/terminal: ReadPassword skips input on Windows with 15 character input",
	"body": "**Issue**\r\n\r\nOn Windows 10, when `terminal.ReadPassword` is called twice in succession (e.g. for password prompt and confirmation), and the first input is exactly 15 characters, the second call skips input entirely and immediately returns an empty string.\r\n\r\n**Repro**\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"golang.org/x/crypto/ssh/terminal\"\r\n  \"fmt\"\r\n  \"os\"\r\n)\r\n\r\nfunc readPassword(prompt string) string {\r\n  fmt.Print(prompt)\r\n  pass, err := terminal.ReadPassword(int(os.Stdin.Fd()))\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n  println()\r\n  return string(pass)\r\n}\r\n\r\nfunc main() {\r\n  pass := readPassword(\"Password: \")\r\n  confirm := readPassword(\"Confirm: \")\r\n  fmt.Printf(\"%s -- %d\\n\", pass, len(pass))\r\n  fmt.Printf(\"%s -- %d\\n\", confirm, len(confirm))\r\n}\r\n```\r\n\r\nFor a working scenario, use `test` (or any non-15-character string) for the password and confirmation. You'll see the following output, as expected:\r\n\r\n```\r\nPassword:\r\nConfirm:\r\ntest -- 4\r\ntest -- 4\r\n```\r\n\r\nFor the failing scenario, use `testtesttesttes` (or any 15 character string) for the password. You will not be prompted for confirmation, and the program will output:\r\n\r\n```\r\nPassword:\r\nConfirm:\r\ntesttesttesttes -- 15\r\n -- 0\r\n```\r\n\r\nIn this scenario, I expect the second call to `terminal.ReadPassword` to prompt for input (just like the working scenario), but it doesn't.\r\n\r\n**Environment**\r\n\r\n- Windows 10 10.0.10586 amd64\r\n- go version go1.6.3 windows/amd64\r\n\r\n**Notes**\r\n\r\n* This doesn't repro on OSX\r\n* My guess is that this some kind of buffer issue. I haven't dug deeply, but the main difference I see between [`util.go`](https://github.com/golang/crypto/blob/911fafb28f4ee7c7bd483539a6c96190bbbccc3f/ssh/terminal/util.go#L92) and [`util_windows.go`](https://github.com/golang/crypto/blob/3fbbcd23f1cb824e69491a5930cfeff09b12f4d2/ssh/terminal/util_windows.go#L129) is the `\\r` handling on Windows. This might be related.\r\n* You can use [gopass](https://github.com/howeyc/gopass) as a workaround. It provides similar functionality and does not have this problem. It appears to operate quite differently, however, by reading individual characters from a raw terminal.",
	"user": {
		"login": "schmich",
		"id": 1562839,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"created_at": "2016-07-30T23:40:39Z",
	"updated_at": "2016-08-02T06:00:25Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
