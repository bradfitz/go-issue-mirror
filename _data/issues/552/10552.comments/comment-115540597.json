{
	"id": 115540597,
	"body": "Hard-coding the RFC 6724 rules would solve 99% of the problem, and I would not personally object to leaving the full gai.conf parser for post-1.5.\r\n\r\nPragmatically, the parts that *really matter* for Internet connectivity are:\r\n- Avoid unusable destinations.\r\n- If IPv6 would use a 6to4/Teredo/ULA source address, then prefer IPv4.\r\n- Otherwise prefer IPv6.\r\n\r\nThe standard approach is to probe each address using UDP `connect` and `getsockname`, to obtain reachability and source address information from the kernel.\r\n\r\n-\r\n\r\nThe current resolver picks IPv4/IPv6 at random.  Even if both are available, this is undesirable for network and service operators because it makes IPv6 less effective as a NAT offloading tool, and logging/debugging gets annoying when the client can't make up its mind.\r\n\r\nOn an IPv4-only or IPv6-only machine, preferring the wrong family causes `dialSerial` to spin through a few `ENETUNREACH`es before finding an address that works.  This is quite fast on Linux, but I've observed that Windows consistently takes 1 second for `connect` to fail, which is noticeable but not catastrophic.\r\n\r\n6to4/Teredo have proven to be unreliable on the Internet, so not de-preffing those means that a small fraction of users will have a really bad time.",
	"user": {
		"login": "pmarks-net",
		"id": 4578188,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-26T06:26:48Z",
	"updated_at": "2015-06-26T07:04:31Z"
}
