{
	"id": 51286722,
	"number": 7448,
	"state": "closed",
	"title": "runtime: efence crash with long-running programs",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\n\nUsing 8g, run \u003ca href=\"http://play.golang.org/p/-tP949AItw\"\u003ehttp://play.golang.org/p/-tP949AItw\u003c/a\u003e with efence=1:\n\nGODEBUG=efence=1 go run loop.go\n\n\nWhat is the expected output? What do you see instead?\n\nWant: Run until I get bored.\n\nGot: Crash within moments.\n\nsweep 0 48\nfatal error: gc: unswept span\n\nruntime stack:\nruntime.throw(0x9ef58)\n\t.../src/pkg/runtime/panic.c:464 +0x5f\nmarkroot(0x101f2000, 0x3)\n\t.../src/pkg/runtime/mgc0.c:1297 +0x24f\nruntime.parfordo(0x101f2000)\n\t.../src/pkg/runtime/parfor.c:88 +0x99\ngc(0x302c7e60)\n\t.../src/pkg/runtime/mgc0.c:2323 +0x169\nmgc(0x101da000)\n\t.../src/pkg/runtime/mgc0.c:2273 +0x2b\nruntime.mcall(0x2199f)\n\t.../src/pkg/runtime/asm_386.s:190 +0x3c\n\ngoroutine 16 [garbage collection]:\nruntime.gc(0x0)\n\t.../src/pkg/runtime/mgc0.c:2242 +0x196 fp=0x302c7e6c\nruntime.mallocgc(0x2000, 0x0, 0x0)\n\t.../src/pkg/runtime/malloc.goc:206 +0x186 fp=0x302c7ea0\nruntime.mal(0x28)\n\t.../src/pkg/runtime/malloc.goc:774 +0x38 fp=0x302c7eb0\nreflect.mapiterinit(0x40420, 0x0, 0x0)\n\t.../src/pkg/runtime/hashmap.goc:1027 +0x29 fp=0x302c7ec0\nreflect.Value.MapKeys(0x40420, 0x0, 0x0, 0x150, 0x0, ...)\n\t.../src/pkg/reflect/value.go:1222 +0xeb fp=0x302c7f58\nmain.main()\n\t.../test/mk.go:8 +0x69 fp=0x302c7f98\nruntime.main()\n\t.../src/pkg/runtime/proc.c:245 +0xfa fp=0x302c7fcc\nruntime.goexit()\n\t.../src/pkg/runtime/proc.c:1452 fp=0x302c7fd0\ncreated by _rt0_go\n\t.../src/pkg/runtime/asm_386.s:101 +0xf7\nexit status 2\n\nPlease use labels and text to provide additional information.\n\nI think (but am not 100% sure) that this is just a problem with the efence\nimplementation, not a deeper GC/reflect problem. I think that this happens because the\nallocator hands out the same address twice, not knowing that the backing memory has been\nreturned to the OS in the meantime. Dmitry pointed out this possibility in the original\nefence CL review (\u003ca href=\"https://golang.org/cl/22060046/)\"\u003ehttps://golang.org/cl/22060046/)\u003c/a\u003e.\u003c/pre\u003e",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 15,
	"closed_at": "2014-12-08T10:41:23Z",
	"created_at": "2014-03-03T20:08:45Z",
	"updated_at": "2016-06-25T01:28:50Z",
	"milestone": {
		"id": 1067211,
		"number": 17,
		"title": "Go1.3"
	}
}
