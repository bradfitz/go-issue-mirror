{
	"id": 51283644,
	"number": 5448,
	"state": "open",
	"title": "all: static analysis to proactively free constructed garbage",
	"body": "\u003cpre\u003eIn the following program, the compiler+linker could know that NewIntWriter always\nreturns unretained garbage and that on exit from foo, no reference is held to\n*IntWriter, and an explicit free could be inserted.\n\nYou see this with things like \u003ca href=\"http://golang.org/pkg/encoding/json/#NewEncoder\"\u003ehttp://golang.org/pkg/encoding/json/#NewEncoder\u003c/a\u003e (see also:\n\u003ca href=\"https://golang.org/cl/9365044/)\"\u003ehttps://golang.org/cl/9365044/)\u003c/a\u003e\n\nInstead, it generates garbage:\n\nBenchmarkAllocs\t 2000000\t       819 ns/op\t    1057 B/op\t       1 allocs/op\n\npackage main\n\nimport (\n        \u0026quot;fmt\u0026quot;\n        \u0026quot;io\u0026quot;\n        \u0026quot;io/ioutil\u0026quot;\n        \u0026quot;testing\u0026quot;\n)\n\ntype IntWriter struct{\n        w   io.Writer\n        state [1000]byte\n}\n\nfunc NewIntWriter(w io.Writer) *IntWriter {\n        return \u0026amp;IntWriter{w: w}\n}\n\nfunc (iw *IntWriter) WriteInt(n int) {\n        fmt.Fprintf(iw.w, \u0026quot;%d\u0026quot;, n)\n}\n\nfunc BenchmarkAllocs(b *testing.B) {\n        b.ReportAllocs()\n        for i := 0; i \u0026lt; b.N; i++ {\n                foo()\n        }\n}\n\nfunc foo() {\n        NewIntWriter(ioutil.Discard).WriteInt(123)\n}\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "GarbageCollector"
		},
		{
			"name": "Performance"
		}
	],
	"comments": 5,
	"created_at": "2013-05-13T00:11:40Z",
	"updated_at": "2015-04-14T19:45:19Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
