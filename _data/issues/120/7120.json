{
	"id": 51286216,
	"number": 7120,
	"state": "closed",
	"title": "reflect: gccgo and libffi disagree about calling convention on arm64 for small array arguments",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\n1.\nmwhudson@am1:~$ cat t.go\npackage main\n\nimport (\n        . \u0026quot;reflect\u0026quot;\n        )\n\nfunc second(e [2]uintptr) uintptr {\n        return e[1]\n}\n\nfunc main() {\n        ValueOf(second).Call([]Value{\n                ValueOf([2]uintptr{40, 50}),\n        })\n}\n\n2.\n\nmwhudson@am1:~$ gccgo-4.8 -g -O2 t.go -o t\n\n3.\n\nmwhudson@am1:~$ ./t\n\nWhat is the expected output?\n\nNothing.\n\nWhat do you see instead?\n\n\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x30]\n\ngoroutine 1 [running]:\nmain.second\n\t/home/mwhudson/t.go:7\nmain.main\n\t/home/mwhudson/t.go:12\n\ngoroutine 3 [runnable]:\n\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n\ngccgo\n\nWhich operating system are you using?\n\nUbuntu Trusty.\n\nWhich version are you using?  (run 'go version')\n\n4.8\n\nPlease provide any additional information below.\n\nThis seems to be down to gccgo-compiled functions expecting arrays to be passed as\npointers:\n\n(gdb) disassemble main.second\nDump of assembler code for function main.second:\n   0x0000000000401128 \u0026lt;+0\u0026gt;:\tldr\tx0, [x0,#8]\n   0x000000000040112c \u0026lt;+4\u0026gt;:\tret\nEnd of assembler dump.\n\nbut libffi calling functions that take sufficiently small arrays using registers:\n\n(gdb) r                      \nStarting program: /home/mwhudson/t \nFailed to read a valid object file image from memory.\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \u0026quot;/lib/aarch64-linux-gnu/libthread_db.so.1\u0026quot;.\n[New Thread 0x7fa726f270 (LWP 3522)]\n\nProgram received signal SIGSEGV, Segmentation fault.\nmain.second (e=\u0026lt;error reading variable: That operation is not available on integers\nof more than 8 bytes.\u0026gt;)\n    at t.go:7\n7\tfunc second(e [2]uintptr) uintptr {\n(gdb) p $x0\n$1 = 40\n(gdb) p $x1\n$2 = 50\n\nI don't know what the right fix is for this.  Changing gccgo compiled code would be\ncleanest but would be an ABI break I think... I can't see a way to convince libffi to\npass these args in memory but maybe I'm just being unimaginative there.\u003c/pre\u003e",
	"user": {
		"login": "mwhudson",
		"id": 672022,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 11,
	"closed_at": "2014-12-08T10:39:35Z",
	"created_at": "2014-01-14T00:16:18Z",
	"updated_at": "2016-06-25T01:25:33Z"
}
