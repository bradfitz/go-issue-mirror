{
	"id": 163836886,
	"body": "Here's what I finally resorted to in order to be able to share my test data and helper functions with other packages.\r\n\r\n1.  Renamed testdata_test.go to testdata.go (thereby removing from test scope)\r\n1.  Added this build tag to the file:  // +build !release\r\n1.  Changed build scripts to build with `release` tag for distribution\r\n\r\nThus, my test code is always available when I'm testing (and even when I'm not), but doesn't get included in released binaries.  This is a hack, but I decided this was a better solution than either:\r\n\r\n1.  Unnaturally combining packages for the sake of sharing test data/code; or\r\n1.  Duplicating (and needing to maintain) test data/code across all packages that use it\r\n\r\nSupporting `test` as a build tag would accomplish the same thing more elegantly.\r\n\r\nI don't see how your suggestion to create a \"separate test helper package\" would help.  Regardless of whether the code lives in my current `models` package or a new `models_test_helper` package, code will only be visible to other packages if exported from `.go` files instead of `_test.go` files.\r\n\r\nI'm also somewhat skeptical about this being as dangerous as you say.  Did you have a specific example in mind of how this could result in \"a bug that only happens in tests, or worse, that only happens when the package is not used not in tests\"?",
	"user": {
		"login": "mmindenhall",
		"id": 1106269,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-11T04:34:04Z",
	"updated_at": "2015-12-11T04:34:04Z"
}
