{
	"id": 96415250,
	"number": 11807,
	"state": "closed",
	"title": "syscall: mksyscall_windows.go should optionally treat string as UTF16 even if function does not end with W",
	"body": "When creating stubs for Windows DLL routines, mksyscall_windows.go currently maps string parameters to *byte by default and to *uint16 (with UTF-16 conversion) only if the function's name ends in W. There are many Windows routines that take UTF-16 strings but do not end in W. It would be more generally useful if there were a per-syscall or per-parameter option to specify the string width. I'm trying to use mksyscall_windows for a project, and I have to use *uint16 + manual string conversion all over the place because our UTF-16-accepting APIs do not end in W.\r\n\r\n(As a side not, it's not clear to me if it's really supported to use mksyscall_windows outside of the go source tree, although there is precedent in some packages on GitHub.)\r\n\r\nI'm happy to make the change to mksyscall_windows if someone else will do the bikeshedding for me on how to specify this :). E.g. if I want to import BOOL PathCchIsRoot(PCWSTR), what should I write? The following? Other ideas?\r\n\r\n    //sys PathCchIsRoot(p string [utf16]) (r bool)\r\n\r\n@alexbrainman",
	"user": {
		"login": "jstarks",
		"id": 9548354,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "OS-Windows"
		}
	],
	"comments": 1,
	"closed_at": "2015-07-22T07:22:43Z",
	"created_at": "2015-07-21T21:01:44Z",
	"updated_at": "2016-08-05T16:10:47Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
