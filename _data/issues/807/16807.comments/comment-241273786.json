{
	"id": 241273786,
	"body": "\"Packages that import unsafe may be non-portable and are not protected by\nthe Go 1 compatibility guidelines.\"\nGiven the above we should stick with the current wording. \"equivalent\nmemory layout\" may not be perfect but it provides room for future\noptimizations in the compiler and runtime. If code needs more precision\nthan \"equivalent memory layout\" or provokes discussions about what it means\nthen it should be taken as a warning that the code being written is likely\nto require continual maintenance with each future releases of Go.\n\n\n\n\nOn Fri, Aug 19, 2016 at 5:26 PM, Matthew Dempsky \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e One of package unsafe's valid patterns is:\n\u003e\n\u003e (1) Conversion of a *T1 to Pointer to *T2.\n\u003e\n\u003e Provided that T2 is no larger than T1 and that the two share an equivalent\n\u003e memory layout, this conversion allows reinterpreting data of one type as\n\u003e data of another type.\n\u003e\n\u003e There have been arguments about what \"equivalent memory layout\" means\n\u003e (e.g., #16769 \u003chttps://github.com/golang/go/issues/16769\u003e, and the \"Guarantees\n\u003e for package unsafe\"\n\u003e \u003chttps://groups.google.com/forum/#!topic/golang-dev/uCP4P12xS9Y\u003e thread\n\u003e on golang-dev).\n\u003e\n\u003e E.g., in C/C++, it's valid to cast from a pointer to a struct to a pointer\n\u003e to another struct containing a prefix of the fields to support things like\n\u003e casting from struct sockaddr_in * to struct sockaddr *. But package\n\u003e unsafe gives an example of converting from *float64 to *uint64, which\n\u003e wouldn't be valid in C/C++.\n\u003e\n\u003e In crypto/md5\n\u003e \u003chttps://github.com/golang/go/blob/master/src/crypto/md5/md5block.go#L41\u003e,\n\u003e there's code that converts \u0026p[0] (of type *byte) to *[16]uint32, after\n\u003e verifying len(p) \u003e= 48. Assuming we think this should remain valid, that\n\u003e seems to suggest it's okay to convert *[4]byte to *uint32; i.e., that\n\u003e primitive data types need not exactly match in size either.\n\u003e\n\u003e    - Aside: Technically this conversion isn't protected by rule 1 anyway,\n\u003e    because T2 ([16]uint32) is larger than T1 (byte), but I think it's\n\u003e    arguably within the spirit of the rule because of the length check.\n\u003e\n\u003e My understanding of the phrase's intent was to disallow accessing pointer\n\u003e slots as non-pointer types. E.g., you can't convert from **int to *uintptr,\n\u003e even though sizeof(*int) == sizeof(uintptr).\n\u003e\n\u003e @dr2chase \u003chttps://github.com/dr2chase\u003e suggested that it could be\n\u003e interpreted to imply sensitivity to the machine's endianness, which may\n\u003e disallow converting *uint64 to *uint16.\n\u003e\n\u003e In https://go-review.googlesource.com/#/c/18640/ this wording was\n\u003e discussed:\n\u003e\n\u003e @alandonovan \u003chttps://github.com/alandonovan\u003e: Is \"equivalent memory\n\u003e layout\" defined anywhere?\n\u003e @rsc \u003chttps://github.com/rsc\u003e: No, but I'd rather not. I'm trying to\n\u003e write useful text without writing a legal document. I hope people can at\n\u003e least understand memory layouts and whether the conversion they want makes\n\u003e sense. If not they probably shouldn't be using unsafe.\n\u003e\n\u003e Unfortunately it seems even within the Go compiler team there's\n\u003e disagreement/uncertainty on what \"equivalent memory layout\" means, even for\n\u003e concrete examples like converting *uint64 to *uint16.\n\u003e\n\u003e /cc @ianlancetaylor \u003chttps://github.com/ianlancetaylor\u003e @randall77\n\u003e \u003chttps://github.com/randall77\u003e\n\u003e\n\u003e â€”\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/16807\u003e, or mute the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AA7Wn8bBYEeqFV9UizlHIliyWkJrX2JMks5qhh-jgaJpZM4Jo3nL\u003e\n\u003e .\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-21T18:37:19Z",
	"updated_at": "2016-08-21T18:37:19Z"
}
