{
	"id": 123588770,
	"body": "\u003e ... It would be more generally useful if there were a per-syscall or per-parameter option to specify the string width. I'm trying to use mksyscall_windows for a project, and I have to use *uint16 + manual string conversion all over the place because our UTF-16-accepting APIs do not end in W.\r\n\r\nConverting Go string into []uint16 is not free. So we're always try to leave it for the caller to decide if that price is worth it.\r\n\r\nAlso, quite often you have *uint16 field of a struct parameter, rather than *uint16 parameter. You proposal won't handle these.\r\n\r\nI don't think it is worth complicating //sys syntax and mksyscall_windows.go code.\r\n\r\nBut feel free to copy mksyscall_windows.go and change it to your liking. I've done it few times myself.\r\n\r\n\u003e ... (As a side not, it's not clear to me if it's really supported to use mksyscall_windows outside of the go source tree, although there is precedent in some packages on GitHub.)\r\n\r\nUse it if it works for you, but be prepared if it breaks your programs and all.\r\n\r\nI always use it for my projects - it allows me concentrate on the job rather than spend time making syscalls right. These mistakes can be fatal.\r\n\r\nAlso mksyscall_windows.go generates GC safe code for syscalls with string parameters (applicable to your case).\r\n\r\nFeel free to reopen if I left something out.\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-22T07:22:43Z",
	"updated_at": "2015-07-22T07:22:43Z"
}
