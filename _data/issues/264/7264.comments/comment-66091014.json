{
	"id": 66091014,
	"body": "\u003ca id=\"c7\"\u003e\u003c/a\u003eComment 7:\n\n\u003cpre\u003eI will try to provide more reliable reproducer today.\n\n\u003e Maybe I could imagine a scenario where the second HTTP request actually connects, but\nthe machine is so loaded, the Go scheduler doesn't run the http Handler goroutine for\nseconds, meanwhile the client code goroutine does run and passes, the func exits, and\nthen the Handler runs.\n\nThe race detector does not care about timings, it watches when things are not\nsynchronized.\n\n\u003e I totally understand what you're talking about with wg.Add(1) being done in a\ngoroutine (and I'll send a CL for httptest to do the wg.Add(1) earlier)\n\nJust doing wd.Add after Accept won't help. Because if you do http.Get with timeout, then\nyou don't know that even Accept has returned when timeout fires.\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-04T03:37:30Z",
	"updated_at": "2014-12-08T10:40:23Z"
}
