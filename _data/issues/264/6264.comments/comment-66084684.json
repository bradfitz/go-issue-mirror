{
	"id": 66084684,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eHere's a better way of framing the issue\n\nPackage a:\ntype Distribution interface{\n     Prob(float64) float64\n     Quantile(float64) float64\n     CumProb(float64) float64\n}\n\ntype Fitter interface{\n     Fit(x []float64) Distribution\n}\n\n----------\npackage b\ntype Prober interface{\n     Prob(float64) float64\n}\n\ntype Fitter interface{\n     Fit(x []float64) Prober\n}\n------\n\nBoth packages want a type that can fit a probability distribution to a set of samples.\nThe two packages have different definitions of what a \"probability distribution\" is,\nthough package B's requirements are strictly less than package A's requirements. In Go\ntoday, it's impossible to create a single type which satisfies both the a.Fitter and the\nb.Fitter interfaces, despite the fact that the type returned by Fit satisfies both the\na.Distribution and the b.Prober interface. One has to create a wrapper type like NewFoo\nabove.\u003c/pre\u003e",
	"user": {
		"login": "btracey",
		"id": 3680859,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-28T16:18:48Z",
	"updated_at": "2014-12-08T10:34:27Z"
}
