{
	"id": 66069637,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eniladic function\n\nI have no problem with this being on the back burner, but a clarification:\n\nAuto-invocation of function values came up in the context of\nevaluations that returned functions, such as a function-typed struct\nfield or a method call returning a function. The ambiguity happened\nbecause sometimes you do want the func value, and auto-invocation was\nmaking that impossible to get. However, predefined functions and also\nmethod references have always been auto-invoked, because there is no\nuninvoked form to preserve.\n\nI think I overgeneralized and put too much in the test case.\nRegardless of what the test case says, let's make this issue about the\nfollowing.\n\n\u003ca href=\"http://golang.org/pkg/text/template/#Arguments\"\u003ehttp://golang.org/pkg/text/template/#Arguments\u003c/a\u003e describes what an\nargument is. Rephrased, I believe it defines the current behavior as:\n\n- .Field, referring to a field of the current cursor\n- .Method, referring to a niladic method of the current cursor\n- $x, referring to the variable x\n- arg.Field or arg.Method (niladic), where arg is one of the argument\nforms in this list up to and including this entry\n- ideal constants such as 0 or \"hello\"\n- 'fun', referring to a niladic function installed under the name 'fun'.\n\nThe suggestion is to generalize and simplify the arg.Field/arg.Method line to:\n\n- arg.Field or arg.Method (niladic), where arg is any argument\n\nThis generalization has no effect on ideal constants since they have\nno fields or methods, but it would allow fun.Field1 the same way that\n$x.Field1 and .Method.Field1 are already allowed.\n\nThe generalization would, if parenthesized expressions were added,\nalso allow (x | y).Field1, since a parenthesized expression would\nbecome a valid kind of argument.\n\nRuss\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-08-24T14:56:49Z",
	"updated_at": "2014-12-08T10:21:13Z"
}
