{
	"id": 66084790,
	"body": "\u003ca id=\"c7\"\u003e\u003c/a\u003eComment 7 by **nagle@animats.com**:\n\n\u003cpre\u003eThere's been considerable discussion of this subject on \"comp.lang.go.general\".\n\nAreas of agreement:\n\n   There seems to be a consensus that multidimensional arrays and slices in Go would be useful for numerical work.\n\n   The array element access syntax generally proposed is \n\n       arr[n,m]     // 2D\n       arr[n,m,o]   // 3D\n\netc.  Existing arrays of arrays would be retained in Go. Arrays of arrays can be\n\"ragged\",\n(rows of different length) but multidimensional arrays are always of uniform length in\neach dimension, allowing FORTRAN-type optimizations. \n\n   Both fixed-size multidimensional array types defined at compile time and arrays sized\nat run time have use cases.  The former are widely used for graphics, and the latter are\nwidely used for general numerical work.  It should be possible to pass both as parameters\nto functions, although not necessarily the same functions.\n\n\nAreas of disagreement:\n\n   There's much disagreement over what facilities for reslicing and reshaping should\nbe provided. \n\n   The minimum capability discussed is the ability to pass an entire array or \nmultidimensional slice object to a function.  Creating a slice which refers\nto a portion of an array, though, is controversial. Syntactically, this refers\nto expressions of the form\n\n         arr[a0:a1, b0:b1]\n\nThe problem is that values of b0 and b1 which are smaller than the array bounds\nresult in the need to represent a kind of sparse array, where the memory\ndistance between adjacent elements is not the same as the size of an element.\nThis complicates the internal representation of slices; even the lowest dimension\nmust have a \"stride\" value.  There's a performance penalty for this feature when it\nnot being used.  But it is convenient to have.  \n\n   The other big issue is the ability to \"grow\" multidimensional slices. \nShould \"append\" be allowed for multidimensional arrays, and if so, how\ngeneral should it be?  Is growth allowed in all dimensions?  It's a useful\ncapability but complicates the implementation considerably. \n\n   Those are the two biggest issues being discussed.\n\n   Lesser issues include whether operators \"+\", \"-\", and \"*\" should be provided\nas built-in operations for multidimensional arrays and slices.  Providing them\npermits easy transliteration for math libraries in other languages (C++, Matlab\nespecially).  But they're not essential; NumPy uses \"A.dot(B)\" for matrix multiply.\nThere are a lot of cases to handle for \"*\" - vector*scalar, vector*matrix, \nmatrix*matrix...  \"+\" and \"-\" are somewhat simpler.\n\n   That's roughly where the discussions are.  Once the slice and growth issues are\ndecided, the rest should fall into place.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-10T02:43:37Z",
	"updated_at": "2014-12-08T10:34:33Z"
}
