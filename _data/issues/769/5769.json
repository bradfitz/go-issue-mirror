{
	"id": 51284161,
	"number": 5769,
	"state": "closed",
	"title": "spec: method selectors do not auto-dereference",
	"body": "\u003cpre\u003e\u003ca href=\"http://play.golang.org/p/10YJgAZgUi\"\u003ehttp://play.golang.org/p/10YJgAZgUi\u003c/a\u003e\n\nBoth gc and gccgo complain about L12 in the above program, however, L13 is perfectly\nvalid.\n\nAs far as I can tell, nowhere in the spec does it say the L12 should be illegal.\nSpecifically, in \u003ca href=\"http://tip.golang.org/ref/spec#Selectors\"\u003ehttp://tip.golang.org/ref/spec#Selectors\u003c/a\u003e it says: \u0026quot;Selectors\nautomatically dereference pointers to structs.\u0026quot;.\n\nThe variable p is of type P which is a pointer to a struct. Thus, p.m should be the same\nas (*p).m. It appears to be the case for p.x but not for p.m.\n\nI believe this is a bug in the implementations.\n\nFor one, in order to get the same behavior as the compilers, a special case was needed\nin go/types (I just submitted \u003ca href=\"https://golang.org/cl/10459044\"\u003ehttps://golang.org/cl/10459044\u003c/a\u003e to match the\nexisting compilers). Furthermore, no code in the standard library  would break (not\ncompile anymore) if p.m where treated the same as p.x.\n\nW/o looking at the specifics of an implementation, it is odd that only _after_ one knows\nwhat one is looking for (a field or a method) does one know whether the automatic\nindirection in the beginning should be done or not. That doesn't seem right.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		},
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 17,
	"closed_at": "2014-12-08T10:31:38Z",
	"created_at": "2013-06-24T17:43:40Z",
	"updated_at": "2016-06-24T22:43:14Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
