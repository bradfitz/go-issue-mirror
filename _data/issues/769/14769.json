{
	"id": 140104657,
	"number": 14769,
	"state": "closed",
	"title": "Documentation: Effective Go Defer section incorrectly states when defer is executed ",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\nAll versions\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nN/A\r\n\r\n3. What did you do?\r\nRead two articles which describe defer behavior.  The first article is the Effective Go section on Defer  ( https://golang.org/doc/effective_go.html?h=defer ) and second is the \" Go Blog\" article, \"Defer, Panic, and Recover\"  ( http://blog.golang.org/defer-panic-and-recover ).  \r\n\r\nThere is a discrepancy between these two pieces of documentation on how defer behaves in Surrounding Function(Calling Function) with respect to the return statement of the Surrounding Function.   \"Effective Go\" article states defer statement defers the execution immediately before the return of Surrounding Function and the \"Go Blog\" article states the exact opposite, the defer statement defers the execution of the function after the return of the Surrounding Function.\r\n\r\n\r\nIf possible, provide a recipe for reproducing the error.\r\n\r\nThe Go Blog article accurately describes the defer execution behavior. Ran the demo code which proves the deferred function, anonymous function, is called after return of surrounding function c() in this case.\r\nhttp://play.golang.org/p/FqVdPx_leT\r\n\r\n\r\n4. What did you expect to see?\r\nCorrect the Effective Go Defer  documentation section.\r\nI expect to see the Effective Go section on Defer to describe the correct behavior as detailed in the Go Blog article, Panic, Recover and Defer which is \"the defer statement defers the execution of the deferred function after the return of the Surrounding Function\".\r\n\r\n5. What did you see instead?\r\n\r\nDefer\r\n\r\nGo's **defer statement schedules a function call (the deferred function) to be run immediately before the function executing the defer returns.** It's an unusual but effective way to deal with situations such as resources that must be released regardless of which path a function takes to return. The canonical examples are unlocking a mutex or closing a file.\r\n\r\n",
	"user": {
		"login": "kkruups",
		"id": 1913254,
		"type": "User",
		"site_admin": false
	},
	"comments": 11,
	"closed_at": "2016-03-21T12:05:47Z",
	"created_at": "2016-03-11T06:51:10Z",
	"updated_at": "2016-03-21T12:05:47Z"
}
