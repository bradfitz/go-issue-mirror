{
	"id": 195628532,
	"body": "Hi Minux,\n\nClearly the language is wrong and is completely opposite of blog article. Minux you got wrong the context is not the applications main function.  It is the c( ) function the deferred function is in. From that context the the deferred function clearly returns after the deferred anonymous function. The value would have been equal to 1 from c( ) method return, but it is not it is 2, because the value was changed after the return of the c ( ) function which is not a deferred function but does have a deferred function embedded.\n\nPlease use the correct point of reference to understand this subtle difference.  That is why the Effective Go Defer section needs to be revised.  The behavior is clearly contrary to what is stated and the  go Blog has it dead write.\n\nPlease update documentation to help others avoid this confusion.\n\nBR/KK \n\n\u003e On 2016/03/11, at 16:23, Minux Ma \u003cnotifications@github.com\u003e wrote:\n\u003e \n\u003e I don't think before/after \"return\" makes much distinction\n\u003e here. And you can't write a program to distinguish these\n\u003e two cases either.\n\u003e \n\u003e In your example, i++ could also be treated as executed\n\u003e after the function returns but before the Print call executes.\n\u003e \n\u003e Technically it's before the return, but that's not differentiable\n\u003e from Go code.\n\u003e â€•\n\u003e Reply to this email directly or view it on GitHub.\n\u003e \n",
	"user": {
		"login": "kkruups",
		"id": 1913254,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-12T01:41:32Z",
	"updated_at": "2016-03-12T01:41:32Z"
}
