{
	"id": 196162840,
	"body": "Hi Minux,\r\n\r\nhttp://play.golang.org/p/1BkdgghXrA\r\nWould be safe to say that if an output statement is executed in c() after the deferred function's output statement is executed we can clearly see that the deferred function clearly runs after the caller function (this normally how we would demonstrate the order of execution of normally nested functions).  \r\n\r\nFrom what I understood, in Russ Cox article,\"[Broken abstractions in Go](http://research.swtch.com/goabstract)\" is what is actually occuring is in fact a rewinding of the Call instruction, calling the defer instruction after the Caller then returning back to caller (see excerpt below). \r\n\r\nExcerpt: \"....Well, the assembly trampoline jmpdefer has one more abstraction breaker up its sleeve. It subtracts five—the size of CALL instruction that invoked deferreturn—from the return address on the stack before jumping to fn, so the deferred function returns not to the instruction after the CALL, as it normally would, but back to the CALL itself. That is, subtracting five turns the CALL instruction into a loop. The only way out of the loop is for deferreturn to find no work left for this call frame and return normally, without calling jmpdefer. This subterfuge avoids the need to write a loop at the end of every function with a defer statement.\"\r\n\r\nSo it would appear we are both correct, but it would be more accurate language to describe the behavior as the Go  Blog article, \"... the defer statement defers the execution of the function after the return of the Surrounding Function\" since this behavior clearly explains the what is being observed.",
	"user": {
		"login": "kkruups",
		"id": 1913254,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-14T06:16:42Z",
	"updated_at": "2016-03-14T06:16:42Z"
}
