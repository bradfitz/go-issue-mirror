{
	"id": 240804067,
	"body": "I think that we should not be bound by any particular artifacts of the previous compiler's treatment of unsafe code, because the full set of those artifacts is not specified.  I also think it was a mistake to \"document\" this behavior for end-user use, because people will write unsafe code that happens to pass tests with a particular Go release and believe that therefore they got it right.  We don't have a test suite for what unsafe behavior we support except for the runtime itself, and compiler writers aren't good at imaging the crazy things that people might do with unsafe code.  And lacking such a test suite, for unsafe, I think it's fine for compiler-writers to push back hard on \"bugs\" involving unsafe code.\r\n\r\nUnsafe code is generally a security violation, because no matter what we say in documentation, we don't check it mechanically.  It's pretty much the whole point of actual security violations that they do an end-run on documented restrictions.  Or as I asked, \"what prevents?\"\r\n",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-18T17:57:12Z",
	"updated_at": "2016-08-18T17:57:12Z"
}
