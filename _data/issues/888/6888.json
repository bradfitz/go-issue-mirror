{
	"id": 51285878,
	"number": 6888,
	"state": "open",
	"title": "math/cmplx: Acos seems broken",
	"body": "\u003cpre\u003eCurrently acos(2 + 0 * i) returns 0 - 0 * i which is wrong, 0 + -1.316958 * i is right.\n\nHere is a test case\n\n\u003ca href=\"http://play.golang.org/p/qkEJSBsZiQ\"\u003ehttp://play.golang.org/p/qkEJSBsZiQ\u003c/a\u003e\n\nHere is the equivalent C code\n\n#include \u0026lt;complex.h\u0026gt;\n#include \u0026lt;math.h\u0026gt;\n#include \u0026lt;stdlib.h\u0026gt;\n#include \u0026lt;stdio.h\u0026gt;\nint main(int argc, char *argv[]) {\n     double real = (double)atoi(argv[1]);\n     double imag = (double)atoi(argv[2]);\n     double complex x = real + imag * I;\n     double complex y = cacos(x);\n     printf(\u0026quot;%f + %f * i\\n\u0026quot;, creal(y), cimag(y));\n     return EXIT_SUCCESS;\n}\n\nwhich does the right thing\n\n$ gcc -o acos acos.c -lm\n$ ./acos 2 0\n0.000000 + -1.316958 * i\n\nWolfram Alpha does not get the branch cuts right which is unsurprising.\n\n\u003ca href=\"http://www.wolframalpha.com/input/?i=acos%282%2B0i%29\u0026amp\"\u003ehttp://www.wolframalpha.com/input/?i=acos%282%2B0i%29\u0026amp\u003c/a\u003e;x=-846\u0026amp;y=-373\u003c/pre\u003e",
	"user": {
		"login": "lexprfuncall",
		"id": 5360361,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Thinking"
		}
	],
	"comments": 25,
	"created_at": "2013-12-04T01:06:15Z",
	"updated_at": "2015-04-14T19:45:21Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
