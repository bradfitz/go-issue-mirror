{
	"id": 120480092,
	"number": 13484,
	"state": "closed",
	"title": "runtime: default handler for terminate signals should resend signal to itself, not call exit()",
	"body": "According to [How to be a proper program](http://www.cons.org/cracauer/sigint.html), a UNIX process that handles SIGINT in order to clean up before exiting must resend the signal to itself, rather than calling exit() or the like. Otherwise its parent process has no way of knowing that the signal is the reason for the process exit.\r\n\r\nThe same logic applies to other signals that result in terminating the process, including SIGTERM and SIGQUIT. In particular, failing to handle SIGTERM in this manner causes confusing behavior when running as a service under systemd, which sends SIGTERM to stop the service cleanly. systemd expects the process to indicate it exited due to SIGTERM. Instead it sees an exit status of 2 and treats it as a failure, logging misleading error messages like \"Unit entered failed state\".\r\n\r\nInstead of calling exit(2), the sighandler() for UNIX runtimes should reset the handler to SIG_DFL and resend the signal to itself.",
	"user": {
		"login": "eswierk",
		"id": 355618,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-01-07T04:17:07Z",
	"created_at": "2015-12-04T20:30:08Z",
	"updated_at": "2016-01-07T04:20:06Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
