{
	"id": 66090884,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eI propose to have a single policy for clients and servers: RFC 6265 4.1.1's cookie\noctet, as well as allowing spaces and commas (0x20 and 0x2C). In other words, the\n*inclusive* range [0x20, 0x7e] minus the double-quote 0x22, semi-colon 0x3b and\nbackslash 0x5c. Furthermore, whenever a Go net/http server *writes* Cookie or Set-Cookie\nheaders, it quotes the values.\n\nAllowing spaces and commas appears to be the minimal amount to address what Go\nprogrammers are encountering from non-compliant servers in the real world. Mandating\nquotes seems to keep the big four browsers (Chrome, FF, IE, Safari) happy even with\nspaces and commas (Volker has some useful data in that proposed CL discussion at\n\u003ca href=\"https://golang.org/cl/81680043#msg4)\"\u003ehttps://golang.org/cl/81680043#msg4)\u003c/a\u003e.\n\nIt means that the Go  library would then implement neither the server spec of 4.1.1 or\nthe user-agent spec of 5.2 (cue \u003ca href=\"https://xkcd.com/927/)\"\u003ehttps://xkcd.com/927/)\u003c/a\u003e but I talked to abarth, the\nauthor of RFC 6265, and he agreed that there wasn't an obvious answer, as the Go library\nis trying to address all three use cases of client, server and proxy. User-agents\noutside of the big four browsers may or may not have problems with this proposal, but I\ndon't know of any actual (as opposed to hypothetical) problems.\n\nThe \"mandate quotes when writing cookie values\" thing is worth highlighting. I don't\nexpect it to cause any problems but even so, I'll air it on the golang-dev mailing list.\nOnce we reach consensus, patching the actual code is trivial. Somewhat harder is fixing\nup all the tests, and writing a good comment.\u003c/pre\u003e",
	"user": {
		"login": "nigeltao",
		"id": 8565232,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-04-01T06:57:59Z",
	"updated_at": "2014-12-08T10:40:16Z"
}
