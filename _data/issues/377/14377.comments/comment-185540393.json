{
	"id": 185540393,
	"body": "Here's the full version of Less.\n\nfunc (ba Sorter) Less(i, j int) bool {\n         if len(ba) \u003c= i || len(ba) \u003c= j {\n                 fmt.Println(\"LEN:\", len(ba), \"i:\", i, \"j:\", j)\n         }\n         a, b := ba[i], ba[j]\n\n         if a.VirtualType() \u003c b.VirtualType() {\n                 return true\n         } else if b.VirtualType() \u003c a.VirtualType() {\n                 return false\n         }\n\n         aAlloc := a.Allocated()\n         bAlloc := b.Allocated()\n         if aAlloc \u003e bAlloc {\n                 return true\n         } else if bAlloc \u003e aAlloc {\n                 return false\n         }\n\n         if a.LastUsed().After(b.LastUsed()) {\n                 return true\n         } else if b.LastUsed().After(a.LastUsed()) {\n                 return false\n         }\n\n         return a.ID() \u003c b.ID()\n}\n\n-race identified that LastUsed is racey, but it didn't race on the sort \nrun which paniced.\n\nOn 18/02/2016 04:21, Brad Fitzpatrick wrote:\n\u003e\n\u003e Or at least the complete Less function.\n\u003e\n\u003e (Does Go now require Less to be a strict weak ordering like the STL in \n\u003e C++?)\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub \n\u003e \u003chttps://github.com/golang/go/issues/14377#issuecomment-185536774\u003e.\n\u003e\n\n",
	"user": {
		"login": "stevenh",
		"id": 104239,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-18T04:39:03Z",
	"updated_at": "2016-02-18T04:39:03Z"
}
