{
	"id": 66049406,
	"body": "\u003ca id=\"c20\"\u003e\u003c/a\u003eComment 20 by **james@abneptis.com**:\n\n\u003cpre\u003eI won't re-raise this on the list, but after thinking a few more days, I think my\nbiggest disagreement with the current implementation allowing (the above given):\n\n\n\nfunc TestThree(t *testing.T) {\n  if someGlobal, err := someFunc(); err == nil {\n    // rather than throwing an error, someGlobal will now silently be an int == 1\n  }\n  // now it will be a string == \"foo\" again\n}\n\n\nIs that the part that is creating the issue \"if someGlobal, err := someFunc(); err ==\nnil\" doesn't /really/ seem to be part of the inner block scope to the reader;\n\nYes, it's completely expected that loop setup variables would be available within the\nscope of the loop, and perhaps even, by default, not available outside of the loop\nscope.  BUT, since the \"clause\" is outside of the braces, I think it's reasonable for a\ncoder to assume that it has a \"middle\" scope, that would by default inherit from the\nglobal scope if available, otherwise creating variable solely available to the inner\nloop scope.\n\nI realize that's a complex description of the change, but I think if /clauses/ are\nsolely targeted with the change, we'd minimize the chance for both confusion and bugs\nunintentionally introduced.\n\n(And if unchanged, I'd love a compiler warning, but hey, I know that's not in the plans\n;) )\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-12-11T17:25:17Z",
	"updated_at": "2014-12-08T10:04:20Z"
}
