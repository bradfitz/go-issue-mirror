{
	"id": 66049388,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eI noticed this situation a while ago. I argued that it conforms to the scope rules,\nwhich are usual and customary.\n\nThe first err is declared under rule 4. The second err is declared under rule 5. The\nsecond declaration is the inner declaration, so the inner redeclaration rule applies,\nthereby hiding, within its own scope, the first err.\n\nThis is the usual and customary behaviour for many languages. Some languages have a\nconstruct which allows a reference in the inner scope to the variable in the outer scope.\n\n\nThe Go Programming Language Specification\nDeclarations and scope\n\nThe scope of a declared identifier is the extent of source text in which the\nidentifier denotes the specified constant, type, variable, function, or package.\n\nGo is lexically scoped using blocks:\n\n   1. The scope of a predeclared identifier is the universe block.\n   2. The scope of an identifier denoting a constant, type, variable, or function\ndeclared at top level (outside any function) is the package block.\n   3. The scope of an imported package identifier is the file block of the file\ncontaining the import declaration.\n   4. The scope of an identifier denoting a function parameter or result variable is\nthe function body.\n   5. The scope of a constant or variable identifier declared inside a function\nbegins at the end of the ConstSpec or VarSpec and ends at the end of the innermost\ncontaining block.\n   6. The scope of a type identifier declared inside a function begins at the\nidentifier in the TypeSpec and ends at the end of the innermost containing block.\n\nAn identifier declared in a block may be redeclared in an inner block. While the\nidentifier of the inner declaration is in scope, it denotes the entity declared by\nthe inner declaration.\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-12-03T23:35:40Z",
	"updated_at": "2014-12-08T10:04:19Z"
}
