{
	"id": 66049409,
	"body": "\u003ca id=\"c23\"\u003e\u003c/a\u003eComment 23 by **ziutek@Lnet.pl**:\n\n\u003cpre\u003eI think that Go should be explicit language.\n\nI prefer Go:\n\n    ui = uint(si)\n\nthan C:\n\n    ui = si\n\nif ui is unsigned and si is signed. Why do we need an implicit behavior of :=?\n\nSo if := is the declaration operator it should work exactly like var for all its lhs.\nIf some of lhs are previously declared in this scope, it should fail - I believe we\nshould have a separate explicit construction for this case. Proposal from comment 16 is\nnice for me:\n\n    :a, b = f()\n\nIn above case it doesn't introduce any additional character. In:\n\n    :a, b, :c = f()\n\nit adds only one.\n\nThis notation looks good. I can easily determine what's going on.\n\n    a, b, c := f()\n\nshould be an abbreviation for:\n\n    :a, :b, :c = f()\n\nWith current := behavior I fill like this:\n\n    :=?\n\nI vote for change this emoticon to:\n\n    :=\n\nin the future.\n\n;)\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-01-21T14:27:22Z",
	"updated_at": "2014-12-08T10:04:20Z"
}
