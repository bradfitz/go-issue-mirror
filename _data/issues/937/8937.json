{
	"id": 51288891,
	"number": 8937,
	"state": "closed",
	"title": "encoding/xml: Support for alternate encodings",
	"body": "by **pico303**:\n\n\u003cpre\u003eIn Go 1.3.3, the XML parser for Go is locked into UTF-8 encodings.  In\nencoding/xml/xml.go (around line 576), there's the line:\n\n    enc := procInstEncoding(string(data))\n    if enc != \u0026quot;\u0026quot; \u0026amp;\u0026amp; enc != \u0026quot;utf-8\u0026quot; \u0026amp;\u0026amp; enc != \u0026quot;UTF-8\u0026quot; {\n\nFor documents with:\n\n    \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;ISO-8859-1\u0026quot;?\u0026gt;\n\nyou get this error message:\n\n    Invalid body content: xml: encoding \u0026quot;ISO-8859-1\u0026quot; declared but Decoder.CharsetReader is nil\n\nYou can override the reader to support alternative encodings, but this means pre-parse\nthe XML []byte yourself for the proper encoding, setup the reader, then parse the XML. \n\nCould the package be adapted somehow so you could provide alternate readers ahead of\ntime, based on the encoding value?  Something like this (pseudocode):\n\n    func init() {\n        xml.AddCharsetReader(\u0026quot;iso-8859-1\u0026quot;, ISO8859Reader)\n    }\n\n    func Parse(doc []byte) (SomeStruct, error) {\n        var myobj SomeStruct\n        if err := xml.Unmarshal(doc, \u0026amp;myobj); err != nil {\n            return nil, err\n        }\n        return myobj, nil\n    }\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Performance"
		}
	],
	"comments": 4,
	"closed_at": "2014-12-08T10:49:14Z",
	"created_at": "2014-10-15T05:54:07Z",
	"updated_at": "2016-06-25T01:43:06Z"
}
