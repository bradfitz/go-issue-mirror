{
	"id": 202610727,
	"body": "\u003e I see at least three possible solutions:\r\n\u003e A) Fix LoadDll and make applications deal with it.\r\n\u003e B) Have a syscall.LoadDllSafe and change stdlib to use that (or even internal/syscall/windows.LoadDllSafe) and change nothing for custom user code.\r\n\u003e C) Do nothing\r\n\r\nI think your solution A must include some plan for Go users on how to fix their breakage. I am worried they will just start copying runtime code. And some will make mistakes along the way. And maybe even copying code will not work for some reason or other.\r\n\r\nAs to my preference, I like your B approach (we can do better than syscall.LoadDllSafe name). I can be arm twisted into doing C :-), but B is not much harder, and it will make all standard library code safe for this current issue. And it won't break any user code. We can mention new syscall.LoadDllSafe function in release notes, and let our users decide if it is important for their projects. syscall.LoadDllSafe could be a simple replacement for syscall.LoadDLL, so it should be a trivial change for everyone who decides to follow our advice.\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-28T22:41:50Z",
	"updated_at": "2016-03-28T22:41:50Z"
}
