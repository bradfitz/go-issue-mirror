{
	"id": 111828145,
	"number": 12959,
	"state": "closed",
	"title": "proposal: fmt: print *reflect.Value as reflect.Value",
	"body": "## Background\r\n\r\n`fmt` treats `reflect.Value` especially:\r\n\r\n```\r\nIf the operand is a reflect.Value, the concrete value it\r\nholds is printed as if it was the operand.\r\n```\r\n\r\nThe [commit](https://github.com/golang/go/commit/049b89dc6f6b6f1001672dd5456197b74a97cbec) that introduced this behavior has message:\r\n\r\n```\r\nWhen a reflect.Value is passed to Printf (etc.), fmt called the\r\nString method, which does not disclose its contents. To get the\r\ncontents, one could call Value.Interface(), but that is illegal\r\nif the Value is not exported or otherwise forbidden.\r\n```\r\n\r\nThe motivation was to disclose the contents of a `reflect.Value`.\r\n\r\nHowever, fmt doesn't disclose the contents of a `*reflect.Value`, which is inconsistent.\r\n\r\n```go\r\nv := reflect.ValueOf(true)\r\nfmt.Sprintf(v) == \"true\"\r\nfmt.Sprintf(\u0026v) == \"\u003cbool Value\u003e\"\r\n```\r\nhttps://play.golang.org/p/EcJkj0bx8b\r\n\r\n## Proposal\r\n\r\nModify the spec to\r\n\r\n```\r\nIf the operand is a reflect.Value or *reflect.Value, the concrete value it\r\nholds is printed as if it was the operand.\r\n```\r\n\r\nand make corresponding changes to the implementation.\r\n\r\n## Examples\r\n\r\n```go\r\nv := reflect.ValueOf(true)\r\nfmt.Print(\u0026v)\r\n// Output: true\r\n```",
	"user": {
		"login": "nodirt",
		"id": 643254,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 1,
	"closed_at": "2015-10-20T01:22:00Z",
	"created_at": "2015-10-16T13:08:34Z",
	"updated_at": "2015-10-20T01:22:00Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
