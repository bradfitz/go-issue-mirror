{
	"id": 214577597,
	"body": "~~By studying the output of the Chrome's data transmission on the server side, I was able to narrow down the issue to the PRIORITY info that Chrome sends as an optimization. You can [read more about it here](http://blog.kazuhooku.com/2015/04/dependency-based-prioritization-makes.html).~~\r\n\r\n~~I modified the go's http2 client code to mimic this behavior here - https://github.com/nemothekid/net/commit/aeb45a1fe1c0d808ad1fdc1a1ad1a3f947d5de9d~~\r\n\r\n~~I modified the values based on what Chrome is doing which I uncovered with the article I referenced above.~~\r\n\r\n~~I have modified the client code like so (to use my http2 code): https://gist.github.com/nemothekid/4edf9c5ded1e17d335e1d959718e93e8~~\r\n\r\n~~With the new code, I'm seeing the golang client.go crash much like Chrome:~~\r\n\r\n```\r\nAirNemo:Desktop nimi$ go run ./client.go \r\n2016/04/25 18:01:02 len(data)=1073741824\r\n2016/04/25 18:01:02 client.Do next\r\n2016/04/25 18:01:02 client.Do done\r\n2016/04/25 18:01:02 Post https://localhost.channelmeter.com:1333: stream error: stream ID 1; STREAM_CLOSED\r\nexit status 1\r\n```\r\n\r\n~~Server.go~~\r\n\r\n```\r\nAirNemo:Desktop nimi$ GODEBUG=http2debug=1 go run bb.go \r\n2016/04/25 18:01:02 http2: server connection from 127.0.0.1:53464 on 0xc820016100\r\n2016/04/25 18:01:02 http2: server: client 127.0.0.1:53464 said hello\r\n2016/04/25 18:01:02 http2: server read frame SETTINGS len=18, settings: ENABLE_PUSH=0, INITIAL_WINDOW_SIZE=4194304, MAX_HEADER_LIST_SIZE=10485760\r\n2016/04/25 18:01:02 http2: server processing setting [ENABLE_PUSH = 0]\r\n2016/04/25 18:01:02 http2: server processing setting [INITIAL_WINDOW_SIZE = 4194304]\r\n2016/04/25 18:01:02 http2: server processing setting [MAX_HEADER_LIST_SIZE = 10485760]\r\n2016/04/25 18:01:02 http2: server read frame WINDOW_UPDATE len=4 (conn) incr=1073741824\r\n2016/04/25 18:01:02 http2: server read frame SETTINGS flags=ACK len=0\r\n2016/04/25 18:01:02 http2: server read frame DATA stream=1 len=65535 data=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" (65279 bytes omitted)\r\n```\r\n\r\n~~I haven't investigated yet, but this is a path to look into - how is golang dealing with prioritized streams?~~",
	"user": {
		"login": "nemothekid",
		"id": 940094,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-26T01:07:58Z",
	"updated_at": "2016-04-26T02:54:51Z"
}
