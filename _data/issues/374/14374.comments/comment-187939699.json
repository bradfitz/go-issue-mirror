{
	"id": 187939699,
	"body": "[Here](https://golang.org/pkg/net/http/#Server):\r\n\r\n```go\r\n        // TLSNextProto optionally specifies a function to take over\r\n        // ownership of the provided TLS connection when an NPN\r\n        // protocol upgrade has occurred.  The map key is the protocol\r\n        // name negotiated. The Handler argument should be used to\r\n        // handle HTTP requests and will initialize the Request's TLS\r\n        // and RemoteAddr if not already set.  The connection is\r\n        // automatically closed when the function returns.\r\n        // If TLSNextProto is nil, HTTP/2 support is enabled automatically.\r\n        TLSNextProto map[string]func(*Server, *tls.Conn, Handler)\r\n```\r\n\r\nIt makes it sound like `TLSNextProto` is the only one that determines enabling/disabling http2. In fact, if we are passing a `TLSConfig`, `TLSNextProto` won't matter anymore. And the doc for `TLSConfig` just says it's used by `ListenAndServeTLS`:\r\n\r\n```go\r\nTLSConfig      *tls.Config   // optional TLS config, used by ListenAndServeTLS\r\n```\r\n\r\nand the doc for [`TLSConfig.NextProtos`](https://golang.org/pkg/crypto/tls/#Config):\r\n\r\n```go\r\n// NextProtos is a list of supported, application level protocols.\r\nNextProtos []string\r\n```\r\n\r\nWe should mention `TLSConfig.NextProtos` should be nil if we're to enable http2. Also I find having two ways to control enabling/disabling http2 confusing: `Server.TLSNextProto` and `TLSConfig.NextProtos`. It seems like they're talking about the same thing but they're in two different places: `http.Server` and `TLSConfig`.\r\n\r\nDoes it make sense?\r\n\r\n",
	"user": {
		"login": "jingweno",
		"id": 169064,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-23T22:13:08Z",
	"updated_at": "2016-02-23T22:14:12Z"
}
