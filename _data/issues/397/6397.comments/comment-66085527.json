{
	"id": 66085527,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9:\n\n\u003cpre\u003eThis isn't a 6c function. It's a gcc function. The garbage collector cannot see what is\ngoing on behind the cgo curtain. The pointer was passed back there, and there is no copy\nremaining in the Go program. \n\nThis fundamentally cannot work. You cannot pass Go pointers into C. Use C.malloc to get\na C pointer that you can pass to C. If we had a moving garbage collector (and perhaps we\nwill some day) you'd have to worry about the allocated Go value changing its pointer.\nEven if you were passing a stack pointer, Go stacks may move in the future (probably\nsooner than the moving garbage collector).\n\nFundamentals aside, It is true that C.foo is calling a stub wrapper compiled by 6c. That\nframe does not retain the pointer because its argument is recorded (always) as\nstruct{uint8 x[N];} p, where N is the number of bytes of arguments. It does not declare\nany pointers, so the garbage collector does not see any. This is acceptable, because you\nshould not be passing Go pointers to gcc-compiled code.\n\nI will leave this for Ian to close if I've convinced him.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-18T23:21:36Z",
	"updated_at": "2014-12-08T10:35:13Z"
}
