{
	"id": 66085532,
	"body": "\u003ca id=\"c13\"\u003e\u003c/a\u003eComment 13:\n\n\u003cpre\u003eThe original docs for cgo were (only) the comments in misc/cgo/gmp/gmp.go,\nwhich still say:\n\n---\nGarbage collection is the big problem.  It is fine for the Go world to\nhave pointers into the C world and to free those pointers when they\nare no longer needed.  To help, the Go code can define Go objects\nholding the C pointers and use runtime.SetFinalizer on those Go objects.\n\nIt is much more difficult for the C world to have pointers into the Go\nworld, because the Go garbage collector is unaware of the memory\nallocated by C.  The most important consideration is not to\nconstrain future implementations, so the rule is that Go code can\nhand a Go pointer to C code but must separately arrange for\nGo to hang on to a reference to the pointer until C is done with it.\n---\n\nThis (old) text implies that we will never have a moving collector. Maybe\nthat's okay, although that's unfortunate. Even so, what's in this paragraph\nstill disallows the program in this bug. You cannot allocate something and\npass it to C without keeping a reference to it around in Go too. The fix I\nsuggested does exactly this.\n\nI wish I had strengthened the constraint here to say that Go pointers may\nnever be passed directly to C, but I am willing to stand by what I wrote.\nGiven that, there is much less harm in treating the arguments to a C.foo\nfunction as roots. I'll look into some way to do that.\n\nRuss\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-20T20:32:42Z",
	"updated_at": "2014-12-08T10:35:13Z"
}
