{
	"id": 66085533,
	"body": "\u003ca id=\"c14\"\u003e\u003c/a\u003eComment 14:\n\n\u003cpre\u003eI think there are a number of ways to solve this problem which still retain the spirit\nof the original text but provide the implementation with more freedom.\n\nOn possible solution, used by other systems, is to \"buffer\" the object being passed to C\ninto temporary, non-moving (i.e. malloc'ed) storage for the duration of the call.  This\nwould ensure that the C code can read and write through the pointer without having to\nsynchronize with the garbage collector.  This can get expensive for large objects but\nlarge objects are usually not-moved even in a moving collector and therefore it is safe\nto pass an unbuffered pointer to its contents.\n\nWhat happens to the buffer, if one is created, can be a policy decision controlled by\nthe user.  The default behavior would be to copy back and free the buffer.  However, one\ncould elect to use a different policy, such as allowing the C code to take ownership of\nthe buffer.\n\nCriticial to any change like this are bit-equality guarnatees for pointers across calls.\n And guarantees about what can be done to pointers in Go structures passed to a call. \nWe should be certain not to (explicitly or implicitly) say anything about whether the\npointers are equal and whether a pointer other than what was provided as an argument,\ncan be dereferenced.  This is important to accomodate a moving collector or a buffering\nscheme.\u003c/pre\u003e",
	"user": {
		"login": "lexprfuncall",
		"id": 5360361,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-20T21:02:38Z",
	"updated_at": "2014-12-08T10:35:13Z"
}
