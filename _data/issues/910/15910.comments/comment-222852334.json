{
	"id": 222852334,
	"body": "What was your test testing? Was it the presence of the error, the presence\nof a particular value, or the contents of the Error() string?\n\nOn Wed, 1 Jun 2016, 07:15 Joe Tsai \u003cnotifications@github.com\u003e wrote:\n\n\u003e Currently, in go1.6, different error values returned by errors.New(...)\n\u003e are equal (in the sense of the reflect.DeepEqual usage) if they have the\n\u003e same error message. This encourages people to write unit tests like the\n\u003e following:\n\u003e\n\u003e want := errors.New(\"archive/tar: header field too long or contains invalid values\")if !reflect.DeepEqual(got, want) {\n\u003e     ...\n\u003e }\n\u003e\n\u003e This is a poor test it assumes an exact error message and type for an\n\u003e unexported error from a given package. Instead, we should cause DeepEqual\n\u003e to always return false somehow by embedding some field in the concrete\n\u003e errorString type that always compares to false for anything but itself.\n\u003e\n\u003e Thus, I expect the following to happen:\n\u003e\n\u003e a := errors.New(\"foo\")b := errors.New(\"foo\")\n\u003e\n\u003e reflect.DeepEqual(a, a) // True\n\u003e reflect.DeepEqual(a, b) // False (this is currently true)\n\u003e\n\u003e We probably cannot change this in Go1 because the sheer number of tests\n\u003e this would probably break, but it may be worth considering for Go2.\n\u003e\n\u003e â€”\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/15910\u003e, or mute the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe/AAAcA6-SWX9Hy-I6M7NkX3-dB23j8V0gks5qHKT5gaJpZM4Iq92H\u003e\n\u003e .\n\u003e\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-31T23:34:49Z",
	"updated_at": "2016-05-31T23:34:49Z"
}
