{
	"id": 219911018,
	"body": "@bioothod, to answer some of your questions: Go has its own memory manager from top to bottom (it doesn't use glibc at all, and garbage collection is so tightly integrated with allocation that it's probably impossible to build a good garbage collector on top of glibc malloc). The numbers reported by gctrace (and the heap profiler, etc) and by top are different because they are answering different questions, not because either of them is wrong. In particular, while Go's memory manager does return memory to the system, there's a few minutes of hysteresis built in to that mechanism (because there's overhead to returning memory to the system and then asking for it back), so the numbers in top should roughly match the *peak* memory usage over the last five minutes or so. There's also a difference between heap memory and total memory, since there are non-heap allocations such as stacks and runtime-internal memory (which should be small, but #15319 suggests they may not always be as small as they're supposed to be).\r\n\r\nIf you can create a small Go program that reproduces the issue, we may have a handle on debugging this (though it may have to wait for 1.8). Right now there's simply too much going on in this issue to effectively debug it.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-18T02:44:56Z",
	"updated_at": "2016-05-18T02:44:56Z"
}
