{
	"id": 66085170,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2 by **liviobs**:\n\n\u003cpre\u003eTwo follow up comments about this issue (this issue is important to me):\n\n1) I rely heavily on the fact that certain operations work correctly for non-initialized\nvalues in Go. It is useful everywhere, but particularly useful for complex structs. I\nhit this problem exactly on a struct with members being structs themselves. I would\nrather avoid having to code struct initializers for things with net.IP inside, specially\ngiven that no other struct in my code needs it.\n\nI would plead to the Go team to keep something like json.Marshal() to \"just work\" out of\nthe box without me having to understand whether certain types from the standard package\n(such as net.IP) is implemented using slice, struct, or etc. \n\n2) I was able to hack at this problem with the following patch. I'm not happy with it\nsince there is a awkward conversion between the MarshalText nil (\"\u0026lt;nil\u0026gt;\") and the\nJSON nil (\"null\"). I don't know of a better strategy, since an implementer of\nMarshalText for a slice type may want to return a custom value  for empty slices that is\ndifferent than \"\u0026lt;nil\u0026gt;\". It seems that the json encoder will *have* to call the\nTextMarshaler even for empty slices.\n\n\ndiff -r 11b2294dca61 src/pkg/encoding/json/encode.go\n--- a/src/pkg/encoding/json/encode.go\tWed Sep 04 17:02:08 2013 -0700\n+++ b/src/pkg/encoding/json/encode.go\tThu Sep 05 16:01:24 2013 -0400\n@@ -460,6 +460,7 @@\n \tm := v.Interface().(encoding.TextMarshaler)\n \tb, err := m.MarshalText()\n \tif err == nil {\n+\t\tif bytes.Equal(b, []byte(\"\u0026lt;nil\u0026gt;\")) { b = []byte(\"null\") }\n \t\t_, err = e.stringBytes(b)\n \t}\n \tif err != nil {\ndiff -r 11b2294dca61 src/pkg/net/ip.go\n--- a/src/pkg/net/ip.go\tWed Sep 04 17:02:08 2013 -0700\n+++ b/src/pkg/net/ip.go\tThu Sep 05 16:01:24 2013 -0400\n@@ -315,7 +315,7 @@\n // MarshalText implements the encoding.TextMarshaler interface.\n // The encoding is the same as returned by String.\n func (ip IP) MarshalText() ([]byte, error) {\n-\tif len(ip) != IPv4len \u0026\u0026 len(ip) != IPv6len {\n+\tif len(ip) != 0 \u0026\u0026 len(ip) != IPv4len \u0026\u0026 len(ip) != IPv6len {\n \t\treturn nil, errors.New(\"invalid IP address\")\n \t}\n \treturn []byte(ip.String()), nil\ndiff -r 11b2294dca61 src/pkg/net/ip_test.go\n--- a/src/pkg/net/ip_test.go\tWed Sep 04 17:02:08 2013 -0700\n+++ b/src/pkg/net/ip_test.go\tThu Sep 05 16:01:24 2013 -0400\n@@ -65,10 +65,6 @@\n \t\t\tif out, err := tt.in.MarshalText(); string(out) != tt.out || err != nil {\n \t\t\t\tt.Errorf(\"IP.MarshalText(%v) = %q, %v, want %q, nil\", out, err, tt.out)\n \t\t\t}\n-\t\t} else {\n-\t\t\tif _, err := tt.in.MarshalText(); err == nil {\n-\t\t\t\tt.Errorf(\"IP.MarshalText(nil) succeeded, want failure\")\n-\t\t\t}\n \t\t}\n \t}\n }\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-05T20:09:13Z",
	"updated_at": "2014-12-22T06:28:36Z"
}
