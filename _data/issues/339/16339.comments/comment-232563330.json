{
	"id": 232563330,
	"body": "@dlsniper Your are correct that there are work-arounds for variables (as I have outlined in the GopherCon lightning talk as well as in the design doc). It can work for refactoring, though it may need some careful planning.\r\n\r\nThe problem with types is that even if you attach the right methods, it's a different type from the original type. In contrast to the work-arounds for everything else, this difference is observable by a program: The original and the new (\"fake alias\") type are different and variables of these types are not assignable to each other: https://play.golang.org/p/nQUgiuJhMn\r\n\r\nThat said, casting would work in those (assignment) cases as well, which is an interesting opening to a work-around. However, casting doesn't work if the (fake) alias and original type appear in derived types (see bottom of https://play.golang.org/p/nQUgiuJhMn). Casting never goes inside the underlying types.\r\n\r\nThus, your suggestion may work in many cases and may be done fully automatically with a clever tool. But it cannot work in general. Again, the reason is that the type difference is observable by a program and there's not even a way to \"make the difference go away\" (via a cast) in general.\r\n\r\nWhich brings me back to the \"minimum\" alias proposal I have hinted at briefly in one of the comments above, which is alias declarations for types only.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-14T05:52:51Z",
	"updated_at": "2016-07-14T05:54:02Z"
}
