{
	"id": 234517334,
	"body": "While there are a lot of other things i'd much rather see added to the language, I had a slightly different take on this issue after thinking about it this morning, and wanted to raise it for discussion. If this has been addressed already, feel free to ignore me and just point to those comments, as this discussion has grown pretty large with a lot of voices, and is hard to jump back into. I can see that a few folks have brushed on this a bit, but not sure if it was delved into.\r\n\r\nTechnically, Go already has aliasing. It just wasn't something the users were allowed to touch, only existing in a few small places in the runtime. Rune is the most obvious example I can find:\r\n\r\nhttps://golang.org/pkg/builtin/#rune\r\n\r\nSpecifically, this quote: \"rune is an alias for int32 and is equivalent to int32 in all ways\".\r\n\r\nMy concern here would be having 2 different ways, or different \"tiers\" if you will, of aliased types in go: Special citizens that are only for the runtime, and whatever falls out of this proposal that the rest of us are able to use.\r\n\r\nWill this proposal cover exposing the existing method of aliasing types in go, or will at a second, un-even approach (likely because of the backwards compatibility concerns)?\r\n\r\nI personally would prefer that we end up with 1 method of aliasing used globally, to maintain consistency and uniformity around how aliasing as a concept works in the language. I'm sure there are other factors I'm missing here, but if there are reasons why go can't have only true way to alias (which is true of so many other aspects of writing go), that would seem like an unfortunate outcome.",
	"user": {
		"login": "StabbyCutyou",
		"id": 1528618,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-07-22T11:07:06Z",
	"updated_at": "2016-07-22T11:07:06Z"
}
