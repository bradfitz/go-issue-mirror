{
	"id": 232340644,
	"body": "Just a few quick comments before I try to think it over a little more:\r\n\r\n-  The alternative is for people to export constructor functions when they need types to be exported transitively through the package importing graph. This proposal could ease the process, however. \r\n\r\n- The syntax introduces new sigils, that are actually used for chan. It is a bit annoying\r\n\r\n- It will not help with vendoring type equality issue (actually not an issue, that's just how vendoring works). I think it is important to highlight that.\r\n\r\n- It is closing on the \"functor\" mechanism that can be found in OCaml to the best of my knowledge. (the paragraph on import)\r\n\r\n- As a beginner programmer, (I started programming back in Go after a ten year hiatus) I initially desired such a feature. As I am more experienced now, I haven't felt a need for it, at my somewhat micro-scale. On the one hand, except for the syntactic issue, it should be fine for a beginner to comprehend. On the other hand, one should make sure that it is truly needed.\r\nIn fact, I think it might allow bad idioms to appear. Constraints make things clearer.\r\n\r\n\r\n\r\n",
	"user": {
		"login": "atdiar",
		"id": 12191458,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-13T12:31:05Z",
	"updated_at": "2016-07-13T12:31:05Z"
}
