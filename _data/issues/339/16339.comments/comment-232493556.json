{
	"id": 232493556,
	"body": "Please keep in mind that even without aliases, already now we can do some of the things some people have been objecting to, at least for constants and functions:\r\n\r\nOne can trivially write an exported wrapper function that calls an un-exported function and thus provides (indirect, but still) access to the un-exported function and vice versa. Same is true for constants, simply via a constant declaration. The main difference here is that (for functions) alias declarations require less to write (but even that is not quite true if the function is \"aliased\" via a function variable that is initialized to the function to be aliased).\r\n\r\nThe only place where aliases provide true new functionality is for variables and types. Furthermore, even for variables there is a work-around (if tedious) if the problem is refactoring. \r\n\r\n(Thus, a \"minimal\" proposal could be restricted to aliases for types only, and then we could even use the notation `type T = imported.T`. This specific notation and idea has been in the back of our minds for a long time. The alias proposal is simply a generalization.)\r\n\r\nThere are also two important use cases for aliases that have nothing to with refactoring:\r\n\r\n1) Building components (as has been brought up before): A large library could be organized in different packages which export objects as necessary so that they are accessible within the library. All these packages would be in an internal directly, effectively hiding them from the \"outside\". At the top-level there is a single package which implements the public interface of the library. Alias declarations can be used to re-export the objects that need to be accessible publicly. (Right now we cannot do this for types that are not declared at the top).\r\n\r\n2) Remove need for dot-imports: Dot imports (`import . \"pkg\"`) are generally frowned upon (there are some rare use cases related to test package creation with go test). Alias declarations could be used instead of dot-imports and would provide a much clearer picture of the identifiers accessible in a package.\r\n",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 4,
		"+1": 4
	},
	"created_at": "2016-07-13T21:33:29Z",
	"updated_at": "2016-07-13T21:33:29Z"
}
