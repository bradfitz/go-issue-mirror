{
	"id": 234621355,
	"body": "Please, let's stop labeling (hypothetical) actions of another developer as \"abuse\", it makes the arguments rhetoric rather than proper analysis. People trying to solve their problems are not \"abusing\" things; they are trying to use things in the best way they know. I.e. *\"readability and cohesion decreases, but then again decoupling increases\"*, would be better, this can be refuted, tested or analysed. Word \"abuse\" is too imprecise.\r\n\r\n@bcmills wrt. to `protobuf/proto`, is using aliases the best way to solve that problem or are there better solutions? Flatbuffers, gob and capnproto seem to work nicely without such injection. I have only quickly skimmed protobuf, but it looks more like a conversion from Java rather than Go code. Also, in proto3 Language Guide I noticed _\"If you are already familiar with proto2 syntax, the Any type replaces extensions.\"_. Does it mean that the whole \"indirection hack\" can be removed for proto3 implementations? Or alternatively, it would have not happened in the first place, if the code were written in Go, because it makes such things problematic?\r\n\r\n@kardianos The issues I have with aliases are:\r\n* there are other ways to do the refactoring, e.g. \"gomigrate\" file\r\n* it provides no incentive to clean-up code;\r\n\t* how many aliases will you have in a 10MLOC project after 20 years?\r\n\t\t* _there's a reason why unused imports don't compile_\r\n* removing aliases and renaming packages would still be problematic,\r\n\t* how do you know when you can finally remove an alias?\r\n\t\t* if it's an open-source project you cannot see all the users of your project, nor are the users aware of your actions\r\n\t\t* _giving a month heads-up before removal just pushes the deadline around_\r\n* there are other ways to organize and enforce structure in a single package\r\n\t* _e.g. \"client.view.go\", \"client.handler.go\" or \"client_view.go\", \"client_handler.go\"_\r\n* if something works as a single package, in most cases it should be a single package\r\n\r\nThe argument that \"many developers would use it\" isn't useful. If inheritance or `? :` operator were part of Go, many developers would use those as well.",
	"user": {
		"login": "egonelbre",
		"id": 192964,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 8,
		"+1": 8
	},
	"created_at": "2016-07-22T18:32:51Z",
	"updated_at": "2016-07-22T18:44:00Z"
}
