{
	"id": 236433693,
	"body": "@perses the whole proposal is to make refactoring of moving a type from a package to another. This can be solved outside of the language using dedicated refactoring tools. SemVer is useful to signal breaking in packages.\r\n\r\nThe language does not need to be changed to support types moving around. As I've said it so many times:\r\n- it will bring no benefit as you still won't be able to break compatibility\r\n- you have to wait for people to migrate their code before you can do breaking changes\r\n- it adds complexity to learning the language, reading the code and understanding it and to all the tools in the ecosystem\r\n- other than a few googlers nobody else from the Go ecosystem has stepped up saying it's a must\r\n- there are googlers that against this proposal \r\n- all the use-cases that have been highlighted can be easily solved outside of the language by using SemVer and package managers (and vendoring)\r\n- it has been highlighted during the discussions how quickly people can find ways to misuse it. Yes, like any other language features but then ask yourself if Go, which is supposed to be easy readable needs one more feature like this\r\n- this proposal is using poor examples like `x/net/context` to `context` (which can be solved with a search and replace mind you, and yes SemVer) or internal refactoring of Go's `go/` which nobody asked for (as the extrenal API will remain the same and thus can be delayed until 2.0)\r\n- this proposal does not solve a real problem, it only delays it until the inevitable happens\r\n\r\nI can't be much more clear than this. It was called for technical excellence and well, this is the best I can do, maybe my best is not enough to highlight how bad this proposal will be.",
	"user": {
		"login": "dlsniper",
		"id": 607868,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-31T14:42:31Z",
	"updated_at": "2016-07-31T14:42:31Z"
}
