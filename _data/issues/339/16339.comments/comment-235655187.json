{
	"id": 235655187,
	"body": "@mattfarina \r\n\u003e This problem exists because go isn't doing versions. If you use versions than breaking apart a package would be a major version bump. Tools [...] would just not use the newer version until specified.\r\n\r\nYes, that's one possible solution.  Now you need semantic versioning for all Go packages, and you need to be able to update every package that you depend on (even the ones you vendor in from third parties!) whenever any of the packages *they* transitively depend on does a major version bump.\r\n\r\nThat works for very small dependency graphs.  It does not scale well: at a certain number of transitive dependencies, by the time you've finished updating package B to work with A1, package C now requires A2.  You're not guaranteed to ever reach a point in which the version requirements of all of the packages you depend on are simultaneously satisfiable.\r\n\r\nPlus, now you have the added complexity of requiring semantic versioning for every user, package, and tool.\r\n\r\n\u003e This proposal is a solution to a common problem. The other languages such as Rust, Swift, PHP, Python, Ruby, Java, and many others solve it by using versions and version handling. This is trying to solve a common problem in a unique way.\r\n\r\n[Rust](https://doc.rust-lang.org/book/type-aliases.html) has type aliases.  [Swift](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID327) has type aliases.  [PHP](http://php.net/manual/en/function.class-alias.php) has type aliases.  [Ruby](http://ruby-doc.org/core-2.3.1/Module.html#method-i-alias_method) has method aliases.\r\n\r\nAliases are, as far as I can tell, a *less* unique solution than the strict semantic versioning you are proposing as an alternative.",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	},
	"created_at": "2016-07-27T17:16:27Z",
	"updated_at": "2016-07-27T17:16:27Z"
}
