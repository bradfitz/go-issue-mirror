{
	"id": 235740256,
	"body": "I think that talking about versioning is a red herring here and will lead the discussion of this proposal astray.\r\n\r\nThis proposal is not about combining multiple API-breaking versions or whatsoever. Aliases would absolutely not help with that anyway.\r\n\r\nThis proposal is about factoring functionality out of a package into its own compilation unit.\r\nSo that it can be reused. And to create more suitable dependency tree structures such as in the net/http \u003e http2 integration case.\r\n\r\nBut even in that case, object aliases (as currently presented) do not work.\r\n\r\nA counter proposal would be to have the initial dependency tree append-only to keep the seams between dependencies (the exposed, in-use API) immutable. And have package level aliasing (indirection node) between the initial package and a refactored/ghost package that would **completely** reproduce the initial API.\r\n\r\nIt will help with any continuous integration workflow as it enables concurrent mutations of a tree structure without locking. (similar to having a local refactoring branch)\r\n\r\nNow there is still the issue of moving types/vars/funcs. Aliasing is a top down move, in terms of object definition. \r\nWhat is needed instead is to move by copy the object definitions from the bottom package up to the top level/ghost one. (in order to not have to rebuild the clients of the refactored package)\r\nSaid otherwise, no implicit decoupling between object definition and exportation and no automatic recursive exportation.\r\n\r\n===\r\nTo provide another image, take database sharding.\r\nThe problem we have is that aliasing as proposed would be the analogous of allowing a client to expose direct access to the shards.\r\n\r\n",
	"user": {
		"login": "atdiar",
		"id": 12191458,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-27T22:23:56Z",
	"updated_at": "2016-08-01T13:08:19Z"
}
