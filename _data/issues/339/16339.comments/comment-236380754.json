{
	"id": 236380754,
	"body": "@ianlancetaylor I think that mentioning the inclusion of the context package in the standard library is going to be confusing.\r\n\r\nI reckon that proposal attempts to deal with the issue Peter Bourgon had encountered recently with vendoring and the one that bradfitz had come across when he tried to integrate http2 into net/http while keeping http2 a separate package. (it created a cyclic dependency, the way he would have liked to do it).\r\nWe can note, that there were other ways to do it (some more straightforward albeit perhaps less modular ways).\r\n\r\nThe problem with net/context and std/context is that since the Pkg paths are dissimilar, they should be considered different versions. Any object in net/context is now considered different from the corresponding one in std/context .\r\n\r\nSaid simply, context should have not been moved in the standard library in 1.7 like that.\r\n\r\nTo solve this, we need to have any package using the std lib context to interact the same with objects coming from net/context. Only possible if std/context API is a superset of net/context API (i.e. no breaking changes). Object aliasing is too granular and does not solve this. We need some kind of pkg paths synonyms.\r\n\r\nIn the general case, it won't always be possible to do that sort of things if you have API breaking changes (the assumption of @bcmills was that it is always feasible to match the API surfaces of two packages, to create shims etc.. thanks to aliases). Constraint which makes the current proposal fairly limited in usage for migrations between versions.\r\n\r\nThat's why this proposal cannot be about dealing with different versions. It does not even mention it to be fair.\r\n\r\n",
	"user": {
		"login": "atdiar",
		"id": 12191458,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-30T18:16:21Z",
	"updated_at": "2016-07-30T19:17:51Z"
}
