{
	"id": 236372922,
	"body": "So far, in this thread, the context package move is the only example I've seen of a real, concrete, and significant problem that aliases would solve. I agree that is an important problem, but I'm left wondering how we can know if this proposal is the right solution without looking at a wider collection of other real, concrete, and significant problems and comparing how aliases solve those problems vs other solutions. What are other example problems we should consider? If all we care about is the context package move, I can think of other ways to solve that problem:\r\n\r\n**Issue #8082.** It's unfortunate that proposal is technically not backwards-compatible, otherwise I might strongly prefer that proposal over this one.\r\n\r\n**Package aliasing in the build system.** The context problem happened because a package moved. Technically, we don't need language-level (identifier-granularity) aliasing to solve this problem, we only need package-level aliasing. Also, let's consider a different problem. Suppose \"github.com/foo/bar\" is a widely used open source package, then one day github user foo decides to delete package bar (maybe they don't want to maintain it anymore) or delete their github account entirely. I'm not just making this up; this a [real problem](http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/). Or maybe github.com [goes down entirely](http://google-opensource.blogspot.com/2015/03/farewell-to-google-code.html). Since \"github.com/foo/bar\" is a widely-used package, someone will eventually re-host it elsewhere and offer to maintain it. With language-level aliases, you can hack around this problem by creating a custom vendor directory for \"github.com/foo/bar\" where all exported identifiers are aliases to \"newhost.com/bar\". But, language-level aliases won't stop `go get github.com/foo/bar` from failing. We can't solve that problem without a build system change.\r\n\r\nHere's a simple idea. Add a new environment variable GOPKGALIASES. Every tool that uses GOPATH must be updated to understand GOPKGALIASES as well. Package lookup is modified as follows: The first step is to check if GOPKGALIASES is defined. If so, this names a file that describes a list of package aliases (a simple list of pairs would do). To find package foo, we first check if foo is a package alias. If so, we switch to the target package and continue the lookup recursively. (It would be illegal to define a cycle in the aliases file.) If foo is not an alias, lookup continues normally via GOPATH.\r\n\r\nActually, I think I really like this idea. It solves more problems than language-level aliases (real problems; see my links above) and it seems like a much simpler and less intrusive change. If others generally agree, I'd be happy to write this up more formally.",
	"user": {
		"login": "tombergan",
		"id": 13954200,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-30T15:54:44Z",
	"updated_at": "2016-07-30T15:56:06Z"
}
