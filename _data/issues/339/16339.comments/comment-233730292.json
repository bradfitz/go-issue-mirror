{
	"id": 233730292,
	"body": "@mewmew Regarding \"ugly is good\": While I emphasized (as one motivating factor) the use of aliases for refactoring, there are other important uses where we don't want to or cannot get rid of the alias declarations. One is the use of aliases for creating component APIs, i.e., a package that exports the unified API for a library consisting of many sub-packages, all of which are hidden in an external directory. Also, \"ugliness\" is absolutely no guarantee that code will eventually be removed. Software history is simply too full of abhorrent notation that survived ad infinitum... . Better to start with a nice notation.\r\n\r\nRegarding the use of aliases instead of dot-imports: Currently dot-imports are used in auto-generated testing packages. A dot-import is of the form:\r\n```\r\nimport . \"pkg\"\r\n```\r\nand all exported objects of `pkg` end up in the file scope of the importing package. This is one of the few places where identifiers are being introduced into a scope but there is no explicit declaration for each identifier in the source (the other two instances are predeclared identifiers, and package names, especially if they don't follow the convention of matching the import path). Having explicit declarations for all identifiers is an important readability feature of Go: whenever we see a name, we can usually find the corresponding declaration for that name somewhere in the package (again, with the exception of built-ins and package names themselves). Alias declarations can take the spot of dot-imports: for each dot-imported object, an alias declaration is introduced. This provides an explicit declaration for each of those identifiers. The main difference to dot-imports is that such alias-declared identifiers would be re-exported, while dot-imported identifiers are not.\r\n",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-19T18:53:00Z",
	"updated_at": "2016-07-19T18:53:00Z"
}
