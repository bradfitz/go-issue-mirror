{
	"id": 234465100,
	"body": "This may be a silly question, but I would like to check whether my understanding of the specification is correct. Let's say I have a function foo and a type alias:\r\n\r\nfunc foo() float\r\n\r\ntype float -\u003e float64\r\n\r\nIf my reading of the spec is correct, function foo would have actually following signature:\r\n\r\nfunc foo() float64\r\n\r\nBut I'm not 100% sure, because it could also have following semantics:\r\n\r\nfunc foo() float\r\ntype float float64\r\n\r\nI don't think the latter semantics makes sense because if float64 would be a type with methods, float wouldn't support these methods.\r\n\r\nAssuming the former semantics I would have used aliases only once in my use of Go to provide a generic matrix.go file using a symbolic link to two packages matrix32 and matrix64 with the type aliases float -\u003e float32 and float -\u003e float64. I wonder now whether aliases could be defined in a way that wouldn't require me to set the symbolic link. I know I'm asking now for generics, but that is the only use case of aliases that I can come up with for the level of problems I solve with Go.",
	"user": {
		"login": "ulikunitz",
		"id": 8460565,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-22T06:30:30Z",
	"updated_at": "2016-07-22T06:30:30Z"
}
