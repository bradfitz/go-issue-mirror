{
	"id": 236360607,
	"body": "@Merovius:\r\n\r\n\u003e Even if we assume that SemVer or vendoring would be a working concept, I fail to see, how they can actually help with this situation, as it's the most horrific case of diamond dependencies ever. \r\n\r\nIn this case versioning and vendoring will definitely help:\r\n- the creators of packages that depend on `x/net/context` can bump the major version by one and thus signal an incompatible change\r\n- the users of the said packages can say: upgrade me to any version in the current major version range but don't give me the next version.\r\n\r\nThat's how it works, that's how it's specified by SemVer and finally that's how every other programming languages which use this concept handle it. It's incredible to see how people assume that gophers will be complete fools when it comes to using SemVer correctly but they will all be the rank of Rob Pike and others from the Go team to use the aliasing correctly.\r\n\r\nAlso in the presented case, this refactoring can be easily automated to be send a PR against all users of `x/net/context` to use `context` from Go 1.7 onward.\r\n\r\n\u003e Aliasing solves this instantly, just make golang.org/x/net/context.Context an alias for context.Context with a build tag for â‰¥ go1.7 (if we pretend that the feature would already exist) and then you are no longer blocked on the transition and take your time filing PRs against all those 5800 packages. Yes, it's not a large use (it's just one alias in one package), but it solves a large-scale problem.\r\n\r\nThis is ignoring a fundamental aspect of the problem. Go is pretty much considered frozen in its API can allow for aliasing the way suggested. And it will work as expected.\r\n\r\nHowever, for normal projects, once you move stuff around, the next thing you'll want to do is to also change the API in some cases (most? not most? I don't have data for this). It's absurd to think that the API will stay the same and it's absurd to think that the alias proposal is anything but a delay into getting to the real problem, the changes which come after moving packages from one place to another.\r\n\r\nAliasing won't freeze the object until everyone is moved on so now you'll have people that need to change both the alias usage then conform to the new API. Or simply conform to the new API. Which one do you think it will be proffered? SemVer would allow you to simply say: hey, my `pacakge A` which is now `1.2` becomes `2.0` after this change that moves stuff around and adds changes to it. People will be forced into either staying in 1.2 or upgrade 2.0 at their on pace.\r\n\r\nAlso, in Googles case, where a mono-repo exists, and according to presentations like this: https://youtu.be/W71BTkUbdqE?t=384 humans do less compared to automated tools, I can't see how moving a package from one place to another.",
	"user": {
		"login": "dlsniper",
		"id": 607868,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-07-30T11:40:40Z",
	"updated_at": "2016-07-30T11:40:40Z"
}
