{
	"id": 236438295,
	"body": "A thought experiment:\r\n\r\nAdd a build directive. For exposition, make it `//go:alias`. It can be placed above \"rename-only\" type declarations of the form `type T p.U`. (Maybe also var/const/func. That's not germane.) That is:\r\n\r\n```go\r\npackage x\r\n\r\nimport p\r\n\r\n//go:alias\r\ntype T p.U\r\n```\r\n\r\nWhen cmd/go encounters a `//go:alias` directive, it (temporarily) rewrites that package's source code and all of its dependencies as needed, replacing x.T with p.U, much as happens with `go test -cover`. I believe that this can be done moderately straightforwardly and moderately efficiently.\r\n\r\nI believe that this is equivalent to the proposed language change, perhaps modulo minor details. The question I have for @davecheney and others who would prefer a build-based solution to a language-based solution is: Is this better or worse than the language change? Why? (Note that I didn't ask whether it was good or bad, only whether it was better or worse.) This is a genuine question; I want to understand.\r\n\r\nTwo other small notes:\r\n\r\n* To all commentators, if you are going to consciously repeat previous arguments you have made, please use a link to the previous comment in place of some of the content.\r\n\r\n* To those who advocate semver as a solution, there's something I don't quite understand still. It is nicely summed up by @neild's [reply](https://github.com/golang/go/issues/16339#issuecomment-232427808) to my [suggestion to use build tags for incremental refactoring](https://github.com/golang/go/issues/16339#issuecomment-232369147):\r\n\r\n\u003e Build tags as suggested by @josharian are unfortunately not a solution, since they would require that all the components of a program agree on a single location for the type.\r\n\r\nWhat does one do about this? I am lost in the sea of text above. A concise explanation would be lovely.\r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	},
	"created_at": "2016-07-31T16:02:12Z",
	"updated_at": "2016-07-31T16:02:43Z"
}
