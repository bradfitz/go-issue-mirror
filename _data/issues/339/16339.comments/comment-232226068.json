{
	"id": 232226068,
	"body": "I don't like how closely the `-\u003e` identifier resembles the `\u003c-` identifier, especially with such different meanings. Might `@` be a better option?\r\n```\r\ntype  T @ L1.T   \r\nconst A @ L1.A   \r\nvar   V @ L1.V   \r\nfunc  F @ L1.F   \r\n```\r\nRather than reading the alias as \"this points to\", I see it as `X` is defined at `L1.X`.  \r\n\r\nBeyond that, I really don't like the scope that this proposal allows.  Refactoring is a difficult problem, but it should really be driven by the package owner(s).  To that point, I'd add these restrictions:\r\n- A single alias/offset pointing to the concrete definition, so we avoid alias chains.  Jumping through 3+ packages to find the original definition would be frustrating and off-putting to those reading the code.  Readability shouldn't be sacrificed during refactoring, as we know how permanent \"temporary\" tends to be.  Also, I can't think of a time when aliasing an alias wouldn't add unnecessary complexity to the code.   \r\n- Treat aliasing as we do internal packages. You can alias something from within your own code tree or your own organization's tree, but not outside.  If I alias your type, I've created a brittle coupling that is hidden within my library.   Dependency management is hard enough without these minefields.\r\n- At a minimum, `go vet` or `golint` should discourage using aliased definitions.  Not only would this make dependent packages aware of the aliasing, it would encourage adoption of the desired refactoring.   \r\n- Best case scenario, `goimports` is able to automatically update the alias and add the import.  Adoption would be as simple as `go get -u ./... \u0026\u0026 goimports -w .`.  ",
	"user": {
		"login": "Kunde21",
		"id": 10493268,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 8,
		"+1": 8
	},
	"created_at": "2016-07-13T00:59:58Z",
	"updated_at": "2016-07-13T01:18:17Z"
}
