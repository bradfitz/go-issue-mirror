{
	"id": 235480505,
	"body": "I have a situation where this proposal (in some form) would be really useful, and I thought it might be worth sharing.\r\n\r\nThe golang.org/x/net/context package provides the Context type that is really widely used: godoc.org lists 3700+ packages that import it. Two of the main repos I maintain – [appengine] and [cloud] – rely on it heavily.\r\n\r\nWith 1.7, the Context type is available directly in the standard library, and is starting to be woven into various parts of the standard library’s APIs (for example `http.Request` now can carry a context with it).\r\n\r\nI can’t see a way for the community to migrate from the existing context package to the new one without a proposal like this which allows the x/net context to become an alias of the new standard one. Not accommodating a gradual migration will also be painful: while the two interface types can often be used interchangeably, there are cases where you need to explicitly cast between the two.\r\n\r\nA common idiom with contexts is to pass around closures that take a context as their first arguments (for example, App Engine’s [datastore.RunInTransaction] function). Without aliasing, you’d need to add extra conversions at the interface between a package that uses the x/net context and a package that uses the standard context.\r\n\r\nThat’s the motivation behind my +1.\r\n\r\n[appengine]: https://godoc.org/google.golang.org/appengine\r\n[cloud]: https://godoc.org/google.golang.org/cloud\r\n[datastore.RunInTransaction]: https://godoc.org/google.golang.org/appengine/datastore#RunInTransaction",
	"user": {
		"login": "okdave",
		"id": 1091335,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-27T04:22:46Z",
	"updated_at": "2016-07-27T04:22:46Z"
}
