{
	"id": 233835085,
	"body": "@dlsniper Thanks for clarifying. The readability and maintainability concern, and aliases not being \"Go-like\" has been expressed by several people now. I think it is pretty clear that this is a major concern for people. I take this as a good sign as it means that Go users really understand the thinking behind Go.\r\n\r\nI am less concerned in this case. Aliases don't give you much benefit unless you really need them, so I'd be surprised if people start to overuse them. A tool (go lint) could even highlight misuses, say when an alias is introduced simply so you can avoid a qualified identifier. On the other hand, say in some graphics code that makes heavy use of sine and cosine, it may be totally appropriate to introduce local aliases\r\n```\r\nfunc sin =\u003e math.Sin\r\nfunc cos =\u003e math.Cos\r\n```\r\nso that one can write `sin(x)` and `cos(x)` rather than `math.Sin(x)` and `math.Cos(x)` everywhere. In fact, I'd do that even w/o aliases by introducing wrapper functions if the respective function calls are common enough, because it may increase readability of the mathematics-heavy code significantly. The effect is exactly the same, and the alias is just as clear if not clearer than the wrapper function.\r\n\r\nPersonally, my concern would be mostly with variables. But then again, exporting global variables is usually not advised and needs careful justification in the first place.\r\n\r\nI hope this helps. Perhaps you could also voice your thoughts on the minimal proposal which is to permit alias declarations for types only. Thanks.\r\n",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 3,
		"+1": 3
	},
	"created_at": "2016-07-20T04:25:55Z",
	"updated_at": "2016-07-20T04:25:55Z"
}
