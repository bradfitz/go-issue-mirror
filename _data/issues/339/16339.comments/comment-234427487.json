{
	"id": 234427487,
	"body": "On Jul 21, 2016 8:21 PM, \"Dave Cheney\" \u003cnotifications@github.com\u003e wrote:\r\n\u003e\r\n\u003e I strongly oppose this suggestion. IMO this is the culmination of several\r\n\u003e well meaning and well reasoned changes to the language and it's tools that\r\n\u003e have resulted in a less cohesive and more complex whole. Specifically:\r\n\u003e\r\n\u003e 1. internal/ packages encourage a proliferation of a taxonomy of tiny\r\n\u003e little packages with poor names and divided responsibilities.\r\n\r\nWhy you didn't reject the internal package feature? Even without type\r\naliases, abuse of internal packages could already cause the problem.\r\n\r\n\u003e 2. this alias proposal permits the package author to continue in this\r\n\u003e fashion, then smoosh them all back together into an idiomatic _looking_ top\r\n\u003e level package.\r\n\r\nIsn't that a good thing (at least to the client)? The client doesn't really\r\ncare how the package is internally organized, only that it does what it\r\nclaims to do in a convenient way. The new Go AST package that gri mentioned\r\nin this thread also illustrated the point: better external interface is\r\nbetter than better internal organization at the expense of worse external\r\ninterface.\r\n\r\n\u003e People will go hog wild with this feature creating byzantine levels of\r\n\u003e complex intertwined packages then cover that all up with a thick layer of\r\n\u003e aliiasing (cpp's #define comes sharply to mind, Fortran's EQUIVALENCE is\r\n\u003e another)\r\n\r\nReplace \"this feature\" with another Go feature (say goto, or even defer),\r\nand I can rewrite the statement so that it can argue against any Go feature.\r\n\r\nAgain, I believe every feature can be misused. It's not the language's\r\nresponsibilities to prevent bad use. We have golint and other tools for\r\nthat. I think this is one of Go's strong point: we use tools, not arbitrary\r\nlanguage limitations,to prevent bad style (gofmt is one prominent example).\r\n\r\nTo prevent deep aliases, we can restrict type alias to a single level at\r\nfirst, and automated tools should do the rest. We can even restrict cross\r\ntree type alias (similar to how importing internal packages work, but I\r\nthink this restriction introduces hierarchical import path into the\r\nlanguage spec, and might have unintended side effects.)\r\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	},
	"created_at": "2016-07-22T00:58:52Z",
	"updated_at": "2016-07-22T00:59:57Z"
}
