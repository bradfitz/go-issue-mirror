{
	"id": 234512839,
	"body": "I have wanted something similar to this feature a few times, but I still don't think it's a good idea. Some time ago I even proposed splitting the runtime package using some linker trickery, to achieve the same effect. So personally I have felt the need for something similar to this proposal.\r\n\r\nSo why am I against it? @davecheney summarised it up pretty well I think, so I won't try much to rehash the same story. But, as an anecdote, since the introduction of internal packages, I find it much harder to navigate and work on Go code. I'm talking about standard Go distribution code here, not 3rd party code. I have a less good expectation where something should be, too many packages share the same name, and there's too little code in packages, making me search for another package all the time.\r\n\r\nAlso, the interface of what now are internal packages has severely decreased in quality. Even though the same thought is being put into the interface of public packages, much less thought is being put into internal packages. Pretty much anything goes. This correlates to the internal implementation as well. Good interfaces seem to force good implementation, so to speak.\r\n\r\nThis feature would make this style of splitting packages the norm, since it makes it easier to provide good interfaces to clients while working in the same split style. I am a programmer, not just a consumer of code. When I decide to use some piece of software, my main concern is \"can I fix this?\". This concern even trumps the concern of \"does it have a good API\" for me. Lately, I feel like the answer to my question is \"yes, but it's getting harder\".\r\n\r\n@griesemer You mention `go/*` packages as an example where this would be useful. I have used `go/*` packages, and similar packages (e.g. the `c2go` stuff) a lot. For example, the arm64 liblink code was almost fully generated by such code. There are many things wrong or hard to do with `go/*` packages, but I always considered the distribution of concerns, and how you have to import several different `go/*` rather than just a big API package a great feature of `go/*`.\r\n\r\n`regexp/syntax` is another example that comes to mind. I have heard (and please correct me if I am wrong) that if we had internal packages from day 1, `regexp/syntax` would be an internal package. But, to me, `regexp/syntax` is on of the best parts of Go.\r\n\r\nI am very much against this proposal, but if I were to \"pick my poison\", I'd much prefer @ianlancetaylor proposal (only types, and use `=`).\r\n",
	"user": {
		"login": "4ad",
		"id": 1331747,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 8,
		"+1": 8
	},
	"created_at": "2016-07-22T10:41:31Z",
	"updated_at": "2016-07-22T10:49:42Z"
}
