{
	"id": 236375446,
	"body": "\u003e @dlsniper But the package is being moved. I don't see how changing the version helps when the final intent is that the package should go away entirely. The point of an alias is to allow a rolling transition to the new package.\r\n\r\nI understand that but the argument is that after such a refactoring it's not like you'll wait for people to move to the new version before you can break API in the new location, no? How could a developer know when it's safe to do that? Besides the open-source projects, I'm willing to bet that there are a lot of closed-source projects which would dwarf the number of open-source ones.\r\n\r\nAs for the change itself, there are two types of changes that could happen:\r\n- from `github.com/dlsniper/demo` to `github.com/dlsniper/new/demo`\r\n- from `github.com/dlsniper/demo` to `github.com/demo/demo`\r\n\r\nIf it's the first type of change, then SemVer and a proper package manager would allow for easy transition as the author could bump the major version by one for this move.\r\nIf it's the later then the user would need to do a search and replace across the project he/she has and change the said import path.\r\n\r\nAgain, the above situation assumes the rather fortunate case when after such a move the API won't immediately break in the new package. The example of `x/net/context` is a terrible one as `context` is now guaranteed not to change APIs while Go1 and before this it had a very stable API. But what if you would have needed to add a new function to the `Context` interface or simply change a signature of the existing ones, that transition wouldn't have been possible, correct? The only solution would have been to wait for Go 2.0 to change the API, which is exactly what me and the others are advocating when saying that this proposal doesn't bring anything that can't be fixed without it (and it's ironic that Go itself would be hindered by its own policies if aliases would have existed and rely on SemVer to do the fixes). Please answer on this one.\r\n\r\n\u003e @dlsniper I think that this aspect that you are more or less waving away is the hard part. There are many users. You can find them all--you can't assume that they are all on Github, some of them are using private repositories.\r\n\r\nSee the above comment, I'm waving it because `context` and Go are special snowflakes when it comes for examples. Go has a frozen API and `x/net/context` API hasn't changed in a while, last change to the interface (or at least in the `interface{ ... }` code area) appears to be in Nov 2014. I'd say that qualifies it as a bad example of package.",
	"user": {
		"login": "dlsniper",
		"id": 607868,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-30T16:42:53Z",
	"updated_at": "2016-07-30T16:44:43Z"
}
