{
	"id": 234635377,
	"body": "@egonelbre \r\n\u003e wrt. to protobuf/proto, is using aliases the best way to solve that problem or are there better solutions? Flatbuffers, gob and capnproto seem to work nicely without such injection.\r\n\r\nI'm not familiar with the Go APIs for capnproto or flatbuffers; from a cursory examination, they appear duplicate the entire user-facing API in each generated library.  That doesn't seem any better to me from the perspective of documentation and discoverability.\r\n\r\nEven if there were a better way to structure the package, how would we get from here to there without either breaking everything that uses the existing proto package or including two separate (and perhaps incompatible) versions in ~every Go binary?  I can see how to do that with type aliases - by defining the old API in terms of the new one or vice-versa - but I don't see a clear migration path without them.",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-22T19:32:59Z",
	"updated_at": "2016-07-22T19:32:59Z"
}
