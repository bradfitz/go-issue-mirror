{
	"id": 234362424,
	"body": "@bcmills You can't refactor a whole package by just aliasing types. Which is the reason behind the syntax woes.\r\n\r\nOr is refactoring not the prime motivation for such a proposal? My point is that the right granularity level should be chosen to solve any issue with package refactoring. Note that the exposed API is supposed to remain the same. It's simply the package structuring that changes.\r\n\r\n\u003e I think that's an oversimplification? The constraint that packages must be acyclic means that you have to consider the dependencies between the subpackages as part of how you do the transformation.\r\n\r\nNo. That constraint simply means that a function used to represent a package may not be composed with itself. (package importing, being somewhat similar to function composition)\r\nIt is an abstraction however since the functions are in general multivariate (Imports such as var, types etc).\r\n\r\n\u003e  I could be wrong. If I am, I look forward to seeing your alternative proposal. :)\r\n\r\nI am just giving hints. I have not really suffered from this problem.\r\nTypically, a package that is being refactored into several ones would become the indirection mentioned.\r\nIt would be a transitional package between H1,...,Hn and B in your examples. But H would remain imported by B. Only difference would be that H would turn into something like:\r\n```go\r\npackage H\r\nrefactored into  {H1,..,Hn}\r\n```\r\n\r\nAnyway, as I've said, it's not formal. But it would be interesting to look at alternatives/alterations and not remain stuck onto this one proposal only.\r\n\r\n",
	"user": {
		"login": "atdiar",
		"id": 12191458,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-07-21T19:45:05Z",
	"updated_at": "2016-07-21T22:25:36Z"
}
