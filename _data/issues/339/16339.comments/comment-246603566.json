{
	"id": 246603566,
	"body": "\u003e Yes, but functions which accept a `context.Context` parameter are a different type from functions which accept an `x/net/context.Context`. This matters in some cases (e.g. [gRPC](https://godoc.org/google.golang.org/grpc)).\r\n\r\nTo my understanding, this is precisely the kind of issue which proposal #8082 seeks to address; *represent interfaces by their definition and not by package and name*.\r\n\r\nRelevant extracts from https://golang.org/ref/spec#Type_identity:\r\n\r\n\u003e Two named types are identical if their type names originate in the same TypeSpec. A named and an unnamed type are always different. Two unnamed types are identical if the corresponding type literals are identical, that is, if they have the same literal structure and corresponding components have identical types. In detail:\r\n\u003e * Two function types are identical if they have the same number of parameters and result values, corresponding parameter and result types are identical, and either both functions are variadic or neither is. Parameter and result names are not required to match.\r\n\u003e * Two interface types are identical if they have the same set of methods with the same names and identical function types. Lower-case method names from different packages are always different. The order of the methods is irrelevant.\r\n\r\nLets imagine #8082 was implemented. In this case, function parameters of interface type would be equal if their interfaces had the same definition, while ignoring the qualified name of the interface. This should be enough to make `type T func(context.Context)` and `type U func(x/net/context.Context)` the same type. Or am I missing something?\r\n\r\nThe following addition to the spec should be enough to describe the intention of #8082 (addition in bold).\r\n\r\n\u003e Two named types are identical if their type names originate in the same TypeSpec. A named and an unnamed type are always different. **An interface type is always considered unnamed.** Two unnamed types are identical if the corresponding type literals are identical, that is, if they have the same literal structure and corresponding components have identical types. In detail:",
	"user": {
		"login": "mewmew",
		"id": 1414531,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-13T07:52:45Z",
	"updated_at": "2016-09-13T07:54:29Z"
}
