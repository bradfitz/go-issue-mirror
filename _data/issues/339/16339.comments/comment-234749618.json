{
	"id": 234749618,
	"body": "I am a bit confused after rereading the proposal. It seems to me that the proposal tries to have all the clients of the refactored package  get \"updated\" by way of aliasing.\r\n\r\nBut is it even possible wrt. type equality ?\r\n\r\nSo far, I assumed that if C imports L and L is split in multiple packages, the mechanism would involve using those multiple packages to recreate L's API surface(or a superset) in a special package R (which could enable the use of aliasing for instance). \r\n\r\nSo only L would change, being declared as aliased by this special R package (for type equality) and the clients would see no change.\r\n\r\nA bit like interfaces and how they compose. The client would see a stable interface/API while the implementation/structure would change.\r\n\r\n\u003e Forbid a package to have two names for the same variable, function, method or type, at any scope.\r\n\r\nUnless mistaken, I would be tempted to say that it would then also require for aliases to be unexportable. Not sure what it entails in terms of usability.\r\n\r\n\u003e  First, the types-only version of this (type A = pkg.B) bothers me because it is too specific and leaves variables in the cold.\r\n\r\nAgreed.\r\n\r\n\r\n\r\n",
	"user": {
		"login": "atdiar",
		"id": 12191458,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-07-24T00:46:06Z",
	"updated_at": "2016-07-24T01:28:18Z"
}
