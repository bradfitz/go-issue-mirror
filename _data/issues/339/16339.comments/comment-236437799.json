{
	"id": 236437799,
	"body": "@atdiar:\r\n\u003e Breaking API should be no joke. And I don't want some library I depend on breaking its API contract under my feet without me knowing it.\r\n\r\nAgreed, I haven't said that.\r\n\r\n\u003e You want to change your API ? Fine. Make another package and let me decide whether I want to migrate or not.\r\n\r\nWhat If I'm happy with this the current package name and everything else and I don't want to have `thisPackage`, `thisNewerPacakge`, `thisEvenNewerPackage`, `thisNewestPackage` and so on? Please see literally all other languages that use package managers and semver for libraries and applications and they are all doing just fine. You, the user are still in control of the upgrade but me the maintainer get not to change package names and whatnot to make this fit into a broken sense of stability.\r\n\r\n\u003e I meant assumption as in \"mathematical\" assumption\r\n\r\nEven so called mathematical assumptions can be proven wrong or changed, please, don't digress.\r\n\r\n@perses:\r\n\r\nCorrect, I haven't. And that doesn't mean I should stop saying my point of view, no? I've provided only technical arguments so far. And here's one more. As soon as you remove the alias and let the new type path take it's course, that's a breaking change. What did aliases provided? A temporary illusion of stability, nothing more.\r\n\r\n\u003e With all due respect, Go doesn't have aliases and any examples of misuse are by their nature speculative.\r\n\r\nWait, what? it's written above and highlighted not only by me but others as well, they are very very real. How can you even say that?",
	"user": {
		"login": "dlsniper",
		"id": 607868,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-31T15:55:15Z",
	"updated_at": "2016-07-31T15:55:15Z"
}
