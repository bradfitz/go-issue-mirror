{
	"id": 234649517,
	"body": "I am happy that the topic came around. Even though the motivation declared above only mentions big large-scale systems, it is also affecting the distributed development and the community. Having said that, I am leaning on the side of giving a -1 to this specific proposal.\r\n\r\nI grouped what the reasons/concerns in two categories depending on who the primary affected party and labelled the items with negative (-) or positive (+) contribution markers.\r\n\r\n**User-facing**\r\n* (-) Alias godocs are likely to live independently but I need to refer to the original type to read more, it requires multiple jumps hence not readable.\r\n* (-) Mental overhead is not appreciated. Similar to type declarations issue, e.g. bson.M requires more mental overhead.\r\n* (-) If exporting private names via aliasing is possible, how the godoc will look like? If private godoc is not exported, it will be hard for the user to refer to the actual name and see how to use the alias.\r\n* (-) The feature will break the uniqueness of the names. Different types may mean the same. It is a breaking behavior for all Go users.\r\n* (-) It will make the tooling work slightly more complicated, it will take a while for the users to benefit from the feature at the tooling level.\r\n* (-) Can . imports override builtin names? A.float32 =\u003e float. Will `import . A` be rejected?\r\n\r\n**Developer-facing**\r\n* (-) It will require more work to find the actual type, not great for readability during development either.\r\n* (-) What are the limits of the aliasing? Can define A.float32 =\u003e float. It will require linter work to hint such misuse.\r\n* (+) More flexibility in the package reorg and likely to provide more reusability.",
	"user": {
		"login": "rakyll",
		"id": 108380,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 12,
		"+1": 12
	},
	"created_at": "2016-07-22T20:35:41Z",
	"updated_at": "2016-07-22T23:39:33Z"
}
