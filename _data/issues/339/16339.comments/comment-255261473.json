{
	"id": 255261473,
	"body": "@brtzsnr That's a good observation. It is intentional. An alias declaration introduces an alternative name for an entity that already must have a name.\r\n\r\nIn other words, an alias declaration in Go cannot be used to get the effect of a type declaration as one might find in Modula-3, where the type declaration introduces a name but the name and the type specification remain interchangeable. In Go, a type declaration always produces a new named type, or a \"branded\" type in Modula-3 terminology; and aliases can only used for types that already have names.\r\n\r\nI suspect this restriction could be loosened if we wanted to but it would change the flavor of the language quite a bit: An unnamed type and a named type might be identical. With the alias proposal as is, an alias type and a named type might be identical, but that's already possible (rune, int32, or when package renaming is used).\r\n\r\nPS: Terminology: A \"basic type\" is usually a predeclared named type such as `int`, `float32`, etc.; they are called \"predeclared types\" in the spec, and they are defined in the universe scope (= \"everywhere\" unless shadowed). Unnamed types such as `[]int` are called \"composite types\" in the spec.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-21T00:10:14Z",
	"updated_at": "2016-10-21T00:10:14Z"
}
