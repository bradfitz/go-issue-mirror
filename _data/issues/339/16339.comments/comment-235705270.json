{
	"id": 235705270,
	"body": "@mattfarina \r\n\r\n\u003e - Create a 2.0.0 release with the new changes\r\n\u003e - Use a tool like GB, Glide, or real package manager in Go (yet to be created) that deals with versions. Use the package manager, like in the other major languages, to make sure you have the right versions in your app.\r\n\u003e\r\n\u003e The last bullet is important for this strategy to work.\r\n\r\nThat doesn't address the version-skew problem.  If the most recent release of package `A` depends on `appengine 1.*` and package `B` depends on `appengine 2.*`, what happens to users who already depend on both `A` and `B`?\r\n\r\nIf the answer is \"they have to wait until `A` upgrades to `2.*`\", they might be waiting forever.  If the answer is \"fork `A` and upgrade it themselves\", they might have a huge amount of extra work to do - and their fork will probably not interoperate well with a standard package manager.\r\n\r\nThe problem becomes even more acute if `A` upgrades directly to `3.*` without ever being compatible with `2.*`: now there's no guarantee that compatible versions of `A` and `B` will ever exist.\r\n\r\nAliasing gives you a means to make more versions compatible: if you can define a `1.*` shim in terms of the `2.*` API, the package-manager can install the `2.*` version with the `1.*` shim and users can depend on the current releases of both `A` and `B` in the same binary.",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 5,
		"+1": 5
	},
	"created_at": "2016-07-27T20:10:47Z",
	"updated_at": "2016-07-27T20:10:47Z"
}
