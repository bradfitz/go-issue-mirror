{
	"id": 235669895,
	"body": "@mattfarina \r\n\r\n\u003e In Go we tend to have one way to solve a problem. It's why we don't have generics or every feature from other languages.\r\n\r\nAgreed.  There are many features Go does not have, and most of them have straightforward workarounds: we can use reflection instead of generics; if-statements and assignment instead of a ternary operator; embedding instead of inheritance.\r\n\r\nGo does not currently have a good workaround for refactoring APIs across package boundaries.  You seem to be arguing that versioning and package-management would suffice.  So let's look at that as an option.  How would you handle the `context` and `protobuf` examples described earlier on this thread using that approach?\r\n\r\nIn particular, how would you handle migrating the `appengine` package from `golang.org/x/net/context` to the native Go 1.7 `context` package without breaking current `appengine` users?",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-27T18:06:40Z",
	"updated_at": "2016-07-27T18:06:40Z"
}
