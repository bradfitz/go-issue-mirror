{
	"id": 66078562,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eAnother try. It has also a bug fixed where the result was 0 if the array pointer was\nidentical but not the length.\n\nOLD\nBenchmarkCompareBytesEqual               50000000                40.3 ns/op\nBenchmarkCompareBytesToNil              500000000                7.65 ns/op\nBenchmarkCompareBytesEmpty              200000000                8.23 ns/op\nBenchmarkCompareBytesIdentical           50000000                39.9 ns/op\nBenchmarkCompareBytesSameLength         100000000                17.4 ns/op\nBenchmarkCompareBytesDifferentLength    100000000                17.0 ns/op\nBenchmarkCompareBytesBigUnaligned            2000             1238070 ns/op    846.95\nMB/s\nBenchmarkCompareBytesBig                     2000             1241571 ns/op    844.56\nMB/s\nBenchmarkCompareBytesBigIdentical            2000             1232570 ns/op\n\nNEW\nBenchmarkCompareBytesEqual              100000000                16.4 ns/op\nBenchmarkCompareBytesToNil              500000000                4.99 ns/op\nBenchmarkCompareBytesEmpty              500000000                4.69 ns/op\nBenchmarkCompareBytesIdentical          500000000                4.69 ns/op\nBenchmarkCompareBytesSameLength         200000000                8.54 ns/op\nBenchmarkCompareBytesDifferentLength    200000000                9.11 ns/op\nBenchmarkCompareBytesBigUnaligned            5000              655437 ns/op   1599.83\nMB/s\nBenchmarkCompareBytesBig                     5000              642836 ns/op   1631.19\nMB/s\nBenchmarkCompareBytesBigIdentical       500000000                4.69 ns/op\n\n\nAnd BenchmarkCompareBytesBig for different lengths:\n\nOLD\nlen = 1       50000000        39.8 ns/op       351.39 MB/s\nlen = 2       50000000        39.8 ns/op       352.09 MB/s\nlen = 4       50000000        39.7 ns/op       352.45 MB/s\nlen = 8       50000000        39.8 ns/op       351.92 MB/s\nlen = 16      50000000        57.5 ns/op       487.27 MB/s\nlen = 32      50000000        74.0 ns/op       567.69 MB/s\nlen = 64      20000000         106 ns/op       658.48 MB/s\nlen = 128     10000000         188 ns/op       743.45 MB/s\nlen = 256      5000000         335 ns/op       792.09 MB/s\nlen = 512      5000000         632 ns/op       819.31 MB/s\nlen = 1024     1000000        1241 ns/op       834.76 MB/s\nlen = 2048     1000000        2435 ns/op       845.13 MB/s\nlen = 4096      500000        4840 ns/op       847.47 MB/s\nlen = 8192      200000        9660 ns/op       849.23 MB/s\nlen = 16384     100000       19221 ns/op       852.92 MB/s\nlen = 32768      50000       38482 ns/op       851.67 MB/s\nlen = 65536      20000       76704 ns/op       854.55 MB/s\nlen = 131072     10000      153808 ns/op       852.24 MB/s\nlen = 262144      5000      307017 ns/op       853.86 MB/s\nlen = 524288      5000      615835 ns/op       851.36 MB/s\nlen = 1048576     2000     1231070 ns/op       851.77 MB/s\n\n\nNEW\nlen = 1      100000000        16.5 ns/op       846.38 MB/s\nlen = 2      100000000        16.4 ns/op       852.57 MB/s\nlen = 4      100000000        16.4 ns/op       852.57 MB/s\nlen = 8      100000000        16.5 ns/op       848.44 MB/s\nlen = 16     100000000        28.7 ns/op       975.89 MB/s\nlen = 32      50000000        46.9 ns/op       895.85 MB/s\nlen = 64      50000000        63.5 ns/op      1102.99 MB/s\nlen = 128     20000000         105 ns/op      1330.09 MB/s\nlen = 256     10000000         179 ns/op      1481.81 MB/s\nlen = 512      5000000         377 ns/op      1373.93 MB/s\nlen = 1024     5000000         731 ns/op      1415.61 MB/s\nlen = 2048     1000000        1394 ns/op      1476.24 MB/s\nlen = 4096     1000000        2594 ns/op      1581.25 MB/s\nlen = 8192      500000        4998 ns/op      1641.36 MB/s\nlen = 16384     200000       11115 ns/op      1474.86 MB/s\nlen = 32768     100000       19941 ns/op      1643.54 MB/s\nlen = 65536      50000       39982 ns/op      1639.43 MB/s\nlen = 131072     20000       82104 ns/op      1596.52 MB/s\nlen = 262144     10000      162009 ns/op      1618.12 MB/s\nlen = 524288      5000      321418 ns/op      1631.21 MB/s\nlen = 1048576     5000      640836 ns/op      1636.28 MB/s\n\nOkay, I stop abusing this issue report now ;)\nI hope this helps as a basis for a proper CL. I see no reason why the same function\ncouldn't be also used to improve string comparison.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/5354/2/compare_amd64.s\"\u003ecompare_amd64.s\u003c/a\u003e (2079 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/5354/2/compare_test.go\"\u003ecompare_test.go\u003c/a\u003e (3800 bytes)",
	"user": {
		"login": "julienschmidt",
		"id": 944947,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-04-27T19:49:33Z",
	"updated_at": "2014-12-08T10:28:56Z"
}
