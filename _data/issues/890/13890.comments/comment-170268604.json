{
	"id": 170268604,
	"body": "I believe this is working as intended.\r\n\r\nFrom the [specs: Package initialization](https://golang.org/ref/spec#Package_initialization):\r\n\r\n\u003e Dependency analysis does not rely on the actual values of the variables, only on lexical references to them in the source, analyzed transitively. For instance, if a variable x's initialization expression refers to a function whose body refers to variable y then x depends on y. Specifically:\r\n\u003e\r\n- A reference to a variable or function is an identifier denoting that variable or function.\r\n- A reference to a method m is a method value or method expression of the form t.m, where the (static) type of t is not an interface type, and the method m is in the method set of t. It is immaterial whether the resulting function value t.m is invoked.\r\n- A variable, function, or method x depends on a variable y if x's initialization expression or body (for functions and methods) contains a reference to y or to a function or method that depends on y.\r\n\r\nAccording to the above, `C` depends on `u`, `u` depends on `f` and `f` depends on `C`, which completes the circular dependency.",
	"user": {
		"login": "cznic",
		"id": 729580,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-09T18:41:04Z",
	"updated_at": "2016-01-09T18:41:04Z"
}
