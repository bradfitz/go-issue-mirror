{
	"id": 255196713,
	"body": "Although this bug pattern most often manifests with `go` statements (leading to data races), sequential (non-racy) instances are possible too, such as with `defer` or the simple example presented in this Issue.\r\n\r\nvet already checks for patterns of the form:\r\n```\r\nfor k, v := range seq {\r\n    go/defer func() {\r\n        ... k, v ...\r\n    }()\r\n}\r\n```\r\n\r\nThe example presented in this Issue is more challenging to analyze because it requires proving that the function is not called within the loop, or at least failing to prove that it is called within the loop.  Once the anonymous function has been stored in a data structure or passed to another function, vet can no longer precisely determine when it might be called.\r\n\r\nIn other words, I think the current vet check is probably as good as we can do without interprocedural analysis.",
	"user": {
		"login": "alandonovan",
		"id": 8433140,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-20T18:58:17Z",
	"updated_at": "2016-10-20T19:02:59Z"
}
