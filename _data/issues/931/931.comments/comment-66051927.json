{
	"id": 66051927,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003e\"10.0 times 0.1 is hardly ever 1.0.\"\n\nEven so, I think you're right that there's a rounding issue.  It looks like\nthe 6g math routines always truncate when converting exponents.\n\nIf you look inside a .6 file with a const 0.1 declared inside it,\nthe internal approximation to 0.1 is \n\n35490172084746430202603701557031471403986394564810452162182138631867152739912007974911672398132986599646607500305965719410869220147p-437\n\n(p-437 means * 2^-437).\n\nIf we feed 6g that number times ten:\n\npackage main\nconst mul =\n354901720847464302026037015570314714039863945648104521621821386318671527399120079749116723981329865996466075003059657194108692201470p-437\n\n(yes, that's not a Go program, but 6g accepts it)\nthen the constant in the resulting .6 file is\n\n39402006196394479212279040100143613805079739270465446667948293404245721771497210611414266254884915640806627990306815p-384\n\nIt's a little odd that the precision changed so much (by 53 bits instead of 3).\n\nAlso, that's not even the best approximation with exponent 2^384.  It differs\nfrom the input by -9007199254740990 * 2^-437, but changing the trailing\n5 in that very big number to a 6 would result in an approximation that \ndiffers by only 2 * 2^-437, making me think that 6g is always truncating\ndown when converting from one precision to another.\n\nAnd in fact if 6g did round it to .....6816 instead of .....6815, that would\nbe a real 1.0 and your program would work, a happy side effect.\u003c/pre\u003e\n\n\n_Owner changed to **k...@golang.org**._\n\n_Status changed to **Accepted**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-07-17T02:22:07Z",
	"updated_at": "2014-12-08T10:06:24Z"
}
