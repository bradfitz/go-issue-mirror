{
	"id": 66052118,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eThis has come up before; it's hard to do in a way that feels right.\nLet's say var f *myFile is a type I've defined that implements Logger.\nCan I call f.Debugf?  Probably not: yes, f implements Logger but \nit might implement some other interface with an \"extended\" Debugf\nmethod too.  Maybe one in some package I've never even heard of.\n\nWhat you can already do is create adapters that take one interface\nand return another.  So you could have a function that takes a\nLogger (with just Log) and returns an ExtendedLogger (with Logf, Debugf, etc)\nand then call it once to set things up.  \n\ntype Logger interface {\n    Log(int, string)\n}\n\ntype XLogger struct {\n    Logger\n}\n\nfunc (x *XLogger) Debugf(...) { ... }\n\nlog := \u0026XLogger{myLogger}\nlog.Debugf(fstring, vars)\n\nThis comes up once in a while but I can't find it the previous\ntime in my email at the moment.\n\nFurther discussion should take place on the mailing list.\u003c/pre\u003e\n\n\n_Owner changed to **r...@golang.org**._\n\n_Status changed to **WorkingAsIntended**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-07-30T16:33:47Z",
	"updated_at": "2014-12-08T10:06:35Z"
}
