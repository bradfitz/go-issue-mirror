{
	"id": 69115000,
	"body": "I found a way around the problem of the need to\r\nadd a function declaration in the original Go file\r\nfor pre-Go 1.5 and the _gc.c and also the need to\r\noverride the same function in the _gc.go file.\r\n\r\nThis solution used the fact that //go:linkname is\r\nonly recognized in Go 1.5 and above, and Go 1.5+\r\nwill disregard the _gc.c file and compile the _gc.go:\r\n\r\nThe idea is that in the main Go file, we use //go:linkname\r\nto rename the declared function swig_init_c to another\r\nname, say swig_init_go. Because this is ignored by\r\npre Go 1.5, it serves as declaration for the function\r\nimplemented in _gc.c. However, in Go 1.5, this renames\r\nthe function to a global swig_init_go, and in the _gc.go\r\nfile, we similarly rename the actual swig_init function\r\nto a global swig_init_go.\r\n\r\nIn real swig implementations, we will need to rename\r\nthe function to something that contains the package\r\nimport path, so that the init function from different packages\r\nwon't collide.\r\n\r\nA simple demo program:\r\n// a.go, this simulate the main swig generated Go file\r\npackage main\r\n\r\nimport (\r\n        \"sync\"\r\n        _ \"unsafe\"\r\n)\r\n\r\nvar _swig_once sync.Once\r\n\r\nvar A uintptr // to be initialized in swig_init\r\n\r\n//go:linkname swig_init_c swig_init_go\r\nfunc swig_init_c()\r\n\r\nfunc init() {\r\n        // simulate that swig needs to initialize\r\n        // some variables during init\r\n        _swig_once.Do(swig_init_c)\r\n}\r\n\r\nfunc main() {\r\n        println(\"main\")\r\n}\r\n\r\n// b_gc.c, file compiled by pre 1.5 go tool\r\n// +build !go1.5\r\n\r\n#include \"runtime.h\"\r\nvoid ·swig_init_c(void) {\r\n        // init ·A here\r\n        runtime·printf(\"swig_init in C\\n\");\r\n}\r\n\r\n\r\n// b_gc.go, file compiled by Go 1.5+ go tool\r\n// +build go1.5\r\n\r\npackage main\r\n\r\nimport _ \"unsafe\"\r\n\r\n//go:linkname swig_init swig_init_go\r\nfunc swig_init() {\r\n        // init A here\r\n        println(\"swig_init in Go\")\r\n}\r\n\r\nand we need a dummy c.s file to make sure go tool\r\ndoesn't think the package is completely in Go.\r\n\r\nThen both `go build -tags go1.5` and `go133 build` will work.\r\n(Go 1.4 won't work because it doesn't allow C source files\r\nwithout cgo, but when the files are generated by swig, there\r\nis no such restriction.)\r\n\r\n@ianlancetaylor, what do you think about this solution?\r\nIf you think this is the right way to go, I will update my\r\nswig fork and propose a pull request to swig.",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-08T00:00:48Z",
	"updated_at": "2015-01-08T00:03:26Z"
}
