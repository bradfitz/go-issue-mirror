{
	"id": 51289046,
	"number": 9063,
	"state": "closed",
	"title": "crypto/tls: Documentation and/or signature of crypto/tls.Conn.VerifyHostname could be clearer",
	"body": "by **ox@getlantern.org**:\n\n\u003cpre\u003eWhat does 'go version' print?\n\ngo version go1.3.3 darwin/amd64\n\nWhat steps reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n\nSee this gist - \u003ca href=\"https://gist.github.com/oxtoacart/e13883d91039dc44f5e6\"\u003ehttps://gist.github.com/oxtoacart/e13883d91039dc44f5e6\u003c/a\u003e\n\nWhat happened?\n\nFunction TestUsingVerifyHostname fails.\n\nWhat should have happened instead?\n\nIt's actually okay that this test fails, but not intuitive.  conn.VerifyHostname doesn't\nactually validate the certificate chain against the configured RootCAs.  In fact, it\ndoesn't really do anything with the \u0026quot;chain\u0026quot; at all, it simply checks the\npeer's certificate.  Here's the code snippet from conn.go:\n\nc.peerCertificates[0].VerifyHostname(host)\n\nTo make this clearer, I think the documentation for that function should read something\nlike:\n\n\u0026quot;VerifyHostname checks that the peer's certificate is a valid certificate for the\nnamed host. If so, it returns nil; if not, it returns an error describing the problem.\nWARNING - VerifyHostname does not validate the peer certificate chain against any\nCAs.\u0026quot;\n\nPerhaps even better, the function could have a signature that accepts an *x509.CertPool\ncalled RootCAs and, if provided, actually does validate agains them.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		},
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 6,
	"closed_at": "2015-07-22T17:32:26Z",
	"created_at": "2014-11-05T14:21:58Z",
	"updated_at": "2016-08-05T16:08:34Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
