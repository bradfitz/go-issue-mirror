{
	"id": 51278151,
	"number": 1675,
	"state": "closed",
	"title": "Optional (or default) function arguments",
	"body": "by **pierre.gotab**:\n\n\u003cpre\u003eSummary of mailing list related subjects:\nThere is no optional arguments in Go. (And no function overloading.)\n- So this is difficult to port some APIs in Go\n- And difficult to write some code (as strings.Split 3rd arg)\n\nProposed existent workarounds:\nAssume we want a function foo taking two integers with the second optional defaulting to\n0.\n\n- function wrapper\nfunc foo2(bar int, baz int) {\n    // sthg\n}\nfunc foo1(bar int) {\n    return foo2(bar, 0)\n}\n\nNeed to write the same thing 3 times or more... Somewhat against the \u0026quot;everything is\ndeclared exactly once\u0026quot; Go principle.\n\n- varargs\nfunc foo(bar int, optional ...int) {\n    var baz int = 0\n    if len(optional) \u0026gt; 1 {\n        panic(\u0026quot;Too much args\u0026quot;)\n    } else if len(optional) == 1 {\n        baz = optional[0]\n    }\n    // sthg\n}\n\nHeavy code, catch \u0026quot;Too much args\u0026quot; at execution time.\n\n- struct\ntype fooArgs struct { baz int }\nfunc foo(bar int, optional fooArgs) {\n    baz := fooArgs.baz\n    // sthg\n}\n// call:\nfoo(3, fooArgs{42})\nfoo(3, fooArgs{})\n\nMake the call heavy to write and create a struct each call.\n\nProposed optional arguments specification:\n- With default value\nfunc foo(bar int, baz int = 0) {}\nfunc foo(bar int, baz := 0) {}\n\n- Using the zero value\nfunc foo(bar int, baz? int) {} // baz will default to 0 if not set\n\n- With named parameters\nfunc foo(bar int, baz int = 0, qux int = 0) {}\nfoo(3, qux:5)\n\nThe named parameter with default value approach is close to the struct workaround, and\nis really flexible.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "LanguageChange"
		}
	],
	"comments": 8,
	"closed_at": "2014-12-08T10:09:22Z",
	"created_at": "2011-04-08T00:49:34Z",
	"updated_at": "2016-06-24T19:27:19Z"
}
