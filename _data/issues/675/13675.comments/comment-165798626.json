{
	"id": 165798626,
	"body": "It's easy to recreate this:\r\n\r\n    package p\r\n\r\n    import \"sync\"\r\n\r\n    type S struct {\r\n\t    mu sync.Mutex\r\n    }\r\n\r\n    func F() {\r\n\t    r := S{}\r\n\t    r = S{}\r\n\t    _ = r\r\n    }\r\n\r\nThere is currently no composite literal exception to the lock check.  The declaration of `r` is considered OK by vet.  The assignment to `r` is not.\r\n\r\nWe could change vet to permit the copy in the case of a composite literal where the uncopyable value is uninitialized.  But I'm not sure if we should make that change, since I would probably tell somebody doing this to rewrite the code.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-18T15:01:56Z",
	"updated_at": "2015-12-18T15:01:56Z"
}
