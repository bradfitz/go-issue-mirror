{
	"id": 155698832,
	"body": "@techtonik thank you for your feedback.\r\n\r\nI understand that this proposal is not an exact match for the capabilities of the windows console, but this is not the specific goal of this proposal.\r\n\r\nThere is a need for a set of packages that manages tty like streams of bytes connected to text console like devices. These might be terminals, or windows cmd.exe, or remote ssh sessions, or serial terminals, and so on.\r\n\r\nThese facilities have been implemented over and over again on an as needs basis by many authors and are usually incomplete -- And the missing piece is overwhelmingly windows support. There are many serial handling packages, few support windows. There are many ncurses style packages, few support windows.\r\n\r\nYou are correct that adopting an api that treats cmd.exe as a stream of bytes will be an incomplete abstraction. Such limitations also exist by treating xterm's like pty's. I'm sure similar restrictions exist for plan9 rio windows, but I have no direct experience.\r\n\r\nIn return for giving up a little performance, or a little control, what all Go developers stand to gain is one package that everyone can use to do simple things like\r\n\r\n- open a serial device, and set it's baud rate\r\n- disabling terminal echo when entering passwords\r\n- the raw mechanics necessary to implements readline type cli interfaces\r\n- and of course to be a base for more complicated projects.\r\n\r\nI'm also confident that where necessary the correct holes can be poked in the API to permit developers who want to exploit platform specific facilities to have access to those APIs.\r\n\r\nCan you see your way to agreeing that this proposal is trying to make things better for windows developers ?\r\n\r\nThanks\r\n\r\nDave",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-11T08:04:19Z",
	"updated_at": "2015-11-11T08:04:19Z"
}
