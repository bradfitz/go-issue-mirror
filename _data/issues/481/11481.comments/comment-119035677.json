{
	"id": 119035677,
	"body": "\u003e The fast path requires 3 or fewer arguments (store in registers) and a slow path (store in stack).\r\n\r\n4 or less (not 3 or fewer).\r\n\r\n\u003e  If I raise it to say 5 or more, for the n=5 \"fix\" to work, I also have to raise that to ensure it takes the slow path as well.\r\n\r\nWhile trying to debug, I have removed \"fast version\" completely. It did not change broken test or anything else.\r\n\r\n\u003e But perhaps these subtle changes just mess with Windows' ability to see the callstack. Apparently if Windows can't decode the callstack, it just swallows the exception. This is also behavior that was changed in Windows 7+, thus we only see this issue with XP x64.\r\n\r\nI agree. My current belief is that there is some subtle thing we create in our process environment that makes Windows exception handling to change dramatically - SetUnhandledExceptionFilter works and AddVectoredContinueHandler does not, or SetUnhandledExceptionFilter does not work and AddVectoredContinueHandler works. Perhaps it is something to do with the fact that we don't provide any \"stack unwind\" information, and Windows exception handler struggles.\r\n\r\nI also hope that this is Windows XP 64bit only struggle.\r\n\r\n\u003e Maybe don't mark this issue as fixed though.\r\n\r\nWe can always open new or reopen this.\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-07T00:40:32Z",
	"updated_at": "2015-07-07T00:40:32Z"
}
