{
	"id": 118902136,
	"body": "Hi @alexbrainman ,\r\n\r\nI'm fine making the builder green for now, even if we don't have a final solution.\r\n\r\nOne thing I noted was that in file sys_windows_amd64.s TEXT runtimeÂ·asmstdcall there is a fast and slow execution path. The fast path requires 3 or fewer arguments (store in registers) and a slow path (store in stack). If I raise it to say 5 or more, for the n=5 \"fix\" to work, I also have to raise that to ensure it takes the slow path as well.\r\n\r\nThat begin said, it doesn't matter that *that* call write to the stack, as I can preceded the call with a different syscall that takes 5 arguments that writes to the stack. But perhaps these subtle changes just mess with Windows' ability to see the callstack. Apparently if Windows can't decode the callstack, it just swallows the exception. This is also behavior that was changed in Windows 7+, thus we only see this issue with XP x64.\r\n\r\nAfter reading more on windows exception handling I don't think there is go stack corruption causing this. \r\nSubmit https://golang.org/cl/11888 and let's move on for now. Maybe don't mark this issue as fixed though.\r\n\r\nReferences:\r\nhttp://cbloomrants.blogspot.com/2011/11/11-09-11-weird-shite-about-exceptions.html\r\n\r\nhttp://blog.paulbetts.org/index.php/2010/07/20/the-case-of-the-disappearing-onload-exception-user-mode-callback-exceptions-in-x64/\r\n\r\nhttps://support.microsoft.com/en-us/kb/973460\r\n\r\n",
	"user": {
		"login": "kardianos",
		"id": 755121,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-06T15:44:39Z",
	"updated_at": "2015-07-06T15:44:39Z"
}
