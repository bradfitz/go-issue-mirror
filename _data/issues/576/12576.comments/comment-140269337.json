{
	"id": 140269337,
	"body": "IEEE 754 was solving a different problem.  They had to decide what would happen at runtime for division by zero.  For Go we are only talking about floating point constants and constant expressions.  There are no floating point constant functions, so we are limited to what we can write using the builtin arithmetic operations.  Division by constant 0 is a compile time error.  We don't have to answer the question of how to represent division by 0, because it is impossible.  We don't need to support infinity or NaN, because there is no way to write any constant expression that will produce them.  It's not quirks of the language.  It's just logic.\r\n\r\nNegative zero is a different case, because it is possible to write constant expressions that produce negative zero.  Of course, for constant expressions, there is no way to distinguish positive zero from negative zero.  So what we are talking about here is whether there should be any way to write a constant expression that, when converted to float32 or float64, produces a negative zero.\r\n\r\nFor me, the argument that IEEE supports a negative zero is not a sufficient argument.  Floating point constants are a different solution for a different problem.  There can not be an isomorphic mapping from constants to IEEE values.  There might be a good reason to support producing negative zero when converting to IEEE.  But I think it needs to be more than simply the fact that IEEE supports negative zero.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-15T03:28:21Z",
	"updated_at": "2015-09-15T03:28:21Z"
}
