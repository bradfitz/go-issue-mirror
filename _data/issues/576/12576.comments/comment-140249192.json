{
	"id": 140249192,
	"body": "I realize that many things could be argued, but these are mostly old arguments that were hashed out back when IEEE FP was defined.  I think we should support -0, NaN, +Inf, -Inf in our ideal constants for the following reasons:\r\n\r\n- it will break no non-test code, and even if I am wrong (because I have not searched all the Go code in the world) the fix is trivial.\r\n\r\n- it's not a wholesale destructive change to the rules for ideal constants.  It adds 4 special values, and the rules for those values have relatively little interaction with the other rules of constant arithmetic.  We don't lose the sign when the magnitude is zero, we replace certain error cases with special values, and 0-0 = +0 (i.e., -0 + +0 = +0 ).  For non-float conversions from constants, -0 becomes 0, and Inf and Nan become errors.\r\n\r\n- it will slightly reduce surprise for new users, and reduce the friction of porting (some) FP code written in other languages to Go.\r\n\r\n- it's rarely a bad thing to bring a computer language into closer conformance with a well-accepted and well-understood standard.\r\n\r\nGo has quirks, but for most of the quirks there's at least a reason.  The reason here seems to be \"because\", and five years from now that will be really embarrassing that we didn't fix this now when the cost is still low.\r\n",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-15T01:41:45Z",
	"updated_at": "2015-09-15T01:41:45Z"
}
