{
	"id": 141292848,
	"body": "It turns out that the spec is already authoritative, see http://tip.golang.org/ref/spec#Conversions:\r\n```\r\nA constant value x can be converted to type T in any of these cases:\r\n...\r\nx is a floating-point constant, T is a floating-point type, and x is representable by a value of type T after rounding using IEEE 754 round-to-even rules. The constant T(x) is the rounded value.\r\n...\r\n```\r\nIn an assignment of the form:\r\n```\r\nvar x = -1e-1000\r\n```\r\nwe effectively have\r\n```\r\nvar x = float64(-1e-1000)\r\n```\r\nwhich is valid if -1e-1000 is representable as a float64 after rounding using IEEE 754 round-to-even rules. float64(-1e-1000) is representable, and the value can be explicitly computed, for instance with math/big: http://play.golang.org/p/wY1ulpXxdp . The result of rounding is -0 .\r\n\r\nThere is a chance that math/big.Float doesn't round correctly, but the same behavior can be observed in pure IEEE-754 arithmetic, by taking the smallest representable float64 value \u003c 0 and dividing it by 2. The resulting value will underflow and round to 0, and the sign is the sign after round-to-even per IEEE-754: http://play.golang.org/p/C1XTOEZier . The result of rounding is again -0 .\r\n",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-18T00:14:29Z",
	"updated_at": "2015-09-18T00:14:29Z"
}
