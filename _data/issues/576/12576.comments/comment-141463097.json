{
	"id": 141463097,
	"body": "Why would you modify the conversion rule to exclude negative zero, and not modify the constants rule to include it?  This gets us easy expression of an otherwise unsayable FP value.\r\n\r\nI've discussed this with Austin also, he thinks that permitting constants to evaluate to +/- Inf is a net lose because of bugs-not-caught, and I think that might be right.  But -0 is easy -- \"constant values have signs, even the zero constant, where signs obey the usual rules, and -0 obeys the following two additional rules: -0==+0, and -0 + +0 = +0\".\r\n\r\nThere's the additional startling glitch in the spec where we allow a Go implementation to panic in the case of\r\n```\r\nx := float64(0.0)\r\ny := 1/x\r\n```\r\ninstead of assigning +Inf to y.  If people actually believed this could panic,  they'd be forced to code all their FP divisions defensively -- I'll bet they don't, and if they did, it would slow their code down (slightly) and they would curse us for not providing clean, sensible, and widely-understood semantics.\r\n\r\nOr to put this in Go-centric terms -- well-defined division semantics are simpler and easier for programmers than ambiguous semantics, so why don't we choose simpler?",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-18T14:17:21Z",
	"updated_at": "2015-09-18T14:17:21Z"
}
