{
	"id": 69694984,
	"body": "An M is in schedule, then calls findRunnable.  In proc.c:1467-1486, it\r\ncalls netpoll and finds some new work (some Gs).  It then calls pidleget,\r\nbut doesn't get a p.  It then calls injectglist on the work that it got.\r\nThat puts the runnable Gs on the global run queue.  It then falls through\r\nto proc.c:1487 and calls stopm, which calls mput, which calls checkdead.\r\n checkdead sees a runnable G on the queue and barfs.\r\n\r\nThat's all hypothetical, of course.  Just a theory from dadkins' stack\r\ntrace and reading the code.\r\n\r\nI think we just need to prevent the fallthrough in the case where we get\r\nwork.  We should go work on that work, not stop.  We're stopping because we\r\ncouldn't find a P, of course.  But if that's the case, then\r\nstopm/mput/checkdead shouldn't barf if there are runnable Gs around, right?\r\n\r\nOn Mon, Jan 12, 2015 at 8:27 PM, Dmitry Vyukov \u003cnotifications@github.com\u003e\r\nwrote:\r\n\r\n\u003e Keith, please describe the failure scenario that you see in more detail. I\r\n\u003e don't see how the crash can happen and why the goto is necessary.\r\n\u003e\r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub\r\n\u003e \u003chttps://github.com/golang/go/issues/9576#issuecomment-69693815\u003e.\r\n\u003e",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-13T04:47:02Z",
	"updated_at": "2015-01-13T04:47:02Z"
}
