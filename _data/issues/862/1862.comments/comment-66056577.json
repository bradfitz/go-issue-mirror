{
	"id": 66056577,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5 by **jz4082**:\n\n\u003cpre\u003eI ran some of the subcommands for gotest individually from the command line.  \n\n$ time gomake testpackage-clean\nrm -f _test/main.a _gotest_.8\n\nreal\t0m0.800s\nuser\t0m0.036s\nsys\t0m0.596s\n\n$ time gomake testpackage GOTESTFILES=hello_test.go\n8g  -o _gotest_.8 hello.go hello_test.go\nrm -f _test/main.a\ngopack grc _test/main.a _gotest_.8\n\nreal\t0m0.754s\nuser\t0m0.044s\nsys\t0m0.496s\n\n$ time $GOROOT/src/cmd/gotest/gotest -x -v\ngotest 0.00s: gomake testpackage-clean\nwithin doRun, before proc.Wait 0.494051\nrm -f _test/main.a _gotest_.8\nwithin doRun, after proc.Wait 11.532474\n [+11.48s]\ngotest 11.53s: gomake testpackage GOTESTFILES=hello_test.go\nwithin doRun, before proc.Wait 11.886213\n8g  -o _gotest_.8 hello.go hello_test.go\nrm -f _test/main.a\ngopack grc _test/main.a _gotest_.8\nwithin doRun, after proc.Wait 24.156244\n [+12.62s]\ngotest 24.16s: gomake -s importpath\nwithin doRun, before proc.Wait 24.493889\nwithin doRun, after proc.Wait 46.284691\n [+22.13s]\ngotest 46.33s: 8g -I _test _testmain.go\nwithin doRun, before proc.Wait 46.658758\nwithin doRun, after proc.Wait 47.157365\n [+0.90s]\ngotest 47.30s: 8l -L _test _testmain.8\nwithin doRun, before proc.Wait 47.634142\nwithin doRun, after proc.Wait 49.401580\n [+2.10s]\ngotest 49.40s: ./8.out -test.v=true\nwithin doRun, before proc.Wait 49.789059\n=== RUN  main.TestHello\n--- PASS: main.TestHello (0.00 seconds)\n\tStarting Test\n\tStopping Test\nPASS\nwithin doRun, after proc.Wait 49.933941\n [+0.66s]\ngotest 50.07s: done\n\nreal\t0m50.376s\nuser\t0m3.580s\nsys\t0m31.622s\n$ \n\n\nWhen run via gotest command, each of these subcommands take substantially more time than\nwhen run separately from shell. \n\nI found that $GOROOT/src/cmd/gotest/gotest.go:319 makes the command wait a\nnon-insignificant amount of time (10-20 seconds), and that line was the cause for the\ntime difference in execution vs. running the subcommands separately.\n\n   319\t\twaitMsg, err := proc.Wait(0)\n\nI am a bit unfamiliar with the internals of Wait method or what the implications mean. \nIs this an os signal that Ubuntu on VirtualBox must be providing slowly that Ubuntu on\nbare metal is providing more quickly?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-05-22T23:02:43Z",
	"updated_at": "2014-12-08T10:10:15Z"
}
