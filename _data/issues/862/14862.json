{
	"id": 141899013,
	"number": 14862,
	"state": "closed",
	"title": "cmd/compile: invalid instructions",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\ntip + patch https://go-review.googlesource.com/#/c/20833/3\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nlinux + amd64\r\n\r\n3. What did you do?\r\nCompile\r\n```\r\npackage main\r\n\r\nvar si []int = make([]int, 10)\r\n\r\nvar X interface{}\r\n\r\nfunc use(y interface{}) {\r\n        X = y\r\n}\r\n\r\nfunc main() {\r\n        const ci64big int64 = 1 \u003c\u003c 31\r\n        use(si[ci64big])\r\n}\r\n```\r\n\r\n\r\n4. What did you expect to see?\r\nTo compile.\r\n\r\n5. What did you see instead?\r\n./foo.go:15: invalid instruction: 00054 (/tmp/foo.go:13)        ADDQ    $17179869184, CX\r\n\r\n6. Additional information\r\nThe manual http://support.amd.com/TechDocs/24594.pdf page 79 says that ADDQ imm only works with AX, but here CX is generated. \r\n\r\nI believe the bug is here:\r\n                {name: \"ADDQconst\", argLength: 1, reg: gp11, asm: \"ADDQ\", aux: \"Int64\", resultInArg0: true, typ: \"UInt64\"}, // arg0 + auxint\r\nor in the actual encoding of the instruction. We should probably fallback to LEAQ if the output goes to a different register.\r\n\r\n\r\n@randall77 ",
	"user": {
		"login": "brtzsnr",
		"id": 57079,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-03-20T00:13:05Z",
	"created_at": "2016-03-18T15:32:36Z",
	"updated_at": "2016-03-20T00:13:05Z"
}
