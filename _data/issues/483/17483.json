{
	"id": 183472388,
	"number": 17483,
	"state": "closed",
	"title": "Proposal: add sync.Future",
	"body": "\"future\" is well known useful concurrency primitive.\r\nSo it strangely missed from language and standard library.\r\nSince #17466 (add to language) doubtfully will be accepted, may be it is possible to add it to stdlib.\r\n\r\nProposal\r\n=======\r\n\r\nadd sync.Future with following properties:\r\n- it should provide method for getting wait channel to be used in `select` statement,\r\n- it should guarantee value is set only once even when concurrent goroutines tries to set it simultaneously,\r\n- it may have convinient method for waiting for \"completion\" and getting value at once\r\nAs additional properties:\r\n- it may have separate field for storing error,\r\n- then method for getting value will return both value and error,\r\n\r\nAs example implementation (but not final) I suggest following:\r\nhttps://github.com/funny-falcon/go-datastructures/blob/future_selectable_lazy_chan/futures/selectable.go\r\nPros:\r\n- fast check in `GetResult` on already filled future,\r\n- wait channel is lazy created,\r\n- on `Fill`, pointer to channel is changed to single global closed chan, so per Future channel could be early collected by GC (or even not allocated at all)",
	"user": {
		"login": "funny-falcon",
		"id": 249427,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 6,
	"closed_at": "2016-10-19T16:57:59Z",
	"created_at": "2016-10-17T17:04:02Z",
	"updated_at": "2016-10-19T18:22:48Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	},
	"reactions": {
		"total_count": 8,
		"+1": 1,
		"-1": 7
	}
}
