{
	"id": 254286494,
	"body": "It seems that all of this can be implemented as an independent library\nwithout any change to sync. The separate library approach would avoid the\ncost of increasing the api surface of sync. Furthermore experience with the\nlibrary could inform a better design and allow the evolution of the API in\nways that putting it into sync would preclude.\n\nIt is not immediately obvious how one would implement \"early collected by\nGC\" in Go's current implementation.\n\nOn Mon, Oct 17, 2016 at 1:04 PM, Sokolov Yura \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e \"future\" is well known useful concurrency primitive.\n\u003e So it strangely missed from language and standard library.\n\u003e Since #17466 \u003chttps://github.com/golang/go/issues/17466\u003e (add to\n\u003e language) doubtfully will be accepted, may be it is possible to add it to\n\u003e stdlib.\n\u003e Proposal\n\u003e\n\u003e add sync.Future with following properties:\n\u003e\n\u003e    - it should provide method for getting wait channel to be used in\n\u003e    select statement,\n\u003e    - it should guarantee value is set only once even when concurrent\n\u003e    goroutines tries to set it simultaneously,\n\u003e    - it may have convinient method for waiting for \"completion\" and\n\u003e    getting value at once As additional properties:\n\u003e    - it may have separate field for storing error,\n\u003e    - then method for getting value will return both value and error,\n\u003e\n\u003e As example implementation (but not final) I suggest following:\n\u003e https://github.com/Workiva/go-datastructures/blob/master/\n\u003e futures/selectable.go\n\u003e Pros:\n\u003e\n\u003e    - fast check in GetResult on already filled future,\n\u003e    - on Fill, pointer to channel is changed to single global closed chan,\n\u003e    so per Future channel could be early collected by GC. Cons:\n\u003e    - it is allocated using constructor. I think, it could be fixed with\n\u003e    some additional checks in wchan and Fill methods (probably, then\n\u003e    allocation of chan could be omitted of fastly resolved futures)\n\u003e\n\u003e â€”\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/17483\u003e, or mute the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AA7Wn21Nny7H_tfcsxq2dYEI_PUNTl5mks5q06qPgaJpZM4KY3Zb\u003e\n\u003e .\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-17T18:08:42Z",
	"updated_at": "2016-10-17T18:08:42Z"
}
