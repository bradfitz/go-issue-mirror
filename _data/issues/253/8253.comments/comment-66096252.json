{
	"id": 66096252,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eI did some checking (actually, I did some checking back around when I posted this but\ntime got away). It is definitely true that the issue stems from UI calls needing to be\non the main thread.\n\nI understand that thread affinity is touchy, since it limits the scheduler in a lot of\nways. However, in my experience programs care about one of two things:\n\n1. Is this being run on the SAME thread?\n2. Is this being run on the MAIN thread?\n\nCurrently, 1. is easily handled by LockOSThread, however, handling of 2. requires\nextremely awkward program structure by calling LockOSThread in init. While it is a\n\"corner case\" and I can see that it may not be the most pressing concern, I do feel that\nhandling it in a less obtuse way would make Go easier to work with when porting C\nlibraries. It would make it much easier to focus on programming rather than threading,\nwhich is one of the things that draws me to Go.\n\nMy proposal is\n\nruntime.UseMainOSThread()\n\nThis would force the runtime to always schedule the current goroutine to the main\nthread. It would be acceptable to make this incompatible with runtime.LockOSThread in\nthe same Goroutine if necessary. I think this would rather elegantly fix the really\nfinicky program structure issues currently surrounding the C libraries that require\nrunning on the main thread.\u003c/pre\u003e",
	"user": {
		"login": "Jragonmiris",
		"id": 3078382,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-08-22T11:49:22Z",
	"updated_at": "2014-12-08T10:45:49Z"
}
