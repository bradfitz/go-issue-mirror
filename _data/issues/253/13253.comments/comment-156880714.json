{
	"id": 156880714,
	"body": "@ianlancetaylor Could I ask if there are specific problems you are addressing with my proposal? I ask to understand how my proposal could be shifted to address your concerns (assuming you have them and don't feel it is fundamentally flawed).\r\n\r\nThe main advantage in your proposal is the ability to go from a single slice into a [\\*]T. Effectively, this is allowing a \"reshape\" operation in matlab/numpy speak. The downside to your proposal is that I don't see how to do rectangular views in your proposal. One may slice the rows with your [\\*] expressions, but one may not slice all of the columns. That is, the t[a:b, c:d] operation in my proposal does not seem possible. \r\n\r\nIf views are not important, then matrix multiplication can be coded as \r\n````\r\nfunc matmul(a, b, c [*]float64)\r\n````\r\nBut slicing is a crucial property for matrix operations. Almost every Lapack function uses matrix views (though it's hard to see from the code as it's coded with the single slice mentality). As a result, matrix multiplication must be coded with (multiple) size parameters per slice, which defeats one of the major benefits of the table data structure.\r\n\r\nYou say \"A slice also has a capacity, but that is mainly relevant when building an array.\" I don't think that's true. Capacities are also very important for append and append-like operations. This is especially important for tables/strided slices where no built-in append exists. A frequent use case of mine is building up a matrix row-by-row as new data enters. I don't see how that would be possible with strided slices without also remembering the effective number of rows in the matrix. \r\n\r\n@nsf Fixed sized strided slices are already allowed -- arrays of arrays. You can already declare a [128][64][64]T\r\n\r\n@nsf @somadivad : The ability to easily reshape easily and the ability to take views easily are basically mutually exclusive without some wrangling. As mentioned above, it seems like taking views on [\\*]T is impossible. With my tables proposal, you can take views easily, but because the stride is \u003e= to the number of columns (and not =), you cannot reshape arbitrarily. A matrix with rows=m, cols = n, stride = k, the \"flattened slice\" has size m\\*k.  What use cases for reshaping do you have @somadivad? A reshape as you propose above is not the same as an actual transpose operation.\r\n\r\n@ianlancetaylor Just as a note to short circuit the conversation, it's easy to extend my proposal to slices of arbitrary dimension. There are also opportunities with slicing in the last dimension(s), i.e. t[2,:] --\u003e []T. This would have a similar effect as strided slices, and could lead to the similar simplifications. ",
	"user": {
		"login": "btracey",
		"id": 3680859,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-16T00:57:45Z",
	"updated_at": "2015-11-16T01:37:12Z"
}
