{
	"id": 156804948,
	"body": "\u003e The ability to subslice along any dimension, not only the first. For example, given a [h,w] slice, to select either a [h',w] subslice or a [h,w'] subslice or a [h',w'] subslice.\r\n\r\nSeems like a much higher level abstraction than the idea behind strided slices. As far as I understand strided slices always point to a contiguous chunk of memory.\r\n\r\n\u003e The ability to manipulate the \"shape\" of the multi-dimensional array on the same underlying data. For example, given a [30] slice, to construct a [5,6] slice on the same data; given a [5,6] slice, to construct a [6,5] slice which represents the transpose. These are all operations which amount to having different strides on the same data.\r\n\r\nSimilar problem. If you mean having a transposed abstraction without changing underlying data - that's a violation of being contiguous. We can however transpose data by constructing another slice and \"stricing\" it using right dimensions.\r\n\r\nThe main problem here is that stride slices proposed by @ianlancetaylor do not define strides per dimension and separate rules for accessing data of each dimension.\r\n\r\nE.g. when you say `ss[3][4]`, `ss[3]` **must** return a slice, which implies contiguous memory on last dimension. Virtually transposing something implies that last dimension becomes non-contiguous.\r\n\r\nIn a way strided slice is a very low level abstraction, which basically says how you should work with multi-dimensional data on modern CPUs by enforcing a set of strides sorted in a descending order and iterating starting from the smallest stride first (if we take \"virtual\" strided slices into account, it has a stride which always equals to 1).\r\n\r\n\r\n\r\n",
	"user": {
		"login": "nsf",
		"id": 12567,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-15T11:34:07Z",
	"updated_at": "2015-11-15T11:34:07Z"
}
