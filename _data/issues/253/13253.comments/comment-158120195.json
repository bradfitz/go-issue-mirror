{
	"id": 158120195,
	"body": "First of all, it has been my impression that a partial proposal is a non-starter.\r\n\r\nAgreed that the index semantics are a second order issue.\r\n\r\nI tried to detail it in the text of the proposal, but maybe it's better to detail our arguments here. The starting point of our proposal is that tables should match slices as much as possible. This seems like a reasonable starting point given the consistency goals of Go. What are the properties of slices?\r\n\r\n- Taking a \"slice\" is getting a continuous subset of data.\r\n- A slice is an array that has been sliced\r\n- A slice action gets any continuous subset from the start of the slice to the capacity of the slice or length of array. \r\n- A slice action may use 3-element syntax to change the capacity of the slice.\r\n\r\nGiven these properties, the following properties seem extremely natural for a \"multi-dimensional slice\"\r\nDesiderata:\r\n- Taking a \"view\" (a.k.a. multidimensional slice) is getting a continuous subset of the data in all of the dimensions \r\n- A \"table\" (a.k.a multi-dimensional slice) is a multi-dimensional array that has been sliced\r\n- A view action gets any continuous subset in each dimension from the start of the dimension up until the capacity of the dimension\r\n- A view action may use 3-element syntax to change the capacity in any dimension\r\n\r\nThe above behavior, to me, feels like an extremely natural extension to slices and their fundamental behavior. For example, under this definition a single slice is just a special case of a table. Taking as a given that slicing in multiple dimensions should feel like slicing in a single dimension, lots of things follow.\r\n\r\n- Data is stored in row-major format. This must be as arrays of arrays are row-major, and a table is just a sliced array of arrays\r\n- Views can be \"down-slicing\" or \"up-slicing\". This is by definition since the goal is to match single slice behavior\r\n- The underlying data structure must have storage for data, lengths, capacities, and strides. This is the only way to support the above behavior.\r\n- Arbitrary reshaping between tables of different dimensions is not allowed, as this is not possible given the above desiderata.\r\n\r\nThere are lots of questions that are not answered by the desiderata. The most important are the behaviors you an Ian suggest\r\n- Can you also construct a table using data from a single array or slice?\r\n- Can you get a lower-dimensional table from a higher dimensional one?\r\n\r\nIf the answer to the above are both yes, it has one set of ramifications for the rest of the defining behavior of tables (syntax, len, range etc.). If no, it has a different set. \r\n\r\nGo wants to be consistent, so I think the desiderata I propose are a necessary starting point (as they make \"multi-dimensional slices\" feel like \"uni-dimensional slices\"). This is what I think the concept should be.",
	"user": {
		"login": "btracey",
		"id": 3680859,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-19T17:05:20Z",
	"updated_at": "2015-11-19T17:05:20Z"
}
