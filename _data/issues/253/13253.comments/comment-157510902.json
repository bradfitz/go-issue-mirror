{
	"id": 157510902,
	"body": "@ianlancetaylor \r\n\u003e The suggestion of allowing an empty index to convert from the strided slice back to a regular slice is an interesting one, and it does seem implementable. I can't think of any problem with it off hand.\r\n\r\nI actually meant it like an ordinary conversion, e.g. we can convert a string to byte slice via `s := []byte(b)`, same way for converting strided slices to normal slices. And by empty index I guess you mean something like: `s := ss[]`. An interesting idea as well.\r\n\r\nThe most important parts of my post however are these:\r\n\r\n1. Strides vs dimensions. You mentioned `[stride,]`, but what I actually meant is `[dimension,]`. Because for more than two dimensions stride values become not so obvious to compute. I mean it's nothing too complicated, but people don't think in stride values. Especially when by looking at strides you want to figure out the dimensions.\r\n2. And my personal wish is fixed-size strided slices. But it's more like a performance paranoia kind of feature.\r\n\r\n@ianlancetaylor \r\nAlso why trailing comma is ugly? It's consistent, we have that on slice expressions, except it's a trailing colon there (`x := y[5:]`). Same logic here: `s[3,3,3]` can be written as `s[3,3,]`, because last dimension can be inferred via length, just like with slices the upper bound is `len(s)` by default. You can write it without trailing comma, I believe it can be implemented and parsed without ambiguities.",
	"user": {
		"login": "nsf",
		"id": 12567,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-17T21:21:47Z",
	"updated_at": "2015-11-17T21:21:47Z"
}
