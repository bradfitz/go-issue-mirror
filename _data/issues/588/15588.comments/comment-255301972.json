{
	"id": 255301972,
	"body": "I tried looking where all the time goes in BenchmarkRunningGoProgram, and I noticed there is a time.Sleep in os.Process.wait that makes BenchmarkRunningGoProgram slower than it needs to be. I also thought, maybe that time.Sleep is so long, we do not notice CL 22932 improvements because that extra sleep is so large.\r\n\r\nSo I removed time.Sleep (see CL 31536 patch set 1). And then I cherry picked CL 22932 on top of that (see CL 31536 patch set 2). And then I tested performance improvements between CL 31536 base and ps1, and ps1 and ps2. As before I did\r\n\r\ngo test -run=none -count=10 -bench=BenchmarkRunningGoProgram runtime\r\n\r\nI see this on my Windows XP:\r\n\r\nbase -\u003e ps1:\r\nname                old time/op  new time/op  delta\r\nRunningGoProgram-2  11.2ms ± 2%   5.8ms ± 1%  -48.55%  (p=0.000 n=10+9)\r\n\r\nps1 -\u003e ps2:\r\nname                old time/op  new time/op  delta\r\nRunningGoProgram-2  5.76ms ± 1%  5.76ms ± 2%   ~     (p=0.646 n=9+10)\r\n\r\non Windows 7\r\n\r\nbase -\u003e ps1:\r\nname                old time/op  new time/op  delta\r\nRunningGoProgram  12.5ms ± 4%   6.7ms ± 1%  -46.17%  (p=0.000 n=10+10)\r\n\r\nps1 -\u003e ps2:\r\nname                old time/op  new time/op  delta\r\nRunningGoProgram  6.72ms ± 1%  6.86ms ± 4%  +2.17%  (p=0.017 n=10+10)\r\n\r\non another Windows 7\r\n\r\nbase -\u003e ps1:\r\nname                old time/op  new time/op  delta\r\nRunningGoProgram-2  10.2ms ± 1%   6.0ms ± 4%  -41.01%  (p=0.000 n=9+10)\r\n\r\nps1 -\u003e ps2:\r\nname                old time/op  new time/op  delta\r\nRunningGoProgram-2  6.01ms ± 4%  5.83ms ± 2%  -2.88%  (p=0.004 n=10+9)\r\n\r\non Windows 10 laptop\r\n\r\nbase -\u003e ps1:\r\nname                old time/op  new time/op  delta\r\nRunningGoProgram-4  20.5ms ± 2%  15.7ms ± 1%  -23.55%  (p=0.000 n=10+10)\r\n\r\nps1 -\u003e ps2:\r\nname                old time/op  new time/op  delta\r\nRunningGoProgram-4  15.7ms ± 1%  16.4ms ± 2%  +4.90%  (p=0.000 n=10+10)\r\n\r\nSo again I do not see much improvement in CL 22932. There is some speed up in removing time.Sleep in os.Process.wait (CL 31536 patch set 1), but all.bat fails during cmd/go testing with this change. I also tried replacing time.Sleep with SwitchToThread Windows API, but that still fails. It would be nice not to care if executable file is still locked after process completes, but a lot of our code depends on that.\r\n\r\nMaybe Windows caches DLL well, so second execution of the same process is just quick. So I run make.bat against all versions of CL 31536 (I used github.com/alexbrainman/time to measure this):\r\n\r\nmy Windows XP:\r\n\r\nCL 31536 base\t1m23.984s\t1m24.172s\t1m23.938s\r\nCL 31536 ps1\t1m23.203s\t1m22.953s\t1m23.656s\r\nCL 31536 ps2\t1m22.344s\t1m22.797s\t1m23.234s\r\n\r\nmy Windows 7:\r\n\r\nCL 31536 base\t2m14.284s\t1m57.884s\t2m11.774s\r\nCL 31536 ps1\t1m59.779s\t1m57.583s\t2m1.458s\r\nCL 31536 ps2\t1m57.501s\t1m58.761s\t2m1.522s\r\n\r\nAnd I do not see much improvements anywhere. Even removing time.Sleep from os.Process.wait does not look important.\r\n\r\nI am out of ideas. Unless I can see some improvements, I do not think CL 22932 is worth the trouble.\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-21T06:10:53Z",
	"updated_at": "2016-10-21T06:10:53Z"
}
