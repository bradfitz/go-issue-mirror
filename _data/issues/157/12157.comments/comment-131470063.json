{
	"id": 131470063,
	"body": "@aclements, it looks like SetFinalizer never checks that the object is actually allocated. It checks that the object is from an in-use span, but if it had already been freed, SetFinalizer would still succeed. That might go unnoticed until the whole span was freed, and then at the next GC we'd see a crash like this.\r\n\r\nThis theory still implicates some kind of bug in the way SetFinalizer is being used in @zeebo's program, but maybe for Go 1.6 we can detect SetFinalizer on freed objects during the call? Or maybe it's not worth it.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-15T23:54:08Z",
	"updated_at": "2015-08-15T23:54:08Z"
}
