{
	"id": 135567074,
	"body": "It is easy to work around the problem, but it is also surprising (to me). The reason is that error says\r\nerror: unsupported driver -\u003e Scan pair: time.Time -\u003e *string\r\ninstead of something like\r\nerror: sql/driver: couldn't convert 5 into type bool\r\nwhich is what you get run into a truly lossy conversion.\r\n\r\nAt the very least, the current behavior should be documented. But I don't think this behavior is correct and think we should fix.\r\n\r\nIt seems like a cop-out to use the loss of information rule as an excuse for not converting time.Time to a string. You can certainly encode a time, including its time zone, as a string without losing any information.\r\n\r\nI would make the argument that time.Time should be converted to string because all of the other types mentioned in the Scanner interface are successfully converted into string. It is surprising that time.Time is not. It feels like an oversight, not an intentional decision.\r\n\r\nIn fact, are there are any Scanners in the standard library which handle time.Time?\r\n\r\nThe reason I bring this up is in the first place is that the only way to read a timestamp from a database using Scan is to know a columns contains a timestamp and provide a time.Time (or NullTime in libpq). Otherwise, it's straightforward to dump a table's contents into strings if you don't care. Instead, that's an error and you have to workaround the problem for times only. It's not like timestamps are a corner case of database either. They're very prevalent.",
	"user": {
		"login": "dadkins",
		"id": 507004,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-27T21:59:15Z",
	"updated_at": "2015-08-27T21:59:15Z"
}
