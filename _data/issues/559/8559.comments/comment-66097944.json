{
	"id": 66097944,
	"body": "\u003ca id=\"c18\"\u003e\u003c/a\u003eComment 18:\n\n\u003cpre\u003eIs it time to switch go-dev?\n\n\n\u003e If you import the same package using two different import strings, then you have two\npackages, both built from the same source code, that look identical, but that\nnevertheless have different types and different global variables.  That is by design. \nThe import string determines the package.\n\nYes, I understand.  The great thing about this is that it puts control of package\nidentity into the programmer's hands.  Setting PkgPath==\"main\", OTOH, takes this control\naway.\n\n\n\u003e You are saying that we should have a different rule for the main package itself.\n\nNo, I'm saying we should have the same rule for the main package:  The import string\ndetermines the package.  In the case of building a command, the import string comes from\nthe install name.  I understand that this isn't obvious to you, but I don't understand\nwhy.  The command \"go install path/to/pkg\" installs a package that is uniquely\nidentified by \"path/to/pkg\".  This should be true regardless of whether it is package\nmain.\n\n\n\u003e I don't see any obviously right thing to do here.  To me the most natural choice is\nthe one we have already made.\n\nMaybe it just feels that way because you've lived with it for awhile.  It feels\nunnatural to me because \"main\" doesn't refer to any source location in GOPATH (or on the\nweb), and because it takes control of package identity away from the programmer.\u003c/pre\u003e",
	"user": {
		"login": "gordonklaus",
		"id": 1638352,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-08-23T14:02:28Z",
	"updated_at": "2014-12-08T10:47:32Z"
}
