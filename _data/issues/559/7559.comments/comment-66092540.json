{
	"id": 66092540,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eThat is indeed unfortunate.\n\nI went to read in the spec where this comes out. I assume the bottom\nof \u003ca href=\"http://golang.org/ref/spec#Constant_expressions\"\u003ehttp://golang.org/ref/spec#Constant_expressions\u003c/a\u003e is the pertinent\nbit?\n\n  \"Implementation restriction: A compiler may use rounding while\ncomputing untyped floating-point\n   or complex constant expressions; see the implementation restriction\nin the section on constants.\n   This rounding may cause a floating-point constant expression to be\ninvalid in an integer context,\n   even if it would be integral when calculated using infinite precision.\"\n\nSo this bug is applying that paragraph to int32(2.9 * 24 * 60 * 60),\nimplying something in evaluating \"2.9 * 24 * 60 * 60\" is \"rounding\"\nsuch that its value is no longer representable as an int32\n(specifically, not an integer). But shouldn't any rounding here just\nmake it more likely for the expression to yield an integer? A\nleft-first evaluation starts with \"2.9 * 24\", giving 69.6; is gccgo\nrounding that to some nearby value that doesn't yield an integer when\nmultiplied by the \"60 *60\"?\u003c/pre\u003e",
	"user": {
		"login": "dsymonds",
		"id": 31506,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-17T06:46:34Z",
	"updated_at": "2014-12-08T10:42:02Z"
}
