{
	"id": 95476262,
	"body": "git bisect says:\r\n```\r\n4655aadd00fd0228469ebc3c8b9edead7387f285 is the first bad commit\r\ncommit 4655aadd00fd0228469ebc3c8b9edead7387f285\r\nAuthor: Austin Clements \u003caustin@google.com\u003e\r\nDate:   Tue Apr 21 14:24:25 2015 -0400\r\n\r\n    runtime: use reachable heap estimate to set trigger/goal\r\n\r\n    Currently, we set the heap goal for the next GC cycle using the size\r\n    of the marked heap at the end of the current cycle. This can lead to a\r\n    bad feedback loop if the mutator is rapidly allocating and releasing\r\n    pointers that can significantly bloat heap size.\r\n\r\n    If the GC were STW, the marked heap size would be exactly the\r\n    reachable heap size (call it stwLive). However, in concurrent GC,\r\n    marked=stwLive+floatLive, where floatLive is the amount of \"floating\r\n    garbage\": objects that were reachable at some point during the cycle\r\n    and were marked, but which are no longer reachable by the end of the\r\n    cycle. If the GC cycle is short, then the mutator doesn't have much\r\n    time to create floating garbage, so marked≈stwLive. However, if the GC\r\n    cycle is long and the mutator is allocating and creating floating\r\n    garbage very rapidly, then it's possible that marked»stwLive. Since\r\n    the runtime currently sets the heap goal based on marked, this will\r\n    cause it to set a high heap goal. This means that 1) the next GC cycle\r\n    will take longer because of the larger heap and 2) the assist ratio\r\n    will be low because of the large distance between the trigger and the\r\n    goal. The combination of these lets the mutator produce even more\r\n    floating garbage in the next cycle, which further exacerbates the\r\n    problem.\r\n\r\n    For example, on the garbage benchmark with GOMAXPROCS=1, this causes\r\n    the heap to grow to ~500MB and the garbage collector to retain upwards\r\n    of ~300MB of heap, while the true reachable heap size is ~32MB. This,\r\n    in turn, causes the GC cycle to take upwards of ~3 seconds.\r\n\r\n    Fix this bad feedback loop by estimating the true reachable heap size\r\n    (stwLive) and using this rather than the marked heap size\r\n    (stwLive+floatLive) as the basis for the GC trigger and heap goal.\r\n    This breaks the bad feedback loop and causes the mutator to assist\r\n    more, which decreases the rate at which it can create floating\r\n    garbage. On the same garbage benchmark, this reduces the maximum heap\r\n    size to ~73MB, the retained heap to ~40MB, and the duration of the GC\r\n    cycle to ~200ms.\r\n\r\n    Change-Id: I7712244c94240743b266f9eb720c03802799cdd1\r\n    Reviewed-on: https://go-review.googlesource.com/9177\r\n    Reviewed-by: Rick Hudson \u003crlh@golang.org\u003e\r\n\r\n:040000 040000 0d316fca9bd1a1b42e1801466f1ff7302113a026 9a190d7e325c1532822cc0f443873e942dca67f4 M      src\r\n```",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-23T07:31:28Z",
	"updated_at": "2015-04-23T07:31:28Z"
}
