{
	"id": 210054380,
	"body": "\u003e It becomes tempting to build generics into the standard library at a very low level, as in C++ std::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e. This has its benefits—otherwise nobody would do it—but it has wide-ranging and sometimes surprising effects, as in incomprehensible C++ error messages.\r\n\r\nThe problem in C++ arises from type checking generated code. There needs to be an additional type check before code generation. The C++ [concepts](https://en.wikipedia.org/wiki/Concepts_(C%2B%2B)) proposal enables this by allowing the author of generic code to specify the requirements of a generic type. That way, compilation can fail type checking before code generation and simple error messages can be printed. The problem with C++ generics (without concepts) is that the generic code _is_ the specification of the generic type. That's what creates the incomprehensible error messages.\r\n\r\nGeneric code should not be the specification of a generic type.",
	"user": {
		"login": "sbunce",
		"id": 463674,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-14T17:11:20Z",
	"updated_at": "2016-04-14T17:11:20Z"
}
