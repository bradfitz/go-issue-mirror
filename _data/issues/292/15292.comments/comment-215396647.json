{
	"id": 215396647,
	"body": "@jba We certainly agree with the principle of avoiding complexity. \"As simple as possible but no simpler.\" I would probably leave some Genus features out of Go on those grounds, at least at first.\r\n\r\n One of the nice things about the Genus approach is that it handles built-in types smoothly. Recall that primitive types in Java don't have methods, and Genus inherits this behavior.  Instead, Genus treats primitive types *as if* they had a fairly large suite of methods for the purpose of satisfying constraints. A hash table requires that its keys can be hashed and compared, but all the primitive types satisfy this constraint. So type instantiations like \u003ctt\u003eMap[int, boolean]\u003c/tt\u003e are perfectly legal with no further fuss. There is no need to distinguish between two flavors of integers (int vs Int) to achieve this. However, if \u003ctt\u003eint\u003c/tt\u003e were not equipped with enough operations for some uses, we would use a model almost exactly like the use of \u003ctt\u003eInt\u003c/tt\u003e above.\r\n\r\nAnother thing worth mentioning is the idea of \"natural models\" in Genus. You ordinarily don't have to declare a model to use a generic type: if the type argument satisfies the constraint, a natural model is automatically generated. Our experience is that this is the usual case; declaring explicit, named models is normally not needed. But if a model were needed — for example, if you wanted to hash ints in a nonstandard way — then the syntax is similar to what you suggested: \u003ctt\u003eMap[int with fancyHash, boolean]\u003c/tt\u003e. I would argue that Genus is syntactically light in normal use cases but with power in reserve when needed.",
	"user": {
		"login": "andrewcmyers",
		"id": 4623813,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-28T11:35:56Z",
	"updated_at": "2016-04-28T19:52:49Z"
}
