{
	"id": 127184458,
	"number": 13992,
	"state": "closed",
	"title": "runtime: memory allocated by OS not in usable range (ARM)",
	"body": "Hey all,\r\n\r\n  I'm not sure whether this is a bug in Go, a bug in our code or something just odd, but thought I'd post it to get some pointers, as previous occurrences of this error usually meant bugs in the runtime.\r\n\r\n  One of our users were experimenting with running our Ethereum codebase on Android, ARMv7 with Go 1.6 beta1 or beta2 (didn't get a confirmation yet on it), and at a certain point he was hit with the non-usable memory error below:\r\n\r\n```\r\nruntime: memory allocated by OS (1626533888) not in usable range [0x9143a000,0x1143a000)\r\nruntime: out of memory: cannot allocate 268435456-byte block (3145728 in use)\r\n```\r\n\r\n  Could this point to an underlying issue in Go, or should I look in our own code base? Given the oddity of the report that memory seems to be available but Go cannot use it, it seems to me that it's an issue with Go, but I'm not sure of it.\r\n\r\n---\r\n\r\nUpdate: I think the Android library producing this issue was built with 1.6beta1 (via [xgo](https://github.com/karalabe/xgo), notable [this .aar bundle](https://bintray.com/artifact/download/karalabe/ethereum/geth-1.4.0-unstable-5945a33-android-21.aar.tar.bz2)),  will ask for a repro code if it's deemed to be a Go bug requiring investigation. The code was ran on a Sony Xperia Z2, which should have plenty of memory to cover the code's requirements.\r\n\r\nUpdate 2: Given that the cross builds are from xgo, both ARMv7 and ARM64 libraries are included in there, so the issue might be with ARM64 and not ARMv7 as I originally thought.",
	"user": {
		"login": "karalabe",
		"id": 129561,
		"type": "User",
		"site_admin": false
	},
	"comments": 17,
	"closed_at": "2016-05-07T03:05:13Z",
	"created_at": "2016-01-18T09:21:03Z",
	"updated_at": "2016-05-19T20:34:16Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
