{
	"id": 202694737,
	"body": "More info on my use case:\r\n\r\n**The application**: https://github.com/jwilder/docker-gen\r\n**What does it use templates for?** It inputs data on running docker containers into the template (as different kind of arrays), and the template outputs a written config for any sort of application the user needs it for, e.g. a webserver that needs to redirect web clients to all containers in some specific way.\r\n**Why do I need something like  lexically scoped variables?** I want to iterate through the arrays of containers and do something if one or more fulfilling a condition are present, *and output something else if nothing in the array fulfilled the condition* (that is the problematic part). This is not the most trivial, but still a more or less basic logical workflow that can be essential for many more complex scenarios.\r\n**Why can't it be simply patched into docker-gen?** The application will obviously not patch filtering for any specific condition, because that will heavily depend on each end user and the specific application they want to output a configuration for. E.g. the way the test condition looks like for me depends on my specific combination of an nginx container with a let's encrypt container, something docker-gen could never know or prepare for.\r\n\r\nI see two solution possibilities for Go Template:\r\n\r\n**1. Global variables as specified**\r\n\r\nAs described in this feature request's initial post.\r\n\r\nAlso, where would it end? Exactly here. Just add proper global scope variable support. Again jinja2 and others already support this with workarounds, the major problem of Go Template is that there appear to be none so far. Those special scenarios aren't very common, but **if** someone runs into one of them this feature will probably save them big time. Global variables make you go from various special scenarios with arrays being very hard to undoable unless the application provides a specific kind of filter function or processing function to create a new array from it, to easily almost Turing complete (minus infinite loops) with all sorts of special stuff being possible with workarounds if really needed in some situation.\r\n\r\n**2. Construct/assign a new array in the template from a previous one with a given filter condition**\r\n\r\nIf you don't like the idea, you might be able to fix the specific thing I want by allowing to create an array with a filtered condition comparable to Python's list comprehension from an existing array, and then allow the template to iterate and examine the length of the resulting new array instead. However that is both probably more complicated for me to use for my specific use case, and also a more limited solution that doesn't cover many slightly more complex scenarios which I'm sure aren't that impossible to run into. I really think adding global variables that can be set/changed with the template is a much more universally useful idea.\r\n\r\n",
	"user": {
		"login": "JonasT",
		"id": 1573352,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-29T03:44:09Z",
	"updated_at": "2016-03-29T03:47:16Z"
}
