{
	"id": 51287887,
	"number": 8233,
	"state": "closed",
	"title": "runtime: default os stack size on windows amd64 is too small",
	"body": "\u003cpre\u003eYesterday I tested some opengl code on windows amd64 with go1.3rc2 with the newest beta\namd opengl driver, and it runs out of os stack space during the initial gl context setup.\n\nIn pkg/runtime/os_windows.c    runtime路newosproc\n\n  thandle = runtime路stdcall(runtime路CreateThread, 6,\n                nil, (uintptr)0x20000, runtime路tstart_stdcall, mp,\n                STACK_SIZE_PARAM_IS_A_RESERVATION, nil);\n\n0x20000 (128KBytes) reserved stack.\n\nDoing some reading the default os stack is 1MB (reserved), which would be in most cases\nunused so I can agree with a much smaller default size.\n\nDoubling the reserved stack fixes the problem.  While doing this I noticed that there\ndoes not seem to be a difference between what is reserved on 32bit and 64bit.  I would\nassume 64bit would need \u0026gt;= twice what 32bit has.\n\nI am guessing the original thread has a larger os stack size, but I have been doing one\ngoroutine per window which feels more \u0026quot;go\u0026quot; that trying to cram everything onto\nthe main thread.  It also keeps operations on one window from blocking operations on\nother windows.\n\nCould we get windows amd64's reserved stack size doubled for 1.3 release?\nPerhaps a new version of runtime.LockOSThread() for go1.4\n\nfunc LockSizedOSThread(osStackSize int32)\n\nWhich would create a new os thread with osStackSize stack and lock the calling goroutine\nonto it?\u003c/pre\u003e",
	"user": {
		"login": "bryanturley",
		"id": 1634211,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 6,
	"closed_at": "2014-12-08T10:45:42Z",
	"created_at": "2014-06-18T18:19:44Z",
	"updated_at": "2016-06-25T01:36:42Z",
	"milestone": {
		"id": 1067218,
		"number": 21,
		"title": "Go1.4"
	}
}
