{
	"id": 85469851,
	"body": "@davecheney \r\nIt worked!, thank you very much, this is the code for the buffer code above using your wrapper idea.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"bytes\"\r\n\t\"fmt\"\r\n)\r\n\r\ntype MyBuffer struct {\r\n\tcap   int\r\n\tmybuf *bytes.Buffer\r\n}\r\n\r\nfunc (b *MyBuffer) Write(p []byte) (n int, err error) {\r\n\tif len(p)+b.mybuf.Len() \u003e b.cap {\r\n\t\tfmt.Printf(b.mybuf.String())\r\n\t\tpanic(\"Buffer Overflow\")\r\n\t} else {\r\n\t\tb.mybuf.Write(p)\r\n\t}\r\n\treturn 1, nil\r\n}\r\n\r\nfunc NewBuffer(buf []byte, cap int) *MyBuffer {\r\n\treturn \u0026MyBuffer{mybuf: bytes.NewBuffer(buf), cap: cap}\r\n}\r\n\r\nfunc main() {\r\n\r\n\tdefer func() {\r\n\t\tif r := recover(); r != nil {\r\n\t\t\tfmt.Println(\"recover in yes\")\r\n\t\t}\r\n\t}()\r\n\r\n\ta := NewBuffer(make([]byte, 0, 100), 200)\r\n\tfor {\r\n\t\t_, err := a.Write([]byte(\"Check for Buffer Overflow\"))\r\n\t\tif err != nil {\r\n\t\t\tfmt.Println(err.Error())\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nAny code improvements are appreciated.",
	"user": {
		"login": "domitian",
		"id": 4576651,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-03-24T12:06:05Z",
	"updated_at": "2015-03-24T12:06:22Z"
}
