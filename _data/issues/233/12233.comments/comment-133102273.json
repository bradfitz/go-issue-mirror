{
	"id": 133102273,
	"body": "Great question, sorry I did not think of that before. Doing some digging now, I see one that looks like:\r\n\r\n```\r\nruntime/cgo: pthread_create failed: Resource temporarily unavailable\r\nSIGABRT: abort\r\nPC=0x7f82381d7425 m=2\r\n\r\ngoroutine 0 [idle]:\r\n\r\ngoroutine 1 [IO wait]:\r\nnet.runtime_pollWait(0x7f82387a5660, 0x72, 0xc820010100)\r\n        /usr/local/go/src/runtime/netpoll.go:157 +0x60\r\nnet.(*pollDesc).Wait(0xc820133560, 0x72, 0x0, 0x0)\r\n        /usr/local/go/src/net/fd_poll_runtime.go:73 +0x3a\r\nnet.(*pollDesc).WaitRead(0xc820133560, 0x0, 0x0)\r\n        /usr/local/go/src/net/fd_poll_runtime.go:78 +0x36\r\nnet.(*netFD).accept(0xc820133500, 0x0, 0x7f82387a6628, 0xc86e6d93a0)\r\n        /usr/local/go/src/net/fd_unix.go:408 +0x27c\r\nnet.(*TCPListener).AcceptTCP(0xc82010e0e8, 0x452790, 0x0, 0x0)\r\n        /usr/local/go/src/net/tcpsock_posix.go:254 +0x4d\r\nnet/http.tcpKeepAliveListener.Accept(0xc82010e0e8, 0x0, 0x0, 0x0, 0x0)\r\n        /usr/local/go/src/net/http/server.go:2135 +0x41\r\nnet/http.(*Server).Serve(0xc82011e540, 0x7f82387a65f0, 0xc82010e0e8, 0x0, 0x0)\r\n        /usr/local/go/src/net/http/server.go:1887 +0xb3\r\nnet/http.(*Server).ListenAndServe(0xc82011e540, 0x0, 0x0)\r\n        /usr/local/go/src/net/http/server.go:1877 +0x136\r\nmain.main()\r\n        /srv/go/src/github.com/crashlytics/gusset/gusset.go:260 +0xb50\r\n\r\ngoroutine 17 [syscall, 474 minutes, locked to thread]:\r\nruntime.goexit()\r\n        /usr/local/go/src/runtime/asm_amd64.s:1696 +0x1\r\n```\r\n\r\nand another like this:\r\n\r\n```\r\nruntime/cgo: out of memory in thread_start\r\nSIGABRT: abort\r\nPC=0x7fb4da635425 m=2\r\n\r\ngoroutine 0 [idle]:\r\n\r\ngoroutine 1 [IO wait]:\r\nnet.runtime_pollWait(0x7fb4d84fb240, 0x72, 0xc820010100)\r\n        /usr/local/go/src/runtime/netpoll.go:157 +0x60\r\nnet.(*pollDesc).Wait(0xc820131560, 0x72, 0x0, 0x0)\r\n        /usr/local/go/src/net/fd_poll_runtime.go:73 +0x3a\r\nnet.(*pollDesc).WaitRead(0xc820131560, 0x0, 0x0)\r\n        /usr/local/go/src/net/fd_poll_runtime.go:78 +0x36\r\nnet.(*netFD).accept(0xc820131500, 0x0, 0x7fb4d853f080, 0xc92a6cde80)\r\n        /usr/local/go/src/net/fd_unix.go:408 +0x27c\r\nnet.(*TCPListener).AcceptTCP(0xc820598028, 0x452790, 0x0, 0x0)\r\n        /usr/local/go/src/net/tcpsock_posix.go:254 +0x4d\r\nnet/http.tcpKeepAliveListener.Accept(0xc820598028, 0x0, 0x0, 0x0, 0x0)\r\n        /usr/local/go/src/net/http/server.go:2135 +0x41\r\nnet/http.(*Server).Serve(0xc820110540, 0x7fb4d853f048, 0xc820598028, 0x0, 0x0)\r\n        /usr/local/go/src/net/http/server.go:1887 +0xb3\r\nnet/http.(*Server).ListenAndServe(0xc820110540, 0x0, 0x0)\r\n        /usr/local/go/src/net/http/server.go:1877 +0x136\r\nmain.main()\r\n        /srv/go/src/github.com/crashlytics/gusset/gusset.go:260 +0xb50\r\n\r\ngoroutine 17 [syscall, 464 minutes, locked to thread]:\r\nruntime.goexit()\r\n        /usr/local/go/src/runtime/asm_amd64.s:1696 +0x1\r\n```\r\n\r\nPlease note that at the time that this claimed \"out of memory\", the system had been using less than 50% (~7GB) of available memory (~15GB instances), and the process has been able to claim more memory from the system both before (on 1.5) and after (still 1.5) the occurrences of those crashes.",
	"user": {
		"login": "bmhatfield",
		"id": 1119967,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-20T18:06:54Z",
	"updated_at": "2015-08-20T18:46:41Z"
}
