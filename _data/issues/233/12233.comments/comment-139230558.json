{
	"id": 139230558,
	"body": "Thanks Brian.\n\nIt is important to include the entire panic log as this is a case where the\ntopmost goroutine is not the culprit.\n\nFrom the reports you are giving it seems that cgo is still in use, even\nthough you have disabled it via an environment variable.\n\nDoes your application use cgo ?\n\nThanks\n\nDave\n\nOn Thu, Sep 10, 2015 at 11:06 PM, Brian Hatfield \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e I've been running with vm.overcommit_memory=1 since September 6th at\n\u003e about 11am ET, and unfortunately I still do have runtime crashes this week.\n\u003e\n\u003e The \"highlights\" of them look like this:\n\u003e\n\u003e runtime/cgo: pthread_create failed: Resource temporarily unavailable\n\u003e SIGABRT: abort\n\u003e PC=0x7ffa15045425 m=2\n\u003e\n\u003e goroutine 0 [idle]:\n\u003e\n\u003e goroutine 1 [runnable]:\n\u003e syscall.Getsockname(0x3f9, 0x0, 0x0, 0xc98fdd40c0, 0x0)\n\u003e         /usr/local/go/src/syscall/syscall_linux.go:468\n\u003e net.(*netFD).accept(0xc82000b6c0, 0xc973317880, 0x0, 0x0)\n\u003e         /usr/local/go/src/net/fd_unix.go:431 +0x4e8\n\u003e net.(*TCPListener).AcceptTCP(0xc820542000, 0x452790, 0x0, 0x0)\n\u003e         /usr/local/go/src/net/tcpsock_posix.go:254 +0x4d\n\u003e net/http.tcpKeepAliveListener.Accept(0xc820542000, 0x0, 0x0, 0x0, 0x0)\n\u003e         /usr/local/go/src/net/http/server.go:2135 +0x41\n\u003e net/http.(*Server).Serve(0xc820014780, 0x7ffa147d3ea8, 0xc820542000, 0x0, 0x0)\n\u003e         /usr/local/go/src/net/http/server.go:1887 +0xb3\n\u003e net/http.(*Server).ListenAndServe(0xc820014780, 0x0, 0x0)\n\u003e         /usr/local/go/src/net/http/server.go:1877 +0x136\n\u003e main.main()\n\u003e         /srv/go/src/github.com/crashlytics/gusset/gusset.go:260 +0xb50\n\u003e\n\u003e goroutine 17 [syscall, 10733 minutes, locked to thread]:\n\u003e runtime.goexit()\n\u003e         /usr/local/go/src/runtime/asm_amd64.s:1696 +0x1\n\u003e\n\u003e runtime/cgo: out of memory in thread_start\n\u003e SIGABRT: abort\n\u003e PC=0x7fd4a96d4425 m=12\n\u003e\n\u003e goroutine 0 [idle]:\n\u003e\n\u003e goroutine 1 [IO wait]:\n\u003e net.runtime_pollWait(0x7fd4a6e19c00, 0x72, 0xc82000e100)\n\u003e         /usr/local/go/src/runtime/netpoll.go:157 +0x60\n\u003e net.(*pollDesc).Wait(0xc820131560, 0x72, 0x0, 0x0)\n\u003e         /usr/local/go/src/net/fd_poll_runtime.go:73 +0x3a\n\u003e net.(*pollDesc).WaitRead(0xc820131560, 0x0, 0x0)\n\u003e         /usr/local/go/src/net/fd_poll_runtime.go:78 +0x36\n\u003e net.(*netFD).accept(0xc820131500, 0x0, 0x7fd4a6e1a508, 0xc8ce2ac0c0)\n\u003e         /usr/local/go/src/net/fd_unix.go:408 +0x27c\n\u003e net.(*TCPListener).AcceptTCP(0xc82054a000, 0x452790, 0x0, 0x0)\n\u003e         /usr/local/go/src/net/tcpsock_posix.go:254 +0x4d\n\u003e net/http.tcpKeepAliveListener.Accept(0xc82054a000, 0x0, 0x0, 0x0, 0x0)\n\u003e         /usr/local/go/src/net/http/server.go:2135 +0x41\n\u003e net/http.(*Server).Serve(0xc820118540, 0x7fd4a6e1a4d0, 0xc82054a000, 0x0, 0x0)\n\u003e         /usr/local/go/src/net/http/server.go:1887 +0xb3\n\u003e net/http.(*Server).ListenAndServe(0xc820118540, 0x0, 0x0)\n\u003e         /usr/local/go/src/net/http/server.go:1877 +0x136\n\u003e main.main()\n\u003e         /srv/go/src/github.com/crashlytics/gusset/gusset.go:260 +0xb50\n\u003e\n\u003e goroutine 17 [syscall, 1283 minutes, locked to thread]:\n\u003e runtime.goexit()\n\u003e         /usr/local/go/src/runtime/asm_amd64.s:1696 +0x1\n\u003e\n\u003e $ sysctl vm.overcommit_memory\n\u003e vm.overcommit_memory = 1\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/12233#issuecomment-139229272\u003e.\n\u003e\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-10T13:13:10Z",
	"updated_at": "2015-09-10T13:13:10Z"
}
