{
	"id": 161399391,
	"number": 16135,
	"state": "closed",
	"title": "x/text: tests fail with gccgo",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\ngccgo 6 (as shipped in Ubuntu 16.04)\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\nUbuntu 16.04 (on amd64)\r\n\r\n3. What did you do?\r\n\r\nRun `/usr/bin/go-6 test -compiler gccgo golang.org/x/text/...`\r\n\r\n4. What did you expect to see?\r\n\r\nTests passing.\r\n\r\n5. What did you see instead?\r\n\r\n```\r\n?   \tgolang.org/x/text\t[no test files]\r\n--- FAIL: TestFold (0.00s)\r\n\tfold_test.go:32: FullFold(βßᏸ): number of allocs was 1.000000; want 0\r\n\tfold_test.go:32: FullFold(abᏼꭺꭰ): number of allocs was 1.000000; want 0\r\n\tfold_test.go:32: FullFold(aﬃﬄaﬆ): number of allocs was 1.000000; want 0\r\n\tfold_test.go:32: FullFold(Iİiıͅ): number of allocs was 1.000000; want 0\r\n\tfold_test.go:32: FullFold(µµΜΜςσΣΣ): number of allocs was 1.000000; want 0\r\n--- FAIL: TestCaseMappings (0.04s)\r\n\tmap_test.go:185: 0:und:\r\n\t\tTitle: number of allocs was 6.000000; want 0\r\n\tmap_test.go:185: 1:und:\r\n\t\tTitle: number of allocs was 8.000000; want 0\r\n\tmap_test.go:185: 2:el:\r\n\t\tUpper: number of allocs was 2.000000; want 0\r\n\tmap_test.go:185: 2:lt:\r\n\t\tUpper: number of allocs was 2.000000; want 0\r\n\tmap_test.go:185: 3:und:\r\n\t\tTitle: number of allocs was 50.000000; want 0\r\n\tmap_test.go:185: 3:af:\r\n\t\tTitle: number of allocs was 50.000000; want 0\r\n\tmap_test.go:185: 3:az:\r\n\t\tTitle: number of allocs was 50.000000; want 0\r\n\tmap_test.go:185: 3:el:\r\n\t\tUpper: number of allocs was 210.000000; want 0\r\n\tmap_test.go:185: 3:el:\r\n\t\tTitle: number of allocs was 50.000000; want 0\r\n\tmap_test.go:185: 3:lt:\r\n\t\tUpper: number of allocs was 198.000000; want 0\r\n\tmap_test.go:185: 3:lt:\r\n\t\tLower: number of allocs was 22.000000; want 0\r\n\tmap_test.go:185: 3:lt:\r\n\t\tTitle: number of allocs was 111.000000; want 0\r\n\tmap_test.go:185: 3:nl:\r\n\t\tTitle: number of allocs was 50.000000; want 0\r\n\tmap_test.go:185: 3:tr:\r\n\t\tTitle: number of allocs was 50.000000; want 0\r\n\tmap_test.go:185: 4:und:\r\n\t\tTitle: number of allocs was 7.000000; want 0\r\n\tmap_test.go:185: 5:el:\r\n\t\tUpper: number of allocs was 40.000000; want 0\r\n\tmap_test.go:185: 5:el:\r\n\t\tTitle: number of allocs was 8.000000; want 0\r\n\tmap_test.go:185: 6:tr:\r\n\t\tTitle: number of allocs was 6.000000; want 0\r\n\tmap_test.go:185: 6:az:\r\n\t\tTitle: number of allocs was 6.000000; want 0\r\n\tmap_test.go:185: 7:lt:\r\n\t\tUpper: number of allocs was 63.000000; want 0\r\n\tmap_test.go:185: 7:lt:\r\n\t\tLower: number of allocs was 20.000000; want 0\r\n\tmap_test.go:185: 7:lt:\r\n\t\tTitle: number of allocs was 42.000000; want 0\r\n\tmap_test.go:185: 8:lt:\r\n\t\tUpper: number of allocs was 15.000000; want 0\r\n\tmap_test.go:185: 8:lt:\r\n\t\tLower: number of allocs was 11.000000; want 0\r\n\tmap_test.go:185: 8:lt:\r\n\t\tTitle: number of allocs was 11.000000; want 0\r\n\tmap_test.go:185: 9:nl:\r\n\t\tTitle: number of allocs was 7.000000; want 0\r\n\tmap_test.go:185: 10:af:\r\n\t\tTitle: number of allocs was 3.000000; want 0\r\nFAIL\r\nFAIL\tgolang.org/x/text/cases\t0.815s\r\nok  \tgolang.org/x/text/collate\t0.241s\r\nok  \tgolang.org/x/text/collate/build\t0.129s\r\n--- FAIL: TestNumericWeighterAlloc (0.00s)\r\n\tnumeric_test.go:155: got 12.000000; want 0\r\nFAIL\r\nFAIL\tgolang.org/x/text/collate/colltab\t3.697s\r\n?   \tgolang.org/x/text/collate/tools/colcmp\t[no test files]\r\nok  \tgolang.org/x/text/currency\t5.197s\r\nok  \tgolang.org/x/text/encoding\t0.419s\r\nok  \tgolang.org/x/text/encoding/charmap\t0.158s\r\nok  \tgolang.org/x/text/encoding/htmlindex\t0.164s\r\nok  \tgolang.org/x/text/encoding/ianaindex\t0.133s\r\n?   \tgolang.org/x/text/encoding/internal\t[no test files]\r\n?   \tgolang.org/x/text/encoding/internal/identifier\t[no test files]\r\nok  \tgolang.org/x/text/encoding/japanese\t0.131s\r\nok  \tgolang.org/x/text/encoding/korean\t0.134s\r\nok  \tgolang.org/x/text/encoding/simplifiedchinese\t0.134s\r\nok  \tgolang.org/x/text/encoding/traditionalchinese\t0.162s\r\nok  \tgolang.org/x/text/encoding/unicode\t0.142s\r\nok  \tgolang.org/x/text/encoding/unicode/utf32\t0.152s\r\nok  \tgolang.org/x/text/internal\t0.157s\r\nok  \tgolang.org/x/text/internal/colltab\t0.167s\r\n?   \tgolang.org/x/text/internal/format\t[no test files]\r\n?   \tgolang.org/x/text/internal/format/plural\t[no test files]\r\n?   \tgolang.org/x/text/internal/gen\t[no test files]\r\nok  \tgolang.org/x/text/internal/number\t0.247s\r\nok  \tgolang.org/x/text/internal/stringset\t0.165s\r\nok  \tgolang.org/x/text/internal/tag\t0.134s\r\n?   \tgolang.org/x/text/internal/testtext\t[no test files]\r\nok  \tgolang.org/x/text/internal/triegen\t1.580s\r\nok  \tgolang.org/x/text/internal/ucd\t0.144s\r\n?   \tgolang.org/x/text/internal/utf8internal\t[no test files]\r\n--- FAIL: TestMakeString (0.00s)\r\n\tlanguage_test.go:73: 4: # allocs got 2.0; want \u003c= 1\r\n\tlanguage_test.go:73: 5: # allocs got 2.0; want \u003c= 1\r\nFAIL\r\nFAIL\tgolang.org/x/text/language\t0.451s\r\nok  \tgolang.org/x/text/language/display\t13.581s\r\nok  \tgolang.org/x/text/message\t0.124s\r\n--- FAIL: TestMapAlloc (0.00s)\r\n\trunes_test.go:510: got 2.000000; want 0\r\n--- FAIL: TestRemoveAlloc (0.00s)\r\n\trunes_test.go:520: got 3.000000; want 0\r\n--- FAIL: TestReplaceIllFormedAlloc (0.00s)\r\n\trunes_test.go:528: got 1.000000; want 0\r\nFAIL\r\nFAIL\tgolang.org/x/text/runes\t0.166s\r\nok  \tgolang.org/x/text/search\t0.126s\r\n?   \tgolang.org/x/text/secure\t[no test files]\r\nok  \tgolang.org/x/text/secure/bidirule\t0.161s\r\nok  \tgolang.org/x/text/secure/precis\t0.153s\r\nok  \tgolang.org/x/text/transform\t0.238s\r\n?   \tgolang.org/x/text/unicode\t[no test files]\r\nok  \tgolang.org/x/text/unicode/bidi\t0.149s\r\nok  \tgolang.org/x/text/unicode/cldr\t0.541s\r\nok  \tgolang.org/x/text/unicode/norm\t15.233s\r\nok  \tgolang.org/x/text/unicode/rangetable\t10.565s\r\nok  \tgolang.org/x/text/width\t0.887s\r\n```\r\n\r\nI think all the failures are for the alloc tests. I guess they should skip on gccgo? (until gccgo gets escape analysis as good or better than gc anyway...)",
	"user": {
		"login": "mwhudson",
		"id": 672022,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "mpvl",
		"id": 6445383,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-07-01T14:38:06Z",
	"created_at": "2016-06-21T10:18:44Z",
	"updated_at": "2016-07-01T14:38:06Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
