{
	"id": 144759333,
	"body": "FWIW, the proposal suggests that the nil cast will be beneficial for switch-cases but fails to provide useful samples around this use case. It also doesn't provide any context and further details about current challenges in error handling such as https://golang.org/doc/faq#nil_error.\r\n\r\n\u003e x.(T) asserts that x is a nil interface value.\r\n\r\nWhich nil interface value?\r\n\r\n\r\n```\r\ntype MyError struct{}\r\n\r\nfunc (m MyError) Error() string {\r\n  return \"error\"\r\n}\r\n\r\n// ...\r\n\r\nfunc Err() error {\r\n  if bad() {\r\n    return \u0026MyError{}\r\n  }\r\n  if worse() {\r\n    return \u0026MyOtherError{}\r\n  }\r\n  return nil\r\n}\r\n```\r\n\r\nHow am I supposed to cast against a specific nil interface value?\r\n\r\n```\r\nerr := Err()\r\nerr.((*MyError)(nil))\r\n```\r\n\r\nAnd what will err.(nil) actually match? Will it panic only and only if Err() didn't return a MyError or MyOtherError?",
	"user": {
		"login": "rakyll",
		"id": 108380,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-01T15:15:31Z",
	"updated_at": "2015-10-01T15:15:31Z"
}
