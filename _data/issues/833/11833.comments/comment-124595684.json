{
	"id": 124595684,
	"body": "Go can be (and is) used on embedded platforms, where it is not practical to\nsave entropy across boots.\n\nIt is important that Go does the best thing possible out of the box and\nalso makes it possible for people like you to do precisely what you need in\nspecialized cases. The current implementation does that.\n\nCan you please experiment with the ideas I gave you and see if you can\nwrite a package that lets you ensure you get random data they way you would\nlike? If Go is preventing that, it's a defect. If Go's out of box isn't\nwhat you want, it's not a defect, it's an \"opportunity\". :)\n\nOn Fri, Jul 24, 2015 at 7:24 PM, Tv \u003cnotifications@github.com\u003e wrote:\n\n\u003e @agl \u003chttps://github.com/agl\u003e Maybe the /dev/urandom fallback stays\n\u003e unreliable, but on newer kernels it would sit \u0026 wait for the entropy pool\n\u003e to initialize *once*. And that'll often happen via the bootup process\n\u003e feeding back some entropy saved from the last run. That way, the Go process\n\u003e would only ever block if it was run very very close to boot, and then only\n\u003e on relatively new platforms; no LTS worries there.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/11833#issuecomment-124585904\u003e.\n\u003e\n",
	"user": {
		"login": "jeffallen",
		"id": 1131456,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-24T17:44:16Z",
	"updated_at": "2015-07-24T17:44:16Z"
}
