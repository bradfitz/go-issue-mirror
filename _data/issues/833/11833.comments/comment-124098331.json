{
	"id": 124098331,
	"body": "To my view, the Go stdlib is delivering what it sets out to do here (simplicity, small surface area, reliability). Your use case is legitimate, but rare in the grand scheme of all Go programs.\r\n\r\nNothing is stopping you from writing your own io.Reader that is guaranteed to use syscall.GetRandom. You could even use \"func init() { r := \u0026myGuaranteedSyscallRandReader{}; r.waitForEntropy(); rand.Reader = r; } to set crypto/rand.Reader at process init time.\r\n\r\nCome to think of it, it might even be possible to write an init() function that calls syscall.GetRandom without GRND_NONBLOCK. But then you need to study the rules about init function order carefully to assure yourself that your init function happens before crypto/rand.init().\r\n\r\nWorks as designed, IMHO.",
	"user": {
		"login": "jeffallen",
		"id": 1131456,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-23T13:28:00Z",
	"updated_at": "2015-07-23T13:28:00Z"
}
