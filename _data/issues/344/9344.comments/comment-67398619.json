{
	"id": 67398619,
	"body": "No no no. You don't need to set GOROOT, ever. Please see my blog\r\nhttp://dave.cheney.net/2014/04/20/how-to-install-multiple-versions-of-go\r\n\r\nOn Thu, Dec 18, 2014 at 6:57 AM, Konstantin Khomoutov \u003c\r\nnotifications@github.com\u003e wrote:\r\n\u003e\r\n\u003e @glyn \u003chttps://github.com/glyn\u003e, if I understood correctly (@minux\r\n\u003e \u003chttps://github.com/minux\u003e did not address my question directly), before\r\n\u003e 1.3, when you performed the encantation being discussed, a part of the Go's\r\n\u003e stdlib has been silently rebuilt and replaced -- most of folks did not\r\n\u003e notice it because most have Go built from the source and installed\r\n\u003e somewhere under ~. Since this behaviour clearly fails with system-wide Go\r\n\u003e installs (some people do use apt-get install golang), the -a command-line\r\n\u003e option stopped affecting the Go's own files in 1.4.\r\n\u003e\r\n\u003e The solution is just to build and install another instalce of the Go\r\n\u003e toolchain and use it via custom $GOROOT where applicable.\r\n\u003e\r\n\u003e IOW, building fully static programs on Linux did not ever do The Right\r\n\u003e Thing. I think it might be sensible to file a wishlist bug asking to\r\n\u003e somehow make stdlib support both behaviours out of the box. Dunno if it's\r\n\u003e feasible to implement.\r\n\u003e\r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub\r\n\u003e \u003chttps://github.com/golang/go/issues/9344#issuecomment-67383137\u003e.\r\n\u003e",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-17T21:35:00Z",
	"updated_at": "2014-12-17T21:35:00Z"
}
