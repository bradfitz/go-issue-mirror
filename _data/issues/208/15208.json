{
	"id": 147124125,
	"number": 15208,
	"state": "closed",
	"title": "os.Lstat \u0026 os.OpenFile fail at handling long paths on Windows",
	"body": "`os.Lstat` \u0026 `os.OpenFile` fail at handling long paths with go1.6 windows/amd64.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"os\"\r\n)\r\n\r\nfunc main() {\r\n\t// The LICENSE file actually exists\r\n\tname := `C:\\Gopath\\src\\bitbucket.org\\xStrom\\lopya\\node_modules\\gulp\\node_modules\\gulp-util\\node_modules\\dateformat\\node_modules\\meow\\node_modules\\normalize-package-data\\node_modules\\validate-npm-package-license\\node_modules\\spdx-correct\\node_modules\\spdx-license-ids\\LICENSE`\r\n\t_, err := os.Lstat(name)\r\n\tif err != nil {\r\n\t\tfmt.Printf(\"Got error, but shouldn't: %v\\n\", err)\r\n\t}\r\n\t_, err = os.OpenFile(name, os.O_RDONLY, 0)\r\n\tif err != nil {\r\n\t\tfmt.Printf(\"Got error, but shouldn't: %v\\n\", err)\r\n\t}\r\n}\r\n```\r\n\r\nBoth of these functions fail due to improper usage of `syscall.GetFileAttributesEx`. [\\[1\\]](https://golang.org/src/os/file_windows.go#L117) [\\[2\\]](https://golang.org/src/os/stat_windows.go#L85) Specifically, they just pass the user provided `name` to `GetFileAttributesEx`.\r\n\r\nThe [GetFileAttributesEx documentation](https://msdn.microsoft.com/en-us/library/windows/desktop/aa364946(v=vs.85).aspx) states: *In the ANSI version of this function, the name is limited to MAX_PATH [== 260] characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\\\\\?\\\\\" to the path.*\r\n\r\nIt seems to me that [Go always uses the Unicode version](https://golang.org/src/syscall/zsyscall_windows.go#L76), which should make resolving this easier.\r\n\r\nAs a developer, I could prepend the \"\\\\\\\\?\\\\\" to the path myself before calling `os.Lstat` or `os.OpenFile`, and indeed this seems to solve the problem according to some of my quick tests. However other people's code would still suffer from this bug, and indeed I found this bug when using a 3rd party program. Also the `os` package claims to provide [\"a platform-independent interface to operating system functionality\"](https://golang.org/pkg/os/). So I think it would be more fitting if it actually did that and I didn't have to prepend \"\\\\\\\\?\\\\\" after an *if windows* check.\r\n\r\nAt first it seems like a simple fix to just start prepending \"\\\\\\\\?\\\\\" to the path before calling `syscall.GetFileAttributesEx`. However it turns out that `GetFileAttributesEx` does some magic if the MAX_PATH code path executes, e.g. [*File I/O functions in the Windows API convert \"/\" to \"\\\\\" as part of converting the name to an NT-style name, except when using the \"\\\\\\\\?\\\\\" prefix*](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx#maxpath). So if we just start prepending \"\\\\\\\\?\\\\\" then people's existing code will start breaking, if they're using *C:/foo/bar.txt* or something similar as input.\r\n\r\nI think a reasonable solution would be to do a length check on the path name before calling `syscall.GetFileAttributesEx`. If the name fits MAX_PATH, then use it as is, and enjoy the extra magic. If the name exceeds MAX_PATH, then we can only benefit from prepending \"\\\\\\\\?\\\\\". This would also solve the problem I was having.\r\n\r\nI can submit a code change if this seems like an acceptable solution.",
	"user": {
		"login": "xStrom",
		"id": 754881,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-04-09T16:31:40Z",
	"created_at": "2016-04-09T12:06:23Z",
	"updated_at": "2016-04-09T16:31:40Z"
}
