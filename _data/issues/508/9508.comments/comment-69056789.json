{
	"id": 69056789,
	"body": "When I experimented with https://github.com/bryanturley/goapk\r\nI generated the info for the xml and other files from odd pragma comments and things already known.\r\n\r\n```\r\n//android: package com.example.basic\r\n//android: target android-16\r\nfunc main() {\r\n        app.Run(app.Callbacks{\r\n                Draw: renderFrame,\r\n        })\r\n}\r\n```\r\n\r\nIt also would read them from init() funcs but only from the main package.\r\nIf you did it with init() funcs you could have a \"manifest_android.go\" that would not interfere with non-android systems.\r\nThat would be my preferred way of doing it, if it didn't get complex (which seems likely...).\r\n\r\nI don't think you can generalize the android build system out, it is too wonky.\r\nProbably be easier to just have one for each non-sane (insane?) platform.\r\n\r\nI also considered doing something like cgo\r\n```\r\n/* \r\n\u003cinsert AndroidManifest.xml here\u003e\r\n// or perhaps cgo style directives\r\n#android Manifest ./path/to/Manifest.xml\r\n*/\r\nimport \"Apk\"  // triggers a .apk build like import \"C\" triggers cgo build\r\n```\r\n\r\nI didn't get much further after becoming frustrated with the android build system once again... ;)\r\n",
	"user": {
		"login": "bryanturley",
		"id": 1634211,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-07T17:23:08Z",
	"updated_at": "2015-01-07T17:23:08Z"
}
