{
	"id": 66074940,
	"body": "\u003ca id=\"c7\"\u003e\u003c/a\u003eComment 7:\n\n\u003cpre\u003eThis issue was closed as Fixed, but it was not fixed.\n\nIt is causing issues with tools that want to check if a file can be built successfully,\nwithout actually creating a binary. flychecker for example is a very popular emacs tool\nthat does syntax checking for many languages. Its support for go uses the output of \"go\nbuild\" to figure out where syntax errors exist and highlight them. \n\n\u003ca href=\"https://github.com/flycheck/flycheck/pull/107\"\u003ehttps://github.com/flycheck/flycheck/pull/107\u003c/a\u003e \n\u003ca href=\"http://flycheck.github.io/\"\u003ehttp://flycheck.github.io/\u003c/a\u003e\n\nAlso, I don't think it is \"too magic\". The concept of a null device is pretty standard,\nand even supported in go as const os.DevNull (/dev/null for *nix, NUL for windows, etc).\n\nThe fix seems pretty straightforward. Only copy final target file if destination is not\nos.DevNull. \ni.e. end (*builder).install method with:\n\n\tif a.target == os.DevNull {\n\t\treturn nil\n\t}\n\treturn b.copyFile(a, a.target, a1.target, perm)\u003c/pre\u003e",
	"user": {
		"login": "ugorji",
		"id": 1222082,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-19T13:10:36Z",
	"updated_at": "2014-12-08T10:25:48Z"
}
