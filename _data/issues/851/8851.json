{
	"id": 51288786,
	"number": 8851,
	"state": "open",
	"title": "cmd/go: when compiling with gccgo uses go tool's ReleaseTags, not gccgo's",
	"body": "\u003cpre\u003eWhat steps reproduce the problem?\n\n1. Install a version of go (such as 1.3) and a version of gccgo that implements a\ndifferent version of the language (such as gccgo 4.9, which implements go 1.2)\n2. Try to build a package that uses the go1.3 build tag to conditionally support go 1.3\nfeatures (for example, \u003ca href=\"https://github.com/docker/docker/tree/master/pkg/pools\"\u003ehttps://github.com/docker/docker/tree/master/pkg/pools\u003c/a\u003e )\n\nWhat happened?\n\nThe go tool attempts to compile the file with the go1.3 built tag with gccgo, and this\nfails.\n\nWhat should have happened instead?\n\nIt should have compiled the file with the !go1.3 build tag instead.\n\nPlease provide any additional information below.\n\nThe cause for this is pretty clear: the go tool uses the ReleaseTags from the go/build\npackage of the standard library that the go tool was built against, which is not\nnecessarily the same as the one the compiler being invoked.  This could be fixed by\ncompiling a little program that prints out go/build.Default.ReleaseTags and using those\nin the go tool\n\nThere are other places where go tool and gccgo compiler have different views of things,\nbut this is the one that is biting me today.\u003c/pre\u003e",
	"user": {
		"login": "mwhudson",
		"id": 672022,
		"type": "User",
		"site_admin": false
	},
	"comments": 12,
	"created_at": "2014-10-01T22:38:39Z",
	"updated_at": "2015-09-08T21:11:59Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	}
}
