{
	"id": 173585546,
	"number": 16899,
	"state": "closed",
	"title": "encoding/json: unmarshal malformed json doesn't produce an error",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\ngo1.7\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nlinux/amd64 (Arch Linux)\r\nkernel: 4.7.1-1-ARCH\r\n\r\n3. What did you do?\r\nSimply reading a file containing JSON data where in one string a backslash '\\' is present. At this point it is not meant to escape anything but simply represents malformed JSON. Below an example of what I've done.\r\n\r\nfoo.json `{\"foo\":\"b\\ar\"}`\r\n\r\n```\r\nfunc LoadConfig() int {\r\n  config struct {\r\n    Foo string\r\n  }\r\n  \r\n  file, err := os.Open(\"foo.json\")\r\n  if err != nil {\r\n  \treturn 1\r\n  }\r\n\r\n  decoder := json.NewDecoder(file)\r\n  err = decoder.Decode(config)\r\n  if err != nil {\r\n  \treturn 2\r\n  }\r\n  \r\n  return 0\r\n}\r\n```\r\n\r\n4. What did you expect to see?\r\nUnmarshal returning a non-nil error describing malformed JSON.\r\n\r\n5. What did you see instead?\r\nNo value of the target struct is set by unmarshal.\r\n\r\nFrom my understanding this should produce an error as not just a single field wasn't read but the whole file.",
	"user": {
		"login": "4xoc",
		"id": 12109998,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-08-27T13:04:25Z",
	"created_at": "2016-08-27T08:27:17Z",
	"updated_at": "2016-08-27T13:11:31Z"
}
