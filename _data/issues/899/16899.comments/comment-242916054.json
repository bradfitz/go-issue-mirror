{
	"id": 242916054,
	"body": "Hello there @4xoc.\r\n\r\nFor starters I've fixed up a bit of your example to make it a runnable go program but it correctly reports that we have an invalid character 'a' in string\r\n\u003cimg width=\"669\" alt=\"screen shot 2016-08-27 at 5 58 18 am\" src=\"https://cloud.githubusercontent.com/assets/4898263/18027535/5db78410-6c1b-11e6-9cd4-ec4e0e9871b9.png\"\u003e\r\n\r\nI see in your code\r\n```go\r\nif err != nil {\r\n    return 2\r\n  }\r\n```\r\n\r\nPerhaps you aren't catching that status code of 2 in whichever caller is invoking LoadConfig()?\r\n\r\nAnd, yes if it encounters an error it won't set the properties, so please check your errors/status codes.\r\n\r\n\r\nTo test it out without having to make a file; just to make the code sample easily reproducible on the playground at https://play.golang.org/p/W91r6xm-t9 or inlined. As you'll see, we can successfully catch and print the error\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"encoding/json\"\r\n\t\"fmt\"\r\n\t\"strings\"\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(LoadConfig())\r\n}\r\n\r\nfunc LoadConfig() error {\r\n\ttype config struct {\r\n\t\tFoo string\r\n\t}\r\n\r\n\tr := strings.NewReader(`{\"foo\":\"b\\ar\"}`)\r\n\tdecoder := json.NewDecoder(r)\r\n\tcf := new(config)\r\n\tif err := decoder.Decode(cf); err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n```\r\n\r\nI am marking this as not a bug. If you think otherwise, please let me know.",
	"user": {
		"login": "odeke-em",
		"id": 4898263,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-27T13:03:56Z",
	"updated_at": "2016-08-27T13:03:56Z"
}
