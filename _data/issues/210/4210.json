{
	"id": 51281809,
	"number": 4210,
	"state": "closed",
	"title": "cmd/go: go build does not reject importing commands",
	"body": "\u003cpre\u003e% echo $GOPATH\n/tmp/foo\n% pwd\n/tmp/foo/src/y\n% cat main.go\npackage main\nimport (\n\t\u0026quot;fmt\u0026quot;\n\txmain \u0026quot;x\u0026quot;\n)\n\nfunc main() {\n\tfmt.Printf(\u0026quot;y main called\\n\u0026quot;)\n\txmain.Main()\n}\n% cat ../x/main.go\npackage main\nimport (\n\t\u0026quot;fmt\u0026quot;\n)\n\nfunc main() {\n\tMain()\n}\n\nfunc Main() {\n\tfmt.Printf(\u0026quot;x main called\\n\u0026quot;)\n}\n\n% go build\n% y\ny main called\nx main called\n% go install\n% go build\n# y\n./main.go:4: can't find import: \u0026quot;x\u0026quot;\n% go install\n% rm $GOPATH/bin/y\n% go build\n# y\n./main.go:4: can't find import: \u0026quot;x\u0026quot;\n% rm -r $GOPATH/pkg\nrm: cannot remove `/tmp/foo/pkg': No such file or directory\n% rm $GOPATH/bin/x\n% go build\n% \n\nIt looks as if go build is treating the x binary as a valid prerequisite for the build\nof y, which it is not.\n\nPerhaps the build process should take into account the fact that main packages can\ncompile to both archives and executables.\u003c/pre\u003e",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 28,
	"closed_at": "2015-06-19T01:06:50Z",
	"created_at": "2012-10-08T10:43:45Z",
	"updated_at": "2016-06-24T22:26:11Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
