{
	"id": 66071088,
	"body": "\u003ca id=\"c18\"\u003e\u003c/a\u003eComment 18:\n\n\u003cpre\u003eI'm currently using this to build busybox-style binaries.\n\nEach command's main package exports a reference to its main function, and a wrapper\ncommand imports them all and selectively calls one, switching on os.Args[0].  This way,\nthe commands are buildable both individually and wrapped in a busybox-style combined\nbinary.\n\nI could also achieve this by splitting each command up into two packages -- one non-main\npackage containing the implementation, and one main package containing a shim that calls\ninto the first -- and will need to change to this approach if Go 1.5 removes the ability\nto import main packages.  But with my current approach, I need fewer overall packages\nand less indirection.\u003c/pre\u003e",
	"user": {
		"login": "kevinwallace",
		"id": 184975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-10-30T02:29:30Z",
	"updated_at": "2014-12-08T10:22:25Z"
}
