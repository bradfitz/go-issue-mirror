{
	"id": 167716641,
	"body": "The Go GC does have the ability to manually deallocate blocks anymore. And\nbesides, runtime.Free is unsafe (people might free still in use pointers or\ndouble free) and then all sorts of C memory problem that Go tries hard to\nget rid of will come back. The other reason is that runtime sometimes\nallocates behind your back and there is no way for the program to\nexplicitly free those memory.\n\nIf you really want to manually manage memory with Go, implement your own\nmemory allocator based on syscall.Mmap or cgo malloc/free.\n\nDisabling GC for extended period of time is generally a bad solution for a\nconcurrent language like Go. And Go's GC will only be better down the road.\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-29T04:27:34Z",
	"updated_at": "2015-12-29T04:27:34Z"
}
