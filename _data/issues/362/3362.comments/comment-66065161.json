{
	"id": 66065161,
	"body": "\u003ca id=\"c19\"\u003e\u003c/a\u003eComment 19:\n\n\u003cpre\u003ePerhaps some of the complexity here is because of the attempt to simplify to fewer\nvariables than there are phases in an HTTP request.  It seems like we're asking this\nproposal to satisfy two very different scenarios.\n\n1) typical HTTP requests between services (regardless of size of request/response body)\nwhere you want to control expected performance of both sides... sending (connect +\nwrite)/response (headers + body)\n\n2) streaming requests where connection/request write/response header/idle timeouts want\nto be bounded but there should be no overall timeout to the request.\n\nIt seems like one answer might be to cover each of the phases with a timeout and allow\nthe sum of their parts to compose the behavior one would expect (each being optional):\n\n// set on any read/write to guarantee TCP progress\nIdleTimeout time.Duration\n\n// includes connection time (may or may not be cached) + writing request (headers + body)\nSendTimeout time.Duration\n\n// includes time spent waiting for response headers after sending the request\nHeaderTimeout time.Duration\n\n// includes time spent waiting for the response body after reading response headers\nBodyTimeout time.Duration\n\nHowever, the counter argument is that this is too much control and all you really want\nis to be able to bound the overall request time (at all) regardless of which part is\ntaking the bulk of the time.  \n\nAlthough, for production debugging I could imagine there being a huge benefit to having\nthe granularity above to understand/control what phase isn't performing.  This could be\nresolved independently if the library provided means to introspect the recorded time\nspent in each phase of the request.\n\nI tend to side with others comments above that this change should perhaps *not* satisfy\nthe needs of streaming/long lived requests (being less common and having very specific\nrequirements).  I feel like those may be better implemented with a custom RoundTripper,\netc.  IMO, you could drop IdleTimeout from your proposal entirely without making much\ndifference.\n\nIn that case, my vote would be for either of the following:\n\nSendTimeout, HeaderTimeout, and BodyTimeout (as described above)\n\nor\n\nConnectTimeout, Timeout (which includes all phases of the request)\n\nFor the record, I realize the proposed suggestion hasn't been including connect time.  I\nthink that the goal of this change is to make the standard library httpclient easy and\nobvious to use (for this use case) and not including connect time would result in\nunexpected behavior.  In particular, supporting request timeouts that don't include\nconnect time (and thus still require a custom Dial function to get DialTimeout) would\nfeel a bit odd and inconsistent.  Perhaps documentation could resolve this, though.\u003c/pre\u003e",
	"user": {
		"login": "mreiferson",
		"id": 187441,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-02-16T16:57:16Z",
	"updated_at": "2014-12-08T10:17:29Z"
}
