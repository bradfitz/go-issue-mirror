{
	"id": 66065162,
	"body": "\u003ca id=\"c20\"\u003e\u003c/a\u003eComment 20:\n\n\u003cpre\u003eThere seems to be a serious challenge to associating timeouts to different phases of the\nrequest when there aren't exposed hooks to the associated phases.\n\nWhat if the semantic issue is avoided by bunching the concerns of the call to RoundTrip\ninto a single timeout?\n\n// RoundTripTimeout is the amount of time that RoundTripper.RoundTrip will\n// block before returning a timeout error. This includes, but is not limited\n// to, the time that it may take to connect, send the request, any request\n// body and receive any associated headers. The phase in which the request\n// times out is returned as part of the timeout error.\nRoundTripTimeout time.Duration\n\n// ReadTimeout is the amount of time that calls to Read on Response.Body will\n// block before returning a timeout error.\nReadTimeout time.Duration\n\nThe main advantages to this are that the abstraction is maintained, issues with down or\noverloaded servers are addressed within the bounds of RoundTripTimeout, and there is a\nreasonable hook to ensure that Body.Read doesn't block goroutines forever. In addition,\ntimeouts are defined by the boundaries of the API function calls, rather than by the\nboundaries of various phases of the request, which is much easier to test, verify and\nreason about. At the same time, the actual causes of the timeouts can be inspected via\nthe returned errors of each associated function call, be it RoundTripper.RoundTrip or\nResponse.Body.Read.\u003c/pre\u003e",
	"user": {
		"login": "stevvooe",
		"id": 120601,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-02-19T00:08:35Z",
	"updated_at": "2014-12-08T10:17:29Z"
}
