{
	"id": 66051759,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eThe Go specification, like its ancestor C, is agnostic, allowing the programmer to use\nwhatever is most comfortable or required. For example, from the documentation,\n0xBadFace, and some valid code,\n\nconst (\n\thexUU = 0XAF; hexLL = 0xaf; hexLU = 0xAf; hexUL = 0XaF\n)\n\nThe programmer is merely expected to say what they mean and mean what they say.\n\nInteger literals\n\nAn integer literal is a sequence of digits representing an integer constant. An optional\nprefix sets a non-decimal base: 0 for octal, 0x or 0X for hexadecimal. In hexadecimal\nliterals, letters a-f and A-F represent values 10 through 15.\n\nint_lit     = decimal_lit | octal_lit | hex_lit .\ndecimal_lit = ( \"1\" ... \"9\" ) { decimal_digit } .\noctal_lit   = \"0\" { octal_digit } .\nhex_lit     = \"0\" ( \"x\" | \"X\" ) hex_digit { hex_digit } .\n\n42\n0600\n0xBadFace\n170141183460469231731687303715884105727\n\nLetters and digits\n\nThe underscore character _ (U+005F) is considered a letter.\n\nhex_digit     = \"0\" ... \"9\" | \"A\" ... \"F\" | \"a\" ... \"f\" .\n\nThe Go Programming Language Specification\n\u003ca href=\"http://golang.org/doc/go_spec.html#Integer_literals\"\u003ehttp://golang.org/doc/go_spec.html#Integer_literals\u003c/a\u003e\n\u003ca href=\"http://golang.org/doc/go_spec.html#hex_digit\"\u003ehttp://golang.org/doc/go_spec.html#hex_digit\u003c/a\u003e\n\nThe C Programming Language, 2nd Edition, Kernighan \u0026 Ritchie\n2.3 Constants and 7.2 Formatted Output - printf.\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-07-08T08:11:42Z",
	"updated_at": "2014-12-08T10:06:17Z"
}
