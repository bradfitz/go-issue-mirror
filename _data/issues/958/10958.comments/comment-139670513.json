{
	"id": 139670513,
	"body": "The load is not dependent on anything in the loop. Assuming the loop is\ntight, the value is almost certainly to a location already in the L1 cache,\nthe branch will be highly predictable. Just to make sure the branch\npredictor doesn't even need to be warmed up, we can make it a backward\nbranch. I would be sort of surprised that if on an out of order machine the\ncost would even be noticed. That said build and measure is the only way to\nbe sure.\n\nOn Fri, Sep 11, 2015 at 3:38 PM, Keith Randall \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e The new SSA register allocator handles situations like this well, keeping\n\u003e everything in registers on the common edges and spill/call/restore on the\n\u003e unlikely case.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/10958#issuecomment-139643973\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-11T21:58:14Z",
	"updated_at": "2015-09-11T21:58:14Z"
}
