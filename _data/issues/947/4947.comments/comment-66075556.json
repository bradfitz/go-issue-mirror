{
	"id": 66075556,
	"body": "\u003ca id=\"c15\"\u003e\u003c/a\u003eComment 15:\n\n\u003cpre\u003e\u003e I'm sorry, but that's not an API I am smart enough to program against. We\n\u003e will never be able to write correct code if we have to reason through all\n\u003e of that.\n\n\nThere are 3 orthogonal parts -- operation, type and order. Type and operation are\nsimple. The only remaining part is order.\nWell, I agree, it's not trivial. The good news is that you can use SEQ_CST for all\noperations and it will give you the current semantics of simple interleaving of\noperations.\nThe remaining 2 types of synchronization (RELAXED and ACQUIRE-RELEASE) are more complex,\nbut that's what can provide additional performance benefit.\n\nFor x86, the only operations that would benefit from non-SEQ_CST memory order are:\nSTORE_RELEASE -- allows to replace XCHG with MOV\nLOAD_RELAXED -- allows to not disturb register allocator\nI am fine if we do only them besides SEQ_CST (which may be implied then, i.e.\nATOMIC_LOAD instead of ATOMIC_LOAD_SEQ_CST).\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-07-16T06:10:01Z",
	"updated_at": "2014-12-08T10:26:20Z"
}
