{
	"id": 66051986,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4 by **milanbella**:\n\n\u003cpre\u003eThank you very much for looking in this!\n\n\u003e Then you can make sure that the sequence\n\u003e of calls is exactly the same in the Go version and the C\n\u003e version, by looking at the prints.  If it's not, then you'll\n\u003e have a demonstration that doesn't involve Postgres.\n\u003e And if it is, then it's not cgo's fault.\n\nI am not quite sure what you mean, but I think I have demostrated that it is not\npostgres fault (initially I was suspecting postgres and wanted file the bug with them).\nSimply said if you create then delete large object and then open same large object it is\nsafe using native C postgres interface, but if you do exactly same calls sequence from\ncgo that will corrupt your database - you will not be able create large objects anymore\nfrom your application.\n\nIt is probably not the problem of OS, I tried it on 2 diffrent debian versions. \n\nPersonally, this bug doesn't bug me too much. But behaviour is so weired that looking\ninto cause of it may lead to greater problem or improvment.\n\nMay be if you are not so busy sometime, just try to write your own Go test programm for\nthis and then run it for few times. What is weried is that your go programm will always\nfail to create large object but you will be able create large object using command line\npsql tool.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-09-14T16:09:44Z",
	"updated_at": "2014-12-08T10:06:28Z"
}
