{
	"id": 51284888,
	"number": 6239,
	"state": "open",
	"title": "runtime: make timers faster",
	"body": "\u003cpre\u003eThis is a follow up to:\n\u003ca href=\"https://golang.org/cl/12876047/\"\u003ehttps://golang.org/cl/12876047/\u003c/a\u003e\ntime: lower level interface to Timer: embedding, compact interface callback with fast\ncallback\n\nTimers can be heavily used in networking applications.\nCurrent implementation at least has problems with scalability:\n\n$ ./time.test -test.run=none -test.bench=StartStop -test.benchtime=1s\n-test.cpu=1,2,4,8,16,32\nPASS\nBenchmarkStartStop\t10000000\t       214 ns/op\nBenchmarkStartStop-2\t 5000000\t       515 ns/op\nBenchmarkStartStop-4\t 5000000\t       735 ns/op\nBenchmarkStartStop-8\t 2000000\t       804 ns/op\nBenchmarkStartStop-16\t 5000000\t       708 ns/op\nBenchmarkStartStop-32\t 5000000\t       679 ns/op\n\nSome spot optimizations can be applied as well. Probably more efficient data structure\ncan be used, but it's not clear to me how to do better than current 4-ary heap.\n\nFTR here is BenchmarkStartStop profile with 8 procs:\n\n+  13.75%  time.test  [kernel.kallsyms]  [k] _raw_spin_lock_irqsave                     \n                                                            ▒\n+  11.25%  time.test  time.test          [.] runtime.lock                               \n                                                            ◆\n+  11.15%  time.test  time.test          [.] runtime.xchg                               \n                                                            ▒\n+   6.89%  time.test  time.test          [.] runtime.procyield                          \n                                                            ▒\n+   6.32%  time.test  [kernel.kallsyms]  [k] _raw_spin_lock                             \n                                                            ▒\n+   4.06%  time.test  time.test          [.] runtime.cas                                \n                                                            ▒\n+   3.49%  time.test  [kernel.kallsyms]  [k] gup_pte_range                              \n                                                            ▒\n+   1.87%  time.test  time.test          [.] runtime.deltimer                           \n                                                            ▒\n+   1.80%  time.test  [kernel.kallsyms]  [k] get_futex_key                              \n                                                            ▒\n+   1.71%  time.test  [kernel.kallsyms]  [k] put_page                                   \n                                                            ▒\n+   1.58%  time.test  [kernel.kallsyms]  [k] try_to_wake_up                             \n                                                            ▒\n+   1.55%  time.test  [kernel.kallsyms]  [k] __wait_on_bit_lock                         \n                                                            ▒\n+   1.42%  time.test  time.test          [.] flushptrbuf                                \n                                                            ▒\n+   1.38%  time.test  [kernel.kallsyms]  [k] get_user_pages_fast                        \n                                                            ▒\n+   1.38%  time.test  time.test          [.] siftup                                     \n                                                            ▒\n+   1.22%  time.test  [kernel.kallsyms]  [k] copy_user_generic_string                   \n                                                            ▒\n+   1.19%  time.test  time.test          [.] runtime.casp                               \n                                                            ▒\n+   1.10%  time.test  [kernel.kallsyms]  [k] unlock_page                                \n                                                            ▒\n+   1.04%  time.test  [kernel.kallsyms]  [k] get_futex_key_refs                         \n                                                            ▒\n+   1.01%  time.test  time.test          [.] addtimer                                   \n                                                            ▒\n+   1.00%  time.test  [kernel.kallsyms]  [k] drop_futex_key_refs                        \n                                                            ▒\n+   0.98%  time.test  [kernel.kallsyms]  [k] prepare_to_wait_exclusive                  \n                                                            ▒\n+   0.97%  time.test  [kernel.kallsyms]  [k] __wake_up_bit                              \n                                                            ▒\n+   0.94%  time.test  [kernel.kallsyms]  [k] __wake_up_common                           \n                                                            ▒\n+   0.81%  time.test  [kernel.kallsyms]  [k] audit_filter_syscall                       \n                                                            ▒\n+   0.75%  time.test  [kernel.kallsyms]  [k] __schedule                                 \n                                                            ▒\n+   0.72%  time.test  time.test          [.] runtime.mallocgc                           \n                                                            ▒\n+   0.72%  time.test  time.test          [.] siftdown\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"comments": 4,
	"created_at": "2013-08-24T10:38:48Z",
	"updated_at": "2016-04-06T13:09:52Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
