{
	"id": 66053356,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003e\"An interface type specifies a method set called its interface. A variable of interface\ntype can store a value of any type with a method set that is any superset of the\ninterface. Such a type is said to implement the interface.\"\n\n\"More than one type may implement an interface.\"\n\nInterface types, The Go Programming Language Specification\n\u003ca href=\"http://golang.org/doc/go_spec.html#Interface_types\"\u003ehttp://golang.org/doc/go_spec.html#Interface_types\u003c/a\u003e\n\nGo is statically typed. At runtime, use type assertions or type switches to decide which\ndynamic type the value stored in the interface type represents.\n\nType assertions, The Go Programming Language Specification\n\u003ca href=\"http://golang.org/doc/go_spec.html#Type_assertions\"\u003ehttp://golang.org/doc/go_spec.html#Type_assertions\u003c/a\u003e\n\nSwitch statements\n\u003ca href=\"http://golang.org/doc/go_spec.html#Switch_statements\"\u003ehttp://golang.org/doc/go_spec.html#Switch_statements\u003c/a\u003e\n\nSince more than one type may implement an interface, there is no guarantee that any of\nthese other types are structA, a struct with an objects of type pointer to map field;\nthey merely have to implement the interface method set.\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-11-19T15:18:32Z",
	"updated_at": "2014-12-08T10:07:39Z"
}
