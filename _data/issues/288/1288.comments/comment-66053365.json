{
	"id": 66053365,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11 by **jdevilliers**:\n\n\u003cpre\u003eAre you saying that the nil value for the struct type is not equal to the nil value for\nthe interface type, because their types are different, even though the struct type\nsatisfies the interface?\n\nTherefore the output from\n\n        type interfaceType interface {\n\t      f()\n        }\n\n        type structType struct {}\n\n        func (s *structType) f() {}\n\n\n        ...\n        var i interfaceType\n\tfmt.Printf(\"%#v, (i == nil) == %v, as expected\\n\", i, i == nil)\n\t\n\tvar s *structType\n\tfmt.Printf(\"%#v, (s == nil) == %v, as expected\\n\", s, s == nil)\n\t\n\ti = s\n\tfmt.Printf(\"%#v, (i == nil) == %v, as intended?\\n\", i, i == nil)\n        ...\n\nis intended to be\n\n  \u0026lt;nil\u0026gt;, (i == nil) == true, as expected\n  (*main.structType)(nil), (s == nil) == true, as expected\n  (*main.structType)(nil), (i == nil) == false, as intended?\n\nIn other words, it is okay to assign a variable of the struct type with value nil to a\nvariable of the interface type, but not to compare the resulting interface variable to\nnil?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-11-20T11:21:51Z",
	"updated_at": "2014-12-22T05:47:20Z"
}
