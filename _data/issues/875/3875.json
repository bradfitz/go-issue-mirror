{
	"id": 51281285,
	"number": 3875,
	"state": "closed",
	"title": "net: ListenUnixgram's ReadFrom always fails \"address family not supported by protocol\"",
	"body": "by **jls@semicomplete.com**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n\n* Code:\n\u003ca href=\"https://github.com/jordansissel/experiments/blob/master/go/unixgram-broken/unixgram_test.go\"\u003ehttps://github.com/jordansissel/experiments/blob/master/go/unixgram-broken/unixgram_test.go\u003c/a\u003e\n* rm /tmp/example.sock (used by this program)\n* go test unixgram_test.go\n\nWhat is the expected output?\n\nSome kind of passing indication :)\n\nWhat do you see instead?\n\n% go test unixgram_test.go\n--- FAIL: TestListenUnixgramReadFrom (0.00 seconds)\n        unixgram_test.go:54: UnixConn.ReadFromfailed: read unixgram /tmp/example.sock: address family not supported by protocol\nFAIL\nFAIL    command-line-arguments  0.063s\n\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n\n6g\n\nWhich operating system are you using?\n\nlinux\n\nWhich version are you using?  (run 'go version')\n\ngo version go1.0.1\n\nPlease provide any additional information below.\n\n* strace shows go successfully calling recvfrom(2), yet an errno 97 is reported as well:\n\n% strace -fe trace=recvfrom go test unixgram_test.go\n[pid  5981] recvfrom(3, \u0026quot;Hello world\u0026quot;, 100, 0, {sa_family=AF_UNSPEC,\nsa_data=\u0026quot;\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\u0026quot;}, [0]) = 11\n\n* recvfrom(2) on unix datagram sockets yields no peer address/origin of the packet. See\nexample C code here showing the same behavior:\n\n\u003ca href=\"https://github.com/jordansissel/experiments/blob/master/c/sockets/unixdatagram.c\"\u003ehttps://github.com/jordansissel/experiments/blob/master/c/sockets/unixdatagram.c\u003c/a\u003e - run,\nsend a message to the socket, and output is:\n\n% ./a.out /tmp/example\nclient addr type, len: 0, 0\nGot: '\u0026lt;5\u0026gt;Jul 28 01:06:48 jls: hello world\n\nI tried to dig into the Go code, but it's a bit confusing. The problem seems to live in\nnet/fd.go ReadFrom's syscall.Recvfrom invocation, or alternately in syscall.Recvfrom's\nimplementation, perhaps? It's hard to really say - in C, errno is not set, yet in Go,\nthe errno-equivalent is set after the recvfrom syscall returns. Any ideas?\n\nIt's worth noting that syscall.Recvfrom, while reporting an error, still updates the\nbyte slice (p) and length (n) with the datagram payload.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 13,
	"closed_at": "2014-12-08T10:20:28Z",
	"created_at": "2012-07-28T08:17:09Z",
	"updated_at": "2016-06-24T22:22:11Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
