{
	"id": 139643254,
	"number": 14733,
	"state": "closed",
	"title": "cmd/gofmt: simplify nil checks followed by len check, e.g. x != nil \u0026\u0026 len(x) ...",
	"body": "\r\nThis a followup from [golang-nuts](https://groups.google.com/forum/#!topic/golang-nuts/AYFi0CQBsNM) that I posted a few months back.\r\n\r\nIt would be nice if `gofmt -s`  simplified the following redundant expressions:\r\n\r\n```go\r\nif x == nil || len(x) == 0 {}\r\nif x != nil \u0026\u0026 len(x) ... {  // or any operator len(x) \u003e 0, len(x) != 0, len(x) \u003e 10000\r\n```\r\n\r\ncan be simplified into just\r\n\r\n```go\r\nif len(x) == 0 {}\r\nif len(x) .... {}\r\n```\r\n\r\n\r\n### How common is this?\r\n\r\nNot uncommon:  While this code search on GitHub isn't perfect, it does show up.  I'd prefer not to download github to correctly search until I understand the acceptance requirements (defects per 10k? at what level?  number of repos affected?)\r\n\r\n* https://github.com/search?utf8=✓\u0026q=%22%3D%3D+nil+%7C%7C+len%28%22+extension%3Ago\u0026type=Code\u0026ref=searchresults\r\n* https://github.com/search?utf8=✓\u0026q=%22%21%3D+nil+%26%26+len%28%22+extension%3Ago\u0026type=Code\u0026ref=searchresults\r\n\r\nTo quote the original topic:\r\n\r\n\u003e As a quick test I used grep, and removed false positives.\r\n\u003e \r\n\u003e $ find . -name '*.go' | xargs grep '= nil || len(' | grep Godeps\r\n\u003e \r\n\u003e ./Godeps/_workspace/src/github.com/gocql/gocql/marshal.go:\tif data == nil || len(data) == 0 {\r\n\u003e ./Godeps/_workspace/src/github.com/pborman/uuid/uuid.go:\tif uuid == nil || len(uuid) != 16 {\r\n\u003e ./Godeps/_workspace/src/github.com/pborman/uuid/uuid.go:\tif uuid == nil || len(uuid) != 16 {\r\n\u003e ./Godeps/_workspace/src/github.com/ugorji/go/codec/decode.go:\t\t\tif rvbs == nil \u0026\u0026 bs2 != nil || rvbs != nil \u0026\u0026 bs2 == nil || len(bs2) != len(rvbs) { ###  wow!!\r\n\u003e\r\n\u003e$ find . -name '*.go' | xargs grep '= nil \u0026\u0026 len(' | grep Godeps\r\n\u003e\r\n\u003e ./Godeps/_workspace/src/github.com/araddon/gou/jsonhelper.go:if lst := jsonList(root); lst != nil \u0026\u0026 len(lst) \u003e idx {\r\n\u003e ./Godeps/_workspace/src/github.com//elastigo/lib/clusterhealth.go:\tif f.FilterIndices != nil \u0026\u0026 len(f.FilterIndices) \u003e 0 {\r\n\u003e\r\n\u003e thats 5 repos out of 60.  Granted a small sample but that doesn't seem so rare.\r\n\r\nI reran this, a few of them have been fixed up and some new ones added.\r\n\r\n### Great for learning\r\n\r\nEven if not particularly common, people new to Go from ruby, C/C++, java are normally terrified by `nil` or `null` and are use to putting in guards.  Having this check in gofmt, make learning that the `len` operator understands the native type and makes code simpler.  Plus it definitely makes the code easier to read.\r\n\r\n### `gofmt -st` vs. `golint`\r\n\r\n* The check-nil-then-len anti-pattern is fundamental misunderstanding of the language (that `len` understands pointers and types) vs a style issues. (more like `gofmt`, less like `golint`)\r\n* It can be coded with no false positives (again more like `gofmt`, less like `golint`)\r\n* that said I think the `-s` flag in `gofmt` is less known than `golint`, and `golint` is decoupled from release cycles.\r\n* There may be an issue of false negatives with `gofmt`.  For instance, what should happen with inverted forms such as `x == nil || 0 == len(x)`, or broken code such as `if len(x) == 0 || x = nil` (which I bet happens). `gofmt -s` simplification is very simple, while `golint` is more like \"hey take a look at this..\"\r\n\r\n### Next Steps\r\n\r\nIf this is better in`golint`   Great, let me know and I'll move the ticket over there.\r\n\r\nLikewise, if this needs a formal proposal I'm happy to that as well.\r\n\r\nAnd finally,  I'm also happy to fill out the copyright assignment and do the actual work.  You win!\r\n\r\n\r\n\r\n\r\nps.  While writing this, \"golint\" got autocorrected as \"goofy\"\r\n\r\n\r\n\r\n\r\n\r\n",
	"user": {
		"login": "client9",
		"id": 217179,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2016-03-09T18:26:51Z",
	"created_at": "2016-03-09T17:16:20Z",
	"updated_at": "2016-03-09T18:26:56Z"
}
