{
	"id": 67487216,
	"body": "The current version of Docker is for the convenience during development\r\ne.g., when you don't know whether your application package builds(!) or you\r\nhave all necessary libraries installed yet. Usually, I have a window open\r\nfor a docker container running build and debugging in interactive mode (-it\r\nand often with usb mount) and other windows to edit files, run gobind, or\r\nother source generation tools. No more double goroot for cross-compilation\r\nor android library installation headache.\r\n\r\nFor build-only purpose, we need a better mechanism - check adg's mobiley\r\nidea. https://codereview.appspot.com/152770043/\r\nIt launches a builder server in a container, sends a tarball to the server\r\nto build. The server responses with the built apk or build error logs.\r\n\r\nI think either we need to use mobiley or, use a docker build+run+copy\r\nsolution dedicated for the build-only purpose.\r\n\r\nOn Wed Dec 17 2014 at 9:43:34 PM Burcu Dogan \u003cnotifications@github.com\u003e\r\nwrote:\r\n\r\n\u003e -v is just being used to determine the mounting point on the container :-/\r\n\u003e The source has be mounted on the host machine.\r\n\u003e\r\n\u003e It's an overkill and is pretty backwards to share an fs in this particular\r\n\u003e case. I would like to pack the entire application package as an image and\r\n\u003e send it to the build server and have no dependencies to the host machine.\r\n\u003e It's also racy to adopt this model. How am I supposed to run two builds\r\n\u003e concurrently? By creating a new source point for each build?\r\n\u003e\r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub\r\n\u003e \u003chttps://github.com/golang/go/issues/9372#issuecomment-67433743\u003e.\r\n\u003e",
	"user": {
		"login": "hyangah",
		"id": 4999471,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-18T13:45:53Z",
	"updated_at": "2014-12-18T13:45:53Z"
}
