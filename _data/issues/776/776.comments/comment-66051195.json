{
	"id": 66051195,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eThe following works on darwin/amd64:\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"syscall\"\n\t\"os/signal\"\n)\n\nfunc main() {\n\tfor sig := range signal.Incoming {\n\t\tfmt.Printf(\"Got signal: %s\\n\", sig)\n\t\tif usig,ok := sig.(signal.UnixSignal); ok {\n\t\t\tif usig == syscall.SIGTSTP {\n\t\t\t\tfmt.Printf(\"Suspending\\n\")\n\t\t\t\tsyscall.Kill(syscall.Getpid(), syscall.SIGSTOP)\n\t\t\t}\n\t\t}\n\t}\n}\n\nEssentially, you can catch the TSTP signal and then send yourself the STOP signal.  I\ndon't know how this will \ninteract with things like time.Sleep, as I don't know if the runtime is equipped to\nhandle being forcibly stopped, \nbut in my trivial case it appears to work.  While this is not an automated, built-in\nsolution, it will emulate the \nbehavior that you are seeking.  (sorry about the extra comment, I pasted an older\nversion of the code and \nmanaged to send it instead of repasting)\u003c/pre\u003e",
	"user": {
		"login": "kylelemons",
		"id": 322213,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-05-31T08:36:18Z",
	"updated_at": "2014-12-08T10:05:49Z"
}
