{
	"id": 195453863,
	"body": "Having to deal with json and multiple database backends (not just sql), the lack of true optional types has been by far the biggest pain point in adopting Go.  Not having it means the API surface increases in many places at the application level to compensate.\r\n\r\nProviding real optional types at a language level would make it much more convenient, and safe, without requiring developers to increase the API surface by repeatedly having to write custom types for the same case.\r\n\r\nI don't know about implementation, but something closer to Option 2 above would be incredibly beneficial.  I don't use Swift, but the way that language expresses the idea of optionals seems consistent, convenient and safe.  You declare any type as optional, and when you access it, it must be unpacked properly, so it's clear at compile time whether or not the operation is safe.  The ability to chain those operations is icing on the cake.",
	"user": {
		"login": "evillemez",
		"id": 318976,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-03-11T16:59:37Z",
	"updated_at": "2016-03-11T16:59:37Z"
}
