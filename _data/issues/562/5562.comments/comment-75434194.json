{
	"id": 75434194,
	"body": "FWIW I think this is unfortunate. JSON numbers *are* floats, and I think we should at least try to convert them to integers if we're unmarshaling into an integer type. If the JSON is produced by some other language, it may very well encode larger integers in exponential notation in the expectation that they can be round-tripped back into an integer. Luckily the usual Javascript JSON stringify function does not produce e-notation for integers in the int32 range, otherwise this would be a much bigger issue than it is.\r\n\r\nIf it were up to me, I'd treat unmarshaling into an integer type as the same as converting a float64 to an integer type, int64(f).\r\n\r\nAs an mitigating change, perhaps we could change %g to avoid e-notation for numbers in the range -0x80000000 to 0x7fffffff.\r\n\r\n@orian You *can* use UseNumber to round trip JSON without changes like that. http://play.golang.org/p/YcpPyC6v3s\r\n",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-22T12:55:32Z",
	"updated_at": "2015-02-22T12:55:32Z"
}
