{
	"id": 121466461,
	"number": 13562,
	"state": "closed",
	"title": "Interface type variables cannot be compared with nil while holding nil pointer of interface implementation",
	"body": "This issue had caused days of inconvenience until we could pinpoint what exactly was happening, but I can now reproduce it.\r\n\r\nGiven a function that returns a specific implementation of an interface - this specific implementation is also a pointer. This value is then assigned to a variable of the interface's type. If the value returned was nil (a null pointer), comparing the variable to nil (determined by the compiler to be a null interface nil, rather than a null pointer nil) will always yield false.\r\n\r\nA simple change in a library, going from returning the interface type from returning the specific implementation type broke our code in a completely puzzling way, as we got a null pointer dereference panic from a branch which specifically checks if the variable is indeed nil.\r\n\r\nA simple example:\r\nhttp://play.golang.org/p/wF6w53fz_7\r\n\r\nTested using both go playground and `go version go1.5.1 darwin/amd64`",
	"user": {
		"login": "baliame",
		"id": 2102965,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2015-12-10T16:43:02Z",
	"created_at": "2015-12-10T11:47:27Z",
	"updated_at": "2015-12-10T16:43:02Z"
}
