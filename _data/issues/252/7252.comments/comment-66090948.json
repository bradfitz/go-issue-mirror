{
	"id": 66090948,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eI have a program that accepts a regexp as a way to filter its line-based data stream. I\nhad a need to filter for lines with a minimum length of 1800 bytes, but /.{1800,}/ was\nrejected as a pattern. Obviously there are much better ways to do this, but this would\nhave been one that didn't require a code change, rebuild, and deployment. I would argue\nthat this is a \"[reasonable]\" desire as long as there's no downside to supporting it.\nNote that strings.Repeat(\".\", 1800) is accepted as a pattern, so there seems little\nsense in prohibiting the equivalent quantified version.\n\nSince the current value appears entirely arbitrary, it might as well be an equally\narbitrary value that is more permissive. I would guess that the check was originally\nadded to prevent runaway memory use and compilation time, which is fair to a point. But\nwith the check removed from tip, I can compile /.{100000,}/ in 22MB in 23ms, which isn't\nat all crazy. Both values appear to increase about linearly; compiling /.{10000000,}/\ntakes a couple seconds and consumes ~2.5GB.\n\nRegardless of what magic value strikes the right balance, it ought to be documented. I'm\nhappy to submit patch(es) to change the value and/or add docs.\u003c/pre\u003e",
	"user": {
		"login": "athomason",
		"id": 75905,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-02-18T23:13:02Z",
	"updated_at": "2014-12-08T10:40:20Z"
}
