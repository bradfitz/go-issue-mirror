{
	"id": 66090859,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6 by **casey.marshall**:\n\n\u003cpre\u003eI've also wondered about the difference in the armored representation of a public key\nbetween go.crypto and GnuPG. I am interested in getting to the bottom of this one, if\nonly to satisfy my own curiosity.\n\nI would expect most key material to parse correctly on both GnuPG and with go.crypto,\nexcept for edge cases like unsupported algorithms, invalid content, etc (there are a few\nreally weird ones floating around in the SKS global pool, let me tell you...). I would\nexpect reasonably valid key material to \"round-trip\" parsing and serializing with\nidentical output. If you find something otherwise, please create and share a test case.\n\n\u003e 1. rawSubpackets and outSubPackets are output differently in gpg and go.Content seems\nto be same but go outputs it in outSubpackets and gpg in rawSubPackets.\n\nSignature.outSubpackets is a stateful field used in serializing the packet and\ncalculating the hash. You would expect to see differences in outSubpackets, between a\nsignature that had just been parsed, vs. a signature that had been just been serialized\nor created by packet.Sign.\n\n\u003e 2. If we assume that contents are same then we can see that In go there is \n\u003e {true 16 false [70 75 47 172 246 211 247 238]}\n\u003e while in gpg it is\n\u003e {false 16 false [70 75 47 172 246 211 247 238]}\n\nFor new content (generating keys, adding signatures, etc.) go.crypto may differ from\nGnuPG in its interpretation of RFC 4880, in ways that are perfectly valid.\n\nSignature v4 subpacket type 16 is \"Issuer\" (RFC 4880, 5.2.3.1, 5.2.3.5). While it's\nprobably ok in most cases not to include in the hash, I can't see any harm in doing so.\nIt's certainly possible that some APT has developed the capability to generate keys with\ncolliding 8-byte key IDs on demand.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-02-13T16:17:42Z",
	"updated_at": "2014-12-08T10:40:15Z"
}
