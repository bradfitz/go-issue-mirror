{
	"id": 115752322,
	"body": "The go/types package takes no opinion on issues like this, by design.  It's simply a function from ASTs to type information, and it makes upcalls into the client application if it needs to import type information for dependencies.\r\n\r\nMany applications use the gcimporter package to read type information from compiled object files, though as you point out, there's no guarantee that those files are even remotely recent.  This seems like a bad default to me.\r\n\r\nMany other applications use the golang.org/x/tools/go/loader package, which loads the entire program from source code, and parses and type-checks it, so the correct result is guaranteed.  It's slower of course, but still quite fast: to load golang.org/x/tools/cmd/oracle (130KLoC) takes about 400ms.\r\n\r\nIf you care about staleness, and you should then, then use go/loader.  A hybrid mechanism that uses gcimporter if fresh and source if not seems tricky to get right.  I recently dropped support for hybrid loading from go/loader for reasons of complexity, and it didn't even use a staleness check.\r\n\r\nThis is one of many things that we need (and plan) to document in the go/types API for Go 1.5.",
	"user": {
		"login": "adonovan",
		"id": 5658175,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-26T16:46:53Z",
	"updated_at": "2015-06-26T16:46:53Z"
}
