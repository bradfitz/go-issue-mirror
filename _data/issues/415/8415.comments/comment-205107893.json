{
	"id": 205107893,
	"body": "@ianlancetaylor I think you may have it backwards in your snippet.\r\n\r\nIt seems like you want the code to check if a pointer to the var takes the Value interface, then try to get that pointer. I believe all the other combos of implemented on a pointer or not / value a pointer or not work with the existing code. \r\n\r\nI got this working, with tests, on my machine: \r\n```go \r\nptrType := reflect.PtrTo(reflect.TypeOf(v))\r\nif ptrType.Implements(reflect.TypeOf((*Valuer)(nil)).Elem()) {\r\n\r\n\tuPtr := unsafe.Pointer(\u0026v)\r\n\ttPtr := reflect.NewAt(ptrType, uPtr)\r\n\r\n\treturn defaultConverter{}.ConvertValue(tPtr.Elem().Interface())\r\n}\r\n```\r\n\r\nI had to use unsafe to create the pointer because it wouldn't let let me do something like:\r\n```go\r\nptr, ok := (interface{}(\u0026val)).(Valuer)\r\n```\r\n\r\nHowever, I am a go noobie so I may be missing something. What do you think?",
	"user": {
		"login": "ConnorFoody",
		"id": 1727309,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-04T02:41:18Z",
	"updated_at": "2016-04-04T02:41:18Z"
}
