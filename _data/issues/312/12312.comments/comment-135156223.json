{
	"id": 135156223,
	"body": "@minux said on golang-dev (moving here to keep the discussion in one place):\r\n\r\n\u003e Ok, how about add a runtime/debug func DoNotInline() that technically is a no-op, but if called, will inhibit inlining of the enclosing function.\r\n\u003e For now, we just need to implement that in assembly. Future improved compiler might need to detect it.\r\n\u003e It is as clear as //go:noinline, but doesn't require changes to the compiler.\r\n\r\nThere are two reasons this is not as good as an annotation:\r\n\r\n* It moves it from gc-only, which is fairly hidden and to which the Go 1 compatibility promise doesn't apply, to the stdlib, where it is visible and plausibly creates expectations of cross-compiler support.\r\n* This annotation is mainly helpful for testing the runtime and compiler. Having to insert extra code into a function in order to achieve this is not ideal, because it means that the part of the runtime or compiler that we are interested has to be unimpacted by the insertion of such code. That's why dev.ssa currently uses the obviously-inlinable-but-not-yet-inlined `switch {}`: It compiles away to nothing, and the compiler doesn't yet know how to compile panics, defers, etc.\r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-26T20:07:23Z",
	"updated_at": "2015-08-26T20:07:23Z"
}
