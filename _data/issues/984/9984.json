{
	"id": 58784153,
	"number": 9984,
	"state": "closed",
	"title": "runtime: incorrect synchronization around arena_used/h_spans during concurrent GC",
	"body": "Arena_used/h_spans updates during memory allocation are not synchronized with concurrent GC.\r\nConsider that a thread grows heap and allocates a new object p and then writes p into an existing object or a global. Concurrent GC reaches the global and extracts pointer p, then it checks it against arena_start/arena_used, but it may not see the updated value of arena_used and thus ignore the object p unmarked and unscanned.\r\nA similar senario can happen with h_spans: GC sees new value of arena_used but does not see the new value in h_spans[spanIdx].\r\n\r\nThis will probably work today on x86 due to conservative compiler that does not reorder memory accesses aggressively. But this should break on arm and power.\r\n\r\n@RLH @aclements @rsc\r\n",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 44,
	"closed_at": "2015-06-23T18:58:00Z",
	"created_at": "2015-02-24T18:44:44Z",
	"updated_at": "2016-06-25T02:01:53Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
