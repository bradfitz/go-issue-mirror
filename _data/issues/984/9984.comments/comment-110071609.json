{
	"id": 110071609,
	"body": "There are two other reincarnations of the multiprocessor ordering problem:\r\n1. GC bitmap. It must be visible to GC threads along with the object.\r\n2. Object zeroing. At least the zero state must be visible to GC threads. If GC will see values from the previous life  of the object, it will crash or retain irrelevant objects.\r\nI think that both cases are solvable by issuing a @StoreStore barrier after object initialization (both zeroing and bitmap setup). On the reader side there is a data dependency on the pointer value, so only a data-dependent barrier is enough (which is no-op on everything except Alpha).\r\nThis can also probably add very bad failure modes for user code with data races on pointers, as visibility over bitmap won't be propagated to GC threads.\r\n",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-08T16:51:30Z",
	"updated_at": "2015-06-08T16:51:30Z"
}
