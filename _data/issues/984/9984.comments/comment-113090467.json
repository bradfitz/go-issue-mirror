{
	"id": 113090467,
	"body": "Yes, I think that if GC does not see invalid spans, it gives us much better foundation for future. And it will allow us to enable the invalid span debug check, which is I think a very good thing to have.\r\n\r\nI think I constructed a case where GC does can see an invalid span (a span is freed, then a part of it is reallocated, then the other part of is allocated, and for that other part GC can see the original span descriptor with original bounds but new inuse state). I can well admit that there is something that prevents this scenario from happening. But as you said, it does not looks like a good foundation for future changes.\r\n\r\nThe following looks like a good scheme to solve these races:\r\n- Issue release barrier at the end of mallocgc for no-noscan objects (as you did in the cl). This provides visibility over bitmap and zero object state for no-noscan objects. For noscan objects bitmap must be already in proper state, and that state is visible to GC due to sweep-\u003emark ordering (which must be ensured elsewhere).\r\n- Issue release barrier at the end of heap alloc. This provides visibility over the slot in h_spans, and part of visibility for arena_used (because there is no data-dependency on the pointer value on reader size).\r\n- Do the reload-if-invalid trick for arena_used in GC thread.\r\n\r\n\r\n",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-18T09:35:43Z",
	"updated_at": "2015-06-18T09:35:43Z"
}
