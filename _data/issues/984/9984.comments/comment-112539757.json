{
	"id": 112539757,
	"body": "Now that I've added the publication barrier to mallocgc (pending CL https://golang.org/cl/11083), I'm wondering if that's also the solution to the stale span problem. I may have just tied myself in knots at this point, but it seems like that publication barrier at the end of mallocgc should, in addition to ensuring GC sees an up-to-date object and heap bitmap after it follows a pointer to the object, also ensure it sees the up-to-date *mspan and mspan fields. In this case we'd need to do the publication barrier in the noscan path as well (the CL currently skips that), but that's easy enough. I believe this addresses your scenario in https://github.com/golang/go/issues/9984#issuecomment-103009836. Am I right?",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-16T19:33:59Z",
	"updated_at": "2015-06-16T19:33:59Z"
}
