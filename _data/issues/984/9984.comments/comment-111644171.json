{
	"id": 111644171,
	"body": "\u003e There are two other reincarnations of the multiprocessor ordering problem:\r\n\u003e 1. GC bitmap. It must be visible to GC threads along with the object.\r\n\u003e 2. Object zeroing. At least the zero state must be visible to GC threads. If GC will see values from the previous life of the object, it will crash or retain irrelevant objects.\r\n\u003e I think that both cases are solvable by issuing a @StoreStore barrier after object initialization (both zeroing and bitmap setup). On the reader side there is a data dependency on the pointer value, so only a data-dependent barrier is enough (which is no-op on everything except Alpha).\r\n\r\nI think we're all in agreement that there definitely needs to be a store-store barrier at the end of allocation, at least if GC is currently running. Dmitry, do you know of any store-store-type barrier mechanism already in the runtime? We have the full barriers for atomics, but I don't see anything lighter weight.\r\n",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-12T23:55:51Z",
	"updated_at": "2015-06-12T23:55:51Z"
}
