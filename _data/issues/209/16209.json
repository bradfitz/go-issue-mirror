{
	"id": 162926161,
	"number": 16209,
	"state": "closed",
	"title": "Proposal: relaxed rules for assignability with differently-named but identical interfaces",
	"body": "Functions and structures are assignable only when the function arguments or structure fields have identical types. It would be useful to allow assignability in the case where corresponding arguments or fields have identically-shaped _interface_ types.\r\n\r\nPassing variables with differently-named but otherwise identical interface types works. However, passing handler functions or structs with such interface types as parameters or fields does not work.\r\n\r\nThe most important use case is vendoring, where differently-vendored interfaces are common.\r\n\r\nAnother clear and recent example is renaming: with the moving of `context.Context` into the standard library, it is impossible to pass a handler function with a context parameter, unless both passing and passed-to code rename at the same time.\r\n\r\nPrevious informal discussion: https://groups.google.com/forum/#!topic/golang-dev/lOqzH86yAM4\r\n\r\nA note: while it would be possible to actually unify identical interfaces, program-wide, I believe it would cause too many problems when using reflection: it would be unclear which name to use.",
	"user": {
		"login": "zellyn",
		"id": 33625,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "LanguageChange"
		},
		{
			"name": "Proposal"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 18,
	"closed_at": "2016-07-06T17:36:16Z",
	"created_at": "2016-06-29T13:31:57Z",
	"updated_at": "2016-07-07T18:57:45Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	}
}
