{
	"id": 212123466,
	"body": "update: I just saw the part about the alternative proposal -- indeed that would involve a slice allocation in the worst case.\r\n\r\n@robpike (not taking a stance on this proposal), but I don't believe that a slice \"allocation\" would be necessary as you described. There are two cases:\r\n\r\n1. `append(dst, src...)`\r\n2. `append(dst, elem1, elem2, elem3)`\r\n\r\nIn the first case, the source is already a slice (thus no allocation is needed). `append` and `copy` would simply need to be generalized to accept a src whose elements are assignment-compatible to dst, and perform an assignment loop; the current memcpy case would just be an optimization.\r\n\r\nIn the second case, the compiler can place an array on the stack (in the above example, a `[3]T`). It could derive a slice header from this stack-resident array, and place that on the stack as well -- in any case, this is a throwaway slice that clearly does not escape, and thus should never end up on the heap. If it's considered an allocation, it's certainly not an expensive one.",
	"user": {
		"login": "extemporalgenome",
		"id": 536740,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-19T20:54:32Z",
	"updated_at": "2016-04-19T21:02:01Z"
}
