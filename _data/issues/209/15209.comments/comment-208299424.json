{
	"id": 208299424,
	"body": "I really want to like the alternative proposal, but I think it is important that you must explicitly indicate that your are making an allocation. Like `fmt.Println(range xsâ€¦)` but that syntax feels out of place...any ideas?\r\n\r\nAnother possibility (is it the right place?) that would fulfill the use case in the document would be to only have `make` assignment-compatible. That is, allow the seconde parameter (replacing the size) to be a slice* of a type assignable to the slice type of the first parameter.\r\nKeeping the use case in the document, that would give:\r\n\r\n    func printInts(xs []int) {\r\n    \targs := make([]interface{}, xs)\r\n    \tfmt.Println(xs...)\r\n    }\r\n\r\n    func allReader(fs []*os.File) io.Reader {\r\n    \trs := make([]io.Reader, fs)\r\n    \treturn io.MultiReader(rs...)\r\n    }`\r\nwhich feels less verbose than the first proposal while still completely explicit.\r\nIt is less overloaded that the alternative proposal too.\r\n\r\nWhile it cover the usecase in the proposal, its scope is narrower as you cannot append with it. So I think it's important to define what is really important and what is less.\r\n\r\nWhat I like about using `make` is that, unlike `append`, it is quite never used in convoluted code so it doesn't render like the code is less comprehensible.\r\n\r\n*and perhaps map/channel, but that's another story.",
	"user": {
		"login": "champioj",
		"id": 3767976,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-11T11:34:00Z",
	"updated_at": "2016-04-11T11:50:54Z"
}
