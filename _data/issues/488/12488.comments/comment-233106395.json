{
	"id": 233106395,
	"body": "Thinking more about it, I'm confused about what problem this proposal is trying to solve.\r\n\r\nI do have a workspace-centered workflow, which is very much like what this proposal would encourage. I do *not* set a default value for GOPATH. When I start working on a new project I create a directory for it and set GOPATH to that directory. Something akin to this:\r\n\r\n```\r\n$ export GOPATH=$PWD/project-foo\r\n$ PATH=$GOPATH/bin:$PATH\r\n$ cd $GOPATH\r\n$ mkdir -p src/project-foo\r\n$ vim src/project-foo/main.go\r\n$ go install project-foo\r\n$ project-foo\r\n```\r\n\r\nThe point being, everything here works, from compilation to running. Notice that I have to do two things: set GOPATH and set PATH. Setting PATH is arguably pure comfort and not required, but as far as I understand this proposal, it's trying to address newcomers to Go and people who are not used to working with Unix-like operating systems. The second point that might generate disagreement is the usage of `go install` vs `go build`. If we are talking about newcomers, `go build` might be enough, and the above can be changed to this:\r\n\r\n```\r\n$ export GOPATH=$PWD/project-foo\r\n$ cd $GOPATH\r\n$ mkdir -p src/project-foo\r\n$ vim src/project-foo/main.go\r\n$ go build project-foo\r\n$ ./project-foo\r\n```\r\n\r\nNow we are one step away from this proposal:\r\n\r\n```\r\n$ mkdir -p project-foo/src/project-foo\r\n$ cd project-foo\r\n$ vim src/project-foo/main.go\r\n$ go build project-foo\r\n$ ./project-foo\r\n```\r\n\r\nWe have traded not having to tell newcomers about an environment variable for telling them to prefer `go build` over `go install`. Granted we would have gained the ability for doing this:\r\n\r\n```\r\n$ mkdir -p project-foo/src/project-foo\r\n$ cd project-foo/src/project-foo\r\n$ vim main.go\r\n$ go build\r\n$ ./project-foo\r\n```\r\n\r\nbut note that for this particular case we do not need GOPATH. We need GOPATH only if we introduce packages:\r\n\r\n```\r\n$ mkdir -p project-foo/src/project-foo\r\n$ cd project-foo/src/project-foo\r\n$ mkdir pkg\r\n$ vim pkg/pkg.go\r\n# ...\r\n$ vim main.go\r\n# add something that requires import \"project-foo/pkg\"\r\n$ go build\r\n$ ./project-foo\r\n```\r\n\r\nThis fails with the current state and would work with this proposal.\r\n\r\nThe downside I'm seeing is that since this proposal encourages using `go build` over `go install`, that also means that it encourages _not_ having a pkg directory with a cache of all the packages (directly or indirectly) imported by project-foo, meaning slower build times.\r\n\r\nAlso note in that last example PWD is .../project-foo/src/project-foo, meaning that an user cd'ing around (in my experience, this is typical of people who do not feel comfortable with the command line, which might or might not equate the newcomers we are talking about here), will always be able to run `go build project-foo` and will end up with `project-foo` binaries all over the place. `go install` doesn't do that, which is another reason to recommend it over `go build`. But that means going back to the PATH problem.\r\n\r\nIs there an additional required modification? Something like `go install -run ...`, meaning that it does what `go install ...` does, and it also runs the program. I don't really like it, but if the issue is environment variables, that's one way to solve it. Obviously another way is to extend `go run` to accept packages... :-P",
	"user": {
		"login": "mem",
		"id": 189701,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-16T03:54:38Z",
	"updated_at": "2016-07-16T03:54:38Z"
}
