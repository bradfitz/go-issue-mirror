{
	"id": 138139285,
	"body": "I was also thinking about the idea for a go \"workspace\" project container object that essentially gives users one last degree of expressing package addressability. You wouldn't have to manually create, set, manage, and/or mess with them in any explicit way really. \r\n\r\nRather the workspace mechanism would work by walking up the tree until we find ourselves inside of a \"src\" directory. Once there we \"cd ..\" into the parent base dir where we ideally want to set up the gopath we associate with the pkg were building. Since that parent base directory must have an identifier, we can use it to declare a workspace context for that GOPATH. \r\n\r\nSyntactically the \"workspace\" identifier is treated just like a top level domain in all its usage contexts. For example if we wanted to call an executable that is in a specific $GOPATH/bin, we can just call `go tool workspace.execname`. Which is useful considering the fact that that GOPATH/bin might not be appended to the system path and would otherwise require us to call the exec using its full canonical file path identifier. \r\n\r\nIn the context of it's import path string, it would be just a top level domain. \r\nimport \"workspace.gorepo.com/path/2/mypkg\" \r\n\r\nThen in $GOROOT, go get will fetch and install to $GOROOT/users/$USER/$workspace/src/path/2/mypkg\r\n\r\nIn the case that the top level domain is attachted to say github.com. We can just use the top level domain syntax to allude to a sub branch and/or tagged commit. And just create the workspace context name by appending the pkgname in front of the top level domain.\r\n\r\nSo lets say we have import \"v2.github.com/mortdeus/mypkg\", the go get tool will see the v2, then the github.com, then the user name, and then the pkgname. Go get will resolve this to the directory $GOROOT/users/mortdeus/mypkg.v2/src/github.com/mortdeus/mypkg\r\n\r\nThen if we have a few executables called say mypkg/server, mypkg/client, mypkg/shell, mypkg/main\r\nwe can call the executables like 'go tool mypkg.server', 'go tool mypkg.shell', 'go tool mypkg.main' (or just 'go tool mypkg' in the special case of mypkg.main).\r\n\r\nIdk its just an idea.   \r\n  \r\n\r\n",
	"user": {
		"login": "mortdeus",
		"id": 1876634,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-07T00:08:18Z",
	"updated_at": "2015-09-07T00:08:54Z"
}
