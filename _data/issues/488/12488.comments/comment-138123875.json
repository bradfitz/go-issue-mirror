{
	"id": 138123875,
	"body": "The go tool doesn't care if you have scripts/source written in other programming languages stored inside the same directory it found a set of *.go files in. It only cares that each declared package is confined within its own directory inside \"$GOPATH/src\". \r\n\r\nI \"get\" what @adg is saying. Ideally when you use the command `go install`   or `go build`, you have fed the tool a path (either by an explicit declaration or an implicit assumption that $PWD is your intended target). Given that the go tool already knows where the package you want to build resides, all it has to do is hop out into each subsequential parent directory until it finds itself inside a parent directory called \"src\". Which then the go tool can deduce that ../src is either a gopath that is already known to the go tool, or it's a base directory where the go tool can construct a new gopath if it is found that one doesn't already exist at said location.\r\n\r\nI mean it definitely could work. It's just a really hooky programming environment convention if you ask me. It doesn't seem like it would always play nicely with Unix's file system security model either. (you develop your pkg in /usr/src, go installs executable in /usr/bin, which could bring about potential issues like system util name conflicts, or confused package managers, etc etc.\r\n\r\nPersonally, I think @adg's proposal makes the go tool far too \"magic wand\"-ey, for the amount of convenience the language would gain from his proposal's implementation.   ",
	"user": {
		"login": "mortdeus",
		"id": 1876634,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-06T20:34:08Z",
	"updated_at": "2015-09-06T20:50:58Z"
}
