{
	"id": 93202524,
	"number": 11609,
	"state": "closed",
	"title": "runtime: NumCPU does not change when process affinity changes",
	"body": "I have a 32 core linux system and suddenly I found that NumCPU() was returning only two. After discussing about this in the slack channel we've realized that the Go process had a CPU affinity and only two processors were assigned to the process. \r\n\r\nAccording to documentation I'd expect NumCPU() to return the amount of logical cores in the system independently of the process affinity. Also this might bring confusion as we've seen NumCPU() returning different values depending on the underlying platform. \r\n\r\nSeems like either the docs need to be updated clarifying what NumCPU() does or implementation should be consistent among different platforms (taking into account process affinity or not).\r\n\r\nIn addition, it seems like Go only performs the check once. If the user changes the CPU affinity, NumCPU won't change",
	"user": {
		"login": "marcosnils",
		"id": 1578458,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"closed_at": "2015-12-05T20:16:54Z",
	"created_at": "2015-07-06T06:33:45Z",
	"updated_at": "2015-12-05T20:16:54Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
