{
	"id": 66060888,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eInteresting issue. I suggest (weakly) to keep it as it is, though note it well in the\ndocs/specs. The proposed reason to keep it is the difference between the\narithmetic/algebraic and set operations involved. In the finite set of floating/complex\nnumbers represented in N bits, the used encoding has(IEE754?)/may have distinct values\nfor +0 and -0 (involved int the key set operation of a map). The equality a == b checks\nfor a root of y = a - b (is a - b == 0?). In its way both differing cases make sense to\nme.\n\nFrom the practice POV, float/complex map keys are probably not that common and as one\nhas to already think about rounding errors/impreciseness, adding\nAbs(myFloatOrComplexKey) can help where the +0 and -0 should not be seen as distinct -\nwhile having the same nice property where it could in theory make perfect sense (no\nexample at hand).\n\nA side note. The memcmp involved possibly introduces other issues:\n\n- Can denormalized fp/cmplx values occur in Go? If so, the values of a key set for a map\ncan have more members than distinct numbers representable.\n- NaN is commonly not equal to anything, including itself. Due to memcmp, a NaN key may\nsurprisingly return a previously stored value from a map. This can be used as an ugly\nhack but also as an useful thing in modeling something with a map[R/C]T.\n- IIRC, there is more than one concrete bit pattern for NaNs.\n- Items I can't recall now.\n\nThoughts?\u003c/pre\u003e",
	"user": {
		"login": "cznic",
		"id": 729580,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-12-31T18:03:14Z",
	"updated_at": "2014-12-08T10:13:53Z"
}
