{
	"id": 214756222,
	"body": "This feature is _not_ intended for general use. It is intended for the very specific case of \"company X wants to sell company Y a binary version of a package (or the less commercial setting from @dave-andersen: teacher X wants to give student Y a reference solution)\". I've heard from multiple, diverse sources that this is already happening today, with hacks of various kinds (see background in doc). We can't stop this from happening, but we _can_ make sure that those people don't get stuck on Go 1.4 because the go command has gotten too good at noticing the source code is missing.\r\n\r\nTo answer the question \"what about tool X that needs source?\", as mentioned in the doc the answer is \"tool X will not work with such packages, and hopefully that will help limit the use of such things.\" In particular this makes no sense in any open source context such as \"go get\" or Linux distributions, which is why for example \"go get\" will not support such arrangements. But again Go is used for more than just open source.\r\n\r\nI'm happy to say the details here are experimental in case other details arise (not that the tools are covered by the compatibility guarantee anyway) or somehow it's not restrictive enough and starts to be used inappropriately, but there is a real need here, just one felt disproportionally by people outside the open source community and not on GitHub.\r\n\r\nThe IntelliJ plugin can stay as it is, or it might make sense to use go/types reading the binaries anyway, depending on the exact needs of the plugin. But it's fine if it doesn't work with binary-only packages. The more helpful tools that don't support binary-only packages and discourage their use, the better. But they do need to work for actually building a program.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-26T14:05:17Z",
	"updated_at": "2016-04-26T14:05:17Z"
}
