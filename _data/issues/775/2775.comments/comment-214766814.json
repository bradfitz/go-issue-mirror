{
	"id": 214766814,
	"body": "Thanks for feedback.\r\n\r\nAgain, I'm not against this feature landing in the Go distribution, I can see the benefits of having it.\r\nHowever, Go, unlike C, doesn't have header files (at least until now).\r\nFrom my understanding of the phrase:\r\n\r\n\u003e Having a “fake” version of the source code also provides a way to supply documentation compatible with “go doc” and “godoc” even though the complete source code is missing.\r\n\r\nIt does seem that one will need to provide a minimal definition of the package, something like:\r\n\r\n```go\r\n// Copyright 2016 dlsniper\r\n\r\n//go:binary-only-package\r\npackage awesome\r\n\r\n// This is entirely optional\r\n\r\n// The Awesomizer interface allows you to make awesome code\r\ntype Awesomizer interface{\r\n\tCodeIt()\r\n}\r\n```\r\n\r\nAt which point I would rather prefer to enforce the stub package to contain the public definitions (and hopefully documentation for this) rather than just the package name and the special flag + other build flags. This would then mean that the documentation of the package has to be respected and it would help out users using such packages.\r\n\r\nSpeaking of flags, rather than introduce a new flag for the go tool, wouldn't it be better to introduce a new, static build tag? It can keep the name `binary-only-package` but then as a developer I could at least test out how this works in the code and still have the code for the package as well. This would also represent one less thing that Go developers have to learn and keep track of (not everyone knows the `//go:` flags (and yes, I know of `go:generate`)\r\n\r\nAgain, to address the :elephant: in the issue: what about vendoring? How would that work in this context? There are already problems with the current vendoring approach which came up a few times on the mailing list and have only resulted in workarounds / \"developers should learn more / read / understand better\" which is not very real-life unfortunately. Adding a binary only as a vendored dependency, even if internally, would not be something that people will skip, I'm positive this will happen.\r\n\r\n\u003e The more helpful tools that don't support binary-only packages and discourage their use, the better.\r\n\r\nI'm willing to wage a bet that within a couple of weeks of this feature landing people will ask for this feature to work. And like I've said, maybe for the IntelliJ plugin will do some support for it (or not, I can't speak of that right now) but if it's there, people will want to use it (as you've said, they already do it) as it would be a standard feature (which is exactly why people have editors like Atom, VSCode or IntelliJ with all sorts of plugins helping them write the code. But I don't wan to digress here on how people write code).\r\n\r\nTo sum up, imho:\r\n- public types should be present in the stub Go package (which is expected to be delivered apparently from the proposal)\r\n- vendoring needs to be addressed before merging this, not after (even if it means clear documentation of the use-cases and how to approach them)\r\n- maybe build tags could be used instead of the `//go:binary-only` \"flag\" or how we call those\r\n\r\nThank you.\r\n\r\nEDIT:\r\nI've changed the build flag to build tag, sorry for the wrong names.",
	"user": {
		"login": "dlsniper",
		"id": 607868,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-26T14:38:34Z",
	"updated_at": "2016-04-26T14:50:20Z"
}
