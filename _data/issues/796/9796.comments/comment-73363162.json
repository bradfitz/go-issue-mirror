{
	"id": 73363162,
	"body": "I think you are on to something here. Keep after it when you have a bit of\ntime. Minimum, you'll make XML better. But possibly you have found an\nindication that tip is somewhat broken w.r.t. data race reporting. Sorry I\ndon't have enough expertise to follow you down this rabbit hole...\n\nOn Sat, Feb 7, 2015 at 5:06 AM, Danny Yoo \u003cnotifications@github.com\u003e wrote:\n\n\u003e @jeffallen \u003chttps://github.com/jeffallen\u003e Hmmm... something is strange\n\u003e and I am confused and need help in tracing this, before submitting the\n\u003e patch.\n\u003e\n\u003e Let me show what I'm seeing. Here's a reduced program to demonstrate the\n\u003e issue:\n\u003e\n\u003e package main\n\u003e\n\u003e import \"encoding/xml\"\n\u003e\n\u003e type Family struct {\n\u003e     Members []Person `xml:\"members\u003emember\"`\n\u003e }\n\u003e\n\u003e type Person struct{}\n\u003e\n\u003e func ToXml() []byte {\n\u003e     p := []Person{Person{}, Person{}}\n\u003e     family := Family{Members: p}\n\u003e     xml, _ := xml.Marshal(family)\n\u003e     return xml\n\u003e }\n\u003e\n\u003e func AsyncExecute() \u003c-chan []byte {\n\u003e     ch := make(chan []byte)\n\u003e     go func() {\n\u003e         response := ToXml()\n\u003e         ch \u003c- response\n\u003e         close(ch)\n\u003e     }()\n\u003e     return ch\n\u003e }\n\u003e\n\u003e func main() {\n\u003e     const N = 2\n\u003e     chlist := make([]\u003c-chan []byte, N)\n\u003e     for i := 0; i \u003c N; i++ {\n\u003e         chlist[i] = AsyncExecute()\n\u003e     }\n\u003e     for _, ch := range chlist {\n\u003e         \u003c-ch\n\u003e     }\n\u003e }\n\u003e\n\u003e As of commit bcadab9\n\u003e \u003chttps://github.com/golang/go/commit/bcadab9349f8e4a6fb38b26c6afea6ab150c5ee8\u003e,\n\u003e which is the last time that src/runtime/slice.go has been touched according\n\u003e to git history, I can still see the data race:\n\u003e\n\u003e dannyyoo@melchior:~/work/go/src$ git branch\n\u003e * (detached from bcadab9)\n\u003e   data-race\n\u003e   datarace\n\u003e   master\n\u003e dannyyoo@melchior:~/work/go/src$ ../bin/go run -race ~/tmp/xml-data-race.go\n\u003e ==================\n\u003e WARNING: DATA RACE\n\u003e Write by goroutine 6:\n\u003e   runtime.slicecopy()\n\u003e       /usr/local/google/home/dannyyoo/work/go/src/runtime/slice.go:98 +0x0\n\u003e   encoding/xml.(*parentStack).push()\n\u003e       /usr/local/google/home/dannyyoo/work/go/src/encoding/xml/marshal.go:908 +0x2fb\n\u003e   encoding/xml.(*printer).marshalStruct()\n\u003e       /usr/local/google/home/dannyyoo/work/go/src/encoding/xml/marshal.go:826 +0x5b2\n\u003e   encoding/xml.(*printer).marshalValue()\n\u003e       /usr/local/google/home/dannyyoo/work/go/src/encoding/xml/marshal.go:531 +0x1499\n\u003e   encoding/xml.(*Encoder).Encode()\n\u003e       /usr/local/google/home/dannyyoo/work/go/src/encoding/xml/marshal.go:153 +0xb8\n\u003e   encoding/xml.Marshal()\n\u003e       /usr/local/google/home/dannyyoo/work/go/src/encoding/xml/marshal.go:72 +0xfb\n\u003e   main.ToXml()\n\u003e       /usr/local/google/home/dannyyoo/tmp/xml-data-race.go:14 +0x108\n\u003e [output omitted]\n\u003e\n\u003e However, when I get to master (ac90d9a\n\u003e \u003chttps://github.com/golang/go/commit/ac90d9ab473adcb2dc209d168c5b038583bed566\u003e),\n\u003e I'm not seeing the reporting of the data race anymore, as you note! But the\n\u003e data race is still logically there, right? Unless I'm misunderstanding\n\u003e something. Did something break in terms of error reporting the data race?\n\u003e\n\u003e Unfortunately, I ran out of time tonight to binary search exactly at what\n\u003e point things erroneously succeed. I'll try to check it out when I have time\n\u003e during the weekend.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/9796#issuecomment-73348763\u003e.\n\u003e\n",
	"user": {
		"login": "jeffallen",
		"id": 1131456,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-07T12:54:13Z",
	"updated_at": "2015-02-07T12:54:13Z"
}
