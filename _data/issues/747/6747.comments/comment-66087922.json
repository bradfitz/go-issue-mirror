{
	"id": 66087922,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003e\u0026gt; ... Was it a private email, Alex? I'd like to find out more about the bug that was\nobserved on Solaris. ...\n\nYes, I go this email from Aram (I hope he doesn't mind me publishing it here):\n\n\u0026gt;\u0026gt;\u0026gt;\n\nHello,\n\nI am porting go on Solaris[1]. The port is very similar to the Windows\nport; Solaris, like Windows, does everything through library calls. The\nmechanism is the same as for Windows. We #pragma dynimport functions\nfrom libc.so and we have a asmsysvicall function, analogous to asmstdcall\nthat is called by asmcgocall.\n\nG0 stack is big, like on Windows, and the stack guard is set\ncorrespondingly.\n\nThe problem is that the preemption mechanism resets the stackguard to\ndo its thing, and then the runtime eventually panics with \"runtime:\nstack split during syscall\".\n\nI am trying to understand why Windows doesn't have this issue, but I\nhaven't found the code that disable preemption, or whatever mechanism\npermits this not to happen.\n\nFor now I just hack it with\n\n- if(oldstatus == Gsyscall \u0026\u0026 m-\u0026gt;locks == 0)\n+ // BUG(aram): at least check if it's on g0.\n+ if(oldstatus == Gsyscall \u0026\u0026 m-\u0026gt;locks == 0 \u0026\u0026 !Sunos)\n      runtime·throw(\"runtime: stack split during syscall\");\n\nin stack.c, but that's terrible. It works great through, the stack is 2MB.\n\nPerhaps you have some idea of what might be wrong or perhaps you can\nexplain me what I don't understand about the Windows runtime\n\nThanks,\n\n[1] \u003ca href=\"https://bitbucket.org/4ad/go-sunos\"\u003ehttps://bitbucket.org/4ad/go-sunos\u003c/a\u003e\n\n\u0026lt;\u0026lt;\u0026lt;\n\nand also\n\n\u0026gt;\u0026gt;\u0026gt;\n\nThank you for the reply, I think I solved the issue. I believe Windows\nis susceptible too, but it got lucky not hitting it.\n\nThe problem is that runtime·notetsleepg in lock_sema.c calls\nruntime·semacreate in syscall context, so runtime·semacreate must\nnot split the stack. On Windows, runtime·semacreate is not marked as\nNOSPLIT. Perhaps it didn't have an issue because it was a trivial function\nand it got inlined? On Solaris, the function was also not inlined, but\nit was not trivial, it called another function that wasn't marked NOSPLIT.\n\nMaking runtime·semacreate and beneath NOSPLIT seems to have solved the\nissue on Solaris.\n\nThanks,\n\n\u0026lt;\u0026lt;\u0026lt;\n\n\u0026gt; ... So I think everything is marked NOSPLIT appropriately.\n\nThank you for detailed explanation.\n\n\u0026gt; ... The original mail claimed that semasleep is not marked NOSPLIT, ...\n\nHe was talking about \"runtime·semacreate\", not \"semasleep\".\n\n\u0026gt; ... Marking \"Invalid\" because as far as I can tell. notetsleep and all called by it\n_are_ marked NOSPLIT.\n\nI will trust you. :-)\n\nAlex\u003c/pre\u003e",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-11-13T05:43:25Z",
	"updated_at": "2014-12-22T06:30:00Z"
}
