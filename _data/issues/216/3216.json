{
	"id": 51280271,
	"number": 3216,
	"state": "closed",
	"title": "crypto/tls: package says it implements TLS 1.1, but actually implements SSL 3.0 and TLS 1.0, but not 1.1",
	"body": "by **ppelleti@speakeasy.net**:\n\n\u003cpre\u003eThe documentation for the TLS package:\n\n\u003ca href=\"http://golang.org/pkg/crypto/tls/\"\u003ehttp://golang.org/pkg/crypto/tls/\u003c/a\u003e\n\nand the comment at the top of tls.go:\n\n\u003ca href=\"https://github.com/tav/go/blob/master/src/pkg/crypto/tls/tls.go\"\u003ehttps://github.com/tav/go/blob/master/src/pkg/crypto/tls/tls.go\u003c/a\u003e\n\nboth say:\n\n\u0026quot;Package tls partially implements the TLS 1.1 protocol, as specified in RFC\n4346.\u0026quot;\n\nHowever, from looking at the code, it appears it implements SSL 3.0 and TLS 1.0 for\nservers, and only implements TLS 1.0 for clients.  It does not appear to implement TLS\n1.1.\n\nSpecifically, in common.go, it says:\n\n\tminVersion = versionSSL30\n\tmaxVersion = versionTLS10\n\nIt appears that this min and max are used by the server, via the mutualVersion function.\n The client has the additional constraint that the version be at least TLS 1.0, and\nsince the max is also TLS 1.0, the client only supports TLS 1.0.\n\nIt would be nice if TLS 1.1 (and even 1.2) was supported, but until then, the\ndocumentation should accurately reflect the versions currently supported.  Also, it\nwould be nice to expand upon what is meant by \u0026quot;partially implements\u0026quot;.  Are\nthere known ways in which the implementation does not conform to the SSL 3.0 and TLS 1.0\nspecifications?  Are there known interoperability problems with other TLS\nimplementations?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:16:45Z",
	"created_at": "2012-03-06T04:35:10Z",
	"updated_at": "2016-06-24T21:29:52Z",
	"milestone": {
		"id": 1061233,
		"number": 7,
		"title": "Go1"
	}
}
