{
	"id": 137331708,
	"body": "@kostya-sh \r\n\r\n\u003e I'd like to question how important SemVer is in this proposal.\r\n\r\nHow important to this proposal is SemVer ? Not critical at all.\r\n\r\nHow important to this proposal is a single format that lets tools infer the degree of compatibility between two released versions ? Critical.\r\n\r\nSo, why SemVer ? Because it is a well known and well understood (possibly even respected, or at least notorious) standard that gives us the single format that can be inspected by tools. We've already seen a suggestion by @crawshaw to combine the Go api checker with two released versions of software to verify their compatibility claims. This is the goal of this proposal, to be able to write tools like these.\r\n\r\nYou've given several great examples of where SemVer has been misused, breaking the promise. I agree with all of those, but that does not change my position. This is for two reasons.\r\n\r\n1. As I've said several times, this proposal is targeted at people that want to do the _right_ thing and gain the rewards from that, not aim to create a straight jacket process that tries (and ultimately fails) to prevent people doing the wrong thing. That's called the Apple App store.\r\n\r\n2. If instead of SemVer, the Go team sat down and came up with their own specification, it would have _all_ of the weaknesses of point 1; it's only enforcable if people aim to use it correctly, and it would have another downside; it would be unique only to Go developers, and would be continually questioned, wasting time and effort for zero upside.\r\n\r\nYou've questioned the use of the SemVer recommendation several times, can I ask you, what replacement do you want to see ?",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-03T04:52:57Z",
	"updated_at": "2015-09-03T04:52:57Z"
}
