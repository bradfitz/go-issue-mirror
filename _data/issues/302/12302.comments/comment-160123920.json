{
	"id": 160123920,
	"body": "On Thu, Nov 26, 2015 at 7:51 PM, Axel Wagner \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e I am sorry to only have skimmed the discussion (it's very long), but I\n\u003e think this point wasn't made before:\n\u003e I would request that a proposal like this, that proposes semantic versions\n\u003e also gives a good definition of what the individual levels of compatibility\n\u003e as specified in the SemVer spec actually mean for go (as there seem to be\n\u003e either no, or very inconsistent notions of this in the community). In\n\u003e particular, as I've argued before, I don't think the language allows minor\n\u003e minor, only patch releases and major releases./You can read my argument\n\u003e here\n\u003e \u003chttp://blog.merovius.de/2015/07/29/backwards-compatibility-in-go.html\u003e\n\u003e but it mainly comes down to the fact that due to dot-imports, type\n\u003e embedding and strict typing, *every* API change *potentially* breaks the\n\u003e build of some reverse dependency.\n\u003e\ncompatibility for Go is specified here:\nhttps://golang.org/doc/go1compat\nso the same definition of compatibility can be used for external packages.\n\n\u003e I might be able to agree that this is unnecessarily nit-picky, but I do\n\u003e firmly believe, that if the community agrees on a semantic versioning\n\u003e scheme, they also need to agree on the semantics of that scheme (i.e. if\n\u003e you arbitrarily allow *some* breakages in minor version, we should at\n\u003e least agree *which*) and that agreement shouldn't be just hand-wavy (so\n\u003e far, the strictest definition I could get out of people was \"minor changes,\n\u003e like adding a field\").\n\u003e\n\u003e Also, I'm a bit unhappy that this proposal conflates \"releases\" and\n\u003e \"versions\", which I would consider two different things.\n\u003e\n\nI agree that releases and versions are different.\nVersions can be considered tagged releases.\n\n\u003e I agree with lots of the cited benefits of releases but I am not at all a\n\u003e fan of SemVer. I would prefer a release process like \"master is always the\n\u003e current stable release, development happens on a separate branch that is\n\u003e periodically merged into master when it's considered stable\", which would\n\u003e make all the current tools pretty happy (but wouldn't provide nor be as\n\u003e restrictive as requiring SemVer).\n\u003e\n\nNote that, should versions support be added to standard Go tools, you will\nnever be forced to use them.\nThe current behavior of go get will be the same: if no version is specified\nit will get the latest *revision* (not the latest *version*).\nI expect that any external tool will offer you the option to get the latest\n*revision* and not the latest *version*.\n\nAlso note that SemVer has nothing to do with this problem.\nA release process like \"master is always the current stable release,\" is\nsimply a release process where no *version* is actual assigned to a\nrevision.\n",
	"user": {
		"login": "perillo",
		"id": 6217088,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-27T11:59:58Z",
	"updated_at": "2015-11-27T11:59:58Z"
}
