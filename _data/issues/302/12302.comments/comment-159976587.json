{
	"id": 159976587,
	"body": "I am sorry to only have skimmed the discussion (it's very long), but I think this point wasn't made before:\r\nI would request that a proposal like this, that proposes semantic versions also gives a good definition of what the individual levels of compatibility as specified in the SemVer spec actually mean for go (as there   seem to be either no, or very inconsistent notions of this in the community). In particular, as I've argued before, I don't think the language allows minor minor, only patch releases and major releases. You can read my [argument here](http://blog.merovius.de/2015/07/29/backwards-compatibility-in-go.html) but it mainly comes down to the fact that due to dot-imports, type embedding and strict typing, *every* API change *potentially* breaks the build of some reverse dependency.\r\n\r\nI might be able to agree that this is unnecessarily nit-picky, but I do firmly believe, that if the community agrees on a semantic versioning scheme, they also need to agree on the semantics of that scheme (i.e. if you arbitrarily allow *some* breakages in minor version, we should at least agree *which*) and that agreement shouldn't be just hand-wavy (so far, the strictest definition I could get out of people was \"minor changes, like adding a field\").\r\n\r\nAlso, I'm a bit unhappy that this proposal conflates \"releases\" and \"versions\", which I would consider two different things. I agree with lots of the cited benefits of releases but I am not at all a fan of SemVer. I would prefer a release process like \"master is always the current stable release, development happens on a separate branch that is periodically merged into master when it's considered stable\", which would make all the current tools pretty happy (but wouldn't provide nor be as restrictive as requiring SemVer).",
	"user": {
		"login": "Merovius",
		"id": 720787,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-26T18:50:29Z",
	"updated_at": "2015-11-26T18:50:29Z"
}
