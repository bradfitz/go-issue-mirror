{
	"id": 150965816,
	"body": "@rsc Let me try to fill in a few details.\r\n\r\nThe current state is that people specify the version to use as a commit id rather than using version numbers. For example, I included two packages in an application recently. They both depended on docker and the version was specified as a commit id. The commit ids were not the same. This is the most common practice in the community at the moment and it's problematic.\r\n\r\nThe part on \"However, in the past, members of the Go team have advocated that when a libraries' API changes in an incompatible way...\" is a change. For example, Docker version 2 would need to have an import path different from github.com/docker/docker. It would need something like github.com/docker/docker2 when the API changed. Using semantic versioning that no longer needs to be the case. The import path can remain the same. This is how package management works in every other language and tool set.\r\n\r\nInitially I don't believe there is an ask for the go tool to make changes. It doesn't need to handle imports any differently or attempt to resolve the semantic versions. Package managers such a Glide, gb-vendor, and others could implement the version management in a similar way to tools like [npm](http://npmjs.org).\r\n\r\nYou're right that designing tools to handle versioning and imports is difficult. We've been working on that with Glide and learning a lot as it applies to Go. We've been studying how others have done it and why. Nailing that is hard. I would hope you let the community figure this out... or at least some best practices before the go tool itself tries to do more itself.\r\n\r\nDoes that help?",
	"user": {
		"login": "mattfarina",
		"id": 62991,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-25T20:24:35Z",
	"updated_at": "2015-10-25T20:24:35Z"
}
