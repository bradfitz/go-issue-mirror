{
	"id": 137654389,
	"body": "@mattfarina, apologies if I am stating the obvious but hopefully you will find my answer useful.\r\n\r\nI am not arguing against SemVer in general. Most of the projects (especially open source) would benefit from using SemVer properly. However I am strongly against enforcing SemVer as the only right version schema used by all go projects and banning all other schemes and discouraging tool authors from supporting them.\r\n\r\nYour example is valid however:\r\n- to use `\u003e1.4 \u003c2.0` (btw, does 2.0-alpha comes before 2.0 and is included in this range?) dependency in addition to SemVer rules you should also trust developers of the dependency to follow SemVer properly (which is very often not the case)\r\n- SemVer is not the only version schema that allows you to do that. In particular in absence of breaking changes `go get` achieves the same without using any versions. The following schemes are not SemVer compatible but can be used as well: `X.Y`, `X.Y.Z.W`\r\n- It is ok to use version ranges during the development however for a released project I would prefer to see a fixed version. A statement that \"I developed and tested a package X using version A of package Y\" is more useful than \"a package X should work with (possibly not yet released) versions A..B of package Y but I will not tell you what version I used during development and testing\".\r\n- I still believe that breaking changes of stable packages should be avoided and resolved by introducing a new import path. Given that `go get` unlikely  will support versions having two incompatible packages with the same import path is highly confusing. \r\n- Of course there will be packages that will introduce incompatible API changes all the time. I think it is meaningless to rely on any semantic versions of such packages. If I know that the package that I have to use is unstable I will vendor it.\r\n- A tool that resolves a dependency by using the latest version matching a regexp is much more flexible and can support both SemVer and other version schemes. In particular discussions around 'v' vs 'no v' or package vs project tagging become less important if I can reference versions (tags) such as  `webdav-1\\..+`.",
	"user": {
		"login": "kostya-sh",
		"id": 7126275,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-04T05:50:36Z",
	"updated_at": "2015-09-04T05:50:36Z"
}
