{
	"id": 137300805,
	"body": "@adg @crawshaw \r\n\r\n\u003e I think this proposal is the right direction, but I don't see it backed by enough data.\r\n\r\nThat's a fair call. Perhaps by focusing on the release process and tag format, rather than showing a proof of concept, I chose to start eating the elephant at the wrong end ? It's hard to tell even in hindsight, I think we'd still be arguing about tag formats and be bikeshedding about implementation.\r\n\r\n\u003e This would be an informative experiment: set up a bunch of projects with version tags (they can be clones of existing projects) and use tools to manage the relationships between those projects using their version tags. One could ask the community for examples of particularly frustrating dependency versioning situations and reproduce them in a controlled environment. If we can really put this idea to the test in the context of Go then we can much better see whether it works for us.\r\n\r\nLuckily we already have Docker, CoreOS and k8s, so if these proof of concept tools cannot be made to work with those repositories as is, then it's back to the drawing board. I'm sure I can twist a few other peoples arms to tag some of their repositories as guinea pigs.\r\n\r\n\u003e I am loathe to make a standard of something that has not been implemented. (And the use of semver tags by other popular package management tools does not count; Go \"projects\" are different.) I appreciate the narrow scope of the proposal, but small doesn't necessarily mean correct. Every one of us has thought we had a great design up front, only to find upon implementation that the devil is in the details.\r\n\r\nMy next steps are clear.\r\n\r\n- Update the proposal draft with the feedback collected above, I'll get that done quickly for everyone to review.\r\n- gb does support vendoring from a tag, but it doesn't support upgrading from one tag to another. This is partly because of a mistake I made defining version 0 of the manifest format, and partly because without a defined format for tags, they were opaque. The obvious course of action is for me to implement this logic in gb and give it a sniff test.\r\n- I'm also going to try to hack in version support to godoc.org, and I'll host a version of that online so others can play with it.\r\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-03T02:00:41Z",
	"updated_at": "2015-09-03T02:00:41Z"
}
