{
	"id": 152318960,
	"body": "@davecheney Thanks for putting the proxy proposal together. I've recently been working with caching and reusing dependencies across multiple VCS. It even lead me to write a [VCS package](https://github.com/Masterminds/vcs). Given my experience, I like the idea of hitting a URL and getting a versioned tgz file.\r\n\r\nCan I suggest that in addition to that there's a place you can go and get a list of the versions. For integration testing it's useful to specify a version constraint (e.g., `\u003e= 1.2.3, \u003c 2`) and test against the latest releases. Being able to pull the release versions to find the latest release to meet the constraint and testing that is useful.\r\n\r\nI think a dependencies file can complement an API endpoint. You see this with the other language package systems.\r\n\r\nI like the idea of a dependencies file that's human readable, machine readable, and with tooling to help you manage it. If I were to specify a specific version in the package path (e.g., `github.com/foo/bar.v1.2.3` as an import) it limits my ability to do automatic integration testing with different versions of that package. Or, I need to do source rewriting to test with varying API compliant versions.\r\n\r\nThe package managers for other languages allow you to easily work with ranges based on the semantics of semantic versioning. They've even created range shortcuts because they are so common. For example, `~1.2.3` is equivalent to `\u003e= 1.2.3, \u003c 1.3.0` for patch level changes and `^1.2.3` is equivalent to `\u003e= 1.2.3, \u003c 2.0.0` for API breaking changes.\r\n\r\nI've recently added semantic version support to [Glide](https://github.com/Masterminds/glide) (though not in the released version) to support this. We'll see how that goes. The semantic version handling has been broken out into a [separate library](https://github.com/Masterminds/semver) that others can use. It follows the constraint (range) patterns from package managers for other languages.\r\n\r\nI hope the SemVer experiment in Glide goes well. I'll share details as it progresses.",
	"user": {
		"login": "mattfarina",
		"id": 62991,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-29T20:52:31Z",
	"updated_at": "2015-10-29T20:52:31Z"
}
