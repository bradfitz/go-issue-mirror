{
	"id": 150756480,
	"body": "I read the latest (September 15) version of golang.org/design/12302-release-proposal.\nI did not read this entire issue thread (sorry). \n\nI don't understand what is being proposed.\n\n- I understand what semantic versioning means. \n- I understand what it means to use semantic versioning to make git tags.\n- I think that's a great idea.\n\nWhat I don't understand is what this has to do with Go projects and libraries. There's clearly a \"and then we can do X\" in your head that is not spelled out in the document. What is X? Without knowing X, there's not a complete story (or even a sketch of one) about the impact on the Go toolchain and ecosystem here. And without at least seeing what the implications are, I can't say whether I agree.\n\nI did not understand this part of the doc:\n\n\u003e However, in the past, members of the Go team have advocated that when a libraries' API changes in an incompatible way, the import path of the library should be changed, usually including a version number as a component of the import path. This proposal deprecates this recommendation.\n\nI don't understand why the previous recommendation is being deprecated. Again, it's not clear what it is being replaced with.\n\n\u003e Authors of Go libraries should follow these two maxims:\n\u003e\n\u003e Packages which are the same, must share the same import path. This proposal provides the mechanism for consumers to identify a specific release version without the requirement to encode that information in the import path.\n\nThe consumer is code, yes? Code compiled by the go command, yes? Code using an import path to identify the desired package, yes?\n\nYou seem to be assuming some kind of extension to the go command and/or source code for specifying constraints on what version of a package is acceptable when satisfying an import. But that seems to be completely missing from the proposal. Historically that kind of system has been very difficult to design. (Hence the import path recommendation.) The proposal really needs to fill in some details about how programmers are going to specify what version of the code they want the go command to fetch.\n\nThere's just something very incomplete about all this. I don't see where this is going.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-24T05:13:42Z",
	"updated_at": "2015-10-24T05:13:42Z"
}
