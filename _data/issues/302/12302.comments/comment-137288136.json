{
	"id": 137288136,
	"body": "@ChrisHines I clearly did not read SemVer closely enough. I did not realize such strong semantics were coming with this versioning proposal.\r\n\r\nThat suggests an interesting tool: in Go repository there is an API compatibility checker based on go/types that lists what new symbols are exported in each release, and if any CL introduces a change that breaks the currently exported API. (For example, deleting a function, adding a parameter to a function, renaming a method.) A version-aware godoc.org could report to users all the symbols added in MINOR releases, all the types have broken between MAJOR releases (it cannot capture breaking semantic changes obviously), and provide a loud warning whenever a package owner violates these semantics: either by breaking API and failing to bump the MAJOR version, or by adding a feature to a PATCH version.\r\n\r\nI'd be curious to see how many versions pass such an API checker. As several major projects are already using tags that look like this version scheme, there's plenty of data. A fun experiment for those interested in versioning.",
	"user": {
		"login": "crawshaw",
		"id": 161319,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-03T01:00:01Z",
	"updated_at": "2015-09-03T01:00:01Z"
}
