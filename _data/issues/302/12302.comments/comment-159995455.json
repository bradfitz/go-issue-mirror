{
	"id": 159995455,
	"body": "@Merovius thanks for your comments.\r\n\r\nre: semvar, I can see you hold strong objections on number of levels. I'm sure I mentioned above that the choice of semver is convenience. To choose some other methodology would:\r\n\r\na. not change this proposal in spirit.\r\nb. just be another thing that go does different, \"Will go 2.0 finally adopt semver?\" threads from here to eternity.\r\nc. Probably end up being 90% the same as semver.\r\n\r\nYour major objection to the semver standard is a lack of clarity over how version numbers are chosen. I've read your post on backwards compatibility and I agree totally. Noting that this proposal does no give any guidance for how authors choose version numbers, Go has the tools to let people write tools that could analyse the difference between two trees and give guidance for what the next version number should be based on the changes to the public symbols. Would that satisfy your concerns ?\r\n\r\nre: releases vs versions. This is a proposal for releasing go packages, you apply version numbers to them to release them. The target of this is machine consumption. You mention you don't like \"conflating\" releases and versions, do you have an alternative suggestion ?",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-26T21:22:51Z",
	"updated_at": "2015-11-26T21:22:51Z"
}
