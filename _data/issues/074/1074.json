{
	"id": 51277308,
	"number": 1074,
	"state": "closed",
	"title": "Recursive interfaces are broken",
	"body": "by **ashtonfedler**:\n\n\u003cpre\u003eRecursive duct typing does not work for any compiler I try. Here is a very simple\nexample:\n\nI wish to make an interface that accepts any type that can return a string and another\nof its own type.... so:\n\ntype foo interface {\n\tString() string  // Can return a string\n\tNext() foo         // Can return something of its own type\n                                   // Clearly important for lists, trees, ...\n}\n\ntype bar struct {\n\tmessage string\n\tnext *bar\n}\n\n// *bar.String() string :: foo.String() string\nfunc (this *bar) String() string { return this.message}\n\n// *bar.Next() *bar :: foo.Next() foo\nfunc (this *bar) Next() *bar { return this.next }\n\n\nExample code failure:\nvar test foo = \u0026amp;bar{\u0026quot;Hello World\u0026quot;, nil}\nfmt.Println(test.String())\n\nWhat is the expected output?\nHello World\n\nWhat do you see instead?\n*bar does not implement foo (wrong type for Next method)\n\t\thave Next() *bar\n\t\twant Next() foo\n\nWhat is your $GOOS?  $GOARCH?\ndarwin amd64\n\nWhich revision are you using?  (hg identify)\n07d3a97302be release.2010-08-11/release\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"closed_at": "2014-12-08T10:06:53Z",
	"created_at": "2010-09-03T05:32:27Z",
	"updated_at": "2016-06-24T19:19:45Z"
}
