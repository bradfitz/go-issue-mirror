{
	"id": 66048894,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2 by **gfranxman**:\n\n\u003cpre\u003eConfirmed.    This functions as expected:\n--- Example ---\npackage main\n\nimport \"fmt\"\nimport \"os\"\nimport \"time\"\nimport \"syscall\"\n\n\nfunc main() {\n    var wstatus syscall.WaitStatus;\n\n    fmt.Printf(\"First 5 sec Sleep\\n\" ) ;\n    time.Sleep(1000* 1000*1000 * 5) ;\n\n    // wait must be called on the forked proc, otherwise the SIGCHILD interferes with\nthe subsequent call to time.Sleep\n    pid, forkerr := os.ForkExec(\"/bin/date\", []string{\"date\"}, os.Environ(), \"\",\n[]*os.File{os.Stdin, os.Stdout, os.Stderr});\n    _, waiterr := syscall.Wait4(pid, \u0026wstatus, 0, nil);\n    fmt.Printf( \"pid, forkerr, waiterr:%d, %d, %d\\n\" , pid, forkerr, waiterr ) ;\n\n    fmt.Printf(\"Second 5 sec Sleep\\n\" ) ;\n    time.Sleep(1000* 1000*1000 * 5) ;\n\n    fmt.Printf(\"Done\\n\" ) ;\n}\n--- /Example ---\n  \n\nProbably should be using the exec.Cmd struct for this type of functionality.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-11-20T20:24:40Z",
	"updated_at": "2014-12-08T10:03:54Z"
}
