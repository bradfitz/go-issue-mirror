{
	"id": 163688831,
	"body": "I suggested accepting any two-digit day, but I think that was a mistake. I have now seen it break real code that expected time.Parse to reject, for example, January 99. The analogy with time.Date may not hold up because in time.Date, the separate arguments effectively precludes the possibility of malformed input, while malformed input is a fundamental part of time.Parse.\n\nI now believe we should do as the original report suggested, namely keep rejecting January 32 and January 99, as Go 1.5 did, and also reject February 30, April 31, June 31, September 31, November 31, and February 29 in non-leap years.\n\nIt should suffice, at the end of the parse, to check that `day \u003c= daysIn(month, year)`.\nIf the year has not been parsed but the month is february, year 0 is a leap year, so standalone \"Feb 29\" is accepted.\nIf the month and year have not been parsed but a day has been parsed, that's January year 0, so standalone \"31\" would be accepted.\nSo the check does not restrict any plausibly valid partial parse.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-10T17:05:26Z",
	"updated_at": "2015-12-10T17:05:26Z"
}
