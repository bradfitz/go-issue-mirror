{
	"id": 66082268,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003ebinary.Read is general purpose: it can take an arbitrary io.Reader, and write to\npointers to many flavors of ints, or even structs containing ints, or slices of such\nstructs. Because of these features, escape analysis is not good enough to recognize that\nthe *uint16 that you pass can point to something on the stack instead of the heap, so\nevery uint16 that you read this way will require at least one allocation per pixel,\nwhich is obviously garbage that needs collecting.\n\u003ca href=\"http://golang.org/src/pkg/encoding/binary/binary.go?s=3732:3795#L121\"\u003ehttp://golang.org/src/pkg/encoding/binary/binary.go?s=3732:3795#L121\u003c/a\u003e\n\nIf you're only reading two little-endian bytes into a uint16, it's going to be far more\nefficient to write the direct code than using binary.Read.\u003c/pre\u003e",
	"user": {
		"login": "nigeltao",
		"id": 8565232,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-07-12T03:58:57Z",
	"updated_at": "2014-12-08T10:32:16Z"
}
