{
	"id": 66088748,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003eFor whoever looks at this next:\n\n\nI believe that this has to do with the sigfig and mpnorm handling of negative fractions\nin mparith3.c. My current understand (take with a grain of salt):\n\n(1. / 3) divides out to\n0x2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABp-435.\n\nMultiplication works directly on the two's complement representation of the fraction.\n\nTo calculate (1. / 3) * 6, we multiply fractions:\n0x2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB\n* 3. This works out to\n0x8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,\nor binary\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001.\nThe last word is not considered significant (see \u003ca href=\"https://golang.org/issue/7740\"\u003eissue #7740\u003c/a\u003e and the comment by Mpnorm in\ngo.h), so the trailing 1 is ignored, and this can be normalized. As a result, (1. / 3) *\n6 = 0x1p+1, as desired.\n\nTo calculate (1. / 3) * -6, we multiply fractions:\n0x2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB\n* -3. The multiplication works directly on the twos complement, so this works out to\nbinary\n0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111.\nNeither sigfig nor mpnorm takes sign into account, so this is treated as\nnon-normalizable, even after discarding the least significant word--it's all 1s, not all\n0s. As a result, (1. / 3) * -6 =\n-0x4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001p-433\ninstead of -0x1p+1.\n\nI'm not sure where the right place to fix this is. Maybe the right fix is to wait for\nthe compiler to move to Go and switch to using (modified) math/big.\u003c/pre\u003e",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-15T20:00:32Z",
	"updated_at": "2014-12-08T10:38:13Z"
}
