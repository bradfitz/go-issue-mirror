{
	"id": 74292977,
	"body": "my bad, the effect of the workaround is simply to stopping the collection\nof holder completely :/\n\nanyway the is no further use of ccu.cref in the code through ccu itself,\ncref comes out of the C side  and is never passed back to be used here,\nexcept the value closed over to be for the unref but that doesn't go\nthrough ccu or any other go object afaict,\n\n\nOn Fri, Feb 13, 2015 at 6:04 PM, Dmitry Vyukov \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e The way finalizers work for C resource finalization is very subtle.\n\u003e\n\u003e If you have code like:\n\u003e\n\u003e holder.cref = C.create()\n\u003e runtime.SetFinalizer(\u0026holder, func(h *Holder) {\n\u003e C.destroy(h.cref)\n\u003e })\n\u003e ...\n\u003e C.use(holder.cref)\n\u003e\n\u003e By the time C.use starts executing, holder becomes dead and so can be\n\u003e finalized while C.use executes.\n\u003e\n\u003e Looking at your patch, it seems that you can be affected by this subtlity.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/9866#issuecomment-74287552\u003e.\n\u003e\n",
	"user": {
		"login": "pedronis",
		"id": 975757,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-13T17:35:52Z",
	"updated_at": "2015-02-13T17:35:52Z"
}
