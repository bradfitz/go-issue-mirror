{
	"id": 66084562,
	"body": "\u003ca id=\"c10\"\u003e\u003c/a\u003eComment 10:\n\n\u003cpre\u003eCopying from \u003ca href=\"https://golang.org/cl/13038043/\"\u003ehttps://golang.org/cl/13038043/\u003c/a\u003e for the record:\n\nIt is the Happens-Before (HB) relation that is the foundation for reasoning\nabout ordering of events in different goroutines. If you have 2 unordered by HB\nmemory accesses, you have a data race. If you have 2 unordered by HB fmt.Printf\ncalls, then you have non-deterministic output. If you want deterministic \"Hello,\nworld!\" output, then you need to ensure that fmt.Printf(\"Hello, \")\nhappens-before fmt.Printf(\"world!\").\n\nThere is really not much difference between \"memory actions\" and \"non memory\nactions\" here. Modern compilers tend to treat them equally, and in fact clang\ncan reorder memory accesses with malloc/free calls, something that used to be\n\"opaque external calls\". So this may actually be a concern with gccgo.\nHardware definitely does not care much about external calls, etc when it\nreorders memory accesses.\nFor example, if you need to ensure mutual exclusion for some C routine, and you\ndo it with such \"inverted chan semaphore\", and we do not put proper memory\nbarriers into chan implementation (because it is not specified in Memory Model),\nyou do can corrupt C routine state.\nThe point here is that you must not think about this in terms of\nmemory/non-memory actions. You need to think in terms of ordering of actions.\n\nIf there is something in the language specification (e.g. capacity of channels)\nthat you think affects reasoning about ordering of events in different\ngoroutines, this must be explicitly duplicated in definition of HB relation.\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-23T21:10:25Z",
	"updated_at": "2014-12-08T10:34:20Z"
}
