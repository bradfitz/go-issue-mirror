{
	"id": 66084557,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eWhile the channel receive must appear to happen after the processing in the local\ngoroutine, there is no guarantee that other goroutines will observe the same ordering.\n\nSay we have two goroutines, A and B. If event A1 happens before B2, and B2 lexically\nprecedes B3 in B, then A1 happens before B3. However, if B1 lexically precedes B2 in B,\nthen A1 and B1 happen concurrently. Since B1 isn't strictly before or after any event in\ngoroutine A, goroutine A is allowed to observe any ordering for it (other than that it\nmust happen after the creation of B and before the destruction of B), since the lexical\nordering of B1 only applies within B.\n\nThis means that each worker goroutine could see its own receive happening after its own\nprocessing, but observe the opposite for every other worker goroutine. Thus, an\narbitrary number of goroutines can execute concurrently, and each worker goroutine is\nonly guaranteed to see the channel having a length of at least 1. The main goroutine can\nsee each worker goroutine immediately receive before processing and thus keep spitting\nout new worker goroutines. Not to mention that each goroutine can also see any ordering\nbetween a channel send and the corresponding goroutine creation, since there is no\nguaranteed ordering between those either, from their perspective.\u003c/pre\u003e",
	"user": {
		"login": "stevenblenkinsop",
		"id": 3118803,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-25T21:33:14Z",
	"updated_at": "2014-12-08T10:34:20Z"
}
