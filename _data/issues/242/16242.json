{
	"id": 163427307,
	"number": 16242,
	"state": "closed",
	"title": "encoding/json: existing entries in map are ignored when unmarshaling",
	"body": "1. What version of Go are you using (`go version`)?\r\n1.6.2\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nLinux 4.6 // amd64\r\n\r\n3. What did you do?\r\nhttps://play.golang.org/p/5EmXhFLhOj\r\n\r\n4. What did you expect to see?\r\nAccording to the docs: \"Unmarshal reuses the existing map, keeping existing entries\". This sounds like it should attempt to unmarshal into existing values, if there are any.\r\n\r\n5. What did you see instead?\r\nNew values were created and replaced existing ones in the map. \r\n\r\n The documentation is clear that specific types are stored when unmarshaling into an interface value (eg. \"map[string]interface{}, for JSON objects\"), but this only happened when unmarshaling into a map. With an equivalent struct, existing interface values were preserved and used.\r\n\r\n Concretely, in the output from the example, the map is being transformed from `map[a: *Val{I: 1}, ...]` to `map[a: map[i: 2], ...]`, whereas the struct goes from `{A: *Val{I: 1}}` to `{A: *Val{I: 2}}`.",
	"user": {
		"login": "thatguystone",
		"id": 921573,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		},
		{
			"name": "NeedsFix"
		}
	],
	"comments": 3,
	"closed_at": "2016-10-20T18:53:27Z",
	"created_at": "2016-07-01T16:09:23Z",
	"updated_at": "2016-10-20T18:53:27Z",
	"milestone": {
		"id": 1748849,
		"number": 42,
		"title": "Go1.8Maybe"
	}
}
