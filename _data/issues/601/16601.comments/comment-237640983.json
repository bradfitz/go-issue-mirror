{
	"id": 237640983,
	"body": "We have the following options (as I see it):\r\n\r\n1. for a small hard-coded list of bad binary names\r\n  1. `go` prints a huge warning\r\n  1. `go` refuses to install/get\r\n1. document it clearly that `$GOPATH/bin` should be the last in the `$PATH` (after `/bin:/usr/bin` and such) \r\n1.  if $GOPATH/bin is before `/bin:/usr/bin`\r\n   1. `go` prints a huge warning\r\n   1. `go` refuses to install/get\r\n\r\nPersonally, I am in favor of doing 1.i, 2., and 3.i.\r\n\r\n------\r\n\r\nI was not tricked.\r\nOne night I was fooling around and wrote a quick and dirty something and named it `go` (without thinking), did `go install` and forgot about it.\r\n\r\nIt went unnoticed for months because my `$GOPATH/bin` is last in chain.\r\nI saw  weird behavior once when I was trying to build something (forgot what) using make, which (as I understand now) added `$GOPATH/bin` in the beginning of `$PATH`. I ruled it out as a buggy Makefile and ignored it.\r\n\r\nI've been playing with cockroachdb recently, and the problem re-appeared.\r\n\r\nSee https://github.com/cockroachdb/cockroach/issues/8325 for exact steps to reproduce (though I think it is clear what's going on).\r\n\r\nThe problematic scenario (as I see it):\r\n\r\n1. I do `go install` for a package that I am using often, but it got hacked. \r\n  * it install malicious `go` in my $`GOPATH/bin`\r\n2. I notice suspicious diff and delete the bad code, not thinking about the implications of bad binary naming.\r\n3. I run `make` in a different, trustworthy project with a buggy `Makefile`, that puts `$GOPATH/bin` before everything else.\r\n4. My universe is collapsing.\r\n",
	"user": {
		"login": "sasha-s",
		"id": 8562967,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-08-04T18:27:46Z",
	"updated_at": "2016-08-04T18:35:43Z"
}
