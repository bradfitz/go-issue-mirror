{
	"id": 66098127,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eMaking this a language error is a very slippery slope.\n\nWe do have precedent for disallowing expressions that are guaranteed to fail (panic) at\nrun-time, such as divisions by (constant) 0, negative constant indices in index/slice\nexpressions, etc.\n\nWe don't have precedent for disallowing expressions that simply always produce the same\nresult (false in this case). For instance, should x*0 be disallowed? Probably not. And\neven if we just consider this special case mentioned here, I can easily imagine\nperfectly sensible code of the form\n\nvar shiftCount uint = ...\nif shiftCount \u0026lt; WordSizeInBits - 32 { ...\n\nwhere WordSizeInBits is a platform-specific constant. On a 32bit platform, the rhs would\nevaluate to the constant 0. Should it still compile? I'd think so.\n\nWhat about the transformation?\n\nif shiftCount + 32 \u0026lt; WordSizeInBits { ...\n\netc.\n\nMaybe the restriction should just be applied to expressions of this exact form: x \u0026lt; 0\nwhere the rhs must be the literal 0. But then it should also (probably) apply to x \u0026gt;=\n0 (again, for x uint). It's unclear where to stop.\n\nMost importantly, there's a clear principle missing that would guide decision making\nacross the language.\n\nI agree with Minux that a vet check might be in order instead (there's plenty of space\nto explore with that alone...).\u003c/pre\u003e\n\n_Labels changed: added **release-none**, **repo-main**, **languagechange**._\n\n\n_Status changed to **Thinking**._",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-10T20:06:26Z",
	"updated_at": "2014-12-22T06:37:00Z"
}
