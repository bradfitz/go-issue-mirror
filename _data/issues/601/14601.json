{
	"id": 137961163,
	"number": 14601,
	"state": "closed",
	"title": "proposal: improve channels for M:N producer/consumer scenarios",
	"body": "Channels work pretty well when you have 1 sender and N receivers, where the sender is producing some finite amount of work (afterwhich it closes the channel) and the receivers consume until all work is done (i.e. the channel is closed).\r\n\r\nPractically speaking though, it isn't uncommon to have M senders. When signalling to receivers that there is nothing more being produced, the senders have to coordinate using some outside synchronization mechanism that all senders are done and the channel is safe to close. Forgetting to do this either leads to hung receivers or panics due to multiple closes on a single channel.\r\n\r\nIn a similar vein, it also isn't uncommon to want to only have a sender producing if there are still receivers interested in consuming. Facilitating this also requires keeping track of each receiver and using some outside synchronization primitive to signal to the sender that it can stop producing.\r\n\r\n## To solve the multiple producer problem\r\n\r\n1. Every channel has both a recv and send reference count. Each count is initialized to 1 when make returns a channel.\r\n2. A channel is considered closed when either reference count drops to zero.\r\n3. A dup() built-in is used to increment reference counts on a channel. If a directional channel is passed into dup(), then only the reference count for that direction is incremented. dup() returns the passed in channel.\r\n4. Calling close() decrements the reference counts on a channel. If a directional channel is passed into close(), then only the reference count for that direction is decremented.\r\n5. Calling close() does not panic as long as there is a reference count \u003e 0 on the direction being closed. This makes it safe to always close what you referenced (via make() or dup()).\r\n\r\n\r\n## To solve the consumers signaling producers to stop problem\r\n1. A new way to send down a channel that doesn't panic if the channel is closed. This can be done with recover but that does not compose well with for-select loops. Proposed syntax: `ok := val -\u003e ch`\r\n2. Recv directional channels must now be closable.\r\n\r\nChannels now more closely mirror unix pipes, where each side can be closed independently.\r\n\r\n\r\n## Examples\r\n```go\r\n/////////////////////////////////////////////\r\n// multiple producers (no close coordination required)\r\n/////////////////////////////////////////////\r\n\r\nfunc producer1(duped chan\u003c- int) {\r\n\tdefer close(duped)\r\n\r\n\tduped \u003c- 1\r\n\tduped \u003c- 2\r\n\tduped \u003c- 3\r\n}\r\n\r\nfunc producer2(duped chan\u003c- int) {\r\n\tdefer close(duped)\r\n\r\n\tduped \u003c- 4\r\n\tduped \u003c- 5\r\n\tduped \u003c- 6\r\n}\r\n\r\nfunc main() {\r\n\tch := make(chan int)\r\n\tgo producer1(dup(ch))\r\n\tgo producer2(dup(ch))\r\n\tclose(ch)\r\n\r\n\t// consume all\r\n\tfor range ch {\r\n\t}\r\n}\r\n\r\n/////////////////////////////////////////////\r\n// produce until no consumers\r\n/////////////////////////////////////////////\r\n\r\nfunc produceUntilNobodyConsuming(ch chan\u003c- int) {\r\n\tvar n int\r\n\tfor {\r\n\t\tok := n -\u003e ch\r\n\t\tif !ok {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tn++\r\n\t}\r\n}\r\n\r\nfunc consumeN(duped \u003c-chan int, n int) {\r\n\tdefer close(duped)\r\n\r\n\ti := 0\r\n\tfor range duped {\r\n\t\ti++\r\n\t\tif i == n {\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tch := make(chan int)\r\n\tgo consumeN(dup(ch), 5)\r\n\tgo consumeN(dup(ch), 10)\r\n\tclose(ch)\r\n\tproduceUntilNobodyConsuming(ch)\r\n}\r\n```\r\n\r\n## Open issues\r\n1. What happens when dup() is called on a closed channel? panic? return the closed channel without incrementing reference counts? reopen the channel? Probably panic. Maybe it supports comma-ok syntax?\r\n2. Better syntax for non-panic channel sends?\r\n",
	"user": {
		"login": "azdagron",
		"id": 7400314,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		},
		{
			"name": "Proposal-Declined"
		}
	],
	"comments": 11,
	"closed_at": "2016-08-15T23:40:04Z",
	"created_at": "2016-03-02T19:00:59Z",
	"updated_at": "2016-08-15T23:40:04Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	},
	"reactions": {
		"total_count": 8,
		"+1": 8
	}
}
