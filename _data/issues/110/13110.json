{
	"id": 114309680,
	"number": 13110,
	"state": "closed",
	"title": "tour: Concurrency: Exercise Web Crawler would profit from hint about mutex",
	"body": "Hi,\r\njust took the tour, it was nice. \r\n\r\nI have a suggestion for the last exercise-web-crawler.go.\r\nI could solve the task to run the crawlers in parallel using the channels,\r\nbut the task to only crawl urls once could need more hints, it was too hard.\r\n\r\nAs I am only a beginner once, I'm reporting it.\r\n\r\nAs far as I say, solving the task of \"crawling urls only onces\" requires either\r\n*  two way communication to ask via a channel (which was not explained\r\nbefore and probably would need a way to build individual channels to each goroutine or a way to have them all ask over one common channel) if an url has already been crawled or\r\n* a mutex like mechanism to access a common map \r\n\r\nBoth have not been explained in the tour before. The reference solution uses the mutex.\r\nNow I could have read up on the \"sync\" packages to use a mutex, but because\r\npage concurrency/1 said that this was rarely necessary, I expected a higher level way to exist.\r\nWhich I could not find in a reasonable timeframe so I gave up and looked at the solution in the source.\r\n\r\nMy suggestions are:\r\n* Add a hint that you should read up on the \"sync\" package and use a mutex for the second task.\r\n* Possibly hint at a pattern how two goroutines could ask each other something over a channel (if such a pattern exist) in the channel part.\r\n* Consider adding the anounymous function that is used in the tour/solutions/webcrawler.go\r\nfile to start a go routine to a previous example, I found it non-obvious when looking at webcrawler.go\r\n\r\ntour master commit 1c790b9f8bfefe44f33fbc9aacf5a6bc06027321 Date:   Tue Oct 20 14:55:43 2015 -0700\r\nChromium with go1.5.1 in i386 in Debian GNU/Linux.\r\n\r\nBest Regards,\r\nBernhard",
	"user": {
		"login": "bernhardreiter",
		"id": 8190008,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"closed_at": "2015-12-09T17:06:10Z",
	"created_at": "2015-10-30T16:48:47Z",
	"updated_at": "2015-12-09T17:06:10Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
