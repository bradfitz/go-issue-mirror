{
	"id": 57185887,
	"number": 9827,
	"state": "open",
	"title": "x/tools/imports: fill in missing type information in composite literals",
	"body": "Idea from campoy + discussions with crawshaw.\r\n\r\nThe spec now permits some types to be elided from composite literals: \"Within a composite literal of array, slice, or map type T, elements that are themselves composite literals may elide the respective literal type if it is identical to the element type of T. Similarly, elements that are addresses of composite literals may elide the \u0026T when the element type is *T.\"\r\n\r\nStruct literals must still specify the types for each element, since without them the literals are difficult to understand.  But these types are fully determined by the outermost type of the literal expression and the field names.  So it should be possible to fill them in automatically.  Since goimports is already processing the AST and adding missing imports, let's see whether it can also fill in these missing types.\r\n\r\nFor example:\r\n```\r\ngoimports \u003c\u003cEOF\r\nfunc main() {\r\n  fmt.Println(image.Rectangle{Min: {X: 2}})\r\n}\r\nEOF\r\nshould output:\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n  \"image\"\r\n)\r\n\r\nfunc main() {\r\n  fmt.Println(image.Rectangle{Min: image.Point{X: 2}})\r\n}\r\n```",
	"user": {
		"login": "Sajmani",
		"id": 9734877,
		"type": "User",
		"site_admin": false
	},
	"comments": 11,
	"created_at": "2015-02-10T15:03:21Z",
	"updated_at": "2015-04-14T19:38:33Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
