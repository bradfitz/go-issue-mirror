{
	"id": 66089667,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eNo, this happens even with empty env vars. On windows just querying env var creates at\nleast 2 copies of the env var name string (one to append 0, and another to convert to\n[]uint16). And we query both HTTP_PROXY and http_proxy. This accounts for 15% of\nallocations and 10% of garbage on end-to-end http client/server benchmark.\n\nLook at the difference between linux and windows:\n\u003ca href=\"http://goperfd.appspot.com/perfgraph?builder=linux-amd64\u0026builder=windows-amd64\u0026benchmark=http\u0026procs=1\u0026metric=allocs\u0026absolute=1\u0026startcommit=1422\u0026commitnum=2000\u0026refresh=Refresh\"\u003ehttp://goperfd.appspot.com/perfgraph?builder=linux-amd64\u0026builder=windows-amd64\u0026benchmark=http\u0026procs=1\u0026metric=allocs\u0026absolute=1\u0026startcommit=1422\u0026commitnum=2000\u0026refresh=Refresh\u003c/a\u003e\n\nWhat do you think if we query HTTP_PROXY once lazily (so that user has a chance to set\nit in main) and provide updateProxyEnvVars() for tests?\nI think the advice for other cases is to use programmatic interface. Env vars are not\n\"composable\" anyway, if 2 subsystems alter HTTP_PROXY one of them won't work.\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-12-28T09:58:25Z",
	"updated_at": "2014-12-08T10:39:06Z"
}
