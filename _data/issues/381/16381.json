{
	"id": 165689375,
	"number": 16381,
	"state": "closed",
	"title": "net/context: ctx.Err() != error returned by ctxhttp.Do",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\n        go version go1.7rc1 darwin/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n    \r\n        GOARCH=\"amd64\"\r\n        GOBIN=\"\"\r\n        GOEXE=\"\"\r\n        GOHOSTARCH=\"amd64\"\r\n        GOHOSTOS=\"darwin\"\r\n        GOOS=\"darwin\"\r\n        GOPATH=\"/Users/abg/dev/go\"\r\n        GORACE=\"\"\r\n        GOROOT=\"/Users/abg/.gimme/versions/go1.7rc1.darwin.amd64\"\r\n        GOTOOLDIR=\"/Users/abg/.gimme/versions/go1.7rc1.darwin.amd64/pkg/tool/darwin_amd64\"\r\n        CC=\"clang\"\r\n        GOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/8z/qdzjsr3n5l72vdg67zr6xkjc0000gn/T/go-build692583142=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n        CXX=\"clang++\"\r\n        CGO_ENABLED=\"1\"\r\n\r\n3. What did you do?\r\n\r\n    The contract for [`ctxhttp.Do`](https://godoc.org/golang.org/x/net/context/ctxhttp#Do) states that if a request timed out or got\r\n    canceled, the error returned will be equal to `ctx.Err()`. This is true\r\n    for Go 1.6 but is broken in 1.7rc1.\r\n    \r\n    I wrote a quick little program where the request always times out. It\r\n    prints the returned error, the `ctx.Err()`, and whether they are equal.\r\n\r\n    Full code:\r\n\r\n        package main\r\n        \r\n        import (\r\n            \"fmt\"\r\n            \"log\"\r\n            \"net/http\"\r\n            \"time\"\r\n        \r\n            \"golang.org/x/net/context\"\r\n            \"golang.org/x/net/context/ctxhttp\"\r\n        )\r\n        \r\n        func main() {\r\n            http.HandleFunc(\"/\", func(http.ResponseWriter, *http.Request) {\r\n                time.Sleep(1 * time.Second)\r\n            })\r\n            go http.ListenAndServe(\":8080\", nil)\r\n        \r\n            request, err := http.NewRequest(\"GET\", \"http://localhost:8080\", nil)\r\n            if err != nil {\r\n                log.Fatal(err)\r\n            }\r\n        \r\n            ctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\r\n            defer cancel()\r\n        \r\n            _, err = ctxhttp.Do(ctx, nil, request)\r\n            if err == nil {\r\n                log.Fatal(\"expected error\")\r\n            }\r\n        \r\n            fmt.Println(\"err =\", err)\r\n            fmt.Println(\"ctx.Err() =\", ctx.Err())\r\n            fmt.Println(\"err == ctx.Err() =\", err == ctx.Err())\r\n        }\r\n\r\n4. What did you expect to see?\r\n\r\n    Expected output:\r\n    \r\n        err = context deadline exceeded\r\n        ctx.Err() = context deadline exceeded\r\n        err == ctx.Err() = true\r\n        \r\n    This works as expected in 1.6.\r\n\r\n5. What did you see instead?\r\n\r\n    Output in 1.7rc1:\r\n\r\n        err = Get http://localhost:8080: net/http: request canceled\r\n        ctx.Err() = context deadline exceeded\r\n        err == ctx.Err() = false\r\n\r\n    This fails even if `net/context` is switched to Go 1.7's `context` package.",
	"user": {
		"login": "abhinav",
		"id": 41730,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-07-16T21:44:40Z",
	"created_at": "2016-07-15T00:46:48Z",
	"updated_at": "2016-07-16T21:44:41Z",
	"milestone": {
		"id": 1714149,
		"number": 40,
		"title": "Go1.7Maybe"
	},
	"reactions": {
		"total_count": 3,
		"+1": 3
	}
}
