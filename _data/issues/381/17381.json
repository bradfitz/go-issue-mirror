{
	"id": 181800117,
	"number": 17381,
	"state": "open",
	"title": "cmd/internal/obj/{ppc64,mips,arm64,s390x}: leaf function with non-zero sized frame should save link register",
	"body": "### What version of Go are you using (`go version`)?\r\ntip\r\n\r\n### What did you do?\r\nrun the following program (which loops forever) and send a SIGQUIT\r\nhttps://play.golang.org/p/1OoXRd-PWi\r\n```\r\npackage main\r\n\r\nfunc main() {\r\n\tprep()\r\n\tf()\r\n}\r\n\r\nvar sink int\r\nvar b = true\r\n\r\n//go:noinline\r\nfunc f() {\r\n\tvar t [1]int\r\n\tfor b {\r\n\t\tsink = t[0]\r\n\t}\r\n}\r\n\r\n//go:noinline\r\nfunc prep() {\r\n\t// put some garbage on stack\r\n\tvar x = [20]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\r\n\t_ = x\r\n}\r\n```\r\n\r\n\r\n### What did you expect to see?\r\na complete stack trace, like this one on AMD64\r\n```\r\n^\\SIGQUIT: quit\r\nPC=0x4ac6c m=0\r\n\r\ngoroutine 1 [running]:\r\nmain.f()\r\n\t/Users/cherryyz/go/tmp/x2.go:14 +0x2c fp=0xc420037f40 sp=0xc420037f28\r\nmain.main()\r\n\t/Users/cherryyz/go/tmp/x2.go:5 +0x19 fp=0xc420037f48 sp=0xc420037f40\r\nruntime.main()\r\n\t/Users/cherryyz/src/go/src/runtime/proc.go:185 +0x20a fp=0xc420037fa0 sp=0xc420037f48\r\nruntime.goexit()\r\n\t/Users/cherryyz/src/go/src/runtime/asm_amd64.s:2158 +0x1 fp=0xc420037fa8 sp=0xc420037fa0\r\n\r\nrax    0x0\r\nrbx    0x0\r\nrcx    0xc420000340\r\nrdx    0x68748\r\n...\r\n```\r\n\r\n### What did you see instead?\r\nOn ARM64, and I believe, also PPC64, MIPS64, S390X, see a truncated stack trace\r\n```\r\n^\\SIGQUIT: quit\r\nPC=0x53688 m=0\r\n\r\ngoroutine 1 [running]:\r\nmain.f()\r\n\t/Users/cherryyz/go/tmp/x2.go:14 +0x18 fp=0x4420031f30 sp=0x4420031f20\r\n\r\nr0      0x0\r\nr1      0x4420030370\r\nr2      0x4420031f30\r\nr3      0x4420068020\r\n...\r\n```\r\n\r\nThe problem is that the runtime traceback code assumes a non-zero sized frame has link register saved (runtime/traceback.go:288):\r\n```\r\n\t\t\tvar lrPtr uintptr\r\n\t\t\tif usesLR {\r\n\t\t\t\tif n == 0 \u0026\u0026 frame.sp \u003c frame.fp || frame.lr == 0 {\r\n\t\t\t\t\tlrPtr = frame.sp\r\n\t\t\t\t\tframe.lr = *(*uintptr)(unsafe.Pointer(lrPtr))\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n...\r\n```\r\nBut the assembler did not do so for leaf functions, and the traceback code failed to unwind the stack.\r\n\r\ncc @aclements \r\n",
	"user": {
		"login": "cherrymui",
		"id": 14119929,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		}
	],
	"assignee": {
		"login": "cherrymui",
		"id": 14119929,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2016-10-08T02:52:46Z",
	"updated_at": "2016-10-24T02:55:15Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
