{
	"id": 129649436,
	"body": "Another issue, which I don't think can be worked around without slight change of net/rpc interface, is support for custom error codes. Spec define error codes, some should be used by RPC engine implementation, others can be returned from user's RPC handler. If net/rpc had use `Error error` in `Response` struct instead of `Error string` then it would be possible for codecs to analyse dynamic type of returned `error` and decide what to do - if codec doesn't support anything than returning error as a string then it can use `Error()` to get it just before encoding, if codec/protocol does support extra data like error codes then it might get it from `error` of known dynamic type and use default error code otherwise.\r\n\r\nThe `Response` struct is exported, but doc states it's internal and serve only documentation purposes. Please correct me if I'm wrong, but technically changing type of `Error` field in that struct will break Go 1 Compatibility Guarantee, and this isn't an option? :disappointed:\r\n\r\nOnly way around I see is serializing both error code and message into returned error's text, and then in codec try to analyse error text and detect is it contain only error message or both error code and message serialized that way. It's ugly, but should work.",
	"user": {
		"login": "powerman",
		"id": 1354301,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-10T23:54:37Z",
	"updated_at": "2015-08-10T23:54:37Z"
}
