{
	"id": 76636283,
	"body": "Still jet lagged, so I dug into this some more early this morning.  On my X201s running OpenBSD -current, I was able to reproduce this issue.  I think the kern_tc.c race is still technically a bug, but it doesn't seem to be the root cause of this crash.\r\n\r\nMy way of easily reproducing currently is:\r\n\r\n    sed -i.tmp 's/const attempts = 3/const attempts = 1/' src/time/sleep_test.go\r\n    go test -c time\r\n    yes | head -n 10000 | GOMAXPROCS=4 xargs -P20 -n1 ./time.test -test.short=true -test.timeout=120s -test.run=TestAfterQueuing | grep -v '^PASS$'\r\n\r\n(Notably, so far I've only repro'd with GOMAXPROCS\u003e1, but it seems like the builders are using GOMAXPROCS=1.)\r\n\r\nA couple things to explain:\r\n\r\n1. With -test.short=true, TestAfterQueuing lowers \"delta\" to 20ms.\r\n\r\n2. On OpenBSD (at least the arches supported by Go), the processor scheduler has a period of 10ms, whereas on Linux they're 1ms.  I.e., CPU intensive threads can potentially run for up to 10ms uninterrupted on OpenBSD.\r\n\r\n3. When \"go test std cmd\" runs time.test, it's also busy compiling other packages/commands (i.e., CPU intensive work).\r\n\r\n\r\nThat leads to these consequences:\r\n\r\n4. The first call to testAfterQueuing() tries to create a bunch of interleaved timers on lines 261--263.  If the test process is preempted for \u003e=20ms while creating the timers, it's possible (e.g.) the final After(0 * delta) call occurred more than delta after the call to After(1 * delta).  I've seen this happen in ktrace/kdump output.\r\n\r\n(Note: Subsequent retries, the global \"slots\" array is already sorted, so this cause goes away.  To trigger the failure below with \"attempts = 1\", move the sort.Ints() call earlier.)\r\n\r\n5. Even when the queued timers are for non-decreasing intervals, there's a possibility that the \"timerproc\" Go routine gets delayed for \u003e=20ms.  I've traced through timerproc to verify that even in this case, it processes the timers in the right order; but it's not guaranteed the \"await\" goroutines will be scheduled to execute in the same order.\r\n\r\n(Interestingly, in a simplified test case, I'm able to reproduce this non-deterministic goroutine scheduling with GOMAXPROCS\u003e1, but not with GOMAXPROCS=1.  I need to investigate more to find out why this is.)\r\n\r\n\r\nTakeaway: I don't think \"kernel-bug\" is an entirely accurate here, but because of OpenBSD's kernel behavior, it might make sense to only set \"delta = 20 * Millisecond\" for GOOS != \"openbsd\".",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-03-01T22:49:52Z",
	"updated_at": "2015-03-01T22:49:52Z"
}
