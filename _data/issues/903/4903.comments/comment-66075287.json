{
	"id": 66075287,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eWhen creating a timer, the duration is added to the current time in nanoseconds and\nstored in an int64. This overflows for long durations, storing a negative \"when\" time.\n\nIn package runtime, the pending timers are stored in a queue that is sorted by \"when\".\nThe timerproc goroutine periodically checks this queue to see if any new events need to\nbe fired.\n\nThe way it checks is by iterating through the timers and computing \n  delta = t-\u0026gt;when - now;\nand stopping if delta \u0026gt;= 0.\n\nIf that loop exits with delta \u0026lt; 0, it's assumed that there's no work to do and the\ngoroutine is parked.\n\nI think one important fix is to make timerproc use a separate flag to mean \"didn't find\nanything to do.\" instead of using a negative delta.\n\nThe other important fix is to prevent \"when\" from overflowing maxint64 in the first\nplace. I don't think Sleep and After should panic on overly large durations. Probably it\nshould just truncate when to maxint64 in those cases. I don't think this matters; nobody\nwill be sleeping in go programs past the year 2262. Or, if they are, our descendants can\nrevisit this a century before then.\u003c/pre\u003e",
	"user": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-02-25T06:42:07Z",
	"updated_at": "2014-12-22T06:22:28Z"
}
