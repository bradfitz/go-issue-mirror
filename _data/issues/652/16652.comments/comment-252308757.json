{
	"id": 252308757,
	"body": "\u003e First and foremost, why separate the interfaces at all? In practice, driver authors are not going to implement just a subset of this new API; what would the reasoning for that be?\r\n\r\nThe reason is for backwards compatibility and extensibility. If we need to add another property, it can be done. Also the driver package cannot reference the sql package, so we would need to copy the values from each driver.ColumnType to sql.ColumnType.\r\n\r\n\u003e As a consumer of the API, a partial implementation by a driver would be somewhat silly. The sort of use cases I'm thinking of that require this type of column metadata generally aren't satisfied by a partial implementation.\r\n\r\nSome drivers may not have all the information available. But I generally agree with this point.\r\n\r\n\u003e This increases the burden on the driver author who now has five methods they need to write test cases for, as opposed to one. Also it potentially complicates their implementation (will they need to keep data structures hanging around expecting subsequent calls for the next col etc?)\r\n\r\nI don't really buy this one. At the end of the day you are testing the same amount of properties.\r\n\r\n\u003e This breaks the design symmetry between the sql and driver packages (as exemplified by the Rows.Columns() methods).\r\n\r\nI don't understand this.\r\n\r\n\u003e A single call to sql.Rows.ColumnTypes() results in 5 x [num cols] calls to the driver impl. That's potentially a great deal of calls (at Teradata I saw customer queries with hundreds of cols). Even if in practice this is not a huge perf burden, something about it seems wrong (an \"API smell\" if you will).\r\n\r\nThis is true. I'm not expecting this to be in a super hot loop. I also want to be able to work with tables with hundreds of columns ( http://www.jdetables.com/ *sigh*). In this case backwards compatibility and extensibility are the key design issues here.\r\n\r\n-----\r\n\r\nLet's take a step back and impose the following restrictions on design:\r\n\r\n * ColumnType needs to be defined in the `database/sql` package.\r\n * If we want to add another property in the future, we need to be able to do so without\r\n   breaking backwards compatibility.\r\n * We need to not break backwards compatibility on this change.\r\n\r\nThank you for the above links and the concrete counter proposal. Could you modify the proposal to meet the above, or describe how it meets the above?  I agree that it meets the last point.\r\n",
	"user": {
		"login": "kardianos",
		"id": 755121,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-07T17:12:52Z",
	"updated_at": "2016-10-07T17:12:52Z"
}
