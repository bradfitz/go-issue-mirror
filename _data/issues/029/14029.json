{
	"id": 127607690,
	"number": 14029,
	"state": "closed",
	"title": "x/net/http2: validate received header values ",
	"body": "The Go http2 implementation (client \u0026 server) validates header values (the `validHeader` func) but I missed the very next sentence in the http2 spec before:\r\n\r\nhttps://httpwg.github.io/specs/rfc7540.html#rfc.section.10.3\r\n\r\n\u003e Similarly, HTTP/2 allows header field values that are not valid. While most of the values that can be encoded will not alter header field parsing, carriage return (CR, ASCII 0xd), line feed (LF, ASCII 0xa), and the zero character (NUL, ASCII 0x0) might be exploited by an attacker if they are translated verbatim. Any request or response that contains a character not permitted in a header field value MUST be treated as malformed (Section 8.1.2.6). Valid characters are defined by the field-content ABNF rule in Section 3.2 of [RFC7230].\r\n\r\nI only thought to go look because I saw a mention of it in the [gRPC wire protocol docs](http://www.grpc.io/docs/guides/wire.html):\r\n\r\n\u003e Note that HTTP2 does not allow arbitrary octet sequences for header values so binary header values must be encoded using Base64\r\n\r\nNeeds to be fixed in both the client \u0026 server, next to existing checks like:\r\n\r\n```go\r\n        if !validHeader(f.Name) {\r\n                rl.reqMalformed = errInvalidHeaderKey\r\n                return false\r\n        }\r\n```",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-01-21T02:11:44Z",
	"created_at": "2016-01-20T05:28:06Z",
	"updated_at": "2016-01-21T02:11:44Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
