{
	"id": 233181132,
	"body": "I recently ran into the lack of multi-valued RDN support in GO too.\r\n\r\n@agl, As @rapropos noted, it's not the same OID that is being mapped to multiple values.  Rather, a single RDN can have more than one AttributeTypeAndValue.  From [RFC 5280](https://tools.ietf.org/html/rfc5280#section-4.1.2.4), the RDN is defined to be a set with a size from 1 to MAX:\r\n\r\nRDNSequence ::= SEQUENCE OF RelativeDistinguishedName\r\nRelativeDistinguishedName ::= SET SIZE (1..MAX) OF AttributeTypeAndValue\r\n\r\nGO is currently assuming MAX is always = 1, which is not a correct assumption:\r\nhttps://golang.org/src/crypto/x509/pkix/pkix.go?h=FillFromRDNSequence#L67\r\n\r\nThe canonical example for multi-valued RDNs is where CN is a person's name, say \"Alice Smith,\" where there can be lots of duplicates.  To disambiguate, organizations usually then also use some unique identifier, like UID.  This is rather common in LDAP and other user directories.  It sounds like the example from @eliasnaur is along those lines, but using serial number instead of UID.\r\n\r\nAs noted, OpenSSL (and others, like Bouncy Castle) support both the generation and parsing of certificates with multi-valued RDNs (just search for \"multivalue-rdn\"):\r\nhttps://www.openssl.org/docs/manmaster/apps/req.html\r\n\r\nBeing a set, the order of the AttributeTypeAndValue is not defined, so arbitrarily picking the first one can lead to different results depending on how the certificate gets generated.\r\n\r\nIdeally, GO would parse the DN completely or at least indicate that there is one or more multi-valued RDNs so the caller knows to parse the Issuer / Subject manually if interested in all the values.  Right now, calling code cannot rely on the results if it's possible for there to be multi-valued RDNs.  And if you're writing code that will run in environments that you do not control, running into this seems like an inevitability.\r\n\r\nUnfortunately, looking at the existing structure of pkix.Name, I do not see an obvious way to account for multi-valued RDNs that preserves compatibility.  It seems like either new fields and/or new methods must be added or perhaps a new pkix.Name type entirely.\r\n\r\nI understand that X509 is a beast, and that GO is still relatively young, and that there are lots of competing priorities for precious resources, but cherry-picking which parts of the X509 standard get implemented and which do not makes it more difficult and error-prone to migrate to GO from other languages / technologies that provide greater coverage.  Hopefully, GO can still go further in this regard.",
	"user": {
		"login": "ramoas",
		"id": 13425463,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-17T13:06:57Z",
	"updated_at": "2016-07-17T13:07:44Z"
}
