{
	"id": 66055196,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eMaybe! Example: suppose a Go string literal will use a particular byte sequence for\neacute, but an external string in UTF-8 format uses two byte sequences, one for e and\none for combining acute accent. So both represent eacute but both have different byte\nrepresentations and so would compare != in Go. One solution to this is to use Unicode\nnormalization, so yes, if that were available that'd be great. An alternative would be\nto use \"Go normalization\" which would transform a foreign UTF-8 byte sequence into the\nbyte sequence that go would use to represent those characters. Either way the idea is to\nget == and != working for strings even if one of them uses a different character to\nbytes mapping than Go.\u003c/pre\u003e",
	"user": {
		"login": "mark-summerfield",
		"id": 1773348,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-03-18T13:25:47Z",
	"updated_at": "2014-12-08T10:09:09Z"
}
