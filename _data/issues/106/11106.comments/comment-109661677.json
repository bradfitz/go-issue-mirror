{
	"id": 109661677,
	"body": "Test3 created a goroutine that is effective busy looping.\nThis affects the pipeConn function, which also relies on\nscheduling a newly created goroutine to run before it\ncan return.\n\nBecause your timeout covers both pipeConn call and\nthe real read loop, after Test3 creates the busy looping\ngoroutine, pipeConn calls in Test4 and Test5 might\nnot be able to return within your timeout.\n\nYou should tear up the goroutine created during tests\neven if the test fails. I don't see what we can do to fix\nthe behavior.\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-07T00:49:19Z",
	"updated_at": "2015-06-07T00:49:19Z"
}
