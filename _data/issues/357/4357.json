{
	"id": 51282013,
	"number": 4357,
	"state": "closed",
	"title": "encoding/json, encoding/xml: self-defined zero types",
	"body": "\u003cpre\u003eBoth encoding/json and encoding/xml have an \u0026quot;omitempty\u0026quot; struct tag option that\nomits the corresponding field if its value is \u0026quot;empty\u0026quot;. That's well-defined for\nbuiltin types (e.g. int is 0, string is \u0026quot;\u0026quot;). It doesn't work well for named\ntypes, whether they be time.Time or something a programmer has defined in their own\nprogram.\n\nI propose these two packages use\n  type isZeroer interface {\n    IsZero() bool\n  }\nand use that where possible. time.Time already supports this.\n\nI am prepared to do the work to implement this if there's consensus we should do it.\u003c/pre\u003e",
	"user": {
		"login": "dsymonds",
		"id": 31506,
		"type": "User",
		"site_admin": false
	},
	"comments": 39,
	"closed_at": "2016-07-19T21:47:57Z",
	"created_at": "2012-11-07T00:33:23Z",
	"updated_at": "2016-07-19T21:47:57Z",
	"milestone": {
		"id": 1748849,
		"number": 42,
		"title": "Go1.8Maybe"
	},
	"reactions": {
		"total_count": 16,
		"+1": 16
	}
}
