{
	"id": 68165239,
	"body": "Andrew Hume via golang.org \r\n4:46 PM (36 minutes ago)\r\n\r\nto Robert \r\nthanks\r\n\r\nOn Dec 26, 2014, at 3:48 PM, Robert Griesemer \u003cgri@golang.org\u003e wrote:\r\n\r\nWhile it may seem obvious that []int and []int denote identical types, it's not. Different languages have quite different rules. For instance, in the Pascal language family, there's no structural equivalence of types, and two type literals written exactly the same do not mean the same type (in contrast to the situation in the C family of languages). Go borrows from both language trees, so it's worthwhile pointing this out.\r\n\r\nThat T0 and T0 are identical seems even more obvious, and perhaps it's an extreme example. But note that in other domains, say IEEE 754 floating-point numbers, two NaNs are never the same even if they have the same bit pattern. The fact that T0 is identical with T0 is borne from the type identity rules for Go, and it's not a universal truth (one could define a language where this is not the case, after all). Hence the example as an illustration of the Go specific rule.\r\nany language where type X is not identical to the exact same type X would be very odd.\r\n\r\nT2, T3, T4 are defined and not used to show that those types, despite structural equivalence with other types (T2 with T3, T4 with T5), are not identical to each other, again due to the specifics of the Go type rules.\r\n\r\nahh. did you mean to say “only these types are identical”?\r\nor you could just mention all of them, as in\r\n\r\n“T0 and T1 (and correspondingly T2 and T3) are different because they are named types\r\nwith distinct declarations. T4 and T5 are not only different because of their names, but because\r\nthe return types (*T0 and *[]string) are different.\r\n\r\n\r\n\r\nBut point taken. Filed https://github.com/golang/go/issues/9450 .\r\n\r\n- gri\r\n\r\n\r\n\r\nOn Thu, Dec 25, 2014 at 10:19 PM, Rob Pike \u003cr@golang.org\u003e wrote:\r\n\r\n---------- Forwarded message ----------\r\nFrom: Andrew Hume \u003cxxx\u003e\r\nDate: Fri, Dec 26, 2014 at 4:42 AM\r\nSubject: go lang spec\r\nTo: r@golang.org\r\n\r\n\r\nrob,\r\n\r\n\ti don’t understand the examples in the “Type Identity” section.\r\nin the second display, just after “these types are identical”, it says\r\n\r\nT0 and T0\r\n[]int and []int\r\nstruct{ a, b *T5 } and struct{ a, b *T5 }\r\n\r\n\twhy mention these at all? they are literally the same strings.\r\n(the fourth example, where the return value has a name, is at least a little different.)\r\n\r\nalso, T2, T3, T4 are defined but not otherwise used.\r\n\r\n-----------------------\r\nAndrew Hume",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-27T01:24:50Z",
	"updated_at": "2014-12-27T01:25:39Z"
}
