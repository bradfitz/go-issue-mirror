{
	"id": 165177502,
	"body": "Just want to leave a comment on this. This makes up about a third of the allocations for my team's encoder and decoder and has a major impact on performance. I looked into alternative strategies to solve this in type.go, but concluded that it isn't possible to have a satisfying solution so long as the index field is a slice and wanted to leave a note.\r\n\r\nIt isn't possible to back the slice by the stack (say by an unexposed array in the struct) because escape analysis (correctly) will detect that due to the return, the backing array of the slice must be on the heap. Once the slice must be backed by the heap, the only way to reduce allocations is to reduce the number of them. This isn't possible because we would either back the slice by constants (which breaks the semantics of being able to modify the returned value) or back it by an array that is shared across method calls (which is bad for a number of reasons).",
	"user": {
		"login": "bprosnitz",
		"id": 3269959,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-16T17:08:04Z",
	"updated_at": "2015-12-16T17:08:04Z"
}
