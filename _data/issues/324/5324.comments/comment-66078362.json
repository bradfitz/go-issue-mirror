{
	"id": 66078362,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9:\n\n\u003cpre\u003eThanks for considering the issue.\n\nI agree that the spec shouldn't indicate which constructs cause the scheduler to run as\nthat is subject to change and implementation details.  I wasn't expecting the spec to be\namended. It was just a technique to generate some discussion about the issue.\n\nAs I mentioned above, this example was culled from a much larger program that generates\nmetrics based on a Go Ticker. The program has existed for +6 months and it's very stable\nand reliable. Is uses a number of goroutines, does compute and I/O. I normally run it\nwith GOMAXPROC \u003e 1. This week I happened to test it on a new machine where I forgot to\nmodify .profile to have GOMAXPROC \u003e 1 and it exhibited some bizarre behavior as\nmentioned above. So it's just a fluke that I noticed this at all.\n\nI'm glad it happened because it made me think more about my own model of how the runtime\nworks and I appreciate the discussion and all the comments.\n\nHaving said all that I am not sure how I could rewrite the program to work properly when\nGOMAXPROC=1. If 1000+ lines of code with two goroutines doing I/O, channels sends and\nreceives, a stats goroutine, and so on aren't enough to trigger the scheduler, what is?\nI am sure I can figure out a way to trigger the scheduler, but even that is likely\nsubject to change subject to implementation.\n\nI think it is kind of sad that there is no way to ensure that a timer based program,\nwhere the core, main loop, is an infinite loop  wrapping \"select\" and the default case\nis the callout to all the real work, will function  properly when GOMAXPROC=1.\n\nSomething has been lost from 1.0.3 to 1.1 and while it may that \"The 1.1 behaviour is\nwithin spec\" you should consider what has been lost.\n\nOne final question (someone from Google) suggested I call runtime.Gosched. That was\nrefuted by RÃ©my. Is that really the case? Gosched seems to be the one documented way to\ntry and force the scheduler to run? If it isn't guaranteed to run other go routines then\nthere appears to be no documented way to fix the GOMAXPROC=1 case.\n\nThat leads to many build-in library constructs may not function properly when\nGOMAXPROC=1.\u003c/pre\u003e",
	"user": {
		"login": "tildeleb",
		"id": 834628,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-04-21T23:15:29Z",
	"updated_at": "2014-12-08T10:28:44Z"
}
