{
	"id": 66053550,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003epackage main\n\nimport \"fmt\"\n\ntype T struct{}\n\ntype P *T\n\ntype Q T\n\nfunc (t *T) TMethod() {\n}\n\nfunc main() {\n\tvar t *T = new(T)\n\tt.TMethod()\n\t// p.TMethod undefined (type T has no field or method TMethod)\n\tvar p = P(t)\n\tp.TMethod()\n\t// q.TMethod undefined (type Q has no field or method TMethod)\n\tvar q = Q(*t)\n\tq.TMethod()\n\n\t// t: *main.T, \u0026{}; p: main.P, \u0026{}; q: main.Q, {}\n\tfmt.Printf(\"t: %T, %v; p: %T, %v; q: %T, %v\\n\", t, t, p, p, q, q)\n}\n\nYour issue summary, \"wrong 8g compiler error message\", states that the issue is specific\nto the 8g compiler; the issue also occurs for 6g and possibly other compilers.\n\n\"A type may have a method set associated with it (§Interface types, §Method\ndeclarations). The method set of an interface type is its interface. The method set of\nany other named type T consists of all methods with receiver type T. The method set of\nthe corresponding pointer type *T is the set of all methods with receiver *T or T (that\nis, it also contains the method set of T). Any other type has an empty method set. In a\nmethod set, each method must have a unique name.\"\n\u003ca href=\"http://golang.org/doc/go_spec.html#Types\"\u003ehttp://golang.org/doc/go_spec.html#Types\u003c/a\u003e\n\n\"The receiver type must be of the form T or *T where T is a type name. T is called the\nreceiver base type or just base type. The base type must not be a pointer or interface\ntype and must be declared in the same package as the method. The method is said to be\nbound to the base type and is visible only within selectors for that type (§Type\ndeclarations, §Selectors).\" \u003ca href=\"http://golang.org/doc/go_spec.html#Method_declarations\"\u003ehttp://golang.org/doc/go_spec.html#Method_declarations\u003c/a\u003e\n\nThe type of p is P with an underlying type of *T. Since T is a pointer, it can't be a\nreceiver base type. The type of q is Q with an underlying type of T, it may be a\nreceiver base type. Types P, Q, and T are distinct.\n\nThe error message \"p.TMethod undefined (type T has no field or method TMethod)\" refers\nto the underlying type T instead of the base type P. The error message \"q.TMethod\nundefined (type Q has no field or method TMethod)\" refers to the base type Q.\n\nMy complaint is that the error message \"p.TMethod undefined (type T has no field or\nmethod TMethod)\" should read \"p.TMethod undefined (type P has no field or method\nTMethod).\"\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-12-05T15:16:14Z",
	"updated_at": "2014-12-08T10:07:48Z"
}
