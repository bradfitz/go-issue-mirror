{
	"id": 167072420,
	"body": "Regarding the prepare step needing different case mapping, I see where you're getting at now. I would no longer qualify this as a prepare step, though. It is more like a sanitize-for-display-purposes transformation. The prepare step I see defined just returns a boolean yes or no. I don't see the standard mentioning the preparation trimming or modifying anything, just checking for valid UTF-8 and the containment of runes in a pre-defined set. As such, as case mapping is not entirely trivial either: by Precis' logic, the preparation should not be required to case map.\r\nThis yes/no question could also be answered with the \"Enforcement\" step, though, so I'm still inclined to only support that and support the \"Allowed\" characters set which allow people to easily implement this step if needed (or we provide it later). If applications decide to trim spaces from user names for display purposes they can do so, but it doesn't belong in the framework (or am I missing something).\r\n\r\nFor comparison it is a different story. For the API here I'm more inclined to support higher-level profile options like IgnoreCaseForCompare, or just IgnoreCase. (It is probably not a good idea to put such options on the comparison itself.) Having arbitrary mappings can be very expensive for this purpose. If we know it is a stateless Transformer, which all default mappings are, we can optimize a lot. This needs to be a consideration as well.\r\n\r\nRegarding the Contains method: I like it better to return a runes.Set than implement the contains method.  It gives us options to define more sets later. Also, Contains by itself is not clear, especially because there are a few relevant sets that could be considered.",
	"user": {
		"login": "mpvl",
		"id": 6445383,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-24T09:04:07Z",
	"updated_at": "2015-12-24T09:04:07Z"
}
