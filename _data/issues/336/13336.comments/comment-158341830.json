{
	"id": 158341830,
	"body": "Thanks for the proposal. I'm fully in favor of adding this functionality to the text repo.\r\n\r\nThat said, I have a few remarks and suggestions on the current design:\r\n*  Usage of this package should be encouraged, and putting it under the unicode directory might be hiding it too much.\r\n* Similarly, the name precis may be too obscure. Perhaps \"golang.org/x/text/secure\" (secure.Identifier, secure.FreeForm would be of type secure.Profile)?. Open to suggestions, though.\r\n* The operations prescribed by RFC 7564 are inherently string-based, instead of rune-based:\r\n  * Exposing this as Transforms (with the usual helper methods) would be more appropriate.\r\n  * Tries seem a more natural data structure here. RangeTables can be used for now, but I would not expose them in the API.\r\n  * I would suggest not having any rune-based API for now (except for in an internal package, if needed).\r\n* I'm a bit worried that this will possibly result in a third way to compare strings (collate, cases). OTOH, this clearly serves a purpose and is more appropriate than using the inherently low-level cases/width etc.\r\n* The Class type should not be an integer?:\r\n  * Different classes may import different tables, but this design will pull all in unconditionally.\r\n  * We should allow for user profiles, as the standard suggests. I would make this the same type.\r\n* This package may potentially pull in a huge amount of data (unicode/norm, cases, width, bidi (TODO), etc.) . The API should be designed to drop tables if not needed. (very doable.)\r\n\r\n",
	"user": {
		"login": "mpvl",
		"id": 6445383,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-20T09:52:32Z",
	"updated_at": "2015-11-20T09:52:32Z"
}
