{
	"id": 190667416,
	"body": "On Tue, 1 Mar 2016, 21:59 Roger Peppe, \u003cnotifications@github.com\u003e wrote:\n\n\u003e There are very few types for which this is a fundamental question and vet\n\u003e already knows about them. For others, well, if you create a type that can't\n\u003e be copied, you can usually construct the API so that it won't be copied by\n\u003e accident.\n\u003e\n\u003e I agree that by adding an extra level of indirection, it's usually\n\u003e possible to construct a type such that it can be copied without problems,\n\u003e but it requires extra effort that most people won't go to, and you pay for\n\u003e it with extra allocations and lack of cache locality.\n\u003e\n\nAfter watching programmers for more than a decade, I'm convinced that\nmaking the wrong thing difficult is no obstacle to those who are truly\ndetermined.\n\nFor example, any struct value that has a field that points directly to\n\u003e another field in the type (for example a slice into a static buffer defined\n\u003e as part of the type) will probably be broken if it's copied. I doubt this\n\u003e is that uncommon.\n\u003e\n\u003e That's why I think it might be worth adding a language feature to make it\n\u003e straightforward to make types that are not possible to copy - not as a\n\u003e heuristic but as a guarantee.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/8005#issuecomment-190665559\u003e.\n\u003e\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-01T11:07:34Z",
	"updated_at": "2016-03-01T11:07:34Z"
}
