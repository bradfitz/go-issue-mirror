{
	"id": 189167237,
	"body": "\u003e (1) t gets stuffed into an interface{}, which generates a copy of t. Vet could (and probably should) be taught about that. For stuff like that, if the compiler can do it, vet can, and vice versa.\r\n\r\nI think you might have overlooked the fact that [that program](http://play.golang.org/p/aXh1qqB7dO) puts a pointer to T into the interface, not T itself. That's perfectly OK - just as it's perfectly fine to reflect on any pointer to struct containing a mutex. So there's nothing wrong for vet to see there.\r\n\r\n\u003e 2) t gets hidden inside a reflect.Value. Neither vet nor the compiler can help 100% with that, although vet could issue a warning and the compiler can't (because the compiler doesn't do warnings and doesn't do false positives). In order to catch that in the general case, I think we'd need runtime support as well as compiler support; that's a bigger change.\r\n\r\nAgain, it's fine for *T to be put inside a reflect.Value. It's even fine to call Elem on the resulting reflect.Value, because that doesn't copy the element. It's not fine to call Interface on that though, and that's where that the reflect package could panic rather than allow.\r\n\r\nIf the compiler kept track of nocopy, reflect.rtype and reflect.Value could keep track of the nocopy status of a value (in the flag field) and panic when the value is copied when it should not be.\r\n\r\nPutting the nocopy element in a struct also makes for a convenient way of automatically documenting that a type must not be copied - godoc already prints \"// contains filtered or unexported fields\" when there's an unexported field. It could also print \"// This value may not be copied\", which makes sense if nocopy is something defined in the language, but not so much if it just looks like an annotation for govet.",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-26T08:49:07Z",
	"updated_at": "2016-02-26T08:49:07Z"
}
