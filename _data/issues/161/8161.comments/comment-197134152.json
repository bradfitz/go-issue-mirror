{
	"id": 197134152,
	"body": "@ianlancetaylor: I read you last comment as saying \"you just need to build the go tools once, then that toolchain will automatically support all the available golang targets, just by setting GOOS/GOARCH\"  (but CC has to be managed yourself).  Is that correct?  If so, then that's great, and the ability for a single go build to support multiple targets wasn't at all clear from the \"install from source\" docs, nor the current structure of make.bash, which makes some attempts to set GOOS/GOARCH specifically for the intended target (not host) platform.\r\n\r\nIf my interpretation was not correct, and we do indeed need a new build of the toolchain for each host-target GOOS/GOARCH combination, then I'm still confused how that should be managed without some sort of per-target executable prefix or install location.\r\n\r\nI'm currently in the middle of trying to build an amd64-\u003earm go1.6 cross toolchain within an openembedded recipe and finding it much harder than I expected, not being familiar with the internals of the go toolchain.  More sagely advice sought.",
	"user": {
		"login": "anguslees",
		"id": 224224,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-16T03:25:48Z",
	"updated_at": "2016-03-16T03:25:48Z"
}
