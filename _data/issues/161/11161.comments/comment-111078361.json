{
	"id": 111078361,
	"body": "@champioj I see and I am confused (and probably wrong).\r\n\r\nIt surprises me that this [program](http://play.golang.org/p/QR23c2WhOG)\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(1.234 * 5 / 7)\r\n\tfmt.Println(5 / 7 * 1.234)\r\n}\r\n```\r\n\r\noutputs\r\n\r\n```\r\n0.8814285714285715\r\n0\r\n```\r\n\r\nFrom the [specs](http://golang.org/ref/spec#Constant_expressions):\r\n\r\n\u003e Constant expressions are always evaluated exactly; intermediate values and the constants themselves may require precision significantly larger than supported by any predeclared type in the language. \r\n\r\nBut the reason seems to be\r\n\r\n\u003e Except for shift operations, if the operands of a binary operation are different kinds of untyped constants, the operation and, for non-boolean operations, the result use the kind that appears later in this list: integer, rune, floating-point, complex.\r\n\r\nWith the explicit specs example\r\n\r\n\u003e `const b = 15 / 4           // b == 3     (untyped integer constant)`\r\n",
	"user": {
		"login": "cznic",
		"id": 729580,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-11T10:22:31Z",
	"updated_at": "2015-06-11T10:22:31Z"
}
