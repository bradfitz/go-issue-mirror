{
	"id": 217528058,
	"body": "@robpike, \"certainly a bug\" is unclear. We all understand the argument for why unitless 0 was used. Whether that's correct is a judgment call. I tend to agree 0s would be preferable. The issue is we might be beyond that point, having used the (defensible) unitless 0 already in seven major Go releases. The question is \"is it so wrong, and is the benefit so great, to merit breaking users' programs and burning some goodwill about compatibility?\" It's hard for me to see that it is.\r\n\r\nFor comparison:\r\n\r\n1. In ANSI C %#04x formats 1 as 0x01, but in Go it formats 1 as 0x0001. There is a plausible rationale on both sides, and while it might be nice for Go and ANSI to agree, we decided that was not enough of a benefit to offset the cost to our users of changing the visible behavior of existing Go programs.\r\n\r\n2. Go 1.7 has very significant performance improvements in compress/flate, at the cost of producing different compressed output in certain cases. This affects gzip, zlib, and zip writers in Go. I've already heard from one user who will need to carefully coordinate his system's rolling update from 1.6 to 1.7 because the servers will collectively be giving different outputs. But we justify that pain (and users accept that pain) because of the real benefit of the performance gains.\r\n\r\nThe 0 vs 0s here seems more like case 1 than case 2.\r\n",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-06T18:52:05Z",
	"updated_at": "2016-05-06T18:52:05Z"
}
