{
	"id": 163067500,
	"body": "\u003e To provide some clarity on my motivation and goals:\r\n\r\nWhat about building all your functionality as part of single Go executable and exporting it as RPC (via TCP or similar)?\r\n\r\n\u003e why you think what some other process is doing matters\r\n\r\n@mwhudson is talking about \"therad local storage\" here, not about processes view. Go runtime needs some block of memory that is \"thread specific\" - you can read and write that memory from any thread, and memory contents looks different if you look at it from different threads, but the same if you look from the same thread. As @minux mentioned, Windows provide some magic memory block (TIB), you can store a pointer at particular offset in this block, and that pointer will be different on different threads. Go runtime uses that slot for this particular purpose, but we also call some external code (system DLLs and cgo). Luckily for Go, no other code uses that slot. But if, for example, we create a Go DLL with its own runtime that uses the same slot, then calling this DLL from Go executable will be fatal.\r\n\r\n\u003e How could you provide a C compatible interface from a Go DLL without cgo?\r\n\r\nIt realy depends on the tool you will use to *consume* your DLL. For gcc you will provide set of .obj, .lib and .h files. For Delphi you provide small Pascal source file. For C# you provide small C# file (I don't know much about C#, so I could be wrong here). For Go you can provide small Go file (similar to $GOPATH/src/syscall/zsyscall_windows.go).\r\n\r\nYou can document your interface just like Microsoft do. For example, https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858(v=vs.85).aspx\r\n\r\n\u003e I don't see any problem requiring gcc to build the DLL.\r\n\r\nYou loose all nice things I've mentioned above. IMHO it is too hard for average windows user. It means you exclude them from building DLLs.\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-09T00:36:07Z",
	"updated_at": "2015-12-09T00:36:07Z"
}
