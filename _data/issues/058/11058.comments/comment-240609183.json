{
	"id": 240609183,
	"body": "On 18 August 2016 at 13:54, Minux Ma \u003cnotifications@github.com\u003e wrote:\n\n\u003e The code you disassembled in\n\u003e https://github.com/golang/go/issues/11058#issuecomment-167939906\n\u003e looked safe to call from Go stack, however, it didn't show the whole\n\u003e function.\n\u003e\n\u003e For example, when the TLS index is bigger than or equal to 0x40,\n\u003e it jumps to 0x7c845054.\n\u003e\n\u003e What does code at that location look like? I imagine code there\n\u003e probably need to check and allocate new storage for TLS, and that\n\u003e could easily overflow the limited Go stack lead to hard to diagnose\n\u003e problems that are hard to reproduce too (the TLS index must be\n\u003e large enough to trigger the alternate code path, which usually\n\u003e means the problem won't manifest in simple test case.)\n\u003e\n\u003e Of course, we can check the TLS index ourselves and switch to\n\u003e system stack to call TlsGetValue when it's too big, however, this\n\u003e design looks pretty fragile to me. (We make assumption on:\n\u003e 1. the threshold for TLS index values, and\n\u003e 2. TlsGetValue is safe to call on Go stack when TLS index is less\n\u003e than the assumed threshold.)\n\u003e\n\u003e Regarding two separate TLS mechanism for Windows exe and\n\u003e DLLs, I think that's hard to maintain and if we don't good test\n\u003e coverage of the DLL tests, it's bound to bit rot.\n\n\nWell, we have two (slightly) different mechanisms for TLS access on Linux\nfor executables and shared objects -- local exec and initial exec -- and it\nworks OK... that it works for the c-shared case though is on slightly thin\nice because you can only load so many shared objects that use the initial\nexec model into a process before the loader will complain (I guess this is\nsimilar to the TLS index limit of 40 in the Windows implementation?). For\nall that, I haven't seen many real reports of this causing problems.\n\nIf you want to do this properly, as Minux said already, g should be stored\nin a register most of the time, as we do on most other ports. Then the\n(relatively) few times we access the TLS storage can pay the cost of\ncalling the general dynamic (or whatever the Windows version of this is\ncalled) code on the system stack. If you want to be really brave you can\nimplement something like the general tlsdesc model and only call via the\nsystemstack when you really have to...\n",
	"user": {
		"login": "mwhudson",
		"id": 672022,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-08-18T02:45:38Z",
	"updated_at": "2016-08-18T02:45:38Z"
}
