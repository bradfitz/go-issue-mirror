{
	"id": 240446093,
	"body": "Sorry, I've been really busy the last few months. I could get the \"make a DLL\" code done for 1.8. (It's already done, I just haven't submitted a patch for it yet.) However, that would come with the limitation that you could only use one Go DLL per process.\r\n\r\nThe \"proper\" DLL support is much more difficult because of how Windows performs TLS, and how Go uses Windows' TLS system. The basic problem is that two Go runtimes in the same process will stomp on each other on Windows because they both think they own the TLS \"slot\" being used. I wrote a proposal to the golang-dev list and literally got zero feedback.\r\n\r\nTo summarize, I see two possible approaches:\r\n\r\n1. Rewrite some of the underlying Go runtime support to expect multiple runtimes. This is probably the easiest approach, and involves creating another level of indirection. The Go TLS slot would point to a page of memory that contains an array of slots. There would also be a bitmap that indicates which slots are in use. If a new runtime starts up in the process it would find a free bit in the bitmap, claim that bit for itself (which translates to an offset in the array), and then put the TLS page it uses now in that slot. The bitmap needs to be shared by all Go runtimes in the same process so that the TLS index is the same for every thread. (If the TLS index changes for each thread, this _appears_ to interact badly with the Go Assembly pseudo-register for TLS access.) The bitmap could be shared among all runtimes in the process using something like named shared memory. \r\n\r\n2. Stop using the \"unreserved\" TLS index and buy-in to Windows' TLS system completely. That would involve implementing something like https://msdn.microsoft.com/en-us/library/windows/desktop/ms686997(v=vs.85).aspx . On the surface this seems like a simpler approach, but Go appears to do TLS accesses using a pseudo register. This would have to be converted somehow to instead call several Windows functions by the assembler. I haven't dug deeply into that approach yet. Also, it may have performance implications.\r\n\r\nI would love to get some feedback on the ideas. I'm pretty busy through September, and then I am physically relocating my residence in November. I may have some time in October, or in December. If I could get a good design and some buy in from more knowledgeable folks I would be a lot more motivated to work on it. :-)\r\n\r\n",
	"user": {
		"login": "nadiasvertex",
		"id": 2034108,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-17T15:19:40Z",
	"updated_at": "2016-08-17T15:24:02Z"
}
