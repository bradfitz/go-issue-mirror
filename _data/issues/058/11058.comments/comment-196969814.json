{
	"id": 196969814,
	"body": "@ianlancetaylor , thank you.\r\n\r\n@maruel , I know about the MSVC extension. However, that only works when using the MSVC toolchain, which Go does not currently support.  It requires a very specific kind of cooperation between the compiler, linker, and DLL loader. In addition, this mechanism doesn't work at all for DLLs before Vista, and may not be correctly implemented even in Vista (http://www.nynaeve.net/?p=189). That probably renders it useless for Go, which supports Windows XP.\r\n\r\nGCC and Clang appear to use different mechanisms to implement implicit TLS also, so... \r\n\r\nAdditionally, it doesn't look like TLS is as important to Go as it is to C/C++. That is, Go doesn't really support TLS as a concept in the language, and uses it sparingly in its own runtime. So TLS support doesn't necessarily need to be as... integrated.\r\n\r\nUnless I am wrong, it seems like it would be sufficient to find a way to keep Go DLLs from stomping on each other, and the various other language runtimes. The Windows TEB has a first-class TLS mechanism that requires explicit use of certain API functions. I would prefer to start here, if at all possible.",
	"user": {
		"login": "nadiasvertex",
		"id": 2034108,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-15T18:48:06Z",
	"updated_at": "2016-03-15T18:48:06Z"
}
