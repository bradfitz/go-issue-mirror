{
	"id": 165437943,
	"body": "It may or may not help you, but: I've once also had to implement some relocations-related code, for building contents of a \".rsrc\" section (embedded icons etc.) for Win32 for Go (the tool builds an .o/.syso file). Unfortunately, I don't remember what the calculations meant already (not sure if I even really understood them when writing the stuff), but in case it could help you in any way, the relevant code seems to be here:\r\nhttps://github.com/akavel/rsrc/blob/ba14da1f827188454a4591717fff29999010887f/coff/coff.go#L386-L387\r\n\r\nQuick explanation how the [Walk block in l.371-393](https://github.com/akavel/rsrc/blob/ba14da1f827188454a4591717fff29999010887f/coff/coff.go#L371-L393) works: it sequentially and recursively (DFS) walks through a [Coff struct](https://github.com/akavel/rsrc/blob/ba14da1f827188454a4591717fff29999010887f/coff/coff.go#L98-L110) (which represents a \"sketch\"/template of a Coff output file), and feeds a string representing the \"current path in the Coff struct\" (e.g. \"/Dir/Dirs[1]\" means coff.Dir.Dirs[1]) to the closure, while \"offset\" contains the byte position that the field would have in the final output file (it advances by virtue of the [freezeCommon2 call in l.392](https://github.com/akavel/rsrc/blob/ba14da1f827188454a4591717fff29999010887f/coff/coff.go#L392)). The closure updates contents of various fields which in the final file must be filled based on this offset.\r\n\r\nNot sure if that can or cannot be helpful for you; sorry if the latter, but just in case.",
	"user": {
		"login": "akavel",
		"id": 273837,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-17T12:16:57Z",
	"updated_at": "2015-12-17T12:16:57Z"
}
