{
	"id": 254526731,
	"body": "I have a scenario on Windows that has several pieces:\r\n* Go shared library (A.dll) that is generated using the steps above\r\n* Third-party COTS library that loads A.dll at Runtime and calls CGO exposed C functions\r\n* A Go application that uses CGO to load the third-party COTS library\r\n\r\nIn the scenario above, as soon as the third-party COTS library loads A.dll, it seems to conflict with the Go runtime that is actually running the application and the process faults with an error like this\r\n`fatal error: unexpected signal during runtime execution`\r\nThe stack trace generally looks like:\r\n`runtime.throw(0x67df97, 0x2a)\r\n        C:/Go/src/runtime/panic.go:566 +0x9c fp=0xc04234b4e8 sp=0xc04234b4c8`\r\n`runtime.sigpanic()\r\n        C:/Go/src/runtime/signal_windows.go:155 +0x19c fp=0xc04234b518 sp=0xc04234b4e8`\r\n`runtime.mallocgc(0x10, 0x0, 0x9e40d00, 0x0)\r\n        C:/Go/src/runtime/malloc.go:679 +0x361 fp=0xc04234b5b8 sp=0xc04234b518`\r\n`runtime.growslice(0x622520, 0x0, 0x0, 0x0, 0x5, 0x3, 0x8, 0x210)\r\n        C:/Go/src/runtime/slice.go:126 +0x255 fp=0xc04234b648 sp=0xc04234b5b8`\r\n\r\nFor testing purposes, if I disable the COTS library loading A.dll, then the system works as expected so I am pretty sure it is a conflict between the Go application runtime and the Go runtime in A.dll.  I made sure to compile both A.dll and the running Go application with the exact same version of the Go runtime (1.7.1) and using the same C compiler.  Is there anyway to work-around this limitation?",
	"user": {
		"login": "LukeMauldin",
		"id": 1440808,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-18T14:33:24Z",
	"updated_at": "2016-10-18T14:33:24Z"
}
