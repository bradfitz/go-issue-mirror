{
	"id": 196650701,
	"body": "\u003e The concern is that other code may use the \"arbitrary\" slot for its own purposes, thus accidentally destroying the TLS space for the runtime and causing catastrophic failure.\r\n\u003e\r\n\u003e Is that correct?\r\n\r\nKind of. What you have described can happen now, if some \"other code\" uses same TLS slot (but no one complained about this yet). This will certainly happens in the future, if Go program will load Go dll. They both use the same slot (unless we fix that problem).\r\n\r\n\u003e Special mention is made of DLLs, but I don't see why they are a bigger problem than static libraries. If stomping is done by another runtime, why should it matter if it is a DLL or a static library?\r\n\r\nThe problem as I see it is about two independent Go runtimes clashing. Whether second Go runtime lives in DLL or static libary does not matter. If Go DLL or static library is loaded by anything but Go executable, you should be good. But if Go executable loads Go DLL or static library, it will fail.\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-15T04:31:17Z",
	"updated_at": "2016-03-15T04:31:17Z"
}
