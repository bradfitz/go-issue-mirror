{
	"id": 51287403,
	"number": 7921,
	"state": "open",
	"title": "cmd/gc, bytes: re-slicing causes bytes.Buffer to always allocate on heap",
	"body": "\u003cpre\u003eWhat steps reproduce the problem?\n\n1. Download playground.zip\n2. Run go build -gcflags=-m bytes.go\n3. Run go build -gcflags=-m bytes2.go\n\nplayground/bytes: Resembles a simplified version of Go's bytes.Buffer, with the\nexception that NewBuffer returns Buffer{} instead of \u0026amp;Buffer{}.\nplayground/bytes2: Different implementation that avoids reslicing\n\nWhat happened?\n\n$ go build -gcflags=-m bytes.go\n# playground/bytes\nbytes/buffer.go:12: can inline NewBuffer\nbytes/buffer.go:57: can inline (*Buffer).Read\nbytes/buffer.go:69: can inline (*Buffer).Bytes\nbytes/buffer.go:12: leaking param: b to result ~anon1\nbytes/buffer.go:16: leaking param: b\nbytes/buffer.go:16: leaking param: b\nbytes/buffer.go:34: make([]byte, 2 * cap(b.buf) + n) escapes to heap\nbytes/buffer.go:16: leaking param: b\nbytes/buffer.go:44: leaking param: b\nbytes/buffer.go:44: leaking param: b\nbytes/buffer.go:52: leaking param: b\nbytes/buffer.go:52: (*Buffer).Write p does not escape\nbytes/buffer.go:57: (*Buffer).Read b does not escape\nbytes/buffer.go:57: (*Buffer).Read p does not escape\nbytes/buffer.go:69: (*Buffer).Bytes b does not escape\n# command-line-arguments\n./bytes.go:9: inlining call to bytes.NewBuffer\n./bytes.go:13: inlining call to Read\n./bytes.go:18: inlining call to Bytes\n./bytes.go:9: moved to heap: myBuf\n./bytes.go:11: myBuf escapes to heap\n./bytes.go:8: make([]byte, 4) escapes to heap\n./bytes.go:14: myBuf escapes to heap\n./bytes.go:8: make([]byte, 4) escapes to heap\n./bytes.go:11: main []byte literal does not escape\n./bytes.go:12: main make([]byte, 2) does not escape\n./bytes.go:13: main myBuf does not escape\n./bytes.go:14: main []byte literal does not escape\n./bytes.go:18: main myBuf does not escape\n\n\n$ go build -gcflags=-m bytes2.go\n# playground/bytes2\nbytes2/buffer.go:13: can inline NewBuffer\nbytes2/buffer.go:61: can inline (*Buffer).Read\nbytes2/buffer.go:73: can inline (*Buffer).Bytes\nbytes2/buffer.go:13: leaking param: b to result ~anon1\nbytes2/buffer.go:38: make([]byte, size) escapes to heap\nbytes2/buffer.go:17: (*Buffer).grow b does not escape\nbytes2/buffer.go:47: (*Buffer).Grow b does not escape\nbytes2/buffer.go:54: (*Buffer).Write b does not escape\nbytes2/buffer.go:54: (*Buffer).Write p does not escape\nbytes2/buffer.go:61: (*Buffer).Read b does not escape\nbytes2/buffer.go:61: (*Buffer).Read p does not escape\nbytes2/buffer.go:73: (*Buffer).Bytes b does not escape\n# command-line-arguments\n./bytes2.go:9: inlining call to bytes2.NewBuffer\n./bytes2.go:13: inlining call to Read\n./bytes2.go:18: inlining call to Bytes\n./bytes2.go:8: main make([]byte, 4) does not escape\n./bytes2.go:11: main myBuf does not escape\n./bytes2.go:11: main []byte literal does not escape\n./bytes2.go:12: main make([]byte, 2) does not escape\n./bytes2.go:13: main myBuf does not escape\n./bytes2.go:14: main myBuf does not escape\n./bytes2.go:14: main []byte literal does not escape\n./bytes2.go:18: main myBuf does not escape\n# command-line-arguments\n\n\nWhat should have happened instead?\n\nThis shouldn't be happening with playground/bytes:\n\n./bytes.go:9: moved to heap: myBuf\n./bytes.go:11: myBuf escapes to heap\n./bytes.go:8: make([]byte, 4) escapes to heap\n./bytes.go:14: myBuf escapes to heap\n./bytes.go:8: make([]byte, 4) escapes to heap\n\nA re-slicing shouldn't cause playground/bytes's Buffer to always be heap allocated.\n\nIt should be like playground/bytes2, which avoids heap allocation until a resize happens:\n\nbytes2/buffer.go:38: make([]byte, size) escapes to heap\n\nPlease provide any additional information below.\n\nIf this is working as intended, the implementation of bytes.Buffer should change to\nallow it to be completely stack allocated. The playground/bytes2 implementation is\ncompletely stack allocated until the initial buffer needs to be resized. This allows it\nto operate on the stack, avoiding a heap allocation if possible.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/7921/0/playground.zip\"\u003eplayground.zip\u003c/a\u003e (5470 bytes)",
	"user": {
		"login": "lukescott",
		"id": 486224,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"created_at": "2014-05-01T23:29:29Z",
	"updated_at": "2015-04-14T19:45:23Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
