{
	"id": 65320429,
	"number": 10291,
	"state": "closed",
	"title": "spec: Interface method specifiers",
	"body": "The spec says this: https://golang.org/ref/spec#MethodSpec\r\n\r\nAn interface type specifies a method set called its interface. A variable of interface type can store a value of any type with a method set that is any superset of the interface. Such a type is said to implement the interface. The value of an uninitialized variable of interface type is nil.\r\n\r\nInterfaceType      = \"interface\" \"{\" { MethodSpec \";\" } \"}\" .\r\nMethodSpec         = MethodName Signature | InterfaceTypeName .\r\nMethodName         = identifier .\r\nInterfaceTypeName  = TypeName .\r\n\r\nShouldn't the MethodSpec be equal to (MethodName Signature) | InterfaceTypeName?\r\n\r\nBecause that implies that you can have a MethodName next to a InterfaceTypeName and it will be valid? But having the parentheses means that those are grouped together, thus you either get InterfaceTypeName or MethodName + Signature.",
	"user": {
		"login": "nhooyr",
		"id": 10180857,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2015-03-30T22:56:58Z",
	"created_at": "2015-03-30T22:46:30Z",
	"updated_at": "2016-06-25T02:04:20Z"
}
