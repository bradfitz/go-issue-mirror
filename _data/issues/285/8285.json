{
	"id": 51287977,
	"number": 8285,
	"state": "closed",
	"title": "net/http: Please support client-side Hijack",
	"body": "\u003cpre\u003eWith the deprecation notice at \u003ca href=\"http://golang.org/pkg/net/http/httputil/#NewClientConn\"\u003ehttp://golang.org/pkg/net/http/httputil/#NewClientConn\u003c/a\u003e\nit would be good to have client-side HTTP hijack support in a supported way.\n\nCurrent RoundTripper etc force a request-reply cycle. I'm not sure what the ideal API\nwould look like; for my current use case, calling a hypothetical Response.Hijack before\nreading Response.Body would be enough -- but I can see others arguing they'd like to be\nin charge of reading the response headers too.\n\nRelated, it would be nice to be able to interact with the connection pool. Imagine\ntalking a back-and-forth protocol as a consequence of a HTTP request, concluding that\nconversation, leaving the connection open, and letting the next HTTP request use it.\nThis applies both on the client and server side. (Ugly workarounds: a fake Listener for\nserver-side, that returns the previously-hijacked connections from Accept; for\nclient-side, a Dialer that does a non-blocking receive on a recycle channel first,\nfalling back to normal Dial if none are there -- this would duplicate the\nconnectMethodKey logic in net/http.)\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-03-28T21:21:26Z",
	"created_at": "2014-06-25T01:12:18Z",
	"updated_at": "2016-03-28T21:21:26Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
