{
	"id": 57777140,
	"number": 9892,
	"state": "closed",
	"title": "runtime: implement cputicks using MRC(PMCCNTR) on arm",
	"body": "Current implementation of cputicks on ARM is very low precision which hurts block profile and tracer.\r\n\r\nhttp://gperftools.googlecode.com/svn/trunk/src/base/cycleclock.h\r\ncontains lots of goodness, and in particular cputicks implementation for arm:\r\n\r\n```c\r\n#elif defined(ARMV3)\r\n#if defined(ARMV6)  // V6 is the earliest arch that has a standard cyclecount\r\n    uint32 pmccntr;\r\n    uint32 pmuseren;\r\n    uint32 pmcntenset;\r\n    // Read the user mode perf monitor counter access permissions.\r\n    asm volatile (\"mrc p15, 0, %0, c9, c14, 0\" : \"=r\" (pmuseren));\r\n    if (pmuseren \u0026 1) {  // Allows reading perfmon counters for user mode code.\r\n      asm volatile (\"mrc p15, 0, %0, c9, c12, 1\" : \"=r\" (pmcntenset));\r\n      if (pmcntenset \u0026 0x80000000ul) {  // Is it counting?\r\n        asm volatile (\"mrc p15, 0, %0, c9, c13, 0\" : \"=r\" (pmccntr));\r\n        // The counter is set up to count every 64th cycle\r\n        return static_cast\u003cint64\u003e(pmccntr) * 64;  // Should optimize to \u003c\u003c 6\r\n      }\r\n    }\r\n#endif\r\n```\r\n\r\nShould consider switching to it.\r\n\r\nThere is also an impl for power processors.\r\n",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 6,
	"closed_at": "2015-07-21T03:16:09Z",
	"created_at": "2015-02-16T08:36:03Z",
	"updated_at": "2016-07-20T14:27:17Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
