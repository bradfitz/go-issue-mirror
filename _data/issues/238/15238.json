{
	"id": 147551216,
	"number": 15238,
	"state": "open",
	"title": "cmd/compile: eliminate write barrier for self-referencing pointer",
	"body": "Go code often does something like:\r\n```\r\ntype Buffer struct {\r\n   buf []byte\r\n   bootstrap [64]byte\r\n}\r\nvar b *Buffer = ...\r\nb.buf = b.bootstrap[:]\r\n```\r\nI don't think we need a write barrier when we write the slice pointer into b.buf, because the pointer always points from an object into (part of) itself.\r\n\r\nBut see the discussion in #14855 .  Writing a pointer to the heap without a write barrier is tricky in the presence of races.  Make sure the arguments in that issue don't apply here (I don't think they do, writing a self-pointer is like writing nil).\r\n\r\n@aclements ",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"comments": 2,
	"created_at": "2016-04-11T20:48:08Z",
	"updated_at": "2016-04-11T22:47:36Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
