{
	"id": 199072734,
	"body": "Sorry for late reply (I lost your reply). I have added leakCheck, but the package already has interestingGoroutines. The TestTransportPersistConnLeak know fails every time - I am sure that is not what you want. Please, let me know what to do. Thank you.\r\n\r\n```\r\nC:\\dev\\go\\src\\net\\http\u003egit diff\r\ndiff --git a/src/net/http/transport_test.go b/src/net/http/transport_test.go\r\nindex 63fa7ce..e36f645 100644\r\n--- a/src/net/http/transport_test.go\r\n+++ b/src/net/http/transport_test.go\r\n@@ -979,8 +979,43 @@ func waitNumGoroutine(nmax int) int {\r\n \treturn nfinal\r\n }\r\n \r\n+// leakCheck snapshots the currently-running goroutines and returns a\r\n+// function to be run at the end of tests to see whether any\r\n+// goroutines leaked.\r\n+func leakCheck(t testing.TB) func() {\r\n+\torig := map[string]bool{}\r\n+\tfor _, g := range interestingGoroutines() {\r\n+\t\torig[g] = true\r\n+\t}\r\n+\treturn func() {\r\n+\t\t// Loop, waiting for goroutines to shut down.\r\n+\t\t// Wait up to 5 seconds, but finish as quickly as possible.\r\n+\t\tdeadline := time.Now().Add(5 * time.Second)\r\n+\t\tfor {\r\n+\t\t\tvar leaked []string\r\n+\t\t\tfor _, g := range interestingGoroutines() {\r\n+\t\t\t\tif !orig[g] {\r\n+\t\t\t\t\tleaked = append(leaked, g)\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tif len(leaked) == 0 {\r\n+\t\t\t\treturn\r\n+\t\t\t}\r\n+\t\t\tif time.Now().Before(deadline) {\r\n+\t\t\t\ttime.Sleep(50 * time.Millisecond)\r\n+\t\t\t\tcontinue\r\n+\t\t\t}\r\n+\t\t\tfor _, g := range leaked {\r\n+\t\t\t\tt.Errorf(\"Leaked goroutine: %v\", g)\r\n+\t\t\t}\r\n+\t\t\treturn\r\n+\t\t}\r\n+\t}\r\n+}\r\n+\r\n // tests that persistent goroutine connections shut down when no longer desired.\r\n func TestTransportPersistConnLeak(t *testing.T) {\r\n+\tdefer leakCheck(t)()\r\n \tsetParallel(t)\r\n \tdefer afterTest(t)\r\n \tgotReqCh := make(chan bool)\r\n\r\nC:\\dev\\go\\src\\net\\http\u003ego test -short\r\n--- FAIL: TestTransportPersistConnLeak (5.16s)\r\n\ttransport_test.go:1009: Leaked goroutine: testing.tRunner.func1(0x10b5c480)\r\n\t\t\tc:/dev/go/src/testing/testing.go:530 +0x1d6\r\n\t\ttesting.tRunner(0x10b5c480, 0x10c56ecc)\r\n\t\t\tc:/dev/go/src/testing/testing.go:549 +0x99\r\n\t\ttesting.RunTests(0x802400, 0x9259a0, 0x158, 0x158, 0x40da01)\r\n\t\t\tc:/dev/go/src/testing/testing.go:736 +0x358\r\n\t\ttesting.(*M).Run(0x10c56f84, 0x340018)\r\n\t\t\tc:/dev/go/src/testing/testing.go:672 +0x79\r\n\t\tnet/http_test.TestMain(0x10c56f84)\r\n\t\t\tc:/dev/go/src/net/http/main_test.go:22 +0x21\r\n\t\tmain.main()\r\n\t\t\tnet/http/_test/_testmain.go:784 +0x100\r\n\ttransport_test.go:1009: Leaked goroutine: testing.tRunner.func1(0x10bc8000)\r\n\t\t\tc:/dev/go/src/testing/testing.go:543 +0x232\r\n\t\ttesting.tRunner(0x10bc8000, 0x802e00)\r\n\t\t\tc:/dev/go/src/testing/testing.go:549 +0x99\r\n\t\tcreated by testing.(*T).run\r\n\t\t\tc:/dev/go/src/testing/testing.go:578 +0x2b8\r\n\ttransport_test.go:1009: Leaked goroutine: testing.tRunner.func1(0x10ed2480)\r\n\t\t\tc:/dev/go/src/testing/testing.go:543 +0x232\r\n\t\truntime.Goexit()\r\n\t\t\tc:/dev/go/src/runtime/panic.go:340 +0xde\r\n\t\ttesting.(*common).SkipNow(0x10ed2480)\r\n\t\t\tc:/dev/go/src/testing/testing.go:459 +0x32\r\n\t\ttesting.(*common).Skip(0x10ed2480, 0x10bcfe48, 0x1, 0x1)\r\n\t\t\tc:/dev/go/src/testing/testing.go:442 +0x61\r\n\t\tnet/http_test.TestTransportResponseHeaderTimeout(0x10ed2480)\r\n\t\t\tc:/dev/go/src/net/http/transport_test.go:1425 +0x20b\r\n\t\ttesting.tRunner(0x10ed2480, 0x802e30)\r\n\t\t\tc:/dev/go/src/testing/testing.go:547 +0x8c\r\n\t\tcreated by testing.(*T).run\r\n\t\t\tc:/dev/go/src/testing/testing.go:578 +0x2b8\r\n\ttransport_test.go:1009: Leaked goroutine: testing.tRunner.func1(0x10ed2500)\r\n\t\t\tc:/dev/go/src/testing/testing.go:543 +0x232\r\n\t\truntime.Goexit()\r\n\t\t\tc:/dev/go/src/runtime/panic.go:340 +0xde\r\n\t\ttesting.(*common).SkipNow(0x10ed2500)\r\n\t\t\tc:/dev/go/src/testing/testing.go:459 +0x32\r\n\t\ttesting.(*common).Skip(0x10ed2500, 0x10bcdf48, 0x1, 0x1)\r\n\t\t\tc:/dev/go/src/testing/testing.go:442 +0x61\r\n\t\tnet/http_test.TestTransportCancelRequest(0x10ed2500)\r\n\t\t\tc:/dev/go/src/net/http/transport_test.go:1497 +0x1ab\r\n\t\ttesting.tRunner(0x10ed2500, 0x802d38)\r\n\t\t\tc:/dev/go/src/testing/testing.go:547 +0x8c\r\n\t\tcreated by testing.(*T).run\r\n\t\t\tc:/dev/go/src/testing/testing.go:578 +0x2b8\r\n\ttransport_test.go:1009: Leaked goroutine: testing.tRunner.func1(0x10ed2600)\r\n\t\t\tc:/dev/go/src/testing/testing.go:543 +0x232\r\n\t\truntime.Goexit()\r\n\t\t\tc:/dev/go/src/runtime/panic.go:340 +0xde\r\n\t\ttesting.(*common).SkipNow(0x10ed2600)\r\n\t\t\tc:/dev/go/src/testing/testing.go:459 +0x32\r\n\t\ttesting.(*common).Skip(0x10ed2600, 0x10bd2f48, 0x1, 0x1)\r\n\t\t\tc:/dev/go/src/testing/testing.go:442 +0x61\r\n\t\tnet/http_test.TestCancelRequestWithChannel(0x10ed2600)\r\n\t\t\tc:/dev/go/src/net/http/transport_test.go:1607 +0x1ab\r\n\t\ttesting.tRunner(0x10ed2600, 0x8027b4)\r\n\t\t\tc:/dev/go/src/testing/testing.go:547 +0x8c\r\n\t\tcreated by testing.(*T).run\r\n\t\t\tc:/dev/go/src/testing/testing.go:578 +0x2b8\r\n\ttransport_test.go:1009: Leaked goroutine: testing.tRunner.func1(0x10ed2680)\r\n\t\t\tc:/dev/go/src/testing/testing.go:543 +0x232\r\n\t\ttesting.tRunner(0x10ed2680, 0x8027b0)\r\n\t\t\tc:/dev/go/src/testing/testing.go:549 +0x99\r\n\t\tcreated by testing.(*T).run\r\n\t\t\tc:/dev/go/src/testing/testing.go:578 +0x2b8\r\n\ttransport_test.go:1009: Leaked goroutine: testing.tRunner.func1(0x10ed3280)\r\n\t\t\tc:/dev/go/src/testing/testing.go:543 +0x232\r\n\t\ttesting.tRunner(0x10ed3280, 0x802d48)\r\n\t\t\tc:/dev/go/src/testing/testing.go:549 +0x99\r\n\t\tcreated by testing.(*T).run\r\n\t\t\tc:/dev/go/src/testing/testing.go:578 +0x2b8\r\nFAIL\r\nexit status 1\r\nFAIL\tnet/http\t21.672s\r\n\r\nC:\\dev\\go\\src\\net\\http\u003e\r\n```\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-21T00:57:39Z",
	"updated_at": "2016-03-21T00:57:39Z"
}
