{
	"id": 66071997,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eThe alg for arrays only needs a hash and an equal (it can use runtime·memprint and\nruntime·memcopy for the other fields).\n\nThis is quite easy to define as closures, for example\n\nfunc ArrayOf(count int, elem Type) Type {\n    typ := elem.(*rtype)\n    ...\n    array.alg.equal = func(eq *bool, s uintptr, a, b unsafe.Pointer) {\n        p, q := uintptr(a), uintptr(b)\n        for i := 0; i \u0026lt; count; i++ {\n            typ.alg.equal(eq, typ.size, unsafe.Pointer(p), unsafe.Pointer(q))\n            if !*eq {\n                return\n            }\n            p += typ.size\n            q += typ.size\n        }\n    }\n    ...\n}\n\nbut now that the function representation has changed, we can't put Go-generated\nclosures in alg, and we can't really call alg fields directly safely.\n\nShould we modify runtime.Alg to have FuncVal fields instead?\u003c/pre\u003e",
	"user": {
		"login": "remyoudompheng",
		"id": 175246,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-02-24T23:52:27Z",
	"updated_at": "2014-12-22T06:20:34Z"
}
