{
	"id": 109484920,
	"number": 12819,
	"state": "open",
	"title": "x/mobile/cmd/gomobile: gomobile bind generates binding code on every execution",
	"body": "This can't really be called a bug, but it is potentially sub-par behaviour. It is a follow on from a suggestion I made in https://github.com/golang/go/issues/12245.\r\n\r\n`gomobile bind` currently generates binding code every time it is run. This has the following side effects:\r\n\r\n   * __Access to source for debugging:__ When debugging application errors in the wild, it is useful to have the source available. In the case of native libraries, we can use vendoring or the native package manager for versioning. With `gobind` however, the source is not easily available. It can be generated by manually running `gobind`, but there are a few concerns with this approach.\r\n      * _The options passed to `gobind` are opaque to the user:_ Currently there are no options, but if this changes in the future it becomes a guessing game.\r\n      * _Upgrades of the `gobind` tool can result in source changes:_ For production releases we will need to track the exact version of `gomobile` used to generate the library. This is fine once `gobind` is stable (for example with cgo now). However, it is problematic for early adopters since changes are being made to `gobind` on a regular basis.\r\n\r\n   * __Incremental builds:__ In an SDK app, `gomobile bind` must be run on source changes to regenerate the new framework/aar. There are two ways of approaching this. Manually run `gomobile bind` or have the IDE (XCode/Android Studio) invoke it before compiling the ObjC/Java source. The former, while not a chore, can be error prone. The latter is more robust, but results in the framework/aar being rebuilt even if no go source is changed. This adds delays to the code -\u003e compile -\u003e test cycle and negatively impacts our workflow. It also takes away one of the advantages of go which are its near instantaneous build times.\r\n\r\nOne solution would be for `gomobile bind` to accept a command line flag which specifies the directory in which to generate code and then skip regenerating code on every run.\r\n\r\nThis is more a nice to have rather than a need to have since there are workarounds present.\r\n",
	"user": {
		"login": "sridharv",
		"id": 326998,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "hyangah",
		"id": 4999471,
		"type": "User",
		"site_admin": false
	},
	"comments": 9,
	"created_at": "2015-10-02T12:49:10Z",
	"updated_at": "2016-03-07T22:01:19Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
