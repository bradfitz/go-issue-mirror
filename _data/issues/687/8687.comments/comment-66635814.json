{
	"id": 66635814,
	"body": "I've done some benchmarks today.  \r\nAt first I ran a cpu-heavy program and modified it to use hundreds of goroutines. To my surprise,it actually ran ~5% faster if I set the system clock resolution to 15.6ms(that is default value)  \r\n\r\nThen I ran [this benchmark](https://github.com/julienschmidt/go-http-routing-benchmark/)\r\nI didn't look into the code, I guess it use only one goroutine, still pure cpu thing, and get still the same result.  \r\n\r\nThen I wrote a http benchmark [here](http://play.golang.org/p/VDj4AsF-07)\r\nThis time it ran a lot faster(~50%) with 1ms system clock resolution.\r\n\r\nSo I guess, if your program don't use much IO (cause less context switches of goroutine), you can discard the system clock resoluton change.\r\n",
	"user": {
		"login": "defia",
		"id": 3764189,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-11T15:33:30Z",
	"updated_at": "2014-12-11T15:33:30Z"
}
