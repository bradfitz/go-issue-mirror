{
	"id": 52038579,
	"number": 9331,
	"state": "closed",
	"title": "differing sync.Pool behavior with -race enabled",
	"body": "Version: `go version go1.3.2 darwin/amd64`\r\nRunning on OSX 10.9, intel x86_64\r\n\r\nWhen running a simple program using sync.Pool, the behavior is different with and without the `-race` flag enabled.\r\n\r\nSee example program:\r\n```\r\npackage main\r\n\r\nimport (\r\n        \"fmt\"\r\n        \"sync\"\r\n)\r\n\r\nfunc main() {\r\n        pool := \u0026sync.Pool{\r\n                New: func() interface{} {\r\n                        return make([]byte, 1)\r\n                },\r\n        }\r\n        buf := pool.Get().([]byte)\r\n        buf[0] = 'z'\r\n        pool.Put(buf)\r\n        buf = nil\r\n        buf2 := pool.Get().([]byte)\r\n        fmt.Printf(\"%c\\n\", buf2[0])\r\n}\r\n```\r\n\r\nWithout `-race` the output is `z`. With `-race` the output is ` `. \r\n\r\nThe documentation for `sync.Pool` states that \"Callers should not assume any relation between values passed to Put and the values returned by Get.\" Nonetheless, I still find it unexpected as a user that this behavior is different when the race detector is enabled.",
	"user": {
		"login": "amidvidy",
		"id": 363757,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2014-12-15T21:11:39Z",
	"created_at": "2014-12-15T21:05:39Z",
	"updated_at": "2016-06-25T01:56:29Z"
}
