{
	"id": 240373497,
	"body": "To flesh out the `go generate` idea a bit more I put together `sortGen` (I'm sure others have done similar things before me, nothing immediately turned up in my searches):\r\n\r\nhttps://github.com/myitcv/sorter/tree/master/cmd/sortGen\r\n\r\nSimply define an order function:\r\n\r\n```go\r\nfunc orderByName(persons []person, i, j int) sorter.Order {\r\n    return persons[i].name \u003c persons[j].name\r\n}\r\n```\r\n\r\nthen run `go generate` which will generate a function with the signature:\r\n\r\n```go\r\nfunc sortByName(persons []person)\r\n```\r\n\r\nThe example is more complete and gives details on the rules etc.\r\n\r\n`sortGen` would fall into the category of core, oft-used generators that I was trying to define [earlier](https://github.com/golang/go/issues/16721#issuecomment-240190146) that could be distributed with Go, thereby obviating the need for an additional `go get`",
	"user": {
		"login": "myitcv",
		"id": 3374574,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-17T10:26:19Z",
	"updated_at": "2016-08-17T10:26:19Z"
}
