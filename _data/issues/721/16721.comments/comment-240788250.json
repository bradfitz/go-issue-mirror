{
	"id": 240788250,
	"body": "@jimmyfrasche - thanks for summarising the various pros/cons above.\r\n\r\nMight I suggest we subdivide point 2, because the pros/cons for go generate are quite different to an editor macro (for example)\r\n\r\nAs far as a go generate approach is concerned (in light of [sortGen](https://github.com/myitcv/sorter/tree/master/cmd/sortGen)):\r\n\r\n2.1: go generate\r\n\r\n* pro:\r\n * simple\r\n * can do it now if you care and ignore it if you don't\r\n * zero runtime performance hit\r\n * compile time optimisation possible via inlining, SSA\r\n * no magic, no use of interface{}, no need to go near reflection etc\r\n* con: \r\n * go generate programs must be installed separately (could distribute core generators with Go binaries)\r\n * calling `go generate` prior to `go test` etc is an additional part of development workflow\r\n\r\nOn the second con, I would argue it's a good thing to be encouraging people towards go generate (hence it's not a con to my mind), but I've separated that opinion from the point itself because I would guess most people don't (currently) use go generate.\r\n",
	"user": {
		"login": "myitcv",
		"id": 3374574,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-18T17:00:53Z",
	"updated_at": "2016-08-18T17:00:53Z"
}
