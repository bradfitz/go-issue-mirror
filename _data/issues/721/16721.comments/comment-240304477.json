{
	"id": 240304477,
	"body": "@bradfitz So long as we're using reflection, why not go all the way and make the comparison function an interface as well? So you'd have a Go type of:\r\n`func Slice(slice, less interface{})`\r\nand an \"effective\" type of:\r\n`func Slice(slice []T, less func(T, T) bool)`\r\n\r\nYou're doing reflection already, so it doesn't seem like much of an addition to verify everything at runtime. I suppose the one concern might be whether you could make it as performant? I'd have to think more about that one...\r\n\r\nAs for the issue of copying large values, I agree with previous comments that simply having `less` take pointers (i.e., `func(*T, *T) bool`) would solve the problem and would have two benefits: a) you'd avoid the clunky closure and, b) you could reuse a comparison function over and over again (including comparison functions exported for consumers of your package).\r\n\r\nI have a sample implementation that I made a while ago that does this, albeit without the performance optimization of doing up-front per-type function creation (it just does the expensive reflection every time and then forgets the results): https://gist.github.com/joshlf/61e711195709427058ae0295b21ffba8",
	"user": {
		"login": "joshlf",
		"id": 1046063,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-17T03:31:00Z",
	"updated_at": "2016-08-17T03:31:00Z"
}
