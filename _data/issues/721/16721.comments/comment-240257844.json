{
	"id": 240257844,
	"body": "@bradfitz,thank you for putting this together and thoughtfully answering our questions.  If you don't mind, I have a few more to ask:\r\n\r\n- Would you be willing to share your prototype reference implementation?  I promise to be respectful in looking at it with the lens of experimentation.\r\n\r\n\u003e For speed, this would not be purely reflect-based (except for one call to to get the slice length). The implementation would generate a custom swapper as needed for the type of the slice elements such that it's compatible with the GC \u0026 write barriers. I did a prototype of this which shows that it's as fast as the typical way.\r\n\r\n- You propose mutating a user-provided `interface{}` function parameter that represents some slice.  Unless I am mistaking, this would become the first and only place the standard library mutates a bare `interface{}` value.  Is that correct, and does that matter?  Reflecting on a `data interface{}` for reading/describing is well-defined in the standard library, however.\r\n\r\nI am on the fence about the proposal for concerns of hand-wavy standard library purity but not doctrinally inflexible â€” FWIW.  What extra burdens of proof (e.g., documented behavioral contract) would mutating `data interface{}` require?\r\n\r\n- What is the intended behavior if a user passes in a type backed by a non-slice `reflect.Kind`?",
	"user": {
		"login": "matttproud",
		"id": 46149,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-16T22:20:47Z",
	"updated_at": "2016-08-16T22:27:58Z"
}
