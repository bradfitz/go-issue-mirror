{
	"id": 240835387,
	"body": "\u003e I don't know if another sort package counts as a separate use case :Ã¾.\r\n\r\n@jimmyfrasche Eh, separate or not it's still a reason to expose `Swapper`. People have reasons to write stuff besides the stdlib qSort. (In my case, the reason's an up to 5x speedup.) It's nice if those packages can do what `sort` does, rather than `sort` having magic that might break with next Go release if I try copying it. There is non-sort stuff you can do that permutes arrays: maintain a heap priority queue more nicely than `container/heap`. Merge arrays. Get median or percentiles a bit faster than if you sort the whole thing. \r\n\r\nI don't think you have to prove `NewSwapper` would get a ton of use, though; it seems like the right way to do `SortSlice` anyway. It keeps runtime magic in `reflect`, which already has a lot of it, rather than scattering it around the stdlib. It keeps to a minimum how much of the stdlib is available-to-Go-team-but-not-to-you magic. It isn't an especially nasty API, isn't unsafe, doesn't expose a version-specific runtime knob. I know there's a high bar for adding code to std, but if this'll be written anyhow, in this particular case it doesn't seem bad to expose.",
	"user": {
		"login": "twotwotwo",
		"id": 328644,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-18T19:47:46Z",
	"updated_at": "2016-08-18T19:48:37Z"
}
