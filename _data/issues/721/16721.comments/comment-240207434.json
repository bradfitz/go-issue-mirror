{
	"id": 240207434,
	"body": "Can we teach compiler to handle both cases:\r\n\r\n```go\r\nvar s []int\r\nsort(s, func(a, b int) bool { return a \u003c b; })\r\n```\r\n\r\n```go\r\nvar s []GiantType\r\nsort(s, func(a, b *GiantType) bool { return a.prio \u003c b.prio; })\r\n```\r\n\r\nAlso not sure if it's worth worrying about copy mechanics. Perhaps compiler could elide copies somehow? Inline the closure? If it's a pure function, why not. And another point is that if you worry about copying, sort does a lot of swaps anyway, so maybe change data structure. \r\n\r\nBut anyways, I don't like the idea of having indices if we can do generics in the compiler itself. Most built-in functions act as generic functions.",
	"user": {
		"login": "nsf",
		"id": 12567,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 3,
		"+1": 3
	},
	"created_at": "2016-08-16T19:14:06Z",
	"updated_at": "2016-08-16T19:14:06Z"
}
