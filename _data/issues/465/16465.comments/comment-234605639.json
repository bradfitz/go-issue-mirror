{
	"id": 234605639,
	"body": "Thanks for an excellent stand-alone test case.\r\n\r\nFWIW, this behavior changed in 4d2ac544a437aaf7bbd78d1a46baa5108945f06e which was a follow-up to 5dd372bd1e70949a432d9b7b8b021d13abf584d1.\r\n\r\nA patch like,\r\n\r\n```patch\r\ndiff --git a/src/net/http/transport.go b/src/net/http/transport.go\r\nindex 9164d0d..e715a03 100644\r\n--- a/src/net/http/transport.go\r\n+++ b/src/net/http/transport.go\r\n@@ -1383,7 +1383,9 @@ func (pc *persistConn) readLoop() {\r\n                if err == nil {\r\n                        resp, err = pc.readResponse(rc, trace)\r\n                } else {\r\n-                       err = errServerClosedConn\r\n+                       if err == io.EOF {\r\n+                               err = errServerClosedConn\r\n+                       }\r\n                        closeErr = err\r\n                }\r\n```\r\n\r\n... fixes your test case, but breaks this:\r\n\r\n```\r\n$ go test -v -run=TestRetryIdempotentRequestsOnError -count=5 net/http\r\n=== RUN   TestRetryIdempotentRequestsOnError\r\n--- FAIL: TestRetryIdempotentRequestsOnError (0.00s)\r\n        transport_test.go:2566: Get http://127.0.0.1:50091: read tcp 127.0.0.1:38416-\u003e127.0.0.1:50091: read: connection reset by peer\r\n=== RUN   TestRetryIdempotentRequestsOnError\r\n--- PASS: TestRetryIdempotentRequestsOnError (0.00s)\r\n        transport_test.go:2573: finished after 0 runs\r\n=== RUN   TestRetryIdempotentRequestsOnError\r\n--- FAIL: TestRetryIdempotentRequestsOnError (0.01s)\r\n        transport_test.go:2566: Get http://127.0.0.1:35428: read tcp 127.0.0.1:56660-\u003e127.0.0.1:35428: read: connection reset by peer\r\n=== RUN   TestRetryIdempotentRequestsOnError\r\n--- PASS: TestRetryIdempotentRequestsOnError (0.00s)\r\n        transport_test.go:2573: finished after 0 runs\r\n=== RUN   TestRetryIdempotentRequestsOnError\r\n--- FAIL: TestRetryIdempotentRequestsOnError (0.00s)\r\n        transport_test.go:2566: Get http://127.0.0.1:34613: read tcp 127.0.0.1:55003-\u003e127.0.0.1:34613: read: connection reset by peer\r\nFAIL\r\nexit status 1\r\nFAIL    net/http        0.025s\r\n```\r\n\r\n(Note how it becomes flaky)\r\n\r\nWhat's happening is that the HTTP transport (client code) is interpreting any read error from the server while the client is idle as the HTTP server just getting bored of us and disconnecting. The errors can take various forms: io.EOF, `read: connection reset by peer`, etc.\r\n\r\nI suppose we could write a function to detect more of them, but they also vary by OS (Windows vs Unix, especially) and there's nothing in the net package to help us distinguish.\r\n\r\nMaybe there's something safe we can do for Go 1.7. I'll think.\r\n\r\n@ianlancetaylor, any thoughts?\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-22T17:30:37Z",
	"updated_at": "2016-07-22T17:30:37Z"
}
