{
	"id": 68220427,
	"body": "\u003e The spec says:\r\n\u003e ...\r\n\u003e It doesn't say x must be the \"int\" type, and T must be the \"string\" type.\r\n\r\nI was rather considering what does it say. Particularly [it gives](https://golang.org/ref/spec#Conversions_to_and_from_a_string_type) example of typed string conversion:\r\n\r\n```\r\ntype MyString string\r\nMyString(0x65e5)  // \"\\u65e5\" == \"日\" == \"\\xe6\\x97\\xa5\"\r\n```\r\n\r\nAn example of typed int would make it cover all corners:\r\n\r\n```\r\ntype MyUint uint64\r\nstring(MyUint(0x2318)) // \"\\u2318\" == \"⌘\" == \"\\xe2\\x8c\\x98\"\r\n```\r\n\r\n\u003e What do you want to extend go vet to check for?\r\n\r\nWhat bit me was refactoring `type T uint64` -\u003e `type T string`, after discovering the conversion was implicit I fixed the code around and thought it was unintuitive. Possibly I might be alone in this opinion, retrospectively I see go vet warn on user-typed int to user-typed string conversion handy. That's all.",
	"user": {
		"login": "rjeczalik",
		"id": 1162017,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-28T21:38:50Z",
	"updated_at": "2014-12-28T21:41:31Z"
}
