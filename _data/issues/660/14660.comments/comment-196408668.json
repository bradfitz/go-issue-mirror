{
	"id": 196408668,
	"body": "Thanks Bob.\n\nI think that—given the recurring theme of 'net/context not being clear\nabout usage'—some of this could be addressed through documentation, if API\nchanges aren't palatable. It's not the first time I've seen confusion about\nhow it works/how to use it across the mailing list/SO/forums/etc.\n\n(to address another comment: net/context exists to replace mutex-protected\nmaps)\n\n\nOn Mon, Mar 14, 2016 at 9:48 AM Bob Ziuchkovski \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e Sure. Terminated() and TimeRemaining() are mostly synonymous with the\n\u003e existing Done() and Deadline(). In terms of the changes there, I think\n\u003e Terminated() better conveys that the context was actually canceled. I\n\u003e believe a x/net/context could finish it's work and be \"done\" but the\n\u003e Done() channel wouldn't close unless an expiration or CancelFunc were\n\u003e fired.\n\u003e\n\u003e For TimeRemaining() vs Deadline(), there's more value (for me anyway) in\n\u003e knowing how much time is left vs an expiration date. I can't personally\n\u003e think of a case where I'd want the Deadline() date vs simply knowing how\n\u003e much time (if any) is left. This isn't a major concern, but just something\n\u003e to discuss.\n\u003e\n\u003e Adding the WithValue and WithTimeout methods to the interface, like I've\n\u003e done, definitely makes it \"fatter\", so that could be a downside. I believe\n\u003e it makes the parent/child relationships clearer and makes the context\n\u003e cleaner to construct/work with than all of the different\n\u003e x/net/context.With* functions, but that might just be me.\n\u003e\n\u003e I think my biggest concern with the current x/net/context is the\n\u003e CancelFunc stuff and the Background() and TODO() funcs. I \"get it\" now, but\n\u003e those were the biggest barrier to my understanding of the package. It's far\n\u003e easier for me to comprehend Context.Cancel() and implicit cancelation via\n\u003e timeout with the implementation I provided than all of the CancelFunc\n\u003e return values from x/net/context. Similarly, it's easier for me to\n\u003e comprehend creating new contexts via New and Context.WithTimeout() and\n\u003e Context.WithValue than using TODO(), Background() and the different\n\u003e WithValue(), WithDeadline(), WithTimeout(), and WithCancel() constructor\n\u003e funcs from x/net/context. On the one hand, I get that using those keeps the\n\u003e interface slimmer, but on the other hand, it makes x/net/context far more\n\u003e confusing (to me).\n\u003e\n\u003e I'm not necessarily putting forth this alternative implementation as *the*\n\u003e alternative, but rather *an* alternative to hopefully spark some\n\u003e discussion around the current x/net/context API.\n\u003e\n\u003e —\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/14660#issuecomment-196405772\u003e.\n\u003e\n",
	"user": {
		"login": "elithrar",
		"id": 18544,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-14T16:53:38Z",
	"updated_at": "2016-03-14T16:53:38Z"
}
