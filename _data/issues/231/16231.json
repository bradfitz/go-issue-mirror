{
	"id": 163228610,
	"number": 16231,
	"state": "closed",
	"title": "proposal: $ for array length in index",
	"body": "Negative indexing is a common request from / point of contention for new Go programmers, and has been for nearly seven years.\r\n([2015](#11245), [2013](http://grokbase.com/t/gg/golang-nuts/13c5q521n0/go-nuts-after-strings-split-get-the-last-element), [2011](https://groups.google.com/forum/#!topic/golang-nuts/XZ6mz1ySwWQ), [2009](https://groups.google.com/forum/#!topic/golang-nuts/yn9Q6HhgWi0))\r\nThe main argument for is ease of access, while the main argument against is that it introduces risk of insidious bugs where an unintentionally negative index can drastically (and silently) change the properties of a slice.\r\n\r\nI haven't seen any mention of how D does things, which is to make `$` an alias for the length of the array/slice anywhere between brackets. For example:\r\n```D\r\nauto arr = [1, 2, 3, 4, 5];\r\nwriteln(arr[0 .. $]) // [1, 2, 3, 4, 5]\r\nwriteln(arr[1 .. $ - 2]) // [2, 3]\r\nwriteln(arr[$ - 2 .. $]) // [4, 5]\r\nwriteln(arr[$ - 1]) // 5\r\n```\r\nWritten in go syntax:\r\n```go\r\narr := []int{1, 2, 3, 4, 5}\r\nfmt.Println(arr[0:$]) // [1, 2, 3, 4, 5]\r\nfmt.Println(arr[1:$ - 2] // [2, 3]\r\nfmt.Println(arr[$ - 2:$]) // [4, 5]\r\nfmt.Println(arr[$ - 1]) // 5\r\n```\r\n\r\nThis alias allows for pleasantly terse and readable slicing without risk of off-by-one errors causing silent errors. It also enables idiomatic single-line grabs, eg. taking the last element in a csv row: `fmt.Println(strings.Split(row, \",\")[$ - 1])`.",
	"user": {
		"login": "Shriken",
		"id": 1170757,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		},
		{
			"name": "Proposal-Declined"
		}
	],
	"comments": 6,
	"closed_at": "2016-07-19T21:34:02Z",
	"created_at": "2016-06-30T18:07:19Z",
	"updated_at": "2016-07-19T21:34:07Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	},
	"reactions": {
		"total_count": 7,
		"-1": 7
	}
}
