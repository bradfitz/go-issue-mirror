{
	"id": 108500559,
	"number": 12764,
	"state": "closed",
	"title": "cmd/link: nosplit stack overflow error when cross compiling in Go 1.5.1",
	"body": "I was trying to cross compile my Go project on windows/amd64 for linux/386, but got a \"nosplit stack overflow\" error. I followed the instructions that are outlined [here](http://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5). With ```GOOS=linux``` and ```GOARCH=386```, my ```go env``` looks as follows:\r\n```\r\nset GOARCH=386\r\nset GOBIN=\r\nset GOEXE=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOOS=linux\r\nset GOPATH=C:\\dev\\gopath\r\nset GORACE=\r\nset GOROOT=C:\\Go\r\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_amd64\r\nset GO15VENDOREXPERIMENT=0\r\nset CC=gcc\r\nset GOGCCFLAGS=-fPIC -m32 -fmessage-length=0\r\nset CXX=g++\r\nset CGO_ENABLED=0\r\n```\r\n\r\nThe code I tried to compile is a simple hello world\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(\"hello go\")\r\n}\r\n```\r\n\r\nThe complete error I got when running ```go build``` is:\r\n```\r\nruntime.cgocall: nosplit stack overflow\r\n508     assumed on entry to runtime.cgocall (nosplit)\r\n464     after runtime.cgocall (nosplit) uses 44\r\n460     on entry to runtime.exitsyscall (nosplit)\r\n272     after runtime.exitsyscall (nosplit) uses 188\r\n268     on entry to runtime.exitsyscallfast (nosplit)\r\n108     after runtime.exitsyscallfast (nosplit) uses 160\r\n104     on entry to runtime.writebarrierptr (nosplit)\r\n64      after runtime.writebarrierptr (nosplit) uses 40\r\n60      on entry to runtime.writebarrierptr_nostore1 (nosplit)\r\n8       after runtime.writebarrierptr_nostore1 (nosplit) uses 52\r\n4       on entry to runtime.acquirem (nosplit)\r\n-12     after runtime.acquirem (nosplit) uses 16 runtime.cgocallbackg: nosplit stack overflow\r\n508     assumed on entry to runtime.cgocallbackg (nosplit)\r\n460     after runtime.cgocallbackg (nosplit) uses 48\r\n456     on entry to runtime.exitsyscall (nosplit)\r\n268     after runtime.exitsyscall (nosplit) uses 188\r\n264     on entry to runtime.exitsyscallfast (nosplit)\r\n104     after runtime.exitsyscallfast (nosplit) uses 160\r\n100     on entry to runtime.writebarrierptr (nosplit)\r\n60      after runtime.writebarrierptr (nosplit) uses 40\r\n56      on entry to runtime.writebarrierptr_nostore1 (nosplit)\r\n4       after runtime.writebarrierptr_nostore1 (nosplit) uses 52\r\n0       on entry to runtime.acquirem (nosplit)\r\n-16     after runtime.acquirem (nosplit) uses 16 runtime.cgocallback_gofunc: nosplit stack overflow\r\n508     assumed on entry to runtime.cgocallback_gofunc (nosplit)\r\n496     after runtime.cgocallback_gofunc (nosplit) uses 12\r\n492     on entry to runtime.cgocallbackg (nosplit)\r\n444     after runtime.cgocallbackg (nosplit) uses 48\r\n440     on entry to runtime.exitsyscall (nosplit)\r\n252     after runtime.exitsyscall (nosplit) uses 188\r\n248     on entry to runtime.exitsyscallfast (nosplit)\r\n88      after runtime.exitsyscallfast (nosplit) uses 160\r\n84      on entry to runtime.writebarrierptr (nosplit)\r\n44      after runtime.writebarrierptr (nosplit) uses 40\r\n40      on entry to runtime.writebarrierptr_nostore1 (nosplit)\r\n-12     after runtime.writebarrierptr_nostore1 (nosplit) uses 52\r\n```\r\nOther target configurations that did work are ```GOOS=windows GOARCH=386``` and ```GOOS=linux GOARCH=amd64```, but ```GOOS=linux GOARCH=386``` does not work.",
	"user": {
		"login": "samherrmann",
		"id": 6753988,
		"type": "User",
		"site_admin": false
	},
	"comments": 10,
	"closed_at": "2015-11-27T04:35:42Z",
	"created_at": "2015-09-26T22:43:57Z",
	"updated_at": "2015-12-03T22:39:34Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
