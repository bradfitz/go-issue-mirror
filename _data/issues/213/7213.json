{
	"id": 51286354,
	"number": 7213,
	"state": "open",
	"title": "cmd/compile: escape analysis oddity",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\n\npackage q\n\nimport \u0026quot;io\u0026quot;\n\ntype Thing struct {\n        r io.Reader\n}\n\nfunc (t *Thing) Read() error {\n        _, err := t.r.Read(nil)\n        return err\n}\n\nfunc Use() error {\n        var t Thing\n        return t.Read()\n}\n\n% go build -gcflags -m leak.go\n# command-line-arguments\n./leak.go:9: leaking param: t\n./leak.go:15: moved to heap: t\n./leak.go:16: t escapes to heap\n\nWhat is the expected output? What do you see instead?\n\nWhy does t leak on like 9, what is it about referencing t.r that causes t to leak onto\nthe heap.\n\nPlease use labels and text to provide additional information.\n\nThis question arose from an investigation if json.NewDecoder could be stack allocated.\u003c/pre\u003e",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"created_at": "2014-01-27T00:23:01Z",
	"updated_at": "2016-07-20T22:14:09Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
