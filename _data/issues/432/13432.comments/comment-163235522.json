{
	"id": 163235522,
	"body": "\u003e provide high level abstractions to represents audio and audio processors,\r\n\r\nSome work has already been done in this domain, by the [audio](https://godoc.org/github.com/azul3d/audio) package of Azul3d. It is intended to define interfaces analogous to the `Image` interface of the standard library for audio.\r\n\r\nPerhaps some ideas could be stolen from its design. @slimsag is the original developer, and he may have some insight into problems encountered when designing the interface, and how they were solved by Azul3d.\r\n\r\n\u003e implement decoders (e.g. an mp3 decoder),\r\n\r\nThere exist at least two FLAC decoders in pure Go.\r\n\r\n1) https://github.com/eaburns/flac ([GoDoc](https://godoc.org/github.com/eaburns/flac))\r\n2) https://github.com/mewkiz/flac ([GoDoc](https://godoc.org/github.com/mewkiz/flac))\r\n\r\nThe second FLAC package is conceptually a back-end for decoding FLAC audio files, for which one or more front-end may be implemented. Currently a [front-end has been implemented for the Azul3d audio abstraction](https://godoc.org/github.com/azul3d/audio-flac), and it should be trivial to implement another front-end for the Go mobile audio abstraction. Analogously to the `image` package of the standard library,  to decode a FLAC audio stream, it suffices to have\r\n\r\n```go\r\nimport _ \"azul3d.org/audio/flac.v0\"\r\n````\r\nin a program's main package.\r\n\r\nBelow follows a short example program for decoding FLAC audio files with Azul3d:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"flag\"\r\n\t\"fmt\"\r\n\t\"log\"\r\n\t\"os\"\r\n\r\n\t\"azul3d.org/audio.v1\"\r\n\t_ \"azul3d.org/audio/flac.v0\" // Add FLAC decoding support.\r\n)\r\n\r\nfunc main() {\r\n\tflag.Parse()\r\n\tfor _, path := range flag.Args() {\r\n\t\terr := parseFLAC(path)\r\n\t\tif err != nil {\r\n\t\t\tlog.Fatal(err)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc parseFLAC(path string) error {\r\n\t// Open file.\r\n\tf, err := os.Open(path)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tdefer f.Close()\r\n\r\n\t// Create decoder.\r\n\tdec, _, err := audio.NewDecoder(f)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\t// Decode audio stream.\r\n\tfor {\r\n\t\tsamples := make(audio.PCM32Samples, 1024)\r\n\t\tn, err := dec.Read(samples)\r\n\t\tif err != nil {\r\n\t\t\tif err == audio.EOS {\r\n\t\t\t\treturn nil\r\n\t\t\t}\r\n\t\t\treturn err\r\n\t\t}\r\n\t\tfmt.Println(samples[:n])\r\n\t}\r\n}\r\n```\r\n\r\nI hope this may give some ideas, and hope improve the API and design of the Go mobile audio package.\r\n\r\nCheers /u",
	"user": {
		"login": "mewmew",
		"id": 1414531,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-09T13:36:39Z",
	"updated_at": "2015-12-09T13:36:39Z"
}
