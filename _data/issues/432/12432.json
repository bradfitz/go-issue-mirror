{
	"id": 104244376,
	"number": 12432,
	"state": "closed",
	"title": "vendor: go build error when in some dependence",
	"body": "I just try to build my project with GO15VENDOREXPERIMENT support with glide.\r\nBut I found there is something wrong when build it.\r\n\r\nCode Tree:\r\n```\r\n# tree \r\n.\r\n├── main.go\r\n└── vendor\r\n    ├── a\r\n    │   └── a.go\r\n    └── b\r\n        ├── b.go\r\n        └── vendor\r\n            └── a\r\n                └── a.go\r\n# find .\r\n.\r\n./vendor\r\n./vendor/b\r\n./vendor/b/b.go\r\n./vendor/b/vendor\r\n./vendor/b/vendor/a\r\n./vendor/b/vendor/a/a.go\r\n./vendor/a\r\n./vendor/a/a.go\r\n./main.go\r\n```\r\n\r\n`vendor/a` and `vendor/b/vendor/a` are same package.\r\n\r\n*vendor/a/a.go*\r\n```go\r\npackage a\r\n\r\ntype T struct {\r\n    Name string\r\n}\r\n\r\nfunc Test() *T {\r\n    return \u0026T{\"a\"}\r\n}\r\n```\r\n\r\n*vendor/b/b.go*\r\n```go\r\npackage b\r\n\r\nimport (\r\n    \"a\"\r\n)\r\n\r\nfunc Test() *a.T {\r\n    return \u0026a.T{\"b\"}\r\n}\r\n```\r\n\r\n*main.go*\r\n```go\r\npackage main\r\n\r\nimport (\r\n    \"a\"\r\n    \"b\"\r\n    \"fmt\"\r\n)\r\n\r\nfunc main() {\r\n    var t1, t2 *a.T\r\n    t1 = a.Test()\r\n    t2 = b.Test()\r\n    fmt.Println(t1, t2)\r\n}\r\n```\r\n\r\nWhen run `go build`, error occur:\r\n```\r\n# go build\r\n# c\r\n./main.go:12: cannot use b.Test() (type *\"c/vendor/b/vendor/a\".T) as type *\"c/vendor/a\".T in assignment\r\n```\r\nIs there other goodway to manage those relationships between packages?\r\nWill `go build` deal `vendor/` specially to meet the use?",
	"user": {
		"login": "hilyjiang",
		"id": 1214867,
		"type": "User",
		"site_admin": false
	},
	"comments": 8,
	"closed_at": "2015-09-01T16:55:43Z",
	"created_at": "2015-09-01T11:25:28Z",
	"updated_at": "2016-02-26T20:25:15Z"
}
