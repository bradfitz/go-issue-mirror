{
	"id": 146269822,
	"body": "As the author/maintainer of logging packages (github.com/go-kit/kit/log and gopkg.in/inconshreveable/log15.v2) and a standalone package that consumes `runtime.Callers` (gopkg.in/stack.v1) I would like to provide my perspective on this and related issues.\r\n\r\nFor my use cases I don't care about the actual PC values. I care that I can use them with `runtime.FuncForPC` and get accurate file/line-number/function-name information. I also want my code to report on *call-sites* rather than *return-sites*. It is rather cumbersome to deal with the special cases documented by `runtime.Callers` to convert the return-site PCs into call-site PCs. As I said in the [mailing list](https://groups.google.com/d/msg/golang-dev/04-1n4nEGss/xcb7FmhbBgAJ) recently, if a new API comes out of this discussion it would be nice if it could simplify the logging/debugging use case.\r\n\r\nDropping inlined call-sites would pose problems to the libraries I build, putting me on the side of \"stack traces are really important\". Furthermore, the opposite problem—extra entries for `\u003cgenerated\u003e` functions that appear in stack traces, but not in the code—are also a source of confusion that add little or no value to my use cases. For an example of code that was changed specifically to deal with that issue, see: https://github.com/go-kit/kit/pull/106, and in particular [this comment](https://github.com/go-kit/kit/blob/d4d79f9747989870be903ba34a108c94475c5e28/log/log.go#L33) describing the nuances of what's going on. I wonder if a mechanism to provide stack trace data in the face of inlined functions could also hide the `\u003cgenerated\u003e` functions from stack traces as well?",
	"user": {
		"login": "ChrisHines",
		"id": 1060711,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-07T17:28:24Z",
	"updated_at": "2015-10-07T17:28:24Z"
}
