{
	"id": 235462816,
	"body": "\u003e Well, it's not supposed to do this, but when it does, it doesn't have much choice. If there's any strict limit on GC CPU utilization, then allocation can outpace the garbage collector, leading to overshooting the goal heap size in the best case and never terminating GC in the worst case (until you OOM). It's supposed to prevent this by starting the GC cycle early enough that it can spread out the work over enough time, but for complicated reasons that I think I understand but haven't figured out how to fix yet, this doesn't work very well in situations with really high allocation rates.\r\n\r\nI may have been too imprecise. What I had in mind was a limit on the CPU usage of the idle workers. It seems like the assist is what ensures that the mutator doesn't allocate too quickly, which means that mechanism would have to stay in place. I was curious as to whether the runtime could prevent more than 3/4ths of the Ps from concurrently running their idle mark workersâ€”separate from the mandatory assists.\r\n\r\nYour plan to preempt the idle mark worker once there's other work to do sounds much better all around.\r\n\r\n\u003e Rick and I have agreed that it seems low risk. He's going to take a close look at it tomorrow morning.\r\n\r\nGreat! I'll try to be on-hand for edits.\r\n",
	"user": {
		"login": "rhysh",
		"id": 230685,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-27T02:20:14Z",
	"updated_at": "2016-07-27T02:20:14Z"
}
