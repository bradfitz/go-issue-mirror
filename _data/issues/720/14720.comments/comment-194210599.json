{
	"id": 194210599,
	"body": "@josharian FYI, I'm able to reproduce your failure if I build compilebench using ~/go15 (which is not on my PATH), but then try to use it to benchmark the compiler from ~/go (which is).\r\n\r\nWhat seems to happen is:\r\n  1. compilebench uses `go/build` to find the compiler sources for benchmarking.  Because I don't set GOROOT, it uses the path string compiled into package runtime.  And since it was built from ~/go15, that path is ~/go15.\r\n  2. compilebench then finds the compiler sources in ~/go15/src/cmd/compile/internal/gc.\r\n  3. However, when compilebench actually invokes the Go compiler, it uses ~/go/pkg/tool/linux_amd64/compile, which does the opposite: again since GOROOT is unset, it uses the hardcoded ~/go path in package runtime, and tries compiling ~/go15's package gc sources against ~/go/pkg/linux_amd64/cmd/internal/obj.a, etc.\r\n\r\nOne workaround is to run compilebench as \"GOROOT=$(go env GOROOT) compilebench\".",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-09T09:39:16Z",
	"updated_at": "2016-03-09T09:39:16Z"
}
