{
	"id": 160022820,
	"number": 16055,
	"state": "closed",
	"title": "x/net/bpf: consider adding bpftest package",
	"body": "When working with `x/net/bpf` recently, I realized it would be quite useful to be able to load my BPF programs into an emulated virtual machine, and test them against a variety of byte slice inputs.\r\n\r\nI created this package to fulfill that need: https://github.com/mdlayher/bpftest.\r\n\r\nWhile it is useful on its own for testing, I have two questions:\r\n\r\n1) Does it make sense to include this directly in `x/net/bpf`?  Perhaps even in a package like `x/net/bpf/bpftest`, akin to `net/http/httptest`.\r\n\r\nThis package is useful for testing the logic of complicated BPF programs, without needing to actually create a socket and load the BPF program directly.  This also allows testing of BPF programs on platforms like Windows, which do not have BPF.\r\n\r\n2) Could this package be useful for more than just testing?\r\n\r\nFor example, on Windows, there is no BPF.  But, perhaps this package could be used as a pseudo-BPF guarded by build tags, so that additional filtering logic would not need to be written when running a program that makes use of a BPF filter on Windows.  Of course, this approach would not be nearly as fast as using the in-kernel VM on Linux or BSD, but it would help reduce code duplication.\r\n\r\nI'd love to hear your thoughts on these ideas, @danderson and @mikioh .  Ultimately, it may just be better for the package to continue existing on my personal GitHub, but I figured I would at least get a discussion around it started.  Thanks for your time!",
	"user": {
		"login": "mdlayher",
		"id": 1926905,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"closed_at": "2016-06-18T00:31:24Z",
	"created_at": "2016-06-13T19:10:08Z",
	"updated_at": "2016-06-18T00:31:24Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
