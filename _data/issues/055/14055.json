{
	"id": 127919885,
	"number": 14055,
	"state": "closed",
	"title": "bufio: altered value when reading from tcpstream ",
	"body": "* goversion  \"1.5\"\r\n* arch \"debian8-linux-amd64\"\r\n* What did I do? \"Read line from TCP stream\"\r\n\r\nI received altered data when reading from tcpstream.\r\nPointer receivedAAA is partially overwritten by pointer receivedBBB. (side effect of readSlice()?)\r\nOnly appears on unit testing. \r\nWorks fine with go1.4.2, go 1.4.3.\r\n\r\nHere is a way to reproduce the issue:\r\n\r\n```golang\r\npackage hello\r\n\r\nimport (\r\n\t\"bufio\"\r\n\t\"fmt\"\r\n\t\"net\"\r\n\t\"os\"\r\n\t\"testing\"\r\n)\r\n\r\nconst (\r\n\tstr1 = \"AAAAAAAAAAAA\"\r\n\tstr2 = \"BBBB\"\r\n)\r\n\r\nfunc TestGetCommand(t *testing.T) {\r\n\r\n\t// Run TCP Server\r\n\taddress, err := net.ResolveTCPAddr(\"tcp\", fmt.Sprintf(\"0.0.0.0:%d\", 30299))\r\n\tif err != nil {\r\n\t\tpanic(fmt.Sprintf(\"Error starting message server: %s\", err))\r\n\t}\r\n\tl, err := net.ListenTCP(\"tcp\", address)\r\n\tif err != nil {\r\n\t\tpanic(fmt.Sprintf(\"Error starting message server: %s\", err))\r\n\t}\r\n\tdefer l.Close()\r\n\r\n\tgo func() {\r\n\t\tfor {\r\n\t\t\t// Listen for an incoming connection.\r\n\t\t\tconn, err := l.AcceptTCP()\r\n\t\t\tif err != nil {\r\n\t\t\t\t// Connection closed\r\n\t\t\t\tos.Exit(0)\r\n\t\t\t}\r\n\t\t\t_, err = fmt.Fprintf(conn, str1+\"\\n\")\r\n\t\t\tif err != nil {\r\n\t\t\t\tpanic(fmt.Sprintf(\"Error sending session ID: %v\", err))\r\n\t\t\t}\r\n\t\t\t_, err = fmt.Fprintf(conn, str2+\"\\n\")\r\n\t\t\tif err != nil {\r\n\t\t\t\tpanic(fmt.Sprintf(\"Error sending session ID: %v\", err))\r\n\t\t\t}\r\n\t\t\tconn.Close()\r\n\t\t}\r\n\t}()\r\n\r\n\t// TCP client\r\n\taddr, err := net.ResolveTCPAddr(\"tcp\", \"localhost:30299\")\r\n\tif err != nil {\r\n\t\tt.Error(\"Error resolving address: %v\", err)\r\n\t}\r\n\tconnection, err := net.DialTCP(\"tcp\", nil, addr)\r\n\tif err != nil {\r\n\t\tt.Error(\"Error during dial : %v\", err)\r\n\t}\r\n\tdefer connection.Close()\r\n\r\n\treader := bufio.NewReader(connection)\r\n\treceivedStr1, _, err := reader.ReadLine()\r\n\r\n\tif err != nil {\r\n\t\tt.Error(err)\r\n\t}\r\n\r\n\treceivedStr2, _, err := reader.ReadLine()\r\n\tif err != nil {\r\n\t\tt.Error(err)\r\n\t}\r\n\r\n\tfmt.Printf(\"VALUE -- type %T: q=%p\\n\", receivedStr1, receivedStr1)\r\n\tfmt.Printf(\"VALUE -- type %T: q=%p\\n\", receivedStr2, receivedStr2)\r\n\r\n\tif string(receivedStr1) != str1 {\r\n\t\tt.Error(\"Bad Str1, should receive \" + str1 + \" but got \" + string(receivedStr1))\r\n\t}\r\n\tif string(receivedStr2) != str2 {\r\n\t\tt.Error(\"Bad Str2, should receive \" + str2 + \" but got \" + string(receivedStr2))\r\n\t}\r\n\r\n}\r\n\r\n```\r\n\r\nOutput\r\n```\r\n?   \tgithub.com/myapp\t[no test files]\r\n=== RUN   TestGetCommand\r\nVALUE -- type []uint8: q=0xc8200a8000\r\nVALUE -- type []uint8: q=0xc8200a8000\r\n--- FAIL: TestGetCommand (0.00s)\r\n\thello_test.go:76: Bad Str1, should receive AAAAAAAAAAAA but got BBBB\r\n\t\tAAAAAAA\r\nFAIL\r\nok  \tgithub.com/myapp/hello\t0.002s\r\n```\r\n\r\nError seems to be due to client bufio, since tcp dump is correct \r\n\r\n```\r\n####\r\nT 127.0.0.1:30299 -\u003e 127.0.0.1:43386 [AP]\r\n  AAAAAAAAAAAA.                                                                                                   \r\n##\r\nT 127.0.0.1:30299 -\u003e 127.0.0.1:43386 [AP]\r\n  BBBB.                                                                                                           \r\n####\r\n```",
	"user": {
		"login": "BenC-",
		"id": 3688186,
		"type": "User",
		"site_admin": false
	},
	"comments": 8,
	"closed_at": "2016-01-21T17:05:24Z",
	"created_at": "2016-01-21T13:04:28Z",
	"updated_at": "2016-01-21T21:25:56Z"
}
