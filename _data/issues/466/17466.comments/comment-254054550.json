{
	"id": 254054550,
	"body": "@funny-falcon, it's not the \"single way\". There are plenty of other ways one might imagine. Here's one example, which I'm not saying is good, but I'm giving as proof that a language change is not the \"single way\":\r\n\r\n```go\r\npackage runtime\r\n\r\n// RegisterOnEmpty registers that the runtime should call fn when the channel\r\n// given in ch transitions from 1 buffered element to 0. It panics if ch is\r\n// not a channel or ch is not a buffered channel.\r\nfunc RegisterOnEmpty(ch interface{}, fn func()) {\r\n   // ....\r\n}\r\n```\r\n\r\nThen you make a future in a regular package, and do:\r\n\r\n```go\r\npackage github_foo_future\r\n\r\n// Set sets the value of the futureChan to value.\r\n// It sends value and continues to send the value as it is received.\r\n// Set panics if futureChan is not a buffered channel.\r\nfunc Set(futureChan, value interface{}) {\r\n     cv := reflect.ValueOf(futureChan)\r\n     vv := reflect.ValueOf(value)\r\n     send := func() { cv.Send(vv) }\r\n     runtime.RegisterOnEmpty(futureChan, send)\r\n     send()\r\n}\r\n```\r\n\r\nAgain, I'm not saying that's a good solution, but it's a solution that doesn't require a language change. (only a runtime/API change)\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-16T15:46:38Z",
	"updated_at": "2016-10-16T15:46:38Z"
}
