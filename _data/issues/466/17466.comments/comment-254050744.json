{
	"id": 254050744,
	"body": "You can also do\r\n\r\n    func ThingA() (func() string, \u003c-chan bool) {\r\n        ch := make(chan bool)\r\n        var s string\r\n        go func() {\r\n            s = doExpensiveThing()\r\n            close(ch)\r\n        }()\r\n        return func() string {\r\n            \u003c-ch\r\n            return s\r\n        }, ch\r\n    }\r\n\r\nand get selectability and an arbitrary number of receivers (and yes, I am aware that this is used syntactically different from what you propose).\r\n\r\nHowever, that's not even the larger point. The larger point is, that they are a) not necessary, because the problem they usually are added for doesn't really exist in go and b) they are not orthogonal to channels. That c) you can already emulate them, which means they don't actually add more *power* to the language is, at least to me, more of a side-note.\r\n\r\nAnother issue I have with futures are, that they are poisonous; when your function returns a future, I suddenly need to care about concurrency when I use your stuff, whether I want to or not (and even if that only means adding an arrow). Whereas, if you just, like recommended in idiomatic go code, write your function to be synchronous and return a value, I can choose myself whether I want to call it asynchronously or keep my life simple by just treating it as a normal function call.\r\n\r\nThus, in a world with futures, soon all go code will be riddled with futures, because people decide they need to return a future whenever they do *anything* involving files or the network (and they are only really useful if returned by the function) and then all go code gets riddled with arrows, because in practice, people need the result of a function call immediately most of the time anyway.\r\n\r\nJust write your code as taking a `context.Context` for cancellation and returning a regular value. And in the 1% of cases where futures are useful, people can add the two lines of code necessary for most of those use cases themselves. Or the twelve lines of code for the 1% of the 1% where you actually need selectability or multiple receivers.",
	"user": {
		"login": "Merovius",
		"id": 720787,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-16T14:39:48Z",
	"updated_at": "2016-10-16T14:39:48Z"
}
