{
	"id": 254200965,
	"body": "@funny-falcon \r\nOne could write code like this:\r\n```\r\nf := make(future string)\r\nf \u003c- \"Value\"\r\ns1 := \u003c- f\r\ns2 := \u003c- f\r\ns3 := \u003c- f\r\n```\r\nAnd this will be a valid code. Change `future` to `chan` and it's becomes invalid (deadlock).\r\n\r\nAlso, from the internals point of view, IIRC chan\\goroutine mechanic is quite straightforward. One send - one awake. Future will require setting value, setting \"done\" byte and releasing all waiting goroutines. \r\n\r\nAs for your example - you can use \"close mechanics\" of the channels. Simply change the `f` to `chan struct{}`, add data and error fields. Set them in \"writer\" goroutine and close the channel. Any subsequent attempt to read from the `f` will return `struct{}{}, false`, so your `select block` will automatically choose this case. Get the data/error value from the fields. Additional info can be found here: http://dave.cheney.net/2014/03/19/channel-axioms",
	"user": {
		"login": "DmitriyMV",
		"id": 6999905,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-17T13:03:14Z",
	"updated_at": "2016-10-17T13:06:11Z"
}
