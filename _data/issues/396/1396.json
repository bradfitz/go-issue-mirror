{
	"id": 51277750,
	"number": 1396,
	"state": "closed",
	"title": "bytes.Buffer.UnreadByte() gets error check backward",
	"body": "by **kwwaters**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n1. Try using bytes.Buffer.UnreadByte()\n\nWhat is the expected output?\nUnreadByte() unreads a byte when the last operation was a read.\n\nWhat do you see instead?\nUnreadByte() returns \u0026quot;UnreadByte: previous operation was not a read\u0026quot;\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g\n\nWhich operating system are you using?\nLinux 2.6.36-gentoo-r5\n\nWhich revision are you using?  (hg identify)\n8eeee945e358+ release/release.2011-01-06\nI looked at the source for tip and it appears to be broken as well, but I didn't try it.\n\nPlease provide any additional information below.\n\nI think this patch fixes the test.\n\ndiff -r 47bc23fc4855 src/pkg/bytes/buffer.go\n--- a/src/pkg/bytes/buffer.go   Fri Jan 07 15:33:00 2011 +1100\n+++ b/src/pkg/bytes/buffer.go   Thu Jan 06 23:07:32 2011 -0800\n@@ -291,7 +291,7 @@\n // read operation.  If write has happened since the last read, UnreadByte\n // returns an error.\n func (b *Buffer) UnreadByte() os.Error {\n-       if b.lastRead == opReadRune || b.lastRead == opRead {\n+       if b.lastRead != opReadRune \u0026amp;\u0026amp; b.lastRead != opRead {\n                return os.ErrorString(\u0026quot;bytes.Buffer: UnreadByte: previous operation was not a read\u0026quot;)\n        }\n        b.lastRead = opInvalid\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:08:08Z",
	"created_at": "2011-01-07T07:16:15Z",
	"updated_at": "2016-06-24T19:23:49Z"
}
