{
	"id": 51288090,
	"number": 8366,
	"state": "closed",
	"title": "go/importer/...: fails on i386/armel/armhf",
	"body": "by **mstplbrg**:\n\n\u003cpre\u003eWhat does 'go version' print?\ngo version go1.3 linux/386\n\nWhat steps reproduce the problem?\n1. (hg checkout release-branch1.3) # tested it on both the 1.3 branch and tip\n2. go test -v code.google.com/p/go.tools/go/importer/...\n\nWhat happened?\n--- FAIL: TestImportStdLib (2.19 seconds)\n\nWhat should have happened instead?\ntests should pass :)\n\nPlease provide any additional information below.\n\n--- FAIL: TestImportStdLib (2.19 seconds)\n\timport_test.go:182: package strconv: \n\t\tgcimport got:\n\t\tpackage strconv\n\t\tfunc strconv.AppendBool(dst []uint8, b bool) []uint8\n\t\tfunc strconv.AppendFloat(dst []uint8, f float64, fmt uint8, prec int, bitSize int) []uint8\n\t\tfunc strconv.AppendInt(dst []uint8, i int64, base int) []uint8\n\t\tfunc strconv.AppendQuote(dst []uint8, s string) []uint8\n\t\tfunc strconv.AppendQuoteRune(dst []uint8, r int32) []uint8\n\t\tfunc strconv.AppendQuoteRuneToASCII(dst []uint8, r int32) []uint8\n\t\tfunc strconv.AppendQuoteToASCII(dst []uint8, s string) []uint8\n\t\tfunc strconv.AppendUint(dst []uint8, i uint64, base int) []uint8\n\t\tfunc strconv.Atoi(s string) (i int, err error)\n\t\tfunc strconv.CanBackquote(s string) bool\n\t\tvar strconv.ErrRange error\n\t\tvar strconv.ErrSyntax error\n\t\tfunc strconv.FormatBool(b bool) string\n\t\tfunc strconv.FormatFloat(f float64, fmt uint8, prec int, bitSize int) string\n\t\tfunc strconv.FormatInt(i int64, base int) string\n\t\tfunc strconv.FormatUint(i uint64, base int) string\n\t\tconst strconv.IntSize untyped int = 32\n\t\tfunc strconv.IsPrint(r int32) bool\n\t\tfunc strconv.Itoa(i int) string\n\t\ttype strconv.NumError struct{Func string; Num string; Err error}\n\t\tmethods (\n\t\t\tfunc (*strconv.NumError).Error() string\n\t\t)\n\t\tfunc strconv.ParseBool(str string) (value bool, err error)\n\t\tfunc strconv.ParseFloat(s string, bitSize int) (f float64, err error)\n\t\tfunc strconv.ParseInt(s string, base int, bitSize int) (i int64, err error)\n\t\tfunc strconv.ParseUint(s string, base int, bitSize int) (n uint64, err error)\n\t\tfunc strconv.Quote(s string) string\n\t\tfunc strconv.QuoteRune(r int32) string\n\t\tfunc strconv.QuoteRuneToASCII(r int32) string\n\t\tfunc strconv.QuoteToASCII(s string) string\n\t\tfunc strconv.Unquote(s string) (t string, err error)\n\t\tfunc strconv.UnquoteChar(s string, quote uint8) (value int32, multibyte bool, tail string, err error)\n\t\t\n\t\twant:\n\t\tpackage strconv\n\t\tfunc strconv.AppendBool(dst []uint8, b bool) []uint8\n\t\tfunc strconv.AppendFloat(dst []uint8, f float64, fmt uint8, prec int, bitSize int) []uint8\n\t\tfunc strconv.AppendInt(dst []uint8, i int64, base int) []uint8\n\t\tfunc strconv.AppendQuote(dst []uint8, s string) []uint8\n\t\tfunc strconv.AppendQuoteRune(dst []uint8, r int32) []uint8\n\t\tfunc strconv.AppendQuoteRuneToASCII(dst []uint8, r int32) []uint8\n\t\tfunc strconv.AppendQuoteToASCII(dst []uint8, s string) []uint8\n\t\tfunc strconv.AppendUint(dst []uint8, i uint64, base int) []uint8\n\t\tfunc strconv.Atoi(s string) (i int, err error)\n\t\tfunc strconv.CanBackquote(s string) bool\n\t\tvar strconv.ErrRange error\n\t\tvar strconv.ErrSyntax error\n\t\tfunc strconv.FormatBool(b bool) string\n\t\tfunc strconv.FormatFloat(f float64, fmt uint8, prec int, bitSize int) string\n\t\tfunc strconv.FormatInt(i int64, base int) string\n\t\tfunc strconv.FormatUint(i uint64, base int) string\n\t\tconst strconv.IntSize untyped int = 64\n\t\tfunc strconv.IsPrint(r int32) bool\n\t\tfunc strconv.Itoa(i int) string\n\t\ttype strconv.NumError struct{Func string; Num string; Err error}\n\t\tmethods (\n\t\t\tfunc (*strconv.NumError).Error() string\n\t\t)\n\t\tfunc strconv.ParseBool(str string) (value bool, err error)\n\t\tfunc strconv.ParseFloat(s string, bitSize int) (f float64, err error)\n\t\tfunc strconv.ParseInt(s string, base int, bitSize int) (i int64, err error)\n\t\tfunc strconv.ParseUint(s string, base int, bitSize int) (n uint64, err error)\n\t\tfunc strconv.Quote(s string) string\n\t\tfunc strconv.QuoteRune(r int32) string\n\t\tfunc strconv.QuoteRuneToASCII(r int32) string\n\t\tfunc strconv.QuoteToASCII(s string) string\n\t\tfunc strconv.Unquote(s string) (t string, err error)\n\t\tfunc strconv.UnquoteChar(s string, quote uint8) (value int32, multibyte bool, tail string, err error)\n\t\t\nFAIL\n\nThe difference here is the IntSize line. For some reason, ExportData() seems to generate\na value of 64 here instead of the intended 32.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 11,
	"closed_at": "2014-12-08T10:46:30Z",
	"created_at": "2014-07-13T14:22:44Z",
	"updated_at": "2016-06-25T01:38:00Z",
	"milestone": {
		"id": 1067218,
		"number": 21,
		"title": "Go1.4"
	}
}
