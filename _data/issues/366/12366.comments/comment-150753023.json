{
	"id": 150753023,
	"body": "I thought more about this, and I discussed it with @aclements, who has a bit more of a \"new Go programmer\" perspective than I do, and he reminded me how noisy the extra goroutines are and how you have to learn that the current goroutine prints first and that you can usually ignore the rest of the output.\n\nWe've been through similar reductions before: we omit runtime stack frames when showing user goroutine stacks, and we omit internal runtime goroutines entirely, both in an attempt to boost the signal-to-noise ratio of crash dumps, even though occasionally those omissions do hurt debugging a complex problem.\n\nFor the vast majority of crash dumps one encounters in day-to-day work, it is true that only the current goroutine matters (panics due to nil pointer, index out of bounds, regexp.MustCompile, etc). It may be that, on balance, showing only the current goroutine by default would increase the signal-to-noise ratio of crash dumps enough to make up for the loss of information in more complex cases. Again, we already discard potentially useful information by default because it is too rarely useful. The question is whether all the extra goroutines are too rarely useful. I am coming around to the point that they might be.\n\nI think if we did this we'd also want to add a runtime/debug.SetTraceback funtion to control GOTRACEBACK at run time. People with flaky programs might well want to call SetTraceback in main.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-24T04:29:10Z",
	"updated_at": "2015-10-24T04:29:10Z"
}
