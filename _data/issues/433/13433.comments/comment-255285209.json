{
	"id": 255285209,
	"body": "Single-program test case: https://play.golang.org/p/ZJgUHH-Qjn\n\n\tpackage main\n\t\n\tvar c = make(chan bool, 10)\n\tfunc init() { c \u003c- false; c \u003c- false }\n\tvar i interface{} = false\n\tfunc f() (bool, bool) { return false, true }\n\tvar m = map[int]bool{0: false}\n\t\n\tfunc main() {\n\t\tc \u003c- false\n\t\t\n\t\tvar x, y bool\n\t\t\n\t\tx, y = m[0]\n\t\tprintln(\"x, y = m[0]:\", x, y)\n\t\tx, x = m[0]\n\t\tprintln(\"x, x = m[0]:\", x, x, \"\\n\")\n\t\t\n\t\tx, y = \u003c-c\n\t\tprintln(\"x, y = \u003c-c:\", x, y)\n\t\tx, x = \u003c-c\n\t\tprintln(\"x, x = \u003c-c:\", x, x, \"\\n\")\n\t\t\n\t\tx, y = f()\n\t\tprintln(\"x, y = f():\", x, y)\n\t\tx, x = f()\n\t\tprintln(\"x, x = f():\", x, x, \"\\n\")\n\t\t\n\t\tx, y = i.(bool)\n\t\tprintln(\"x, y = i.(bool):\", x, y)\n\t\tx, x = i.(bool)\n\t\tprintln(\"x, x = i.(bool):\", x, x)\n\t}\n\nprints:\n\n\tx, y = m[0]: false true\n\tx, x = m[0]: false false \n\t\n\tx, y = \u003c-c: false true\n\tx, x = \u003c-c: true true \n\t\n\tx, y = f(): false true\n\tx, x = f(): true true \n\t\n\tx, y = i.(bool): false true\n\tx, x = i.(bool): false false\n\nAll the x, x should be true, true, not false, false, because the right-side x should be assigned second.\n\nGreat bug. These don't follow the spec because it never occurred to me that they'd be assigning to the same variable, and it was often cheaper to set the \"ok\" before the \"real result\".\n\nThis might be fixable in order.go rather than in each case.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-21T03:28:17Z",
	"updated_at": "2016-10-21T03:28:17Z"
}
