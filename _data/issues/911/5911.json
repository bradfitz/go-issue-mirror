{
	"id": 51284374,
	"number": 5911,
	"state": "closed",
	"title": "spec: say that chan is safe for concurrent access",
	"body": "\u003cpre\u003eAs far as I see this is not stated explicitly. And generally it's assumed that types are\nnot safe for concurrent accesses unless stated otherwise.\n\nFor most people it can be obvious, but I can see several sources of confusion:\n1. In languages where channels/queues are implemented manually, it's not uncommon to\nhave only single-producer/single-consumer (SPSC) or multi-producer/single-consumer\n(MPSC) queues. So the question arises -- what type of queue is Go chan?\n2. People coming from Erlang/actor/agent-oriented systems can assume that queues are\nMPSC.\n3. People coming from master-slave type of systems can assume that queues are SPMC.\n4. People new to programming can assume that chans are not safe for concurrent accesses\nat all.\nSome people can have wrong assumptions, and some people can be just unsure and want to\nsee an explicit statement.\n\nThe spec should say that chans are OK for concurrent access (as in dereferencing nil\npointer is OK but panics).\nIt must be clear that it refers to operations on \u0026quot;chan object\u0026quot; and not\n\u0026quot;chan variable\u0026quot; (concurrent assignments to chan variable are not OK).\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:32:29Z",
	"created_at": "2013-07-18T08:31:41Z",
	"updated_at": "2016-06-24T22:52:10Z"
}
