{
	"id": 66085096,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9:\n\n\u003cpre\u003eI took a closer look at this. With a simple server (attached), it's possible to call\nParseMultipartForm() and receive no error, and for Request.MultipartForm to be nil.\n\nRequest which results in parsed form/no error:\n    curl -X POST -H 'Content-Type:multipart/form-data' -F file=mime.txt '\u003ca href=\"http://localhost:9001/upload\"\u003ehttp://localhost:9001/upload\u003c/a\u003e'\n\nRequest which doesn't return an error/doesn't result in a value for\nRequest.MultipartForm:\n    curl -X POST -H 'Content-Type:multipart/bad' -F file=mime.txt '\u003ca href=\"http://localhost:9001/upload\"\u003ehttp://localhost:9001/upload\u003c/a\u003e'\n\nThe line in ParseMultipartForm which returns nil\n(\u003ca href=\"http://golang.org/src/pkg/net/http/request.go#L783)\"\u003ehttp://golang.org/src/pkg/net/http/request.go#L783)\u003c/a\u003e comes after a call to ParseForm\nwhich has a TODO (\u003ca href=\"http://golang.org/src/pkg/net/http/request.go#L704)\"\u003ehttp://golang.org/src/pkg/net/http/request.go#L704)\u003c/a\u003e for handling\nmultipart/form-data. So I'm guessing it was intended to be cleaned up.\n\nAn easy workaround is just to check the Content-Type before calling ParseMultipartForm.\n\nHappy to submit a CL with fix and test (when the tree opens) if that's a good idea.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/6334/9/main.go\"\u003emain.go\u003c/a\u003e (429 bytes)",
	"user": {
		"login": "mattrco",
		"id": 207735,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-12-09T19:41:57Z",
	"updated_at": "2014-12-08T10:34:51Z"
}
