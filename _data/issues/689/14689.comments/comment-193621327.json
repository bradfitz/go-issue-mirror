{
	"id": 193621327,
	"body": "`runtime.SetBlockProfileRate` has two special values: 0 to disable, and 1 to catch every single event. You can also set it to e.g. 1,000,000,000 (aka `int(time.Second.Nanoseconds())`) to record one sample per second that a goroutine is blocked at a particular location. If your program does not set the rate to something \u003e 0, the block profile will contain no data.\r\n\r\nWhat I'd be most interested to learn from a blog post on the blocking profiler is what to expect in terms of performance overhead. I've taken the fact that it's not enabled by default (compared with e.g. the heap profiler) to mean that it may have a significant impact on runtime performance. On the other hand, its instrumentation points seem to be a subset of what's covered by `runtime/trace`, which is automatically accessible via `net/http/pprof`. Dmitry Vyukov's article mentions that it interferes with the scheduler trace, which could be part of the answer.",
	"user": {
		"login": "rhysh",
		"id": 230685,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-08T06:08:25Z",
	"updated_at": "2016-03-08T06:08:25Z"
}
