{
	"id": 115494843,
	"number": 13173,
	"state": "closed",
	"title": "Have return from a function as default if an error occurs",
	"body": "Consider the below given code that illustrates the problem:\r\n\r\nfunc (t *mytype) start() (string, error) {\r\n  if result1, err := someMethod1(); err != nil {\r\n    return nil, err\r\n  }\r\n  if result2, err := someMethod2(); err != nil {\r\n    return nil, err\r\n  }\r\n  ...\r\n  if result30, err := someMethod30(); err != nil {\r\n    return nil, err\r\n  }\r\n}\r\n\r\nIn this implementation the error handling behavior is to just return the error cause and not do anything else. To achieve this, way too boiler plate code is required. Instead, the compiler can do better. If an error is not handled, return from the function by default. With this feature in the compiler, the code now can look like;\r\n\r\nfunc (t *mytype) start() (string, error) {\r\n  someMethod1()\r\n  someMethod2()\r\n  ...\r\n  someMethod30()\r\n}\r\n\r\nIn fact, handling errors this way need not be default but can be controlled with a new primitive \"returnOnErrors\" and can be used like:\r\nfunc (t *mytype) start() (string, error) {\r\n  returnOnErrors\r\n  ...\r\n}\r\n\r\n\r\n",
	"user": {
		"login": "narayanan-arunachalam",
		"id": 1772168,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2015-11-06T13:02:58Z",
	"created_at": "2015-11-06T12:18:54Z",
	"updated_at": "2015-11-06T13:02:58Z"
}
