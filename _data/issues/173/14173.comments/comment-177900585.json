{
	"id": 177900585,
	"body": "\u003eWhen I look at the examples you've cited, I feel the for-loop syntax is easier to read.\r\n\r\nI have a feeling that the reason for that is because of the example's triviality. In my experience the map functionality helps \"declare\" what you're doing, by making it even more explicit the operation you're trying to achieve. In this case a mapping from one set to another.\r\n\r\n\u003eIn fact it would simply be adding fluff to the language that's not needed.\r\n\r\nI'm not sure how you define `fluff`, and it surely isn't \"needed\", but in the same vein I presume you came from C to Go for more than just the concurrency model. C is clunky and primitive. Adding convenience is pretty much the nature of PL advancements. All the way up from assembly.\r\n\r\n\u003eAnother thing to consider is whether or not you want your language's grammar to include several different ways of doing the same job. I know I don't. \r\n\r\nGo has foregone that already :) See short and long declarations, `new`, etc. Not to say we should keep adding kludge, though this proposal doesn't actually add any additional grammar to my knowledge. \r\n\r\n\u003eFinally, when I compare your for-loop example to the map() examples you've provided, I feel as though I'm looking at a comparison between C like syntax and JavaScript like syntax - I simply cannot stand the in-line function syntax (heavily) present in JavaScript and in your example.\r\n\r\nThat is an opinion I don't think I could change, however it's more than just javascript that has higher-order functions. See erlang, scala, haskell, etc.",
	"user": {
		"login": "huoy",
		"id": 12127285,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-01T10:31:36Z",
	"updated_at": "2016-02-01T10:31:36Z"
}
