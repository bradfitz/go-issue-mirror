{
	"id": 177968107,
	"body": "This approach risks reinforcing sequential programming patterns that are\nless and less suitable for our more and more parallel hardware. If Go\ndecides to do this then it should treat the  functions\nreduce/scan/scatter/map/combine/filter as parallel combinators.  \"for\" can\nbe used to express sequential execution.\n\nOf course this is not as simple as it sounds since it puts restrictions on\nthe closures such as the need to be associative, idempotent, and so forth.\nHow or even if that needs to be mechanically enforced would have to be\nworked out.  Perhaps Go will someday tackle this and it would be a shame if\nthese keywords and approaches had to deal with a sequential legacy suitably\nexpressed with for.\n\nI haven't seen any compelling use cases to support adding parallel\ncombinators to Go 1.7 nor am I proposing it. It would be a lot of work. I\njust don't want to foreclose on a future proposal by adding a sequential\nsemantic legacy today.\n\n\n\n\n\nOn Mon, Feb 1, 2016 at 6:00 AM, Michael Crilly \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e That is an opinion I don't think I could change, ...\n\u003e\n\u003e Likewise.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/14173#issuecomment-177915717\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-01T13:16:34Z",
	"updated_at": "2016-02-01T13:16:34Z"
}
