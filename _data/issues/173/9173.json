{
	"id": 51289190,
	"number": 9173,
	"state": "closed",
	"title": "os/exec: broken pipe writing into djpeg ",
	"body": "\u003cpre\u003eGo's os/exec seems to have a problem piping into the djpeg program.\n\nTo reproduce, at least on Linux:\n\n1) $ apt-get install libjpeg-turbo-progs\n2) Download the attached image (7.8 MB, which seems to matter, or its JPEG structure\nmatters)\n3) Run boat.go: \u003ca href=\"http://play.golang.org/p/cHra0dvPr6\"\u003ehttp://play.golang.org/p/cHra0dvPr6\u003c/a\u003e\n\nante:tmp $ go run boat.go\n2014/11/26 14:26:46 Process state: exit status 0 (success = true)\n2014/11/26 14:26:46 Stdout: 11943953 bytes\n2014/11/26 14:26:46 Stderr: \u0026quot;\u0026quot;\n2014/11/26 14:26:46 cmd.Wait = write |1: broken pipe\n\nOf note:\n\nThe djpeg process ends successfully, and outputs its resultant image to stdout.\n\nBut djpeg seems to end before reading all of its input, causing a SIGPIPE to the\ngoroutine trying to write all the data to it. strace says:\n\n21770 \u0026lt;... write resumed\u0026gt; )             = 4096\n21772 read(5,  \u0026lt;unfinished ...\u0026gt;\n21770 write(1,\n\u0026quot;2\\10\\0002\\10\\0007\\t\\0007\\t\\0008\\t\\0007\\10\\0009\\n\\0008\\7\\0008\\7\\0\u0026lt;\\t\\0=\\n\\0\u0026gt;\\v\\0@\\f\\0?\\v\\0E\\r\\0F\\16\\0J\\16\\0M\\16\\0T\\22\\0Z\\24\\0]\\24\\0]\\23\\0^\n\\23\\0f\\30\\0o\\36\\0n\\32\\0{$\\0\\205)\\0\\2212\\0\\236\u0026lt;\\0\\2369\\0\\2405\\0\\2423\\0\\254:\\0\\272C\\0\\317W\\0\\351m\\0\\342g\\0\\344h\\0\\336e\\0\\334d\\0\\356w\\0\\363}\\0\\377\\207\\0\\377\n\\213\\0\\377\\220\\0\\377\\221\\0\\377\\222\\0\\377\\221\\0\\377\\224\\0\\377\\224\\0\\377\\220\\0\\377\\217\\0\\377\\223\\0\\377\\227\\0\\377\\234\\0\\377\\244\\0\\377\\264\\0\\377\\276\\0\\377\\30\n5\\0\\377\\311\\0\\377\\312\\0\\377\\301\\0\\377\\266\\0\\377\\243\\0\\377\\226\\0\\377\\201\u0026quot;..., 4096\n\u0026lt;unfinished ...\u0026gt;\n21772 \u0026lt;... read resumed\u0026gt;\n\u0026quot;\\4\\v\\2\\5\\v\\2\\5\\v\\2\\5\\v\\2\\5\\n\\1\\4\\n\\1\\4\\v\\0\\4\\v\\0\\4\\f\\1\\5\\r\\2\\6\\17\\5\\6\\21\\5\\7\\21\\5\\7\\23\\4\\7\\22\\3\\10\\22\\3\\10\\22\\3\\10\\21\\2\\7\\21\\2\\\n7\\21\\2\\7\\17\\3\\7\\20\\4\\10\\17\\5\\6\\20\\6\\7\\20\\6\\7\\20\\6\\7\\20\\6\\7\\20\\6\\7\\22\\6\\6\\22\\6\\6\\24\\6\\6\\24\\6\\6\\22\\6\\6\\23\\7\\7\\21\\5\\7\\20\\4\\6\\17\\3\\5\\17\\3\\5\\r\\3\\4\\f\\2\\3\\r\\3\\4\n\\f\\2\\3\\v\\2\\3\\n\\1\\2\\n\\1\\2\\n\\1\\2\\v\\2\\3\\f\\3\\4\\f\\3\\4\\r\\4\\5\\17\\5\\6\\20\\6\\7\\22\\6\\6\\24\\6\\6\\25\\7\\6\\31\\7\\7\\33\\10\\4\\37\\7\\5!\\10\\3#\\7\\3\u0026amp;\\t\\3'\\10\\3*\\t\\4-\\n\\6,\\t\\5*\\t\\4\n'\u0026quot;..., 4840960) = 4096\n21770 \u0026lt;... write resumed\u0026gt; )             = 4096\n21768 \u0026lt;... select resumed\u0026gt; )            = 0 (Timeout)\n21770 write(1, \u0026quot;\\7\\3\\32\\7\\3\\31\\7\\3\\31\\7\\3\\27\\10\\5\\27\\10\\5\u0026quot;, 17 \u0026lt;unfinished\n...\u0026gt;\n21772 read(5,  \u0026lt;unfinished ...\u0026gt;\n21770 \u0026lt;... write resumed\u0026gt; )             = 17\n21772 \u0026lt;... read resumed\u0026gt;\n\u0026quot;2\\10\\0002\\10\\0007\\t\\0007\\t\\0008\\t\\0007\\10\\0009\\n\\0008\\7\\0008\\7\\0\u0026lt;\\t\\0=\\n\\0\u0026gt;\\v\\0@\\f\\0?\\v\\0E\\r\\0F\\16\\0J\\16\\0M\\16\\0T\\22\\0Z\\24\\0]\\2\n4\\0]\\23\\0^\\23\\0f\\30\\0o\\36\\0n\\32\\0{$\\0\\205)\\0\\2212\\0\\236\u0026lt;\\0\\2369\\0\\2405\\0\\2423\\0\\254:\\0\\272C\\0\\317W\\0\\351m\\0\\342g\\0\\344h\\0\\336e\\0\\334d\\0\\356w\\0\\363}\\0\\377\n\\207\\0\\377\\213\\0\\377\\220\\0\\377\\221\\0\\377\\222\\0\\377\\221\\0\\377\\224\\0\\377\\224\\0\\377\\220\\0\\377\\217\\0\\377\\223\\0\\377\\227\\0\\377\\234\\0\\377\\244\\0\\377\\264\\0\\377\\27\n6\\0\\377\\305\\0\\377\\311\\0\\377\\312\\0\\377\\301\\0\\377\\266\\0\\377\\243\\0\\377\\226\\0\\377\\201\u0026quot;...,\n4836864) = 4113\n21770 exit_group(0)                     = ?\n21772 read(5,  \u0026lt;unfinished ...\u0026gt;\n21768 select(0, NULL, NULL, NULL, {0, 20} \u0026lt;unfinished ...\u0026gt;\n21772 \u0026lt;... read resumed\u0026gt; \u0026quot;\u0026quot;, 4832751)   = 0\n21771 \u0026lt;... write resumed\u0026gt; )             = 16384\n21772 --- SIGCHLD (Child exited) @ 0 (0) ---\n21771 --- SIGPIPE (Broken pipe) @ 0 (0) ---\n21772 rt_sigreturn(0x11 \u0026lt;unfinished ...\u0026gt;\n21771 rt_sigreturn(0xd \u0026lt;unfinished ...\u0026gt;\n21772 \u0026lt;... rt_sigreturn resumed\u0026gt; )      = 0\n21771 \u0026lt;... rt_sigreturn resumed\u0026gt; )      = 16384\n21769 \u0026lt;... read resumed\u0026gt; \u0026quot;\u0026quot;, 512)       = 0\n21772 futex(0xc208020b58, FUTEX_WAIT, 0, NULL \u0026lt;unfinished ...\u0026gt;\n21771 write(4,\n\u0026quot;\\320\\272\\232\\376k\\3375]\\303\\23\\222s\\232\\350-\\265\\375B\\35\u0026gt;8e-*\\216\\273\\2115\\340Q\\251\\316\\365=\\372\\270w\\rN\\206\\312\\366K\\233r\\321)R\\6p\\5G|\\3\n42\\342\\300\\227\\373\\303\\257=k*\\362J\\3461\\2475Qhqo\\2435\\345\\336-\\321\\244'?*\\212\\307}\\\u0026quot;t\\274uTl\\251\n\\203\\317\\326\\276S\\33\\213\\214*8\\263\\356\\362\\374\\33\\2355;\\\n31\\222Gq\\25\\323\\0\\33\\203\\3152k\\233\\270\\234lc\\327\\247\\255c\\32\\221\\234N\\207Ft\\246\\333?\\377\\325\\374\\264\\203R\\270\\23\\3(\\301\\34\\327Og\\251\\31\\\\n\\373\\247\\257\\32\n6\\277\\25\\305PR\\367\\217\\333\\360\\265\\332vf\\270\\322WUF).$\\7\\345^\\231\\253\\326\\336\\27\\271\\213L/\\\u0026quot;\u0026quot;...,\n16384 \u0026lt;unfinished ...\u0026gt;\n21769 futex(0xc208020458, FUTEX_WAIT, 0, NULL \u0026lt;unfinished ...\u0026gt;\n21771 \u0026lt;... write resumed\u0026gt; )             = -1 EPIPE (Broken pipe)\n21768 \u0026lt;... select resumed\u0026gt; )            = 0 (Timeout)\n21771 --- SIGPIPE (Broken pipe) @ 0 (0) ---\n21768 futex(0x593ac0, FUTEX_WAIT, 0, {60, 0} \u0026lt;unfinished ...\u0026gt;\n21771 rt_sigreturn(0xd \u0026lt;unfinished ...\u0026gt;\n21767 \u0026lt;... wait4 resumed\u0026gt; [{WIFEXITED(s) \u0026amp;\u0026amp; WEXITSTATUS(s) == 0}], 0,\n{ru_utime={0, 496000}, ru_stime={0, 36000}, ...}) = 21770\n21771 \u0026lt;... rt_sigreturn resumed\u0026gt; )      = -1 EPIPE (Broken pipe)\n\n\n... note you can see the djpeg exit_group(0), then the SIGPIPE and the wait4 call return.\n\nWe can work around this in Go by knowing that this program does this and ignoring the\nreturn value from cmd.Run() or cmd.Wait() and only looking at the\ncmd.ProcessState.Success. But is that best?\n\nOr are we doing something wrong?\n\nShould Go ignore the Stdin copy error if the program ended successfully?\n\nCamlistore bug: \u003ca href=\"http://camlistore.org/issue/550\"\u003ehttp://camlistore.org/issue/550\u003c/a\u003e\nUpstream djpeg bug from Mathieu: \u003ca href=\"http://sourceforge.net/p/libjpeg-turbo/bugs/80/\"\u003ehttp://sourceforge.net/p/libjpeg-turbo/bugs/80/\u003c/a\u003e\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/9173/0/PA190470.JPG\"\u003ePA190470.JPG\u003c/a\u003e (7781878 bytes)",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2015-07-14T00:41:50Z",
	"created_at": "2014-11-26T22:34:54Z",
	"updated_at": "2016-07-13T16:06:03Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
