{
	"id": 167229870,
	"number": 16482,
	"state": "closed",
	"title": "tour: inconsistency in text over where \u0026 operator can be used",
	"body": "The Tour's [description of pointers](https://tour.golang.org/moretypes/1) currently states:\r\n\r\n\u003e  A pointer holds the memory address of a *variable*.\r\n\r\n(Emphasis mine.)\r\n\r\nFine, I think. And maybe I even try taking addresses of types of values (e.g. `int`, `string`) I've seen by that point in the Tour, and find that this rule is accurate.\r\n\r\nOK, let's continue reading. Only a few pages on, [the rule quoted above changes](https://tour.golang.org/moretypes/5):\r\n\r\n\u003e The special prefix \u0026 returns a pointer to the struct *value*.\r\n\r\n(Emphasis again mine.)\r\n\r\nRevealing subtleties after explaining the basics is often preferable over having everything thrown at a reader simultaneously. But, if attention is not drawn to such a change, it can lead to confusion. Particularly, as a learner, I may not immediately think to check the language specification to clarify fine details.\r\n\r\nEven prefacing the second quote with a short clarification might help, maybe along the lines of:\r\n\r\n\u003e Not only can the special prefix `\u0026` be used to return a pointer to a variable, but you can use it in the same way with struct (and other composite) literals.",
	"user": {
		"login": "StevenMaude",
		"id": 3818079,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-07-25T03:59:32Z",
	"created_at": "2016-07-24T11:47:20Z",
	"updated_at": "2016-07-25T03:59:32Z"
}
