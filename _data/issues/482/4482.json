{
	"id": 51282208,
	"number": 4482,
	"state": "closed",
	"title": "spec: Paragraph about type{} composite literals in if/switch/for conditions could be clearer (current description doesn't match gc's behavior)",
	"body": "\u003cpre\u003e\u003ca href=\"http://tip.golang.org/ref/spec#Composite_literals\"\u003ehttp://tip.golang.org/ref/spec#Composite_literals\u003c/a\u003e says:\n\n\u0026quot;\u0026quot;\u0026quot;A parsing ambiguity arises when a composite literal using the TypeName\nform of the LiteralType appears between the keyword and the opening brace of the block\nof an \u0026quot;if\u0026quot;, \u0026quot;for\u0026quot;, or \u0026quot;switch\u0026quot; statement, because the\nbraces surrounding the expressions in the literal are confused with those introducing\nthe block of statements. To resolve the ambiguity in this rare case, the composite\nliteral must appear within parentheses.\n\nif x == (T{a,b,c}[i]) { … }\nif (x == T{a,b,c}[i]) { … }\u0026quot;\u0026quot;\u0026quot;\n\nHowever, gc accepts \n\n  package p\n  type mytype struct{f int}\n  func next() {\n    var a [5]int\n    if 4 == a[mytype{4}.f] {}\n  }\n\n( \u003ca href=\"http://play.golang.org/p/Cs_YIOcdtn\"\u003ehttp://play.golang.org/p/Cs_YIOcdtn\u003c/a\u003e ) even though the composite literal 'appears\nbetween the keyword and the opening brace of the block of an \u0026quot;if\u0026quot;' yet the\ncomposite literal does technically not appear within parentheses. I suppose the spec\nshould be relaxed to not require parentheses for composite literals in Index expressions.\u003c/pre\u003e",
	"user": {
		"login": "nico",
		"id": 3487,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"closed_at": "2014-12-08T10:23:50Z",
	"created_at": "2012-12-03T05:02:33Z",
	"updated_at": "2016-06-24T22:29:15Z"
}
