{
	"id": 51276543,
	"number": 482,
	"state": "closed",
	"title": "Request for better struct alignment and allocation with 6g and 8g compilers",
	"body": "by **kenliz@cruzio.com**:\n\n\u003cpre\u003eCurrently the 6g and 5g compilers impose an 8 byte alignment on structs containing small\ndata \nelements.\n\nThis is a request to set struct alignment to the biggest alignment required by the\nelements.\n\nThis will make structs competitive with arrays when considering storage requirements for\nlarge \ncollections.\n\nWhat steps will reproduce the problem?\n\n1. compile, link, and run the following program:\n\npackage main\nimport \u0026quot;unsafe\u0026quot;\ntype testS struct {\n\ta uint16\n\tb uint16\n}\ntype testA [2] uint16\nfunc main() {\n\tvar ts testS\n\tvar tsa [100]testS\n\tvar ta testA\n\tvar taa [100]testA\n\tprintln(\u0026quot;testS\u0026quot;, unsafe.Sizeof(ts), unsafe.Alignof(ts))\n\tprintln(\u0026quot;[100]testS\u0026quot;, unsafe.Sizeof(tsa), unsafe.Alignof(tsa))\n\tprintln(\u0026quot;testA\u0026quot;, unsafe.Sizeof(ta), unsafe.Alignof(ta))\n\tprintln(\u0026quot;[100]testA\u0026quot;, unsafe.Sizeof(taa), unsafe.Alignof(taa))\n}\n\n2. The output produced by 6g and 6l is:\n\ntestS 8 8\n[100]testS 800 8\ntestA 4 2\n[100]testA 400 2\n\nWhat is the expected output? What do you see instead?\n\nThe expected output is that a two element struct is identical in memory requirements to\na two \nelement array when the element types are all the same.\n\nInstead, there is a 100% storage penalty for using struct instead of array.\n\nWhat is your $GOOS?  $GOARCH?\ndarwin amd64\n\nWhich revision are you using?  (hg identify)\na6fcf4303b0a+ release/release.2009-12-22\n(same results with latest tip or with x86)\n\nPlease provide any additional information below.\nI've been told that the 5g compiler behaves the same , but the gccgo compiler does the\nmore \nefficient alignment and allocation.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/482/0/test.go\"\u003etest.go\u003c/a\u003e (423 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 5,
	"closed_at": "2014-12-08T10:04:46Z",
	"created_at": "2010-01-01T06:51:33Z",
	"updated_at": "2016-06-24T19:11:12Z"
}
