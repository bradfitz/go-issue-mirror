{
	"id": 72393575,
	"body": "That totally makes sense. Thanks! :-)\r\n\r\nOn Sat, Jan 31, 2015 at 1:23 AM, Minux Ma \u003cnotifications@github.com\u003e wrote:\r\n\r\n\u003e In the example, the output contains a lot of \\r, which, depending on the\r\n\u003e terminal, used might mean go to the start of the line, or change to the\r\n\u003e next line.\r\n\u003e\r\n\u003e Apparently, on unix, \\r means has the former meaning, so every line\r\n\u003e except the first will be overwritten again and again. As there is a final\r\n\u003e \\r in the output, the final result will be an empty 2nd line (without \\n,\r\n\u003e and then the shell prompt will appear on that line as usual). This\r\n\u003e makes it appear that the program only outputs one line of message,\r\n\u003e but it's not. You can verify that it does print out the other lines using\r\n\u003e hexdump(1) or redirect the stdout to a file.\r\n\u003e\r\n\u003e On the playground, \\r is treated the same as \\n. This is not unreasonable\r\n\u003e given that the playground is not emulating any particular terminal.\r\n\u003e (And it does handle \\r\\n correctly as one line.)\r\n\u003e\r\n\u003e This is a simplified example: https://play.golang.org/p/Hk3jiGbIii\r\n\u003e\r\n\u003e I don't think it's a bug of playground: it's not a terminal emulator.\r\n\u003e\r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub\r\n\u003e \u003chttps://github.com/golang/go/issues/9740#issuecomment-72306731\u003e.\r\n\u003e",
	"user": {
		"login": "robertfmurdock",
		"id": 6215634,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-02T00:30:50Z",
	"updated_at": "2015-02-02T00:30:50Z"
}
