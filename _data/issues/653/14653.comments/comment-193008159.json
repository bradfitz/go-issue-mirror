{
	"id": 193008159,
	"body": "I went with a different approach, I copied stdlib's quickSort and made a *naive* parallel version of it.\r\n\r\nIt shows 15%+ improvement for slices  \u003e= 10k elements, it uses sort.Interface and it's a drop-in replacement, in my tests I just had sort.Sort pick psort if a.Len() \u003e= 5000.\r\n\r\nthe code is [here](/OneOfOne/psort).\r\n\r\n### update, due to #14677 the updated benchmarks are:\r\n\r\n```\r\nname              old time/op    new time/op    delta\r\nNewIndexRandom-8     202ms ± 1%     177ms ± 2%   -12.29%  (p=0.008 n=5+5)\r\nNewIndexRepeat-8     339ms ± 2%     279ms ± 2%   -17.82%  (p=0.008 n=5+5)\r\n\r\nSortString1K-8     152µs ± 1%     157µs ± 0%    +3.51%          (p=0.008 n=5+5)\r\nSortInt1K-8       70.3µs ± 1%    75.2µs ± 1%    +6.94%          (p=0.008 n=5+5)\r\nSortInt64K-8      6.44ms ± 1%    2.60ms ± 1%   -59.70%          (p=0.008 n=5+5)\r\nSort1e2-8         40.7µs ± 1%    41.5µs ± 3%      ~             (p=0.056 n=5+5)\r\nSort1e4-8         8.62ms ± 3%    5.31ms ± 0%   -38.33%          (p=0.008 n=5+5)\r\nSort1e6-8          1.30s ± 2%     0.69s ± 2%   -46.52%          (p=0.008 n=5+5)\r\n```\r\n\r\n### old\r\n``` shell\r\n# go test -v -bench=NewIndex -benchmem -count 5\r\n➜ benchstat {old,new}.txt\r\nname              old time/op    new time/op    delta\r\nNewIndexRandom-8     203ms ± 0%     208ms ± 2%    +2.49%  (p=0.008 n=5+5)\r\nNewIndexRepeat-8     339ms ± 2%     402ms ± 2%   +18.86%  (p=0.008 n=5+5)\r\n\r\nname              old alloc/op   new alloc/op   delta\r\nNewIndexRandom-8    16.1MB ± 0%    16.1MB ± 0%    +0.08%  (p=0.008 n=5+5)\r\nNewIndexRepeat-8    39.0MB ± 0%    39.0MB ± 0%    +0.00%  (p=0.008 n=5+5)\r\n\r\nname              old allocs/op  new allocs/op  delta\r\nNewIndexRandom-8      33.6 ±10%     299.2 ± 1%  +790.48%  (p=0.008 n=5+5)\r\nNewIndexRepeat-8      73.8 ±11%     103.2 ± 2%   +39.84%  (p=0.008 n=5+5)\r\n\r\n# go test -bench=kSort -count 5 -benchmem\r\n➜ benchstat {old,new}.txt\r\nname            old time/op    new time/op    delta\r\nSortString1K-8     157µs ± 1%     198µs ± 2%   +26.64%          (p=0.008 n=5+5)\r\nSortInt1K-8       73.2µs ± 1%   115.2µs ± 0%   +57.30%          (p=0.008 n=5+5)\r\nSortInt64K-8      6.84ms ± 2%    4.11ms ± 3%   -39.93%          (p=0.008 n=5+5)\r\nSort1e2-8         42.8µs ± 1%    42.5µs ± 1%      ~             (p=0.421 n=5+5)  # this falls back to the standard sort.\r\nSort1e4-8         8.60ms ± 1%    7.23ms ± 1%   -15.99%          (p=0.008 n=5+5)\r\nSort1e6-8          1.35s ± 7%     0.98s ± 7%   -27.46%          (p=0.008 n=5+5)\r\n\r\nname            old alloc/op   new alloc/op   delta\r\nSortString1K-8     32.0B ± 0%     80.4B ± 1%  +151.25%          (p=0.008 n=5+5)\r\nSortInt1K-8        32.0B ± 0%     80.0B ± 0%  +150.00%          (p=0.008 n=5+5)\r\nSortInt64K-8       32.0B ± 0%     80.0B ± 0%  +150.00%          (p=0.008 n=5+5)\r\nSort1e2-8           224B ± 0%      224B ± 0%      ~     (all samples are equal)\r\nSort1e4-8           224B ± 0%      560B ± 0%  +150.00%          (p=0.008 n=5+5)\r\nSort1e6-8           224B ± 0%      560B ± 0%  +150.00%          (p=0.008 n=5+5)\r\n\r\nname            old allocs/op  new allocs/op  delta\r\nSortString1K-8      1.00 ± 0%      2.00 ± 0%  +100.00%          (p=0.008 n=5+5)\r\nSortInt1K-8         1.00 ± 0%      2.00 ± 0%  +100.00%          (p=0.008 n=5+5)\r\nSortInt64K-8        1.00 ± 0%      2.00 ± 0%  +100.00%          (p=0.008 n=5+5)\r\nSort1e2-8           7.00 ± 0%      7.00 ± 0%      ~     (all samples are equal)\r\nSort1e4-8           7.00 ± 0%     14.00 ± 0%  +100.00%          (p=0.008 n=5+5)\r\nSort1e6-8           7.00 ± 0%     14.00 ± 0%  +100.00%          (p=0.008 n=5+5)\r\n```",
	"user": {
		"login": "OneOfOne",
		"id": 1080443,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-06T22:23:14Z",
	"updated_at": "2016-03-06T23:18:42Z"
}
