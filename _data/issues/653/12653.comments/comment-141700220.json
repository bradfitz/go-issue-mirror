{
	"id": 141700220,
	"body": "A few thoughts:\r\n\r\n- Currently, `goimports` only modifies your imports, and never any of your code. This is something people are used to and it has good properties like being sure your code is never modified (outside of applying `gofmt` formatting).\r\n   - Minor exception, it also supposedly adds `package main` if you have `func main()` in your code and `package` clause is missing. But this is quite limited in scope and I've actually never seen this work successfully for me, I just heard it's a feature.\r\n\r\n- Importing the current package is sometimes desirable. Consider working on an external test in `util_test.go`:\r\n\r\n\t```Go\r\n\tpackage util_test\r\n\r\n\timport \"testing\"\r\n\t\r\n\timport \"example.com/project/utils\"\r\n\t\r\n\tfunc TestA(t *testing.T) {\r\n\t\tutils.A()\r\n\t}\r\n\t```\r\n\r\n\tIn theory, `goimports` could know if it's dealing with an external test or not and change its behavior. But need to think if that's an improvement or not.\r\n\r\n- Is there a reason you choose to run `goimports` before removing `utils.` from `utils.A()`, since the package prefix is no longer needed after you've moved that func into the current package?",
	"user": {
		"login": "shurcooL",
		"id": 1924134,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-19T19:19:06Z",
	"updated_at": "2015-09-19T19:20:03Z"
}
