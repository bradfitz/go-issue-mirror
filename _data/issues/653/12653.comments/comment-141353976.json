{
	"id": 141353976,
	"body": "I'm sorry too, Let's see if my examples are better than my explanations.\r\nSomewhere in the `example.com/project/utils` package there is a file like:\r\n```go\r\npackage utils\r\n\r\nfunc A() {\r\n}\r\n```\r\n\r\nin another package we have:\r\n```go\r\npackage not_utils\r\n\r\nimport \"example.com/project/utils\"\r\n\r\nfunc B() {\r\n    utils.A() // caling the utils package\r\n}\r\n```\r\nWanting to move `B` in the `utils` package I go through the following steps: \r\nmoving the second file in `utils`, changing the package and removing the import:\r\n```go\r\npackage utils\r\n\r\nfunc B() {\r\n    utils.A() \r\n}\r\n```\r\nand then running goimports against the file(saving in vim) will put the import in again.\r\n\r\n```go\r\npackage utils\r\n\r\nimport \"example.com/project/utils\"\r\n\r\nfunc B() {\r\n    utils.A() \r\n}\r\n```\r\n\r\nGiven that importing the package a file is from is an import cycle I think that goimports should not do it and even remove such an import.\r\n\r\n",
	"user": {
		"login": "MStoykov",
		"id": 312246,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-18T06:03:48Z",
	"updated_at": "2015-09-18T06:03:48Z"
}
