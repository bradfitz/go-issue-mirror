{
	"id": 134364176,
	"body": "\u003e Concern: named parameters encourage overly-long parameter lists.â€“ @bradfitz \r\n\r\nI'll be honest; It's possible. But are there not many language features that could be abused?  The fact that functions are first class objects and are passed around could be abused.  Someone could design everything using asynchronous callbacks encouraged by NodeJS.  It's callback hell.  It's not encouraged, but it's possible.  Why would anyone ever use all of these callbacks over the asynchronous functions in Go?  Why would anyone put too many parameters illogically? In my book, they both could have potential disadvantages.\r\n\r\nAs for renaming, you could offer aliases like Swift does: `func Trade(initial a : Int, next b : Int) -\u003e (Int, Int)`.  Initial and next are the aliases used for named arguments.  However, I do not think this is necessary. We should discuss this. If things are well named, they should be changed iff a contextual change has occurred.  This would also deprecate.  It encourages best naming practices.",
	"user": {
		"login": "codeblooded",
		"id": 1209285,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-24T20:16:52Z",
	"updated_at": "2015-08-24T20:16:52Z"
}
