{
	"id": 134752449,
	"body": "I second @minux's comment (https://github.com/golang/go/issues/12296#issuecomment-134663135), but would like to point out that only struct type elision (point 2) is necessary, since anonymous struct types can already be declared in a function parameter list and the function can simply give that argument a name and access its fields like usual. I think @griesemer may have been thinking this, but to carry it through, the following is already possible:\r\n\r\n```\r\nfunc Distance(args struct{X, Y float64}) float64 {\r\n  return math.Sqrt(args.X*args.X+args.Y*args.Y)\r\n}\r\n```\r\n\r\nI think this has several advantages over this proposal. It doesn't expose any API that isn't already exposed, so people don't find themselves locked in to their argument name choices. It upholds that rule that public identifiers must be capitalized. It has the dual properties that zero values can be omitted and the API can be extended with more fields in the future, which is a very common application for named parameters. And, the concept and syntax mirror the type elision that we already permit in map, array, and slice literals.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-25T21:52:04Z",
	"updated_at": "2015-08-25T21:52:04Z"
}
