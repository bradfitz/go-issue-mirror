{
	"id": 134671281,
	"body": "Allowing elision of the type in a composite literal (struct or otherwise) in a function call covers everything without adding new concepts to the language. The only syntactic difference is there'd have to be outer {} but that seems a small price and would allow things like:\r\n   points({1, 2}, {3, 4}, {}) //where func points(ps ...image.Point)\r\nwhich seems just as useful to me as having named parameters.\r\n\r\nIt has the same problem of any such proposal though where it makes it hard to tell what the type of the literal is at a glance. \r\n\r\nBut you could say that for every other argument to a function, including composite literals without the type elided as they could be used either for that type or are being assigned to an interface. That is, is\r\n    f(Point{0, 1})\r\ntaking an image.Point or a fmt.Stringer?\r\n\r\nCheney's \"functional options\" pattern provides a nice alternative to structs as named parameters that can be useful in either case: http://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis",
	"user": {
		"login": "jimmyfrasche",
		"id": 375553,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-25T17:02:49Z",
	"updated_at": "2015-08-25T17:02:49Z"
}
