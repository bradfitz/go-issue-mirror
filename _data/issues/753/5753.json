{
	"id": 51284135,
	"number": 5753,
	"state": "closed",
	"title": "cmd/gc: Method values + slicing arrays + inlining == Broken strings",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n1. Compile and run \u003ca href=\"http://play.golang.org/p/Yl6EXET0fc\"\u003ehttp://play.golang.org/p/Yl6EXET0fc\u003c/a\u003e (can reproduce on the playground\nas well)\n2. Notice how the length for the second string becomes ridiculously big\n3.\n\nWhat is the expected output?\nNot breaking the string\n\nWhat do you see instead?\nBroken strings that will cause Go to read memory it shouldn't.\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g\n\nWhich operating system are you using?\nLinux\n\nWhich version are you using?  (run 'go version')\nThis happens both with Go 1.1 and current tip (go version devel +56909cb770fe Fri Jun 21\n18:07:57 2013 -0700 linux/amd64)\n\nPlease provide any additional information below.\n\n1) This only happens when using method values. Function values are fine\n2) This only happens when manually creating the backing array\n3) Disabling inlining avoids the issue.\n\n(Reporting this on behalf of Mikhail Panchenko who initially discovered this issue in a\nmore complex scenario)\u003c/pre\u003e",
	"user": {
		"login": "dominikh",
		"id": 39825,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 6,
	"closed_at": "2014-12-08T10:31:32Z",
	"created_at": "2013-06-22T15:57:18Z",
	"updated_at": "2016-06-24T22:43:04Z",
	"milestone": {
		"id": 1067201,
		"number": 13,
		"title": "Go1.1.2"
	}
}
