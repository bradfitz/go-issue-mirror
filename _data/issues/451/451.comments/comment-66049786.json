{
	"id": 66049786,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eLogs from IRC conversation about this:\n\n\u0026lt;niemeyer\u0026gt; There's a bug opened for a while (since December) related to the\nreflect package which needs some love.\n\u0026lt;iant\u0026gt; which issue?\n* niemeyer grabs link\n\u0026lt;niemeyer\u0026gt; \u003ca href=\"https://golang.org/issue/451\"\u003ehttps://golang.org/issue/451\u003c/a\u003e\n\u0026lt;niemeyer\u0026gt; I've already invested some time on it through\n\u003ca href=\"http://golang.org/cl/1752042\"\u003ehttp://golang.org/cl/1752042\u003c/a\u003e\n\u0026lt;niemeyer\u0026gt; There are a few different ways to fix it.. the obvious one won't work\n\u0026lt;niemeyer\u0026gt; It'd be great to have someone who understands this code better than I\ndo at least making an informed decision\n\u0026lt;niemeyer\u0026gt; I have a pretty neat test runner for Go in advanced stages which is\nhanging on this\n\u0026lt;iant\u0026gt; Hmmm, I get exactly the same panic when using gccgo\n\u0026lt;niemeyer\u0026gt; Not too surprised..\n\u0026lt;niemeyer\u0026gt; The check in the reflect code is preventing the memory corruption which\nwould otherwise happen, at least in the gc family\n\u0026lt;niemeyer\u0026gt; Well, actually it's not.. I guess gccgo must be compiling it improperly\ntoo\n\u0026lt;iant\u0026gt; yeah, this is complicated\n\u0026lt;iant\u0026gt; I guess I don't have time to think about it right now, sorry\n\u0026lt;iant\u0026gt; the compiler builds these complicated sets of stub functions\n\u0026lt;iant\u0026gt; I guess that would have to be done manually in reflect.Call\n\u0026lt;iant\u0026gt; that's my first thought, anyhow\n\u0026lt;niemeyer\u0026gt; iant: Russ disagrees\n\u0026lt;niemeyer\u0026gt; iant: I've actually done pretty much this in the submitted code\n\u0026lt;niemeyer\u0026gt; iant: Then looked at the compiler\n\u0026lt;niemeyer\u0026gt; iant: There are a few different code paths in the compiler which would\nenable fixing it\n\u0026lt;niemeyer\u0026gt; iant: The most obvious one doesn't work because it'll create a loop\n\u0026lt;niemeyer\u0026gt; iant: So I'm looking for someone that actually understands this code\nand can make decisions about it, so that I don't spent more time on another solution\nwhich isn't The Right Way.\n\u0026lt;niemeyer\u0026gt; s/spent/spend\n\u0026lt;iant\u0026gt; I've never looked at the code which generates reflection structures in the\ngc comiler\n\u0026lt;iant\u0026gt; but it seems suspicious to me that gccgo fails in exactly the same way\n\u0026lt;iant\u0026gt; since the code generating the type reflection structures is completely\ndifferent\n\u0026lt;niemeyer\u0026gt; iant: Ok, do you know someone at arms length that can be nudged about\nit? :-)\n\u0026lt;iant\u0026gt; still, russ is usually right\n\u0026lt;iant\u0026gt; russ is definitely the guy for this stuff in the gc compiler\n\u0026lt;niemeyer\u0026gt; Aw.. he doesn't look very worried :(\n\u0026lt;iant\u0026gt; he's super busy, of course\n\u0026lt;niemeyer\u0026gt; I know\n\u0026lt;niemeyer\u0026gt; I've been moving forward with a local patch, which isn't the right one\n\u0026lt;niemeyer\u0026gt; So I can't publish the test runner before this is fixed\n\u0026lt;niemeyer\u0026gt; There are some 1.5k lines of Go code on staging.. :)\u003c/pre\u003e",
	"user": {
		"login": "niemeyer",
		"id": 378683,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-09-11T02:43:21Z",
	"updated_at": "2014-12-22T05:50:34Z"
}
