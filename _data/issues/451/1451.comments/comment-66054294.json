{
	"id": 66054294,
	"body": "\u003ca id=\"c10\"\u003e\u003c/a\u003eComment 10:\n\n\u003cpre\u003e\u003e I am keen to try the changes in \u003ca href=\"http://golang.org/cl/4188047/\"\u003ehttp://golang.org/cl/4188047/\u003c/a\u003e if I can get my\nWindows build working. \n\nIf you're asking how to build go for Windows, then you need mingw tools. You could\ndownload them yourself: \u003ca href=\"http://code.google.com/p/go-wiki/wiki/WindowsBuild\"\u003ehttp://code.google.com/p/go-wiki/wiki/WindowsBuild\u003c/a\u003e, or you could\nget pre-build zip file that Joe Poirier prepares\n\u003ca href=\"https://groups.google.com/d/topic/golang-nuts/u9h4TSs5mRk/discussion\"\u003ehttps://groups.google.com/d/topic/golang-nuts/u9h4TSs5mRk/discussion\u003c/a\u003e. Then you need to\nfetch go repo with mercurial and build it.\n\nAlternatively, I use linux/386 to develop and just cross-compile to windows/386.\n\n\u003e What's the best way to move this toward release?\n\nAs far as I remember, CL didn't go anywhere, because we couldn't decide on what the\ninterface should look like, so it is simple, reliable and works across of different OS\nand OS-apis. Russ suggested we discuss that on golang-nuts. And that is where it\nstopped. You could start discussion again if you have good suggestion on how to\nimplement it.\n\nAlex\u003c/pre\u003e",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-06-23T03:13:03Z",
	"updated_at": "2014-12-08T10:08:25Z"
}
