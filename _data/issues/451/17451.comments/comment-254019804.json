{
	"id": 254019804,
	"body": "The go command uses filepath.Walk to match packages, and filepath.Walk does not follow symbolic links at this time.\r\n\r\nChanging this means either modifying filepath.Walk or creating a custom walk that resolves symbolic links. \r\n\r\nI would not encourage the first option on due to Compatibility guidelines. I rely on filepath.Walk behavior not to follow symlinks, and on many Linux systems I use this would cause circular non-terminating traversals. \r\n\r\n```\r\n$GOROOT/src/cmd/go/main.go:560,561:        fmt.Fprintf(os.Stderr, \"warning: %q matched no packages\\n\", pattern)\r\n$GOROOT/src/cmd/go/main.go:565,566:        func matchPackages(pattern string) []string {\r\n$GOROOT/src/cmd/go/main.go:590,591:            filepath.Walk(root, func(path string, fi os.FileInfo, err error) error {\r\n\r\ngo doc filepath.Walk\r\nfunc Walk(root string, walkFn WalkFunc) error\r\n    Walk walks the file tree rooted at root, calling walkFn for each file or\r\n    directory in the tree, including root. All errors that arise visiting files\r\n    and directories are filtered by walkFn. The files are walked in lexical\r\n    order, which makes the output deterministic but means that for very large\r\n    directories Walk can be inefficient. Walk does not follow symbolic links.\r\n```",
	"user": {
		"login": "as",
		"id": 8127015,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-16T00:35:35Z",
	"updated_at": "2016-10-16T00:35:35Z"
}
