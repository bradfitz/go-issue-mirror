{
	"id": 151194391,
	"number": 15451,
	"state": "open",
	"title": "cmd/gc: unexplained allocation for convT2I",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\n```go version devel +2bf7034 Mon Apr 25 16:18:10 2016 +0000 darwin/amd64```\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\n```darwin/amd64```\r\n\r\n3. What did you do?\r\n\r\nSee attached typescript. I do not understand why line 28, the call to sort.Sort, is allocating. It is in a call to convT2I but a, a.r, and the slice a.r[i] points to are already on the heap. It seems like escape analysis and/or optimizations are missing a chance to avoid an allocation.\r\n\r\n```dunnart=% go test -gcflags=-m\r\n# _/Users/r/bug\r\n./x_test.go:35: can inline sortable.Len\r\n./x_test.go:36: can inline sortable.Less\r\n./x_test.go:37: can inline sortable.Swap\r\n./x_test.go:25: make([]int, 5) escapes to heap\r\n./x_test.go:28: sortable(r) escapes to heap\r\n./x_test.go:23: new(A) escapes to heap\r\n./x_test.go:12: t.common escapes to heap\r\n./x_test.go:8: leaking param: t\r\n./x_test.go:12: \"allocs:\" escapes to heap\r\n./x_test.go:12: allocs escapes to heap\r\n./x_test.go:14: t.common escapes to heap\r\n./x_test.go:14: \"expected 23 allocations, got \" escapes to heap\r\n./x_test.go:14: allocs escapes to heap\r\n./x_test.go:9: TestParseAllocs func literal does not escape\r\n./x_test.go:12: TestParseAllocs ... argument does not escape\r\n./x_test.go:14: TestParseAllocs ... argument does not escape\r\n./x_test.go:35: sortable.Len s does not escape\r\n./x_test.go:36: sortable.Less s does not escape\r\n./x_test.go:37: sortable.Swap s does not escape\r\n\u003cautogenerated\u003e:1: inlining call to sortable.Len\r\n\u003cautogenerated\u003e:1: (*sortable).Len .this does not escape\r\n\u003cautogenerated\u003e:2: inlining call to sortable.Less\r\n\u003cautogenerated\u003e:2: (*sortable).Less .this does not escape\r\n\u003cautogenerated\u003e:3: inlining call to sortable.Swap\r\n\u003cautogenerated\u003e:3: (*sortable).Swap .this does not escape\r\n\u003cautogenerated\u003e:4: leaking param: .this\r\n\u003cautogenerated\u003e:5: leaking param: .this\r\n\u003cautogenerated\u003e:6: leaking param: .this\r\n# testmain\r\n/var/folders/g9/s3yf6f1n54bgn16vwpxnbxvm0004fc/T/go-build913880170/_/Users/r/bug/_test/_testmain.go:52: inlining call to testing.MainStart\r\n/var/folders/g9/s3yf6f1n54bgn16vwpxnbxvm0004fc/T/go-build913880170/_/Users/r/bug/_test/_testmain.go:37: leaking param: pat\r\n/var/folders/g9/s3yf6f1n54bgn16vwpxnbxvm0004fc/T/go-build913880170/_/Users/r/bug/_test/_testmain.go:37: leaking param: str\r\n/var/folders/g9/s3yf6f1n54bgn16vwpxnbxvm0004fc/T/go-build913880170/_/Users/r/bug/_test/_testmain.go:52: main \u0026testing.M literal does not escape\r\n--- FAIL: TestParseAllocs (0.00s)\r\n\tx_test.go:12: allocs: 11\r\n\tx_test.go:14: expected 23 allocations, got  11\r\nFAIL\r\nexit status 1\r\nFAIL\t_/Users/r/bug\t0.031s\r\ndunnart=% go test -memprofile=foo -memprofilerate=1\r\nPASS\r\nok  \t_/Users/r/bug\t0.034s\r\ndunnart=% go tool pprof --alloc_objects bug.test foo \r\nEntering interactive mode (type \"help\" for commands)\r\n(pprof) list foo\r\nTotal: 1145\r\nROUTINE ======================== _/Users/r/bug.foo in /Users/r/bug/x_test.go\r\n      1111       1111 (flat, cum) 97.03% of Total\r\n         .          .     18:type A struct {\r\n         .          .     19:\tr [5][]int\r\n         .          .     20:}\r\n         .          .     21:\r\n         .          .     22:func foo() *A {\r\n       101        101     23:\ta := new(A)\r\n         .          .     24:\tfor i := 0; i \u003c 5; i++ {\r\n       505        505     25:\t\ta.r[i] = make([]int, 5)\r\n         .          .     26:\t}\r\n         .          .     27:\tfor _, r := range a.r {\r\n       505        505     28:\t\tsort.Sort(sortable(r))\r\n         .          .     29:\t}\r\n         .          .     30:\treturn a\r\n         .          .     31:}\r\n         .          .     32:\r\n         .          .     33:type sortable []int\r\n(pprof) disasm foo\r\nTotal: 1145\r\nROUTINE ======================== _/Users/r/bug.foo\r\n      1111       1111 (flat, cum) 97.03% of Total\r\n         .          .      66740: GS MOVQ GS:0x8a0, CX\r\n         .          .      66749: LEAQ -0x60(SP), AX\r\n         .          .      6674e: CMPQ 0x10(CX), AX\r\n         .          .      66752: JBE 0x668d0\r\n         .          .      66758: SUBQ $0xe0, SP\r\n         .          .      6675f: LEAQ 0x7cb9a(IP), AX\r\n         .          .      66766: MOVQ AX, 0(SP)\r\n       101        101      6676a: CALL runtime.newobject(SB)\r\n         .          .      6676f: MOVQ 0x8(SP), AX\r\n         .          .      66774: MOVQ AX, 0x48(SP)\r\n         .          .      66779: XORL CX, CX\r\n         .          .      6677b: MOVQ CX, 0x30(SP)\r\n         .          .      66780: CMPQ $0x5, CX\r\n         .          .      66784: JGE 0x667fa\r\n         .          .      66786: LEAQ 0x70333(IP), DX\r\n         .          .      6678d: MOVQ DX, 0(SP)\r\n         .          .      66791: MOVQ $0x5, 0x8(SP)\r\n         .          .      6679a: MOVQ $0x5, 0x10(SP)\r\n       505        505      667a3: CALL runtime.makeslice(SB)\r\n         .          .      667a8: MOVQ 0x20(SP), AX\r\n         .          .      667ad: MOVQ 0x28(SP), CX\r\n         .          .      667b2: MOVQ 0x18(SP), DX\r\n         .          .      667b7: MOVQ 0x48(SP), BX\r\n         .          .      667bc: TESTL AL, 0(BX)\r\n         .          .      667be: MOVQ 0x30(SP), BP\r\n         .          .      667c3: LEAQ 0(BP)(BP*2), R8\r\n         .          .      667c8: MOVQ AX, 0x8(BX)(R8*8)\r\n         .          .      667cd: MOVQ CX, 0x10(BX)(R8*8)\r\n         .          .      667d2: LEAQ 0(BX)(R8*8), AX\r\n         .          .      667d6: MOVL 0x13a034(IP), CX\r\n         .          .      667dc: TESTL CL, CL\r\n         .          .      667de: JNE 0x668b3\r\n         .          .      667e4: MOVQ DX, 0(BX)(R8*8)\r\n         .          .      667e8: LEAQ 0x1(BP), CX\r\n         .          .      667ec: MOVQ BX, AX\r\n         .          .      667ef: MOVQ CX, 0x30(SP)\r\n         .          .      667f4: CMPQ $0x5, CX\r\n         .          .      667f8: JL 0x66786\r\n         .          .      667fa: MOVQ 0(AX), CX\r\n         .          .      667fd: MOVQ CX, 0x68(SP)\r\n         .          .      66802: LEAQ 0x8(AX), SI\r\n         .          .      66806: LEAQ 0x70(SP), DI\r\n         .          .      6680b: CALL 0x507ae\r\n         .          .      66810: XORL CX, CX\r\n         .          .      66812: LEAQ 0x68(SP), DX\r\n         .          .      66817: MOVQ CX, 0x38(SP)\r\n         .          .      6681c: MOVQ DX, 0x40(SP)\r\n         .          .      66821: CMPQ $0x5, CX\r\n         .          .      66825: JGE 0x668a3\r\n         .          .      66827: MOVQ 0x10(DX), BX\r\n         .          .      6682b: MOVQ 0x8(DX), BP\r\n         .          .      6682f: MOVQ 0(DX), SI\r\n         .          .      66832: MOVQ SI, 0x50(SP)\r\n         .          .      66837: MOVQ BP, 0x58(SP)\r\n         .          .      6683c: MOVQ BX, 0x60(SP)\r\n         .          .      66841: LEAQ 0x10d518(IP), BX\r\n         .          .      66848: MOVQ BX, 0(SP)\r\n         .          .      6684c: LEAQ 0x50(SP), BX\r\n         .          .      66851: MOVQ BX, 0x8(SP)\r\n         .          .      66856: MOVQ $0x0, 0x10(SP)\r\n       505        505      6685f: CALL runtime.convT2I(SB)\r\n         .          .      66864: MOVQ 0x20(SP), AX\r\n         .          .      66869: MOVQ 0x18(SP), CX\r\n         .          .      6686e: MOVQ CX, 0(SP)\r\n         .          .      66872: MOVQ AX, 0x8(SP)\r\n         .          .      66877: CALL sort.Sort(SB)\r\n         .          .      6687c: MOVQ 0x40(SP), BX\r\n         .          .      66881: LEAQ 0x18(BX), DX\r\n         .          .      66885: MOVQ 0x38(SP), BX\r\n         .          .      6688a: LEAQ 0x1(BX), CX\r\n         .          .      6688e: MOVQ 0x48(SP), AX\r\n         .          .      66893: MOVQ CX, 0x38(SP)\r\n         .          .      66898: MOVQ DX, 0x40(SP)\r\n         .          .      6689d: CMPQ $0x5, CX\r\n         .          .      668a1: JL 0x66827\r\n         .          .      668a3: MOVQ AX, 0xe8(SP)\r\n         .          .      668ab: ADDQ $0xe0, SP\r\n         .          .      668b2: RET\r\n         .          .      668b3: MOVQ AX, 0(SP)\r\n         .          .      668b7: MOVQ DX, 0x8(SP)\r\n         .          .      668bc: CALL runtime.writebarrierptr(SB)\r\n         .          .      668c1: MOVQ 0x48(SP), BX\r\n         .          .      668c6: MOVQ 0x30(SP), BP\r\n         .          .      668cb: JMP 0x667e8\r\n         .          .      668d0: CALL runtime.morestack_noctxt(SB)\r\n         .          .      668d5: JMP _/Users/r/bug.foo(SB)\r\n         .          .      668da: INT $0x3\r\n         .          .      668db: INT $0x3\r\n         .          .      668dc: INT $0x3\r\n         .          .      668dd: INT $0x3\r\n         .          .      668de: INT $0x3\r\n(pprof) quit\r\ndunnart=% cat x_test.go\r\npackage foo\r\n\r\nimport (\r\n\t\"sort\"\r\n\t\"testing\"\r\n)\r\n\r\nfunc TestParseAllocs(t *testing.T) {\r\n\tallocs := testing.AllocsPerRun(100, func() {\r\n\t\tfoo()\r\n\t})\r\n\tt.Log(\"allocs:\", allocs)\r\n\tif allocs != 11 {\r\n\t\tt.Fatal(\"expected 11 allocations, got \", allocs)\r\n\t}\r\n}\r\n\r\ntype A struct {\r\n\tr [5][]int\r\n}\r\n\r\nfunc foo() *A {\r\n\ta := new(A)\r\n\tfor i := 0; i \u003c 5; i++ {\r\n\t\ta.r[i] = make([]int, 5)\r\n\t}\r\n\tfor _, r := range a.r {\r\n\t\tsort.Sort(sortable(r))\r\n\t}\r\n\treturn a\r\n}\r\n\r\ntype sortable []int\r\n\r\nfunc (s sortable) Len() int           { return len(s) }\r\nfunc (s sortable) Less(i, j int) bool { return s[i] \u003c s[j] }\r\nfunc (s sortable) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }\r\ndunnart=% \r\n```\r\n",
	"user": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"comments": 3,
	"created_at": "2016-04-26T17:36:30Z",
	"updated_at": "2016-05-04T22:04:07Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
