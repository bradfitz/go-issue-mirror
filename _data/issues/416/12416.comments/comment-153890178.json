{
	"id": 153890178,
	"body": "\u003eThe rules don't seem to prohibit Go code writing a Go pointer in to an object in the C heap. From my    understanding, this is a violation of the invariant and will be detected by the \"expensive\" checking mode, but doesn't seem to be a violation of the rules. Is that okay because these rules are just about passing pointers? Or do we want to call this out explicitly?\r\n\r\nI think you are right, now that we do not require that a C function return in a timely fashion we also need to prevent the go pointers from being shared on the C malloc heap.\r\n\r\n\"However, C code may not keep a copy of the Go pointer after the call returns.\" is no longer sufficient.",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-04T22:30:48Z",
	"updated_at": "2015-11-04T22:30:48Z"
}
