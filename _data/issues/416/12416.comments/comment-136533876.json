{
	"id": 136533876,
	"body": "Thanks for some clarifications, and mention of syscall in the doc.\r\n\r\n\u003e Clearly the syscall package has to consider the same set of issues, but these rules are intended to apply to cgo. We control all the entry points to the syscall package, so if appropriate we can do something different. I think that for Windows we essentially need to define for each entry point what is permitted.\r\n\u003e\r\n\u003e For example, currently on Unix the function syscall.ForkExec takes a pointer to a syscall.ProcAttr and that structure is permitted to contain Go pointers. This is fine, and it demonstrates that the syscall functions are not required to precisely follow the rules for cgo.\r\n\r\nWould those per-entry-point \"detailed\" features be available to third-party library/package writers? I believe there's significant value in being able to call WinAPI functions from pure Go code, which then can be just \"go get\", without need for a whole MinGW toolchain installed and well-configured (and necessarily from some specific, this-month-fashionable fork). And I believe there are third-party libraries making use of that, and not only on Windows but I believe on Linux too. Not to mention golang.org/x/sys, I suppose?\r\n\r\nAnd, right, WinAPI calls *do* love to receive pointers to structs with pointers (including ASCIIZ strings), that's quite true.\r\n\r\n\u003e What matters for this proposal is whether the value is a pointer into Go memory. The actual type of the value does not matter.\r\n\u003e (...)\r\n\u003e What matters is the values stored in this uintptr fields.\r\n\r\nI'm not sure I understand still. In Go ~1.4 the boundary between what to GC was a \"pointer\" vs. \"not a pointer, just an int, even if same bit pattern\" seemed to be placed quite explicitly between unsafe.Pointer and uintptr. From the above I seem to understand this may possibly change? That said, from other comments I'm starting to understand the specifics here are maybe expected to be fleshed out later (or do I misunderstand?) \r\n\r\n",
	"user": {
		"login": "akavel",
		"id": 273837,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-01T00:19:40Z",
	"updated_at": "2015-09-01T00:19:40Z"
}
