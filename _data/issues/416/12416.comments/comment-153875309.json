{
	"id": 153875309,
	"body": "Looks good overall. I just have a few questions and clarifications.\r\n\r\nThe rules don't seem to prohibit Go code writing a Go pointer in to an object in the C heap. From my understanding, this is a violation of the invariant and will be detected by the \"expensive\" checking mode, but doesn't seem to be a violation of the rules. Is that okay because these rules are just about passing pointers? Or do we want to call this out explicitly?\r\n\r\n\u003e The Go garbage collector must be aware of the location of all Go pointers; a known number of pointers may be temporarily visible to C code, meaning that they exist in an area that the garbage collector can not see, and may not be modified or released.\r\n\r\nWhat's meant by \"the location\" of all Go pointers? One way to interpret that would be the location in memory of all Go pointers, but clearly the GC doesn't know the location of Go pointers passed in to C. Do you mean that it must be aware of the memory address of every Go pointer *except* a known number temporarily visible to C code?\r\n\r\nRather than \"a known number\" would a \"a known set\" be better? \"A known number\" could mean we know that there are 5 pointers visible to C but don't know what they are. The rules seem to support knowing exactly what the pointers are.\r\n\r\n\u003e By definition, since that memory block may not contain any pointers, this will only pin a single block of memory.\r\n\r\nMay not contain any Go pointers.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-04T21:42:13Z",
	"updated_at": "2015-11-04T21:42:13Z"
}
