{
	"id": 136445979,
	"body": "@swetland - I've harassed Ian enough on this issue already, but the workaround for Rule  number 3 is to allocate memory with malloc, and let *that* pointer leak into the Go code instead of a Go pointer leaking into C.  The GC will tolerate it, does not need to worry about collecting it, and you can use a finalizer on the Go object encapsulating the state of the USB device to ensure that if the object is not freed by close, then it is freed by the finalizer.  This is the idiom I've used in the past, and it's the one I recommend until you have performance problems that would justify trying something else, and my first answer for the first round of performance problems is \"we need to improve the inliner\" so that encapsulation of the malloc'd buffer is a zero-cost abstraction.",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-31T17:59:23Z",
	"updated_at": "2015-08-31T17:59:38Z"
}
