{
	"id": 136576109,
	"body": "@akavel \r\n\r\n\u003e Would those per-entry-point \"detailed\" features be available to third-party library/package writers? I believe there's significant value in being able to call WinAPI functions from pure Go code, which then can be just \"go get\", without need for a whole MinGW toolchain installed and well-configured (and necessarily from some specific, this-month-fashionable fork). And I believe there are third-party libraries making use of that, and not only on Windows but I believe on Linux too. Not to mention golang.org/x/sys, I suppose?\r\n\r\nI don't know.  The syscall and x/sys packages can provide functions to handle structs with pointers, doing things like copying the pointers into non-garbage-collected memory.  I think it would be fine to make something like that generally available.  I think we have to be careful about what we make generally available, to avoid overly constraining future GC work.\r\n\r\n\u003e I'm not sure I understand still. In Go ~1.4 the boundary between what to GC was a \"pointer\" vs. \"not a pointer, just an int, even if same bit pattern\" seemed to be placed quite explicitly between unsafe.Pointer and uintptr. From the above I seem to understand this may possibly change? That said, from other comments I'm starting to understand the specifics here are maybe expected to be fleshed out later (or do I misunderstand?)\r\n\r\nThere is not any intent to change the garbage collector behaviour.  This proposal is about the very specific problem of how to safely pass a Go pointer to C code.  You're right: I was wrong about the types.  A value of type uintptr is not a pointer.  You are already in potential trouble if you convert a Go pointer to uintptr.  This proposal won't make that worse or better.  The type of a Go pointer doesn't matter, but it does have to be some sort of pointer type.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-01T04:07:13Z",
	"updated_at": "2015-09-01T04:07:13Z"
}
