{
	"id": 244139915,
	"body": "Isn’t this pretty much what the assembler-time instruction selection is doing? Just riffing on the open-thinking…\n\n \n\nWe could have some Mod-like compile-time pseudo instructions\n\n \n\nN DIV D =\u003e Q,R\n\nN MOD D =\u003e R\n\n \n\nWith the logic like this:\n\n \n\nPseudoDiv(N,D) =\u003e Phi(Q), Phi(R)\n\n \n\nWhere what gets used later determines what instructions gets scheduled up front. This is the same idea as Josh’s but using (abusing?) the existing phi() mechanism of SSA.\n\n \n\nFrom: Josh Bleecher Snyder \u003cnotifications@github.com\u003e\nReply-To: golang/go \u003creply@reply.github.com\u003e\nDate: Wednesday, August 31, 2016 at 11:16 PM\nTo: golang/go \u003cgo@noreply.github.com\u003e\nCc: Michael Jones \u003cmichael.jones@gmail.com\u003e, Mention \u003cmention@noreply.github.com\u003e\nSubject: Re: [golang/go] cmd/compile: lower % using multiply and subtract when the result of / is known (#16416)\n\n \n\nThinking out loud, here's a possibly terrible, half-baked idea. Introduce a Cheaper Op. (Choose? Any?) It takes a variable number of arguments, all of which must contain equivalent values. Rewrite x%y to Cheaper(x%y, x-y*(x/y)). During arch-specific optimizations, as appropriate, rewrite Cheaper(Select(...), ...) to the Select and afterwards (lower in file), rewrite Cheaper(v, w) to w.\n\n—\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n",
	"user": {
		"login": "MichaelTJones",
		"id": 7877285,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-01T16:46:55Z",
	"updated_at": "2016-09-01T16:46:55Z"
}
