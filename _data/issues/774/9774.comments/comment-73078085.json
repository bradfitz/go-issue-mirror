{
	"id": 73078085,
	"body": "In your table you say old ns/op and new ns/op. What is old and what is new.\nIs old 1.3 and new 1.4 or is old 1.4 vs new is tip?\n\nOn Thu, Feb 5, 2015 at 3:33 AM, Dmitry Vyukov \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e To measure benchmark stability, you need to disable TuroBoost and\n\u003e SpeedStep in BIOS. Also bind the program to specific set of cores (for\n\u003e GOMAXPROCS=1 to a single core). Also make the system as idle as possible,\n\u003e in particular disable background processes like updaters, antiviruses, etc.\n\u003e For networking benchmarks additional instability factor is kernel, and I\n\u003e suspect OS X is not particularly good in this respect.\n\u003e\n\u003e On my linux machine the results are reasonably stable:\n\u003e\n\u003e $ nice -20 taskset 16 go test -run=none -bench=BenchmarkTCP4Persistent$\n\u003e -cpu=1,1,1,1,1,1,1,1 net\n\u003e PASS\n\u003e BenchmarkTCP4Persistent 20000 69208 ns/op\n\u003e BenchmarkTCP4Persistent 20000 69545 ns/op\n\u003e BenchmarkTCP4Persistent 20000 69302 ns/op\n\u003e BenchmarkTCP4Persistent 20000 69450 ns/op\n\u003e BenchmarkTCP4Persistent 20000 69359 ns/op\n\u003e BenchmarkTCP4Persistent 20000 69095 ns/op\n\u003e BenchmarkTCP4Persistent 20000 68679 ns/op\n\u003e BenchmarkTCP4Persistent 20000 68962 ns/op\n\u003e\n\u003e OneShot is more problematic, because it creates tons of TCP connections\n\u003e and kernel can't keep up.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/9774#issuecomment-73011298\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-05T16:35:40Z",
	"updated_at": "2015-02-05T16:35:40Z"
}
