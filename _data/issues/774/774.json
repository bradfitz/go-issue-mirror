{
	"id": 51276923,
	"number": 774,
	"state": "closed",
	"title": "Large integer division with \"big\" package crashes when result is set to zero",
	"body": "by **znxfireire**:\n\n\u003cpre\u003eConsider this program:\n\npackage main\nimport \u0026quot;big\u0026quot;\nfunc main() {\n\ta := big.NewInt(0)\n\tb := big.NewInt(0)\n\tc := big.NewInt(0)\n\ta.SetString(\u0026quot;999999999999999999999\u0026quot;, 10)\n\tb.SetString(\u0026quot;100000000000000000000\u0026quot;, 10)\n\tc.Rem(a, b)\n}\n\nThis currently crashes with an index-out-of-bounds error in divLarge (in\nbig/nat.go) because the NewInt constructor creates an empty (but non-nil!)\narray slice to represent zero. The divLarge implementation incorrectly\nassumes that non-nil slices have positive size.\n\nA simple fix is to use len() instead of a direct comparison to nil:\n\n--- src/pkg/big/nat.go.old      2010-05-11 03:21:41.000000000 +0200\n+++ src/pkg/big/nat.go  2010-05-11 03:22:13.000000000 +0200\n@@ -543,7 +543,7 @@\n        m := len(uIn) - len(v)\n \n        var u nat\n-       if z2 == nil || \u0026amp;z2[0] == \u0026amp;uIn[0] {\n+       if len(z2) == 0 || \u0026amp;z2[0] == \u0026amp;uIn[0] {\n                u = u.make(len(uIn) + 1).clear() // uIn is an alias for z2\n        } else {\n                u = z2.make(len(uIn) + 1).clear()\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2014-12-08T10:05:48Z",
	"created_at": "2010-05-11T01:31:52Z",
	"updated_at": "2016-06-24T19:15:53Z"
}
