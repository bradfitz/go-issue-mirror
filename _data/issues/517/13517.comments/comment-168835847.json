{
	"id": 168835847,
	"body": "BTW: WRT version ranges and updates ...\r\n\r\nIf two packages (*a*+*b*) rely on the same separate package (*p*) and *p* makes a new release, you need to do integration testing when you upgrade your copy of *p*. Anything else it just **hoping** it will work. When doing ruby in the past (and other languages as well), I hated having to update a dependency because it didn't really matter what the released version number was in the end. Yes, the version number gives you a clue / hint wrt compatibility, but **that's it**.\r\n\r\nBecause of that I'm +1 wrt version numbers (semver specifically), but in the end it just doesn't matter that package *a* uses version 2.4.1 of *p* and package *b* uses version 2.4.2 of *p*. 2.4.5 of *p* was released and it needs to be re-validated to work with both the version of *a* and *b* that you have. I've had to patch/upgrade either package *a* and/or *b* to work with the new *p* (which for arguments sake fixes a bug that I'm experiencing) more times than I care to reflect back on.\r\n\r\nAlso, just because *p* released 2.4.5 doesn't mean I need to upgrade any code I have using package *p* to the new version. I may need to (because of the aforementioned bugfix example), but that's on a case by case basis.\r\n\r\nAfter reading this entire thread again I can understand why the use cases call for version ranges. However I still do not believe they are necessary in go, when using tooling like `godep/govendor/etc` and the `vendor/` directory to record and check in your dependent packages.  I do not want to inflict this pain onto the entirety of go when we can avoid it.",
	"user": {
		"login": "freeformz",
		"id": 103,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-04T22:46:05Z",
	"updated_at": "2016-01-04T22:46:05Z"
}
