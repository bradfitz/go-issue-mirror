{
	"id": 167861392,
	"body": "@mattfarina RE Vendor file location: I'm fine either way. I think @rsc wanted to keep all the vendor stuff in the vendor folder, including the vendor file. If you want a gitignore line that ignores the content of the vendor folder but not vendor/vendor.json file, use `vendor/*/` in your \".gitignore file.\r\n\r\n@mattfarina and @robfig RE commands: I'm open to suggestions here but how `govendor` uses the `vendor-spec` to support commands is to just include them as a normal package. The tool itself then discovers it is a program (it finds a package main) and can decide what to do with it. I could however be missing something here. I'm assuming the developer, tool, or script could then run `go install vendor/...` and it would install the packages and commands so that `go:generate` would work. Again, let me know what I missed.\r\n\r\n@robfig RE existing tools: Yeah, I understand. It might be easier to let projects move off of it if they choose to. I hear `gb` is a great tool for building go using workspaces. It also has a gb-vendor sub-command that comes with it. In this case I think we are looking vendor tools that complement the `go` command.\r\n\r\n@technosophos and @shurcooL RE recording at the package level: I agree I'm the odd man out on this and as such might lose :). But I will try to explain my rationale. Let me break this down into two parts:\r\n 1. The ability to specify individual packages from a repository.\r\n 2. The ability to specify a revision per package.\r\n\r\nI have a package that vendors files from vitess. Now vitess is a large repository and I only want two packages out of the entire thing. For this I would like to specify which two packages I want and leave the rest behind. For this I need (1).\r\n\r\nPoint (2) is mainly due to this: you have a stable package `github.com/u/p/{a,b,c}`, perhaps it is a utility repository with several repos, perhaps like `golang.org/x/crypto` and we wanted to update the `bcrypt` package leave the `ssh` package where it is at. With the current design tools can allow for this. This is what `govendor` allows.\r\n\r\nThere are times where you want to note an entire repository or sub-tree for either C files, resources, or maybe that's just how your tool works. That is why I am proposing adding the `\"tree\": true` field.\r\n\r\nI use property (1) all the time and like selecting out package from a repo. I would like to retain (2), but I do understand objections to it. I would be interested in other's opinions on this too (try out `govendor`, not to use it, but to see how it works in this context).\r\n\r\n@technosophos RE origin / std library patches: This is not FUD. This is an example from the `vendor-spec` itself:\r\n```\r\n        {\r\n            \"origin\": \"github.com/MSOpenTech/azure-sdk-for-go/vendor/crypto/tls\",\r\n            \"path\": \"crypto/tls\",\r\n            \"revision\": \"80a4e93853ca8af3e273ac9aa92b1708a0d75f3a\",\r\n            \"revisionTime\": \"2015-04-07T09:07:15-07:00\",\r\n            \"comment\": \"located on disk at $GOPATH/src/github.com/kardianos/mypkg/vendor/crypto/tls\"\r\n        },\r\n```\r\nThis allows representing the package import path is `crypto/tls`, but get it from the azure repository (in this case it would be a patched version to allow go to connect to azure). `govendor` can handle this situation today because the vendor-spec allows it. It shouldn't be common, but it should be supported. This is part of the file format as the specification needs both a `path` and `origin` field and constant semantics assigned to each.\r\n\r\n@technosophos RE existing formats: Early this year the core developers stipulated that the manifest file should be able to be reasonably read with the go std library. Either we create an ad-hoc format, or we use something kinda gross, but well supported like JSON or XML. The fields that the glide.lock file has by and large seem fine. I'm not sure if relevant, but the vendor-spec didn't come from govendor, govendor came from the vendor-spec. So the glide.lock file looks fine, but not yaml. That is a huge format to support and isn't in the std library.\r\n\r\n@akavel RE changes to spec: I'm glad it is useful. Yes, before it noted down the relative path from the vendor file, so you could place it many places and have it resolve. It has been locked down some to just the vendor folder. The current method is slightly simpler but more restrictive. I'd love to hear other's thoughts on the matter. Relevant issue: https://github.com/kardianos/vendor-spec/issues/39\r\n\r\n@akavel RE additions: That was added early on as a suggestion. So yes, that is encouraged.\r\n",
	"user": {
		"login": "kardianos",
		"id": 755121,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-29T19:36:32Z",
	"updated_at": "2015-12-29T19:36:32Z"
}
