{
	"id": 168232512,
	"body": "If the manifest/build file supports ranges, then specific version tags are a trivial degenerate case.  (Actually composer supports specific commit hashes, too, but their use is generally discouraged.)  So if your application instance wants to require my YAML lib version 1.5.3, specifically, then that's the only thing it will download or be compatible with even if I release a new version.  Similarly, if you specify FSLib 2.4.4 specifically in your manifest file then there's now 3 dependencies on FSLib: 2.4.2 or higher, 2.4.3 or higher, and 2.4.4.  So the build tool can resolve that to 2.4.4 and every package is happy.\r\n\r\nThat's actually a not at all unreasonable thing to do for an application instance, as it does give you more precise control.  It's *libraries* (ie, something without a main() function in it) that really benefit from ranges the most, and their downstream users, by minimizing diamond dependency issues.  If the build tool asks the user \"it looks like these are not compatible, do you want to override me and install it anyway and take your chances?\" rather than outright denying it I'm not against that myself.  I can't speak for @mattfarina and @technosophos, of course.\r\n\r\nIf the manifest file supports ranges, which by nature can include a specific tag, then I think that would give everyone what they're looking for.  Application instances can have a very tightly controlled set of legal dependency versions, libraries can be more liberal, and those who want more tight control even on libraries (eg, @kardianos) can still do that.  If that ends up causing issues for downstream users, well, that's a social pressure \"let the market decide\" question, not a technical one, so I think is fine to punt on.",
	"user": {
		"login": "Crell",
		"id": 254863,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-31T18:26:36Z",
	"updated_at": "2015-12-31T18:32:46Z"
}
