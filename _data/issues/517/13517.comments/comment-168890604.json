{
	"id": 168890604,
	"body": "Quoting from the YC post that @sdboyer linked:\r\n\r\n\u003e You don't pin versions in libraries, you pin them in applications.\r\n\u003e Almost every package in the dependency graph should be using version ranges. That avoids version lock and makes it easier to satisfy shared dependencies. It also means libraries don't all have to bump patches that just change dependency versions.\r\n\u003e But, in your application, in the root of the dependency graph, you pin everything that you're using right now. You check that in to ensure that everyone on your team and every machine gets the same versions of all of the dependencies.\r\n\u003e You get good code reuse and deterministic builds.\r\n\u003e This is exactly why Bundler separates out the lockfile from the Gemspec. It's unintuitive at first, but it works better than any other system I've seen once you grok it.\r\n\r\n^^ That's the same point I'm making.  It's the same conclusion that Composer reached for PHP.  It's the same conclusion that Ruby reached.  It's the same conclusion that the Glide team reached for Go, after fighting that conclusion for a while.\r\n\r\nSo if the languages that have built successful packaging tools have all reached the same conclusion (version range manifest file on libraries, pinned lock file on applications), what about Go is so inherently different that it shouldn't adopt a known-successful model?  I don't mean about Go's status quo today (the status quot is obviously insufficient in this regard or we wouldn't be having this conversation), but what is intrinsic to Go that makes it so different?\r\n\r\nThat's what I don't get.  When we know there's a model that's proven to work, gives everyone the flexibility they want/need, and and solves the problem space successfully, why wouldn't we go with that and benefit from everyone else's experience?  (Inquiring baby Gophers want to know!)",
	"user": {
		"login": "Crell",
		"id": 254863,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-05T04:07:49Z",
	"updated_at": "2016-01-05T04:10:25Z"
}
