{
	"id": 168187737,
	"body": "@crell Thank you for all your insights into what's happening in PHP and your opinions on this topic. It's good for us to hear an outside view.\r\n\r\nI'd like to step back and share two conceptual things to this conversation that I think are going unsaid but may be useful to explicitly state.\r\n\r\n1. There is a difference between observation, such as observing a user need and collecting it in a requirements or a description of what a package manager for another language does, and opinion of what we think is a good idea. If we can focus more on observing user need and solving those with common pattern we could more easily move away from debating opinions which can easily go the [color of the bike shed](https://en.wikipedia.org/wiki/Parkinson%27s_law_of_triviality) route.\r\n2. _I think_ (and please note this is my opinion) that a focus should be on enabling users of the output to be successful. That is users of any tooling and those who create packages for others to consume. To set them up for success in the easiest manner possible.\r\n\r\nWith these two things in mind I'd like to share some observations and opinions (which I will call out separately).\r\n\r\n**Observations:**\r\n\r\n* The language that have more recently created package management solutions (e.g., PHP, Rust, JavaScript, Elixir) have both a manifest file and a lock file. Some tooling, developed before these modern systems, has the ability to have versions and lock in their manifest.\r\n* Every major package manager for every language does version numbers. Their manifest files support specifying acceptable ranges.\r\n* I've been [collecting requirements for this space](https://github.com/mattfarina/pkg/tree/master/use_cases). If we are trying to solve a problem it's important to know the requirements and these are some I've collected.\r\n\r\n**Opinions:**\r\n\r\n* Those those who develop libraries for others to consume should be enabled and encouraged to use good practices for both them and the consumers of the library. I'm using library here instead of package because a library could be one or more related packages to solve a problem. Consumers of a library need to know about API changes (including additions), have responsible handling of security (and know the library maintainer will do that), have documentation on changes over time, and other elements commonly found in libraries. We should setup library creators to have examples of these good practices.\r\n* Retrieving a package from within a large monorepo (like the example in vitess @kardianos shared) are a common frustration for many developers. Even before I had a need to use one I was hearing complaints from others about them. They may be acceptable for some. Many others are annoyed by them. For example, to use the SDK to talk to the kubernetes API you need to pull down the entire kubernetes codebase (which includes all its dependencies). If you develop on kubernetes you already have it so that's not a problem. If you are just using the Go pkg to talk to the API it's an annoyance. In open source it's rare to find the two in the same repo (and there's no way to escape cloning the whole repo even if you only use a part).\r\n* User experience matters. In this case we often call it developer experience. Go is a young language that's gaining market share. We need a delightful user experience that helps developers approaching it be awesome when they use it. Package management is one of the things many people complain about and is often considered a hiccup in an otherwise delightful experience. We have an opportunity to iron that wrinkle out now.\r\n\r\nThe Go compiler isn't written in a vacuum from other compilers. In fact those behind the Go compiler have experience with compilers and virtual machines for other languages. That experience and knowledge in the space influenced the Go compiler. Package management (which is lifecycle management) is a well developed space that developers are used to. What's developed for Go should take knowledge and experience from that space into account when being developed here.\r\n\r\nI'm thankful so many people are passionate about this space. It would be useful to set aside our own emotional attachments so we can craft something useful.\r\n\r\n_Note: useful = usability + utility_",
	"user": {
		"login": "mattfarina",
		"id": 62991,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-31T12:40:26Z",
	"updated_at": "2015-12-31T12:45:38Z"
}
