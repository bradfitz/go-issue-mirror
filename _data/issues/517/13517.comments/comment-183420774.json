{
	"id": 183420774,
	"body": "@sdboyer  I finished reading the article you wrote. I'm having a hard time getting past the \"LOLZ CATZ\" tone in it.  There are many assertions of fact. For instance, I believe Dave's proposal was not accepted not because people don't want to encourage semver, but because it wasn't actionable by the any mainline go tool. I commend Dave for the proposal, but presenting Dave as the valiant hero who was shot down without good cause doesn't do anyone any good.\r\n\r\nI think most of the technical points present in the article have already been presented here. Though from the writing style it is difficult for me to unravel when you are presenting a point of view, an assertion of fact, or a proposal for action; I may have not accurately understood everything you intended to convey.\r\n\r\nA few responses:\r\n * A tool should and can work with any size of repo, monorepo or microrepos.\r\n * Using a dvcs to download source code doesn't limit the ability to work with individual packages.\r\n * Who uses a package manager is greatly determined by the language itself. For instance, in users of programs written in go shouldn't ever touch a package manager, they should touch end binaries. Developers of a given project should think about package managers, but only when updating dependencies. This is much different than PHP, Python , or Ruby.\r\n * In go, the build system will never know anything about the package manager, as it is the package manager's responsibility to put packages in the correct location for the build system, just as the compiler knows nothing about the build system.\r\n * I'm not a fan of JSON, but it is in the std lib where TOML is not (nor has it reached 1.0 yet). And YAML is sooo much more than a static configuration file, the spec is huge and extremely hard to implement. If you want to have a chance at someday integrating with the go tool, I would recommend against using YAML.\r\n\r\nSome of your points don't seem to be founded in actual issues: you have paragraph emotionally targeting people who don't think we need reproducible builds. In the Go ecosystem I don't see that attitude to begin with, so even aside from your tone, there isn't anything to be argued there: we all want reproducible builds at some level depending on our exact needs.\r\n\r\nYou do offer a good summary of different issues present in specifying version ranges and a good point in that the developer can treat them as a suggestion and override them.\r\n\r\nThank you for your work on glide. I would encourage you to continue exploring what benefits you can get from doing static analysis on a project's dependencies that can augment  or assist a manually created list of declared dependencies.\r\n\r\n---\r\n\r\nI don't see this issue going forward and will probably close it soon.\r\n\r\nIn govendor this conversation has pushed me to plan to support version ranges despite the pain I've seen them bring. I already plan to support directly fetching remotes and that is closer than it was before.\r\n",
	"user": {
		"login": "kardianos",
		"id": 755121,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-12T17:26:21Z",
	"updated_at": "2016-02-12T17:27:24Z"
}
