{
	"id": 167644757,
	"body": "\u003e But, the Revision property can be multiple things including a tag (e.g., v1.3.5) and the description says it can be used to fetch the same or similar version. A lock file needs to be the exact same version down to the commit. This is needed to reproducible builds.\r\n\r\nAgree. For distributed vcs the `revision` field is the hash. I could specify that perhaps more clearly. I think we agree here.\r\n\r\n\u003e There are cases where you have trees of dependencies. Those trees could list the same dependency more than once and have slightly different compatibility requirements. Any automation tooling needs to resolve the latest version that meets all the requirements.\r\n\r\nThe vendor-spec defines the content as everything that is or should be in a single level \"vendor\" folder. I think that should be sufficient for a lock file, correct?\r\n\r\n\u003e Handling this is usually done by specifying acceptable version ranges (e.g., \u003e= 1.2.3, \u003c 2.0.0). There needs to be a field to specify these ranges for resolution in addition to a locked revision field. In most modern systems these two types of information are captured in two different files (a config and a lock file).\r\n\r\nI'm only interested in specifying what we know as the lock file. I think the \"version \u003e= 1.2.3\" would be fine in a different config file.\r\n\r\n\u003e There are times where you don't know the VCS type. For example, the url https://example.com/foo/bar could be the path to a package but there isn't enough detail to capture which VCS is behind it. Is it Git, Svn, or something else? There really should be an opt-in property to specify the VCS since Go supports 4 out of the box. This is needed as part of the setup to reproducibly setup the environment in different systems.\r\n\r\nGo get handles this with probing. I'm also fine adding a well known optional field that specifies the vcs type (\"git\", \"ssh+git\", \"hg\"). I don't see this as a show stopper.\r\n\r\n\u003e To produce a reproducible build you really need to capture the complete dependency tree and the pinned versions (commit ids) for everything. At the top level of an application you only want the packages for your application. I'm not sure how to deal with both using this spec.\r\n\r\nI'm not sure I understand your concern. If you have or want a package in the vendor folder, have the tool write down the package path and revision in the vendor-spec file and it will be captured. Could you help me see what I might be missing? To be concrete, in `govendor`, does it not have enough information for reproducible builds?\r\n\r\n\u003e Provides a user friendly way to capture dependency information.\r\n\r\nSure, I would choose to use a CLI command in `govendor`, glide and glock could use a config file. We all write down what we fetch in a single lock type file.\r\n\r\n\u003e No requirement on packages being in the GOPATH at any point (other than the parent application being worked on). This is often requested.\r\n\r\nThis is tool specific, not spec specific. I'm working on adding this to `govendor` and there are no issues with adding it.\r\n\r\n\u003e Deals with renaming, private repos, multiple VCS, and lots of variation.\r\n\r\nI'm not sure what you mean by renaming. Origin? Multiple VCS can be handled just fine, that's a tool issue. Private repos is worth talking about, but it might be handled with a stored ssh key and saying, \"use ssh\"? But again, I don't see a conflict with the given spec.\r\n\r\n----\r\n\r\nTo make sure we are talking about the same thing, I will copy and paste in the glide.lock file for glide and the vendor.json file for govendor:\r\n\r\nglide glide.lock:\r\n```\r\nhash: 1fdfb16656a1b4a1664afdc9e2a5fc8040165bc5b6e85812df2affceacb7fbc8\r\nupdated: 2015-12-21T09:29:33.170992254-05:00\r\nimports:\r\n- name: github.com/codegangsta/cli\r\n  version: b5232bb2934f606f9f27a1305f1eea224e8e8b88\r\n- name: github.com/Masterminds/cookoo\r\n  version: 78aa11ce75e257c51be7ea945edb84cf19c4a6de\r\n  subpackages:\r\n  - .\r\n- name: github.com/Masterminds/semver\r\n  version: 6333b7bd29aad1d79898ff568fd90a8aa533ae82\r\n- name: github.com/Masterminds/vcs\r\n  version: eaee272c8fa4514e1572e182faecff5be20e792a\r\n- name: gopkg.in/yaml.v2\r\n  version: f7716cbe52baa25d2e9b0d0da546fcf909fc16b4\r\ndevImports: []\r\n```\r\n\r\ngovendor vendor.json\r\n```\r\n{\r\n\t\"comment\": \"\",\r\n\t\"ignore\": \"\",\r\n\t\"package\": [\r\n\t\t{\r\n\t\t\t\"path\": \"github.com/dchest/safefile\",\r\n\t\t\t\"revision\": \"33aeb10e4bb6edb4016c53b6140fc9a603346e04\",\r\n\t\t\t\"revisionTime\": \"2015-07-03T18:05:53+02:00\"\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\nWe are really talking about lock files, not a package specification. In other words, I don't think your pkg spec and the vendor-spec are competing, they are doing completely different things. Your glide lock file is pretty much exactly what the vendor-spec is trying to do as far as I can tell.\r\n\r\nThere are corner cases to discuss, but every tool that I've seen has something like a lock file that contains an import path and a revision (a hash if using a dvcs). Perhaps we can't agree on all the other meta data, but maybe we can at least write those two bit of info, and maybe a few others into the same machine format.\r\n",
	"user": {
		"login": "kardianos",
		"id": 755121,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-28T20:13:54Z",
	"updated_at": "2015-12-28T20:13:54Z"
}
