{
	"id": 66092363,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003e8l never disassembled the output. It listed the assembly language for the output,\nbut because the assembly language was 8l's input, it was just printing its input,\nbasically.\n\nNow the conversion from assembly language to machine code happens in 8a/8g/8c\nas part of liblink. The -S flag on all of those gives the exact instructions that will be\nin the binary, not a pseudo-stream that will be munged by the linker.\n(That's why the -S flag is so much noisier now.)\n\nWe might be able to make 8l -a produce the old output if we link the libmach disassembler\nin and then munge it to do different symbol name resolution. But that will require\nchanges to\nlibmach, and we are so very close to deleting it instead.\n\nFor Go 1.4 it might be easier since we will have a linker written in Go and a\ndisassembler\nwritten in Go. But it's still not clear whether it's worthwhile.\n\nI admit it: I love the -a flag too, and I miss it. But I don't see an easy way to bring\nit back.\n\nFor Go 1.3 I expect we will ship a useful 'go tool objdump', so perhaps instead of 8l -a\nyou can run 8l to generate an 8.out and then use 'go tool objdump 8.out'.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-27T01:21:39Z",
	"updated_at": "2014-12-08T10:41:49Z"
}
