{
	"id": 237012698,
	"body": "This turns out to require more invasive changes than I originally realized.\r\n\r\nTo be useful, it needs to be possible to add methods to types created at run time. That means taking some equivalent to ```func(receiver reflect.Value, args []reflect.Value) (results []reflect.Value)``` as the user's implementation of a method.\r\n\r\nBut methods are called directly from pointers to the text segment (stored in the itab). The unboxed receiver value is on the stack for the method body to use, but no type is available. So there's no way for the reflect package to take the receiver value and box it up into a reflect.Value when the method is called.\r\n\r\nAssuming we want to avoid code generation, some change to dynamic method calling would have to be made. The smallest is probably dropping the underlying type and method number onto the stack. A more significant change would be making the function pointers in the itab indirect like func() pointers (https://golang.org/s/go11func). A third option would be a note on the itab saying these are func()-style pointers. Any of these actions incurs some cost on dynamic method calls.\r\n\r\nStill pondering.",
	"user": {
		"login": "crawshaw",
		"id": 161319,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-02T19:15:27Z",
	"updated_at": "2016-08-02T19:15:27Z"
}
