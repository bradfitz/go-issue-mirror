{
	"id": 66053863,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1 by **leimy2k**:\n\n\u003cpre\u003eNaive library based API implementation?\n\nSeems to work with a very basic test.\n\n\npackage barrier\n\nimport (\n\t\"sync\"\n)\n\ntype Group struct {\n\tcount int // number of checkins\n\ttotal int\n\tsignalin chan bool\n\twaiter * sync.RWMutex\n}\n\nfunc controller (g * Group) {\n\tfor g.count != g.total {\n\t\t\u0026lt;- g.signalin\n\t\tg.count++\n\t}\n\n\tg.waiter.Unlock()\n}\n\nfunc NewGroup (size int) (* Group) {\n\tg := \u0026Group{0,size, make(chan bool, size), \u0026sync.RWMutex{}}\n\tg.waiter.Lock()\n\tgo controller(g)\n\treturn g\n}\n\nfunc (g * Group) Wait () {\n\tg.signalin \u0026lt;- true;\n\tg.waiter.RLock()\n}\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-01-05T02:36:46Z",
	"updated_at": "2014-12-22T05:47:31Z"
}
