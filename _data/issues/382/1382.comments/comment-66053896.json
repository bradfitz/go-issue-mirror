{
	"id": 66053896,
	"body": "\u003ca id=\"c31\"\u003e\u003c/a\u003eComment 31 by **leimy2k**:\n\n\u003cpre\u003eSure, Go's barrier can be very different from pthread_barrier, MPI_Barrier, Java's\nCyclicBarrier\n(\u003ca href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/CyclicBarrier.html)\"\u003ehttp://download.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/CyclicBarrier.html)\u003c/a\u003e\netc.  All of these will work a little differently from Go's per this proposal.  My\nargument is that this may confuse people.\n\nI did just find that boost has a simple thread barrier like the API I proposed.\n\n\u003ca href=\"http://www.boost.org/doc/libs/1_33_1/boost/thread/barrier.hpp\"\u003ehttp://www.boost.org/doc/libs/1_33_1/boost/thread/barrier.hpp\u003c/a\u003e\n\nHere is a link to what looks like a rather clever lazy Haskell barrier as well, also not\nquite what is proposed here,\n\n\u003ca href=\"http://hpaste.org/11022\"\u003ehttp://hpaste.org/11022\u003c/a\u003e\n\nOf course goroutines are not quite threads, or MPI ranks, or Java threads, or boost\nthreads, or Haskell sparks,so perhaps they do deserve different treatment.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-01-06T05:04:06Z",
	"updated_at": "2014-12-08T10:08:05Z"
}
