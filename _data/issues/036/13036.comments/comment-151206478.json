{
	"id": 151206478,
	"body": "Here's a more formal proposal for how I plan to fix this (most of this is already working, the following being a header in the source):\r\n\r\n```\r\n// Binary resource structs support unmarshalling the binary output of aapt.\r\n// Implementations of marshalling for each struct must produce the exact input\r\n// sent to unmarshalling. This allows tests to validate each struct representation\r\n// of the binary format as follows:\r\n//\r\n//  * unmarshal the output of aapt\r\n//  * marshal the struct representation\r\n//  * perform byte-to-byte comparison with aapt output per chunk header and body\r\n//\r\n// This process should strive to make structs idiomatic to make parsing xml text\r\n// into structs trivial.\r\n//\r\n// Once the struct representation is validated, tests for parsing xml text\r\n// into structs can become self-referential as the following holds true:\r\n//\r\n//  * the unmarshalled input of aapt output is the only valid target\r\n//  * the unmarshalled input of xml text may be compared to the unmarshalled\r\n//    input of aapt output to identify errors, e.g. text-trims, wrong flags, etc\r\n//\r\n// This provides validation, byte-for-byte, for producing binary xml resources.\r\n//\r\n// It should be made clear that unmarshalling binary resources is currently only\r\n// in scope for proving that the BinaryMarshaler works correctly. Any other use\r\n// is currently out of scope.\r\n```",
	"user": {
		"login": "dskinner",
		"id": 92266,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-26T16:50:49Z",
	"updated_at": "2015-10-26T16:50:49Z"
}
