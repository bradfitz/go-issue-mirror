{
	"id": 66089398,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003eThe code in stack.c suggests the opposite:\n\n\tfor(dp = \u0026gp-\u0026gt;defer, d = *dp; d != nil; dp = \u0026d-\u0026gt;link, d = *dp) {\n\t\tif(adjinfo-\u0026gt;old.lo \u0026lt;= (uintptr)d \u0026\u0026 (uintptr)d \u0026lt; adjinfo-\u0026gt;old.hi) {\n\t\t\t// The Defer record is on the stack.  Its fields will\n\t\t\t// get adjusted appropriately.\n\t\t\t// This only happens for runtime.main and runtime.gopanic now,\n\t\t\t// but a compiler optimization could do more of this.\n\t\t\t// If such an optimization were introduced, Defer.argp should\n\t\t\t// change to have pointer type so that it will be updated by\n\t\t\t// the stack copying. Today both of those on-stack defers\n\t\t\t// set argp = NoArgs, so no adjustment is necessary.\n\t\t\t*dp = (Defer*)((byte*)d + adjinfo-\u0026gt;delta);\n\t\t\tcontinue;\n\t\t}\u003c/pre\u003e\n\n_Labels changed: added **release-go1.5**, removed **release-none**._\n\n\n_Status changed to **Accepted**._",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-15T21:28:25Z",
	"updated_at": "2014-12-22T06:30:55Z"
}
