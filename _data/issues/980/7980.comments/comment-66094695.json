{
	"id": 66094695,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eScratch the overflow comment. It appears that the 32 bit operand to MOV gets\nsign-extended by the processor. Note that the machine code does not contain 0xffffffff:\n\n   0x0000000000002000 \u0026lt;+0\u0026gt;:\t48 8b 14 25 c0 5c 07 40\tmov    0x40075cc0,%rdx\n   0x0000000000002008 \u0026lt;+8\u0026gt;:\t48 8b 0c 25 c0 5c 07 80\tmov    0xffffffff80075cc0,%rcx\n   0x0000000000002010 \u0026lt;+16\u0026gt;:\t48 8b 1c 25 c0 5c 07 00\tmov    0x75cc0,%rbx\n\ngdb disassembler's sign extension matches observed behavior--the panic is due to an\nattempt to dereference 0xffffffff80075cc0. It also matches\n\u003ca href=\"http://onlinedisassembler.com/odaweb/iH4HYC/0\"\u003ehttp://onlinedisassembler.com/odaweb/iH4HYC/0\u003c/a\u003e.\n\nThe two disassemblers I tried that do symbol resolution (Hopper.app and rsc's new x86\ndisassembler) incorrectly resolve this address to the main.c symbol.\n\nI think that we need to do relative addressing for addresses above 2**31. This might be\na biggish change. It's also worth noting that this bug is not new -- it reproduces with\nGo 1.2.\n\nI'm going to stop working on this for now; my head hurts from wading through Intel's\ndocs.\u003c/pre\u003e",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-05-14T22:25:30Z",
	"updated_at": "2014-12-22T06:34:31Z"
}
