{
	"id": 51288009,
	"number": 8307,
	"state": "closed",
	"title": "spec: type of variables initialized by untyped constants",
	"body": "by **nautigar**:\n\n\u003cpre\u003eIn the section on Variable Declarations, the spec says:\n\nIf the type is absent and the corresponding expression evaluates to an untyped constant,\nthe type of the declared variable is as described in Â§Assignments.\n\nIn the Assignments Section, the only relevant paragraph on types says: \n\nIf an untyped constant is assigned to a variable of interface type or the blank\nidentifier, the constant is first converted to type bool, rune, int, float64, complex128\nor string respectively, depending on whether the value is a boolean, rune, integer,\nfloating-point, complex, or string constant.\n\nExample 1\n\nconst a = 100\nvar i interface{} = a\n\nAccording to the spec cited above, the dynamic type of i is int. No problem.\n\nExample 2\n\nconst a = 100\nvar v = a\n\nThe spec does not cover this case. How is the type of v determined?\n\nExample 3\n\nconst a = 5000000000\nvar v = a\n\nMore serious problem here: Is this allowed? (playground experiment says no).\nIf yes, what should be the type of v (int64, uint64?). The spec does not cover this case.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:46:10Z",
	"created_at": "2014-07-01T15:14:06Z",
	"updated_at": "2016-06-25T01:37:25Z"
}
