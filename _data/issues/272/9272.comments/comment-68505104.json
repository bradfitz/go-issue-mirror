{
	"id": 68505104,
	"body": "Fair enough, thanks for clarifying. If it really is as simple as ensuring\r\nthe textflag.h files are present (I take no position on a new internal\r\npackage) then go build will be able to create everything from the runtime\r\nupwards as required, then go for it.\r\n\r\nOn Fri, Jan 2, 2015 at 9:41 AM, Minux Ma \u003cnotifications@github.com\u003e wrote:\r\n\r\n\u003e On Tue, Dec 30, 2014 at 9:35 PM, Dave Cheney \u003cnotifications@github.com\u003e\r\n\u003e wrote:\r\n\u003e\r\n\u003e \u003e I think it is reasonable if you (the developer) are going to set up a\r\n\u003e \u003e cross\r\n\u003e \u003e compiling installation you start with the source release. Given you have\r\n\u003e \u003e to\r\n\u003e \u003e compile the additional architectures on your development machine it\r\n\u003e \u003e doesn't\r\n\u003e \u003e seem like an undue request to compile the first architecture as well.\r\n\u003e \u003e\r\n\u003e What I'm concerned about is not compiling the toolchain programs, but you\r\n\u003e need to run make.bash --no-clean for each platform (OS/arch pair) that you\r\n\u003e want to cross compile to.\r\n\u003e\r\n\u003e Ideally, once you have the toolchain programs, building a one-shot program\r\n\u003e for a new platform should be as easy as:\r\n\u003e GOOS=goos GOARCH=goarch go build import/path\r\n\u003e\r\n\u003e Even if you're using binary distributions, you should still be able to\r\n\u003e cross\r\n\u003e compile for the same architecture but different OSes easily (without\r\n\u003e modifying\r\n\u003e $GOROOT/pkg), that's why I propose that we move the only remaining required\r\n\u003e headers files into internal/runtime so that they don't need to be in\r\n\u003e $GOROOT/pkg/$GOOS_$GOARCH.\r\n\u003e\r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub\r\n\u003e \u003chttps://github.com/golang/go/issues/9272#issuecomment-68500904\u003e.\r\n\u003e",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-02T01:42:38Z",
	"updated_at": "2015-01-02T01:42:38Z"
}
