{
	"id": 66092308,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6 by **justin@fathomdb.com**:\n\n\u003cpre\u003eAdding a feature can simplify the language if it becomes more coherent, and thus you\ndon't need to document the inconsistency.  Consider { the set of integers except for\nseven (because seven includes the word even but is not even, and this has caused some\npeople using regexes to think that seven is even) }; add { seven } and you have a\nsimpler set :-)\n\nSemantic arguments aside, the bigger win is in a simpler language \u0026 runtime: e.g. a rich\ncollections library becomes possible.  So even if the go language itself did become more\ncomplicated, it can still be simpler for go programmers.\n\nIn terms of implementation: doesn't Go's dynamic interface table building make this even\neasier than it would be in other languages?  Specifically: we match the method as normal\n(by name); if the return types are the same or bitwise-assignable then no problem;\notherwise we build a shim function that calls the method and performs the (verified\ntypesafe) cast.  We could also do it at each call-site, this would avoid runtime code\ngeneration, but I think this would be sub-optimal.\n\nIs there a specific problem you're alluding to?  Would this e.g. be the first place that\nwe runtime generate code?\n\nIf runtime code generation is a no-go for go, there may be other approaches we could\ntake (e.g. insert a generic shim function into the itable, which then looks up the\nactual method call and the cast and performs them without code generation; we could\nmemoize the info it needs in the itable)\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-11T18:39:12Z",
	"updated_at": "2014-12-08T10:41:45Z"
}
