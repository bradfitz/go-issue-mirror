{
	"id": 66066325,
	"body": "\u003ca id=\"c20\"\u003e\u003c/a\u003eComment 20:\n\n\u003cpre\u003eIn September, I wrote back to a mail thread with you (Brad) and Rob (on 9/23/2013;\nsubject \"m[string(byteSlice))] CL\"):\n\n---\nI have thought a bit more about this. I believe that we could do it more generally, but\nthat we should not do it just for this special case.\n\nSpecifically, if we special case x = m[string(b)], then \n\ns := string(b)\nx = m[s]\ny = m2[s]\n\nwill actually be slower than\n\nx = m[string(b)]\ny = m2[string(b)]\n\nand that bothers me quite a bit. However, it should be possible to do something a little\nlike escape analysis to see that between the definition of s and its uses, there are no\nsynchronization points and no assignments that might legitimately allow s to contain\ndifferent bytes from b, at which point the optimization would apply. If we did something\nlike that, it would make things faster while still keeping performance a bit more\npredictable.\n\nI don't know when this would happen. Maybe for Go 1.3.\n---\n\nYou asked why it bothered me and I wrote:\n\n---\nbecause pulling repeated computed subexpressions into a variable should be faster than\nnot.\ni don't know of any case today where that's not true.\n---\n\nI don't think that's \"barely close to no feedback\". My position is still what it was in\nSeptember. \n\nI apologize for not seeing this issue until today. I did not see this issue due to\nover-aggressive mail filtering, which I have fixed[*]. I went looking for the issue\nbecause Ian asked me about it off-issue. (So no, this thing was not on.)\n\nI will look into how hard it is to do the analysis I wrote about in September, but I\ncan't make any promises.\n\n[*] Because I was auto-CC'ed on every bug, I filtered them all away; I've removed my\nauto-CC and am now on golang-bugs, which I filter away, but if I'm explicitly CC'ed on a\nbug it will land in my inbox.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-01-22T00:21:31Z",
	"updated_at": "2014-12-08T10:18:25Z"
}
