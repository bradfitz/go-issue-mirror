{
	"id": 181753284,
	"body": "Yeah, see original comment, I'm not doubting that the spec allows it, technically. I created this issue mainly because I'm unsure if this was the *intended* reading of those paragraphs. If it is, fine, I acknowledge that it won't matter often enough to be a big deal. Though I could also see it as \"no one ever thought about this so they just put *some* phrasing to that effect there.\r\n\r\n\u003e (Also, one argument against relaxing the definition of recover() in this way is that it might suggest to people that defer recover() is a good idea.)\r\n\r\nWhy wouldn't it be? I think using recover is the only way to write this function in a goroutine-safe way, I see value in such a function (or a variation thereof) to exist (for example: I hide an asynchronous process from a user of my package and want to offer an idempotent, goroutine-safe Close) and I see no particular reason why we *need* to wrap recover in a func() then.",
	"user": {
		"login": "Merovius",
		"id": 720787,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-09T08:05:58Z",
	"updated_at": "2016-02-09T08:05:58Z"
}
