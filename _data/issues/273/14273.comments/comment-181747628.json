{
	"id": 181747628,
	"body": "The spec (and https://golang.org/pkg/builtin/#recover) both say that recover has to be called *by* a deferred function to be useful.\r\n\r\n\u003e The return value of recover is nil if any of the following conditions holds: [...] recover was not called directly by a deferred function.\r\n\r\nand\r\n\r\n\u003e Executing a call to recover inside a deferred function (but not any function called by it) stops the panicking sequence by restoring normal execution and retrieves the error value passed to the call of panic.\r\n\r\nI admit that I see no reason why\r\n\r\n    defer recover()\r\n\r\nshould not operate the same way as\r\n\r\n    defer func() { recover() }()\r\n\r\nbut the current behavior does follow the documentation.\r\n\r\n(Also, one argument against relaxing the definition of recover() in this way is that it might suggest to people that `defer recover()` is a good idea.)",
	"user": {
		"login": "cespare",
		"id": 318501,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-09T07:40:25Z",
	"updated_at": "2016-02-09T07:40:25Z"
}
