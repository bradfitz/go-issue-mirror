{
	"id": 142784326,
	"body": "ioctls are fine for Solaris -- these ioctls are indeed stable \u0026 documented.\n\nHOWEVER, I would *vastly* prefer to see a direction oriented towards POSIX\nequivalent functions rather than ioctls.  The fact that it may use an ioctl\nunder the hood is fine, but IMO every benefits if the public API is closer\nto documented POSIX standards.  This isn't about Solaris, its about using\nan interface that is well documented and familiar to many more people, and\nalso a heck of lot more portable.\n\nA reasonable approach might be to have both the ioctls *and* the termios\nwrappers; much like we have low level implementation details exposed via\nsyscall package, but higher level interfaces elsewhere.\n\nI'm not convinced that a very high level interface like a terminal package\nsatisfies the desire for a \"system\" level, yet portable, interface like the\nPOSIX termios functions.\n\nOn Wed, Sep 23, 2015 at 6:45 PM, Shawn Walker-Salas \u003c\nnotifications@github.com\u003e wrote:\n\n\u003e Most of the existing consumers use ioctl()-based interfaces, so I think\n\u003e it's perfectly fine to provide that interface for now. You're really just\n\u003e getting Solaris to match the status quo on other platforms where Go is used.\n\u003e\n\u003e Personally, I think #12101 \u003chttps://github.com/golang/go/issues/12101\u003e\n\u003e can cover the more general, higher-level abstractions that Go should have\n\u003e in the long-run for terminal manipulation. I wouldn't worry about exposing\n\u003e the tc*() functions for now -- that really seems like a separate issue.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/12574#issuecomment-142780159\u003e.\n\u003e\n",
	"user": {
		"login": "gdamore",
		"id": 1295229,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-24T02:24:34Z",
	"updated_at": "2015-09-24T02:24:34Z"
}
