{
	"id": 124576744,
	"number": 13799,
	"state": "closed",
	"title": "cmd/compile: bad escape analysis for linked data structures captured in closure",
	"body": "\u003e What version of Go are you using (go version)? What operating system and processor architecture are you using?\r\n\r\n* Go 1.5.2 on darwin and linux amd64\r\n* Go 1.6beta1 on darwin and linux amd64\r\n\r\n\u003e What did you do?\r\n\r\nRun the following program:\r\n\r\n```go\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n\t// Just run test over and over again. This main func is just for\r\n\t// convenience; if test were the main func, we could also trigger\r\n\t// the panic just by running the program over and over again\r\n\t// (sometimes it takes 1 time, sometimes it takes ~4,000+).\r\n\tfor iter := 0; ; iter++ {\r\n\t\tif iter%50 == 0 {\r\n\t\t\tfmt.Println(iter)\r\n\t\t}\r\n\t\ttest(iter)\r\n\t}\r\n}\r\n\r\nfunc test(iter int) {\r\n\r\n\tconst maxI = 500\r\n\tm := make(map[int][]int)\r\n\r\n\t// The panic seems to be triggered when m is modified inside a\r\n\t// closure that is both recursively called and reassigned to in a\r\n\t// loop.\r\n\tvar fn func()\r\n\tfor i := 0; i \u003c maxI; i++ {\r\n\t\tj := 0\r\n\t\tfn = func() {\r\n\t\t\tm[i] = append(m[i], 0)\r\n\t\t\tif j \u003c 25 {\r\n\t\t\t\tj++\r\n\t\t\t\tfn()\r\n\t\t\t}\r\n\t\t}\r\n\t\tfn()\r\n\t}\r\n\r\n\tif len(m) != maxI {\r\n\t\tpanic(fmt.Sprintf(\"iter %d: maxI = %d, len(m) = %d\", iter, maxI, len(m)))\r\n\t}\r\n}\r\n```\r\n\r\nNote: The constants are not special; as long as they are sufficiently large (above ~5), the behavior is exhibited.\r\n\r\n\u003e What did you expect to see?\r\n\r\nThe program should continue iterating indefinitely without triggering the panic at the end of `func test`, and indeed without panicking at all.\r\n\r\n\u003e What did you see instead?\r\n\r\nOn Go 1.5.2 and Go 1.6beta1 on darwin-amd64 and linux-amd64, the panic at the bottom of `func test` is triggered after anywhere between 1 and 4,000 iterations. Sometimes some other panics are seen (see \"Clues\" below).\r\n\r\nThis is a possible compiler bug.\r\n\r\nIt continues iterating indefinitely without panics (as expected) on gccgo 4.9.1 on linux-amd64 and on GopherJS.\r\n\r\nThanks to @shurcooL for help in reproducing and isolating this issue.",
	"user": {
		"login": "sqs",
		"id": 1976,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2016-01-13T04:01:22Z",
	"created_at": "2016-01-02T05:43:18Z",
	"updated_at": "2016-01-13T04:01:22Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
