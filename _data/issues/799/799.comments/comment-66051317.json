{
	"id": 66051317,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003e\"A constant may be given a type explicitly by a constant declaration or conversion,\nor implicitly when used in a variable declaration or an assignment or as an operand\nin an expression. ... For instance, 3.0 can be given any integer or any\nfloating-point type, while 2147483648.0 (equal to 1\u0026lt;\u0026lt;31) can be given the types\nfloat32, float64, or uint32 but not int32 or string.\"\nConstants, The Go Programming Language Specification.\n\u003ca href=\"http://golang.org/doc/go_spec.html#Constants\"\u003ehttp://golang.org/doc/go_spec.html#Constants\u003c/a\u003e\n\nAren't you are asking for the size of and alignment of an untyped constant, which are\nundefined? The constant 3 can be given any integer or any floating-point type. Give\nit a type e.g. float(3), int64(3), etc. More meaningful error reporting would be nice.\n\n\"Sizeof returns the size in bytes occupied by the value v. The size is that of the\n\"top level\" of the value only. For instance, if v is a slice, it returns the size of\nthe slice descriptor, not the size of the memory referenced by the slice.\"\nfunc Sizeof. \u003ca href=\"http://golang.org/pkg/unsafe/#Sizeof\"\u003ehttp://golang.org/pkg/unsafe/#Sizeof\u003c/a\u003e \n\nString literals are typed, they are strings. Aren't the size of and alignment of a\nstring returned by unsafe actually the size of and alignment of the string descriptor?\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-05-23T05:28:54Z",
	"updated_at": "2014-12-22T05:51:59Z"
}
