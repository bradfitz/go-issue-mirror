{
	"id": 140912253,
	"number": 14828,
	"state": "closed",
	"title": "cmd/compile: SSA performance regression for slice averaging",
	"body": "1. What version of Go are you using (`go version`)?\r\ngo version devel +ac47f66 Tue Mar 15 07:13:04 2016 +0000 linux/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nUbuntu 14.04 in Intel(R) Core(TM) i5-2450M CPU @ 2.50GHz\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/i/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/home/i/gotip\"\r\nGOTOOLDIR=\"/home/i/gotip/pkg/tool/linux_amd64\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build380342597=/tmp/go-build -gno-record-gcc-switches\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n\r\n\r\n3. What did you do?\r\nCode is at http://play.golang.org/p/L8SlHM5_IJ\r\n\r\nIt contains benchmark for two functions that average a []float64, one using index in the range-for and other using the value. \r\n\r\nI run it with \r\n\r\ngo test -bench=. \r\n\r\nI'm getting a performance regression for tip with SSA on for the value case. \r\n\r\ngo1.4.3:\r\nBenchmarkAvgSliceValue       500           3815534 ns/op\r\nBenchmarkAvgSliceIndex       300           5028982 ns/op\r\n\r\ngo1.5.3: \r\nBenchmarkAvgSliceValue-4             500           3768664 ns/op\r\nBenchmarkAvgSliceIndex-4             300           5030110 ns/op\r\n\r\ngo1.6:\r\nBenchmarkAvgSliceValue-4             500           3769454 ns/op\r\nBenchmarkAvgSliceIndex-4             300           5026162 ns/op\r\n\r\ngo-tip with ssa off and checks off:\r\n~/gotip/bin/go test -bench=. -gcflags='-d=ssa/check/off -ssa=0'\r\nBenchmarkAvgSliceValue-4             500           3771890 ns/op\r\nBenchmarkAvgSliceIndex-4             300           5030560 ns/op\r\n\r\ngo-tip with ssa on and checks off:\r\n~/gotip/bin/go test -bench=. -gcflags='-d=ssa/check/off -ssa=1'\r\nBenchmarkAvgSliceValue-4             300           5028224 ns/op\r\nBenchmarkAvgSliceIndex-4             300           5025677 ns/op\r\n\r\n4. What did you expect to see?\r\nSimilar performance with SSA on.\r\n\r\n5. What did you see instead?\r\nCompiling with SSA produces a 25% slowdown when the value is used. Disabling consistency checks doesn't help but I think it just for compiling. It seems that some optimizations for value range loop are not being applied in SSA. \r\n\r\nThe slowdown is so large for this function that I suspect I'm doing something wrong or there are some other checks in the SSA compiled code that I'm not disabling.\r\n\r\n\r\n",
	"user": {
		"login": "siritinga",
		"id": 3969105,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"assignee": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"closed_at": "2016-04-20T15:32:03Z",
	"created_at": "2016-03-15T08:58:09Z",
	"updated_at": "2016-04-20T15:32:03Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
