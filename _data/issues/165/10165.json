{
	"id": 61688447,
	"number": 10165,
	"state": "closed",
	"title": "go/build: pre-assign gochar and goarches to all possible GOARCHes?",
	"body": "See #10164, whenever we introduce a new GOARCH, older Go releases won't\r\nrecognize them and this causes trouble for both our users and us (we need to\r\nadd unnecessary build tags)\r\n\r\nAs there aren't many architectures out there, I think we can pre-assign gochar\r\nand goarches to them in Go 1.5 so that when we finally add that architecture\r\nthere won't be problems like this. This will also bring the go/build package closer\r\nto the one in the gofrontend project.\r\n\r\nThe list I have in mind is (sorted alphabetically):\r\n```\r\nmips{,le}\r\nmips64{,le}\r\nppc{,le}\r\ns390\r\ns390x\r\nsparc\r\nsparc64\r\n```\r\n\r\nOpen questions:\r\n1. although sparc is bi-endian, is there any system that runs it in little-endian mode? We can be future-proof by adding both endians though.\r\n2. what about all those abi variants of mips? should we encode them into the goarch or we add another environment variable GOMIPS=o32/n32/o64/n64? Or we just support the new abi?\r\n3. what if there are new architectures invented in the future?\r\n4. some architectures are only used in embedded systems, should we also add them? (nios2, microblaze, lm32, epiphany, ...) Once we have mips32 port, the first three should be quite straightforward as they all base on mips32.\r\n\r\nWe should definitely add mips/s390/sparc though, because thare are ports for them in the works.\r\n\r\nPre-assigning gochars probably is less important though.",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Thinking"
		}
	],
	"comments": 1,
	"closed_at": "2015-05-05T04:21:14Z",
	"created_at": "2015-03-14T20:13:51Z",
	"updated_at": "2016-06-25T02:03:17Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
