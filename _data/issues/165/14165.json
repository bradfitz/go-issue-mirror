{
	"id": 130060375,
	"number": 14165,
	"state": "closed",
	"title": "cgo creating char** from CString corrupts initial entries",
	"body": "```shell\r\n$ uname -srvm\r\nLinux 4.3.0-1-amd64 #1 SMP Debian 4.3.3-5 (2016-01-04) x86_64\r\n$ go version\r\ngo version go1.6rc1 linux/amd64\r\n```\r\n(also tested on 1.5 before upgrading)\r\n\r\nI'm trying to create a `char**` in Go to pass to a C function but the first entries are mangled when I read them back.\r\n\r\nThe smallest reproducible case I could manage is:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"unsafe\"\r\n)\r\n\r\n//#include \u003cstdlib.h\u003e\r\nimport \"C\"\r\n\r\nvar xs = []string{\r\n\t\"1\",\r\n\t\"\",\r\n\t\"squirrel\",\r\n\t\"2\",\r\n\t\"two\",\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println(\"Test conversion\")\r\n\tfmt.Printf(\"\\tN\\t=\\t%20s\\t%20s\\n\", \"Go\", \"C\")\r\n\t//if I delete this loop everything works as intended\r\n\tfor i, x := range xs {\r\n\t\tcvt := C.GoString(C.CString(x))\r\n\t\t//always equal\r\n\t\tfmt.Printf(\"\\t%d\\t%t\\t%20q\\t%20q\\n\", i, x == cvt, x, cvt)\r\n\t}\r\n\r\n\t//create an array meant to be passed to C\r\n\t//and a view into it to update the data\r\n\tarr := (**C.char)(C.malloc(C.size_t(C.int(len(xs)))))\r\n\tview := (*[1 \u003c\u003c 30]*C.char)(unsafe.Pointer(arr))[0:len(xs):len(xs)]\r\n\r\n\tfmt.Println(\"To C\", \u0026view[0], arr)\r\n\tfmt.Printf(\"\\tN\\t=\\t%20s\\t%20s\\t\u0026C\\n\", \"Go\", \"C\")\r\n\tfor i, x := range xs {\r\n\t\tview[i] = C.CString(x)\r\n\t\t// (deleting the rest of this loop has no effect on the issue, but it's interesting that it still works at this point)\r\n\t\tg := C.GoString(view[i])\r\n\t\t//always equal\r\n\t\tfmt.Printf(\"\\t%d\\t%t\\t%20q\\t%20q\\t%v\\n\", i, x == g, x, g, view[i])\r\n\t}\r\n\r\n\t//Everything is fine so far, but reading the values back out\r\n\t//(whether in Go or C) does not work\r\n\tfmt.Println(\"From C\", \u0026view[0], arr)\r\n\tfmt.Printf(\"\\tN\\t=\\t%20s\\t%20s\\t\u0026C\\n\", \"Go\", \"C\")\r\n\tfor i, x := range view {\r\n\t\tg := C.GoString(x)\r\n\t\t//only the same after the first few entries\r\n\t\tfmt.Printf(\"\\t%d\\t%t\\t%20q\\t%20q\\t%v\\n\", i, xs[i] == g, xs[i], g, x)\r\n\t}\r\n\r\n}\r\n```\r\n\r\nWhen I run this I get something like\r\n\r\n```\r\nTest conversion\r\n\tN\t=\t                  Go\t                   C\r\n\t0\ttrue\t                 \"1\"\t                 \"1\"\r\n\t1\ttrue\t                  \"\"\t                  \"\"\r\n\t2\ttrue\t          \"squirrel\"\t          \"squirrel\"\r\n\t3\ttrue\t                 \"2\"\t                 \"2\"\r\n\t4\ttrue\t               \"two\"\t               \"two\"\r\nTo C 0x111b480 0x111b480\r\n\tN\t=\t                  Go\t                   C\t\u0026C\r\n\t0\ttrue\t                 \"1\"\t                 \"1\"\t0x111b4a0\r\n\t1\ttrue\t                  \"\"\t                  \"\"\t0x111b4c0\r\n\t2\ttrue\t          \"squirrel\"\t          \"squirrel\"\t0x111b4e0\r\n\t3\ttrue\t                 \"2\"\t                 \"2\"\t0x111b500\r\n\t4\ttrue\t               \"two\"\t               \"two\"\t0x111b520\r\nFrom C 0x111b480 0x111b480\r\n\tN\t=\t                  Go\t                   C\t\u0026C\r\n\t0\tfalse\t                 \"1\"\t     \" \\xb5\\x11\\x01\"\t0x111b4a0\r\n\t1\ttrue\t                  \"\"\t                  \"\"\t0x111b4c0\r\n\t2\ttrue\t          \"squirrel\"\t          \"squirrel\"\t0x111b4e0\r\n\t3\ttrue\t                 \"2\"\t                 \"2\"\t0x111b500\r\n\t4\ttrue\t               \"two\"\t               \"two\"\t0x111b520\r\n```\r\n\r\nThe first entry get mangled. (Different every time, but mangled every time).\r\n\r\nThe number of mangled entries is proportional to the number of entries in `xs`, but the mangled entries are always at the start of the list. With less than 5 entries, there is no mangling. With 9, the first two are mangled. With 13, the first three are mangled.\r\n\r\nAs the code notes, if I delete the first loop I always get the expected, irrespective of the length of xs.\r\n(I had no equivalent in the program I abstracted this from, but it's required to reproduce here).\r\n\r\n```\r\nTo C 0x1fa8050 0x1fa8050\r\n\tN\t=\t                  Go\t                   C\t\u0026C\r\n\t0\ttrue\t                 \"1\"\t                 \"1\"\t0x1fa8400\r\n\t1\ttrue\t                  \"\"\t                  \"\"\t0x1fa8420\r\n\t2\ttrue\t          \"squirrel\"\t          \"squirrel\"\t0x1fa8440\r\n\t3\ttrue\t                 \"2\"\t                 \"2\"\t0x1fa8460\r\n\t4\ttrue\t               \"two\"\t               \"two\"\t0x1fa8480\r\nFrom C 0x1fa8050 0x1fa8050\r\n\tN\t=\t                  Go\t                   C\t\u0026C\r\n\t0\ttrue\t                 \"1\"\t                 \"1\"\t0x1fa8400\r\n\t1\ttrue\t                  \"\"\t                  \"\"\t0x1fa8420\r\n\t2\ttrue\t          \"squirrel\"\t          \"squirrel\"\t0x1fa8440\r\n\t3\ttrue\t                 \"2\"\t                 \"2\"\t0x1fa8460\r\n\t4\ttrue\t               \"two\"\t               \"two\"\t0x1fa8480\r\n```\r\n\r\nIf I'm just doing something wrong with cgo, I apologize for the noise.",
	"user": {
		"login": "jimmyfrasche",
		"id": 375553,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-01-31T01:33:03Z",
	"created_at": "2016-01-31T01:08:48Z",
	"updated_at": "2016-01-31T01:49:54Z"
}
