{
	"id": 66062847,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eMy 2 cents :\n(using commit 12771:fbc982f5aff1)\n\nI use a linux64 on my computer, but I needed to compile a go program of mine for two\nfroeign architectures: linux32 and windows32\n\nUsing a linux64 OS, after updating to this revision of the go repository, I ran \n# cd $GOROOT/src\n# ./all.bash\nand my go tools were up to date.\nRunning\n# go build myProg\nwould compile myProg for my architecture, no problem here.\n\nAfter that, I ran :\n# CGO_ENABLED=0 GOOS=windows GOARCH=386 ./all.bash\nand I would have a set of go tools to compile for windows32, without breaking the\ntoolchain for my native platform:\n# go build myProg\nwould still compile for my system,\n# GOOS=windows GOARCH=386 go build myProg\nwould succesfully compile my program as a windows32 excutable.\n\nIt only seemed natural to re-run :\n# GOARCH=386 ./all.bash\nto have a new toolset for linux32.\n\nAs it happens, this is not the correct way to build the go toolchain for cross\ncompilation.\n\nA simple suggestion :\nif all.bash detects that GOOS/GOARCH is not the same as GOHOSTOS/GOHOSTARCH, output a\nmessage indicating how to properly install a cross-compiling chain\u003c/pre\u003e",
	"user": {
		"login": "LeGEC",
		"id": 795408,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-03-23T13:51:39Z",
	"updated_at": "2014-12-08T10:15:33Z"
}
