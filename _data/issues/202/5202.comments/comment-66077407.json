{
	"id": 66077407,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5 by **alexandre.normand@opower.com**:\n\n\u003cpre\u003eAdding to my previous, not very constructive comment, I'd like to mention a few things\nthat, although not specific to Go, might be considered regarding this feature.\n\nUnless I'm missing something, dealing with date time values can be done a few different\nways and only one of them is fully lossless:\n * Date/Time with 3 letters abbreviations: 2006-01-02 15:04:05 PDT (this seems reasonable but there are known conflicts which invalidate this approach unless you're dealing with users on specific markets only). See \u003ca href=\"http://en.wikipedia.org/wiki/List_of_time_zone_abbreviations\"\u003ehttp://en.wikipedia.org/wiki/List_of_time_zone_abbreviations\u003c/a\u003e and look for duplicates, like MST.\n * Date/Time with a generic timezone offset: 2006-01-02 15:04:05 -07:00. This is not ambiguous but it doesn't preserve the daylight savings settings of where the date comes from, losing the user's timezone information. It does, however, accurately represent a moment in time and it might be fine if an application knows the user's location and deals appropriately with this.\n* Date/Time with the timezone id:   2006-01-02 14:04:05 America/Los_Angeles. This is not\nambiguous and it also provides all the timezone and daylight savings info one could\nneed. Downside? No system actually formats dates this way and there's therefore a\nproblem of integrating with other systems that already lost information.\n\nTo me, the time offsets + separate location handling is probably the most sensible\napproach in the current state of everythingâ„¢ but it would still be nice to allow for a\nbetter way if people can ever have a chance of dealing more easily and reliably with\ndate/time parsing/formatting.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-06-04T00:02:24Z",
	"updated_at": "2014-12-08T10:27:55Z"
}
