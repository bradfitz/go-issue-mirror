{
	"id": 150891615,
	"body": "I don't want to commit to a []byte-typed Options.App1Data field if it rules out having a more structured Go representation of EXIF inside the image/jpeg package itself (see also #4341). I think some bigger thinking is required around EXIF in general, for reading, modifying, and writing, before adding an incremental patch like the OP suggestion to fix one very specific use case.\r\n\r\nFor your immediate problem, it seems straightforward to me to encode to a bytes.Buffer instead of an os.File directly, and insert the APP1 data after the first 2 bytes of the buffered []byte.\r\n\r\nOr, you can fork the image/jpeg package to encode exactly what you want.\r\n\r\nNeither of these seem particularly difficult to me, and they don't constrain (under the Go 1.x backwards compat promise) any more general approach to the standard image/jpeg library.",
	"user": {
		"login": "nigeltao",
		"id": 8565232,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-25T04:45:39Z",
	"updated_at": "2015-10-25T04:45:39Z"
}
