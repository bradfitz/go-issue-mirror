{
	"id": 157606858,
	"body": "The previous call ignored the hint, but it did succeed at another address.\nIt's a bit tough to imagine an algorithm that would let an unrelated mmap\nsucceed in another thread, giving it part of the address range checked as\nfree here. But I don't think it's impossible either, for the entire space\nof imaginable implementations. But I also don't see a way to fix it. I'm\nsure we've spent more energy on it already than the question deserves.\n\nOn Tue, Nov 17, 2015, 11:42 PM Ian Lance Taylor \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e An mmap without MAP_FIXED can't succeed, because the original mmap that\n\u003e ran before the call to addrspace_free did not succeed.\n\u003e\n\u003e Well, I suppose it's possible that Go calls mmap, then some other thread\n\u003e calls munmap, then Go calls addrspace_free, then some other thread calls\n\u003e mmap, then Go calls mmap with MAP_FIXED. If there were a way to fix that we\n\u003e should do it, but I don't think there is.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/13256#issuecomment-157602944\u003e.\n\u003e\n",
	"user": {
		"login": "eloff",
		"id": 27574,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-18T05:11:01Z",
	"updated_at": "2015-11-18T05:11:01Z"
}
