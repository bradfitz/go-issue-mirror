{
	"id": 240744628,
	"body": "In this case, we are starting with GC managed Go variables. A byte slice is created and we use unsafe to create a pointer to a struct inside of it, but the struct extends past the end of the allocation. We then use field access to essentially do pointer arithmetic to find where we should create the slice, and it is created past the end of the allocation.\n\n\u003e On Aug 18, 2016, at 1:10 AM, Matthew Dempsky \u003cnotifications@github.com\u003e wrote:\n\u003e \n\u003e @zeebo That section starts with \"If p points into an allocated object\", which is referring to GC managed Go variables. It's meant to allow pointer arithmetic within a variable, but not to limit us from adopting a moving garbage collector in the future. (For example, you can't assume the distance between two different variables will remain the same.) I don't think it's applicable here because in this case p points to unmapped memory.\n\u003e \n\u003e That said, I do agree that this appears to be unspecified behavior. I think the first option we should consider is how hard it is for applications to avoid relying on it. It seems like slicing unmapped memory should be a relatively uncommon operation, whereas a simpler nil check benefits much more code.\n\u003e \n\u003e Could BoltDB be reasonably modified to avoid creating these problematic slices?\n\u003e \n\u003e â€”\n\u003e You are receiving this because you were mentioned.\n\u003e Reply to this email directly, view it on GitHub, or mute the thread.\n\u003e \n",
	"user": {
		"login": "zeebo",
		"id": 96925,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-18T14:42:13Z",
	"updated_at": "2016-08-18T14:42:13Z"
}
