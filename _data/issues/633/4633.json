{
	"id": 51282412,
	"number": 4633,
	"state": "open",
	"title": "spec: currying of arbitrary functions",
	"body": "by **fjanon**:\n\n\u003cpre\u003eI asked the question at:\n\n\u003ca href=\"https://groups.google.com/group/golang-nuts/browse_thread/thread/ccc2b7dc7d6d7b8e/949385859868c008?lnk=gst\u0026amp\"\u003ehttps://groups.google.com/group/golang-nuts/browse_thread/thread/ccc2b7dc7d6d7b8e/949385859868c008?lnk=gst\u0026amp\u003c/a\u003e;q=fjanon#\n\nMichael T. Jones CTA @ Google replied and I thought that maybe the Go team could have a\nlook and decide if it could be added to Go someday.\n\nThanks.\n\nOriginal question:\n\nI have been using function addresses for a long time in different \nlanguages but I miss an *easy* way of getting the address of a \nfunction with its arguments and then call it later on (lazy eval). \nRight now, storing the arguments and the address of the function in a \ndata structure and then calling the function with the arguments stored \nis the only easy way to do it that I know of or currying with the \nextra code required. \nI think that something like \npf := \u0026amp;somefunc(\u0026quot;a str\u0026quot;, 1) \nand then \npf() \nwould be useful. \nI know that with closure we can curry functions but it's a bit \nconvoluted, there might be a simpler way or syntax to do it. \nMaybe something like that in Go 2.0? \nFred \n\n==========================================\nNotable difference: \nsomefunc signature: \nfunc name(args) (T2,T3,...) \nf := \u0026amp;somefunc(\u0026quot;a str\u0026quot;, 1) \n: \npf() \ncompiler knows T2, T3, etc., and can simply do the right thing. \npf := func () { somefunc(\u0026quot;a str\u0026quot;, 1) } \nis a perfect example for the asked-for case, but when T2, T3, ... exist \nthen the function wrapper must be: \npf := func () (T2,T3,...) { return somefunc(\u0026quot;a str\u0026quot;, 1) } \nand the programmer needs to know T2,T3,... and express them perfectly as \nsomefunc changes. In the spirit of the C-world's typeof(x), Go could have \nTypeOf(x) and then one could write: \npf := func () TypeOf(somefunc) { return somefunc(\u0026quot;a str\u0026quot;, 1) } \n: \nv1, v2, ...vn := pf() \nwas would be the case in an expanded version of the original proposal: \nf := \u0026amp;somefunc(\u0026quot;a str\u0026quot;, 1) \n: \nv1,v2,...vn := pf() \nOn Mon, Aug 13, 2012 at 7:06 AM, chris dollin \u0026lt;ehog.he...@googlemail.com\u0026gt;wrote: \n\n- Show quoted text -\n-- \nMichael T. Jones | Chief Technology Advocate  | m...@google.com |  +1 \n650-335-5765\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "LanguageChange"
		},
		{
			"name": "Thinking"
		}
	],
	"comments": 5,
	"created_at": "2013-01-08T14:52:11Z",
	"updated_at": "2016-05-26T10:16:54Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
