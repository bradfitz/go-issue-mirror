{
	"id": 66092937,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003e\u003e We almost never use type information while following a pointer. That is,\n\u003e even if we know the pointer we're following is a *T, we don't assume the\n\u003e block it points at has type T. This is because it might actually be an\n\u003e interior pointer into a larger block. The exceptions are things we have\n\u003e complete control over, typically pointers hidden from Go programs. For\n\u003e example, if we have a string value, we know the pointer inside is actually\n\u003e pointing at string data (except for the 0-length bug of course).\n\nI would say that this is vise versa. Whenever we see a pointer in heap, we infer type of\nthe target block from the pointer type. Unless it's interior pointer (which a are pretty\nrare). On top of that we have type info for lots of runtime data structures (M, G, P)\nand they can be scanned with known types (inferring types of child memory blocks through\npotentially dangling pointers).\n\n\u003e Also, the dangling pointers tend to be the untyped ones, from C.\n\nThis is what saved us with m.moreargp. What scares me is that there are lots of typed\npointers in C runtime.\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-31T11:54:37Z",
	"updated_at": "2014-12-08T10:42:25Z"
}
