{
	"id": 51281400,
	"number": 3943,
	"state": "closed",
	"title": "go/scanner: add size-limited error list, default to 100 in parser",
	"body": "by **disposaboy@dby.me**:\n\n\u003cpre\u003eSorry for leaving out the platform details etc. This is more of a design issue than a\nbug.\n\nGiven a binary file(or any file full or errors really) go/parser will parse the entire\nfile and add all the errors to its error list. I'm not sure it's very useful when this\nlist grows large (greater than 100) as you're usually just going to look at the first\nand say there are N more errors in the common case anyway.\n\nThe easiest work-around I could think of is to patch go/scanner.ErrorList.Add to simply\nnot add more than say 10 errors. Obviously that works for me as I'm the only user. I'm\nnot sure what (if anything) can be done in the stdlib, but I thought I'd share my\nfindings which might be useful for those running public-facing services that accept user\ninput which they then directly or indirectly parser using go/parser.\n\nIgnoring the malicious user as they would simply find some other way... You might be\nwondering why someone would intentionally parse a binary file and the answer is: They\ndon't have to, they(I) can do it accidentally with go/parser.ParseDir on a diretory that\ncontains binary files by not passing a filter.\n\nThe code below demonstrates the problem. The large memory use and run-time is all down\nto collecting the errors.\n\n\n\n\npackage main\n\nimport (\n\t\u0026quot;go/parser\u0026quot;\n\t\u0026quot;go/token\u0026quot;\n\t\u0026quot;os\u0026quot;\n)\n\nfunc main() {\n\tfset := token.NewFileSet()\n\tparser.ParseFile(fset, os.Args[0], nil, 0)\n}\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Performance"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 10,
	"closed_at": "2014-12-08T10:20:54Z",
	"created_at": "2012-08-11T08:13:07Z",
	"updated_at": "2016-06-24T22:22:58Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
