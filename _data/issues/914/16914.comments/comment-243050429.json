{
	"id": 243050429,
	"body": "sync.Once currently guarantees that f is done (either returned or paniced) after a call to Do returns. \r\n\r\nWith your change Do can return before f is done or even before f is called (the goroutine calling f can be descheduled before the call, but after the atomic store or after unlocking the mutex). The comment for Do even says\r\n\r\n\u003e Because no call to Do returns until the one call to f returns if f causes Do to be called, it will deadlock.\r\n\r\nSo this would clearly be a breaking change and is outside the scope for Go 1. ",
	"user": {
		"login": "nuss-justin",
		"id": 6443781,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-29T07:21:30Z",
	"updated_at": "2016-08-29T07:21:59Z"
}
