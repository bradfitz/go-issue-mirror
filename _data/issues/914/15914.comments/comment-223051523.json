{
	"id": 223051523,
	"body": "Backing up and looking carefully, studying this on amd64 where it is easy, with \"good\" at 99d29d5 and \"bad\" at e29e0ba (plus a minor tweak, described below):\r\n```\r\n* e29e0ba (HEAD -\u003e master, origin/master, origin/HEAD) cmd/compile: fix TestAssembly on Plan 9\r\n...\r\n* b6dc3e6 cmd/compile: fix liveness computation for heap-escaped parameters\r\n* 99d29d5 path/filepath: fix globbing of c:\\*dir\\... pattern\r\n```\r\nWith SSA, the extra zeroing always occurs, before and after the problematic CL (https://go-review.googlesource.com/c/23393/).\r\nWith SSA disabled (GOSSAHASH=n), the zeroing only occurs after the problematic CL, same as on ARM.\r\nThe extra zeroing is NOT dependent on difference in the Addable bit, which can be \"fixed\" here:\r\n```\r\n--- a/src/cmd/compile/internal/gc/gen.go\r\n+++ b/src/cmd/compile/internal/gc/gen.go\r\n@@ -186,6 +186,7 @@ func moveToHeap(n *Node) {\r\n \r\n        // Modify n in place so that uses of n now mean indirection of the heapaddr.\r\n        n.Class = PAUTOHEAP\r\n+       n.Addable = false\r\n        n.Ullman = 2\r\n        n.Xoffset = 0\r\n        n.Name.Heapaddr = heapaddr\r\n```\r\n\r\nHere are the differences in generated assembly, with \"bad\" including the Addable \"fix\":\r\n```\r\ndiff good.s bad.s\r\n2c2\r\n\u003c \"\".f t=1 size=112 args=0x0 locals=0x18\r\n---\r\n\u003e \"\".f t=1 size=128 args=0x0 locals=0x18\r\n6c6\r\n\u003c \t0x000d 00013 (/Users/drchase/GoogleDrive/work/tmp/z.go:5)\tJLS\t99\r\n---\r\n\u003e \t0x000d 00013 (/Users/drchase/GoogleDrive/work/tmp/z.go:5)\tJLS\t114\r\n16,32c16,36\r\n\u003c \t0x002d 00045 (/Users/drchase/GoogleDrive/work/tmp/z.go:6)\tMOVQ\t8(SP), BX\r\n\u003c \t0x0032 00050 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tCMPB\truntime.writeBarrier(SB), $0\r\n\u003c \t0x0039 00057 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tJNE\t$0, 76\r\n\u003c \t0x003b 00059 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tMOVQ\tBX, \"\".sink(SB)\r\n\u003c \t0x0042 00066 (/Users/drchase/GoogleDrive/work/tmp/z.go:8)\tMOVQ\t16(SP), BP\r\n\u003c \t0x0047 00071 (/Users/drchase/GoogleDrive/work/tmp/z.go:8)\tADDQ\t$24, SP\r\n\u003c \t0x004b 00075 (/Users/drchase/GoogleDrive/work/tmp/z.go:8)\tRET\r\n\u003c \t0x004c 00076 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tLEAQ\t\"\".sink(SB), R8\r\n\u003c \t0x0053 00083 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tMOVQ\tR8, (SP)\r\n\u003c \t0x0057 00087 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tMOVQ\tBX, 8(SP)\r\n\u003c \t0x005c 00092 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tPCDATA\t$0, $0\r\n\u003c \t0x005c 00092 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tCALL\truntime.writebarrierptr(SB)\r\n\u003c \t0x0061 00097 (/Users/drchase/GoogleDrive/work/tmp/z.go:8)\tJMP\t66\r\n\u003c \t0x0063 00099 (/Users/drchase/GoogleDrive/work/tmp/z.go:8)\tNOP\r\n\u003c \t0x0063 00099 (/Users/drchase/GoogleDrive/work/tmp/z.go:5)\tCALL\truntime.morestack_noctxt(SB)\r\n\u003c \t0x0068 00104 (/Users/drchase/GoogleDrive/work/tmp/z.go:5)\tJMP\t0\r\n\u003c \t0x0000 65 48 8b 0c 25 00 00 00 00 48 3b 61 10 76 54 48  eH..%....H;a.vTH\r\n---\r\n\u003e \t0x002d 00045 (/Users/drchase/GoogleDrive/work/tmp/z.go:6)\tMOVQ\t8(SP), AX\r\n\u003e \t0x0032 00050 (/Users/drchase/GoogleDrive/work/tmp/z.go:6)\tNOP\r\n\u003e \t0x0032 00050 (/Users/drchase/GoogleDrive/work/tmp/z.go:6)\tMOVQ\t$0, (AX)\r\n\u003e \t0x0039 00057 (/Users/drchase/GoogleDrive/work/tmp/z.go:6)\tMOVQ\t$0, 2(AX)\r\n\u003e \t0x0041 00065 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tNOP\r\n\u003e \t0x0041 00065 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tCMPB\truntime.writeBarrier(SB), $0\r\n\u003e \t0x0048 00072 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tJNE\t$0, 91\r\n\u003e \t0x004a 00074 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tMOVQ\tAX, \"\".sink(SB)\r\n\u003e \t0x0051 00081 (/Users/drchase/GoogleDrive/work/tmp/z.go:8)\tMOVQ\t16(SP), BP\r\n\u003e \t0x0056 00086 (/Users/drchase/GoogleDrive/work/tmp/z.go:8)\tADDQ\t$24, SP\r\n\u003e \t0x005a 00090 (/Users/drchase/GoogleDrive/work/tmp/z.go:8)\tRET\r\n\u003e \t0x005b 00091 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tLEAQ\t\"\".sink(SB), R8\r\n\u003e \t0x0062 00098 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tMOVQ\tR8, (SP)\r\n\u003e \t0x0066 00102 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tMOVQ\tAX, 8(SP)\r\n\u003e \t0x006b 00107 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tPCDATA\t$0, $0\r\n\u003e \t0x006b 00107 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tCALL\truntime.writebarrierptr(SB)\r\n\u003e \t0x0070 00112 (/Users/drchase/GoogleDrive/work/tmp/z.go:8)\tJMP\t81\r\n\u003e \t0x0072 00114 (/Users/drchase/GoogleDrive/work/tmp/z.go:8)\tNOP\r\n\u003e \t0x0072 00114 (/Users/drchase/GoogleDrive/work/tmp/z.go:5)\tCALL\truntime.morestack_noctxt(SB)\r\n\u003e \t0x0077 00119 (/Users/drchase/GoogleDrive/work/tmp/z.go:5)\tJMP\t0\r\n(etc)\r\n```\r\nWith SSA backend, the generated assembly language is nearly identical, differing only in line numbers:\r\n```\r\ndiff good.s bad.s\r\n12,16c12,16\r\n\u003c \t0x001d 00029 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tLEAQ\ttype.[10]uint8(SB), AX\r\n\u003c \t0x0024 00036 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tMOVQ\tAX, (SP)\r\n\u003c \t0x0028 00040 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tPCDATA\t$0, $0\r\n\u003c \t0x0028 00040 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tCALL\truntime.newobject(SB)\r\n\u003c \t0x002d 00045 (/Users/drchase/GoogleDrive/work/tmp/z.go:7)\tMOVQ\t8(SP), AX\r\n---\r\n\u003e \t0x001d 00029 (/Users/drchase/GoogleDrive/work/tmp/z.go:6)\tLEAQ\ttype.[10]uint8(SB), AX\r\n\u003e \t0x0024 00036 (/Users/drchase/GoogleDrive/work/tmp/z.go:6)\tMOVQ\tAX, (SP)\r\n\u003e \t0x0028 00040 (/Users/drchase/GoogleDrive/work/tmp/z.go:6)\tPCDATA\t$0, $0\r\n\u003e \t0x0028 00040 (/Users/drchase/GoogleDrive/work/tmp/z.go:6)\tCALL\truntime.newobject(SB)\r\n\u003e \t0x002d 00045 (/Users/drchase/GoogleDrive/work/tmp/z.go:6)\tMOVQ\t8(SP), AX\r\n```\r\n",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-01T16:38:22Z",
	"updated_at": "2016-06-01T16:38:22Z"
}
