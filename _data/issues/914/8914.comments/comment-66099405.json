{
	"id": 66099405,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2 by **MartyMacGyver**:\n\n\u003cpre\u003eI don't think that (at this point) os.Replace() should have extended functionality\nbeyond what os.Rename offers (e.g., os.Rename() isn't supposed to work across\nfilesystems). Atomicity with os.Replace() varies with filesystem - though it would be\nimplicit for Posix when using the fallthrough to os.Rename(), Windows requires more\nfinesse. The major functional change versus os.Rename() is handling Windows properly,\nwhere one would use the MoveFileEx API *without* the MOVEFILE_COPY_ALLOWED flag to\nmaintain parity with Posix-style rename.\n\nFor the sake of atomicity I understand why this can't all be done in os.Rename(), but\nos.Replace() is meant to loosen that guarantee for select OSes, not remove it. If kept\nsimple, (and documented as such), devs will know that on Posix hosts this will be\nexactly the same as os.Rename, and on Windows hosts this will do its best but is\ninherently non-Posix in nature (versus doing nothing at all in the case of such\nnon-Posix hosts).\n\n** When one starts adding functionality such as the ability to move across filesystems\nit quickly complicates things while breaking the guarantee of atomicity across the\nboard. If one wants cross-filesystem functionality (where atomic (or nearly-atomic)\nbehavior is not expected at all), one would use os.Copy() or os.Move() - which are\nnotable in their absence in Go. That's another wheel that people seem to reinvent a lot,\nbut it's outside of the scope of this issue except for the point that once you start\nadding that level of functionality you are effectively creating those functions as well.\nBetter to keep that extended effort separate.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-10-09T21:41:59Z",
	"updated_at": "2014-12-08T10:49:08Z"
}
