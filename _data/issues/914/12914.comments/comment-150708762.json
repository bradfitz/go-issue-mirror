{
	"id": 150708762,
	"body": "On Mon, Oct 12, 2015 at 9:07 PM, Andrew Gerrand wrote:\r\n\u003e I suppose what I'm getting at is this: If there's a broad need for such a package, why isn't there one that people are already using?\r\n\r\nBecause people incorrectly assume that time only moves forward?  It's an extremely common mistake that even at Google we were trying to hammer in people's head.  When you see the large impact that things such as leap seconds have (including at Google), it's easy to see this is a well known problem but also a recurring problem.\r\n\r\nHow is it that a language geared towards systems programming that comes with such a rich standard library offers no standard way of measuring time correctly?\r\n\r\nLook at gRPC, [every](https://github.com/grpc/grpc-go/blob/1f1a4999ca75ba4fd6d5c91233383a170034a1a5/call.go#L124) [single](https://github.com/grpc/grpc-go/blob/1f1a4999ca75ba4fd6d5c91233383a170034a1a5/clientconn.go#L324) [use](https://github.com/grpc/grpc-go/blob/1f1a4999ca75ba4fd6d5c91233383a170034a1a5/server.go#L273) [of](https://github.com/grpc/grpc-go/blob/1f1a4999ca75ba4fd6d5c91233383a170034a1a5/stream.go#L121) `time.Now()` there is buggy because it implicitly assumes that time only moves forward and at a constant pace, neither of which is true for `CLOCK_REALTIME`.  Pretty much any distributed systems code that uses `time.Now()` other than for printing the current time is subtly buggy.  And there is a lot of it.  And it's there chiefly because there is no alternative in the standard library to get monotonic time so people don't even think about it.",
	"user": {
		"login": "tsuna",
		"id": 128281,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-23T22:37:15Z",
	"updated_at": "2015-10-23T22:38:26Z"
}
