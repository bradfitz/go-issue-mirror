{
	"id": 116923093,
	"number": 13249,
	"state": "open",
	"title": "runtime: go test inconsistent line number (by runtime.Caller) with and w/o -race",
	"body": "## go version\r\ngo version go1.5.1 linux/amd64\r\n\r\n## what I did\r\n\r\n1. paste the following code to any_test.go (with no preceeding empty lines)\r\n2. go test\r\n3. go test -race\r\n\r\n```go\r\npackage any\r\n\r\nimport (\r\n\t\"runtime\"\r\n\t\"testing\"\r\n)\r\n\r\nfunc TestGetPos(t *testing.T) {\r\n\tline := someFunc( // this is the line that should be restored.\r\n\t\t0,\r\n\t\t1,\r\n\t\t2,\r\n\t)\r\n\tif expected := 9; line != expected {\r\n\t\tt.Fatalf(`Expect \"%v\" to be \"%v\"`, line, expected)\r\n\t}\r\n}\r\n\r\nfunc someFunc(int, int, int) int {\r\n\treturn GetPos(1)\r\n}\r\n\r\n// GetPos get the current position of execution.\r\nfunc GetPos(skip int) int {\r\n\t_, _, line, _ := runtime.Caller(skip + 1)\r\n\treturn line\r\n}\r\n```\r\n## what I expected\r\n\r\nboth tests passed, regardless of -race option\r\n\r\n## what I saw instead\r\n\r\n\"go test\" passed but \"go test -race\" failed, because of inconsistent line numbers returned by runtime.Caller.",
	"user": {
		"login": "h12w",
		"id": 2070104,
		"type": "User",
		"site_admin": false
	},
	"comments": 0,
	"created_at": "2015-11-14T12:50:42Z",
	"updated_at": "2015-11-14T16:29:20Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
