{
	"id": 107239921,
	"body": "@minux If they assume that fields without ``json:\"-\"`` tags are ignored they assume wrong just like they did before Go 1.1 for \"simple\" anonymous fields. If the secret is that secret the developer should better ensure that it won't be leaked under any circumstance. That includes reading the provision to the anonymous fields and using the proper ``json:\"-\"`` tags.\r\n  I think a more common use case is actually the other way around. You have Type1 embedded in type T and at some point you embed another type TypeX which has one or more fields embedded or not that conflict with fields from Type1. This makes the Type1 to not be encoded anymore along with the conflicting fields from TypeX. This can be fixed with the tags but as I outlined there are reasons against this approach.\r\n  Concerning the output I think this can be discussed and more thought can be put into if the issue is reopened and perhaps others can contribute to the final form. \r\n   Using the provided example I think it can  encode into { \"A\": \"a\", \"B\":\"b\",  \"Type1\": {\"Secret\": \"secret\"}, {\"Type2\": \"Secret\": \"secret\"} }.\r\n  The output the output looks a bit fragmented/ugly due the compatibility issue but perhaps there are better forms to consider.  Nevertheless I still believe that any solution is better than ignoring the field entirely. It looks better when all the members are conflicting (i.e. the example I provided at the beginning of the thread) but I don't think that's an issue for the Go developers as long as the data is unmarshallable  using the same type definition. \r\n",
	"user": {
		"login": "themihai",
		"id": 1800192,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-05-31T19:49:40Z",
	"updated_at": "2015-05-31T19:52:09Z"
}
