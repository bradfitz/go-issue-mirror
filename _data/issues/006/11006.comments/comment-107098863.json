{
	"id": 107098863,
	"body": "This is the documented behavior of encoding/json, so we\r\ncan't change it.\r\n\r\nhttp://golang.org/pkg/encoding/json/#Marshal\r\nAnonymous struct fields are usually marshaled as if their inner exported\r\nfields were fields in the outer struct, subject to the usual Go visibility\r\nrules amended as described in the next paragraph. An anonymous struct field\r\nwith a name given in its JSON tag is treated as having that name, rather\r\nthan being anonymous. An anonymous struct field of interface type is\r\ntreated the same as having that type as its name, rather than being\r\nanonymous.\r\n\r\nThe Go visibility rules for struct fields are amended for JSON when\r\ndeciding which field to marshal or unmarshal. If there are multiple fields\r\nat the same level, and that level is the least nested (and would therefore\r\nbe the nesting level selected by the usual Go rules), the following extra\r\nrules apply:\r\n\r\n1) Of those fields, if any are JSON-tagged, only tagged fields are\r\nconsidered, even if there are multiple untagged fields that would otherwise\r\nconflict. 2) If there is exactly one field (tagged or not according to the\r\nfirst rule), that is selected. 3) Otherwise there are multiple fields, and\r\nall are ignored; no error occurs.\r\n\r\nHandling of anonymous struct fields is new in Go 1.1. Prior to Go 1.1,\r\nanonymous struct fields were ignored. To force ignoring of an anonymous\r\nstruct field in both current and earlier versions, give the field a JSON\r\ntag of \"-\".\r\n\r\nYou can add struct tags to the embedded fields to achieve what\r\nyou want without another type.\r\n\r\nhttp://play.golang.org/p/K0LwyLe7fJ\r\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-05-30T23:26:40Z",
	"updated_at": "2015-05-30T23:27:06Z"
}
