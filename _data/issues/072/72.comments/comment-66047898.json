{
	"id": 66047898,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3 by **gchk@david.stafford-ilie.us**:\n\n\u003cpre\u003eIf you're going to represent time, my suggestion is 16 bits for the year (ranging\nfrom -32768 to +32767) and 48 bits of time since the beginning of the year, measured\nin units of 1E-7 (.0000001; a tenth of a microsecond; 100 nanoseconds), totalling 48\nbits.  It's pretty easy to calculate with, adjusts for leap seconds gracefully (you\nstill need to know which years get them, and how many, and when, but at least your\ntimes don't move more than 2 seconds if you just ignore the issue, since we reset the\nclock at the start of each year).\n\n16 bits for the year covers a reasonable range of historical and future dates.  By\nthe time we're looking at the Y32K issue, we should have 128 bits commonly available.\n In contrast, 64 bits of nanoseconds is useless for historical dates (ending in 1678)\nand is reasonably close for future dates as well (2262).\n\nI'd say that 100 nanoseconds is plenty of granularity for a time type.\n\nIf a higher precision timing type is needed, use 64 bits of picoseconds.  You get a\nrange of over 200 days with picosecond resolution.  It's easily converted to the\nabove time type by dividing by 100000.  This would be a separate type used for sleeps\nand timeouts.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-11-12T15:54:18Z",
	"updated_at": "2014-12-08T10:03:09Z"
}
