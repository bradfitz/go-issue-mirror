{
	"id": 66099933,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3 by **virkony**:\n\n\u003cpre\u003eYou are correct, with -O2 this doesn't happen. I assume that with -O3 compiler more\naggressively tries to understand what happens in code.\n\nI assume that worries of compiler is about situation when we can get wrap in off+wid.\nThough it is false positive it is clear that we can use unsigned types for at least size\nand wid. According to code that function can't handle negative \"off\" at all.\n\nAs for switching source code to Go... You still will need some bootstrap code. And if\nthis code will be part of it we may get an error.\n\nYou can find growdatsize() function in src/cmd/ld/data.c that depends on specific\nbehavior of signed overflow. So it is natural to disclose fact of that expectation to\ncompiler with some flag like -fwrap (in case of GCC).\nAlso that code growdatsize() shows that eventually LSym.size may grow very close to max\nboundary of vlong. That means that in that case function setuintxx() may misbehave.\nSo we should either accept fact of potential overflow and consider it before stepping\ninto an undefined behavior. Or we should assume that overflow never happens and even\nreplace all size types with unsigned equivalents (ex. size_t for sizes and ptrdiff_t for\nsigned offsets instead of one vlong).\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-11-10T08:04:53Z",
	"updated_at": "2014-12-08T10:49:44Z"
}
