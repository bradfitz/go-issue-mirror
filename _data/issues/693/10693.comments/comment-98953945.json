{
	"id": 98953945,
	"body": "This is a common misconception about the way closures work for by-value variables and has nothing to do with defer.  When a closure captures a by-value variable it extends the actual variable's lifetime by hoisting its storage to the heap.  Effectively all references to the variable are rewritten as pointer dereferences to the heap allocated storage.  In your case the variable i is hoisted to the heap.  Since all references to i (including the assignment performed by each iteration of the for loop) reference the same piece of storage, that variable's value is updated each time the loop goes around.  When the defer statements run later then execute the closure which itself then references the same heap storage for i reading what ever value it had last, which was of course the last value assigned by the last for-loop iteration.  Since all closures are sharing the same hoisted storage for i they all see the same value and hence print the same string.\r\n\r\nFor instance consider this version which defines a brand new variable that has local-iteration scope (and so is not shared across loop iterations).  It once again prints what you expected.\r\n\r\nhttps://play.golang.org/p/QmLKrKHf2p",
	"user": {
		"login": "invino4",
		"id": 11217472,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-05-05T05:20:57Z",
	"updated_at": "2015-05-05T05:20:57Z"
}
