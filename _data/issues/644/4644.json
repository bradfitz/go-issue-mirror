{
	"id": 51282426,
	"number": 4644,
	"state": "closed",
	"title": "spec: (non?)evaluation of operand is unclear when ranging over pointer-to-array type",
	"body": "\u003cpre\u003eMy understanding of the range statement is that if the type of the range operand is\n*[n]T (i.e. a pointer-to-array type) and if only one iteration variable is present, then\nthe operand is not necessarily evaluated and the loop degenerates to:\n\n  for i := 0; i \u0026lt; n; i++ { ... }\n\nHowever the wording of the spec is somewhat ambiguous as to whether implementations may\nor must perform this optimisation:\n\n\u0026quot;The range expression is evaluated once before beginning the loop except if the\nexpression is an array, in which case, depending on the expression, it might not be\nevaluated (see below). ... As a special case, if only the first iteration variable is\npresent, the range loop produces iteration values from 0 up to len(a) and does not index\ninto the array or slice itself.\u0026quot;\n\nBut the spec doesn't say how evaluation or non-evaluation depends on the expression. \nHere are two plausible explanations:\n1. It's unspecified and implementation-dependent.\n2. Side effects such as function calls and channel ops must be observed, but\nimplementations may optimise away pure expressions such as composite literals, etc.\n\nThe test function testarrayptr1 at $GOROOT/test/range.go seems to require that the\nimplementation not perform this optimisation, and it appears that gc does not:\n\n\u003ca href=\"http://play.golang.org/p/Oi3pmY08s8\"\u003ehttp://play.golang.org/p/Oi3pmY08s8\u003c/a\u003e\n\nCan you clarify the intended behaviour?\u003c/pre\u003e",
	"user": {
		"login": "adonovan",
		"id": 5658175,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:24:38Z",
	"created_at": "2013-01-11T01:57:30Z",
	"updated_at": "2016-06-24T22:31:04Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
