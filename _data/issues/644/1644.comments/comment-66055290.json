{
	"id": 66055290,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4 by **webmaster@webmaster.ms**:\n\n\u003cpre\u003eIt is almost done on Windows.\nThe idiomatic solution of asynchronous timers (used, for example, in boost::asio) is to\nspecify the next timer's remaining time as the GetQueuedCompletionStatus() timeout.\nReturn from GetQueuedCompletionStatus() wakes up a goroutine which had been waited\neither for an IO completion or for a timer event.\n\nThere is already an IOCP thread in src\\pkg\\net\\fd_windows.go with infinite timeout, and\nit seems trivial to reuse it for the timing purposes.\n\nAs far as I can remember, epoll can be used the similar way.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-09-07T16:37:39Z",
	"updated_at": "2014-12-08T10:09:14Z"
}
