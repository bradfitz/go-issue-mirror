{
	"id": 136313488,
	"number": 14501,
	"state": "closed",
	"title": "x/net/http2: Transport.TLSConfig.ServerName is ignored",
	"body": "`http2.Transport` behave differently than `http.Transport` and it break valid use case.\r\n\r\nBefore, I could use self signed certificate and use the `ServerName` TLS configuration to force to validate on a specific name.\r\n\r\nBut since 1.6/http2 it don't works anymore, here is a complete example.\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"crypto/tls\"\r\n\t\"crypto/x509\"\r\n\t\"flag\"\r\n\t\"fmt\"\r\n\t\"golang.org/x/net/http2\"\r\n\t\"log\"\r\n\t\"net\"\r\n\t\"net/http\"\r\n\t\"time\"\r\n)\r\n\r\nconst selfSignedCert = `-----BEGIN CERTIFICATE-----\r\nMIIDIDCCAgigAwIBAgIQCCOHWNBePtS7Wqjmoe5ciDANBgkqhkiG9w0BAQsFADAX\r\nMRUwEwYDVQQKEwxTZWxmIFNpZ25lcnMwHhcNMTYwMjI1MDc1MzQ4WhcNMjEwMjIz\r\nMDc1MzQ4WjAXMRUwEwYDVQQKEwxTZWxmIFNpZ25lcnMwggEiMA0GCSqGSIb3DQEB\r\nAQUAA4IBDwAwggEKAoIBAQDP0iJO3XRZZ+4kffmzOAOly/C15x9p2p1qGxxw8MKk\r\nxxV8g1U8VAXNurP4sbPEdFGUz92UVxHztnYhWODZdXTMR2Ofe4zoPvEqcmKZNq6d\r\nGvSC9PKOys1AqLHRJTKUpRxnZicuwhW/6Pbba/YBZAHTLri9ryM0j3jdv1L72t0V\r\n4fnIf7zRDJ9aoGvh2YfyI+SD5DaVKtGP0WZmKP6sE8faHwHSLgvWMXIeK5dZutEf\r\njGiJrxo/fBwLCO0hCDxUnjFO24BufWUdH/S+UDHDvhvR7W7exeT/he5c2TqJQKlB\r\n7XZHhVafToImAhAr9vWJ6ySITPSNzZ+Hi3T81wpZIyHDAgMBAAGjaDBmMA4GA1Ud\r\nDwEB/wQEAwICpDATBgNVHSUEDDAKBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/\r\nMC4GA1UdEQQnMCWCCWxvY2FsaG9zdIIAhwR/AAABhxAAAAAAAAAAAAAAAAAAAAAB\r\nMA0GCSqGSIb3DQEBCwUAA4IBAQByK/cS9SekIwiELRzEBxpSnFfM/RB5LTgUeNuV\r\njV7IyrIbN0Xp/vBaatyOcbTQSN0bSvEx7RtIgdQnRP+UDRR7xpCodL/8PL0VrgmN\r\nM5ME+xNbG7kT5ht/VKUw9MysHhyKjL47uxR59j7bhV8kGp2TXbV6uUn9FfGFhxIg\r\nUXu+BloY+rXsyu22opKr9GvB9tXRx2kkNtWv6M3UP0hcgx1Q9MmgrK6l0bAj+YH0\r\nGk+ZZq4jJdcSdMhl6sQqvF7EoTfrb0meYrcFbRvzyrgSOmTsguLvJgPd2gwwiCi6\r\nnqFowy94PywK2klmfIA7Wml4G9egR+mO0m37BqXETVMM8Atu\r\n-----END CERTIFICATE-----`\r\n\r\nconst selfSignedKey = `-----BEGIN RSA PRIVATE KEY-----\r\nMIIEpQIBAAKCAQEAz9IiTt10WWfuJH35szgDpcvwtecfadqdahsccPDCpMcVfINV\r\nPFQFzbqz+LGzxHRRlM/dlFcR87Z2IVjg2XV0zEdjn3uM6D7xKnJimTaunRr0gvTy\r\njsrNQKix0SUylKUcZ2YnLsIVv+j222v2AWQB0y64va8jNI943b9S+9rdFeH5yH+8\r\n0QyfWqBr4dmH8iPkg+Q2lSrRj9FmZij+rBPH2h8B0i4L1jFyHiuXWbrRH4xoia8a\r\nP3wcCwjtIQg8VJ4xTtuAbn1lHR/0vlAxw74b0e1u3sXk/4XuXNk6iUCpQe12R4VW\r\nn06CJgIQK/b1ieskiEz0jc2fh4t0/NcKWSMhwwIDAQABAoIBADFQ7FNKuhF9WEXQ\r\nnzCoWjU98CE6d3nnJvPG+zjR6V6w36hsgg2O4tGvPIYHpWE5OSLXMP3Cq7/pzJ6d\r\nOL5h4RWY20s9RnLWfORVwJAbKdSeUOfCuMyp04tEfO3kpdwgUl03IJU3+XFRF0N6\r\nmyY5VTWIIM7igLg4U7ZLcKXTiiNmzslgY1SlLac2jY9pt1zj9KdXZBo0iFYRCWnX\r\n+rjKJ5W6gUoAf5mz+79nUfxLg1iq1TR5ZBg1AC8R/hiA1iFgxeSmt1dN8TEFpWJi\r\ngbwtZXN9swVrvpggwQ0pMImkpNd1MjlNo/AF14+Tr+iFbkUAaV+fm6VS64EBtpkm\r\nJxnf1gECgYEA1JKEVYpIc/mfLRlp6ud8t+wGGAqKQ5TAiXQ79+/WniLJwp4TTHNi\r\n7liCB9wCPugiF/kFi8bSJiq44+m8xvyuFF77mrl0JlJo1oM6tk9f97nbOp1dfJjJ\r\nsiMYMc94mk84W1YaGou5uyAuCOQVQN72aH3w9rVAJWFIeMcgVzuW9t8CgYEA+kcd\r\nbtTZM5pZ7IMMeR0qkpi5DvnkdqEZ04w9izM0M7nurb8jBHxLhyPmYI0JskeC1/Nz\r\nbHhANYu7zYVFbFox1kNrjT71Fsam8mDhRCrmisukAaLgcMP7B9kwviTjvNbjTL7a\r\nbJNrkPEZkVn3dDuR/u/fwbcgsJp0o0YYq72QpZ0CgYEAyWh1iFL4aSJXxjRxHcft\r\nbJpt/7Nk47l6YAJIm5ecQsL1Zbe+0030q54ive2gFxh8zTf+IDzmepE6E4AwhF1/\r\nVv/T5vrWaUTl3nICXCCC7kYjyLq3jEl7uZP05aUNQS/UVv4Sx5oiBYHs/DGXTZqz\r\n37eMa0S6nXA6aW1KYDyuwgMCgYEAvfF+6wBrH3jDSnZi3wA9sShrOmx48XdurFjA\r\n1IY11hQEiqSHJP5YK+YZD6m6dC1FpjNDpEzXHkxAacf9WjBRpnVgiMABLhnx1f2k\r\nuSF9+lR20i8U+0AhomE5VvWUSVslArfN+Z0gg84XQ3LuFK6pLLxMKy6ahq2SW9/1\r\nFVI3FxkCgYEAs74VdqT9vIlKar5BEW0e1pjjmYnhxcAb5lHKF+g9YS/Ec6TPYI1K\r\nph0DBf/U8ETJRHOUUOA9SA5fDAtISSk+Q2eTnorkfz6g0MVDRuz9Ozr5eIT9jEfE\r\nXkeGUwcxmZ/Nvjh5/KdaCvjckmjIDmWCbNPTO8VXkE1q8TyCUzivlkA=\r\n-----END RSA PRIVATE KEY-----`\r\n\r\nfunc main() {\r\n\tvar err error\r\n\tserverName := \"127.0.0.1\" // self signed cert server name\r\n\tport := 5555\r\n\r\n\t// flag for IP address\r\n\tipAddress := flag.String(\"ip\", \"\", \"IP address of any non loopback interface\")\r\n\tflag.Parse()\r\n\tif len(*ipAddress) == 0 {\r\n\t\tlog.Fatal(\"Missing -ip\")\r\n\t}\r\n\tif *ipAddress == serverName {\r\n\t\tlog.Fatalf(\"IP can't be %s\", serverName)\r\n\t}\r\n\tif net.ParseIP(*ipAddress) == nil {\r\n\t\tlog.Fatalf(\"IP %s is invalid\", *ipAddress)\r\n\t}\r\n\r\n\t// start server\r\n\thandler := http.NewServeMux()\r\n\thandler.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\r\n\t\tfmt.Fprint(w, \"hello\")\r\n\t})\r\n\tserver := \u0026http.Server{\r\n\t\tAddr: fmt.Sprintf(\"0.0.0.0:%d\", port),\r\n\t\tTLSConfig: \u0026tls.Config{\r\n\t\t\tCertificates: make([]tls.Certificate, 1),\r\n\t\t\tServerName:   serverName,\r\n\t\t},\r\n\t\tHandler: handler,\r\n\t}\r\n\tserver.TLSConfig.Certificates[0], err = tls.X509KeyPair([]byte(selfSignedCert), []byte(selfSignedKey))\r\n\tif err != nil {\r\n\t\tlog.Panic(err)\r\n\t}\r\n\tgo server.ListenAndServeTLS(\"\", \"\")\r\n\ttime.Sleep(time.Second)\r\n\r\n\t// prepare clients\r\n\tpool := x509.NewCertPool()\r\n\tif !pool.AppendCertsFromPEM([]byte(selfSignedCert)) {\r\n\t\tlog.Panic(\"can't append self signed tls certificate\")\r\n\t}\r\n\ttlsClientConfig := \u0026tls.Config{\r\n\t\tServerName: serverName,\r\n\t\tRootCAs:    pool,\r\n\t}\r\n\r\n\turl := fmt.Sprintf(\"https://%s:%d/\", *ipAddress, port)\r\n\r\n\t// http 1 client\r\n\thttpClient := \u0026http.Client{\r\n\t\tTransport: \u0026http.Transport{TLSClientConfig: tlsClientConfig},\r\n\t}\r\n\tresp, err := httpClient.Get(url)\r\n\tif err != nil {\r\n\t\tlog.Println(\"HTTP/1: \" + err.Error())\r\n\t} else {\r\n\t\tlog.Println(\"HTTP/1: \" + resp.Status)\r\n\t}\r\n\r\n\t// http2 client\r\n\thttp2Client := \u0026http.Client{\r\n\t\tTransport: \u0026http2.Transport{TLSClientConfig: tlsClientConfig},\r\n\t}\r\n\tresp, err = http2Client.Get(url)\r\n\tif err != nil {\r\n\t\tlog.Println(\"HTTP/2: \" + err.Error())\r\n\t} else {\r\n\t\tlog.Println(\"HTTP/2: \" + resp.Status)\r\n\t}\r\n}\r\n```\r\n\r\nRunning output:\r\n\r\n```\r\n$ ifconfig en0\r\nen0: flags=8863\u003cUP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST\u003e mtu 1500\r\n\tinet 192.168.8.104 netmask 0xffffff00 broadcast 192.168.8.255\r\n\tmedia: autoselect\r\n\tstatus: active\r\n$ ./test -ip 192.168.8.104\r\n2016/02/25 16:00:16 HTTP/1: 200 OK\r\n2016/02/25 16:00:16 HTTP/2: Get https://192.168.8.104:5555/: x509: certificate is valid for 127.0.0.1, ::1, not 192.168.8.104\r\n```",
	"user": {
		"login": "bclermont",
		"id": 474302,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2016-02-25T20:29:07Z",
	"created_at": "2016-02-25T08:05:26Z",
	"updated_at": "2016-02-26T04:33:59Z"
}
