{
	"id": 104534295,
	"number": 12456,
	"state": "closed",
	"title": "net/http: 301 redirect loses POST data",
	"body": "##### What I did: \r\nBecause of a coding error, I was trying to make a POST request to a go webserver with the path \"//create\", instead of \"/create\"\r\n\r\n##### Expected Behavior: \r\nThe server should give me a 404 or 400 error, or pass the request along normally. I'm not convinced that \"//foo\" is a valid path, but if it isn't the server should return an error rather then mangling the request passed to the handler.\r\n\r\n##### Actual Behavior: \r\nThe Go server decided to claim that the request was a GET request with no content. Attached is a go server that exhibits this bug along with python code to make the strange request.\r\n\r\n##### Python request script\r\n```python\r\nimport requests\r\ndata = {'a': 1}\r\nrequests.post(\"http://localhost:8081//foo\", data=data)\r\n```\r\n\r\n##### Go Server\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"log\"\r\n\t\"net/http/httputil\"\r\n\t\"net/http\"\r\n)\r\n\r\nfunc handler(w http.ResponseWriter, r *http.Request) {\r\n\tdata, _ := httputil.DumpRequest(r, true)\r\n\tlog.Println(string(data))\r\n}\r\n\r\nfunc main() {\r\n\thttp.HandleFunc(\"/foo\", handler)\r\n\thttp.ListenAndServe(\"127.0.0.1:8081\", nil)\r\n}\r\n```\r\n\r\nThe output I get from the go script is the following\r\n```\r\n2015/09/02 13:32:45 GET /foo HTTP/1.1\r\nHost: localhost:8081\r\nAccept: */*\r\nAccept-Encoding: gzip, deflate\r\nConnection: keep-alive\r\nContent-Type: application/x-www-form-urlencoded\r\nUser-Agent: python-requests/2.7.0 CPython/2.7.6 Windows/8\r\n```\r\n\r\n\r\nI'm using go 1.4.2 windows/amd64\r\n\r\n",
	"user": {
		"login": "johndaniels",
		"id": 322578,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2015-09-02T18:31:55Z",
	"created_at": "2015-09-02T17:38:59Z",
	"updated_at": "2016-09-04T20:48:13Z"
}
