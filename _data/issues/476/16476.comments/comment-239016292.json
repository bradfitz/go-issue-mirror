{
	"id": 239016292,
	"body": "The typical case as I see it, in a heavily loaded system:\r\n- P runs out of work, sets mayhavework[p.ID] = false\r\n- picks a P to steal from, checks its mayhavework entry, it is true\r\n- steals some work G from that P\r\n- sets mayhavework[p.ID] = true\r\n- start working on the G we just stole.\r\n\r\nSo we write mayhavework twice, read it once.  That would argue for making writes fast.\r\n\r\nThe other argument for making writes fast is that writes are on the critical path to getting work done.  Reads are done by otherwise idle Ps.\r\n\r\nOr does mayhavework indicate having work that is currently not being executed (that is, the P has 2+ goroutines assigned to it).  I'm not sure if that changes my math.\r\n",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-10T21:52:30Z",
	"updated_at": "2016-08-10T21:52:30Z"
}
