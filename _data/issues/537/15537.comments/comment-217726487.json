{
	"id": 217726487,
	"body": "@josharian Maybe.  I tried plain first+last postorder numbers for stack allocation (this is essentially linear scan) and didn't get happy results, but couldn't tell if I had made some mistake with self-conflict (there are issues with loop phi functions and uses transmitted through backedges).\r\n\r\nCan you give the sparse CL a look for style/explanation etc?\r\nhttps://go-review.googlesource.com/#/c/22342/\r\n\r\n@gpaul, what's the exact recipe for that example?  I'm here:\r\n```\r\n/tmp/gopath/src/github.com/gogo/protobuf/test/combos/both$ \r\n```\r\n\r\nand I see (using sparse CL still under review):\r\n```\r\n/tmp/gopath/src/github.com/gogo/protobuf/test/combos/both$ GO_SSA_PHI_LOC_CUTOFF=0\r\n/tmp/gopath/src/github.com/gogo/protobuf/test/combos/both$ time go test .\r\nok  \tgithub.com/gogo/protobuf/test/combos/both\t0.168s\r\n\r\nreal\t0m46.232s\r\nuser\t0m49.512s\r\nsys\t0m1.726s\r\n/tmp/gopath/src/github.com/gogo/protobuf/test/combos/both$ GO_SSA_PHI_LOC_CUTOFF=-1\r\n/tmp/gopath/src/github.com/gogo/protobuf/test/combos/both$ time go test .\r\nok  \tgithub.com/gogo/protobuf/test/combos/both\t0.183s\r\n\r\nreal\t1m20.361s\r\nuser\t1m26.718s\r\nsys\t0m3.962s\r\n```\r\n\r\nThere's a huge difference in memory allocation between the two, though still plenty of room for additional improvement in register/stack allocation.",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-08T15:16:10Z",
	"updated_at": "2016-05-08T15:16:10Z"
}
