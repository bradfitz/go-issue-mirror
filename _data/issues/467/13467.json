{
	"id": 120217640,
	"number": 13467,
	"state": "open",
	"title": "cmd/cgo: make identical C types identical Go types across packages",
	"body": "https://golang.org/cmd/cgo/ says:\r\n\u003e  Cgo translates C types into equivalent unexported Go types. Because the translations are unexported, a Go package should not expose C types in its exported API: a C type used in one Go package is different from the same C type used in another.\r\n\r\nWhile that's a convenient workaround for allowing access to struct fields and other names that would otherwise be inaccessible as Go identifiers, it greatly complicates the process of writing Go APIs for export to C callers.  The Go code to produce and/or manipulate C values must be essentially confined to a single package.\r\n\r\nIt would be nice to remove that restriction: instead of treating C types as unexported local types, we should treat them as exported types in the \"C\" package (and similarly export the lower-case names that would otherwise be unexported).",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"comments": 8,
	"created_at": "2015-12-03T16:43:49Z",
	"updated_at": "2016-06-27T19:34:31Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	}
}
