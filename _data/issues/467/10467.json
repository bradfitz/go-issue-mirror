{
	"id": 68715171,
	"number": 10467,
	"state": "closed",
	"title": "x/tools/cmd/cover: for increment statement is not covered",
	"body": "cover instruments the following program:\r\n```go\r\nfunc foo() {\r\n\ttype Node struct {\r\n\t\tnext *Node\r\n\t\tv int\r\n\t}\r\n\tfor p := new(Node); p != nil; p = p.next {\r\n\t\tprintln(\"here\")\r\n\t\tif p.v == 0 {\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nas:\r\n```go\r\nfunc foo() {\r\n\tGoCover.Count[0] = 1\r\n\ttype Node struct {\r\n\t\tnext\t*Node\r\n\t\tv\tint\r\n\t}\r\n\tfor p := new(Node); p != nil; p = p.next {\r\n\t\tGoCover.Count[1] = 1\r\n\t\tprintln(\"here\")\r\n\t\tif p.v == 0 {\r\n\t\t\tGoCover.Count[2] = 1\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nAs the result it is not possible to understand whether 'p = p.next' statement covered or not.\r\n\r\nOne way to fix it would be to emit coverage instrumentation before continue statements and at loop end. For example, in this case the following would do:\r\n```go\r\n\tfor p := new(Node); p != nil; p = p.next {\r\n\t\tGoCover.Count[1] = 1\r\n\t\tprintln(\"here\")\r\n\t\tif p.v == 0 {\r\n\t\t\tGoCover.Count[2] = 1\r\n\t\t\tbreak\r\n\t\t}\r\n\t\tGoCover.Count[3] = 1\r\n\t}\r\n```",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2015-04-15T17:11:32Z",
	"created_at": "2015-04-15T15:36:15Z",
	"updated_at": "2016-06-25T02:05:45Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
