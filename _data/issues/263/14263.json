{
	"id": 132260087,
	"number": 14263,
	"state": "closed",
	"title": "cmd/compile: eliminate write barriers for ... args",
	"body": "Consider the following example:\r\n\r\n```\r\n//go:noescape\r\nfunc f(a ...*int)\r\nfunc g(x, y *int) {\r\n\tf(x, y)\r\n}\r\n```\r\nThis gets compiled to something like this:\r\n```\r\nfunc g(x, y *int) {\r\n\tvar a [2]*int\r\n\tvar b = a[:]\r\n\tb[0] = x\r\n\tb[1] = y\r\n\tf(b)\r\n}\r\n```\r\nThe compiler thinks the assignments b[0]=x and b[1]=y need a write barrier because it doesn't know that b points to the stack.  If instead we compiled those assignments as a[0]=x and a[0]=y, then the compiler does know that they are on the stack and will elide the write barriers.\r\n\r\nOr maybe we could somehow deduce that b always points to the stack?  That seems harder.\r\n\r\nThis problem happens all the time with a ...{}interface, for instance with fmt.Printf args.  I'm not sure how much it matters speed-wise, but I suspect this would save a chunk of code size.\r\n\r\n@RLH @aclements @rsc ",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"comments": 2,
	"closed_at": "2016-04-24T18:16:07Z",
	"created_at": "2016-02-08T21:23:55Z",
	"updated_at": "2016-04-24T18:16:07Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	}
}
