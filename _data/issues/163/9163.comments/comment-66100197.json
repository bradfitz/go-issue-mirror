{
	"id": 66100197,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6 by **mgspross**:\n\n\u003cpre\u003eOK. I tested again with go1.4rc1 windows/386, and I got the same output from\nGODEBUG=gctrace=1 that you posted. Specifically, I saw this line, which is what I would\nexpect to see:\n\n   scvg-1: 96 MB released\n\nI apologize: when I initially wrote the bug report, I had been paying more attention to\nthe process's memory usage in the Windows task manager, and I missed the above line in\nthe gctrace output.\n\nWhen I run the test with 1.3.3 windows/386, the output reports that 0 MB are released,\nso perhaps this different in 1.4 because of the changes to the garbage collector.\n\nSo, this does seem to be working in 1.4, as far as what the go runtime is reporting.\n\nHowever, in 1.4, what still seems odd is that Windows reports that ~13.5 is still \"in\nuse\" after FreeOSMemory is called (in the \"Private Working Set\" column of the Task\nManager). When the program starts, it only uses a little over 1 MB.\n\nMy concern is whether this has any implications for long-running go programs (i.e. a\nserver). I wonder if a go program can still run out of memory eventually on Windows,\nsince Windows doesn't seem to decommit all of the memory, even though the runtime says\nit has released all of it.\n\nWhat makes it seem strange is that this doesn't happen with the amd64: there is no\n\"leftover\" memory reported by the Task Manager, or at least not a significant amount:\nthe memory usage goes back down to ~1.5 MB, according to the Task Manager.\n\nSo, I'm not sure if this is somehow normal behavior in the 386 build, or if this means\nthe 386 build is leaking memory in 1.4.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-11-26T05:11:52Z",
	"updated_at": "2014-12-08T10:50:02Z"
}
