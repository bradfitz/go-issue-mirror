{
	"id": 161875590,
	"number": 16163,
	"state": "open",
	"title": "x/tools/cmd/goyacc: When growing the stack, save it in the parser",
	"body": "1. What version of Go are you using (`go version`)?\r\n\r\n```\r\ngo version go1.6.2 windows/amd64\r\n```\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\n```\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOEXE=.exe\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\rillig\\go\r\nset GORACE=\r\nset GOROOT=C:\\Program Files (x86)\\Go1.6.2\r\nset GOTOOLDIR=C:\\Program Files (x86)\\Go1.6.2\\pkg\\tool\\windows_amd64\r\nset GO15VENDOREXPERIMENT=1\r\nset CC=gcc\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\n```\r\n\r\n3. What did you do?\r\n\r\nI wrote a Yacc parser for parsing shell commands into an AST.\r\nI accessed the resulting AST via `yyParserImpl.stack[1]`.\r\nFor small examples, this worked well.\r\nMore complicated examples resulted in `nil` being on the stack.\r\n\r\n4. What did you expect to see?\r\n\r\n`yyParserImpl.stack[1]` should always contain the result, no matter how deeply nested the grammar is.\r\n\r\n5. What did you see instead?\r\n\r\nWhen the Yacc parser needs more stack, it grows it. The code is after the `yystack:` label. This new stack is then local to the current function, and it is not written back into the parser. This means that calling `Parse` multiple times will create unnecessary copies of the stack. And, more importantly, accessing the actual stack becomes impossible.\r\n\r\nReferences: http://stackoverflow.com/questions/36822702/accessing-result-of-a-golang-yacc-generated-parser",
	"user": {
		"login": "rillig",
		"id": 3233724,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2016-06-23T09:15:30Z",
	"updated_at": "2016-09-25T23:15:38Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
