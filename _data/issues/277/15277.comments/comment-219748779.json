{
	"id": 219748779,
	"body": "I just mailed a potential fix for this.  It will need some discussion.\r\n\r\nBasically, it implements runtime.KeepAlive internally and calls it for pointer arguments after each call and at each return.\r\n\r\nPointer arguments only, because those are the ones that matter for finalizers, and compound objects (slices, structs, ...) are a much more invasive change.\r\n\r\nThe only extra code this CL will end up generating is spills for otherwise dead values.  It does not explicitly write back nil to argument slots, instead it marks the input argument slot as not live at the appropriate safe points.  This requires turning off the \"inputs are always live everywhere\" code you will see commented out in the CL.  We need to decide whether that code matters.  (The comment says it is there to help with unnamed input parameters, not sure how much we care about those.)",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-17T15:10:13Z",
	"updated_at": "2016-05-17T15:10:13Z"
}
