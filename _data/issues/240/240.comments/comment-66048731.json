{
	"id": 66048731,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4 by **runningwild**:\n\n\u003cpre\u003eTCPListener.Accept() is also awkward to use without a timeout.  Once\nTCPListener.Accept() is called it blocks \nuntil a connection is received.  Without a timeout or the ability to kill other\ngoroutines the best I can do, if I \nwant to stop listening and I want to free up that TCP port, is one of the following:\n\n1. Call TCPListener.Close() from another goroutine, which leaves a stalled goroutine\nresident that just \nconsumes resources (albeit a constant amount) and pollutes the output in the event of a\nstack trace.\n2. I can actually dial the addr that I was listening on which will dislodge the\nTCPListener.Accept(), but that \nseems like a very silly and unintuitive thing to have to do, and it also requires extra\ncode so that the listener \nknows when it was being dislodged like that.\n\nAs with Dial I think this could be fixed by either a timeout or being able to kill other\ngoroutines, or instead by \nTCPListener.Accept() returning an error if TCPListener.Close() is called from another\ngoroutine.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-12-29T16:48:21Z",
	"updated_at": "2014-12-08T10:03:48Z"
}
