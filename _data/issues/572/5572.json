{
	"id": 51283849,
	"number": 5572,
	"state": "closed",
	"title": "os/signal: ignoring SIGTTIN and reading os.Stdin.Read fails badly",
	"body": "by **viriketo**:\n\n\u003cpre\u003eOn linux x86_64, go 1.1:\n\nI want a process to be able to read on Stdin, but if set to background, I want it not\nstopped.\n\nCurrently, os.Stdin.Read() goes into infinite loop, if I ignore the SIGTTIN signal\nreceived when reading on a tty while the process is in background.\n\nos.Stdin.Read() calls the read() syscall; if the process is in background, it's\ninterrupted with ERESTART and the process receives SIGTTIN; that should stop the\nprocess. If I ignore the signal, the process doesn't stop, but os.Stdin.Read() calls\nread() in a loop due to ERESTART, getting SIGTTIN again, and so on (max cpu usage).\n\nHow can I make a process that doesn't stop when sent to background, if I want it also to\nbe able to read stdin (when foreground)?\n\nCode to reproduce it (run with \u0026amp;):\n-----------------\npackage main\n\nimport (\n        \u0026quot;os\u0026quot;\n        \u0026quot;os/signal\u0026quot;\n        \u0026quot;syscall\u0026quot;\n        )\n\nfunc main() {\n        ignore := make(chan os.Signal)\n        signal.Notify(ignore, syscall.SIGTTIN)\n\n        v := make([]byte, 10)\n        os.Stdin.Read(v)\n}\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 7,
	"closed_at": "2015-02-16T14:24:12Z",
	"created_at": "2013-05-28T11:00:19Z",
	"updated_at": "2016-06-24T22:41:14Z"
}
