{
	"id": 168881831,
	"number": 16572,
	"state": "closed",
	"title": "x/net/http2: Transport hangs on malformed response headers",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\ngo1.7rc4\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nOS X ( 15.6.0 Darwin Kernel Version 15.6.0: Thu Jun 23 18:25:34 PDT 2016; root:xnu-3248.60.10~1/RELEASE_X86_64 x86_64)\r\n\r\n3. What did you do?\r\nTested the http2 implementation of go against Apache mod_h2, using a simple GET on a python CGI.\r\n\r\n4. What did you expect to see?\r\nThe output from the CGI.\r\n\r\n5. What did you see instead?\r\nGo did hang and did not produce any results. The difference between a stuck GET and a successful one seems to be the EOF handling. On most responses Apache sets the EOF flag on the last DATA frame. However with CGI processes, the EOF is only encountered when the last DATA has already been written. In this case, Apache send a last DATA frame with length 0 and EOF=1. This seems to be ignored by the go implemenation, keeping it waiting.\r\n\r\nAdditionally to that, Apache *will* close the connection after a timeout, but the go client still will not return although the connection was properly closed.\r\n\r\n\r\n",
	"user": {
		"login": "icing",
		"id": 15102,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 35,
	"closed_at": "2016-08-03T01:52:34Z",
	"created_at": "2016-08-02T13:14:11Z",
	"updated_at": "2016-08-03T01:52:34Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
