{
	"id": 244851045,
	"body": "I wanted to benchmark Read() (e.g. how many allocations are made per record) so I added a benchmark to test this that [reads `b.N` rows](https://github.com/infogulch/go/commit/8972da47c0c9d1670a42aecc9be6f0acd936a4ae).\r\n\r\nTurns out it makes `columns+1` allocations (surprise, surprise). I was able to bring this down to [2 allocations](https://github.com/infogulch/go/commit/974cb604a1506cb81a2bcbadf3971859f2033c0c) (regardless of the number of columns) by concatenating the entire record into one byte buffer, converting it to a string once at the end and slicing the string up into the fields with field lengths that were recorded during record parsing. (ReadNLarge has 26 columns, ReadNSmall has 3.)\r\n\r\n```\r\nbenchmark                 old ns/op     new ns/op     delta\r\nBenchmarkRead-4           7724          6463          -16.33%\r\nBenchmarkReadNLarge-4     2690          1487          -44.72%\r\nBenchmarkReadNSmall-4     382           271           -29.06%\r\n\r\nbenchmark                 old allocs     new allocs     delta\r\nBenchmarkRead-4           41             30             -26.83%\r\nBenchmarkReadNLarge-4     27             2              -92.59%\r\nBenchmarkReadNSmall-4     4              2              -50.00%\r\n\r\nbenchmark                 old bytes     new bytes     delta\r\nBenchmarkRead-4           5844          5704          -2.40%\r\nBenchmarkReadNLarge-4     442           448           +1.36%\r\nBenchmarkReadNSmall-4     51            51            +0.00%\r\n```\r\n\r\nThe only problem I see with this approach is if the user needs to keep around one column which prevents the rest of a large record from being cleaned up by the GC (is the GC able to trim and reallocate unreachable strings after they've been sliced?). Changing this back to allocate every field separately makes the delta negligible.\r\n\r\nOne bonus is that it's now trivial to implement a zero-allocs `ReadStream() ([][]byte, error)` interface. The performance win here is more dramatic, if slightly offtopic:\r\n\r\n```\r\nbenchmark                 old ns/op     new ns/op     delta\r\nBenchmarkRead-4           7579          6333          -16.44%\r\nBenchmarkReadNLarge-4     2733          1126          -58.80%\r\nBenchmarkReadNSmall-4     377           153           -59.42%\r\n\r\nbenchmark                 old allocs     new allocs     delta\r\nBenchmarkRead-4           41             30             -26.83%\r\nBenchmarkReadNLarge-4     27             0              -100.00%\r\nBenchmarkReadNSmall-4     4              0              -100.00%\r\n\r\nbenchmark                 old bytes     new bytes     delta\r\nBenchmarkRead-4           5844          5704          -2.40%\r\nBenchmarkReadNLarge-4     442           0             -100.00%\r\nBenchmarkReadNSmall-4     51            0             -100.00%\r\n```",
	"user": {
		"login": "infogulch",
		"id": 133882,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-06T05:08:51Z",
	"updated_at": "2016-09-06T05:08:51Z"
}
