{
	"id": 241049282,
	"body": "Many functional programming languages have excellent support for (general) TCO and it is not an impediment at all for debugging. Code compiled in debug mode can still be instrumented to keep count of self-calls and informations about lost stackframes. In functional languages like Haskell, purity from side-effects helps debugging since only the initial values are needed to know the state of every subsequent call; in Go it's not guaranteed so you lose intermediate stackframes and there's no way to recover them, but since most uses for recursive calls are in algorithms, which I hope are implemented in a mathematically sound manner, the issue is greatly reduced. Everything is moving in this direction, and Go should not be left behind.\r\n\r\nAlso, as dr2chase noted, I often find myself rewriting beautifully recursive code from their mathematical description to ugly hackish iterative style and it is not easy at all to prove they are completely equivalent until your application in production decides to run an infinite loop because the terminating condition is not met with certain inputs.\r\n\r\nDo it.",
	"user": {
		"login": "unwind-protect",
		"id": 18464885,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-19T15:25:25Z",
	"updated_at": "2016-08-19T15:25:25Z"
}
