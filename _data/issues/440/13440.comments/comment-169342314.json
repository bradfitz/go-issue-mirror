{
	"id": 169342314,
	"body": "From code review:\r\n\r\n \u003e \u003e What if it crashed due to a signal? Now it's exit(someRandomNumber).\r\n \u003e \u003e I am not convinced this needs to be done at all.\r\n \u003e \r\n \u003e It won't exit with some random number if it fails with a signal. \r\n \u003e It will exit with status 1 as it did before.\r\n\r\nFair enough, let me try again:\r\n\r\nWhat if it crashed due to a signal?\r\nIt used to print information about the exit reason and exit 1.\r\nNow it's a silent exit(someRandomNumber).\r\n\r\nThe real question is whether 'go run x.go' is supposed to be just an interpreter for Go programs, like 'python x.py' or whether it is a tool that runs a subprocess and reports the results itself, like make. To date, the answer has been the latter. So it's not obvious the behavior is wrong, unless 'go run' is supposed to be some kind of interactive go command, which we've said in the past it is not.\r\n\r\n```\r\n$ cat makefile\r\nexit5:\r\n\texit 5\r\n$ make exit5\r\nexit 5\r\nmake: *** [exit5] Error 5\r\n$ echo $?\r\n2\r\n$ \r\n```\r\n\r\n(Make happens to use 2 instead of 1, but it's always 2 on my system.)\r\n\r\n```\r\n$ cat x.go\r\npackage main\r\n\r\nimport \"os\"\r\n\r\nfunc main() {\r\n\tos.Exit(5)\r\n}\r\n$ go run x.go\r\nexit status 5\r\n$ echo $?\r\n1\r\n$ \r\n```\r\n",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	},
	"created_at": "2016-01-06T14:47:17Z",
	"updated_at": "2016-01-06T14:47:17Z"
}
