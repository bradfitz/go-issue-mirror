{
	"id": 78515123,
	"body": "You are passing an address to a variable to a goroutine but you let the\nvalue at that address change before the goroutines are potentially run.\n\nThe idiomatic way of getting the behavior you want is to create a local\nvariable within the loop, set it equal to your 'v', and then pass the\naddress of _that_ local.  You will get a new local allocated from the heap\nin each iteration this way, and you should get the 1,2,3 output.\n\n\n\nOn Wed, Mar 11, 2015 at 7:23 AM, Anton Tyurin \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e I met a strange behavior while passing elements of array by pointer to a\n\u003e function. It looks like a bug.\n\u003e You can find example here:\n\u003e http://play.golang.org/p/e0dDpyCYCG\n\u003e\n\u003e package main\n\u003e import (\n\u003e     \"fmt\"\n\u003e     \"sync\"\n\u003e )\n\u003e var wg sync.WaitGroup\n\u003e type Item struct {\n\u003e     name string\n\u003e }\n\u003e func (i *Item) Name() string {\n\u003e     defer wg.Done()\n\u003e     return i.name\n\u003e }\n\u003e func Go(t *Item) {\n\u003e     fmt.Println(t.Name())\n\u003e }\n\u003e func main() {\n\u003e     f := make([]Item, 0)\n\u003e     f = append(f, Item{\"1\"})\n\u003e     f = append(f, Item{\"2\"})\n\u003e     f = append(f, Item{\"3\"})\n\u003e     for _, v := range f {\n\u003e         wg.Add(1)\n\u003e         go Go(\u0026v)\n\u003e     }\n\u003e     wg.Wait()\n\u003e\n\u003e This example prints\n\u003e\n\u003e 3\n\u003e 3\n\u003e 3\n\u003e\n\u003e It doesn't look like an expected behavior.\n\u003e Moreover this example (http://play.golang.org/p/KY4jEgtgGn) (exactly the\n\u003e same, but without go)\n\u003e\n\u003e package main\n\u003e import (\n\u003e     \"fmt\"\n\u003e     \"sync\"\n\u003e )\n\u003e var wg sync.WaitGroup\n\u003e type Item struct {\n\u003e     name string\n\u003e }\n\u003e func (i *Item) Name() string {\n\u003e     defer wg.Done()\n\u003e     return i.name\n\u003e }\n\u003e func Go(t *Item) {\n\u003e     fmt.Println(t.Name())\n\u003e }\n\u003e func main() {\n\u003e     f := make([]Item, 0)\n\u003e     f = append(f, Item{\"1\"})\n\u003e     f = append(f, Item{\"2\"})\n\u003e     f = append(f, Item{\"3\"})\n\u003e     for _, v := range f {\n\u003e         wg.Add(1)\n\u003e         Go(\u0026v)\n\u003e     }\n\u003e     wg.Wait()\n\u003e }\n\u003e\n\u003e prints\n\u003e\n\u003e 1\n\u003e 2\n\u003e 3\n\u003e\n\u003e I checked it on *1.3.3*, *1.4.1*, *1.4.2*\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/10132\u003e.\n\u003e\n",
	"user": {
		"login": "FrankReh",
		"id": 5726008,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-03-12T16:21:19Z",
	"updated_at": "2015-03-12T16:21:19Z"
}
