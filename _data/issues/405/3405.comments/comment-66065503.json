{
	"id": 66065503,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eHi Russ,\n\nfirst of all, here is the example of using 'mode 2 seccomp' from Go:\n\u003ca href=\"https://github.com/krasin/seccomp/blob/master/example/example.go\"\u003ehttps://github.com/krasin/seccomp/blob/master/example/example.go\u003c/a\u003e\n\nIt has been tested on x86-64 Ubuntu 12.04, but is not guaranteed to work on 32-bit and\nwill not work on other / older kernels. The good news that 'mode 2 seccomp' is going to\nbe included into Linux 3.5 kernel. See \u003ca href=\"https://lkml.org/lkml/2012/3/25/81\"\u003ehttps://lkml.org/lkml/2012/3/25/81\u003c/a\u003e\n\nCurrently, the example is only half-way working. seccomp applies policies to the current\nthread, not the process or all the threads. It means that I had to\nruntime.LockOSThread() to avoid switching the system thread while executing the\ngoroutine and it's only that thread is killed, which makes the whole program just hang\n(Go runtime does not handle the situation when one of threads has received SIGSYS)\n\nIn order to get 'mode 2 seccomp' to work properly with Go, it should make it possible to\napply the policy to all system threads at once and make it possible to disable thread\nspawning by the runtime (since clone(2) will likely be disabled by any self-respecting\nseccomp policy).\u003c/pre\u003e",
	"user": {
		"login": "krasin",
		"id": 21159,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-03-28T00:23:59Z",
	"updated_at": "2014-12-08T10:17:46Z"
}
