{
	"id": 67499436,
	"number": 10405,
	"state": "closed",
	"title": "net/http: CancelRequest twice on the same request panics",
	"body": "If i call CancelRequest twice on the same request, CancelRequest will panic because of close a closed channel at here:\r\nhttps://golang.org/src/net/http/transport.go#L517\r\n\r\nI argue that CancelRequest should not panic here:\r\n1. There is no need to panic when cancelling a cancelled request. And no document says that is not allowed.\r\n2. It is hard to ensure a request is canceled without CancelRequest retry:\r\n```\r\n    go func() { c \u003c- f(client.Do(req)) }()\r\n    select {\r\n    case \u003c-ctx.Done():\r\n        tr.CancelRequest(req)\r\n        \u003c-c // Wait for f to return.\r\n        return ctx.Err()\r\n    case err := \u003c-c:\r\n        return err\r\n    }\r\n```\r\n(code from https://blog.golang.org/context)\r\nIt is possible that the request is canceled before Do is called, and it needs CancelRequest retry to ensure it is canceled.\r\n\r\nfrom https://github.com/coreos/go-etcd/issues/197",
	"user": {
		"login": "yichengq",
		"id": 2976232,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2015-04-20T20:36:14Z",
	"created_at": "2015-04-10T03:22:51Z",
	"updated_at": "2016-06-25T02:05:17Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
