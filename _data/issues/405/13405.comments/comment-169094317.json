{
	"id": 169094317,
	"body": "One solution is simply to ignore this problem, say that profiling won't work very well on these platforms, and wait for them to catch up. This sounds like a cop-out, but I think it's reasonable because:\r\n\r\n1. The linux/arm builders are using an old kernel (in fact, the oldest supported Scaleway kernel). Every newer Scaleway kernel supports high-res timers. (https://github.com/scaleway/kernel-tools/tree/master/armv7l)\r\n2. As far as I can tell, every Raspberry Pi kernel (both v1 and v2 and even the \"cut-down\" kernels) has supported high-res timers. (https://github.com/raspberrypi/linux/tree/rpi-4.4.y/arch/arm/configs bcmrpi_defconfig for v1, bcm2709_defconfig for v2 and true all the way back to 3.2)\r\n3. OpenBSD and Solaris are second-class ports and there's evidence that only some Solaris platforms actually have trouble with short sleeps (so those, too, will probably go away).\r\n4. It's 2016. 10 ms is an eternity and it's reasonable to expect decent timer support.\r\n\r\nThat said, I would like to eliminate the usleep(100) from getfull because it's bad for other reasons. However, the usleep in runqgrab is a good idea (assuming the OS can do it), which makes that one much harder to eliminate.\r\n\r\nAnother alternative is to try to detect if usleep(100) actually works when the runtime starts up, but I don't know how to do this reliably on a system that may be loaded.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-05T18:47:38Z",
	"updated_at": "2016-01-05T18:47:38Z"
}
