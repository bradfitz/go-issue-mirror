{
	"id": 168884316,
	"body": "This is a result of ARM's poor timer hardware and some strange design decisions in the Linux kernel.\r\n\r\nFirst, Linux/ARM (at least the 3.2 kernel on the Scaleway machines the builders use [1]) is totally incapable of sleeping for 100 microseconds. A usleep(100) gives up the entire 10ms scheduling quantum, even if there's nothing else to run. This is probably because, according to /proc/timer_list, all of the timers have a resolution of 10ms (compare this to, say, linux/amd64, where the resolution is 1ns).\r\n\r\nThis alone doesn't explain why we aren't getting profiling signals; we still rack up about 2.3 seconds of CPU time during the 5 second test. However, ITIMER_PROF is fired by update_process_times, which checks to see if the current process' user plus system CPU time has passed the firing threshold. update_process_times is called by the system tick (specifically tick_nohz_handler in this case). We usleep roughly 1,200 across the various threads (there are ~4 active threads, so that's ~3 wall clock seconds of 10ms sleeps, which adds up almost perfectly with the 2.3 seconds of CPU time), so it's likely we usleep in every single scheduling quantum and hence always give away our time slice. As a result, there's *never a running process* when update_process_times runs. Even though the process racks up more than enough CPU time according to /proc/self/stat, update_process_times just never looks at it and thus never fires a SIGPROF.\r\n\r\n[1] Scaleway kernel configuration is here: https://github.com/scaleway/kernel-tools/blob/master/armv7l/3.2.34-std/.config . Notably, CONFIG_HZ=100, which is where the 10ms scheduling quantum comes from, and CONFIG_HIGH_RES_TIMERS is not set.\r\n\r\n/cc @dvyukov @RLH in case either of you have insights on what to do about this 100us sleeps.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-05T03:37:12Z",
	"updated_at": "2016-01-05T03:37:12Z"
}
