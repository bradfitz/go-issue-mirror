{
	"id": 66094915,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11:\n\n\u003cpre\u003eHere is where the magic number came from.\nAs mtj points out, the max float32 is (1-2^-24)*2^128.\nArguably the rounding should let you go up to (but not allow) 1/2 ulp beyond, so the\nfirst invalid value for rounding to float32 should be TooBig = (1-2^-24+2^-25)*2^128 =\n(1-2^-25)*2^128.\nThe compiler was rounding to float64 first with custom code, and then to float32 using\nhardware.\nThe smallest value that float64-rounds to TooBig is (1-2^-25-2^-54)*2^128,\nwhich is in fact the number in question (340282356779733642748073463979561713664).\nThe compiler would round it to the float64 TooBig, and then the hardware would\nfloat64-to-float32 convert it to 0 (presumably because the conversion is invalid).\n\nThe original number was \u0026lt; TooBig, so the compiler generated no overflow message.\nThe double rounding caused a spurious overflow that resulted in the 0.\nThe fix is to do the rounding to float32 ourselves in one step.\u003c/pre\u003e\n\n\n\n_Status changed to **Started**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-05-20T01:18:35Z",
	"updated_at": "2014-12-22T06:34:45Z"
}
