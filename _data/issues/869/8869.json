{
	"id": 51288807,
	"number": 8869,
	"state": "open",
	"title": "time: mockable time support",
	"body": "\u003cpre\u003eWith \u003ca href=\"https://github.com/jmhodges/clock\"\u003ehttps://github.com/jmhodges/clock\u003c/a\u003e and the broader \u003ca href=\"https://github.com/benbjohnson/clock\"\u003ehttps://github.com/benbjohnson/clock\u003c/a\u003e API,\r\nthere's a desire for the timing systems in Go to be fakeable[1]. Using a fake clock\r\ninstead of time.Now directly is useful when testing code that stores timestamps, caches\r\ndata, etc.\r\n\r\nThe benbjohnson clock package attempts to make Ticker and Timer calls (as well as their\r\nrelated AfterFunc and Sleep methods) work against a fake time that can be set and\r\nupdated in tests. However, it relies on some micro-sleeps and runtime.Gosched calls that\r\nare obviously going to be flaky. But there is a desire to able to test code that uses\r\nTickers and Timers, not by adjusting the durations they work for (which can induce flaky\r\ntesting), but by adjusting when they think they need to wake up.\r\n\r\nTo do that, we seem to need more runtime magic to help developers out. In fact, it might\r\nbe best if a clock package like these lived in the stdlib so that it could be tied more\r\ncarefully and thoughtfully to the scheduler.\r\n\r\n [1] or \u0026quot;mockable\u0026quot;, whatever language you prefer. The summary of this issue is to distinguish it from \u003ca href=\"https://golang.org/issue/5356\"\u003eissue #5356\u003c/a\u003e.\u003c/pre\u003e",
	"user": {
		"login": "jmhodges",
		"id": 598,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"created_at": "2014-10-05T00:25:49Z",
	"updated_at": "2015-09-02T02:55:31Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
