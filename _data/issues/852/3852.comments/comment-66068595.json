{
	"id": 66068595,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003eI agree that we could add:\n\n- return statements to the section on evaluation order (as suggested)\n- and perhaps mention evaluation order explicitly in the section on return statements\n\nMore generally, this also applies to all (but one, see below) expression lists: Given\n\na := 7\nf := func() int { a = 42; return 8 }()\n\nthe evaluation order of a with respect to calling f in\n\na, f()\n\nis undefined. It's true for:\n\n- assignments: x, y := a, f()\n- function calls: g(a, f())\n- return statements: return a, f()\n- even composite literals: []int{a, f()} (while in general it may not matter, it seems a\nbit surprising)\n\nBut it is not true in case clauses of expression switches:\n\nswitch  tag {\ncase a, f():\n  ...\n}\n\nbecause this is equivalent to:\n\nswitch tag {\ncase a:\n   fallthrough\ncase f():\n   ...\n}\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-08-03T21:46:12Z",
	"updated_at": "2014-12-08T10:20:21Z"
}
