{
	"id": 54739666,
	"number": 9634,
	"state": "closed",
	"title": "cmd/gc: unsafe memory access through append()",
	"body": "Testing with go1.4 I can use append on a struct if its first member happens to be a slice. This in turn allows for arbitrary memory writes:\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n)\r\n\r\ntype SS struct {\r\n\tList []uint64\r\n\tX, Y, Z, K *uint64\r\n}\r\n\r\nfunc InternalWriteToPointer(s *SS) {\r\n\tfmt.Printf(\"X 0x%X Y 0x%X Z 0x%X K 0x%X\\n\", s.X, s.Y, s.Z, s.K)\r\n\t*s.Y = 0\r\n}\r\n\r\nfunc WriteAtAddress(t uint64) {\r\n\tvar s SS\r\n\ts.List = append(s, t)\r\n\ts.List = append(s, t)\r\n\ts.List = append(s, t)\r\n\tInternalWriteToPointer(\u0026s)\r\n}\r\n\r\nfunc main() {\r\n\tWriteAtAddress(0x1122334455667788)\r\n}\r\n```",
	"user": {
		"login": "venture-cast",
		"id": 10595307,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "paranoiacblack",
		"id": 1035296,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2015-01-20T22:57:09Z",
	"created_at": "2015-01-19T09:00:00Z",
	"updated_at": "2016-06-25T01:58:53Z",
	"milestone": {
		"id": 934508,
		"number": 4,
		"title": "Go1.4.2"
	}
}
