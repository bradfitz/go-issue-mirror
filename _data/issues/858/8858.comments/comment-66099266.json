{
	"id": 66099266,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1 by **rpzrpzrpz**:\n\n\u003cpre\u003eHere is a sample Google Go Code Plus Python Code to generate the test.\n\nYou must set up a linux server with 5 IP addresses on the ethernet port. I am sure you\ncould probably just change the ports around and use a single IP address, but that is not\nthe test that I ran to produce the bugs.\n\nYou will observe the \"Mangled Bytes\" error message and that will indicate that the UDP\npayload does not match the IP Address.\n\n##############GO CODE##################\n\n// testudp project main.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\t\"syscall\"\n\t\"time\"\n)\n\nvar gmax int = 0\nvar gstop bool = false\n\nfunc main() {\n\n\tfmt.Println(\"TestUdp Starting up:\", time.Now().UTC().String())\n\n\tgsigchan := make(chan os.Signal, 3)\n\tsignal.Notify(gsigchan, os.Interrupt, syscall.SIGTERM)\n\tsignal.Notify(gsigchan, os.Interrupt, syscall.SIGUSR1)\n\n\tgo func() {\n\t\t\u0026lt;-gsigchan\n\t\tfmt.Println(\"TestUDP SIGTERM:\", time.Now().UTC().String())\n\t\tgstop = true\n\t}()\n\n\tgo udplisten(\"192.168.7.20\", 8500, \u0026gstop)\n\n\tfor {\n\t\ttime.Sleep(1000 * time.Millisecond)\n\t\tif gstop == true {\n\t\t\tbreak\n\t\t}\n\t\t//fmt.Println(\"TestUdp Running:\", time.Now().UTC().String())\n\t}\n\n\tfmt.Println(\"TestUdp Exiting:\", time.Now().UTC().String())\n\n\ttime.Sleep(100 * time.Millisecond)\n\n}\n\nfunc udplisten(gip string, gport int, gstop *bool) bool {\n\n\t//Parameters\n\t//gip - IP Address will listen to\n\t//gport - Port we will listen on\n\t//gstop - pointer to control variable to terminate thread\n\n\tvar gbuf [1024]byte\n\n\tif gip == \"\" {\n\t\tfmt.Println(\"Invalid IP Address\")\n\t\treturn false\n\t}\n\n\tif gport \u0026lt; 3000 {\n\t\tfmt.Println(\"Invalid Port\")\n\t\treturn false\n\t}\n\n\tif gstop == nil {\n\t\tfmt.Println(\"Invalid Stop variable\")\n\t\treturn false\n\t}\n\n\tgsrvaddr := net.UDPAddr{\n\t\tPort: gport,\n\t\tIP:   net.ParseIP(gip),\n\t}\n\n\tfmt.Println(\"UDP Listen ENTER:\", gsrvaddr)\n\n\tfor *gstop == false {\n\n\t\tgconn, gerr := net.ListenUDP(\"udp4\", \u0026gsrvaddr)\n\t\tif gerr != nil {\n\t\t\tfmt.Println(\"Cluster UDP Listen Error:\", gerr)\n\t\t\ttime.Sleep(1000 * time.Millisecond)\n\t\t\tcontinue\n\t\t}\n\n\t\tfor *gstop == false {\n\n\t\t\t//#give us 1 second to read the bytes\n\t\t\tgconn.SetReadDeadline(time.Now().Add(time.Second))\n\n\t\t\tglen, grxadd, gerr := gconn.ReadFromUDP(gbuf[0:])\n\n\t\t\tif gerr != nil {\n\n\t\t\t\t//Remove timeout from this loop\n\t\t\t\tif strings.Contains(gerr.Error(), \"i/o timeout\") == true {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tfmt.Println(\"UDP Read Error:\", gerr)\n\t\t\t\tgconn.Close()\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tif grxadd == nil {\n\t\t\t\ttime.Sleep(200 * time.Millisecond)\n\t\t\t\tfmt.Println(\"UDP No Address returned on RX\")\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tgo udpcallbackfunc(gconn, grxadd, glen, gbuf[0:glen])\n\n\t\t}\n\n\t}\n\treturn true\n}\n\nfunc udpcallbackfunc(grxconn *net.UDPConn, grxadd *net.UDPAddr, grxlen int, grx []byte) {\n\n\tgstr := string(grx)\n\tif gstr == grxadd.IP.String() {\n\t\t//Our grx payload is good\n\t\treturn\n\t}\n\tfmt.Println(\"Bytes Mangled:\", gstr, grxadd.IP.String())\n\n\tgmax++\n\tif gmax \u0026gt; 200 {\n\t\tgstop = true\n\t}\n\n\treturn\n}\n\n##############PYTHON CODE##################\n\nimport time\nfrom socket import *\nfrom threading import Thread\n\ngstop = 0\n\ndef udpcli(srvaddr,cliaddr,payload):\n\n\tsock = socket(AF_INET,SOCK_DGRAM)\n\tsock.bind(cliaddr)\n\n\tprint \"UDP Thread going...\"\n\tprint cliaddr\n\tprint srvaddr\n\tprint payload\n\n\twhile True:\n\t\t#Just send it a lot\n\t\tsock.sendto(payload,srvaddr)\n\n\t\tif gstop == 1:\n\t\t\tbreak\n\n\n\tprint \"UDP Thread stopping\"\n\tprint payload\n\n\nsaddr = (\"192.168.7.20\",8500)\ncaddr = (\"192.168.7.21\",8500)\nta = Thread(target=udpcli,args=(saddr,caddr,\"192.168.7.21\"))\nta.start()\ncaddr = (\"192.168.7.22\",8500)\ntb = Thread(target=udpcli,args=(saddr,caddr,\"192.168.7.22\"))\ntb.start()\ncaddr = (\"192.168.7.23\",8500)\ntc = Thread(target=udpcli,args=(saddr,caddr,\"192.168.7.23\"))\ntc.start()\ncaddr = (\"192.168.7.24\",8500)\ntd = Thread(target=udpcli,args=(saddr,caddr,\"192.168.7.24\"))\ntd.start()\n\nprint \"Started UDP client\"\n\nwhile 1:\n\tif gstop == 1:\n\t\tbreak\n\ttry:\n\t\ttime.sleep(1)\n\t\tprint \"Running UDP client\"\n\n\texcept KeyboardInterrupt:\n\t\tprint \"Keyboard Break\"\n\t\tgstop = 1\n\t\tbreak \n\n\nprint \"Broken Out Break\"\ntime.sleep(1)\nprint \"Stopped...\"\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-10-03T03:40:04Z",
	"updated_at": "2014-12-22T06:37:43Z"
}
