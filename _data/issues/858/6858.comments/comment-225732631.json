{
	"id": 225732631,
	"body": "@mdempsky I understand exactly what Ian was talking about. This is an implementation detail in the sense that if you wanted to add another type (or 2+) that is of the underlying structure `{rtype, elem *rtype}` then you have to add a vestigial (for want of a better word) field with a unique name (and thus must know what all others have been created in this manor) to not potentially break the compiler, or your program.\r\n\r\nThis is not adding a defined behaviour to the language to create the functionality we want, it is relying on a side effect another feature of the language. This becomes more evident when you consider the case of defining types in normal programming that have the same underlying struct (which is different to the one above) but have different methods attached. To make sure they can't be converted between there is no documented feature of the language, you must use a side effect of a feature designed for storing data.",
	"user": {
		"login": "dionb",
		"id": 10458818,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-13T22:53:54Z",
	"updated_at": "2016-06-13T22:53:54Z"
}
