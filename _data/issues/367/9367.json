{
	"id": 52277707,
	"number": 9367,
	"state": "closed",
	"title": "proposal: support int(bool) conversions in Go.1.5 (language change)",
	"body": "I propose the following language change for Go 1.5:\r\n\r\nAn explicit conversion int(b) where b has a boolean type would become legal, and would yield 1 if b is true, 0 otherwise.  Similar conversions would be legal for all numeric types.\r\n\r\nRationale: currently this function cannot be computed in a single expression, despite it being often useful, hard to misuse, efficiently implemented by modern ALUs, present in nearly all other languages, and syntactically natural in Go.\r\n\r\nWhile I appreciate the value of avoiding implicit int/bool conversions, forbidding explicit ones seems slightly obtuse, and as a result of its omission, one must write four extra lines of code:\r\n\r\n var i int\r\n if b { \r\n     i = 1\r\n }\r\n ... i ...\r\n\r\nwhich the gc compiler does not optimize this into the obvious single instruction.\r\n\r\nThe reverse operation bool(i), is not essential since i != 0 has the same effect and can be used in an expression context, but could be added for symmetry.  (I have no strong opinion.)\r\n",
	"user": {
		"login": "alandonovan",
		"id": 8433140,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "LanguageChange"
		},
		{
			"name": "Proposal"
		},
		{
			"name": "Proposal-Declined"
		}
	],
	"assignee": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"comments": 17,
	"closed_at": "2015-09-25T05:04:15Z",
	"created_at": "2014-12-17T19:02:04Z",
	"updated_at": "2016-09-27T13:31:45Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
