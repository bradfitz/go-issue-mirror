{
	"id": 67381661,
	"body": "On 17 December 2014 at 14:38, Robert Griesemer \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e 1) It shouldn't be too hard for a compiler to recognize\n\u003e\n\u003e i := 0\n\u003e if b {\n\u003e i = 1\n\u003e }\n\u003e\n\u003e and create the respective single instruction (or conditional bit set,\n\u003e depending on what happens with i, etc.)\n\u003e\n\u003e 2) It's trivial to define e.g.\n\u003e\n\u003e func bool2int(b bool) int {\n\u003e if b {\n\u003e return 1\n\u003e }\n\u003e return 0\n\u003e }\n\u003e\n\u003e where needed.\n\u003e\n\u003e 3) Together with 1), the bool2int function should become trivial code-wise\n\u003e and then should be inlineable, effectively giving you int(b).\n\u003e\n\u003e 4) There may still be merit in conversions of bools to numeric values, but\n\u003e using a helper function for now should get you almost all the way there.\n\u003e The rest is optimization.\n\u003e\n\nThe question is: would you prefer to read just this \"int(x.f \u003e 0)\", or four\nlines of statements inconveniently breaking up a long expression?\nMy assertion is that the status quo is both less readable *and* less\nefficient.",
	"user": {
		"login": "alandonovan",
		"id": 8433140,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-17T19:48:37Z",
	"updated_at": "2014-12-17T19:48:37Z"
}
