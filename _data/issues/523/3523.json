{
	"id": 51280745,
	"number": 3523,
	"state": "closed",
	"title": "time: Parse with RFC3339Nano should accept nanoseconds",
	"body": "\u003cpre\u003eI think we should make 05.999 accept fractional\nseconds the same way that 05 does.\n\n---------- Forwarded message ----------\nFrom: Jonathan Gold \u0026lt;jgold.bg@gmail.com\u0026gt;\nDate: Wed, Apr 11, 2012 at 10:42\nSubject: [go-nuts] Time parsing surprise -- worth a doc clarification?\nTo: golang-nuts@googlegroups.com\n\nI was surprised to find that a string generated by time.Format() using layout\ntime.RFC3339Nano would not successfully parse using time.Parse() with that same\nlayout, but that it would parse using layout time.RFC3339 (sans \u0026quot;Nano\u0026quot;).\n\nAfter digging deeper into the docs though I understood why:\n\n   // A decimal point followed by one or more zeros represents a fractional\n   // second, printed to the given number of decimal places.  A decimal point\n   // followed by one or more nines represents a fractional second, printed to\n   // the given number of decimal places, with trailing zeros removed.\n   // When parsing (only), the input may contain a fractional second\n   // field immediately after the seconds field, even if the layout does not\n   // signify its presence. In that case a decimal point followed by a maximal\n   // series of digits is parsed as a fractional second.\n\nSo, I grant that the library is correct (and awesome!), but found it nontheless\ncounterintuitive in this regard.  Can I submit a patch to the docs above,\nperhaps amending them something like:\n\n   ...\n   // signify its presence. In that case a decimal point followed by a maximal\n   // series of digits is parsed as a fractional second.\n   //\n   // Note that this may lead to some subtle behaviors. In particular, a string\n   // generated by time.Format() using some layout may not parse using that\n   // same layout. For example, the layout time.RFC3339Nano uses the fractional\n   // second specifier .999999999, which will generate a fractional string\n   // .012345 for a time instance with 12345000 nanoseconds (note that trailing\n   // zeroes are dropped), but this will not parse using that same layout.\n   // It will however parse using time.RFC3339, which tolerates and correctly\n   // parses the variable-length fraction string .012345.\n\njonathan\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:18:29Z",
	"created_at": "2012-04-13T21:15:45Z",
	"updated_at": "2016-06-24T22:17:48Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
