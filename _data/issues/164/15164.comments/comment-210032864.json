{
	"id": 210032864,
	"body": "Thinking out loud, there are at least three options for binary search over `struct { a, b int8 }`:\r\n\r\n* Use unsafe.Pointer and treat as `uint16`. Given what this does to the backend (see #15303), this superficially appealing option is probably not a winner.\r\n* Decompose and treat a and b separately. This is simple, and it is obvious how to extend it, but comparisons now require multiple cmps and jmps.\r\n* Calculate `a \u003c\u003c 8 | b` and use that. This complicates things, because it means that the constant and non-constant cases potentially diverge--constant cases use an OR value, non-constant cases use the original value. It also only works for small, non-pointer structs.\r\n\r\nI'll do some experimenting.\r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-14T16:22:01Z",
	"updated_at": "2016-04-14T16:22:01Z"
}
