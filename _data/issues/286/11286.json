{
	"id": 89527531,
	"number": 11286,
	"state": "closed",
	"title": "runtime: SIGILL in runtime.mapassign1 unmarshalling large json document",
	"body": "With current tip (`go version devel +75ce330 Fri Jun 19 06:14:38 2015 +0000 darwin/amd64`), I see memory corruption issues when unmarshalling a large json document. Usually, I see `SIGILL`, sometimes just corrupted data. Tweaking the number of procs or garbage collection didn't seem to have reliable effects in either direction.\r\n\r\nMy test code is below. Unfortunately, I haven't been able to reduce the struct definition and the json document to something I'm comfortable sharing publicly so far.\r\n\r\nThe test works fine with go1.4.\r\n\r\nI'll keep trying to reduce the test case, but let me know if you have any other suggestions/questions.\r\n\r\n```\r\npackage campaigns\r\n\r\nimport (\r\n        \"encoding/json\"\r\n        \"fmt\"\r\n        \"io/ioutil\"\r\n        \"testing\"\r\n)\r\n\r\ntype ConfigState struct{\r\n...\r\n}\r\n\r\nfunc TestUnmarshal(t *testing.T) {\r\n        content, err := ioutil.ReadFile(\"campaigns_zero.json\")\r\n        if err != nil {\r\n                t.Error(err)\r\n        }\r\n\r\n        var cs []ConfigState\r\n        if err := json.Unmarshal(content, \u0026cs); err != nil {\r\n                t.Error(err)\r\n        }\r\n        for _, c := range cs {\r\n                fmt.Printf(\"campaign %q\", c.CampaignID) // prints garbage when no crash\r\n        }\r\n}\r\n```\r\n\r\n```\r\nSIGILL: illegal instruction\r\nPC=0x97da m=3\r\n\r\ngoroutine 8 [running]:\r\nruntime.mapassign1(0x2a1d80, 0xc8206c14d0, 0xc820a2f2d0, 0xc82002e068)\r\n\t/s/go/src/runtime/hashmap.go:446 +0x1fa fp=0xc8205e6b28 sp=0xc8205e6a80\r\nreflect.mapassign(0x2a1d80, 0xc8206c14d0, 0xc820a2f2d0, 0xc82002e068)\r\n\t/s/go/src/runtime/hashmap.go:955 +0x3f fp=0xc8205e6b50 sp=0xc8205e6b28\r\nreflect.Value.SetMapIndex(0x2a1d80, 0xc820a495f8, 0xd5, 0x2a3e80, 0xc820a2f2d0, 0x58, 0x2a2000, 0xc82002e068, 0xd5)\r\n\t/s/go/src/reflect/value.go:1469 +0x31a fp=0xc8205e6c00 sp=0xc8205e6b50\r\nencoding/json.(*decodeState).object(0xc820092000, 0x2a1d80, 0xc820a495f8, 0xd5)\r\n\t/s/go/src/encoding/json/decode.go:613 +0xe23 fp=0xc8205e6fa8 sp=0xc8205e6c00\r\nencoding/json.(*decodeState).value(0xc820092000, 0x2a1d80, 0xc820a495f8, 0xd5)\r\n\t/s/go/src/encoding/json/decode.go:289 +0x3bd fp=0xc8205e7080 sp=0xc8205e6fa8\r\nencoding/json.(*decodeState).object(0xc820092000, 0x33cb00, 0xc820a493b8, 0xd9)\r\n\t/s/go/src/encoding/json/decode.go:606 +0x1151 fp=0xc8205e7428 sp=0xc8205e7080\r\nencoding/json.(*decodeState).value(0xc820092000, 0x33cb00, 0xc820a493b8, 0xd9)\r\n\t/s/go/src/encoding/json/decode.go:289 +0x3bd fp=0xc8205e7500 sp=0xc8205e7428\r\nencoding/json.(*decodeState).array(0xc820092000, 0x2952a0, 0xc82000a2c0, 0xd7)\r\n\t/s/go/src/encoding/json/decode.go:440 +0xa6b fp=0xc8205e7708 sp=0xc8205e7500\r\nencoding/json.(*decodeState).value(0xc820092000, 0x2863c0, 0xc82000a2c0, 0x16)\r\n\t/s/go/src/encoding/json/decode.go:286 +0x3dd fp=0xc8205e77e0 sp=0xc8205e7708\r\nencoding/json.(*decodeState).unmarshal(0xc820092000, 0x2863c0, 0xc82000a2c0, 0x0, 0x0)\r\n\t/s/go/src/encoding/json/decode.go:150 +0x196 fp=0xc8205e78b8 sp=0xc8205e77e0\r\nencoding/json.Unmarshal(0xc8200e8000, 0x4e1750, 0x4e1950, 0x2863c0, 0xc82000a2c0, 0x0, 0x0)\r\n\t/s/go/src/encoding/json/decode.go:78 +0x12b fp=0xc8205e7928 sp=0xc8205e78b8\r\nrealzeit.io/rtb/util/campaigns.TestUnmarshal(0xc8200b6090)\r\n\t/go/src/realzeit.io/rtb/util/campaigns/unmarshal_test.go:17 +0x1c0 fp=0xc8205e7f48 sp=0xc8205e7928\r\ntesting.tRunner(0xc8200b6090, 0x556030)\r\n\t/s/go/src/testing/testing.go:455 +0x98 fp=0xc8205e7f80 sp=0xc8205e7f48\r\nruntime.goexit()\r\n\t/s/go/src/runtime/asm_amd64.s:1691 +0x1 fp=0xc8205e7f88 sp=0xc8205e7f80\r\ncreated by testing.RunTests\r\n\t/s/go/src/testing/testing.go:560 +0x86d\r\n\r\ngoroutine 1 [chan receive]:\r\ntesting.RunTests(0x4445c0, 0x556030, 0x1, 0x1, 0xc800000001)\r\n\t/s/go/src/testing/testing.go:561 +0x8ad\r\ntesting.(*M).Run(0xc82003df08, 0xc8200e25e8)\r\n\t/s/go/src/testing/testing.go:493 +0x70\r\nmain.main()\r\n\trealzeit.io/rtb/util/campaigns/_test/_testmain.go:54 +0x116\r\n\r\ngoroutine 17 [syscall, locked to thread]:\r\nruntime.goexit()\r\n\t/s/go/src/runtime/asm_amd64.s:1691 +0x1\r\n\r\ngoroutine 7 [chan receive]:\r\ngithub.com/golang/glog.(*loggingT).flushDaemon(0x55e3e0)\r\n\t/go/src/github.com/golang/glog/glog.go:879 +0x67\r\ncreated by github.com/golang/glog.init.1\r\n\t/go/src/github.com/golang/glog/glog.go:410 +0x297\r\n\r\nrax    0x0\r\nrbx    0x0\r\nrcx    0x2fb8e8bb4121f470\r\nrdx    0xc820074300\r\nrdi    0xc8206c14d0\r\nrsi    0xc81fffcac5\r\nrbp    0x2fb8e8bb4121f470\r\nrsp    0xc8205e6a80\r\nr8     0x2ed3e\r\nr9     0xf1\r\nr10    0x0\r\nr11    0x0\r\nr12    0x1a\r\nr13    0x444058\r\nr14    0x8\r\nr15    0x0\r\nrip    0x97da\r\nrflags 0x10293\r\ncs     0x2b\r\nfs     0x0\r\ngs     0x0\r\nexit status 2\r\n```\r\n",
	"user": {
		"login": "robx",
		"id": 132113,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 12,
	"closed_at": "2015-06-23T18:37:30Z",
	"created_at": "2015-06-19T10:24:00Z",
	"updated_at": "2016-06-25T02:11:32Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
