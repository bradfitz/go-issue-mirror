{
	"id": 251832146,
	"body": "I'm sympathetic to the problem (there's many lazily initialized maps in go/types for instance, and it would be nice to not have to check first, before setting a value).\r\n\r\nThat said, I don't like to combine this with append. For one, it's not an \"append\", it's an \"insert\". Secondly, I'm not convinced it's just a bit of syntactic sugar:\r\n```go\r\nm = append(m, map[foo]bar{k: v}...)\r\n```\r\nrequires a bit more work than just syntax tree rewriting (which would be needed if it were just syntactic sugar). The 2nd argument to append is a map value that needs to be evaluated - I doubt we want to recognize that entire pattern. What if we used a map name? Do the maps have to be identical in type? (doesn't make sense, it's only about keys and values). I think there's more happening here than meets the eye, certainly more than what one would expect from syntactic sugar.\r\n\r\nFurthermore, there's quite a bit of extra spec language needed to make this happen, it seems. I don't think that extra complexity carries its weight.\r\n\r\nAs is stands, I am not in favor of this proposal.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 3,
		"+1": 3
	},
	"created_at": "2016-10-05T23:50:53Z",
	"updated_at": "2016-10-05T23:50:53Z"
}
