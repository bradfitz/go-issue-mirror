{
	"id": 251830301,
	"body": "@jimmyfrasche \r\n\r\n\u003e What value would this have outside of using `append` on maps?\r\n\r\nVery little.  Making `append` work with maps is pretty much the point.\r\n\r\n\u003e Making it easier to use a function that takes a ...struct{K; V} with K hashable.\r\n\r\nTechnically yes, but I would hope not to see much (if any) code of that form.  (Most structs should have named fields rather than anonymous ones.)\r\n\r\n\u003e Otherwise, a merge built in would seem more sensible, but, unlike append, it's easy to write for a fixed pair of key, value types: https://play.golang.org/p/t3HotPePo9\r\n\r\nThat's *much* less efficient than the proposed semantics, especially given that the compiler could optimize literals with \"append\" to avoid intermediate allocations.\r\n\r\nA hand-rolled equivalent would be closer to:  https://play.golang.org/p/PAkqDYq7V5\r\n\r\n----\r\n\r\nThe \"easy to write\" helper-function you propose is not much more difficult for the existing `append` for slices, modulo reallocating slices being a bit clunkier than reallocating maps: https://play.golang.org/p/ca5oQ2xMVs\r\n\r\nAnd yet, we have `append` for slices: it makes the code simpler, less error-prone, and more efficient.",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-05T23:38:33Z",
	"updated_at": "2016-10-05T23:38:33Z"
}
