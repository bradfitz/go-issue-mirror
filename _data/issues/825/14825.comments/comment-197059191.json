{
	"id": 197059191,
	"body": "\u003e Since sz is unsigned though, I think the last two shifts are just a no-op\nin this case. I'll look into that.\n\nThanks Todd, this is the case I was wondering about.\n\nOn Wed, Mar 16, 2016 at 9:52 AM, Todd \u003cnotifications@github.com\u003e wrote:\n\n\u003e Sure, I can take it, but we already have a rule that would undo an AND\n\u003e created from the last two shifts since it's several bytes shorter:\n\u003e\n\u003e func foo_ssa(x uint64) uint64 {\n\u003e         return x \u0026 0x3fffFFFFffffFFFF\n\u003e }\n\u003e\n\u003e Tip\n\u003e         0x0000 00000 (/tmp/m.go:4)      MOVQ    \"\".x+8(FP), AX\n\u003e         0x0005 00005 (/tmp/m.go:4)      SHLQ    $2, AX\n\u003e         0x0009 00009 (/tmp/m.go:4)      SHRQ    $2, AX\n\u003e         0x000d 00013 (/tmp/m.go:4)      MOVQ    AX, \"\".~r1+16(FP)\n\u003e         0x0012 00018 (/tmp/m.go:4)      RET\n\u003e\n\u003e vs:\n\u003e\n\u003e         0x0000 00000 (/tmp/m.go:4)      MOVQ    \"\".x+8(FP), BP\n\u003e         0x0005 00005 (/tmp/m.go:4)      MOVQ    $4611686018427387903, BX\n\u003e         0x000f 00015 (/tmp/m.go:4)      ANDQ    BP, BX\n\u003e         0x0012 00018 (/tmp/m.go:4)      MOVQ    BX, \"\".~r1+16(FP)\n\u003e         0x0017 00023 (/tmp/m.go:4)      RET\n\u003e\n\u003e Since sz is unsigned though, I think the last two shifts are just a no-op\n\u003e in this case. I'll look into that.\n\u003e\n\u003e â€”\n\u003e You are receiving this because you authored the thread.\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/14825#issuecomment-197058593\u003e\n\u003e\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-15T22:55:38Z",
	"updated_at": "2016-03-15T22:55:38Z"
}
