{
	"id": 51279753,
	"number": 2825,
	"state": "closed",
	"title": "spec: clarify blocking / racing behavior of close on a channel",
	"body": "\u003cpre\u003eDoing a code review, I went to consult the spec on the behavior of close on a buffered\nchannel to see whether it would block.\n\nThe spec says nothing (problem #1), but the results of a test were even weirder:\n\npackage foo\n\nimport (\n        \u0026quot;testing\u0026quot;\n        \u0026quot;time\u0026quot;\n)\n\nfunc TestCloseDoesntBlock(t *testing.T) {\n        c := make(chan int)\n        close(c)\n        t.Logf(\u0026quot;close didn't block on buffered channel\u0026quot;)\n}\n\nfunc TestCloseAfterSend(t *testing.T) {\n        c := make(chan int)\n\n        // Start a goroutine that's forever blocked in a send.\n\tgo func() {\n                println(\u0026quot;pre-send\u0026quot;)\n                c \u0026lt;- 1 // should block forever\n        }()\n\n        closedc := make(chan bool, 1)\n        time.AfterFunc(500 * time.Millisecond, func() {\n\t\tprintln(\u0026quot;pre-close\u0026quot;)\n                close(c)\n\t\tprintln(\u0026quot;post-close\u0026quot;)\n                closedc \u0026lt;- true\n        })\n\n        select {\n        case \u0026lt;-time.After(time.Second):\n                t.Logf(\u0026quot;the close blocked\u0026quot;)\n        case \u0026lt;-closedc:\n                t.Logf(\u0026quot;the close didn't block\u0026quot;)\n        }\n}\n\n\n\n go test -v\n=== RUN TestCloseDoesntBlock\n--- PASS: TestCloseDoesntBlock (0.00 seconds)\n\tx_test.go:11: close didn't block on buffered channel\n=== RUN TestCloseAfterSend\npre-send\npre-close\npost-close\npanic: runtime error: send on closed channel\n\ngoroutine 4 [running]:\nfoo._func_001(0xf84001c0f0, 0x0)\n\t/usr/local/google/home/bradfitz/go/src/cmd/foo/x_test.go:20 +0x53\ncreated by foo.TestCloseAfterSend\n\t/usr/local/google/home/bradfitz/go/src/cmd/foo/x_test.go:21 +0x67\n\ngoroutine 1 [chan receive]:\ntesting.RunTests(0x400c00, 0x542ca0, 0x200000002, 0x1, 0x540dc8, ...)\n\t/usr/local/google/home/bradfitz/go/src/pkg/testing/testing.go:330 +0x791\ntesting.Main(0x400c00, 0x542ca0, 0x200000002, 0x54e990, 0x0, ...)\n\t/usr/local/google/home/bradfitz/go/src/pkg/testing/testing.go:265 +0x62\nmain.main()\n\t/tmp/go-build412875667/foo/_test/_testmain.go:45 +0x91\n\ngoroutine 3 [runnable]:\nfoo.TestCloseAfterSend(0xf840000d90, 0x28bb3348)\n\t/usr/local/google/home/bradfitz/go/src/cmd/foo/x_test.go:31 +0x1ca\ntesting.tRunner(0xf840000d90, 0x542cb8, 0x0, 0x0)\n\t/usr/local/google/home/bradfitz/go/src/pkg/testing/testing.go:254 +0x6f\ncreated by testing.RunTests\n\t/usr/local/google/home/bradfitz/go/src/pkg/testing/testing.go:329 +0x76e\n\ngoroutine 5 [syscall]:\ncreated by addtimer\n\t/usr/local/google/home/bradfitz/go/src/pkg/runtime/ztime_amd64.c:68\nexit status 2\nFAIL\tfoo\t0.505s\n\n\n\n\n... notice how the send happens first, and doesn't crash then, but then the close\nsucceeds fine, and the sending goroutine is re-scheduled and crashes again then.\n\nIs this documented and/or correct?\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2014-12-08T10:14:56Z",
	"created_at": "2012-01-31T23:55:04Z",
	"updated_at": "2016-06-24T21:24:59Z",
	"milestone": {
		"id": 1061233,
		"number": 7,
		"title": "Go1"
	}
}
