{
	"id": 66084882,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eHere's the same test case with simpler, hopefully less confusing names):\n\n// file p0.go -----------------------\n\npackage p0\n\ntype T0 interface {\n\tm0()\n}\n\ntype S0 struct{}\n\nfunc (S0) m0() {}\n\n\n// file p1.go -----------------------\n\npackage p1\n\nimport \"./p0\"\n\ntype T1 interface {\n\tp0.T0\n\tm1()\n}\n\ntype S1 struct {\n\tp0.S0\n}\n\nfunc (S1) m1() {}\n\nfunc NewT0() p0.T0 {\n\treturn S1{}\n}\n\nfunc NewT1() T1 {\n\treturn S1{}\n}\n\n\n// file p2.go -----------------------\n\npackage main\n\nimport (\n\t\"./p0\"\n\t\"./p1\"\n)\n\nvar (\n\t_ p0.T0 = p0.S0{}\n\t_ p0.T0 = p1.S1{}\n\t_ p0.T0 = p1.NewT0()\n\t_ p0.T0 = p1.NewT1() // same as p1.S1{}\n)\n\nfunc main() {}\n\n\nAssuming all these files in the same directory, compiling as follows leads to the error:\n\n$ go tool 6g p0.go \u0026\u0026 go tool 6g p1.go \u0026\u0026 go tool 6g p2.go\np2.go:12: cannot use p1.NewT1() (type p1.T1) as type p0.T0 in assignment:\n\tp1.T1 does not implement p0.T0 (missing p0.m0 method)\n\nThis is clearly a bug in gc.\n\n(+steveharris@google.com: export information for the compiler must include all methods,\neven if they are not accessible (\"not exported\") by name directly.\u003c/pre\u003e\n\n_Labels changed: added **compilerbug**._",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-29T19:02:58Z",
	"updated_at": "2014-12-08T10:34:38Z"
}
