{
	"id": 51284163,
	"number": 5770,
	"state": "closed",
	"title": "go.tools/go/types: nil pointer dereference for unknown types in struct definitions",
	"body": "\u003cpre\u003eChecking a file with a struct definition that makes use of non-existent types causes a\nnil pointer dereference.\n\nWhat steps will reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n1. Download attached files demo.go and broken.go into the same directory\n2. go run demo.go\n3.\n\nWhat is the expected output?\nExpected handling of the error, not an internal panic\n\nWhat do you see instead?\nINTERNAL PANIC: runtime error: invalid memory address or nil pointer dereference\n\n(See attached log for complete stacktrace)\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g\n\nWhich operating system are you using?\n\n\nWhich version are you using?  (run 'go version')\ngo version devel +56909cb770fe Fri Jun 21 18:07:57 2013 -0700 linux/amd64\n\nPlease provide any additional information below.\nIn (*checker).callExpr, x.typ can be nil, which will cause typ to be nil. isUntyped(nil)\nresults in t, ok := typ.Underlying().(*Basic) and that's trying to call Underlying() on\nnil.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/5770/0/demo.go\"\u003edemo.go\u003c/a\u003e (358 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/5770/0/broken.go\"\u003ebroken.go\u003c/a\u003e (39 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/5770/0/log.log\"\u003elog.log\u003c/a\u003e (3783 bytes)",
	"user": {
		"login": "dominikh",
		"id": 39825,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2014-12-08T10:31:39Z",
	"created_at": "2013-06-24T19:28:58Z",
	"updated_at": "2016-06-24T22:43:14Z"
}
