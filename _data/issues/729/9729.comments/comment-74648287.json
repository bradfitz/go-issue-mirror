{
	"id": 74648287,
	"body": "I can reproduce it on your machine.\r\n\r\nI wrote the following program to investigate it.\r\nThere are 2 problems:\r\n1. The first is easier. We need to issue lfence/mfence before rdtsc. Without it rdtsc gives slightly skewed values even with synchronized clocks:\r\n\r\n```\r\n21-11: BROKEN 21949834462233 -\u003e 21949834462016 (diff=217)\r\n..\r\n21-13: BROKEN 21949862105390 -\u003e 21949862105216 (diff=174)\r\n.........................................\r\n23-11: BROKEN 21950170054450 -\u003e 21950170054299 (diff=151)\r\n```\r\n\r\nBut diffs are never larger than ~250.\r\n\r\n2. The harder one. The machine has non-synchronized clocks:\r\n\r\n```\r\n30-28: BROKEN 4421327030055133 -\u003e 4421326924776785 (diff=105278348)\r\n.\r\n30-29: BROKEN 4421327045449761 -\u003e 4421326927940720 (diff=117509041)\r\n..\r\n31-1: BROKEN 4421327005789964 -\u003e 4421326997345549 (diff=8444415)\r\n.\r\n31-2: BROKEN 4421327024981920 -\u003e 4421327022851416 (diff=2130504)\r\n.\r\n31-3: BROKEN 4421327044067804 -\u003e 4421327020646358 (diff=23421446)\r\n.\r\n31-4: BROKEN 4421327062301860 -\u003e 4421327047504514 (diff=14797346)\r\n```\r\n\r\nI hoped this problem is left in stone age. Linux must do its best to synchronize clocks today, so maybe it's bad BIOS or processor microcode.\r\n\r\n```c\r\n#define _GNU_SOURCE\r\n#include \u003cstdio.h\u003e\r\n#include \u003cstdlib.h\u003e\r\n#include \u003cstdint.h\u003e\r\n#include \u003cpthread.h\u003e\r\n#include \u003csched.h\u003e\r\n#include \u003cerrno.h\u003e\r\n\r\nvoid* thr(void *arg);\r\nuint64_t sig, ticks0, ticks1;\r\n\r\nint main() {\r\n\tcpu_set_t mask0;\r\n\tif (sched_getaffinity(0, sizeof(mask0), \u0026mask0)) {\r\n\t\tperror(\"sched_getaffinity\");\r\n\t\texit(1);\r\n\t}\r\n\tint i;\r\n\tfor (i = 0; i \u003c CPU_SETSIZE; i++) {\r\n\t\tif (!CPU_ISSET(i, \u0026mask0))\r\n\t\t\tbreak;\r\n\t\tint j;\r\n\t\tfor (j = 0; j \u003c CPU_SETSIZE; j++) {\r\n\t\t\tif (i == j || !CPU_ISSET(j, \u0026mask0))\r\n\t\t\t\tbreak;\r\n\t\t\tprintf(\".\");\r\n\t\t\tfflush(0);\r\n\t\t\tsig = ticks0 = ticks1 = 0;\r\n\r\n\t\t\tpthread_t th[2];\r\n\t\t\tpthread_attr_t attr[2];\r\n\t\t\tcpu_set_t mask[2];\r\n\r\n\t\t\tCPU_ZERO(\u0026mask[0]);\r\n\t\t\tCPU_SET(i, \u0026mask[0]);\r\n\t\t\tpthread_attr_init(\u0026attr[0]);\r\n\t\t\tpthread_attr_setaffinity_np(\u0026attr[0], sizeof(attr[0]), \u0026mask[0]);\r\n\t\t\tpthread_create(\u0026th[0], \u0026attr[0], thr, (void*)1);\r\n\r\n\t\t\tCPU_ZERO(\u0026mask[1]);\r\n\t\t\tCPU_SET(j, \u0026mask[1]);\r\n\t\t\tpthread_attr_init(\u0026attr[1]);\r\n\t\t\tpthread_attr_setaffinity_np(\u0026attr[1], sizeof(mask[1]), \u0026mask[1]);\r\n\t\t\tpthread_create(\u0026th[1], \u0026attr[1], thr, 0);\r\n\r\n\t\t\tpthread_join(th[0], 0);\r\n\t\t\tpthread_join(th[1], 0);\r\n\t\t\tpthread_attr_destroy(\u0026attr[0]);\r\n\t\t\tpthread_attr_destroy(\u0026attr[1]);\r\n\r\n\t\t\tif (ticks0 != 0)\r\n\t\t\t\tprintf(\"\\n%d-%d: BROKEN %lu -\u003e %lu (diff=%lu)\\n\", i, j, ticks0, ticks1, ticks0 - ticks1);\r\n\t\t}\r\n\t}\r\n\tprintf(\"\\n\");\r\n\treturn 0;\r\n}\r\n\r\nuint64_t cputicks() {\r\n\tuint64_t low, high;\r\n\t__asm__ __volatile__(\"lfence; rdtsc\" : \"=a\" (low), \"=d\" (high));\r\n\treturn (high \u003c\u003c 32) | low;\r\n}\r\n\r\nvoid* thr(void *arg) {\r\n\tint i;\r\n\tfor (i = 0; i \u003c 10000; i++) {\r\n\t\tif (arg != 0) {\r\n\t\t\tuint64_t t0 = cputicks();\r\n\t\t\t__atomic_store_n(\u0026sig, 1, __ATOMIC_RELEASE);\r\n\t\t\twhile (__atomic_load_n(\u0026sig, __ATOMIC_RELAXED) == 1) {\r\n\t\t\t}\r\n\t\t\tuint64_t t1 = __atomic_load_n(\u0026sig, __ATOMIC_ACQUIRE);\r\n\t\t\tif (t1 \u003c= t0) {\r\n\t\t\t\tticks0 = t0;\r\n\t\t\t\tticks1 = t1;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\twhile (__atomic_load_n(\u0026sig, __ATOMIC_ACQUIRE) != 1) {\r\n\t\t\t}\r\n\t\t\t__atomic_store_n(\u0026sig, cputicks(), __ATOMIC_RELEASE);\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n```",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-17T10:40:16Z",
	"updated_at": "2015-02-17T10:41:07Z"
}
