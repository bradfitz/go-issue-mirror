{
	"id": 66098146,
	"body": "\u003ca id=\"c18\"\u003e\u003c/a\u003eComment 18:\n\n\u003cpre\u003eIf you make 100 concurrent requests for a specific DNS hostname with a timeout, and the\nDNS lookup is slow, then by definition you will have 100 goroutines waiting for that DNS\nlookup to complete.  With the current implementation, if you set a deadline for the\nlookup, you will have an extra 100 goroutines waiting.  That is inefficient but it's not\ncrazily inefficient.\n\nYou're right, of course, that if a DNS lookup is slow, other requests for the same\nhostname will wait for the first lookup to complete.  And, in particular, if the program\nretries after a timeout it will get stuck waiting for the first lookup to complete.  I\nthink we can fix that problem.  How does \u003ca href=\"https://golang.org/cl/154610044\"\u003ehttps://golang.org/cl/154610044\u003c/a\u003e look\nto you?\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-10-21T18:21:40Z",
	"updated_at": "2014-12-08T10:47:45Z"
}
