{
	"id": 66083228,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3 by **sjbogdan**:\n\n\u003cpre\u003eMap doesn't have a \"canonical\" realization, thus it isn't much different from a\nclass/type.\n\n\u0026lt;code\u0026gt;\npackage main\n\nfunc main() {\n\tvar (\n\t\ta = 3\n\t\tb int\n\t)\n\t\n\tif a \u0026gt; 0 {\n\t\tb = 1.0\n\t} else {\n\t\tb = 0.0\n\t}\n\t\n\tprint ( b )\n}\n\u0026lt;/code\u0026gt;\n\ngo tool 6g -S 1.go \u0026gt; 1.asm\n\n\u0026lt;code\u0026gt;\n--- prog list \"main\" ---\n0000 (1.go:3) TEXT    main+0(SB),$8-0\n0001 (1.go:3) LOCALS  ,$0\n0002 (1.go:5) MOVQ    $3,AX\n0003 (1.go:9) CMPQ    AX,$0                     # stores result into compare register C0\n0004 (1.go:9) JLE     ,7                        # jumps to address 0007 if C0 true/false\n0005 (1.go:10) MOVQ    $1,AX\n0006 (1.go:9) JMP     ,8                        # direct jump to address 0008 ( almost\ngoto )\n0007 (1.go:12) MOVQ    $0,AX\n0008 (1.go:15) MOVQ    AX,(SP)\n0009 (1.go:15) CALL    ,runtime.printint+0(SB)\n0010 (1.go:16) RET     ,\n\u0026lt;/code\u0026gt;\n\nMap solution is 200 lines ( with map definition ), and is 15 lines \"map code\" instead of\n6-line \"if block\" with \"raw jumps\".\n----\n\n\u0026gt; The compiler could provide speed without new syntax just by generating better code.\nFrom the language user perspective neither solution 1) nor 2) introduces new syntax. Can\nyou explain what do you mean or how it will work ? What will compiler optimize ?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-02T10:10:31Z",
	"updated_at": "2014-12-22T06:27:26Z"
}
