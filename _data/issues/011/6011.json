{
	"id": 51284545,
	"number": 6011,
	"state": "open",
	"title": "cmd/compile: optimize code generation for typical bool-\u003eint conversion patterns",
	"body": "by **sjbogdan**:\n\n\u003cpre\u003eNeed a compiler level support for fast bool to numeric types ( int, byte, float )\nconversion.\n\nPossible syntax : var flag = false\n1) flag.( int )\n2) int ( flag )\n\nRight now, except for \u0026quot;if\u0026quot; blocks, there is no way to make a conversion.\nIt is important for high speed computing with \u0026quot;bit magic\u0026quot;.\n\nClassic example ( pseudo code ) :\n\nif a \u0026gt; 0 {\n  b = sin ( a )\n} else {\n  b = 0.0\n}\n\nCompiler would generate a faster (virtual) assembly code with ( because there won't be\njmp* commands ) :\n\nb = ( a \u0026gt; 0 ).( float64 )  *  sin ( a )\n\n\nThe conversion should be cheap \u0026amp; fast, thus I though about interface-like type\ntransition. The values are always 0 or 1, which might be hardcoded into numeric types\ndefinition.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"comments": 26,
	"created_at": "2013-08-01T18:58:28Z",
	"updated_at": "2016-10-17T19:08:39Z",
	"milestone": {
		"id": 2053058,
		"number": 49,
		"title": "Go1.9"
	}
}
