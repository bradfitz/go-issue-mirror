{
	"id": 66048561,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2 by **autophile**:\n\n\u003cpre\u003eUnderstood. What I was trying to is equivalent to abstract classes in Java, where an\nabstract class X leaves out \nimplementations of the abstract methods x, y, z, but also provides implementations of a,\nb, and c (which call x, \ny, and z, and also may be overridden in subclasses). The assumption here would be that\nBaseObject is a partial \nimplementation, and the developer is expected to provide a struct which embeds\nBaseObject but also implements \nthe unimplemented methods.\n\nBased on your answer, would there be no alternative to declaring an interface containing\nx, y, z, a, b, and c, and \nalso a struct containing default implementations of all 6 methods?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-11-15T22:10:11Z",
	"updated_at": "2014-12-08T10:03:40Z"
}
