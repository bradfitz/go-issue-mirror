{
	"id": 130588431,
	"body": "@ianlancetaylor \r\n\u003e resolve it by implementing your own syscall.Mmap based memory allocator...\r\n\r\nYep. Of course it would be easier to use the existing allocator. But not only that. The intention is to, in the next step, be able to also produce (slower) code, which however is *not using* package `unsafe` and qualifies (some of) the translated C libs to be used in restricted environments like the GAE/GCE.\r\n\r\nI don't have yet a working proof of concept for the 'next step', but so far I haven't figured out any other blocking issue - except for the pinning problem (only with future/other Go implementations). It *can* be worked around, but at the cost of slowing down the \"safe\" mode even more.\r\n\r\nDon't get me wrong, I'm not really pushing for the pinning feature. I *am* asking for it, but please read it as a request for it to be considered and if seen fit for future implementation, then its specification should be, IMO, part of the rules @rsc asked to be defined in this issue.\r\n\r\nWhile I do agree that the implementation might be complex, there exist GC languages which support pinning, proving it's feasible.\r\n\r\n@dr2chase \r\nI have no access to the Owicki's paper. Maybe her technique is the same as discussed elsewhere?\r\n\r\n\u003e ... if you write code that (you think) avoids a heap allocation for something you pass to C ...\r\n\r\nWhat I am trying to do does not use cgo/does not pass things to C.",
	"user": {
		"login": "cznic",
		"id": 729580,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-13T09:20:04Z",
	"updated_at": "2015-08-13T09:20:04Z"
}
