{
	"id": 218500051,
	"body": "I think the OpenBSD support story is already reasonably well defined - as you note, OpenBSD only officially supports two releases (the current release and the past release - for now, 5.9 and 5.8). Since the Go openbsd port has existed, we've always targeted and attempted to support the same releases. Many of the Go impacting changes made in OpenBSD have also been done in such a way that this has been possible. As far as I recall, there has only been one case in the past 5 years where this has not been possible (the 64-bit time_t conversion), at which point Go has only supported the most current release.\r\n\r\nAt this stage I see no reason to diverge from this approach. The syscall package is the only area that I don't have a good answer for - we're largely stuck with that due to the Go API promise.\r\n\r\n\u003e But once OpenBSD does implement PT_TLS, we'll need to change both cmd/link and runtime/cgo, and there will be no way to produce a single Go executable that runs on both pre- and post-PT_TLS OpenBSD releases.\r\n\r\nThis is somewhat inaccurate - I have a single Go runtime that will work both pre-PT_TLS and post-PT_TLS, however the linked binary is dependent on a version of libpthread that is specific to a particular release, so it will fail to load libpthread if compiled on 5.9 and then  run on 5.8 (same goes if you compile on 5.8 and run on pristine 5.9). If you upgraded from 5.8 to 5.9 and have the libraries from 5.8 available, it will would likely be possible to run a Go binary compiled on 5.8. That said, binary compatibility is not what OpenBSD targets and is not really what Go should be aiming for here. Having a Go release (e.g. 1.7) that works on both 5.9 (pre-PT_TLS) and 6.0 (post-PT_TLS) is what we want to achieve (and that's possible to do).",
	"user": {
		"login": "4a6f656c",
		"id": 8142769,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-11T15:43:13Z",
	"updated_at": "2016-05-11T15:43:13Z"
}
