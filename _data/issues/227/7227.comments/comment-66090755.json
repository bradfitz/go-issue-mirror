{
	"id": 66090755,
	"body": "\u003ca id=\"c20\"\u003e\u003c/a\u003eComment 20:\n\n\u003cpre\u003eSorry I was referring to the 2, which is indeed SIGINT, don't know where I got SYS_WRITE\nfrom.\n\nGDB 7.6.2 has been close to useless for me, but LLDB appears to be able to do proper\nsymbol lookup for backtraces and setting breakpoints in for example sigaction. With the\nhelp of lldb I've been able to track down that the actual signal that we are receiving\nis neither SIGINT nor SIGABRT, but SIGCHLD when the process exits which makes a lot more\nsense.\n\nThe specifics of registers, callstack and reason for stopping differs from run to run,\nbut I think the important thing here is to note that the address Go complains about\n\"runtime: unexpected return pc for runtime.sighandler called from 0x7fff8aee85aa\"\nmatches up with \"libsystem_platform.dylib`_sigtramp\", and the argument confusion as\nreported in the GO traceback (or the EXC_BAD_ACCESS as reported in the attached\nlldb.txt) is likely a side effect of mismatched signal handler expectations.\n\nGuess what the one and only sigaction backtrace caught by lldb leads to?\n\u003ca href=\"https://qt.gitorious.org/qt/qt/source/663b742ca8b289e6456facf8b6a8ca18a4157fb7:src/corelib/io/qprocess_unix.cpp#L224\"\u003ehttps://qt.gitorious.org/qt/qt/source/663b742ca8b289e6456facf8b6a8ca18a4157fb7:src/corelib/io/qprocess_unix.cpp#L224\u003c/a\u003e\n\nIt's not the only one *possible* though:\n\n17:24 ~/code/3rdparty/qt5/qtbase/src $ ag sigaction\ncorelib/io/qprocess_unix.cpp\n123:static struct sigaction qt_sa_old_sigchld_handler;\n124:static void qt_sa_sigchld_sigaction(int signum, siginfo_t *info, void *context)\n139:    volatile struct sigaction *vsa = \u0026qt_sa_old_sigchld_handler;\n142:        void (*oldAction)(int, siginfo_t *, void *) = vsa-\u0026gt;sa_sigaction;\n218:    struct sigaction action;\n222:    ::sigaction(SIGCHLD, NULL, \u0026action);\n223:    action.sa_sigaction = qt_sa_sigchld_sigaction;\n227:    ::sigaction(SIGCHLD, \u0026action, \u0026qt_sa_old_sigchld_handler);\n249:    struct sigaction currentAction;\n250:    ::sigaction(SIGCHLD, 0, \u0026currentAction);\n251:    if (currentAction.sa_sigaction == qt_sa_sigchld_sigaction) {\n252:        ::sigaction(SIGCHLD, \u0026qt_sa_old_sigchld_handler, 0);\n1447:        struct sigaction noaction;\n1450:        ::sigaction(SIGPIPE, \u0026noaction, 0);\n1489:            struct sigaction noaction;\n1492:            ::sigaction(SIGPIPE, \u0026noaction, 0);\n1500:            struct sigaction noaction;\n1503:            ::sigaction(SIGPIPE, \u0026noaction, 0);\n\ncorelib/kernel/qcore_unix_p.h\n156:        struct sigaction noaction;\n159:        ::sigaction(SIGPIPE, \u0026noaction, 0);\n\ncorelib/kernel/qcrashhandler.cpp\n413:    struct sigaction SignalAction;\n417:    sigaction(SIGSEGV, \u0026SignalAction, NULL);\n418:    sigaction(SIGBUS, \u0026SignalAction, NULL);\n\ncorelib/kernel/qfunctions_nacl.cpp\n118:int sigaction(int, const struct sigaction *, struct sigaction *)\n\ncorelib/kernel/qfunctions_nacl.h\n79:int sigaction(int sig, const struct sigaction * act, struct sigaction * oact);\n\ntestlib/qtestcase.cpp\n2009:        struct sigaction act;\n2010:        memset(\u0026act, 0, sizeof(struct sigaction));\n2012:        sigaction(signum, \u0026act, NULL);\n2024:    struct sigaction act;\n2038:    struct sigaction oldact;\n2041:        sigaction(fatalSignals[i], \u0026act, \u0026oldact);\n2047:            sigaction(fatalSignals[i], \u0026oldact, 0);\n2059:    struct sigaction act;\n2063:    struct sigaction oldact;\n2068:        sigaction(i, \u0026act, \u0026oldact);\n2072:            sigaction(i, \u0026oldact, 0);\n\n\nIf I understand\n\u003ca href=\"https://qt.gitorious.org/qt/qt/source/663b742ca8b289e6456facf8b6a8ca18a4157fb7:src/corelib/io/qprocess_unix.cpp#L131\"\u003ehttps://qt.gitorious.org/qt/qt/source/663b742ca8b289e6456facf8b6a8ca18a4157fb7:src/corelib/io/qprocess_unix.cpp#L131\u003c/a\u003e\ncorrectly, it tries to be good and call the old handler.\n\nBacktrace for __sigaltstack comes from some code in CarbonCore making use of setjmp:\n\n(lldb) b __sigaltstack\nBreakpoint 2: where = libsystem_kernel.dylib`__sigaltstack, address = 0x0000000000015c58\n(lldb) r\nProcess 54319 launched: './main' (x86_64)\nProcess 54319 stopped\n* thread #1: tid = 0xf6a1b, 0x00007fff8ea9fc58 libsystem_kernel.dylib`__sigaltstack,\nqueue = 'com.apple.main-thread, stop reason = breakpoint 2.1\n    frame #0: 0x00007fff8ea9fc58 libsystem_kernel.dylib`__sigaltstack\nlibsystem_kernel.dylib`__sigaltstack:\n-\u0026gt; 0x7fff8ea9fc58:  movl   $33554485, %eax\n   0x7fff8ea9fc5d:  movq   %rcx, %r10\n   0x7fff8ea9fc60:  syscall\n   0x7fff8ea9fc62:  jae    0x7fff8ea9fc6c            ; __sigaltstack + 20\n(lldb) bt\n* thread #1: tid = 0xf6a1b, 0x00007fff8ea9fc58 libsystem_kernel.dylib`__sigaltstack,\nqueue = 'com.apple.main-thread, stop reason = breakpoint 2.1\n    frame #0: 0x00007fff8ea9fc58 libsystem_kernel.dylib`__sigaltstack\n    frame #1: 0x00007fff8aee852c libsystem_platform.dylib`setjmp + 48\n(lldb) b setjmp\nBreakpoint 4: where = libsystem_platform.dylib`setjmp, address = 0x00007fff8aee84fc\n(lldb) r\nThere is a running process, kill it and restart?: [Y/n] y\nProcess 54322 launched: './main' (x86_64)\nProcess 54322 stopped\n* thread #1: tid = 0xf6a72, 0x00007fff8aee84fc libsystem_platform.dylib`setjmp, queue =\n'com.apple.main-thread, stop reason = breakpoint 4.1\n    frame #0: 0x00007fff8aee84fc libsystem_platform.dylib`setjmp\nlibsystem_platform.dylib`setjmp:\n-\u0026gt; 0x7fff8aee84fc:  pushq  %rdi\n   0x7fff8aee84fd:  movl   $1, %edi\n   0x7fff8aee8502:  xorq   %rsi, %rsi\n   0x7fff8aee8505:  subq   $16, %rsp\n(lldb) bt\n* thread #1: tid = 0xf6a72, 0x00007fff8aee84fc libsystem_platform.dylib`setjmp, queue =\n'com.apple.main-thread, stop reason = breakpoint 4.1\n    frame #0: 0x00007fff8aee84fc libsystem_platform.dylib`setjmp\n    frame #1: 0x00007fff8ec0f208 CarbonCore`_sfInvokeFlipper + 71\n    frame #2: 0x00007fff8ec0eabb CarbonCore`CoreEndianFlipData + 121\n    frame #3: 0x00007fff8ec0e983 CarbonCore`GetResourcePtrCommon + 506\n    frame #4: 0x00007fff8ec11b28 CarbonCore`RMGetIndexedResource + 42\n    frame #5: 0x00007fff8d56ceec libFontParser.dylib`TResourceForkFileReference::GetIndexedResource(unsigned int, unsigned int, short*, unsigned long*, unsigned char*) const + 54\n    frame #6: 0x00007fff8d56ce76 libFontParser.dylib`TResourceFileDataReference::TResourceFileDataReference(TResourceForkSurrogate const\u0026, unsigned int, unsigned int) + 158\n    frame #7: 0x00007fff8d56cd66 libFontParser.dylib`TResourceFileDataSurrogate::TResourceFileDataSurrogate(TResourceForkSurrogate const\u0026, unsigned int, unsigned int) + 66\n    frame #8: 0x00007fff8d56655a libFontParser.dylib`TFont::CreateFontEntitiesForFile(char const*, bool, TSimpleArray\u0026lt;TFont*\u0026gt;\u0026, bool, short, char const*) + 598\n    frame #9: 0x00007fff8d565e1f libFontParser.dylib`FPFontCreateFontsWithPath + 253\n    frame #10: 0x00007fff87b4e1f4 libCGXType.A.dylib`create_private_data_with_path + 19\n    frame #11: 0x00007fff8b833569 CoreGraphics`CGFontCreateFontsWithPath + 40\n    frame #12: 0x00007fff8b83317e CoreGraphics`CGFontCreateFontsWithURL + 383\n    frame #13: 0x00007fff866145dc CoreText`CreateFontWithFontURL(__CFURL const*, bool) + 60\n    frame #14: 0x00007fff866143fb CoreText`TCGFontCache::CopyFont(__CFURL const*, bool) const + 91\n    frame #15: 0x00007fff86614225 CoreText`TBaseFont::CopyNativeFont() const + 69\n    frame #16: 0x00007fff866141a6 CoreText`TBaseFont::CopyGraphicsFont() const + 26\n    frame #17: 0x00007fff86613ebc CoreText`TBaseFont::CopyTable(unsigned int) const + 188\n    frame #18: 0x00007fff86617b91 CoreText`TBaseFont::GetCmapTable() const + 57\n    frame #19: 0x00007fff866179ca CoreText`TBaseFont::GetUnicodeEncoding() const + 58\n    frame #20: 0x00007fff866178ff CoreText`TBaseFont::GetGlyphsForCharacterRange(CFRange, unsigned short*) const + 39\n    frame #21: 0x00007fff86626ed2 CoreText`TBMPDataCachePage::TBMPDataCachePage(TBaseFont const\u0026, unsigned short) + 132\n    frame #22: 0x00007fff86626df4 CoreText`TBMPDataCache::PageForCharacter(unsigned short) const + 108\n    frame #23: 0x00007fff86626c35 CoreText`CTFontGetGlyphsForCharacters + 255\n    frame #24: 0x00007fff84e2423a AppKit`-[__NSFontTypefaceInfo _latin1MappingTableWithPlatformFont:hasKernPair:] + 336\n    frame #25: 0x00007fff84e24064 AppKit`-[NSFont _latin1MappingTable:] + 125\n    frame #26: 0x00007fff854587fa AppKit`+[NSStringDrawingTextStorage _fastDrawString:attributes:length:inRect:graphicsContext:baselineRendering:usesFontLeading:usesScreenFont:typesetterBehavior:paragraphStyle:lineBreakMode:boundingRect:padding:scrollable:baselineOffset:] + 895\n    frame #27: 0x00007fff84f41c92 AppKit`_NSStringDrawingCore + 1495\n    frame #28: 0x00007fff8506cbee AppKit`-[NSString(NSStringDrawing) drawInRect:withAttributes:] + 183\n    frame #29: 0x0000000006f586ef libqcocoa.dylib`QCoreTextFontDatabase::QCoreTextFontDatabase() + 1071\n    frame #30: 0x0000000006f07161 libqcocoa.dylib`QCocoaIntegration::QCocoaIntegration() + 49\n    frame #31: 0x0000000006f06004 libqcocoa.dylib`QCocoaIntegrationPlugin::create(QString const\u0026, QStringList const\u0026) + 148\n    frame #32: 0x0000000004e06306 QtGui`QPlatformIntegrationFactory::create(QString const\u0026, QStringList const\u0026, int\u0026, char**, QString const\u0026) + 198\n    frame #33: 0x0000000004e0fcc9 QtGui`QGuiApplicationPrivate::createPlatformIntegration() + 1257\n    frame #34: 0x0000000004e108ab QtGui`QGuiApplicationPrivate::createEventDispatcher() + 27\n    frame #35: 0x0000000005a37638 QtCore`QCoreApplication::init() + 104\n    frame #36: 0x0000000005a375b7 QtCore`QCoreApplication::QCoreApplication(QCoreApplicationPrivate\u0026) + 39\n    frame #37: 0x0000000004e0d968 QtGui`QGuiApplication::QGuiApplication(int\u0026, char**, int) + 200\n    frame #38: 0x00000000040029fe main`newGuiApplication + 46\n    frame #39: 0x0000000004066864 main`runtime.asmcgocall + 84\n\nAnyway, I'm rambling.\n\nSIGCHLD certainly would be considered a signal that can be moved to kqueue or similar,\nright?\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/7227/20/lldb.txt\"\u003elldb.txt\u003c/a\u003e (39290 bytes)",
	"user": {
		"login": "quarnster",
		"id": 1230389,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-02-01T16:37:59Z",
	"updated_at": "2014-12-22T06:32:07Z"
}
