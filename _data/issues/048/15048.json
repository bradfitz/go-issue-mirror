{
	"id": 144967258,
	"number": 15048,
	"state": "open",
	"title": "cmd/cgo: unexpected allocations when passing void pointers",
	"body": "1. What version of Go are you using (`go version`)? **go1.6**\r\n\r\n\r\n2. What operating system and processor architecture are you using (`go env`)? **linux/amd64**\r\n\r\n\r\n3. What did you do?\r\n\r\nI was helping to debug several unaccounted for allocations and we came across what we thought was very peculiar behavior. Consider the following two implementations of the same package\r\n\r\nhttp://play.golang.org/p/hC-b5VSG58\r\nhttp://play.golang.org/p/soCMGF1WjG\r\n\r\nAnd the following benchmark\r\n\r\nhttp://play.golang.org/p/e37ObBxwJP\r\n\r\n4. What did you expect to see?\r\n\r\nNeither implementation appears to allocate anything in the Foo function. So I expect `go test -bench` to report zero allocations for both implementations of the package.\r\n\r\n5. What did you see instead?\r\n\r\nFor the first example (hC-b5VSG58) the command `go test -bench=. -benchmem` reports two allocations (48 bytes total) when the C function is passed a non-nil argument.\r\n\r\n```\r\n$ go test -bench=. -benchmem\r\ntesting: warning: no tests to run\r\nPASS\r\nBenchmarkFoo-4           5000000               317 ns/op              48 B/op          2 allocs/op\r\nBenchmarkFoo_nil-4      10000000               164 ns/op               0 B/op          0 allocs/op\r\nok      github.com/bmatsuo/lmdb-go/tmp/cgo-allocs       3.718s\r\n```\r\n\r\nThe second example avoids any allocation.\r\n\r\n```\r\n$ go test -bench=. -benchmem\r\ntesting: warning: no tests to run\r\nPASS\r\nBenchmarkFoo-4          10000000               151 ns/op               0 B/op          0 allocs/op\r\nBenchmarkFoo_nil-4      10000000               151 ns/op               0 B/op          0 allocs/op\r\nok      github.com/bmatsuo/lmdb-go/tmp/cgo-allocs       3.345s\r\n```\r\n\r\nThe first example does see a performance impact, I assume because of the allocations.",
	"user": {
		"login": "bmatsuo",
		"id": 15089,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"created_at": "2016-03-31T17:34:35Z",
	"updated_at": "2016-03-31T20:50:49Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
