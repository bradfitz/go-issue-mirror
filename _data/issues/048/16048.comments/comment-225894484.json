{
	"id": 225894484,
	"body": "\u003e @ianlancetaylor, I hope the official docs can make it clear, for the offical gosdk, on which processor architectures and OSes, writes/reads scalar variable are atomic (or not), instead of a vague mention in a side article.\r\n\r\nYou didn't answer my question about what precisely you mean by \"atomic.\"  It's not a simple question.  For example, see http://en.cppreference.com/w/cpp/atomic/memory_order.  That level of detail is appropriate for C++, but it is not something we aim for in Go.  The Go guidelines try to be simple: use channels, use mutexes, use the sync/atomic package if you must.\r\n\r\n\u003e @ianlancetaylor and could you provide an example on x64 linux to show writes/reads scalar variable aren't atomic?\r\n\r\nNo, I can't, because 1) you haven't defined your terms; 2) x86 processors always use a strict memory ordering model so there are many race conditions that can not be demonstrated on x86 but can be demonstrated on, for example, ARM and PPC processors.  (Here is a pretty good paper on more relaxed memory models used on non-x86 processors: https://www.cl.cam.ac.uk/~pes20/ppc-supplemental/test7.pdf.)\r\n\r\nIn short, you are asking for something that is simple and we are telling you that it is complicated.  We are trying to make it simple by not answering your question, which would require many complex details, but instead addressing the overall issue at a higher level: use channels, use mutexes, use sync/atomic if you  must.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-14T14:14:50Z",
	"updated_at": "2016-06-14T14:14:50Z"
}
