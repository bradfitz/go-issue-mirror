{
	"id": 225634527,
	"body": "\"Atomic\" is a very overloaded word in this context.  What precisely do you mean?\r\n\r\nI think that the Go memory model, which you reference, already says what we want to say.  It \"specifies the conditions under which reads of a variable in one goroutine can be guaranteed to observe values produced by writes to the same variable in a different goroutine.\"  I don't see a reason to be more specific.\r\n\r\nYour example program only tells you what happens on one particular machine on one particular implementation.  Go is intentionally defined by a specification, not an implementation.  There are multiple implementations of Go, and even a single implementation behaves differently on different processors.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-13T16:29:04Z",
	"updated_at": "2016-06-13T16:29:04Z"
}
