{
	"id": 66095127,
	"body": "\u003ca id=\"c16\"\u003e\u003c/a\u003eComment 16:\n\n\u003cpre\u003eWe use the return address to look up the liveness bitmap not because that's where the\ncode was when it stopped but because that's where it will be when it continues. We don't\nneed proper liveness information for every program counter. We need proper information\nfor every possible program counter where execution may continue. Code may stop at any\nrandom place due to memory faults but it cannot restart there. It only starts at safe\npoints - call sites - because even a recovered panic shows up as a return from\nruntime.deferproc in the corresponding frame.\n\nIn the absence of any defer, a fault in a frame kills the frame entirely. It's important\nfor that frame to show up in runtime.Caller and in stack traces, but it's completely\ndead as far as liveness is concerned. It should not be considered for garbage\ncollection, and it would be fine not to consider it for stack copying either. If a frame\nhas issued a defer, then a fault in that frame kills the PC but not the entire frame. If\nanything, the frame will continue executing as if the most recent defer returned (or an\nearlier one, but the most recent one subsumes those as far as liveness information is\nconcerned).\n\nIn theory if there were ten frames in a row with no defers and the bottom-most one\nfaulted, then all ten are dead. But we don't actually need to be that precise, because\nthe top 9 are all stopped at plausible safe points that we can use. Strictly speaking\nonly the last frame needs special handling, and given where we are in the release cycle\nwe should introduce as little special handling as possible.\n\nThe g-\u003edefer list contains a sorted list of (argp, pc) pairs. If we see a sigpanic on\nthe stack, we know the frame above faulted, and we look on the Defer list for the last\nentry with that argp. If we find one, we use that pc. Otherwise we skip the frame\nentirely.\n\nAn active panic pops the current Defer - which may yet recover - before executing it,\nthough, so we need to be able to look for that one too. Right now that information is in\nlocal variables argp, pc in runtime.panic. We could move them into the Panic p variable\nin the same function, since that p is linked through the g-\u003epanic list. That would make\nthe information available to the traceback.\n\nIt should work, then, to make gentraceback walk the g-\u003edefer and g-\u003epanic lists at the\nsame time as it walks up the stack. If it sees a sigpanic, it checks the g-\u003epanic list\nand the g-\u003edefer list for an argp matching the frame above the sigpanic. If it finds\none, it reports that pc (in some new Stkframe field) for that frame, and the garbage\ncollector uses that pc to look up the liveness bitmap. If it does not find one, it\nreports a special pc (maybe ~0) for that frame, and then the garbage collector ignores\nthe frame entirely.\n\nDoes this sound plausible?\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-05-29T20:43:29Z",
	"updated_at": "2014-12-08T10:44:39Z"
}
