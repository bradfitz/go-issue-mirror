{
	"id": 126481369,
	"number": 13938,
	"state": "closed",
	"title": "crypto/ecdsa: the sign method on ecdsa.PrivateKey does not hash",
	"body": "The [sign function](https://github.com/golang/go/blob/70ee525261f7d8adbcf58c2cf54efb7e7efb1c82/src/crypto/ecdsa/ecdsa.go#L147) in `ecdsa` states the following: \r\n\r\n\u003eSign signs an arbitrary length hash (which should be the result of hashing a\r\nlarger message) using the private key, priv. It returns the signature as a\r\npair of integers. The security of the private key depends on the entropy of\r\nrand.\r\n\r\nHowever the [sign method](https://github.com/golang/go/blob/70ee525261f7d8adbcf58c2cf54efb7e7efb1c82/src/crypto/ecdsa/ecdsa.go#L70) on `ecdsa.PrivateKey` uses the msg directly rather than hashing it (and thus ignores the `crypto.SignerOpts`).\r\n\r\nEither the description of the sign function should be changed, or the sign method should perform hashing. I'm not sure what the motivation was for the particular type signature of the sign method but taking a `crypto.SignerOpts` that is ignored is misleading.",
	"user": {
		"login": "danielchatfield",
		"id": 1058676,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		}
	],
	"assignee": {
		"login": "agl",
		"id": 21203,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"closed_at": "2016-01-26T16:27:38Z",
	"created_at": "2016-01-13T18:22:43Z",
	"updated_at": "2016-01-26T16:27:38Z",
	"milestone": {
		"id": 1425772,
		"number": 34,
		"title": "Go1.6Maybe"
	}
}
