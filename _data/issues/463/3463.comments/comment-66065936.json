{
	"id": 66065936,
	"body": "\u003ca id=\"c10\"\u003e\u003c/a\u003eComment 10 by **leonhard.holz**:\n\n\u003cpre\u003eHello everybody,\n\nI investigated the original and the buffered-io version with go tools prof and here are\nthere results (go dev branch / i386):\n\n#1\n\tUser time (seconds): 27.06\n\tSystem time (seconds): 16.98\n\tPercent of CPU this job got: 132%\n\tElapsed (wall clock) time (h:mm:ss or m:ss): 0:33.19\n\n(pprof) top20   \nTotal: 5896 samples\n    2331  39.5%  39.5%     2331  39.5% ExternalCode\n     349   5.9%  45.5%      874  14.8% fmt.(*fmt).integer\n     283   4.8%  50.3%      283   4.8% runtime.uint64mod\n     266   4.5%  54.8%      333   5.6% runtime.mallocgc\n     254   4.3%  59.1%      254   4.3% scanblock\n     153   2.6%  61.7%      153   2.6% runtime.uint64div\n     142   2.4%  64.1%      142   2.4% runtime.memmove\n     141   2.4%  66.5%      141   2.4% runtime.cas\n     110   1.9%  68.3%     1108  18.8% fmt.(*pp).printArg\n      97   1.6%  70.0%      241   4.1% runtime.entersyscall\n      95   1.6%  71.6%      445   7.5% runtime.convT2I\n      93   1.6%  73.2%     3189  54.1% main.main\n      93   1.6%  74.7%      234   4.0% runtime.exitsyscall\n      88   1.5%  76.2%       88   1.5% runtime.writebarrierptr\n      84   1.4%  77.7%     1223  20.7% fmt.(*pp).doPrint\n      72   1.2%  78.9%      253   4.3% fmt.newPrinter\n      64   1.1%  80.0%      114   1.9% sync.(*Pool).pin\n      60   1.0%  81.0%       89   1.5% fmt.(*fmt).pad\n      56   0.9%  81.9%     2865  48.6% fmt.Fprintln\n      56   0.9%  82.9%      823  14.0% os.(*File).write\n(pprof) top20 -cum\nTotal: 5896 samples\n      93   1.6%   1.6%     3189  54.1% main.main\n       0   0.0%   1.6%     3189  54.1% runtime.gosched_m\n       0   0.0%   1.6%     3189  54.1% runtime.main\n      35   0.6%   2.2%     2900  49.2% fmt.Println\n      56   0.9%   3.1%     2865  48.6% fmt.Fprintln\n       0   0.0%   3.1%     2345  39.8% System\n    2331  39.5%  42.7%     2331  39.5% ExternalCode\n      84   1.4%  44.1%     1223  20.7% fmt.(*pp).doPrint\n      43   0.7%  44.8%     1159  19.7% os.(*File).Write\n     110   1.9%  46.7%     1108  18.8% fmt.(*pp).printArg\n      37   0.6%  47.3%      911  15.5% fmt.(*pp).fmtInt64\n     349   5.9%  53.2%      874  14.8% fmt.(*fmt).integer\n      56   0.9%  54.2%      823  14.0% os.(*File).write\n      27   0.5%  54.6%      533   9.0% syscall.Write\n      20   0.3%  55.0%      506   8.6% syscall.write\n      11   0.2%  55.2%      486   8.2% syscall.Syscall\n      95   1.6%  56.8%      445   7.5% runtime.convT2I\n      38   0.6%  57.4%      371   6.3% runtime.newobject\n       0   0.0%  57.4%      362   6.1% GC\n     266   4.5%  61.9%      333   5.6% runtime.mallocgc\n\n#2\n\tUser time (seconds): 26.69\n\tSystem time (seconds): 5.31\n\tPercent of CPU this job got: 138%\n\tElapsed (wall clock) time (h:mm:ss or m:ss): 0:23.04\n\n(pprof) top20\nTotal: 2592 samples\n     663  25.6%  25.6%      663  25.6% ExternalCode\n     282  10.9%  36.5%      717  27.7% fmt.(*fmt).integer\n     255   9.8%  46.3%      255   9.8% runtime.uint64mod\n     127   4.9%  51.2%      127   4.9% runtime.memmove\n     120   4.6%  55.8%      120   4.6% runtime.uint64div\n     107   4.1%  60.0%      924  35.6% fmt.(*pp).printArg\n      88   3.4%  63.3%       88   3.4% scanblock\n      69   2.7%  66.0%       92   3.5% runtime.mallocgc\n      65   2.5%  68.5%     1029  39.7% fmt.(*pp).doPrint\n      58   2.2%  70.8%       58   2.2% runtime.writebarrierptr\n      56   2.2%  72.9%       56   2.2% sync.runtime_procPin\n      55   2.1%  75.0%      222   8.6% fmt.newPrinter\n      53   2.0%  77.1%      212   8.2% fmt.(*pp).free\n      52   2.0%  79.1%      121   4.7% sync.(*Pool).pin\n      49   1.9%  81.0%     1796  69.3% main.main\n      44   1.7%  82.7%       44   1.7% fmt.(*fmt).clearflags\n      41   1.6%  84.3%       60   2.3% fmt.(*fmt).pad\n      40   1.5%  85.8%      184   7.1% runtime.convT2E\n      36   1.4%  87.2%     1558  60.1% fmt.Fprintln\n      34   1.3%  88.5%       96   3.7% sync.(*Pool).Get\n(pprof) top20 -cum\nTotal: 2592 samples\n      49   1.9%   1.9%     1796  69.3% main.main\n       0   0.0%   1.9%     1796  69.3% runtime.gosched_m\n       0   0.0%   1.9%     1796  69.3% runtime.main\n      36   1.4%   3.3%     1558  60.1% fmt.Fprintln\n      65   2.5%   5.8%     1029  39.7% fmt.(*pp).doPrint\n     107   4.1%   9.9%      924  35.6% fmt.(*pp).printArg\n      17   0.7%  10.6%      734  28.3% fmt.(*pp).fmtInt64\n     282  10.9%  21.5%      717  27.7% fmt.(*fmt).integer\n     663  25.6%  47.0%      663  25.6% ExternalCode\n       0   0.0%  47.0%      631  24.3% System\n     255   9.8%  56.9%      255   9.8% runtime.uint64mod\n      55   2.1%  59.0%      222   8.6% fmt.newPrinter\n      53   2.0%  61.0%      212   8.2% fmt.(*pp).free\n      40   1.5%  62.6%      184   7.1% runtime.convT2E\n       0   0.0%  62.6%      165   6.4% GC\n     127   4.9%  67.5%      127   4.9% runtime.memmove\n      52   2.0%  69.5%      121   4.7% sync.(*Pool).pin\n     120   4.6%  74.1%      120   4.6% runtime.uint64div\n      33   1.3%  75.4%      110   4.2% sync.(*Pool).Put\n      16   0.6%  76.0%      108   4.2% runtime.newobject\n\n\nSo in the current version 40% of the time is used for the write syscall and another 20%\nin os.(*File).Write. Using buffered io avoids these calls so system time drops from 17s\nto 5s. The integer to string conversion now is more significant. I wonder if there'd be\na way to exploit the base10 special casing of strconv.Itoa()?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-15T19:01:50Z",
	"updated_at": "2014-12-08T10:18:07Z"
}
