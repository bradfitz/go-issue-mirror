{
	"id": 156521756,
	"body": "The docs are very clear:\r\n\r\n    // ProbablyPrime performs n Miller-Rabin tests to check whether x is prime.\r\n    // If x is prime, it returns true.\r\n    // If x is not prime, it returns false with probability at least 1 - ¼ⁿ.\r\n    //\r\n    // It is not suitable for judging primes that an adversary may have crafted\r\n    // to fool this test.\r\n\r\nWhile we could start overloading non-positive values of n, that will be confusing to read and also confusing when you compile code expecting the new meaning of (say) 0 but instead it panics saying 0 is not a valid argument.\r\n\r\nThere are two possible ways forward for adding other primality test algorithms:\r\n\r\n1. If a test makes sense to do all the time or in some limited context (such as small numbers), just do it, in addition to the currently-guaranteed Miller-Rabin tests.\r\n2. Add a new method.\r\n\r\nThere have been a few things suggested here, including BPSW and various Lucas variants. I would like to see, for each test being proposed, a crisp statement containing: \r\n - the proposed new test\r\n - the class of numbers being tested for which the test makes sense over the current implementation, and\r\n -  the cost compared to one Miller-Rabin iteration.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-13T18:51:23Z",
	"updated_at": "2015-11-13T18:54:58Z"
}
