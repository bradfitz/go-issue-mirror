{
	"id": 159748642,
	"body": "More questions about goals / requirements:\r\n\r\nPerformance for inputs less than 2^32:  reasonable, very fast, or fastest possible?\r\n\r\nPerformance for inputs less than 2^64:  reasonable, very fast, or fastest possible?\r\n\r\nThe above two are just a performance vs. code tradeoff.  There are multiple ways to give deterministic solutions -- they vary in the amount of code and tweaking needed.  As a simple example, below some threshold, trial division will be faster than other methods, so we could add some code to do that and get slightly faster results for small inputs.  My guess is that \"reasonable\" is the answer for both, which BPSW and deterministic M-R both give.  Maybe a few small optimizations (e.g. return after mods if x \u003c 3481, and perhaps deterministic M-R for small inputs since the Lucas test is rather expensive).\r\n\r\nFor inputs between 2^64 and 2^81: would we like to implement a deterministic solution -- definitive non-probabilistic results at the cost of 12-13 M-R tests?  This could be done by either ignoring their argument or applying only if they asked for at least that many tests.  This starts getting into the distinction between them just calling x.millerRabin(n) and x.probablePrime(n) -- the former lets them run some M-R tests, while the latter is asking us to determine if x is prime as best we can.  The code here is very simple.",
	"user": {
		"login": "danaj",
		"id": 125502,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-25T22:46:30Z",
	"updated_at": "2015-11-25T22:46:30Z"
}
