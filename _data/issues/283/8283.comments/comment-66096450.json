{
	"id": 66096450,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eI still believe the code is correct.\n\nfunc MkdirAll(path string, perm FileMode) error {\n\t// If path exists, stop with success or error.\n\tdir, err := Stat(path)\n\tif err == nil {\n\t\tif dir.IsDir() {\n\t\t\treturn nil\n\t\t}\n\t\treturn \u0026PathError{\"mkdir\", path, syscall.ENOTDIR}\n\t}\n\n\t// Doesn't already exist; make sure parent does.\n\ti := len(path)\n\tfor i \u003e 0 \u0026\u0026 IsPathSeparator(path[i-1]) { // Skip trailing path separator.\n\t\ti--\n\t}\n\n\tj := i\n\tfor j \u003e 0 \u0026\u0026 !IsPathSeparator(path[j-1]) { // Scan backward over element.\n\t\tj--\n\t}\n\n\tif j \u003e 1 {\n\t\t// Create parent\n\t\terr = MkdirAll(path[0:j-1], perm)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t// Now parent exists, try to create.\n\terr = Mkdir(path, perm)\n\tif err != nil {\n\t\t// Handle arguments like \"foo/.\" by\n\t\t// double-checking that directory doesn't exist.\n\t\tdir, err1 := Lstat(path)\n\t\tif err1 == nil \u0026\u0026 dir.IsDir() {\n\t\t\treturn nil\n\t\t}\n\t\treturn err\n\t}\n\treturn nil\n}\n\nThe first bit checks to see if Stat can *succeed*. If so, I think you must agree that\npath 'exists'. In that case, if it's a directory we're done and if not we return\nENOTDIR. This is a fast path.\n\nOtherwise, we might as well try creating it. The comment says 'doesn't already exist'\nand you are correct that that's not strictly true, but it's the right way to think about\nwhat follows. It doesn't matter here that Stat might have failed with an I/O error.\n\nWe figure out what the parent of path must be and call Mkdir recursively on that. If\nthat fails, we stop.\n\nIf it succeeds, now we know the parent directory definitely does exist, and we call\nMkdir on the original path. Whatever Mkdir returns (ignoring the Lstat fixup), we return.\n\nIn particular, the only way you get EEXIST from this function is if the inner MkdirAll\n(inside if j \u003e 1) returns it or if Mkdir itself returns it. Since there has to be a base\ncase in the recursion, the EEXIST *must* be coming from the call to the Mkdir system\ncall.\n\nYou are right that if Stat returns I/O error then we proceed with 'business as usual'\nbut that is *exactly* what we should do. We want to see the error that Mkdir gives us,\nnot the error that Stat gives us.\n\nI will recomment the function but I really think everything here is fine.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-10-06T19:16:18Z",
	"updated_at": "2014-12-08T10:46:02Z"
}
