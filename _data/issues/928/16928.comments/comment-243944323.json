{
	"id": 243944323,
	"body": "@strikerdw Hi, thanks for the comments.  I alluded to the cases earlier.  The goroutine scheduler works by, essentially, setting a flag asking a goroutine to stop.  The goroutine checks the flag periodically, and, if it is set, stops, and enters the scheduler.  A goroutine also enters the scheduler whenever it blocks on some operation, like a channel operation.  Goroutines are never preempted.\r\n\r\nThe periodic flag checks currently occur at function entry for ordinary functions.  Those are the only moments when a goroutine enters the scheduler because of a preemption request.  All that needs to be saved at such a point--all that is saved when a thread switches from one goroutine to another--is the PC, the stack pointer, and, on some architectures, the link register.  Everything else is in memory somewhere.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-01T00:44:09Z",
	"updated_at": "2016-09-01T00:44:09Z"
}
