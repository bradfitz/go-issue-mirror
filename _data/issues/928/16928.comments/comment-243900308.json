{
	"id": 243900308,
	"body": "In addition to what Ian said, the Go scheduler uses synchronization\noperations to move a Goroutine from one P (one OS thread) to another.  So\nthe Go scheduler guarantees that after a goroutine stops, it will make sure\nall of its state gets to the new processor before the goroutine is started\nagain.\n\nOn Wed, Aug 31, 2016 at 1:42 PM, Ian Lance Taylor \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e The Go scheduler will never preempt a goroutine that is running C code.\n\u003e\n\u003e In the sense that we are discussing here, the Go scheduler never preempts\n\u003e anything at all. It just, essentially, sets a flag on the goroutine saying\n\u003e \"please stop.\" The goroutine checks that flag from time to time (currently,\n\u003e at each call to a function written in Go or written with the Go assembler,\n\u003e if that function is not marked nosplit).\n\u003e\n\u003e â€”\n\u003e You are receiving this because you were mentioned.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/16928#issuecomment-243894335\u003e, or mute\n\u003e the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AGkgIOa4PxAE_4X2loUmmHddJ_2kebMRks5qlecegaJpZM4Jw0w5\u003e\n\u003e .\n\u003e\n",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-31T21:01:29Z",
	"updated_at": "2016-08-31T21:01:29Z"
}
