{
	"id": 171364928,
	"body": "It doesn't like that line because it violates the rule that you can't store\nGo pointers into non-Go memory indefinitely. There is an exception for\ndoing that during an individual call into C, but they must be passed into\nthe call and eliminated from the C structures before returning.\n\nI don't see why that line would cause the problem in the original report,\nthough.\n\nEven so to get your code past cgocheck=2 the right approach is to write a C\nwrapper that takes the pointer to the buffers, does its work, forgets the\npointers, and returns.\n\nKernighan and Donovan's The Go Programming Language has a good example of\nwrapping a bzip2 writer. Perhaps that can help illustrate the pattern. Even\nif you don't have the book you can find the code at 'go get\ngopl.io/ch13/bzip'. It's writing, not reading, but it should be roughly\nequivalent. The key part is the C function bz2compress: Go pointers enter C\nas arguments, but they don't stay once it returns.\n\nRuss\n",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-13T17:03:37Z",
	"updated_at": "2016-01-13T17:03:37Z"
}
