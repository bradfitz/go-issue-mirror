{
	"id": 108371849,
	"body": "I'm sorry I don't follow that argument. On unix environment variables are used by the binary being run. Are they put to some other use on windows?\r\n\r\nIn this case the binaries we are running are our own. Specifically src/cmd/dist. In the case of the GOBIN bug, make.bash. We should know all of the environment variables in play. So the two approaches both have risks:\r\n\r\n- explicit list only: we miss a variable (or a new variable is added to cmd/dist while we don't notice) and not setting it means gomobile behaves incorrectly. The implicit env may have provided the correct value.\r\n- explicit list + implicit env: we miss a variable (or a new one is added and we don't notice) and the implicit environment variable means it does the wrong thing. Excluding the variable may have been correct.\r\n\r\nBoth ways have bugs. Given the programs being run are small and ones we control the source for, I prefer the explicit list only because it's a little simpler. Hopefully bugs will just be builds misbehaving, rather than gomobile build interfering with people's go tool setup. (Something I very much want to avoid.)\r\n\r\nI agree with the general principle that if the binaries being run were user binaries, we should plumb their environment through, as they understand their binaries better than we do. But that's not the case here, so I don't think that principle applies.\r\n\r\nIf I've misunderstood, please let me know. (And as always, thank you for your windows expertise @alexbrainman, I don't think Go would work on windows without you.)",
	"user": {
		"login": "crawshaw",
		"id": 161319,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-03T12:34:48Z",
	"updated_at": "2015-06-03T12:36:55Z"
}
