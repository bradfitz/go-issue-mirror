{
	"id": 172395068,
	"body": "\u003e Therefore, I think the extra time is spent on memory allocation.\r\n\r\nThat may be true, but \"memory allocation\" is a complex operation with many secondary effects (e.g., the actual allocation could be perfectly scalable, but the increased memory pressure makes other parts of the runtime not scale). That's why I was hoping you could perform a differential profile to compare where the time is going at a small number of cores with where the time is going with a large number of cores. If we're spending a much larger fraction of the time in some code at a large number of cores, we'll know that's the culprit and we may be able to fix it.\r\n\r\n\u003e I do not understand why there is an extra memory allocation since both versions do the same task. I think it is related to how golang itself compiles the two statements.\r\n\r\nYes; this is just a flaw in how the compiler sees these two programs. To you and me they're obviously equivalent, but right now the compiler can't see that. @randall77 opened #13807 to investigate this specific issue.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-17T23:25:08Z",
	"updated_at": "2016-01-17T23:25:08Z"
}
