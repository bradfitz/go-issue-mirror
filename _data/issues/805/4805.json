{
	"id": 51282664,
	"number": 4805,
	"state": "closed",
	"title": "database/sql: Control over connection pool",
	"body": "\u003cpre\u003eFrom \u003ca href=\"http://golang.org/src/pkg/database/sql/doc.txt\"\u003ehttp://golang.org/src/pkg/database/sql/doc.txt\u003c/a\u003e:\n\n* Handle concurrency well.  Users shouldn't need to care about the\n   database's per-connection thread safety issues (or lack thereof),\n   and shouldn't have to maintain their own free pools of connections.\n   The 'db' package should deal with that bookkeeping as needed.  Given\n   an *sql.DB, it should be possible to share that instance between\n   multiple goroutines, without any extra synchronization.\n\nI think the current approach fails to achieve this because there is no control over the\ndynamics of the pool. For example the pool size can grow without bound if there are\nenough goroutines trying to use the DB connection. This is a problem if your database\nhas limits on the number of connections per user, as you end up with errors when trying\nto use a *sql.DB.\n\nThe current workaround is to maintain your own fixed-size pool of *sql.DB's and ensure\neach one is only used by one goroutine at a time, which seems counter to the package\ndesign goals.\n\nThere should be a way to configure maxIdleConns, as well as a way to set the maximum\nnumber of connections.\u003c/pre\u003e",
	"user": {
		"login": "kisielk",
		"id": 58618,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Suggested"
		}
	],
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 25,
	"closed_at": "2015-10-30T19:32:01Z",
	"created_at": "2013-02-14T18:09:38Z",
	"updated_at": "2015-10-30T19:32:01Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
