{
	"id": 51288933,
	"number": 8970,
	"state": "open",
	"title": "go/types: expose interface satisfaction constraints",
	"body": "\u003cpre\u003eThe type checker goes to very great lengths to be robust and precise even for ill-typed\ninputs, and it is very hard to match this level of robustness in other passes over the\n(typed) AST.  As a result, the refactor/lexical and refactor/satisfy packages, both of\nwhich recompute information computed but not exposed by go/types, are not safe to run on\nprograms with type errors.\n\nrefactor/lexical records, for every referring identifier, the structure of the lexical\nenvironment at that point, information that is necessary for refactoring tools and\nimpossible to derive from the Scope information currently exposed by the type checker\n(which is rarely useful).\n\nrefactor/satisfies records the set of type pairs (x, y) such that x is assignable to\ninterface y, and if it were not assignable, the program would not compile.  This also is\nnecessary for refactoring tools.\n\nI think the 'lexical' pass could be very cheaply and elegantly implemented into the\nexisting type checker, and I think it should be since it is so useful; 'satisfies' is \ntrickier.\u003c/pre\u003e",
	"user": {
		"login": "adonovan",
		"id": 5658175,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2014-10-20T21:16:31Z",
	"updated_at": "2016-02-11T22:26:15Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
