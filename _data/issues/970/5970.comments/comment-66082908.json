{
	"id": 66082908,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eThis seems to work but it needs tests, both in net/url and net/http.\n\ndiff -r 045269edbbee src/pkg/net/http/client.go\n--- a/src/pkg/net/http/client.go\tTue Aug 06 14:49:55 2013 -0400\n+++ b/src/pkg/net/http/client.go\tWed Aug 07 02:30:08 2013 -0400\n@@ -10,7 +10,6 @@\n package http\n \n import (\n-\t\"encoding/base64\"\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n@@ -161,18 +160,11 @@\n \t}\n \n \tif u := req.URL.User; u != nil {\n-\t\tauth := u.String()\n-\t\t// UserInfo.String() only returns the colon when the\n-\t\t// password is set, so we must add it here.\n-\t\t//\n-\t\t// See 2 (end of page 4) \u003ca href=\"http://www.ietf.org/rfc/rfc2617.txt\"\u003ehttp://www.ietf.org/rfc/rfc2617.txt\u003c/a\u003e\n-\t\t// \"To receive authorization, the client sends the userid and password,\n-\t\t// separated by a single colon (\":\") character, within a base64\n-\t\t// encoded string in the credentials.\"\n-\t\tif _, hasPassword := u.Password(); !hasPassword {\n-\t\t\tauth += \":\"\n+\t\tauth, err := u.BasicAuth()\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n \t\t}\n-\t\treq.Header.Set(\"Authorization\", \"Basic\n\"+base64.URLEncoding.EncodeToString([]byte(auth)))\n+\t\treq.Header.Set(\"Authorization\", \"Basic \"+auth)\n \t}\n \tresp, err = t.RoundTrip(req)\n \tif err != nil {\ndiff -r 045269edbbee src/pkg/net/url/url.go\n--- a/src/pkg/net/url/url.go\tTue Aug 06 14:49:55 2013 -0400\n+++ b/src/pkg/net/url/url.go\tWed Aug 07 02:30:08 2013 -0400\n@@ -8,6 +8,7 @@\n \n import (\n \t\"bytes\"\n+\t\"encoding/base64\"\n \t\"errors\"\n \t\"sort\"\n \t\"strconv\"\n@@ -277,8 +278,8 @@\n \treturn \"\", false\n }\n \n-// String returns the encoded userinfo information in the standard form\n-// of \"username[:password]\".\n+// String returns the user information in the standard form\n+// of \"username[:password]\", with special characters URL-encoded.\n func (u *Userinfo) String() string {\n \ts := escape(u.username, encodeUserPassword)\n \tif u.passwordSet {\n@@ -287,6 +288,17 @@\n \treturn s\n }\n \n+var errUsername = errors.New(\"url: invalid user name\")\n+\n+// BasicAuth returns the user information in the base64-encoded\n+// form used by the ``Basic'' authorization header.\n+func (u *Userinfo) BasicAuth() (string, error) {\n+\tif strings.Contains(u.username, \":\") {\n+\t\treturn \"\", errUsername\n+\t}\n+\treturn base64.URLEncoding.EncodeToString([]byte(u.username + \":\" + u.password)), nil\n+}\n+\n // Maybe rawurl is of the form scheme:path.\n // (Scheme must be [a-zA-Z][a-zA-Z0-9+-.]*)\n // If so, return scheme, path; else return \"\", rawurl.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-07T06:30:47Z",
	"updated_at": "2014-12-08T10:32:49Z"
}
