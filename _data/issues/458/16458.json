{
	"id": 166805429,
	"number": 16458,
	"state": "closed",
	"title": "x/tools/cmd/goimports: GOPATH not honored with absolute file paths",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\ngo version go1.5.4 linux/amd64  \r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/akavel/gopath/src/zpaslab.com/lockerbox/_vendor:/home/akavel/gopath\"\r\nGORACE=\"\"\r\nGOROOT=\"/home/akavel/go\"\r\nGOTOOLDIR=\"/home/akavel/go/pkg/tool/linux_amd64\"\r\nGO15VENDOREXPERIMENT=\"\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n\r\n3. What did you do?\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n\r\nI've upgraded goimports, following the recent \"it's now faster\" announcement. I retained the old binary, and now I have 2 binaries:\r\n```\r\n$ LC_ALL=C ll ~/gopath/bin/goimports*\r\n-rwxr-xr-x 1 akavel akavel 5509320 Jul 21 13:59 /home/akavel/gopath/bin/goimports*\r\n-rwxr-xr-x 1 akavel akavel 5323816 Apr 27 14:49 /home/akavel/gopath/bin/goimports.old1*\r\n-rwxr-xr-x 1 akavel akavel 5509320 Jul 21 13:59 /home/akavel/gopath/bin/goimports.old2*\r\n$ LC_ALL=C date -Isec\r\n2016-07-21T14:21:05+0200                                            \r\n```\r\n\r\nDepending whether I run the new one with relative or absolute path to source file, import gets found or not:\r\n```\r\n$ goimports.old2 /home/akavel/gopath/src/zpaslab.com/lockerbox/overmind/collector_rest_test.go | grep protobuf\r\n$ goimports.old1 /home/akavel/gopath/src/zpaslab.com/lockerbox/overmind/collector_rest_test.go | grep protobuf\r\n        \"github.com/golang/protobuf/proto\"\r\n$ goimports.old2 ./overmind/collector_rest_test.go | grep protobuf\r\n        \"github.com/golang/protobuf/proto\"\r\n$ goimports.old1 ./overmind/collector_rest_test.go | grep protobuf\r\n        \"github.com/golang/protobuf/proto\"\r\n```\r\nAdditional notes:\r\n- exactly the same behavior happens for packages not in `_vendor/`, e.g. `\"zpaslab.com/lockerbox/db\"`\r\n- standard library packages are found OK (e.g. `\"testing\"`)\r\n- the same seems to happen when using -srcdir (i.e. in vim-go)\r\n\r\n4. What did you expect to see?\r\n\r\nAll versions would find the import:\r\n```\r\n$ goimports.old2 /home/akavel/gopath/src/zpaslab.com/lockerbox/overmind/collector_rest_test.go | grep protobuf\r\n        \"github.com/golang/protobuf/proto\"\r\n$ goimports.old1 /home/akavel/gopath/src/zpaslab.com/lockerbox/overmind/collector_rest_test.go | grep protobuf\r\n        \"github.com/golang/protobuf/proto\"\r\n$ goimports.old2 ./overmind/collector_rest_test.go | grep protobuf\r\n        \"github.com/golang/protobuf/proto\"\r\n$ goimports.old1 ./overmind/collector_rest_test.go | grep protobuf\r\n        \"github.com/golang/protobuf/proto\"\r\n```\r\n\r\n\r\n5. What did you see instead?\r\n\r\n```\r\n$ goimports.old2 /home/akavel/gopath/src/zpaslab.com/lockerbox/overmind/collector_rest_test.go | grep protobuf\r\n$ goimports.old1 /home/akavel/gopath/src/zpaslab.com/lockerbox/overmind/collector_rest_test.go | grep protobuf\r\n        \"github.com/golang/protobuf/proto\"\r\n$ goimports.old2 ./overmind/collector_rest_test.go | grep protobuf\r\n        \"github.com/golang/protobuf/proto\"\r\n$ goimports.old1 ./overmind/collector_rest_test.go | grep protobuf\r\n        \"github.com/golang/protobuf/proto\"\r\n```\r\n\r\n",
	"user": {
		"login": "akavel",
		"id": 273837,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "WaitingForInfo"
		}
	],
	"comments": 5,
	"closed_at": "2016-07-26T13:45:31Z",
	"created_at": "2016-07-21T12:19:56Z",
	"updated_at": "2016-07-26T13:45:31Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
