{
	"id": 68223682,
	"body": "We can't specify how append enlarges the underlying array, because\r\nthat will unnecessarily limit the implementation.\r\n\r\nFor example, one can imagine that a more intelligent compiler can do\r\nsome whole program analysis to figure out the what the final length of\r\nthe slice would be (at least the range of the final length), and if that's\r\nnot too large, allocate the whole backing array on first append, so that\r\nsubsequent appends don't need to allocate and/or copy. (The runtime\r\ncan also base the decision on how far it can extend the current backing\r\narray without copying.)\r\n\r\nBasically, you should not assume the specifics how append will enlarge\r\nthe backing array. Any such assumption might be invalidated in a future\r\nrelease of Go. A safe assumption is that after append, the original slice\r\nis destroyed, and should no longer be used.\r\n\r\nThe spec is not trying to teach you Go. It's the definition of Go, so I\r\ndon't think the spec should give warning about any of the subtleties.\r\n(Do you find any warnings in specifications/standards for other programming\r\nlanguages?)",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-28T23:40:20Z",
	"updated_at": "2014-12-28T23:40:47Z"
}
