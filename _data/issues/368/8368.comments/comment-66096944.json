{
	"id": 66096944,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003eThe issue here is similar to \u003ca href=\"https://golang.org/issue/8441\"\u003eissue #8441\u003c/a\u003e: the dwarf.TypedefType case code expects when\nits recursive call to c.Type(dt.Type, pos) finishes that dt.Type has been fully\ntranslated already, but that's not the case if a structure type recursively refers to a\ntypedef that refers to itself again.\n\nThe patch from #2 stops the crash (but so would simply skipping the assignment if\ntypedef[n] is nil), but I don't think it's otherwise correct.  In particular, the\n\"typedef[name.Name] = \u0026tt\" assignment from the dwarf.StructType case would clobber it.\u003c/pre\u003e",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-08-05T01:12:52Z",
	"updated_at": "2014-12-08T10:46:31Z"
}
