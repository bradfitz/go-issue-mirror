{
	"id": 66068389,
	"body": "\u003ca id=\"c15\"\u003e\u003c/a\u003eComment 15:\n\n\u003cpre\u003eWhen I implemented this (or one of the variants), the template set was locked after all\ntemplates were parsed, and blocks were \"expanded\" when appropriate. By expanded I mean:\nblock nodes were replaced in the resulting tree, when they were overridden. So execution\nneeded no changes, because the block nodes were not part of the resulting tree.\n\nThis is not possible in current text/template, because it doesn't lock the tree after\nparsing (like html/template does -- a requirement of the escaping mechanism).\n\n(Not-Go-1.x parenthesis:\n\nA discovery I made during this experiment is that text/template and html/template could\nshare a lot more code -- specially execution -- if both locked the tree after parsing.\nThey could, or should imo, be a single package with the appropriate API to request a\ntemplate instance for HTML context or not. Escaping is just an after-parsing tree\nexpansion, like blocks or new actions or semantics could be.)\n\nI think the particular proposal posted in this issue, as it is, must be forgotten. And\nif an inversion-of-control functionality to assemble templates must be added, the\nspecific semantics should be re-thought from scratch.\n\nI'm sorry for the lack of responses, but I've had no time to come back and think about\nthis in deep. If you wish, please consider the issue abandoned.\u003c/pre\u003e",
	"user": {
		"login": "moraes",
		"id": 3164,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-19T19:30:04Z",
	"updated_at": "2014-12-08T10:20:09Z"
}
