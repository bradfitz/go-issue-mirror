{
	"id": 135860118,
	"body": "@rsc - Some template systems do arrange so that you don't need to write any non-template code to glue two templates together. In Django you put `{% extends \"master_template_name\" %}` at the start of the overlay template. HTML::Mason looks through parent dirs for specially-named templates (`autohandler`s). \r\n\r\nThe `Overlay` method seems more flexible. In one case I had a few overlay templates with my app's forms and a few master templates with different branding and legal boilerplate in the headers/footers. I wanted to be able to use use any form with any header/footer. `Overlay` makes that easy; `extends` doesn't, since it ties each overlay to one master. But clearly I can get by with something like `extends` (here that would be, what, `{{overlays \"master\"}}`?); I'm living with it today in Django-land.\r\n\r\nThe extra lines to invoke `Overlay` don't bother me much. If I have one master for all my pages, I write a convenience function to overlay all my forms on it. If I have different needs I write something to search for masters like Mason does. As long as Go exposes overlaying, I think users can sort out app-appropriate ways to make it easy/quick to invoke.",
	"user": {
		"login": "twotwotwo",
		"id": 328644,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-28T18:56:01Z",
	"updated_at": "2015-08-28T19:20:57Z"
}
