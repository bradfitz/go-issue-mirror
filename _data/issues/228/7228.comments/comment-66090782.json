{
	"id": 66090782,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4 by **peter@scraperwiki.com**:\n\n\u003cpre\u003eHm. I'm not sure documentation would have prevented the multiple hours it took for us to\nunderstand why our program wasn't working, because the principle of least surprise is\nviolated. Here's the story:\n\nWe were in the unfortunate situation where something called \"./foo\" happened to be in\nthe working directory of the process and executable, by happen-stance. Then we did the\nequivalent of Command(Dir: bar, Path: ./foo).Run(), and bar/foo (a completely different\nprogram with the same name) was correctly executed, as expected. At some time much later\n\"./foo\" was removed from the filesystem.\n\nAt this point the program stopped functioning with the error \"error: exec: \"./foo\": stat\n./foo: no such file or directory\". It was very hard to comprehend why the behaviour of\nthe program had changed since the critical fact was that the behaviour of the program\ndepended on something which had never been executed by our program in the past.\n\nThe effect of fixing this that I would like to have is to remove that dependency,\nbecause it was very hard to find. It would have been the case if there was documentation\nin front of my face because I had *seen it work correctly* before and I had\nexec.Command's source code in front of me. I was thinking that I was seeing a filesystem\nproblem.\n\nI'm happy that I can use exec.Command(filepath.Join()) and that maybe LookPath shouldn't\nlook in cmd.Dir, but can this surprising behaviour really not be fixed? I understand and\nappreciate the importance of not changing the behaviour of programs in the wild, but can\nwe demonstrate that it would be harmful to fix the issue as I've described it here?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-01-29T08:52:31Z",
	"updated_at": "2014-12-08T10:40:09Z"
}
