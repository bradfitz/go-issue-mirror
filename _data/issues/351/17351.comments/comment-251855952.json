{
	"id": 251855952,
	"body": "That behavior couldn't change before Go2. I agree that the unrolling and\n\"only if all are valid\" behavior is compelling, but I suspect it'd be\nincreasingly difficult to make the case body valid for all types in\nanything but trivial cases, and without generics the actual usefulness of\nunrolling in practice is limited -- what do you do with the result of\nprocessing, for example, and how would you avoid having to rely on empty\ninterfaces anyway?\n\nOn Wed, Oct 5, 2016, 8:17 PM ragnese \u003cnotifications@github.com\u003e wrote:\n\n\u003e No, of course not! Because it's also invalid Go if you split the case up:\n\u003e https://play.golang.org/p/JIntQ3pis3\n\u003e\n\u003e My point is that in my example, splitting the case works when they have\n\u003e identical bodies and logically that implies that it should work when the\n\u003e cases are lumped together. I can't think of a single case where my proposal\n\u003e is not better than the current spec. If one of your cases wouldn't work on\n\u003e the body, then of course it shouldn't compile. If all of your cases\n\u003e *would* work on the body, then it should compile!\n\u003e\n\u003e What I'm arguing for is that the compiler should automatically\n\u003e unroll/copy+paste the grouped cases for us and then compile *that*.\n\u003e\n\u003e The compiler doing something like that is not unheard of, either. Take,\n\u003e for example, automatic pointer dereferencing- that's basically the compiler\n\u003e inserting a *() for us.\n\u003e\n\u003e â€”\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/17351#issuecomment-251850756\u003e, or mute\n\u003e the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AAgwpIvCE0LXYw2YNtFEzIUy6g-eX89_ks5qxFpSgaJpZM4KPdZ5\u003e\n\u003e .\n\u003e\n",
	"user": {
		"login": "extemporalgenome",
		"id": 536740,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-06T03:01:55Z",
	"updated_at": "2016-10-06T03:01:55Z"
}
