{
	"id": 166730864,
	"body": "I am really not sure that unsafe should be special. Yes, \"unsafe\" is known to the compiler, but the compiler just follows rules given to it by the go command. Strictly speaking the vendoring spec suggests that in a program where there is a controlling \"vendor/unsafe\" directory, importing \"unsafe\" should get that package, the same as \"vendor/math\" and \"math\". If the go command tells the compiler that unsafe maps to vendor/unsafe, why shouldn't the compiler accept this? It would be a simple matter of swapping a few lines in the lookup. I cannot say that I placed the mapping lookup after the check for \"unsafe\" for any particular reason. In fact, if you create $GOROOT/src/vendor/unsafe/unsafe.go containing 'package unsafe' and then run 'go list -json reflect', it says that the import and dependency refer to 'vendor/unsafe'. But then when you compile the code, the go command instructs the compiler to interpret unsafe as vendor/unsafe, but the compiler ignores this direction. So the tools (the go command and the compiler) disagree.\r\n\r\nI also don't understand why supporting \"unsafe\" in other tools is particularly difficult. The tools already do some kind of check to find out whether \"math\" really means \"vendor/math\". They can do the same for \"unsafe\", no?\r\n\r\nI'm similarly on the fence about \"C\". It's easy to make it work if you really want a \"vendor/C\" directory, but it's also reasonable to say that \"C\" is interpreted by preprocessing before the usual build.\r\n\r\nI'm not saying we should necessarily allow vendoring of unsafe and C or not. I'm trying to understand the rationale for carving out an explicit exception here. It's not something I considered before, and the current behavior is accidental more than anything.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-22T21:13:09Z",
	"updated_at": "2015-12-22T21:13:09Z"
}
