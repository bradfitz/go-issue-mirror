{
	"id": 51285589,
	"number": 6703,
	"state": "closed",
	"title": "spec: section on variable initialization is unclear",
	"body": "\u003cpre\u003eThis code:\n\npackage p\n\nvar x = T.m\n\nvar y = x\n\ntype T struct{}\n\nfunc (T) m() int {\n\t_ = y\n\treturn 0\n}\n\ncomplains about an initialization loop:\n\nx.go:3: initialization loop:\n\tx.go:3 x refers to\n\tx.go:9 T.m refers to\n\tx.go:5 y refers to\n\tx.go:3 x\n\neven though technically, there isn't one (m is not called, so x is simply the function\nT.m, and so is y. However, the spec only requires that the function T.m be mentioned for\nthe cycle to occur, so reporting a cycle here is correct. But:\n\npackage p\n\nvar x = T{}.m // \u0026lt;\u0026lt;\u0026lt;\u0026lt; added {}\n\nvar y = x\n\ntype T struct{}\n\nfunc (T) m() int {\n\t_ = y\n\treturn 0\n}\n\ndoes not report a cycle, even though the compiler knows which m is meant with T{}.m. But\nif we call that m:\n\npackage p\n\nvar x = T{}.m() // \u0026lt;\u0026lt;\u0026lt;\u0026lt; added ()\n\nvar y = x\n\ntype T struct{}\n\nfunc (T) m() int {\n\t_ = y\n\treturn 0\n}\n\na cycle is reported again.\n\nThe compiler should report a cycle for the 2nd program (per the spec), or not report a\ncycle for the first program (because in both cases, technically there is no cycle, and\nthe compiler can know that). The latter would require a refinement of the spec (and\npermit more programs as a result, so this would be a backward-compatible change).\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		},
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 20,
	"closed_at": "2014-12-08T10:37:12Z",
	"created_at": "2013-11-01T05:14:40Z",
	"updated_at": "2016-06-25T01:21:45Z",
	"milestone": {
		"id": 1067211,
		"number": 17,
		"title": "Go1.3"
	}
}
