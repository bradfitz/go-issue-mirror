{
	"id": 66095512,
	"body": "\u003ca id=\"c10\"\u003e\u003c/a\u003eComment 10 by **google@barrera.io**:\n\n\u003cpre\u003eOh my, I never noticed this last comment. Sorry for the delay replying.\n\n\u003e Again, please elaborate on your issue, use cases, which feature is required for which\npackage if possible.\n\nI expect this code to work:\n\n    net.Dial(\"tcp\", \"google.com:80\")\n\nOn a system that has the network connectivity to successfully run:\n\n    curl google.com\n\n----\n\nThis was actually pointed out to me recently, when coming across another golang\napplication: \u003ca href=\"http://golang.org/src/pkg/net/ipsock.go#L75\"\u003ehttp://golang.org/src/pkg/net/ipsock.go#L75\u003c/a\u003e\n\nThe library prefers IPv4 and does not retry anything. If one fails, the next address\nshould be tried. Or at least an address of a different family.\n\nAlso, it doesn't even care which address the system resolver returns first (mine prefers\nIPv6 results).\n\nSorry that I can't really contribute more in-depth details: I'm not even a go developer,\nI'm an end user who has consistently found that applications developed in golang\nconstantly fail to open any network connections, but I'm in no way proficient with the\nlanguages or it's API. All I percieve (as an end user) is that applications developed in\ngo \"don't have network capabilities\" on IPv6 nodes (which includes all my home\ncomputers).\n\n\u003e Interesting, can you show us, explain how other language or its standard library can\nresolve this issue?\n\nI honestly don't have the understanding to follow such low-level code in most languages.\nI belive that some actually retry different addresses before giving up. Eg: if the\nresolver returns IPv4 and IPv6 addresses, they're all tried, not just one and give-up.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-08-29T00:51:41Z",
	"updated_at": "2014-12-08T10:45:04Z"
}
