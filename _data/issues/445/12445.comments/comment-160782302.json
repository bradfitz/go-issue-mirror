{
	"id": 160782302,
	"body": "@randall77 Fair points!\r\n\r\nSo perhaps tying the wording to \"Go variables\" is wrong.  Instead something like \"indivisible block of memory\" or whatever appropriately describes the granularity at which the GC may rearrange memory.\r\n\r\nAlso, for pointers to objects that will never be moved by the GC (e.g., global Go variables, or unmanaged memory), `Base(p)` would return `(nil, uintptr(p))` (instead of `(p, 0)`).\r\n\r\nThat would allow offset ([as written above](https://github.com/golang/go/issues/12445#issuecomment-160749573)) to work for slices whose backing store is allocated by mmap, because their base pointers would be equal (both `nil`).\r\n\r\nDownside is it would also work for slices of even separate mmap allocations (or of an mmap allocation and a Go global variable), but at least since those objects aren't going to move around in memory anyway, I don't *think* it could cause problems?  (Though I'll continue thinking about that.)  Also, I don't see how Go could be expected to reliably distinguish those cases anyway.",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-30T22:29:28Z",
	"updated_at": "2015-11-30T22:29:28Z"
}
