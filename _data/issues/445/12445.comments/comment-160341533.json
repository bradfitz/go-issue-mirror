{
	"id": 160341533,
	"body": "\u003e There are certainly whole classes of concurrent GC algorithms for which this will not work.\r\n\r\nThis is true if the GC algorithms are considered in isolation from the language's promises about behaviour. This issue aims to address that.\r\n\r\nCurrently there *seems* to be a *de facto* promise\\* see discussion in #7192 and #8994 that use of converted unsafe.Pointers is atomic wrt the GC if the use is in a single expression. This is how the unsafe.Pointer-\u003euintptr happens in the code above, with the exception of the condition which troubles me.\r\n\r\n\\* Not a promise.\r\n\r\n\u003e Currently Go does not use these techniques.\r\n\r\nThis is understood; hence the comments in the linked code. The issue for us is that introduction of GC behaviour that breaks this code without a work around to obtain an offset will break gonum/matrix/mat64 behaviour. We use unsafe for the normal case and we don't expect Go1 coverage for that, but we also use the reflect equivalent for environments that disallow unsafe.",
	"user": {
		"login": "kortschak",
		"id": 275221,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-28T22:23:45Z",
	"updated_at": "2015-11-28T22:23:45Z"
}
