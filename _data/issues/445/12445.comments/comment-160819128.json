{
	"id": 160819128,
	"body": "So this works (I think my previous foray without the sign check did the int conversion too late):\r\n\r\n```\r\nfunc offset(a, b []float64) int {\r\n\tif \u0026a[0] == \u0026b[0] {\r\n\t\treturn 0\r\n\t}\r\n\treturn int(uintptr(unsafe.Pointer(\u0026b[0]))-uintptr(unsafe.Pointer(\u0026a[0]))) / int(unsafe.Sizeof(float64(0)))\r\n}\r\n```\r\n\r\nIf the guarantee can be made for overlapping allocations then this is good. The other half of the issue is how the reflect equivalent can be ensured to work since a move may happen between the uinptr conversion in reflect and the subtraction on return from the call to reflect's UnsafeAddr.",
	"user": {
		"login": "kortschak",
		"id": 275221,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-01T01:37:04Z",
	"updated_at": "2015-12-01T01:37:04Z"
}
