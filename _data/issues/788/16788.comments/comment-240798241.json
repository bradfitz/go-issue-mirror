{
	"id": 240798241,
	"body": "Issue is against Go's HTTP/2 _client_ - e.g. the upstream connection from the reverse proxy to the target.\r\n\r\n(Terrible) ASCII diagram:\r\n```\r\nlocal client (browser, curl) issues HTTP POST  ---HTTP/1.1---\u003e Go proxy (the gist) running on localhost, designed to rewrite CORS headers ---HTTP/2---\u003e HTTP/2 server (Go or nginx) ---HTTP/1.1|HTTP/2---\u003e (optional backend app to echo the POST)\r\n```\r\n\r\nThe issue (termination of the HTTP/2 stream before the response can be written) occurs at this point:\r\n\r\n```\r\nGo proxy (the gist) ---HTTP/2---\u003e HTTP/2 server (Go or nginx) \r\n```\r\n\r\n* Simpler program. no wrapping, net/http only, same flags: https://gist.github.com/elithrar/a47af11adb818571d364cc5797ce0fb6\r\n\r\n* Repro against both Caddy at https://post.workwithgo.com/post/data and via CloudFlare at https://repeater.getattest.io/post/data\r\n\r\n*Caddy*\r\n```\r\ncurl http://localhost:8001/post/data -d \"gophers=yes;\" -sv\r\n\r\n*   Trying ::1...\r\n* connect to ::1 port 8001 failed: Connection refused\r\n*   Trying 127.0.0.1...\r\n* Connected to localhost (127.0.0.1) port 8001 (#0)\r\n\u003e POST /post/data HTTP/1.1\r\n\u003e Host: localhost:8001\r\n\u003e User-Agent: curl/7.50.1\r\n\u003e Accept: */*\r\n\u003e Content-Length: 12\r\n\u003e Content-Type: application/x-www-form-urlencoded\r\n\u003e\r\n* upload completely sent off: 12 out of 12 bytes\r\n\u003c HTTP/1.1 502 Bad Gateway\r\n\u003c Date: Thu, 18 Aug 2016 17:31:33 GMT\r\n\u003c Content-Length: 0\r\n\u003c Content-Type: text/plain; charset=utf-8\r\n\u003c\r\n* Connection #0 to host localhost left intact\r\n```\r\n```\r\ngo run simple.go -port 8001 -proxy=https://post.workwithgo.com/post/data\r\n2016/08/18 10:29:20 listening on host 127.0.0.1 - port 8001\r\n2016/08/18 10:29:23 POST - https://post.workwithgo.com/post/data - 127.0.0.1:61416\r\n2016/08/18 10:29:23 http: proxy error: stream error: stream ID 1; STREAM_CLOSED\r\n```\r\n\r\n*nginx*\r\n```\r\ncurl http://localhost:8001/post/data -d \"gophers=yes;\" -sv\r\n\r\n*   Trying ::1...\r\n* connect to ::1 port 8001 failed: Connection refused\r\n*   Trying 127.0.0.1...\r\n* Connected to localhost (127.0.0.1) port 8001 (#0)\r\n\u003e POST /post/data HTTP/1.1\r\n\u003e Host: localhost:8001\r\n\u003e User-Agent: curl/7.50.1\r\n\u003e Accept: */*\r\n\u003e Content-Length: 12\r\n\u003e Content-Type: application/x-www-form-urlencoded\r\n\u003e\r\n* upload completely sent off: 12 out of 12 bytes\r\n\u003c HTTP/1.1 502 Bad Gateway\r\n\u003c Date: Thu, 18 Aug 2016 17:32:34 GMT\r\n\u003c Content-Length: 0\r\n\u003c Content-Type: text/plain; charset=utf-8\r\n\u003c\r\n* Connection #0 to host localhost left intact\r\n```\r\n```\r\ngo run simple.go -port 8001 -proxy=https://repeater.getattest.io/post/data\r\n2016/08/18 10:32:32 listening on host 127.0.0.1 - port 8001\r\n2016/08/18 10:32:34 POST - https://repeater.getattest.io/post/data - 127.0.0.1:61461\r\n2016/08/18 10:32:34 http: proxy error: stream error: stream ID 1; STREAM_CLOSED\r\n```\r\n\r\nAll of those endpoints are live. Hammer as much as you want. The backend application just echoes the request; the same HTTP 502 and premature stream termination occurs when hitting CloudFlare's API via the same proxy (you would require API keys to test that).\r\n",
	"user": {
		"login": "elithrar",
		"id": 18544,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-18T17:37:08Z",
	"updated_at": "2016-08-18T18:28:25Z"
}
