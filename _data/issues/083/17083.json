{
	"id": 176520749,
	"number": 17083,
	"state": "closed",
	"title": "net/http: ResponseWriter doesn't overwrite content-type after WriteHeader is called.",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n### What version of Go are you using (`go version`)?\r\n1.7\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nubuntu, amd64\r\n\r\n### What did you do?\r\nin a http server handler, \r\nfirst call w.WriteHeader(http.StatusOK)\r\nthen call w.Header().Set(\"Content-Type\", \"application/json\")\r\nthen w.Write(somedata compressed by gzip)\r\n\r\n\r\n### What did you expect to see?\r\nThe Content-Type in response message captured by troubleshooting tool of chrome/firefox becomes application/x-gzip\r\n\r\n### What did you see instead?\r\nThe Content-Type should be application/json as I set.\r\n\r\n\r\nOn the other hand, if I change the order. call w.Header().Set(\"Content-Type\", \"application/json\") ahead of the w.WriteHeader(http.StatusOK), the Content-Type keeps what it is. Seems setting status ahead of write content-type trigger the logic to DetectContentType automatically. It's overwrite whatever content-type I set later.\r\nBecause of that, gzip content can't be parsed in firefox. Of course, I worked around it by changing the code to set content-type first. But it apparently a trap since there is no doc saying you should always set content-type before set status by WriteHeader.\r\n",
	"user": {
		"login": "GordonJiang",
		"id": 14911539,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-09-13T01:16:01Z",
	"created_at": "2016-09-13T00:45:36Z",
	"updated_at": "2016-09-13T02:43:17Z"
}
