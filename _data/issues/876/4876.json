{
	"id": 51282765,
	"number": 4876,
	"state": "closed",
	"title": "reflect: clarify behavior for unexported names",
	"body": "\u003cpre\u003eExported field names inhabit a global namespace but unexported (lower case) field names\nbelong to the namespace of the package in which they lexically appear.\n\nThe \u0026quot;reflect\u0026quot; API doesn't mention this, which can lead to surprising results\nwhen searching for a lowercase field by name.\n\n   func (v Value) FieldByName(name string) Value\n   FieldByName returns the struct field with the given name.\n   It returns the zero Value if no field was found.\n   It panics if v's Kind is not struct.\n\nIn the example below, a struct has two fields, both called r, but belonging to different\nnamespaces.  The \u0026quot;reflect\u0026quot; algorithm, when searching for \u0026quot;r\u0026quot;, finds\nboth, and assumes there's a conflict when in reality there isn't.  Without changing the\nexisting API, that's the best we can do, but it would be useful to document this because\notherwise the choice of unexported field names inside one package can have subtle\neffects on another package using reflection.\n\n\u003ca href=\"http://play.golang.org/p/WTj5d06CQ3\"\u003ehttp://play.golang.org/p/WTj5d06CQ3\u003c/a\u003e\n\n(gri: I know you know all this already.)\u003c/pre\u003e",
	"user": {
		"login": "adonovan",
		"id": 5658175,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		},
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"closed_at": "2014-12-08T10:25:58Z",
	"created_at": "2013-02-22T16:22:48Z",
	"updated_at": "2016-06-24T22:33:42Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
