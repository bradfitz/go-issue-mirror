{
	"id": 117872186,
	"body": "Right, that's the algorithm I was trying to describe.\r\n\r\nI suspect value types \u003e1k are very uncommon.  You almost always want to use pointers-to-big-thing instead.\r\n\r\nI guess I'm still a bit confused as to how the current setup doesn't work.  There should only be a single shared library with the runtime package in it, and zerovalue is in the runtime package. Does the problem occur when compiling other shared libraries with other packages - where the compiler ends up putting a large runtime.zerovalue symbol in that other shared library, and when that shared library is loaded, it can't affect the runtime.zerovalue that was already loaded in the runtime-containing shared library?\r\n\r\nIf my description is accurate, it sounds like the dynamic linker should at least barf when this happens instead of silently ignoring the problem.  Is there any way to make the dynamic linker barf in this situation?  I can imagine there might be other cases where the compiler introduces runtime data symbols that might interact badly with dynamic linking.",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-02T01:47:28Z",
	"updated_at": "2015-07-02T01:47:28Z"
}
