{
	"id": 92225648,
	"number": 11491,
	"state": "closed",
	"title": "cmd/compile: runtime.zerovalue can be too small when using shared libraries",
	"body": "AIUI runtime.zerovalue is only used in maps: it is what is copied when a lookup misses. The compiler takes some care to make it be the smallest value needed: it is the size of the largest type that is seen being put into a hash (there is a comment that suggests it's also used by 2-arg type cast, but I'm not sure that's true any more). Anyway, this kind of closed world assumption is not safe in a shared library: just because the compiler / linker does not see a type being put into a map does not mean that it is not going to be put into a hash in some module that links the shared library containing the type data.\r\n\r\nI guess the safest fix is to make runtime.zerovalue a local symbol and ensure that the zerovalue for a shared library is as large as any type defined by that shared library (possibly only need to consider exported types?).  Not sure if there is a small enough fix to be safe for 1.5.",
	"user": {
		"login": "mwhudson",
		"id": 672022,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "mwhudson",
		"id": 672022,
		"type": "User",
		"site_admin": false
	},
	"comments": 27,
	"closed_at": "2015-08-26T00:03:40Z",
	"created_at": "2015-06-30T23:39:52Z",
	"updated_at": "2016-09-04T20:47:13Z",
	"milestone": {
		"id": 1182837,
		"number": 25,
		"title": "Go1.6Early"
	}
}
