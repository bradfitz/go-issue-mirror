{
	"id": 66093238,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eStack copying is disabled if any C functions are on the current stack segment.\nIt should also be disabled if any C functions are deferred by functions on the\ncurrent stack segment.\n\nCgo writes C function declarations pretending every arg is a pointer.\nIf the C function is deferred, it does not inhibit stack copying on split.\nThe stack copying code believes the C declaration, possibly misinterpreting\nintegers as pointers.\n\t\nProbably the right fix for Go 1.3 is to make deferred C functions inhibit\nstack copying.\n\t\nFor Go 1.4 and beyond we probably need to make cgo generate Go code\nwith correct prototypes, not C code for 6c with incorrect prototypes.\nNow that we have //go:noescape that should be possible.\n\ncd $GOROOT/misc/cgo/test\nhg clpatch 83820043 # if not yet submitted\ngo test -run 7695 -broken\n\nruntime: bad pointer in frame _/Users/rsc/g/go2/misc/cgo/test/backdoor.Issue7695 at\n0xc20803a258: 0x1\nfatal error: bad pointer!\n\nruntime stack:\nruntime.throw(0x4303d16)\n\t/Users/rsc/g/go2/src/pkg/runtime/panic.c:520 +0x69 fp=0x7fff5fbff2a0\nadjustpointers(0xc20803a258, 0x7fff5fbff340, 0x7fff5fbff3e8, 0x42de750)\n\t/Users/rsc/g/go2/src/pkg/runtime/stack.c:370 +0x330 fp=0x7fff5fbff308\nadjustdefers(0xc208003680, 0x7fff5fbff3e8)\n\t/Users/rsc/g/go2/src/pkg/runtime/stack.c:529 +0x1dd fp=0x7fff5fbff380\ncopystack(0xc208003680, 0x7, 0x2000)\n\t/Users/rsc/g/go2/src/pkg/runtime/stack.c:572 +0x1a8 fp=0x7fff5fbff438\nruntime.newstack()\n\t/Users/rsc/g/go2/src/pkg/runtime/stack.c:707 +0x442 fp=0x7fff5fbff580\nruntime.morestack()\n\t/Users/rsc/g/go2/src/pkg/runtime/asm_amd64.s:228 +0x61 fp=0x7fff5fbff588\n\ngoroutine 22 [stack split]:\n_/Users/rsc/g/go2/misc/cgo/test.recurse(0x61)\n\t/Users/rsc/g/go2/misc/cgo/test/issue7695_test.go:27 fp=0x43e02a8\n_/Users/rsc/g/go2/misc/cgo/test.recurse(0x62)\n\t/Users/rsc/g/go2/misc/cgo/test/issue7695_test.go:31 +0x52 fp=0x43e06b8\n_/Users/rsc/g/go2/misc/cgo/test.recurse(0x63)\n\t/Users/rsc/g/go2/misc/cgo/test/issue7695_test.go:31 +0x52 fp=0x43e0ac8\n_/Users/rsc/g/go2/misc/cgo/test.recurse(0x64)\n\t/Users/rsc/g/go2/misc/cgo/test/issue7695_test.go:31 +0x52 fp=0x43e0ed8\n_/Users/rsc/g/go2/misc/cgo/test.TestIssue7695(0xc208078090)\n\t/Users/rsc/g/go2/misc/cgo/test/issue7695_test.go:24 +0x15a fp=0x43e0f68\ntesting.tRunner(0xc208078090, 0x4303730)\n\t/Users/rsc/g/go2/src/pkg/testing/testing.go:422 +0x8b fp=0x43e0f98\nruntime.goexit()\n\t/Users/rsc/g/go2/src/pkg/runtime/proc.c:1426 fp=0x43e0fa0\ncreated by testing.RunTests\n\t/Users/rsc/g/go2/src/pkg/testing/testing.go:503 +0x8cf\n\n...\n\nNote that backdoor.Issue7695 is the deferred C function. It is not an active frame and\nas such does not appear in the stack being split (goroutine 22 above).\u003c/pre\u003e\n\n_Labels changed: added **release-go1.3**._\n\n_Owner changed to @randall77._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-04-03T02:31:07Z",
	"updated_at": "2014-12-08T10:42:44Z"
}
