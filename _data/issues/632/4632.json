{
	"id": 51282410,
	"number": 4632,
	"state": "closed",
	"title": "json unmarshaler doesn't work well with embedded structs",
	"body": "by **brian@tarricone.org**:\n\n\u003cpre\u003eI'm using the encoding/json Unmarshal() function to parse REST API responses.  Various\nAPI endpoints return different kinds of data depending on the resource it points to, but\nall endpoints have some common properties like start, end, page_size, etc.  So my\nthought was to create a \u0026quot;common\u0026quot; struct for these common fields, and embed it\nin each of the resource structs where they are used.  However, it appears the JSON\nunmarshaler doesn't deal with embedded structs.\n\nWhat steps will reproduce the problem?\n\u003ca href=\"http://play.golang.org/p/COiwVz1_tn\"\u003ehttp://play.golang.org/p/COiwVz1_tn\u003c/a\u003e\n\nWhat is the expected output?\nI would expect that the two lines of output contain the same data (specifically, that\nthe \u0026quot;PageSize\u0026quot; member would be set to 50 in both of them).\n\nWhat do you see instead?\nThe \u0026quot;PageSize\u0026quot; member is left zeroed when the AccountListBad struct is passed\nto the unmarshaler.\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\nSorry, not sure how to tell which of 5g/6g/8g I'm using.  Definitely *not* using gccgo.\n\nWhich operating system are you using?\nLinux (3.6.8 kernel)\n\nWhich version are you using?  (run 'go version')\ngo version go1.0.3\nAlso tried with a self-built:\ngo version devel +08a1396e9aa7 Tue Jan 08 17:23:46 2013 +1100 linux/amd64\n\nPlease provide any additional information below.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:24:35Z",
	"created_at": "2013-01-08T13:22:44Z",
	"updated_at": "2016-06-24T22:30:55Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
