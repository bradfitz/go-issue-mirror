{
	"id": 156797449,
	"body": "Nicely done...\n\n\nOn Saturday, November 14, 2015, Austin Clements \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e I increased the fidelity of the system call model in my proof and finally\n\u003e found a way this can happen and I've managed to reproduce it with a few\n\u003e helping hacks in the runtime.\n\u003e\n\u003e The cause is ultimately quite simple: In mHeap_SysAlloc, if an allocation\n\u003e at arena_used would exceed arena_end (but wouldn't yet push us past\n\u003e arena_start+_MaxArean32), we try to extend the arena reservation by another\n\u003e 256 MB. Note that this could be a small allocation, which is consistent\n\u003e with this bug. We extend the arena by calling sysReserve, which calls mmap\n\u003e without MAP_FIXED on 32-bit, which means the address is just a hint and the\n\u003e kernel can put the mapping wherever it wants. If it happens to choose an\n\u003e address below arena_start (the kernel also chose arena_start, so there\n\u003e could be lots of space below it), then it's the beginning of the end. We\n\u003e don't detect that case in mHeap_SysAlloc. In fact, mHeap_SysAlloc will\n\u003e totally screw up arena_end and arena_used and then return the low pointer\n\u003e to mHeap_Grow, which will subtract arena_start from the pointer, which will\n\u003e underflow and produce a huge value of p, which we'll then use as an index\n\u003e in to h_spans, which will panic.\n\u003e\n\u003e The fix is just to check for this case in mHeap_SysAlloc. I'll roll a CL\n\u003e tomorrow or Monday.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/13143#issuecomment-156781889\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-15T10:02:27Z",
	"updated_at": "2015-11-15T10:02:27Z"
}
