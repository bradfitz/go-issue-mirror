{
	"id": 66065098,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eI am not sure how this should be fixed. It might not be easy. I never dealt with these\nin the past. But after some investigation, here is what I see is happening\n(\u003ca href=\"http://goo.gl/th2fJ\"\u003ehttp://goo.gl/th2fJ\u003c/a\u003e for details).\n\nAll Windows apis, that take file name, accept it in a form that needs to be processed\nbefore it gets passed to correspondent file system:\n- it can contains relative paths, then \"file name processing\" code tucks in current\ndirectory in front;\n- all / are converted into \\;\n- it deals with . and ..;\n- ... and so on ...\n\nIt appears that this \"file name processor\" can only deal with files with absolute path\nless then ~ 260 characters long. So even if we pass file name like \"alex.txt\" to it, it\nmight fail, because current directory full path might be too long already.\n\nThere is one way to overcome ~ 260 length limitation - it is to skip \"file name\nprocessor\", and pass file name directly to file system (the file length limit there is\n~32000). The way to do it is to prefix file name with \\\\?\\, so c:\\tmp\\alex.txt would\nbecome \\\\?\\c:\\tmp\\alex.txt and so on. The down side to this solution is that we loose\nall \"file name processing\" along the way, so we need to do it all manually. All file\nnames have to be full path (absolute), we must reject file names like . and .. by hand\nand so on.\n\nI do not think we should \"convert\" all our file names into \\\\?\\... in syscall by\ndefault. It could be quite dangerous, because it is possible to create files with weird\nnames, like . and .. and such. Normal shell utilities and GUI wouldn't be able to deal\nwith those. We might discover that, while perfectly accepted by Windows api, these might\nbe rejected by other programs / apis. It could be confusing for some users to find that\nthey pass \"alex.txt\" into Go and to see that Windows api gets \\\\?\\c:\\tmp\\alex.txt.\n\nWe might let things be the way they are, but monitor for particular Windows api errors\nand call api second time with \\\\?\\... form of the file name. But again, it feels too\nmagical to me.\n\nOn the other hand, nothing stops our users from doing os.Create(`\\\\?\\c:\\tmp\\alex.txt`),\nif they want to. So, I think, the issue here are not long file names as such, but more\nthe fact that our Go builder hit this problem \u003ca href=\"http://goo.gl/FbblU\"\u003ehttp://goo.gl/FbblU\u003c/a\u003e. So, perhaps we can\nchange go command in such way that it is unlikely to happen. Looking at particular error:\n\n# ..\\test\\bench\\go1\n#\n_/C_/Users/ADMINI~1/AppData/Local/Temp/2/gobuilder/windows-amd64-0449267813c1/go/test/bench/go1\nmkdir\nC:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\2\\go-build317224146\\_\\C_\\Users\\ADMINI~1\\AppData\\Local\\Temp\\2\\gobuilder\\windows-amd64-0449267813c1\\go\\test\\bench\\go1\\_test\\_\\C_\\Users\\ADMINI~1\\AppData\\Local\\Temp\\2\\gobuilder\\windows-amd64-0449267813c1\\go\\test\\bench\\:\nThe filename or extension is too long.\n\nit happens during\n\ngo test ..\\test\\bench\\go1\n\nIf we break long path, we could see what is happening. It starts with TEMP directory\n\nC:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\2\\\n\nwe created a temp directory there\n\ngo-build317224146\\\n\nthen we converted full path of ..\\test\\bench\\go1 into import path (because it is not in\nGOPATH)\n\n_\\C_\\Users\\ADMINI~1\\AppData\\Local\\Temp\\2\\gobuilder\\windows-amd64-0449267813c1\\go\\test\\bench\\go1\\\n\n(watch full TEMP path here again that was created by gobuilder),\n\nthen we get _test + import-path again directory that holds transient test files\n\n_\\C_\\Users\\ADMINI~1\\AppData\\Local\\Temp\\2\\gobuilder\\windows-amd64-0449267813c1\\go\\test\\bench\\\n\nPerhaps, some of these rules can be changed to shorten the path.\n\nMaybe\n\ngo test ..\\test\\bench\\go1\n\non gobuilder is not important, but I am concerned with what happens if people start\ncreating deep directories inside their GOPATH. Especially encouraged by \"go get ...\"\nconventions. Something like that:\n\nC:\\a\\code\\src\\code.google.com\\p\\gowingui\\code.google.com\\p\\codesearch\n\nAlex\u003c/pre\u003e",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-03-23T04:12:41Z",
	"updated_at": "2014-12-08T10:17:27Z"
}
