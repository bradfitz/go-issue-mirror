{
	"id": 66091556,
	"body": "\u003ca id=\"c7\"\u003e\u003c/a\u003eComment 7:\n\n\u003cpre\u003eThere is another similar situation in std lib, and it's also related to copying.\n\nsync.Cond contains a pointer to itself to detect copying.\nSo anything containing sync.Cond won't be finalized...\n\nI have an idea only how to make direct self-pointers work (which is enough for both\ncases), but not larger cycles.\n\nIt's unclear to me whether the following comment refers to a cycles with several objects\nwith finalizers, or to a cycle with a single object with finalizer as well. It seems to\nbe describing the latter, but there is an obvious order for the latter case (just run\nthe single finalizer):\n\n    Finalizers are run in dependency order: if A points at B, both have\n    finalizers, and they are otherwise unreachable, only the finalizer for A\n    runs; once A is freed, the finalizer for B can run. If a cyclic\n    structure includes a block with a finalizer, that cycle is not\n    guaranteed to be garbage collected and the finalizer is not guaranteed\n    to run, because there is no ordering that respects the dependencies.\n\nRuss?\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-02-26T08:30:48Z",
	"updated_at": "2014-12-08T10:40:56Z"
}
