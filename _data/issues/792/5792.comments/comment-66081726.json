{
	"id": 66081726,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003eThe race happens NOT inside of kernel, it happens in our code.\nThe race happens between read/write and close. Consider the following code:\n\n// thread 1\n... = write(pipe.fd, ....);\n\n// thread 2\nclose(pipe.fd);\npipe.fd = -1;\n\nThread 1 loads pipe.fd value into register, then thread 2 closes the fd, then some other\nthread 3 create a socket that happened to reuse the fd, then thread 1 sends your credit\ncard number into random socket.\n\nIn net.Conn we do very special things to prevent such things, i.e. read/write either\nuses still alive correct fd or do not issue read/write at all.\nAll other things (files, pipes) are not like this, they are \"single threaded\", i.e. you\ncan not call read/write and concurrently close it.\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-06T21:48:27Z",
	"updated_at": "2014-12-08T10:31:46Z"
}
