{
	"id": 51281634,
	"number": 4096,
	"state": "open",
	"title": "spec: accept slices and single elements in one append?",
	"body": "\u003cpre\u003eKen points out that using append is harder than it might be.\nRight now if you have var xs []string and want to append a, b, string, cs []string, and\nd string, you have to do\n\nxs = append(xs, a, b)\nxs = append(xs, cs...)\nxs = append(xs, d)\n\nor\n\nxs = append(append(append(xs, a, b), cs...), d)\n\nThe suggestion is to accept\n\nxs = append(xs, a, b, c, d)\n\nThere is an ambiguity for slices of interface{}. If you have\n\nvar xs []interface{}\nvar ys []interface{}\n\nxs = append(xs, ys)\n\nis ambiguous: does it append a single interface{}(ys) or does it append each of the\nelements in ys?\nWe would have to give this the same meaning it has today, meaning the former.\n\nThus the rules for append to a []T would be that it takes one or more elements z and for\neach:\n1. If z can be assigned to type T and is not 'z...', it is added as a single element.\n2. Else if z is a slice of T, its elements are appended.\n3. Else the compiler complains.\n\nWe would need to keep\nxs = append(xs, ys...)\nas a special form for resolving the ambiguity in the other direction when T =\ninterface{}, and for backwards compatibility.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "LanguageChange"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 8,
	"created_at": "2012-09-18T15:08:10Z",
	"updated_at": "2015-04-14T19:45:18Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	}
}
