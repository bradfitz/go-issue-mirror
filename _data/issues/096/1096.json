{
	"id": 51277338,
	"number": 1096,
	"state": "closed",
	"title": "spurious and unhelpful typechecking loop errors",
	"body": "\u003cpre\u003etwo examples from david roundy\n\n---\npackage bridge\n\ntype BiddingRule struct {\n\tmkscore func()\n}\n\ntype ScoringRule struct {\n\tscore func()\n}\n\n// If I remove LimitPass from the following, I get a useful error\n// message!\nvar Convention = []BiddingRule{ LimitPass }\n\nfunc simpleScore(rule []ScoringRule) int {\n\treturn 0\n}\n\nvar LimitPass = BiddingRule {\n\tfunc() {\n\t\tallrules := make([]ScoringRule,len(Convention)) // typechecking loop\n\t\tfor _,r := range allrules {\n\t\t\tsimpleScore(r) // typechecking loop\n\t\t}\n\t},\n}\n--\n\n\npackage bridge\n\ntype BiddingRule struct {\n\tmkscore func() (score func())\n}\n\ntype ScoringRule struct {\n\tscore func()\n}\n\n// If I remove LimitPass from the following, I get a useful error\n// message!\nvar Convention = []BiddingRule{ LimitPass }\n\nfunc makeScoringRules(bid string) {\n\tfor _,c0 := range Convention {\n\t\tvar c BiddingRule = c0 // typechecking loop\n\t\t_ = c\n\t}\n}\n\nfunc simpleScore(rule []ScoringRule) int {\n\treturn 0\n}\n\nvar LimitPass = BiddingRule {\n\tfunc() (func()) {\n\t\tallrules := make([]ScoringRule,len(Convention)) // typechecking loop\n\t\treturn func() {\n\t\t\tfor _,r := range allrules {\n\t\t\t\tsc := simpleScore([]ScoringRule{r}) // typechecking loop\n\t\t\t\t_ = sc\n\t\t\t}\n\t\t}\n\t},\n}\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2014-12-08T10:06:58Z",
	"created_at": "2010-09-10T15:45:18Z",
	"updated_at": "2016-06-24T19:20:03Z"
}
