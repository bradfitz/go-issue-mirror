{
	"id": 51287282,
	"number": 7839,
	"state": "closed",
	"title": "go.types/go/ssa: should not use changetype to form unbound method references",
	"body": "\u003cpre\u003eWhat steps reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n\nCreate a file with the following contents (extracted from ddd.go in the go test suite):\n\npackage main\n\ntype T struct {}\n\nfunc (*T) Sum(args ...int) int { return 0 }\n\ntype U struct {\n        *T\n}\n\nfunc main() {\n        U.Sum(U{}, 1, 3, 5, 1)\n}\n\n2. Run ssadump -build=F over the program.\n\nWhat happened?\n\nThe changetype instruction is used to produce a value for the unbound method reference.\n\nt0 = changetype func(U, args ...int) int \u0026lt;- func(args ...int) int ((U).Sum) func(U,\nargs ...int)\n\nWhat should have happened instead?\n\nThe changetype instruction should not be used, as the conversion from func (U) (...int)\nto func(U, ...int) is not necessarily value preserving: it is possible that the former\ntype uses a different calling convention than the latter. Instead, a thunk should be\ngenerated.\n\nPlease provide any additional information below.\n\nThis is true for gccgo for example, which passes receivers by reference so that method\nfunction pointers can be shared between the value type's method table and the pointer\ntype's method table.\u003c/pre\u003e",
	"user": {
		"login": "pcc",
		"id": 425024,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2014-12-08T10:43:27Z",
	"created_at": "2014-04-23T02:01:18Z",
	"updated_at": "2016-06-25T01:32:50Z"
}
