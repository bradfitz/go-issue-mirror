{
	"id": 51276714,
	"number": 614,
	"state": "closed",
	"title": "URL String method over-encodes pieces",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\n1. Parse \n\u0026quot;\u003ca href=\"http://mt0.google.com/vt/lyrs=m\"\u003ehttp://mt0.google.com/vt/lyrs=m\u003c/a\u003e@118\u0026amp;hl=en\u0026amp;x=4\u0026amp;y=5\u0026amp;z=4\u0026amp;s=G\u0026quot;\nand \nconvert back to a string.\n2. Result is\n\u0026quot;\u003ca href=\"http://mt0.google.com/vt/lyrs%3dm\"\u003ehttp://mt0.google.com/vt/lyrs%3dm\u003c/a\u003e@118%26hl%3den%26x%3d4%26y%3d\n5%26z%3d4%26s%3dG\u0026quot;.\n3. mt0.google.com rejects the latter request, not the former.\n\nRFC 3986 seems to say that the two URLs should be equivalent\n(note that there is no ? in either, so the thing that looks like\nquery parameters is not actually query parameters) and that\nmt0.google.com is in violation of the spec.\n\nEven so, RFC 3986 does not require escaping \u0026amp; and = inside\nthe file path section of the URL, so String might as well not\nescape them.  That will fix the interaction above, though it\nwould also mean that parsing the URL in step 2 would produce\nthe URL in step 1. \n\nThe tension here is that RFC 3986 says these URLs are the\nsame, so Go gives them the same internal representation,\nyet mt0.google.com only accepts one of them.  Switching to\nthe minimally escaped version as canonical will placate\nmt0.google.com and is probably worth doing.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2014-12-08T10:05:15Z",
	"created_at": "2010-02-20T21:10:44Z",
	"updated_at": "2016-06-24T19:13:53Z"
}
