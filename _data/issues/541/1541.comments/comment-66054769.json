{
	"id": 66054769,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eJust had some fun actually proving that the issue was indeed leftover\ndata in the stack.  I've used the same program posted in the bug\ndescription, but only changed it to remove the sleeps.  The used code\nprogram may be found at:\n\n  \u003ca href=\"http://paste.ubuntu.com/570374/\"\u003ehttp://paste.ubuntu.com/570374/\u003c/a\u003e\n\nWithout instrumentation, this is the output shown by the program:\n\n  2011/02/22 01:07:17 Making big map...\n  2011/02/22 01:07:24 Done...\n  2011/02/22 01:07:24 Memory allocated:595897632\n  2011/02/22 01:07:24 Deleting entries...\n  2011/02/22 01:07:26 Done...\n  2011/02/22 01:07:26 Memory allocated:595897632\n  2011/02/22 01:07:26 Garbage collecting...\n  2011/02/22 01:07:26 Memory allocated:595897920\n  2011/02/22 01:07:26 Re-adding entries...\n  2011/02/22 01:07:32 Done...\n  2011/02/22 01:07:32 Memory allocated:1190788064\n\nHere we go:\n\n  $ gdb --args ./sandbox\n\nRun the program, and stop before garbage collection:\n\n  (gdb) b *0x401148\n  Breakpoint 1 at 0x401148: file /home/niemeyer/mem-use/sandbox.go, line 27.\n  (gdb) r\n  Starting program: /home/niemeyer/mem-use/sandbox \n  2011/02/22 00:45:22 Making big map...\n  2011/02/22 00:45:29 Done...\n  2011/02/22 00:45:29 Memory allocated:596245856\n  2011/02/22 00:45:29 Deleting entries...\n  2011/02/22 00:45:31 Done...\n  2011/02/22 00:45:31 Memory allocated:596245856\n  2011/02/22 00:45:31 Garbage collecting...\n  \n  Breakpoint 1, main.main () at /home/niemeyer/mem-use/sandbox.go:27\n  27          runtime.GC()\n\nThis is the 'm' variable in the stack:\n\n  (gdb) p/x $rsp+0x40\n  $1 = 0xf840005ec0\n  (gdb) x/x $rsp+0x40\n  0xf840005ec0:   0x40026380\n\nThis is the iterator from the range:\n\n  (gdb) p/x $rsp+0xf8\n  $2 = 0xf840005f78\n  (gdb) x/x $rsp+0xf8\n  0xf840005f78:   0x00000064\n\nWhich also references the map:\n\n  (gdb) x/x $rsp+0xf8+56\n  0xf840005fb0:   0x40026380\n\nIf we zero both of them out (they're not used again),\n\n  (gdb) p *(void**)0xf840005ec0 = 0\n  $3 = (void *) 0x0\n  (gdb) python gdb.inferiors()[0].write_memory(0xf840005f78, \"\\x00\"*136)\n\nwe can see the memory being reused due to a the collection\nof the old map:\n\n  (gdb) c\n  Continuing.\n  2011/02/22 00:48:38 Memory allocated:42462704\n  2011/02/22 00:48:38 Collecting again...\n  2011/02/22 00:48:38 Re-adding entries...\n  2011/02/22 00:48:45 Done...\n  2011/02/22 00:48:45 Memory allocated:598265904\u003c/pre\u003e",
	"user": {
		"login": "niemeyer",
		"id": 378683,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-02-22T04:17:34Z",
	"updated_at": "2014-12-08T10:08:48Z"
}
