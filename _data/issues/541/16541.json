{
	"id": 168388068,
	"number": 16541,
	"state": "closed",
	"title": "wiki: cgo wiki examples of function pointer use the default prototype for callbacks",
	"body": "Hey!\r\n\r\nThe [wiki page about how to use function pointer callbacks](https://github.com/golang/go/wiki/cgo#function-pointer-callbacks) emits a warning with recent versions of gcc (due to warning being enabled by default now):\r\n\r\n```\r\n$ go build\r\n# _/home/bernat/src/ccalbacks\r\n./cfuncs.go: In function ‘callOnMeGo_cgo’:\r\n./cfuncs.go:11:12: warning: implicit declaration of function ‘callOnMeGo’ [-Wimplicit-function-declaration]\r\n     return callOnMeGo(in);\r\n            ^\r\n```\r\n\r\nIt's easy to silent the warning (with `-Wno-implicit-function-declaration`) but this also means that the compiler is working with the default `int f()` prototype and there is no sanity check available. It's a bit of chicken-egg problems since the header for the Go functions (`_cgo_export.h`) is generated only after so we can't use it yet.\r\n\r\nI don't know if there exists a workaround that could be documented in the wiki or if this is a weakness to be fixed in cgo.",
	"user": {
		"login": "vincentbernat",
		"id": 631446,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2016-07-29T20:57:23Z",
	"created_at": "2016-07-29T18:41:26Z",
	"updated_at": "2016-07-30T07:10:56Z"
}
