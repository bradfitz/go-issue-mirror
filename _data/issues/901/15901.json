{
	"id": 157601763,
	"number": 15901,
	"state": "closed",
	"title": "database/sql, net/http: deadlock hangs on linux",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n```\r\ngo version go1.6.2 linux/amd64\r\n```\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\nUbuntu 16.04 64-bit and alpine 3.3\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/user/work\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n3. What did you do?\r\n\r\nI am building a database/sql driver. I noticed that on linux machines (tested with Ubuntu and alpine), the `go test` tool will deadlock and timeout (after 10 minutes).\r\n\r\nThe code is available in this repo: https://github.com/F21/deadlock\r\n\r\n`driver.go`:\r\n\r\n```go\r\npackage deadlock\r\n\r\nimport (\r\n\t\"database/sql\"\r\n\t\"database/sql/driver\"\r\n\t\"errors\"\r\n\t\"fmt\"\r\n\t\"net/http\"\r\n)\r\n\r\ntype httpClient struct {\r\n\thttpClient *http.Client // \u003c- Do not need to wait for timeout if we remove this struct member and do not import net/http\r\n}\r\n\r\ntype conn struct{}\r\n\r\nfunc (c *conn) Prepare(query string) (driver.Stmt, error) {\r\n\treturn nil, errors.New(\"prepare() not supported\")\r\n}\r\n\r\nfunc (c *conn) Close() error {\r\n\treturn nil\r\n}\r\n\r\nfunc (c *conn) Begin() (driver.Tx, error) {\r\n\treturn nil, errors.New(\"Begin() not supported\")\r\n}\r\n\r\nfunc (c *conn) Exec(query string, args []driver.Value) (driver.Result, error) {\r\n\r\n\titems := []int{1, 2}\r\n\tfmt.Println(items[2]) //Should cause a panic\r\n\r\n\treturn nil, errors.New(\"error!\")\r\n}\r\n\r\ntype Driver struct{}\r\n\r\nfunc (d *Driver) Open(dsn string) (driver.Conn, error) {\r\n\r\n\tconn := \u0026conn{}\r\n\r\n\treturn conn, nil\r\n}\r\n\r\nfunc init() {\r\n\tsql.Register(\"deadlock\", \u0026Driver{})\r\n}\r\n```\r\n\r\n`driver_test.go`:\r\n```go\r\npackage deadlock\r\n\r\nimport (\r\n\t\"database/sql\"\r\n\t\"testing\"\r\n)\r\n\r\nfunc TestExecDeadlock(t *testing.T) {\r\n\r\n\tdb, err := sql.Open(\"deadlock\", \"someserver:1234\")\r\n\r\n\tif err != nil {\r\n\t\tt.Fatalf(\"error connecting: %s\", err.Error())\r\n\t}\r\n\r\n\tdefer db.Close()\r\n\r\n\tdb.Exec(\"some statement\")\r\n}\r\n```\r\n\r\n`tool/main.go`:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"database/sql\"\r\n\t\"fmt\"\r\n\t_ \"github.com/F21/deadlock\"\r\n)\r\n\r\nfunc main() {\r\n\tdb, err := sql.Open(\"deadlock\", \"someserver:1234\")\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t}\r\n\r\n\tdefer db.Close()\r\n\r\n\tdb.Exec(\"some statement\")\r\n\r\n\tfmt.Println(\"Done!\")\r\n}\r\n```\r\n`driver.go` contains a bug on line 32 that will cause a panic.\r\n\r\nIf we run `go test` on the root of the repo, it will hang and will only terminate until it reaches the 10 minute timeout.\r\n\r\nIf we run the command: `go run tool/main.go` we also see that it hangs forever.\r\n\r\nThe interesting thing is that if we remove lines 11 to 13 in `driver.go` and remove the `net/http` import, it fails immediately and gives us an error: `fatal error: all goroutines are asleep - deadlock!`\r\n\r\nOn Windows (tested on Windows 10 64-bit), doing the above does not hang and it fails immediately.\r\n\r\n4. What did you expect to see?\r\nThe deadlock should definitely not hang. It should fail fast like on Windows. However, rather than having an error about a deadlock, I was expecting an error about the panic.\r\n\r\n5. What did you see instead?\r\nThe deadlock hangs on linux and fails immediately on Windows. After timing out on Linux, we get this output:\r\n\r\n```\r\nSIGQUIT: quit\r\nPC=0x460891 m=0\r\n\r\ngoroutine 0 [idle]:\r\nruntime.futex(0x9deba8, 0x0, 0x0, 0x0, 0x0, 0x9de150, 0x0, 0x0, 0x40f3c4, 0x9deba8, ...)\r\n\t/usr/local/go/src/runtime/sys_linux_amd64.s:306 +0x21\r\nruntime.futexsleep(0x9deba8, 0x0, 0xffffffffffffffff)\r\n\t/usr/local/go/src/runtime/os1_linux.go:40 +0x53\r\nruntime.notesleep(0x9deba8)\r\n\t/usr/local/go/src/runtime/lock_futex.go:145 +0xa4\r\nruntime.stopm()\r\n\t/usr/local/go/src/runtime/proc.go:1538 +0x10b\r\nruntime.findrunnable(0xc82001c000, 0x0)\r\n\t/usr/local/go/src/runtime/proc.go:1976 +0x739\r\nruntime.schedule()\r\n\t/usr/local/go/src/runtime/proc.go:2075 +0x24f\r\nruntime.goexit0(0xc820001680)\r\n\t/usr/local/go/src/runtime/proc.go:2210 +0x1f9\r\nruntime.mcall(0x7ffea7a9f320)\r\n\t/usr/local/go/src/runtime/asm_amd64.s:233 +0x5b\r\n\r\ngoroutine 1 [chan receive]:\r\ntesting.RunTests(0x8a7148, 0x9d59a0, 0x1, 0x1, 0xc82008d201)\r\n\t/usr/local/go/src/testing/testing.go:583 +0x8d2\r\ntesting.(*M).Run(0xc82004bef8, 0x8a7998)\r\n\t/usr/local/go/src/testing/testing.go:515 +0x81\r\nmain.main()\r\n\tgithub.com/F21/deadlock/_test/_testmain.go:54 +0x117\r\n\r\ngoroutine 17 [syscall, locked to thread]:\r\nruntime.goexit()\r\n\t/usr/local/go/src/runtime/asm_amd64.s:1998 +0x1\r\n\r\ngoroutine 5 [semacquire]:\r\nsync.runtime_Semacquire(0xc82001a1e4)\r\n\t/usr/local/go/src/runtime/sema.go:47 +0x26\r\nsync.(*Mutex).Lock(0xc82001a1e0)\r\n\t/usr/local/go/src/sync/mutex.go:83 +0x1c4\r\ndatabase/sql.(*driverConn).closeDBLocked(0xc82001a1c0, 0x0)\r\n\t/usr/local/go/src/database/sql/sql.go:326 +0x3e\r\ndatabase/sql.(*DB).Close(0xc8200cc160, 0x0, 0x0)\r\n\t/usr/local/go/src/database/sql/sql.go:528 +0x195\r\npanic(0x7894c0, 0xc82000a0d0)\r\n\t/usr/local/go/src/runtime/panic.go:443 +0x4e9\r\ngithub.com/F21/deadlock.(*conn).Exec(0x9fada8, 0x80e2d0, 0xe, 0x9fada8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)\r\n\t/home/user/work/src/github.com/F21/deadlock/driver.go:32 +0x242\r\ndatabase/sql.(*DB).exec(0xc8200cc160, 0x80e2d0, 0xe, 0x0, 0x0, 0x0, 0xc820029e01, 0x0, 0x0, 0x0, ...)\r\n\t/usr/local/go/src/database/sql/sql.go:1035 +0x2c2\r\ndatabase/sql.(*DB).Exec(0xc8200cc160, 0x80e2d0, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)\r\n\t/usr/local/go/src/database/sql/sql.go:1009 +0xbe\r\ngithub.com/F21/deadlock.TestExecDeadlock(0xc820018120)\r\n\t/home/user/work/src/github.com/F21/deadlock/driver_test.go:18 +0x1e8\r\ntesting.tRunner(0xc820018120, 0x9d59a0)\r\n\t/usr/local/go/src/testing/testing.go:473 +0x98\r\ncreated by testing.RunTests\r\n\t/usr/local/go/src/testing/testing.go:582 +0x892\r\n\r\nrax    0xca\r\nrbx    0x0\r\nrcx    0x460893\r\nrdx    0x0\r\nrdi    0x9deba8\r\nrsi    0x0\r\nrbp    0x1\r\nrsp    0x7ffea7a9f178\r\nr8     0x0\r\nr9     0x0\r\nr10    0x0\r\nr11    0x286\r\nr12    0x8\r\nr13    0x8a5d3d\r\nr14    0x9\r\nr15    0x8\r\nrip    0x460891\r\nrflags 0x286\r\ncs     0x33\r\nfs     0x0\r\ngs     0x0\r\n*** Test killed with quit: ran too long (10m0s).\r\nFAIL\tgithub.com/F21/deadlock\t600.006s\r\n```\r\n\r\n\r\n",
	"user": {
		"login": "F21",
		"id": 2263040,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2016-08-29T16:52:25Z",
	"created_at": "2016-05-31T06:53:49Z",
	"updated_at": "2016-08-29T16:52:25Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
