{
	"id": 66092762,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9 by **gregory.tseng@moovweb.com**:\n\n\u003cpre\u003eAhhhhh thanks for clarifying the dual stack behavior. I did not understand your first\ncomment about the short-mode tests.\n\nI've attached a new program that tests each of the Listen protocols individually...\nI understand now that if I specify \"tcp\", it will auto detect and bind to available.\n\nHowever... I'm still observing that, on Windows 7, if I already have a process that\nbinds to both tcp4 and tcp6\n\nand I run go1.2 program, the Listen method with \"tcp\" specified still seems to work.\n\nRandom program bound to 80 in both tcp4 and tcp6\nnetstat -ano | findstr LISTEN | findstr :80\n  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       10328\n  TCP    [::]:80                [::]:0                 LISTENING       10328\n\nRunning go program with net.Listen(\"tcp\", \":http\")\nnetstat -ano | findstr LISTEN | findstr :80\n  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       7604\n  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       10328\n  TCP    [::]:80                [::]:0                 LISTENING       10328\n  TCP    [::]:80                [::]:0                 LISTENING       7604\n\n\nIs this still the expected behavior? Forgive my ignorance if I'm still missing something.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/7598/9/dualstack.go\"\u003edualstack.go\u003c/a\u003e (491 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-22T03:56:36Z",
	"updated_at": "2014-12-08T10:42:15Z"
}
