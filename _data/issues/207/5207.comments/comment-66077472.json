{
	"id": 66077472,
	"body": "\u003ca id=\"c18\"\u003e\u003c/a\u003eComment 18:\n\n\u003cpre\u003eRace detector currently catches the following:\n\nfunc TestRaceMutexOverwrite(t *testing.T) {\n        c := make(chan bool, 1)\n        var mu sync.Mutex\n        go func() {\n                mu = sync.Mutex{}\n                c \u0026lt;- true\n        }()\n        mu.Lock()\n        \u0026lt;-c\n}\n\nConcurrent copy and lock/unlock is not easy to implement. If mutex is copied as a part\nof bigger struct, then the race will most likely be caught on other members.\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-04-07T04:02:16Z",
	"updated_at": "2014-12-22T06:24:05Z"
}
