{
	"id": 224730824,
	"body": "It's not a red herring, in that it really does change the behavior of dtrace.  Agreed, it looks like a dtrace bug.  My email to dtrace-discuss@lists.dtrace.org seems to have gone to /dev/null.  Here's what I sent:\r\n\r\nIn Go, we switched our padding between functions from 0x00 to 0xcc (int3).  It seems to have caused a bad interaction with dtrace, where function returns are no longer picked up by dtrace.  Is this known?  Expected?\r\n\r\nA small c/asm program to reproduce is below (for OSX).\r\n\r\na.c:\r\n```\r\n#include \u003cunistd.h\u003e\r\n\r\nvoid f();\r\n\r\nint main() {\r\n\tfor(;1;) {\r\n\t\tf();\r\n\t\tsleep(1);\r\n\t}\r\n}\r\n```\r\na.s:\r\n```\r\n\t.globl\t_f\r\n_f:\r\n\tretq\r\n\t//int3\r\n```\r\n```\t\r\n\u003e gcc a.c a.s\r\n\u003e ./a.out\r\n```\r\nctrl-T to get the pid.  Then in another window:\r\n```\r\n\u003e sudo dtrace -n 'pid$1::f:' 80480\r\nCPU     ID                    FUNCTION:NAME\r\n  0 198785                          f:entry \r\n  0 198786                              f:0 \r\n  0 198784                         f:return \r\n  0 198785                          f:entry \r\n  0 198786                              f:0 \r\n  0 198784                         f:return \r\n  0 198785                          f:entry \r\n  0 198786                              f:0 \r\n  0 198784                         f:return \r\n```\r\nIf I uncomment the int3 instruction and try again, I get:\r\n```\r\nCPU     ID                    FUNCTION:NAME\r\n  0 197903                          f:entry \r\n  0 197903                          f:entry \r\n  0 197903                          f:entry \r\n```\r\nNote the f:0 and f:return trace items are gone.\r\n\r\nThe Go bug is https://github.com/golang/go/issues/15969 if you're interested.",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-08T21:17:03Z",
	"updated_at": "2016-06-08T21:17:03Z"
}
