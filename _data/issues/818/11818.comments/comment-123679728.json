{
	"id": 123679728,
	"body": "Looks very interesting. I also prototyped a UI library in Go. It shares many of the ideas that you propose.\r\n\r\nIt has two halves: the ui package (described below) and the gui package (not written) for simple widgets.\r\n\r\nThe ui package deals with Windows and Events. It's currently implemented on top of SDL2 using cgo. With ui, one can draw Buffers to Textures and Textures to Windows. However, I call Buffers image.Images and drawing them to Textures happens via draw.Draw. It also has an interesting (I think) solution to the annoying OpenGL thread context issue. In short, one calls Window.Draw with a drawing function that accepts a ui.Canvas. The Canvas has methods for actually drawing to the Window. Window.Draw ships the draw function and Canvas to the thread with the OpenGL context in order to perform all the drawing. This obviates the need for channel operations and context switching for each call to a draw primitive.\r\n\r\nPerhaps you'd like to take a peek: http://godoc.org/github.com/eaburns/T/ui.\r\n\r\nAlso, I'd be interested in ditching my package in order to help out with Shiny. Particularly because the motivation for my ui package is to write a text editor, and you explicitly mention as a target use for Shiny.",
	"user": {
		"login": "eaburns",
		"id": 235271,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-22T11:29:56Z",
	"updated_at": "2015-07-22T11:30:43Z"
}
