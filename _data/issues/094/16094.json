{
	"id": 160933236,
	"number": 16094,
	"state": "open",
	"title": "net/http: canceled requests with Timeout set always return a Timeout error",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\n`go version devel +9e8fa1e Fri Jun 17 15:18:39 2016 +0000 darwin/amd64`\r\n\r\n3. What did you do?\r\n\r\nMake a http.Client with a Timeout. Cancel the request. \r\n\r\nhttps://play.golang.org/p/v-QbAxdj-3\r\n\r\n4. What did you expect to see?\r\n\r\nIf the cause was not a Client.Timeout, then the error should be left alone.\r\n\r\n```\r\nnet/http: request canceled\r\n```\r\n\r\n5. What did you see instead?\r\n\r\nThe error is\r\n\r\n```\r\nnet/http: request canceled (Client.Timeout exceeded while reading body)\r\n```\r\n\r\n---\r\n\r\nThis is because `reqWasCanceled` returns true whatever the reason for the cancelation is, be it a library user cancel or a Timeout. Then `cancelTimerBody.Read` uses that function to add the message.\r\n\r\nThe `(Client.Timeout exceeded while awaiting headers)` message is more likely to be correct (even if slightly racy), because it only adds the message if `!deadline.IsZero() \u0026\u0026 !time.Now().Before(deadline)`.\r\n",
	"user": {
		"login": "FiloSottile",
		"id": 1225294,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		}
	],
	"comments": 4,
	"created_at": "2016-06-17T17:06:47Z",
	"updated_at": "2016-10-07T19:50:58Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	},
	"reactions": {
		"total_count": 3,
		"+1": 3
	}
}
