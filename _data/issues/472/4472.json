{
	"id": 51282193,
	"number": 4472,
	"state": "closed",
	"title": "spec: spec does not exclude impossible type switches and type assertions.",
	"body": "\u003cpre\u003eThe following type switch is not possible:\n\npackage main\n\ntype I interface {\n\tm()\n}\n\ntype T struct{}\n\nfunc (T) n() {}\n\nfunc main() {\n\tvar x I\n\tswitch x := x.(type) {\n\tcase T:\n\t}\n}\n\ngo tool 6g x.go\nx.go:14: impossible type switch case: x (type I) cannot have dynamic type T (missing m\nmethod)\n\ngccgo x.go\nx.go:14:2: error: impossible type switch case (missing method 'm')\n  case T:\n  ^\nx.go:13:9: error: 'x' declared and not used\n  switch x := x.(type) {\n         ^\n\nThe spec doesn't explicitly preclude such type switches. One might argue that they are\nprecluded indirectly because the rewritten example in the spec uses type assertions\nwhich would have the same problem.\n\nHowever, impossible type assertions are also not excluded by the spec.\n\nThe spec should probably be explicit.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2014-12-08T10:23:48Z",
	"created_at": "2012-11-30T04:05:01Z",
	"updated_at": "2016-06-24T22:29:08Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
