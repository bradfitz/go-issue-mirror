{
	"id": 66088259,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003e2^120 may be an exact float64, but the float64s on either side are 2^68 away. The\nfloating point rounding in that range is jumping over more multiples of 2pi than you can\ncount in a uint64. If there is any uncertainty at all in the input, the output is\nmeaningless.\n\nThe answers being given all come down to the accuracy of the argument reduction (2^120\nmod 2pi). You need around 120 bits of 2pi to even start getting significant bits of the\ncosine right, and you need 170 or so to get them all right. Very few implementations\nbother, because this only matters if you assume the argument was also accurate to at\nleast 120 if not 170 or so bits of precision, which at that magnitude is very unlikely.\n\n6g avoids use of x87 instructions, so it must compute cosine in software. The argument\nreduction in src/pkg/math/sin.go, which is a translation of C code from Netlib, says:\n// Partial loss of accuracy begins to occur at x = 2**30 = 1.074e9.  The loss\n// is not gradual, but jumps suddenly to about 1 part in 10e7.  Results may\n// be meaningless for x \u003e 2**49 = 5.6e14.\nThe software Cos(2^120) returns -Inf, presumably due to overflow during argument\nreduction. \nThe software Sincos(2^120), which is different code, returns NaN, +Inf.\nThese are obviously wrong but seem not much worse than picking an arbitrary value from\n[-1, +1] like the other implementations.\n\n8g uses the x87 instruction, which is only defined to work well up to around 2^63. You\nreport 8g returning 0.4779 on your machine, while mine (Intel Core i5) returns\n-0.5600625199559539.\n\nwww.google.com/search?q=cos(2^120) says 0.47796506772 (and it uses floating point math),\nso presumably the machine running the calculator for my query has a CPU more like yours\nthan like mine.\n\n\u003ca href=\"http://www.wolframalpha.com/input/?i=Cos\"\u003ehttp://www.wolframalpha.com/input/?i=Cos\u003c/a\u003e[2^120] says -0.719339800338651, but \n\u003ca href=\"http://www.wolframalpha.com/input/?i=Cos\"\u003ehttp://www.wolframalpha.com/input/?i=Cos\u003c/a\u003e[2^120-Floor[2^120/(2*pi)]*2*pi] says\n-0.9258790228548378673.\n\necho 'c(2^120)' | bc -l says 0.89175216265252557587. (GNU bc)\n\necho 'c(2^120)' | 9 bc -l says -.9258790228548378673. (Research Unix bc)\n\nIt does appear that -0.9258790228548378673 is the right answer. \n\nThe right fix is probably to translate the corresponding routines from the SunPro C\nlibrary (now FreeBSD's C library) to Go, which is where we have obtained a bunch of the\nother functions in package math. If someone wants to do this, great. It might make sense\nto first verify that the C function gives the desired answer.\u003c/pre\u003e\n\n_Labels changed: added **priority-someday**, removed **priority-triage**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-11-20T02:13:54Z",
	"updated_at": "2014-12-08T10:37:46Z"
}
