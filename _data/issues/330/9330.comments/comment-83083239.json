{
	"id": 83083239,
	"body": "\u003e I would like to see a blocking interface, and have designers of game loops who need an asynchronous view of events build it themselves in a separate goroutine and deliver it to their main loop.\r\n\r\nOn [CL 7699](https://go-review.googlesource.com/#/c/7699/), what I propose is a blocking interface at the cost of additional buffering on iOS. I am not suggesting the users to call `Read([]Motion) (n int, err error)` in their main loop. The necessity of blocking interfaces occurred to me when I wanted to fine-tune the reading rate according to my game loop's update rate. It shouldn't hint you that I want to read the events in the same goroutine. We had a sea of ideas above including returning nil if timeout occurs, but none of them are making it into the sensors package. Read the godoc, it says it will block.\r\n\r\nAs I mention above, the main concern is to give the developer a chance to optimize how much they want to block on the event queue. I want to give them blocking interfaces.\r\n\r\n(Sorry for the terminology confusion, you should be able to s/sync/blocking throughout this thread.) ",
	"user": {
		"login": "rakyll",
		"id": 108380,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-03-18T17:43:27Z",
	"updated_at": "2015-03-18T17:59:41Z"
}
