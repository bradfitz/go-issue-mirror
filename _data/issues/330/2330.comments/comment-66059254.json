{
	"id": 66059254,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003e\u003ersc:\nThe issue is that the Emacs syntax-table magic just\nhas no idea that you might have a string that doesn't\nhave escape sequences.  It thinks `\\` is the beginning\nof a `` string followed by a literal ` instead of thinking\nthat it's the whole string.  The problem is that syntax-table\nlooks general but in fact has Lisp and C hard-coded in\nits semantics, and neither has a string like Go's `` strings.\n\nI think there's no way to make syntax-table work for Go\nin this way, so I tried rewriting go-mode-mark-cs to use\na regexp search instead (something I figured would be\nwritten in C and therefore fast).\n\nMy attempt is below.\nIt seemed to have absolutely no effect on highlighting.\nMaybe I misunderstood what go-mode-mark-cs is used for.\n\nThis is my test case: it should alternate highlighted/not.\n\n\"abc\"\ndef\n`ghi`\njkl\n/*mno*/\nprs\n//def\nxyz\n`zyb`\nasdf\n`\\\\`\nasdf\n`\\`\nasdf\n\nRuss\n\n(defun go-find-comment-or-string (pos end)\n \"Return the next comment or string starting at pos and ending by end\n as a pair (START . END) indicating the extent, or else return nil\n (or whatever it is that a failed if evaluates to).  Mangles buffer point.\"\n\n (goto-char pos)\n (if (re-search-forward \"//|/\\\\*|\\\".|'.|`.\" end t)\n   ;; Found beginning of something.  Match is length 2 always.\n   (let ((begin (- (point) 2)))\n     (goto-char begin)\n     (if (re-search-forward\n\"//.*|/\\\\*.*?\\\\*/|\\\"([^\\\"\\\\]|\\\\\\\\.)*\\\"|'([^\\'\\\\]|\\\\\\\\.)*'|`[^`]*`\")\n       (cons begin (point))))))\n\n(defun go-mode-mark-cs (end)\n \"Mark comments and strings up to point END.  Don't call this\ndirectly; use `go-mode-cs'.\"\n (setq end (min end (point-max)))\n (go-mode-parser\n  (let* ((pos go-mode-mark-cs-end)\n         (state (go-find-comment-or-string pos end)))\n    ;; Mark comments and strings\n    (while state\n      (let ((p0 (car state)) (p1 (cdr state)))\n        (put-text-property p0 (- p1 1) 'go-mode-cs (cons p0 p1))\n        (setq pos p1)\n        (setq state (go-find-comment-or-string pos end))))\n    ;; Update state\n    (setq go-mode-mark-cs-end pos))))\n    \n---------------\n\n\u003eaustin:\ngo-mode-cs is used purely for computing indentation (Emacs doesn't\ngive you ready access to whether a given point is inside a comment or\nstring, which makes computing indentation difficult).  The\nhighlighting is, unfortunately, done by Emacs internally using the\nsyntax table, which, as you've discovered, is frustratingly\ninflexible.  Probably the right thing is to do is to disable\nsyntax-directed font-lock and to produce the string and comment\nhighlighting directly from the text properties generated by\ngo-mode-cs.  This could be done either by adding another two entries\nto go-mode-font-lock-keywords that use a function to match on these\nproperties (rather than the usual regexp), or using a custom jit-lock\nfunction (see jit-lock-register).\n\nUnfortunately, even with this, we can't get rid of the syntax table\nbecause many motion commands are hard-coded to use it (forward-comment\nand friends), but hopefully the impact will be much less irritating.\n\nWhat you've done to go-mode-cs looks pretty reasonable (though watch\nout for multiline constructs, since '.' doesn't match \\n).\u003c/pre\u003e\n\n\n\n_Status changed to **HelpWanted**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-10-06T17:16:57Z",
	"updated_at": "2014-12-08T10:12:33Z"
}
