{
	"id": 52956272,
	"number": 9459,
	"state": "closed",
	"title": "fmt: inconsistent handling of \\r in Scanf",
	"body": "I got different ```fmt.Scanf``` behavior depending on the line endings style.\r\n\r\nMy go version is go1.3.3 darwin/amd64 on a Mac with OSX 10.10\r\n\r\nTo reproduce the problem, here is a short go program:\r\n\r\n```\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n\tvar steps, i int\r\n\tfmt.Scanf(\"%d\", \u0026steps)\r\n\r\n\tvar a, b int\r\n\tfor i = 0; i \u003c steps; i++ {\r\n\t\tfmt.Scanf(\"%d\", \u0026a)\r\n\t\tfmt.Scanf(\"%d\", \u0026b)\r\n\t\tfmt.Println(a + b)\r\n\t}\r\n}\r\n```\r\n\r\nAnd an input file\r\n\r\n```\r\n2\r\n2 5\r\n4           8\r\n```\r\n\r\n```go run test.go \u003c input```\r\n\r\nI expect to see regardless of the line endings been ```\\r\\n``` or ```\\n```:\r\n\r\n```\r\n7\r\n12\r\n```\r\n\r\nBut I see\r\n\r\n```\r\n2\r\n7\r\n```\r\n\r\nwhen in the input file the line endings are ```\\r\\n``` .\r\n\r\nIf the line endings are ```\\n``` it works fine.",
	"user": {
		"login": "astropanic",
		"id": 39388,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2015-06-15T17:42:30Z",
	"created_at": "2014-12-27T12:42:50Z",
	"updated_at": "2016-06-25T01:57:25Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
