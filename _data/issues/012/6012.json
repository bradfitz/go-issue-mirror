{
	"id": 51284547,
	"number": 6012,
	"state": "closed",
	"title": "net/http/server.go:Serve creates unlimited goroutines",
	"body": "by **sidnei.da.silva**:\n\n\u003cpre\u003eThe http server implementation creates a new goroutine for each incoming request. \n\nNow, requests are complex beasts and could be held active for a long time, which means\nit is trivial to OOM a Go http server that uses the std library naively by causing too\nmany goroutines to be active at the same time.\n\nA solution similar to the one suggested in the Effective Go documentation\n(\u003ca href=\"http://golang.org/doc/effective_go.html#channels)\"\u003ehttp://golang.org/doc/effective_go.html#channels)\u003c/a\u003e could be implemented, by allowing\nusers of the http server to restrict the maximum number of outstanding requests could be\nactive at once, with a sane default.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 13,
	"closed_at": "2014-12-08T10:33:06Z",
	"created_at": "2013-08-01T19:27:30Z",
	"updated_at": "2016-06-24T22:53:15Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
