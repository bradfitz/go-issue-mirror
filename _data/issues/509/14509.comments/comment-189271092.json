{
	"id": 189271092,
	"body": "In principle I don't see an issue with extending unicodetable to also check for references in Properties. There are a few drawbacks:\r\n1) it will unconditionally pull in additional data (about ~10k as a very rough first estimate)\r\n2) it doesn't stop there: there are many more property lists that are not in the core unicode package and would be weird not to support if the existing ones are supported (e.g. Alphabetic and Math are derived properties and are currently not defined in the unicode package).\r\n\r\nIf we want to go the same route as Google re2, this means pulling in ALL unicode binary property data. This adds up (all properties marked as binary in http://userguide.icu-project.org/strings/properties). My first estimate is that there are about 25 missing tables, roughly double what is in unicode.Properties now. A very wild guess is that supporting this would add about 30k worth of tables total. Not the worst, but still 30k.\r\n\r\nSo the possible solutions are:\r\n1) Included Properties and extend it to include the missing tables.\r\n2) Included Properties and compute the tables for derived properties other tables on the fly.\r\n3) implement a mechanism for users to add more tables.\r\n4) Don't support Properties at all.\r\n\r\nIt all depends what is considered to be an acceptable table increase. My first wild estimate is supporting all properties would add about 30k in tables to anyone using the regexp packages. Also people using unicode.Properties would be saddled up with 20k of additional (but possibly useful and welcome) data.\r\n\r\nI think 1 is the best choice as it is the simplest and makes the sets of Properties defined in unicode a bit more comprehensive and consistent. \r\n",
	"user": {
		"login": "mpvl",
		"id": 6445383,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-26T13:24:05Z",
	"updated_at": "2016-02-26T13:24:05Z"
}
