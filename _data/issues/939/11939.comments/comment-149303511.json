{
	"id": 149303511,
	"body": "In the CLs @rsc said,\r\n\r\n\u003e I'd really like to stop adding to these packages. I think we need to leave well enough alone at some point.\r\n\r\nI see what he's getting at.  [CL 13977](https://golang.org/cl/13977), which implements the `IsZeroer` interface is clearly an enhancement and adds API to the standard library that needs to be maintained forever.  So, I am abandoning that CL and that part of the proposal.\r\n\r\nHowever, I still feel strongly about `omitempty` with empty structs, and I want to push for [CL 13914](https://golang.org/cl/13914) to land for Go 1.6.\r\n\r\nI use the JSON encoding in Go a lot, as my work is mostly writing services that communicate with other services, in multiple languages, over HTTP.  The fact that structs don't obey `omitempty` is a frequent source of confusion (see #4357 and its many dups and references, and #10648) and working around it is really annoying.  Other programming languages do not conform to Go's ideal \"zero value\" idea, and as a result encoding a zero value is semantically different in JSON than omitting it or encoding it as `null`.  People run into this most commonly with `time.Time`.  (There is also the issue that decoding a zero `time.Time` does not result in an empty struct, see https://github.com/golang/go/issues/4357#issuecomment-66071897 for background on that.)\r\n\r\nI think it should be considered a bug that Go does not support `omitempty` for these types, and although it adds a small amount of additional code, it fixes a bug.",
	"user": {
		"login": "joeshaw",
		"id": 39916,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-19T18:20:42Z",
	"updated_at": "2015-10-19T18:21:48Z"
}
