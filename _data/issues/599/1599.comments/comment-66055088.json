{
	"id": 66055088,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eI'm specifically thinking of:\n   Close during Read or Write\n   Read/Write during Read or Write (is Write during Write ok?)\n   Close during Accept\n\nTypes that I can think of are:\nnet.IPConn, net.TCPConn, net.UDPConn, net.UnixConn\nnet.TCPListener, net.UnixListener\nio.Pipe\n\nOne way of catching all the above with a small change\nwould be to change the documentation of net.Conn\nand net.Listener to explicitly allow concurrent calls,\nmaking it clear that to fit with existing expectations,\nany new implementation of net.Conn must allow concurrent\ncalls.\n\nThen any type implementing Close, for instance,\nmay document that it is implementing net.Conn.Close,\nwhich implies that it may be called concurrently.\n\nSome types in other packages that might want to document\nallowable concurrent method calls:\n\nrpc.Client\nnetchan.Exporter\nhttp.Client, http.ServerConn, http.ClientConn, ...\nreflect.Value\ntime.Time\n\nAny more?\n\nSome other packages might want some documentation the other way.\nIt seems that in general it is OK to call package-level\nfunction concurrently. That's not true in all cases\n(for instance, the flag package, gob.Register).\nAny more of these?\n\nAnother area which could probably do with a sentence of annotation\nis the sync package - yes, it's \"obvious\" that it's OK to call\nMutex.Lock concurrently with Mutex.Unlock, but perhaps\nit doesn't hurt to state the obvious.\u003c/pre\u003e",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-03-14T09:57:00Z",
	"updated_at": "2014-12-08T10:09:03Z"
}
