{
	"id": 66086921,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3 by **newton688**:\n\n\u003cpre\u003eThank you for the suggestions. To make sure that all of the binaries have the debugging\nflags I deleted the executable from the $GOPATH/bin directory and removed the entire\n$GOPATH/pkg directory to prevent any lingering archives from being linked in to my\nexecutable. I am building the binary again using 'go install -gcflags \"-N -l\"\ngithub.com/sirnewton01/godev'\n\nI repeated my experiment with go 1.1.2 (according to godeb and go version). When I hit\nmy breakpoint I can see that many of the local strings have nonsensical values (very\nlarge integers lengths with the patch from \u003ca href=\"https://golang.org/issue/6598\"\u003eissue #6598\u003c/a\u003e). This is expected since the\nstrings are not yet initialized. I step over the lines that should initialize the\nstrings and when I invoke \"info locals\" I can see that, for the most part, the strings\nare getting their correct values. There was one variable that never appeared to get\ninitialized but it was declared and used only inside a for loop. I don't know if that\nmakes a difference.\n\nI repeated the above experiment using go version 1.2rc2 (according to godeb and go\nversion). When I hit my breakpoint this time and look at \"info locals\" I see that the\nvalues have nonsensical large integer values but when I step over lines that should\ninitialize them they retain their nonsensical values (e.g. filePath := \"\").\n\nI wonder if the line number information is somehow skewed in Go 1.2 so that I hit the\nbreakpoint at the wrong line of the file. It might explain that when I step over the\nlines that I think I'm stepping over the initialization of the variables won't happen\nuntil later.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-19T18:14:06Z",
	"updated_at": "2014-12-08T10:36:32Z"
}
