{
	"id": 241457008,
	"body": "Java's strictfp is very picky about arithmetic, and specifies not just rounding mode, but mantissa sizes, exponent ranges, use of denormalized numbers, particular NaN encodings, and a limit of only one rounding per mathematical operation.  I'm not sure we want all that for Go, but I think specified rounding would be helpful.  Changing rounding would change (for example) our random-number stream.  In our currently generated code, we're not especially careful about exponent ranges and mantissa sizes, which means that there are cases where differences could be seen if people knew what to look for (examples: x87 might use 80-bit FP, which can result in double-rounding even with storeback; PPC FP registers are double-precision only, and so \"float32\" calculations may have extra precision in their intermediate results; any architecture with a so-called \"fused multiply-add\" will perform the addition in `a*b+c` in a double-width mantissa before rounding).\r\n\r\nOne thing to possibly consider that might placate the small-but-nonempty set of numerically oriented people who actually *do* care about rounding modes and understand how to write code that depends on them, is something along the lines of `runInRoundingMode(mode Mode, f func())` where a (presumably small) piece of Go code could be run in a non-standard rounding mode.  The compiler would be responsible for saving/restoring current rounding mode correctly in those places where it tinkers with it for code generation purposes.",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-22T15:48:28Z",
	"updated_at": "2016-08-22T15:48:28Z"
}
