{
	"id": 59698646,
	"number": 10069,
	"state": "closed",
	"title": "net/http: redirection response has closed body",
	"body": "1. What version of Go are you using (go version)?\r\ngo version go1.4.2 darwin/amd64\r\n\r\n2. What operating system and processor architecture are you using?\r\nNot really relevant to this issue...\r\nMacBook Pro (15-inch, Mid 2012)\r\n2.6 GHz Intel Core i7\r\n16 GB 1600 MHz DDR3\r\n\r\n3. What did you do?\r\nImplemented a custom redirection policy handler via `http.Client`'s `CheckRedirect` to stop redirection.\r\nAfter a `Do()` call on a request, the returned response's `Body` is not nil and reading from it returns an error `http: read on closed response body`. See example code below.\r\n\r\n4. What did you expect to see?\r\nExpected either an unclosed, unread-from non-nil `Body`, or a `nil` `Body`.\r\n\r\n5. What did you see instead?\r\nSaw a closed, already-read-from `Body` that was not `nil`.\r\n\r\nThis unexpected condition required me to hack around the case by explicitly setting `resp.Body` to `nil` when detecting my custom redirect policy abort error from the returned `url.Error`.\r\n\r\nAlso, I have no access to the intermediate redirection responses. I would want an interception function to be able to inspect the redirection response to see if I should redirect or not, but instead I get a request instance; what good is the request to determine if I should redirect? This design also prevents me from logging relevant redirection details to the end user, so as to properly trace the request-response path.\r\n\r\n\t// Define our redirection policy:\r\n    const redirects_max_follow = 0 // for this test case\r\n\tvar redirectPolicyError = errors.New(\"redirect policy\")\r\n\tclient := \u0026http.Client{\r\n\t\tCheckRedirect: func(req *http.Request, via []*http.Request) error {\r\n\t\t\tif len(via) \u003e redirects_max_follow {\r\n\t\t\t\treturn redirectPolicyError\r\n\t\t\t}\r\n\t\t\treturn nil\r\n\t\t},\r\n\t}\r\n\r\n\t// Make the request:\r\n\tresp, err := client.Do(req)\r\n\tif err != nil {\r\n\t\tif uerr, ok := err.(*url.Error); ok {\r\n\t\t\tif uerr.Err == redirectPolicyError {\r\n\t\t\t\t// Redirection responses get their bodies removed by `Do()` automatically.\r\n\t\t\t\t// Not sure if this is a bug or not.\r\n\t\t\t\t// Setting Body to nil prevents future \"http: read on closed response body\" error.\r\n\t\t\t\tresp.Body = nil\r\n\t\t\t\tgoto ok\r\n\t\t\t}\r\n\t\t}\r\n\t\tError(\"HTTP error: %s\\n\", err)\r\n\t\treturn -2\r\n\tok:\r\n\t}\r\n",
	"user": {
		"login": "JamesDunne",
		"id": 538152,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 12,
	"closed_at": "2016-05-18T18:03:02Z",
	"created_at": "2015-03-03T20:14:14Z",
	"updated_at": "2016-05-18T18:03:02Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
