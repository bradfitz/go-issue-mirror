{
	"id": 108329027,
	"body": "If the latter approach works, creating an Xcode project and building it with xcodebuild, I would prefer that as it offers users more flexibility. However I'm not sure how it will be compatible with our linking process. For gomobile bind this strategy will definitely work, because we provide .a files and expect the entry point to be a main function in a .m/.c file, which xcode understands how to link.\r\n\r\nPerhaps it is possible to replace the binary compile command with an xcode project setting?\r\n\r\nOne alternative would be to forgo real binary building and build with -buildmode=c-archive and let xcode do the linking (with a tiny .c file containing a main function). It would be odd, building libraries and passing them to xcode because there's no other way to get at its app building machinery, but if there's no other way it would probably work.\r\n\r\nMinor notes:\r\n- darwin/arm64 binaries are required by the app store, so we should build both. The tool to build universal binaries is called lipo.\r\n- the build should copy assets to xcode resources.\r\n- a slash page image is required to get the iPhone 5S/6 to use its full resolution. according to the UI guideline this splash page is not a \"company icon\"-style splash page but an image of the first page. For game-like apps, I suspect that's a simple black page.",
	"user": {
		"login": "crawshaw",
		"id": 161319,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-03T11:45:24Z",
	"updated_at": "2015-06-03T11:45:24Z"
}
