{
	"id": 143811665,
	"number": 14985,
	"state": "open",
	"title": "cmd/cgo: cgo does not link dependencies into archives",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n- What version of Go are you using (`go version`)?\r\n\r\n`go version go1.6 darwin/amd64`\r\n\r\n- What operating system and processor architecture are you using (`go env`)?\r\n\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/tamird/src/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/Users/tamird/src/go1.6\"\r\nGOTOOLDIR=\"/Users/tamird/src/go1.6/pkg/tool/darwin_amd64\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n- What did you do?\r\n\r\nCompiling https://github.com/cockroachdb/c-rocksdb with the LDFLAGS directives at the bottom of https://github.com/cockroachdb/c-rocksdb/blob/master/cgo_flags.go removed.\r\n\r\nc-rocksdb is a \"thin\" wrapper around https://github.com/facebook/rocksdb which allows it to be built using the go toolchain. However, it depends on lz4, so we bring in http://github.com/cockroachdb/c-lz4 which is a similar wrapper.\r\n\r\nUnfortunately, c-lz4 is being linked (by cmd/link?) in a later step than the external linking used for c-rocksdb, which causes missing symbols in c-rocksdb (hence the need for the LDFLAGS directives).\r\n\r\nIs it possible to ask the toolchain to link c-lz4.a using external linking (in the \"main\" linking step in c-rocksdb)?",
	"user": {
		"login": "tamird",
		"id": 1535036,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"comments": 21,
	"created_at": "2016-03-27T14:01:41Z",
	"updated_at": "2016-05-29T21:10:18Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
