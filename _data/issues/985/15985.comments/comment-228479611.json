{
	"id": 228479611,
	"body": "I think that providing separated datalink IO and datalink wire-format/coding packages makes sense. Because the former needs to work on abstraction of various kernel system calls and data types, and the latter should take a burden of various wire-formats/codings come from IEEE wildcats. For example,\r\n```\r\npackage datalink\r\n\r\ntype PacketConn struct { /* TBD */ } // implements net.PacketConn interface and a few fancy datalink IO specific methods\r\ntype Listener struct {} // or Datalink or Config or something else\r\nfunc (ln Listener) Listen(ifi *net.Inteface) (PacketConn, error)\r\n\r\n--\r\n\r\npackage ether // or ethernet\r\n\r\ntype Frame interface { Tag; Stack }\r\ntype Tag interface { Len() int; Marshal() ([]byte, error) } \r\ntype Stack interface { Lower() Tag; Upper() Tag }\r\n\r\ntype Dot3 struct {}\r\n  :\r\ntype Dot1ad struct {}\r\n```\r\n\r\n\u003e If this package were to be a raw datalink package, should another package be created to leverage it with ethernet sockets (x/net/ethernet or maybe even x/net/datalink/ethernet)?\r\n\r\nFor the package that provides Ethernet encoding/decoding functionality, all of us know a variety of MAC/LLC sublayers from DIX/dot3 through dot22, and dot1 higher layers including MAC bridging through congestion notification. Ah, I have no strong opinion on it. Probably we can use github.com/google/gopacket package.\r\n\r\n\u003e Sure, but what type of options would need to be configured?\r\n\r\nThere are a few options that should be configured before calling bind on AF_PACKET sockets, I guess.",
	"user": {
		"login": "mikioh",
		"id": 92117,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-24T22:36:33Z",
	"updated_at": "2016-06-24T22:36:33Z"
}
