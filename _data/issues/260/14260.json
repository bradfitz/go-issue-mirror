{
	"id": 132224895,
	"number": 14260,
	"state": "closed",
	"title": "net/mail: ParseAddress should support UTF-8 (RFC 6532)",
	"body": "I'm using go v1.5.3, and parsing emails found in the wild (from senders like Linkedin and Gmail).\r\n\r\nThey expect to be able to include UTF-8 in email headers without q-encoding, but this is not currently supported by `mail.ParseAddress`.\r\n\r\nThere are two possible solutions:\r\n\r\n* We can update the parsing functions to allow only valid UTF-8 as defined by RFC 6532,\r\n* OR, we can allow arbitrary 8-byte strings, and allow the caller to decide whether it cares about the encoding of the returned string.\r\n\r\nMy experience from working on the `mail` gem for ruby would suggest that the second approach is the most pragmatic â€” often times email is badly formed, and it's really useful to be able to provide a \"best-effort\" parsing of badly formed email headers. However it seems like the go project tends a little bit more towards correctness, in which case the first approach may sit better in the standard library, and people who want the fuzzy behaviour can do it themselves.",
	"user": {
		"login": "ConradIrwin",
		"id": 94272,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"closed_at": "2016-04-15T13:57:56Z",
	"created_at": "2016-02-08T18:42:08Z",
	"updated_at": "2016-04-15T13:57:57Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
