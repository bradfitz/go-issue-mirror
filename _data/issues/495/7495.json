{
	"id": 51286785,
	"number": 7495,
	"state": "open",
	"title": "cmd/compile: method definitions based on later-defined methods don't compile (pathological)",
	"body": "\u003cpre\u003e\u003ca href=\"http://play.golang.org/p/WMpE0q2wK8\"\u003ehttp://play.golang.org/p/WMpE0q2wK8\u003c/a\u003e\n\nproduces:\n\nprog.go:7: T.m2 undefined (type T has no method m2)\nprog.go:7: invalid expression unsafe.Sizeof(T.m2)\n [process exited with non-zero status]\n\nBut switching m1 and m2 works:\n\n\u003ca href=\"http://play.golang.org/p/uR3wFJcAHq\"\u003ehttp://play.golang.org/p/uR3wFJcAHq\u003c/a\u003e\n\nIn general, ordering declarations differently won't work:\n\n\u003ca href=\"http://play.golang.org/p/iAV8x86giC\"\u003ehttp://play.golang.org/p/iAV8x86giC\u003c/a\u003e\n\nThese are clearly pathological cases but point out some limitations of gc's type checker.\n\ngccgo handles these cases w/o problem.\ngo/types has the same problem.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		}
	],
	"comments": 0,
	"created_at": "2014-03-08T00:48:06Z",
	"updated_at": "2016-09-26T19:27:41Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
