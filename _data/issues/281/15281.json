{
	"id": 148133656,
	"number": 15281,
	"state": "closed",
	"title": "cmd/compile: range chan loop retains previously received value while blocked",
	"body": "[This would be nice to fix for Go 1.7 but is not a regression from Go 1.6 and so is not critical.]\n\nDuring a range loop on a channel, it appears that the previously received value is held live while blocked waiting for the next value on the channel. The program below demonstrates: f1 retains x even after it is cleared during the loop, while f2 does not. Adjusting the program to block on the channel and then check the memory usage after a suitable timeout produces the same result (but requires sleeps and the like). This matters if the values being received are large and timely garbage collection is important. \n\nThis could be fixed by mucking with the liveness code, but it could also be fixed by zeroing the channel receive temporary in the code generated by the range loop after copying it into the real iteration variable. The latter is much less scary at this point in the cycle.\n\n/cc @randall77 @dr2chase @RLH @aclements\n\n```\npackage main\n\nimport \"runtime\"\n\nfunc main() {\n\t{\n\t\tx := inuse()\n\t\tc := make(chan []byte, 10)\n\t\tc \u003c- make([]byte, 10\u003c\u003c20)\n\t\tclose(c)\n\t\tf1(c, x)\n\t}\n\t{\n\t\tx := inuse()\n\t\tc := make(chan []byte, 10)\n\t\tc \u003c- make([]byte, 10\u003c\u003c20)\n\t\tclose(c)\n\t\tf2(c, x)\n\t}\n}\n\nfunc f1(c chan []byte, start int64) {\n\tfor x := range c {\n\t\tif delta := inuse() - start; delta \u003c 9\u003c\u003c20 {\n\t\t\tprintln(\"f1: after alloc: expected delta at least 9MB, got: \", delta)\n\t\t}\n\t\tprintln(x)\n\t\tx = nil\n\t\tif delta := inuse() - start; delta \u003e 1\u003c\u003c20 {\n\t\t\tprintln(\"f1: after alloc: expected delta below 1MB, got: \", delta)\n\t\t}\n\t\tprintln(x)\n\t}\n}\n\nfunc f2(c chan []byte, start int64) {\n\tfor {\n\t\tx, ok := \u003c-c\n\t\tif !ok {\n\t\t\tbreak\n\t\t}\n\t\tif delta := inuse() - start; delta \u003c 9\u003c\u003c20 {\n\t\t\tprintln(\"f2: after alloc: expected delta at least 9MB, got: \", delta)\n\t\t}\n\t\tprintln(x)\n\t\tx = nil\n\t\tif delta := inuse() - start; delta \u003e 1\u003c\u003c20 {\n\t\t\tprintln(\"f2: after alloc: expected delta below 1MB, got: \", delta)\n\t\t}\n\t\tprintln(x)\n\t}\n}\n\nfunc inuse() int64 {\n\truntime.GC()\n\tvar st runtime.MemStats\n\truntime.ReadMemStats(\u0026st)\n\treturn int64(st.Alloc)\n}\n```",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-04-14T19:20:47Z",
	"created_at": "2016-04-13T17:47:07Z",
	"updated_at": "2016-04-14T19:20:47Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
