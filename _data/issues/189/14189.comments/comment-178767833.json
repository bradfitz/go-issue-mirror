{
	"id": 178767833,
	"body": "The unrelated discussion concerning tsml.Cache needs to be moved to its own\nissue.\n\nOn Tue, Feb 2, 2016 at 1:20 PM, INADA Naoki \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e I'm sorry about slightly offtopic.\n\u003e\n\u003e It seems tsm1.Cache is GC unfriendly. There are so many pointers in the\n\u003e cache.\n\u003e Each value type has time time.Time. time.Time contains pointer *Location.\n\u003e So changing time time.Time to unixnano int64 may reduce GC cost.\n\u003e\n\u003e I've wrote quick benchmark:\n\u003e\n\u003e func BenchmarkCacheFloatEntries(b *testing.B) {\n\u003e         for i := 0; i \u003c b.N; i++ {\n\u003e                 cache := NewCache(10000)\n\u003e                 for j := 0; j \u003c 10000; j++ {\n\u003e                         v := NewValue(time.Unix(1, 0), float64(j))\n\u003e                         cache.Write(\"test\", []Value{v})\n\u003e                 }\n\u003e         }\n\u003e }\n\u003e\n\u003e before:\n\u003e $ go test -run=xxx -bench=BenchmarkCache\n\u003e PASS\n\u003e BenchmarkCacheFloatEntries-4         300       4019495 ns/op\n\u003e\n\u003e after:\n\u003e $ go test -run=xxx -bench=BenchmarkCache\n\u003e PASS\n\u003e BenchmarkCacheFloatEntries-4         500       3720449 ns/op\n\u003e\n\u003e patch: https://gist.github.com/methane/59c8777907b10dc983a1\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/14189#issuecomment-178733763\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-02T19:18:15Z",
	"updated_at": "2016-02-02T19:18:15Z"
}
