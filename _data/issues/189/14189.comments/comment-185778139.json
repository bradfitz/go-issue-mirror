{
	"id": 185778139,
	"body": "Here are details of a similar degradation we are experiencing that is keeping us on Go 1.4.3. For context the service I took these measurements from is one instance in a cluster of real time advertising bidders. It receives bid requests via HTTP and performs two key operations that I timed. The first \"augment\" makes a single HTTP call to a couchbase cluster (using https://github.com/couchbase/go-couchbase) which returns about 5kB of protobuf encoded data. The second \"evaluate\" is a pure go section of the code that makes no network calls and is heavily optimised to avoid garbage generation. Responses from our service are expected to complete within 50ms.\r\n\r\nI ran each test for 10 minutes with gctrace=1 and various values of GOGC. Our instrumentation takes samples every 10 seconds. The service is running on an Amazon c4.xlarge instance with 4 cpus and 7.5GB RAM. At the time of the Go 1.5 and 1.4.3 tests the service was receiving about 1100 requests per second. When I ran the 1.6 tests the rate was about 1400 per second. We rate this service on this instance type at about 2000 per second max (under Go 1.4.3)\r\n\r\n```\r\n time  go version  GOGC    \r\n---------------------------\r\n 9:42       1.5.2   100         \r\n 9:52       1.5.2   200\r\n10.02       1.5.2   400\r\n10:12       1.5.2   800\r\n10:22       1.4.3  default\r\n13:56       1.6     100         \r\n14:06       1.6     200         \r\n14:16       1.6     400         \r\n14:26       1.6     800       \r\n```\r\n\r\nCharts of timings of 99.9th (orange) and maximum values (blue) for augment operation. (Go 1.4.3 is the last section of the top graph, starting at 10:22)\r\n\r\n![augment-go1 5](https://cloud.githubusercontent.com/assets/18375/13148113/cebd0972-d653-11e5-8d08-2f97091d7483.png)\r\n![augment-go1 6](https://cloud.githubusercontent.com/assets/18375/13148120/d3e3457e-d653-11e5-9002-5d0cd18f5959.png)\r\n\r\n```\r\ntime     99.9% augment  max augment  \r\n------------------------------------\r\n 9:42       17.8ms         216.3ms\r\n 9:52       12.0ms         204.9ms\r\n10:02        7.9ms         225.2ms\r\n10:12        6.3ms         134.0ms\r\n10:22        5.6ms         236.0ms\r\n13:56       35.8ms         237.2ms\r\n14:06        8.0ms         226.9ms\r\n14:16        5.7ms         240.6ms\r\n14:26        6.5ms         472.6ms\r\n```\r\n\r\nAnd same for evaluate operation:\r\n\r\n![evaluate-go1 5](https://cloud.githubusercontent.com/assets/18375/13148157/f85e0182-d653-11e5-91f0-b393e9976b3b.png)\r\n![evaluate-go1 6](https://cloud.githubusercontent.com/assets/18375/13148162/fd38aab8-d653-11e5-969f-af39f9dd1b28.png)\r\n\r\n```\r\ntime     99.9% evaluate  max evaluate  \r\n------------------------------------\r\n 9:42       1.5ms         27.5ms\r\n 9:52       1.2ms          8.8ms\r\n10:02       1.1ms         15.7ms\r\n10:12       1.1ms         13.5ms\r\n10:22       1.2ms        141.3ms\r\n13:56       1.2ms        256.0ms\r\n14:06       1.1ms        221.1ms\r\n14:16       1.2ms        234.0ms\r\n14:26       1.2ms        233.3ms\r\n```\r\n\r\nOverall I would characterise the results as Go 1.5 and 1.6 result in slower timings than 1.4.3 but are more consistent. The 99.9 centiles were larger but there were fewer instances where the maximum time exceeded our deadlines.\r\n\r\nAttached are the gctrace outputs from each of the tests.\r\n\r\n[go1.4-gogcdefault.txt](https://github.com/golang/go/files/136435/go1.4-gogcdefault.txt)\r\n[go1.5-gogc100.txt](https://github.com/golang/go/files/136432/go1.5-gogc100.txt)\r\n[go1.5-gogc200.txt](https://github.com/golang/go/files/136434/go1.5-gogc200.txt)\r\n[go1.5-gogc400.txt](https://github.com/golang/go/files/136433/go1.5-gogc400.txt)\r\n[go1.5-gogc800.txt](https://github.com/golang/go/files/136436/go1.5-gogc800.txt)\r\n[go1.6-gogc100.txt](https://github.com/golang/go/files/136437/go1.6-gogc100.txt)\r\n[go1.6-gogc200.txt](https://github.com/golang/go/files/136438/go1.6-gogc200.txt)\r\n[go1.6-gogc400.txt](https://github.com/golang/go/files/136439/go1.6-gogc400.txt)\r\n[go1.6-gogc800.txt](https://github.com/golang/go/files/136440/go1.6-gogc800.txt)\r\n\r\n\r\n\r\n\r\n",
	"user": {
		"login": "iand",
		"id": 18375,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-18T15:35:07Z",
	"updated_at": "2016-02-18T15:36:04Z"
}
