{
	"id": 66091793,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2 by **arnehormann**:\n\n\u003cpre\u003eI disagree with the premise that we need this in database/sql. It is needed, but it\nbelongs in the drivers.\ndatabase/sql already has problems with its level of abstraction.\n\nSome examples:\n* no unified form for different sql dialects (including the wildcard for prepared\nstatements)\n* return value of Exec is unavailable in PostgreSQL, one has to use Query with a special\nformat\n* no support for bulk-uploading from files\n* anemic metadata (no column types etc)\n\nI think everything you mention above belongs in the drivers, as they can provide the\nmaximum amount of details and database/sql does to much as is (see bullets above).\nUsers know which database they use, ORM developers want access to the maximum amount of\nmetadata and need more than what you describe can offer.\n\nAlso, I really don't want Go to have something like \"UnsupportedOperationException\" when\none dbms doesn't support one of the operations. The Exec-problem with PostgreSQL comes\nclose enough.\n\nFor column metadata, \u003ca href=\"https://golang.org/cl/43510044\"\u003ehttps://golang.org/cl/43510044\u003c/a\u003e adds the fix for \u003ca href=\"https://golang.org/issue/5606\"\u003eissue #5606\u003c/a\u003e\nso the drivers can access it. Schema discovery etc. could be added to database/sql, but\nI think this also belongs into the driver or support libraries.\nPutting it all into database/sql will bloat it and shadow interesting details - just\nthink of unified error handling using just the stuff common to all drivers and losing\nall additional information.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-06T07:33:12Z",
	"updated_at": "2014-12-08T10:41:11Z"
}
