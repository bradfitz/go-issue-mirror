{
	"id": 241252536,
	"body": "Hello there @mr4x.\r\nThis isn't a bug, perhaps it is an misinterpretation of type equality and expectations.\r\n\r\n\r\n**TL;DR string([]byte{42, 42}) and []byte{42, 42} are not of the same type.\r\nWhen a string value is marshaled or unmarshaled, its representation stays the same, this doesn't apply for other types always**\r\n\r\n#### Analysis\r\nYour code sample at https://play.golang.org/p/gQ7NbCR7dQ, and inlined below:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"encoding/json\"\r\n\t\"fmt\"\r\n)\r\n\r\nfunc main() {\r\n\tb, err := json.Marshal([]byte{42, 42})\r\n\tif err != nil {\r\n\t\tfmt.Println(\"error:\", err)\r\n\t}\r\n\tfmt.Println(b, string(b))\r\n}\r\n```\r\nwhich when run gives\r\n```shell\r\n[34 75 105 111 61 34] \"Kio=\"\r\n```\r\n\r\n```go\r\n[]byte(42, 42) != string([]byte(42, 42))\r\nwhere string([]byte(42, 42)) == \"**\".\r\n```\r\n\r\n`string([]byte{42, 42})` contains a read-only copy of the contents of `[]byte{42, 42}` so content wise those two are the same. However, their types are different -- the JSON marshaler interpretes them differently too.\r\n\r\nWhen the string value is marshaled, it still gives \"**\" which is what you were expecting, since the marshaled value of a string is itself and so is a directly converted string value, with no transformations. But that only applies when we are dealing with strings and not byte slices.\r\n\r\nTherefore: if you then unmarshaled the originally encoded bytes as a []byte and printed out the value, you'd get back `[]byte{42, 42}` and then if printed as a string gives \"**\". However, if you unmarshaled the originally encoded bytes to a string, you'd get the direct string conversion which is \"Kio=\".\r\nPlease see https://play.golang.org/p/cdXWIPD5ix or inlined below:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"bytes\"\r\n\t\"encoding/json\"\r\n\t\"fmt\"\r\n)\r\n\r\n\r\nfunc main() {\r\n\torigB := []byte{42, 42}\r\n\tmarshaledB, err := json.Marshal(origB)\r\n\tif err != nil {\r\n\t\tfmt.Println(\"error:\", err)\r\n\t}\r\n\tfmt.Println(marshaledB, string(marshaledB))\r\n\r\n\tvar liveB []byte\r\n\tvar s string\r\n\tif err := json.Unmarshal(marshaledB, \u0026liveB); err != nil {\r\n\t\tfmt.Printf(\"err: %v\\n\", err)\r\n\t}\r\n\t_ = json.Unmarshal(marshaledB, \u0026s)\r\n\tif !bytes.Equal(liveB, origB) {\r\n\t\tfmt.Printf(\"failed to get back original value liveB: %v(%s) origB: %v(%s)\\n\", liveB, origB)\r\n\t}\r\n\tfmt.Printf(\"liveB:: raw: %v string: %s stringFromOriginallyEncodedBytes: %s\\n\", liveB, liveB, s)\r\n}\r\n```\r\nGiving\r\n```shell\r\n[34 75 105 111 61 34] \"Kio=\"\r\nliveB:: raw: [42 42] string: ** stringFromOriginallyEncodedBytes: Kio=\r\n```",
	"user": {
		"login": "odeke-em",
		"id": 4898263,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-21T11:35:46Z",
	"updated_at": "2016-08-21T11:35:46Z"
}
