{
	"id": 140696879,
	"number": 14815,
	"state": "closed",
	"title": "net/http: ServeMux uses URL.Path instead of URL.EscapedPath(), leading it to treat %2F as a path separator",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n`go version go1.6 darwin/amd64`\r\n\r\n3. What did you do?\r\nhttp://play.golang.org/p/60StDlOnw8\r\nIt doesn't work on play.golang.org, but when you run it on local machine it results in:\r\n```\r\n2016/03/14 14:40:10 http: panic serving 127.0.0.1:58546: /a/b\r\n```\r\n\r\n\r\n4. What did you expect to see?\r\nI expected HTTP handler to get a request with URL equivalent to URL in original request, i.e. `/a%2F%2Fb`. Per https://tools.ietf.org/html/rfc3986#section-2.2 `/a/b` and even `/a//b` are NOT EQUIVALENT to `/a%2F%2Fb`\r\n\r\nThis happens because `http.ServeMux` uses URL.Path, which already contains wrong data `/a//b`, does some normalization on that and issues a redirect to `/a/b`, so user handler is never invoked during the initial request, only after this redirect.\r\n\r\nI suggest one of these ways to fix this:\r\n1) Make `net/url` percent-decode only unreserved characters, making it compliant with RFC3986\r\n2) Use `EscapedPath()` in `http.ServeMux`, so it will see the data before `net/url` spoiled it\r\n\r\nBoth options (and probably any other) break API in one way or another.\r\n\r\nYes, I saw the response on https://github.com/golang/go/issues/8248 that this is documented behavior, but it directly contradicts relevant Internet standard, so it's worth to be changed.",
	"user": {
		"login": "gelraen",
		"id": 654649,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"closed_at": "2016-03-31T20:46:48Z",
	"created_at": "2016-03-14T14:53:47Z",
	"updated_at": "2016-03-31T20:46:48Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
