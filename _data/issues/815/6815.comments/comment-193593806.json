{
	"id": 193593806,
	"body": "I don't like coupling the language to the underlying architecture\nmore than it's absolutely needed.\n\nFor example, the proposed\n          sum, carry := a + b\nmakes the implicit assumption that the underlying architecture\nhas the concept of carry bit. What if the architecture doesn't have\ncarry bit? For those architectures, the proposed form does not\nmatch to the underlying architecture easily, and the compiler is\nlikely to generate worse code too. As an example, the RISC-V\narchitecture doesn't contain any flags register or carry bits.\n\nSimilarly, the proposed\n         quo, rem := p / q\nassumes that quotient and remainder are available from the same\ninstruction, but actually most RISC architectures don't offer such\na divide instruction.\n\nIt's ok for the compiler to detect that both quotient and remainder\nare needed and group that into a single instruction, but let's not\ntie the language to x86 or any particular architecture paradigm.\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-08T04:01:04Z",
	"updated_at": "2016-03-08T04:01:04Z"
}
