{
	"id": 193595345,
	"body": "@minux \r\n\r\n\u003e For example, the proposed\r\n\u003e          sum, carry := a + b\r\n\u003e makes the implicit assumption that the underlying architecture\r\n\u003e has the concept of carry bit. What if the architecture doesn't have\r\n\u003e carry bit?\r\n\r\nThen it compiles to more than one instruction, of course.  Same as what you do today if the architecture doesn't have a hardware divide instruction - there's no general requirement that operators in the high-level language be in 1:1 correspondence with machine instructions.\r\n\r\n\u003e Similarly, the proposed\r\n\u003e          quo, rem := p / q\r\n\u003e assumes that quotient and remainder are available from the same\r\n\u003e instruction, but actually most RISC architectures don't offer such\r\n\u003e a divide instruction.\r\n\r\nNo?  It only assumes that the programmer is interested in both the quotient and the remainder of the operation.  If you can compile those to a single instruction, that's great - but if you can't, you compile it to a set of instructions that compute them independently.\r\n\r\nAgain, this seems to be missing the point: the main benefit of the proposed syntax is *to simplify programs* that need carries, remainders, and the like - not to make the compiler's instruction selection easier to implement.",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-08T04:09:12Z",
	"updated_at": "2016-03-08T04:09:12Z"
}
