{
	"id": 193508466,
	"body": "\u003e Numeric conversions (from integer to decimal) require both / and % on the same operands. Providing q, r := x/y is likely to run twice as fast w/o the need for the compiler to detect that a % operation following a / is using the same operands.\r\n\r\nI know that the suggestion here was to spare the compiler some work. However, I think that it would now be quite easy to write an SSA pass that recognizes code like\r\n\r\n```go\r\nq := x / y\r\nr := x % y\r\n```\r\nand substitutes a specialized op for it, and then add faster arch-specific implementations for that op. Something similar probably holds for carry, borrow, and overflow, if we pick a standard idiomatic way to express them (a la the memclear range expression).\r\n\r\ncc the usual numeric/SSA crowd: @dr2chase @brtzsnr @randall77 @tzneal \r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-07T23:38:23Z",
	"updated_at": "2016-03-07T23:38:23Z"
}
