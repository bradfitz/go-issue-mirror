{
	"id": 253811910,
	"body": "\u003e The complaint for the docs is I don't understand what the \"must\" mean in the first quote.\r\n\"must be xxx to possibly trigger a finalizer calling\", \"must be xxx to avoid paniking in later go versions\"?\r\n\r\nEither may be true. The point is that this is an intentionally *underspecified* contract between SetFinalizer and the caller of SetFinalizer. \"The argument obj must be a pointer to an object allocated by calling new, by taking the address of a composite literal, or by taking the address of a local variable.\" means it's the caller's responsibility to pass an obj that satisfies these requirements. If the caller does something else, the behavior of SetFinalizer is *unspecified*. It may panic (a possibility suggested by the last sentence in that paragraph). It may do nothing (in which case the finalizer will never run). It may reboot your computer (though that would be rude). Who knows? And, as you point out, it may behave differently in other versions of Go or other implementations of Go (e.g., gccgo, GopherJS).",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-10-14T14:13:30Z",
	"updated_at": "2016-10-14T14:13:30Z"
}
