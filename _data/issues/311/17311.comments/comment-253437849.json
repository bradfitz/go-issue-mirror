{
	"id": 253437849,
	"body": "@aclements, @RLH, \r\n\r\nthe original title of this issue is \"Make the SetFinalizer docs perfect\".\r\nI just feel the docs is some verbose.\r\n\r\nFor example, in the tip version, the docs says:\r\n\r\n\u003e The argument obj must be a pointer to an object allocated by calling\r\n\u003e new, by taking the address of a composite literal, or by taking the\r\n\u003e address of a local variable.\r\n\r\nSo I think the following SetFinalizer callings for a, b, c will be always safe in later go versions:\r\n\r\n\tpackage main\r\n\r\n\timport (\r\n\t\t\"runtime\"\r\n\t)\r\n\r\n\tfunc callback1(*[]int) {}\r\n\tfunc callback2(*int) {}\r\n\r\n\tvar a = \u0026[]int{}\r\n\tvar b = new(int)\r\n\r\n\tfunc main() {\r\n\t\tv := 123\r\n\t\tc := \u0026v\r\n\t\t\r\n\t\truntime.SetFinalizer(a, callback1)\r\n\t\truntime.SetFinalizer(b, callback2)\r\n\t\truntime.SetFinalizer(c, callback2)\r\n\t\t\r\n\t\t// ...\r\n\t\t\r\n\t\t// ....\r\n\t}\r\n\r\nHowever, the docs then says this:\r\n\r\n\u003e It is not guaranteed that a finalizer will run for objects allocated\r\n\u003e in initializers for package-level variables. Such objects may be\r\n\u003e linker-allocated, not heap-allocated.\r\n\r\nNow, I can't confirm if the SetFinalizer callings for a, b will be always safe or not.\r\n\r\n\r\n",
	"user": {
		"login": "yaxinlx",
		"id": 15266642,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-13T07:37:41Z",
	"updated_at": "2016-10-13T07:37:41Z"
}
