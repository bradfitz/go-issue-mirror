{
	"id": 76263123,
	"body": "The reason is that when you break on 'main.finish', gdb breaks on\r\nthe finish's frame, and because gdb can't backtrace our stack frames\r\non RISC architectures, the 'up' command will go to the wrong frame,\r\nso mapvar can't be found there.\r\n\r\nAt least this is the reason for #10002, as I don't have access to\r\nppc64le systems to verify my hypothesis.\r\n\r\nHowever, if we say `break main.go:10` so that the breakpoint in the\r\nthe 'main.main' frame, then gdb can indeed print the correct map\r\nout.\r\n\r\nThe easiest way to fix the gdb backtrace problem is to use\r\nframe pointers like what we did with the framepointer experiment\r\non amd64. I'm not sure if we can write a python helper to unwind\r\nthe stack for gdb, is that possible? Interpreting our pclntab in Python\r\nis at least simpler than interpreting that in DWARF. Or we can\r\nuse our spadj to generate cfa pseudo-instructions for gdb to\r\nunwind the stack. @ianlancetaylor",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-26T20:27:16Z",
	"updated_at": "2015-02-26T20:27:16Z"
}
