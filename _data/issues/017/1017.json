{
	"id": 51277245,
	"number": 1017,
	"state": "closed",
	"title": "json crash on {} input",
	"body": "by **fibercut**:\n\n\u003cpre\u003eBefore filing a bug, please check whether it has been fixed since\nthe latest release: run \u0026quot;hg pull -u\u0026quot; and retry what you did to\nreproduce the problem.  Thanks.\n\nWhat steps will reproduce the problem?\n1. main.go\npackage main\n\nimport (\n\t\u0026quot;log\u0026quot;\n\t\u0026quot;net\u0026quot;\n\t\u0026quot;rpc\u0026quot;\n\t\u0026quot;rpc/jsonrpc\u0026quot;\n)\n\nfunc main() {\n\tl, e := net.Listen(\u0026quot;tcp\u0026quot;, \u0026quot;127.0.0.1:12345\u0026quot;)\n\tif e != nil {\n\t\tlog.Exit(\u0026quot;Could not open port: %s\\n\u0026quot;, e)\n\t}\n\tfor {\n\t\tconn, _ := l.Accept()\n\t\trpc.ServeCodec(jsonrpc.NewServerCodec(conn))\n\t}\n}\n\n2. telnet 127.0.0.1 12345\n3. type {} \u0026lt;enter\u0026gt;\n\nWhat is the expected output?\n\nit's expected not to crash\n\nWhat do you see instead?\n\n% ./empty_string     \npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n\tpanic: runtime error: invalid memory address or nil pointer dereference\n\npanic PC=0xa76b68\nruntime.panic+0xa9 /opt/go/src/src/pkg/runtime/proc.c:1012\n\truntime.panic(0x0, 0x2)\njson._func_003+0x72 /opt/go/src/src/pkg/json/encode.go:155\n\tjson._func_003(0x80fe1b4, 0xa8a0f0, 0xa8a0f0, 0xa7fca0)\nruntime.panic+0xe9 /opt/go/src/src/pkg/runtime/proc.c:994\n\truntime.panic(0xa7f6e0, 0xa7f754)\npanicstring+0x61 /opt/go/src/src/pkg/runtime/runtime.c:83\n\tpanicstring(0x80fe1b4, 0xa8a0f0)\nsigpanic+0x11b /opt/go/src/src/pkg/runtime/linux/thread.c:286\n\tsigpanic()\njson.*RawMessage·MarshalJSON+0x26 /opt/go/src/src/pkg/json/stream.go:172\n\tjson.*RawMessage·MarshalJSON(0x1, 0xa634cc, 0x80b1fb6)\njson.*encodeState·reflectValue+0xb4 /opt/go/src/src/pkg/json/encode.go:175\n\tjson.*encodeState·reflectValue(0x0, 0x80e73d0, 0x0)\njson.*encodeState·reflectValue+0x797 /opt/go/src/src/pkg/json/encode.go:222\n\tjson.*encodeState·reflectValue(0xa810e8, 0xa7ea20, 0xa809c0)\njson.*encodeState·marshal+0x86 /opt/go/src/src/pkg/json/encode.go:160\n\tjson.*encodeState·marshal(0xa810e8, 0xab8450, 0xa809b0, 0xa809b0, 0x0, ...)\njson.*Encoder·Encode+0x65 /opt/go/src/src/pkg/json/stream.go:146\n\tjson.*Encoder·Encode(0xa810e8, 0x813163c, 0xa7f5a0, 0x1, 0x3, ...)\nrpc/jsonrpc.*serverCodec·WriteResponse+0x175\n/opt/go/src/src/pkg/rpc/jsonrpc/server.go:111\n\trpc/jsonrpc.*serverCodec·WriteResponse(0xa810e0, 0x813163c, 0xa7f5a0, 0x1, 0x810742c, ...)\nrpc.sendResponse+0xb4 /opt/go/src/src/pkg/rpc/server.go:290\n\trpc.sendResponse(0xa72eb0, 0xa7f820, 0x810e2b0, 0x1, 0xffffffff, ...)\nrpc.*serverType·input+0x33f /opt/go/src/src/pkg/rpc/server.go:358\n\trpc.*serverType·input(0xa60a98, 0xa80980, 0x810e2b0)\nrpc.ServeCodec+0x36 /opt/go/src/src/pkg/rpc/server.go:435\n\trpc.ServeCodec(0xa80640, 0xab8420)\nmain.main+0x15e /home/sven/git/bugs/empty_string/empty_string.go:28\n\tmain.main()\nmainstart+0xf /opt/go/src/src/pkg/runtime/386/asm.s:83\n\tmainstart()\ngoexit /opt/go/src/src/pkg/runtime/proc.c:145\n\tgoexit()\n\ngoroutine 2 [3]:\nruntime.entersyscall+0x3c /opt/go/src/src/pkg/runtime/proc.c:558\n\truntime.entersyscall()\nsyscall.Syscall6+0x5 /opt/go/src/src/pkg/syscall/asm_linux_386.s:313\n\tsyscall.Syscall6()\nsyscall.EpollWait+0x74 /opt/go/src/src/pkg/syscall/zsyscall_linux_386.go:146\n\tsyscall.EpollWait(0x100, 0x6, 0xa801e0, 0x1, 0xffffffff, ...)\nnet.*pollster·WaitFD+0x134 /opt/go/src/src/pkg/net/fd_linux.go:116\n\tnet.*pollster·WaitFD(0x6, 0xa801e0, 0x1, 0x1, 0xffffffff, ...)\nnet.*pollServer·Run+0xcb /opt/go/src/src/pkg/net/fd.go:208\n\tnet.*pollServer·Run(0xa60878, 0x0)\ngoexit /opt/go/src/src/pkg/runtime/proc.c:145\n\tgoexit()\n\nWhat is your $GOOS?  $GOARCH?\n\nlinux 386\n\nWhich revision are you using?  (hg identify)\n\n8884f7b4c775 release.2010-08-04/release\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:06:42Z",
	"created_at": "2010-08-10T13:48:39Z",
	"updated_at": "2016-06-24T19:18:59Z"
}
