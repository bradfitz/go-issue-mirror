{
	"id": 67600655,
	"body": "I'm not fully certain, but I'm pretty sure it isn't sqlite's fault, other than it happens to trigger the bug somewhere in the toolchain.  If I \"go install\" github.com/mattn/go-sqlite3 on ref beeda4c, everything works fine, but if I add some cgo calls into other kernel32 functions in my code, then it breaks.  Since the compiler already generated the code (i.e. go-sqlite.a) and the only thing changing is my code and then the linker putting it all into a PE file, I'm pretty sure it is something in the linker.  Its as if it knows it should initialize the entry for the kernel32 function in the aSyscall array with an address to a generated import thunk (i.e. code that does a \"jmp [X]\"), but instead initializes it with X (i.e. the address into the IAT storing the real address of the kernel32 function).\r\n\r\nI started digging into the various sections in the go-sqlite3.a, trying to find asyscall to see how it was getting statically initialized, but I haven't had the time to dig deeper.",
	"user": {
		"login": "azdagron",
		"id": 7400314,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-19T05:40:54Z",
	"updated_at": "2014-12-19T05:53:08Z"
}
