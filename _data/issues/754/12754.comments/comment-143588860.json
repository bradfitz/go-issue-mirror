{
	"id": 143588860,
	"body": "There are 2^_N_ interfaces a type could satisfy, but there are a fixed number of interfaces in a system. In a given codebase you don't have to consider all possible interfaces, just the interfaces defined _in the system_.  At most you have to generate | _T_ | * | _I_ | wrappers, with _T_ being the set of types and _I_ the set of interfaces. For the entire 750kloc go source code base there are ~2500 interfaces, so its practical to brute force search and generate that space (but certainly not efficient). \r\n\r\nI admit I hadn't considered the runtime type assertion aspect since I avoid it like the plague. As I mentioned above its not impossible to generate a wrapper for every interface in a system a type could satisfy, just inefficient. However, the same code/methodology can be used to generate those warper functions/types _at runtime_ that are type asserted instead of assigned to yes?",
	"user": {
		"login": "rfliam",
		"id": 718129,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-27T19:24:15Z",
	"updated_at": "2015-09-27T19:29:15Z"
}
