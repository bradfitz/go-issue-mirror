{
	"id": 87077531,
	"number": 11148,
	"state": "closed",
	"title": "testing/quick: stack overflow for recursive types (2)",
	"body": "CL 10821 added generation of nil pointers to terminate recursive structures.\r\n\r\nHowever, the following still does not terminate:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"reflect\"\r\n\t\"testing/quick\"\r\n)\r\n\r\ntype R struct {\r\n\tN []*R\r\n}\r\n\r\nfunc main() {\r\n\tquick.Value(reflect.TypeOf(\u0026R{}), nil)\r\n}\r\n```\r\n\r\nThe problem with slices (or maps) is the competition between expansion by a factor 'complexSize' and termination with probability '1/complexSize'. Some sort of automatic shrinking of the expansion factor would tip the weight in favour of termination.\r\n\r\nTo cover all problematic combinations of recursive types one should probably test a monster like the following:\r\n\r\n```go\r\ntype R struct {\r\n\tPtr      *R\r\n\tSliceP   []*R\r\n\tSlice    []R\r\n\tMap      map[int]R\r\n\tMapP     map[int]*R\r\n\tMapR     map[*R]*R\r\n\tSliceMap []map[int]R\r\n}\r\n```\r\n",
	"user": {
		"login": "osocurioso",
		"id": 191517,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2015-08-29T19:28:00Z",
	"created_at": "2015-06-10T19:23:55Z",
	"updated_at": "2016-09-04T20:47:06Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
