{
	"id": 68144912,
	"body": "The concurrent GC on tip is configured to ensure correctness instead of\r\nthroughput. For example tip runs two mark phases, first concurrently and\r\nthen a stop the world runs another mark phase to ensure that the concurrent\r\nphase correctly identified all reachable object. In upcoming months tip\r\nwill see an increase in GC concurrency and a reduction in GC latency. Once\r\nlatency goals have been achieved and we are confident of correctness the\r\nredundant debugging code will be turned off and throughput performance will\r\nbe the focus.\r\n\r\nIf GC throughput is critical the 1.4 release version is a good alternative.\r\nIf not using tip and helping us vet the concurrent GC on your app is\r\ngreatly appreciated.\r\n\r\nSee golang.org/s/go14gc for more information on the GC roadmap.\r\n\r\n\r\n\r\nOn Thu, Dec 25, 2014 at 5:16 AM, siritinga \u003cnotifications@github.com\u003e wrote:\r\n\r\n\u003e *What version of Go are you using (go version)?*\r\n\u003e Tip: go version devel +c7eb966 Wed Dec 24 07:30:28 2014 +0000 linux/amd64\r\n\u003e\r\n\u003e *What operating system and processor architecture are you using?*\r\n\u003e Ubuntu 14.04 x64\r\n\u003e\r\n\u003e *What did you do?*\r\n\u003e This program: http://play.golang.org/p/S11jdxsbcK fills a data structure\r\n\u003e with 4 strings and then calls the garbage collector 10 times.\r\n\u003e Run in with Go 1.3 and tip\r\n\u003e\r\n\u003e *What did you expect to see?*\r\n\u003e Similar garbage collector times.\r\n\u003e\r\n\u003e *What did you see instead?*\r\n\u003e Garbage collector in 1.4 runs 10x slower.\r\n\u003e\r\n\u003e *Go 1.3*\r\n\u003e gc4(1): 2+1+36646+1 us, 85 -\u003e 127 MB, 2800074 (2800087-13) objects,\r\n\u003e 5498/1/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\r\n\u003e gc5(1): 2+1+37378+1 us, 127 -\u003e 127 MB, 2800071 (2800087-16) objects,\r\n\u003e 10918/0/10917 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\r\n\u003e gc6(1): 1+1+37230+1 us, 127 -\u003e 127 MB, 2800071 (2800087-16) objects,\r\n\u003e 10918/0/10917 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\r\n\u003e gc7(1): 2+1+36929+1 us, 127 -\u003e 127 MB, 2800071 (2800087-16) objects,\r\n\u003e 10918/0/10917 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\r\n\u003e gc8(1): 1+1+37184+1 us, 127 -\u003e 127 MB, 2800071 (2800087-16) objects,\r\n\u003e 10918/0/10917 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\r\n\u003e gc9(1): 2+3+37141+1 us, 127 -\u003e 127 MB, 2800071 (2800087-16) objects,\r\n\u003e 10918/0/10917 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\r\n\u003e gc10(1): 1+1+37324+1 us, 127 -\u003e 127 MB, 2800071 (2800087-16) objects,\r\n\u003e 10918/0/10917 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\r\n\u003e gc11(1): 2+1+37094+1 us, 127 -\u003e 127 MB, 2800071 (2800087-16) objects,\r\n\u003e 10918/0/10917 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\r\n\u003e gc12(1): 2+1+37145+1 us, 127 -\u003e 127 MB, 2800071 (2800087-16) objects,\r\n\u003e 10918/0/10917 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\r\n\u003e gc13(1): 3+1+37200+1 us, 127 -\u003e 127 MB, 2800071 (2800087-16) objects,\r\n\u003e 10918/0/10917 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\r\n\u003e GC time: 548.679965ms\r\n\u003e\r\n\u003e *Go tip*\r\n\u003e Finished creating data\r\n\u003e gc9(1): 141+31+97989+2 us, 76 -\u003e 140 MB, 3638137 (5600093-1961956)\r\n\u003e objects, 4 goroutines, 12556/1/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0\r\n\u003e yields\r\n\u003e gc10(1): 121682+2+316145+3 us, 140 -\u003e 140 MB, 3638137 (5600093-1961956)\r\n\u003e objects, 4 goroutines, 12556/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0\r\n\u003e yields\r\n\u003e gc11(1): 268+35+97374+1 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/12550 sweeps, 0(0) handoff, 0(0) steal,\r\n\u003e 0/0/0 yields\r\n\u003e gc12(1): 121174+4+310646+1 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0\r\n\u003e yields\r\n\u003e gc13(1): 264+36+97529+1 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/12547 sweeps, 0(0) handoff, 0(0) steal,\r\n\u003e 0/0/0 yields\r\n\u003e gc14(1): 121329+3+310720+2 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0\r\n\u003e yields\r\n\u003e gc15(1): 260+38+97381+1 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/12547 sweeps, 0(0) handoff, 0(0) steal,\r\n\u003e 0/0/0 yields\r\n\u003e gc16(1): 121165+4+311184+1 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0\r\n\u003e yields\r\n\u003e gc17(1): 232+37+97377+3 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/12547 sweeps, 0(0) handoff, 0(0) steal,\r\n\u003e 0/0/0 yields\r\n\u003e gc18(1): 121115+3+310686+1 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0\r\n\u003e yields\r\n\u003e gc19(1): 234+35+97324+2 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/12547 sweeps, 0(0) handoff, 0(0) steal,\r\n\u003e 0/0/0 yields\r\n\u003e gc20(1): 121161+4+311044+1 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0\r\n\u003e yields\r\n\u003e gc21(1): 267+36+97352+1 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/12547 sweeps, 0(0) handoff, 0(0) steal,\r\n\u003e 0/0/0 yields\r\n\u003e gc22(1): 121141+4+310624+1 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0\r\n\u003e yields\r\n\u003e gc23(1): 273+36+97464+1 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/12547 sweeps, 0(0) handoff, 0(0) steal,\r\n\u003e 0/0/0 yields\r\n\u003e gc24(1): 121231+2+310704+2 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0\r\n\u003e yields\r\n\u003e gc25(1): 290+38+97415+2 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/12547 sweeps, 0(0) handoff, 0(0) steal,\r\n\u003e 0/0/0 yields\r\n\u003e gc26(1): 121219+2+310661+1 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0\r\n\u003e yields\r\n\u003e gc27(1): 260+35+97305+1 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/12547 sweeps, 0(0) handoff, 0(0) steal,\r\n\u003e 0/0/0 yields\r\n\u003e gc28(1): 121098+2+310833+1 us, 127 -\u003e 127 MB, 2800063 (5600093-2800030)\r\n\u003e objects, 4 goroutines, 12556/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0\r\n\u003e yields\r\n\u003e GC time: 4.858439959s\r\n\u003e\r\n\u003e I understand that calling GC() is not the intended use. I noticed this\r\n\u003e behaviour in a bigger program, I saw a slowdown due to garbage collecting\r\n\u003e times using GODEBUG=gctrace=1 and then I made this smaller testing code.\r\n\u003e\r\n\u003e I also see that calling GC() on tip runs two garbage collections with\r\n\u003e different timing, but this behaviour is similar if the program just wait at\r\n\u003e the end and I see the debug traces.\r\n\u003e\r\n\u003e Thanks!\r\n\u003e\r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub\r\n\u003e \u003chttps://github.com/golang/go/issues/9441\u003e.\r\n\u003e",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-26T15:26:03Z",
	"updated_at": "2014-12-26T15:26:03Z"
}
