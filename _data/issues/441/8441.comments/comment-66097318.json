{
	"id": 66097318,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eHere's what I believe the issue to be:\n\nIn (*typeConv).Type(dwarf.Type, token.Pos), the case for dwarf.TypedefType overwrites\nt.Go if it notices that sub.Go is a struct/union type.  However, because this is\nnecessarily after the recursive call to Type(dt.Type, pos) to compute sub, the recursive\ncall might have recursed back to this same DWARF type and saved the original t.Go value.\n E.g., both the dwarf.ArrayType and dwarf.PtrType cases save the sub.Go values they\ncompute and won't be updated if the latter changes after returning.\n\nThe easiest fix seems to be to hack the dwarf.TypedefType case to check if dt.Type is a\ndwarf.StructType, and compute the correct t.Go value before recursing.\u003c/pre\u003e",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-08-05T00:11:04Z",
	"updated_at": "2014-12-08T10:46:55Z"
}
