{
	"id": 164525355,
	"number": 16297,
	"state": "closed",
	"title": "gofmt not ignoring easter egg keywords",
	"body": "1. What version of Go are you using (`go version`)?\r\ngo version go1.6.2 linux/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/foo/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n\r\n3. What did you do?\r\nhttps://play.golang.org/p/TBKqnR0WY5\r\n\r\n4. What did you expect to see?\r\nI expected gofmt to ignore these keywords: https://github.com/golang/go/blob/master/src/cmd/compile/internal/gc/lex.go#L610-L615\r\nto comply with the lexer.\r\n\r\n5. What did you see instead?\r\nA gofmt error. In my program, I make use of those keywords to improve readability, e.g.\r\n```\r\nfunc maybeErr() error {\r\n  // ....\r\n  despiteallobjections return err\r\n}\r\n```\r\nGofmt errors saying `expected ';', found return`\r\nIt would be nice if gofmt could handle these cases.\r\n\r\n",
	"user": {
		"login": "nubunto",
		"id": 5007727,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-07-08T14:53:30Z",
	"created_at": "2016-07-08T12:58:19Z",
	"updated_at": "2016-07-08T14:53:30Z",
	"reactions": {
		"total_count": 3,
		"-1": 3
	}
}
