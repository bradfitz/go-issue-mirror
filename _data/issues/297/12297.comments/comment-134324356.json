{
	"id": 134324356,
	"body": "@randall77\r\n\r\nThe advantage is not gained from avoiding copying, but rather from avoiding the need to compute the full hash. If ```s1``` and ```s2``` have the lengths ```n``` and ```m``` and assuming you already knew ```crc1```, then you could use the ```Update``` function, but would still have a runtime of ```O(m)```, which can still be significant.\r\n\r\nThe algorithm used by zlib can combine ```crc1```, ```crc2```, and ```len2``` in ```O(log m)``` time for CRC and ```O(1)``` for adler32.\r\n\r\nUseful applications of this:\r\n* Merging of any packet that uses crc. For example back-to-back gzip files can be merged into a single gzip file efficiently without recomputing the full hash. Other times, data is sent in chunks (along with their CRC). With Combine, it would now be efficient to merge the CRC of all of these chunks in less than linear time.\r\n* Computing crc in parallel.\r\n * As a practical example: [github.com/klauspost/pgzip](https://github.com/klauspost/pgzip/blob/master/gzip.go#L351) could benefit from having each routine compute the CRC individually and have the master just merge the results.",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-24T18:18:42Z",
	"updated_at": "2015-08-24T19:37:12Z"
}
