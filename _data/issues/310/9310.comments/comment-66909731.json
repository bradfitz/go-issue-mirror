{
	"id": 66909731,
	"body": "This doesn't make any sense. There's no requirement for a package's position in `GOPATH` to exactly match its position in any hosted source control system, which is what allows vanity imports to work. I don't see any reason why developers cannot put the package they develop in exactly the same position in their `GOPATH` as their users do. In fact, a lot of the time the line between \"developer\" and \"user\" of a particular package becomes blurred, making even less sense for them to be in different places.\r\n\r\nYou say \"And it does not make sense to clone the repository to a path that is an redirect and not the real path.\", but it makes perfect sense to me. The \"real\" path when using a vanity import *is* the vanity import. That's what the package is known as. The fact that a source control system hosts it under a different path is an implementation detail.\r\n\r\nInstead of your\r\n```\r\ncd $GOPATH/src/github.com/metakeule/\r\ngit clone https://github.com/metakeule/loop.git\r\n```\r\nI would do\r\n```\r\ncd $GOPATH/src/gopkg.in/metakeule/\r\ngit clone https://github.com/metakeule/loop.git loop.v1\r\n```\r\nand your problem is solved. `go build` everywhere will work as expected.",
	"user": {
		"login": "dsymonds",
		"id": 31506,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-14T11:13:47Z",
	"updated_at": "2014-12-14T11:13:47Z"
}
