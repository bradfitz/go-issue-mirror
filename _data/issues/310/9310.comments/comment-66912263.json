{
	"id": 66912263,
	"body": "@robertmeta \r\n\r\nFirst the go command tool should not dictate my VCS workflow.\r\nSecond:\r\n\r\n\u003e edit 3rd (canonical) place, git add, git commit, git push, go get -u loop.v2, go test \u003e thingThatDependsOn.loop.v2\r\n\r\n\u003e rather than adding a remote, and doing \"go test thingThatDependsOn.loop.v2\"\r\n\r\nI think you point it the wrong way. If I fix loop then I don't fix it because thingThatDependsOn.loop.v2\r\nis broken, but because of:\r\n\r\na) there is a need for a new feature and therefor the version and API of loop changes\r\nor -\r\nb) there is a bug inside loop\r\n\r\n1. In both cases I will develop in the same directory, namely github.com/metakeule/loop\r\n2. In case a) the API changes and therefor a new version is tagged (and branch created) and the canonical import changed to \"gopkg.in/metakeule/loop.v3\" commit and pushed upstream. Then all packages that depend on a previous version of loop and that need the new feature will be updated. It might simplify life to always keep the packages dependend on the latest version, that would be done via sed/gopkg.in/metakeule/loop.v2/gopkg.in/metakeule/loop.v3\r\n3. In case b) the problem is fixed in the main branch and tested and merged and tested in all supported branches. then all branches and tags are pushed (`git push --all origin`) and go getted (you might program a little script for the latter)\r\n4. run go test ./... inside $GOPATH",
	"user": {
		"login": "metakeule",
		"id": 180603,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-14T12:53:09Z",
	"updated_at": "2014-12-14T13:04:17Z"
}
