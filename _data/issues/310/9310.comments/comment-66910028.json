{
	"id": 66910028,
	"body": "The difference between a developer and a user is that the developer will push to the hosting repository.\r\n\r\nTherefor it is important for the developer to know the hosting repo anyway, because there might be an issue tracker etc. Once a user become a developer he must make himself know the hosting repository anyway. So this is not an implementation detail for a developer, but essential.\r\n\r\nTo quote myself from the [thread at gonuts](https://groups.google.com/forum/#!topic/golang-nuts/Hk3mGRrZn9k):\r\n\r\n```\r\nIn the case of gopkg.in some reasons why development in $GOPATH/src/gopkg.in/robertmeta/library.v1\r\nis  suboptimal:\r\n\r\n- inconsistency between unversioned and versioned package paths:\r\nunversioned package paths have same path as hosting site, versioned not\r\nwhich leads to the fact that in a team everbody developing on a package must\r\nknow that once a canonical path is introduced they have to change their gopath layout\r\n\r\n- there is no way to clone from gopkg.in/robertmeta/library.v1 and commit to it. you have to clone from\r\ngithub as repo committer and that into a different path than the github repo\r\n\r\n- for N versions you end up with N working/developing copies\r\n\r\n- to merge a patch to N versions all working copies must have the latest version, so just must go to N\r\nworking copies and pull/merge into them. Now with several developers, each of them must do this\r\n\r\n- how does any of the developers know that a new version has been tagged? must go to the hosting site to find out\r\nwith only one repository there is just a regular pull and look at the tags\r\n\r\n- if the canonical path changes for whatever reason (something better than gopkg.in appears) all developers have to reconfigure their working copies again.\r\n```",
	"user": {
		"login": "metakeule",
		"id": 180603,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-14T11:28:30Z",
	"updated_at": "2014-12-14T11:28:30Z"
}
