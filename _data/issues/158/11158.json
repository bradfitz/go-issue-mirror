{
	"id": 87187896,
	"number": 11158,
	"state": "closed",
	"title": "spec: inferred type math performed before a deduced type change?",
	"body": "using: go1.4.2 darwin/amd64\r\n\r\nhere is what I did:\r\n\r\n```go\r\n\r\na := 0.5\r\n\r\na *= 2/3\r\n```\r\n\r\nand I got: `a = 0` where I expected to get `0.333333333..` or a `type mismatch` error.\r\n\r\nThis seems to also happen if you use:\r\n` a = 2/3*a`\r\n\r\nHere is a [go.play](http://play.golang.org/p/MXDYcRhl_U) for more examples\r\n\r\nThanks to some unit testing, I stumbled upon this, and to me at least it seems like an inference typing bug.\r\n\r\nWith this behavior, when using numbers of implied types in an equation, the results can be unexpected, and troublesome (at least for me).\r\n\r\nPresumably go is inferring that 2 and 3 are `int`'s and doing integer math, and then realizing that `a` is a `float64` and doing something like `float64(2/3)`. I would have instead expected that it would convert everything to `float64` before doing any calculations: `float64(2)/float64(3)*a` or give a `type mismatch` error\r\n\r\nThe fact that it deduces and changes the type based on context makes sense. What *does not* make sense to me is that it does operations with the original inferred type, and then proceeds to change the type while preserving the result from the already completed operation.\r\n\r\nSo perhaps convert all elements of an equation to the same type before completing any operations, or just raise a type error and make the programmer be explicit.\r\n",
	"user": {
		"login": "crmackay",
		"id": 3801862,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2015-06-11T02:50:40Z",
	"created_at": "2015-06-11T02:45:37Z",
	"updated_at": "2016-06-25T02:10:54Z"
}
