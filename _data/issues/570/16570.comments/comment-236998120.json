{
	"id": 236998120,
	"body": "Oh.\r\n\r\n(Quoting myself...)\r\n\r\n\u003e basically, since FOREVER, `gettimeofday()` was the only real way to get true monotonic time on Darwin (there's no `clock_gettime()`).\r\n\r\n\u003e Is there a better fix now in place? Or... what?\r\n\r\n```\r\n\r\nCLOCK_GETTIME(3)         BSD Library Functions Manual         CLOCK_GETTIME(3)\r\n\r\nNAME\r\n     clock_gettime, clock_settime, clock_getres, clock_gettime_nsec_np --\r\n     get/set date and time\r\n\r\nSYNOPSIS\r\n     #include \u003ctime.h\u003e\r\n\r\n     int\r\n     clock_gettime(clockid_t clock_id, struct timespec *tp);\r\n\r\n     int\r\n     clock_settime(clockid_t clock_id, const struct timespec *tp);\r\n\r\n     int\r\n     clock_getres(clockid_t clock_id, struct timespec *tp);\r\n\r\n     uint64_t\r\n     clock_gettime_nsec_np(clockid_t clock_id);\r\n\r\nDESCRIPTION\r\n     The clock_gettime() and clock_settime() functions allow the calling\r\n     process to retrieve or set the value used by a clock which is specified\r\n     by clock_id.\r\n\r\n     clock_id can be a value from one of 5 predefined values:\r\n\r\n     CLOCK_REALTIME     the system's real time (i.e. wall time) clock,\r\n                        expressed as the amount of time since the Epoch.  This\r\n                        is the same as the value returned by gettimeofday(2).\r\n\r\n     CLOCK_MONOTONIC    clock that increments monotonically, tracking the time\r\n                        since an arbitrary point, and will continue to incre-\r\n                        ment while the system is asleep.\r\n\r\n     CLOCK_MONOTONIC_RAW\r\n                        clock that increments monotonically, tracking the time\r\n                        since an arbitrary point like CLOCK_MONOTONIC.  How-\r\n                        ever, this clock is unaffected by frequency or time\r\n                        adjustments.  It should not be compared to other sys-\r\n                        tem time sources.\r\n\r\n     CLOCK_MONOTONIC_RAW_APPROX\r\n                        like CLOCK_MONOTONIC_RAW, but reads a value cached by\r\n                        the system at context switch.  This can be read\r\n                        faster, but at a loss of accuracy as it may return\r\n                        values that are milliseconds old.\r\n\r\n     CLOCK_UPTIME_RAW   clock that increments monotonically, in the same man-\r\n                        ner as CLOCK_MONOTONIC_RAW, but that does not incre-\r\n                        ment while the system is asleep.  The returned value\r\n                        is identical to the result of mach_absolute_time()\r\n                        after the appropriate mach_timebase conversion is\r\n                        applied.\r\n\r\n     CLOCK_UPTIME_RAW_APPROX\r\n                        like CLOCK_UPTIME_RAW, but reads a value cached by the\r\n                        system at context switch.  This can be read faster,\r\n                        but at a loss of accuracy as it may return values that\r\n                        are milliseconds old.\r\n\r\n     CLOCK_PROCESS_CPUTIME_ID\r\n                        clock that tracks the amount of CPU (in user- or ker-\r\n                        nel-mode) used by the calling process.\r\n\r\n     CLOCK_THREAD_CPUTIME_ID\r\n                        clock that tracks the amount of CPU (in user- or ker-\r\n                        nel-mode) used by the calling thread.\r\n\r\n     The structure pointed to by tp is defined in \u003csys/time.h\u003e as:\r\n\r\n           struct timespec {\r\n               time_t  tv_sec;     /* seconds */\r\n               long    tv_nsec;    /* and nanoseconds */\r\n           };\r\n\r\n     Only the CLOCK_REALTIME clock can be set, and only the superuser may do\r\n     so.\r\n\r\n     The resolution of a clock is returned by the clock_getres() call.  This\r\n     value is placed in a (non-null) *tp.  This value may be smaller than the\r\n     actual precision of the underlying clock, but represents a lower bound on\r\n     the resolution.\r\n\r\n     As a non-portable extension, the clock_gettime_nsec_np() function will\r\n     return the clock value in 64-bit nanoseconds.\r\n\r\nRETURN VALUES\r\n     A 0 return value indicates that the call succeeded.  A -1 return value\r\n     indicates an error occurred, and in this case an error code is stored\r\n     into the global variable errno.  For clock_gettime_nsec_np() a return\r\n     value of non-0 indicates success.  A 0 return value indicates an error\r\n     occurred and an error code is stored in errno.\r\n\r\nERRORS\r\n     clock_gettime(), clock_settime(), clock_getres(), and\r\n     clock_gettime_nsec_np() will fail if:\r\n\r\n     [EINVAL]           clock_id is not a valid value.\r\n\r\n     [EFAULT]           The tp argument address referenced invalid memory.\r\n\r\n     In addition, clock_settime() may return the following errors:\r\n\r\n     [EPERM]            A user other than the superuser attempted to set the\r\n                        time.\r\n\r\n     [EINVAL]           clock_id specifies a clock that isn't settable, tp\r\n                        specifies a nanosecond value less than zero or greater\r\n                        than 1000 million, or a value outside the range of the\r\n                        specified clock.\r\n\r\nSEE ALSO\r\n     date(1), getitimer(2), gettimeofday(2),\r\n\r\nHISTORY\r\n     These functions first appeared in Mac OSX 10.12\r\n\r\nSTANDARDS\r\n     The clock_gettime(), clock_settime(), and clock_getres() system calls\r\n     conform to IEEE Std 1003.1b-1993 (``POSIX.1'').  cleck_gettime_nsec_np()\r\n     is a non-portable Darwin extension.  The clock IDs CLOCK_MONOTONIC_RAW\r\n     and CLOCK_UPTIME_RAW are extensions to the POSIX interface.\r\n\r\nBSD                            January 26, 2016                            BSD\r\n```\r\n\r\n\u003e ** These functions first appeared in Mac OSX 10.12 **",
	"user": {
		"login": "geoff-codes",
		"id": 3162811,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-02T18:31:31Z",
	"updated_at": "2016-08-02T18:33:23Z"
}
