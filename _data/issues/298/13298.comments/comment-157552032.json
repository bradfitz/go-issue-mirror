{
	"id": 157552032,
	"body": "Twitter is replying with \"Content-Encoding: gzip\" even without \"Accept-Encoding: gzip\"?\r\n\r\nThe http2 transport is not sending \"Accept-Encoding: gzip\". Thus, it's not the Go Transport's job to decompress it.\r\n\r\nThe HTTP/1 Transport code only decompresses it when it asks for it itself, using the logic in `transport.go`:\r\n\r\n```go\r\n        // Ask for a compressed version if the caller didn't set their                                                                                                                       \r\n        // own value for Accept-Encoding. We only attempt to                                                                                                                                 \r\n        // uncompress the gzip stream if we were the layer that                                                                                                                              \r\n        // requested it.                                                                                                                                                                     \r\n        requestedGzip := false\r\n        if !pc.t.DisableCompression \u0026\u0026\r\n                req.Header.Get(\"Accept-Encoding\") == \"\" \u0026\u0026\r\n                req.Header.Get(\"Range\") == \"\" \u0026\u0026\r\n                req.Method != \"HEAD\" {\r\n                // Request gzip only, not deflate. Deflate is ambiguous and                                                                                                                  \r\n                // not as universally supported anyway.                                                                                                                                      \r\n                // See: http://www.gzip.org/zlib/zlib_faq.html#faq38                                                                                                                         \r\n                //                                                                                                                                                                           \r\n                // Note that we don't request this for HEAD requests,                                                                                                                        \r\n                // due to a bug in nginx:                                                                                                                                                    \r\n                //   http://trac.nginx.org/nginx/ticket/358                                                                                                                                  \r\n                //   https://golang.org/issue/5522                                                                                                                                           \r\n                //                                                                                                                                                                           \r\n                // We don't request gzip if the request is for a range, since                                                                                                                \r\n                // auto-decoding a portion of a gzipped document will just fail                                                                                                              \r\n                // anyway. See https://golang.org/issue/8923                                                                                                                                 \r\n                requestedGzip = true\r\n                req.extraHeaders().Set(\"Accept-Encoding\", \"gzip\")\r\n        }\r\n```\r\n\r\nSo, yes, HTTP/2 should do the same. But it's a little weird that Twitter is replying like that too.\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-18T00:14:15Z",
	"updated_at": "2015-11-18T00:14:15Z"
}
