{
	"id": 51286935,
	"number": 7593,
	"state": "closed",
	"title": "misc/vim: typing \":\" causes unindent in some cases",
	"body": "\u003cpre\u003eWhat does 'go version' print?\ngo version go1.2 linux/amd64\n\nWhat steps reproduce the problem?\n1. With misc/vim enabled in vim, open a new go file for editing.\n2. Enter the following:\nfor _, x := range blah {\n\t\n(Including the leading tab on the 2nd line.)\n3. Hit \u0026lt;Esc\u0026gt; to exit insert mode, then A to re-enter it just after the leading tab.\n4. Begin typing \u0026quot;z :=\u0026quot;.\n\nWhat happened?\nImmediately after you type \u0026quot;:\u0026quot;, vim removes a level of leading indent,\napparently interpreting the \u0026quot;z\u0026quot; as a switch statement label.\n\nWhat should have happened instead?\nThe indent level should not have changed. You should see the \u0026quot;\tz :=\u0026quot; you typed\nwith the leading tab included.\n\nThis only happens if you exit insert mode and re-enter as described. If you type the\nfull code sample in one insert-mode session, the indent level does not suddenly change\non you.\n\nIt looks like similar issues already came up once in\n\u003ca href=\"https://groups.google.com/forum/#\"\u003ehttps://groups.google.com/forum/#\u003c/a\u003e!topic/golang-nuts/Hx5P3tdVq-Q and there was an attempt\nto work around them in GoIndent. That might account for why it takes such weird specific\nsteps to reproduce. I suspect the code is scanning the current line to determine whether\nit's label-like, but only scans part of the line if you enter insert mode in the middle.\u003c/pre\u003e",
	"user": {
		"login": "dbarnett",
		"id": 65244,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Suggested"
		}
	],
	"assignee": {
		"login": "dsymonds",
		"id": 31506,
		"type": "User",
		"site_admin": false
	},
	"comments": 10,
	"closed_at": "2014-12-08T10:42:11Z",
	"created_at": "2014-03-20T05:08:39Z",
	"updated_at": "2016-06-25T01:30:22Z"
}
