{
	"id": 249885252,
	"body": "Thanks for the report. This commit wasn't expected to change performance at all.\r\n\r\nI'm able to reproduce the slowdown on my workstation using the TimeFormat benchmark from $GOROOT/test/bench/go1.\r\n\r\nMy simplest hypothesis was that I'd simply screwed up the change and thrown off the scheduling of GC, but that appears not to be the case. The number of GCs is unchanged and all of the heap-based scheduling is identical to the megabyte. The wall-clock times for GC are also nearly identical (easily within the noise). Furthermore, there's only one GC during the benchmark itself and its times are the same to within a microsecond.\r\n\r\nBefore:\r\n```\r\n$ GOMAXPROCS=1 GODEBUG=gctrace=1 ./issue-17250/bench.196df6f -test.bench TimeFormat\r\n...\r\ngc 9 @3.564s 0%: 0.011+1.6+0.010 ms clock, 0.011+0/1.6/0+0.010 ms cpu, 427-\u003e427-\u003e286 MB, 573 MB goal, 1 P\r\n 5000000               346 ns/op\r\n```\r\n\r\nAfter:\r\n```\r\n$ GOMAXPROCS=1 GODEBUG=gctrace=1 ./issue-17250/bench.ec9c84c -test.bench TimeFormat                                                         \r\n...\r\ngc 9 @3.618s 0%: 0.012+1.6+0.009 ms clock, 0.012+0/1.6/0+0.009 ms cpu, 427-\u003e427-\u003e286 MB, 573 MB goal, 1 P\r\n 5000000               360 ns/op\r\n```\r\n\r\nThis all suggests a subtler effect, and most likely on malloc rather than GC.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-27T14:40:52Z",
	"updated_at": "2016-09-27T14:40:52Z"
}
