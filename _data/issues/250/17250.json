{
	"id": 179463024,
	"number": 17250,
	"state": "closed",
	"title": "runtime: performance regression in ec9c84c8",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n```\r\ngo version devel +8f9e2ab Mon Sep 26 20:31:56 2016 +0000 linux/amd64\r\n```\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/mvdan/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/home/mvdan/tip\"\r\nGOTOOLDIR=\"/home/mvdan/tip/pkg/tool/linux_amd64\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build104152461=/tmp/go-build -gno-record-gcc-switches\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n### What did you do?\r\n\r\n* Run benchmarks of my package (tip `3311275c`)\r\n* Pull tip and rebuild it (`196df6f0`)\r\n* Re-run benchmarks.\r\n* Compare old and new benchmarks with `benchstat`.\r\n\r\n### What did you expect to see?\r\n\r\n* Similar or slightly better benchmark results\r\n\r\n### What did you see instead?\r\n\r\n```\r\nname                 old time/op    new time/op    delta\r\nParse/Whitespace-4      639ns ± 1%     651ns ± 1%  +1.85%          (p=0.002 n=6+6)\r\nParse/Comment-4         347ns ± 1%     354ns ± 1%  +2.16%          (p=0.002 n=6+6)\r\nParse/LongLit-4        1.02µs ± 3%    1.01µs ± 0%    ~             (p=0.301 n=6+6)\r\nParse/Cmds-4           10.4µs ± 1%    10.4µs ± 0%    ~             (p=0.513 n=6+6)\r\nParse/Quoted-4         1.20µs ± 1%    1.25µs ± 1%  +4.36%          (p=0.002 n=6+6)\r\nParse/NestedStmts-4    5.87µs ± 0%    5.87µs ± 1%    ~             (p=0.873 n=4+5)\r\nParse/Assign-4         1.66µs ± 1%    1.68µs ± 1%  +0.96%          (p=0.009 n=6+6)\r\nParse/Clauses-4        3.64µs ± 1%    3.62µs ± 0%  -0.72%          (p=0.013 n=6+6)\r\nParse/Binary-4         3.71µs ± 3%    3.68µs ± 1%    ~             (p=0.784 n=6+6)\r\nParse/Redirect-4       3.43µs ± 1%    3.59µs ± 1%  +4.76%          (p=0.002 n=6+6)\r\nParse/Arithm-4         5.50µs ± 1%    5.44µs ± 2%    ~             (p=0.065 n=6+6)\r\nFprint-4               5.12µs ± 1%    5.25µs ± 5%  +2.46%          (p=0.017 n=6+6)\r\n```\r\n\r\nI focused on `Parse/Quoted` and tried to search what commit was producing such a noticeable slowdown. I narrowed it down to ec9c84c8840124b4cf883ab08f6c2dc6baf20732:\r\n\r\n```\r\n $ benchstat 196df6f0c ec9c84c8\r\nname            old time/op    new time/op    delta\r\nParse/Quoted-4    1.20µs ± 0%    1.25µs ± 1%  +3.77%          (p=0.004 n=6+5)\r\n\r\nname            old alloc/op   new alloc/op   delta\r\nParse/Quoted-4      744B ± 0%      744B ± 0%    ~     (all samples are equal)\r\n\r\nname            old allocs/op  new allocs/op  delta\r\nParse/Quoted-4      14.0 ± 0%      14.0 ± 0%    ~     (all samples are equal)\r\n```\r\n\r\nThis test mainly takes a slice of bytes and iterates through it, with some simple logic and garbage generation. I'm not sure what metrics would be useful here, or how to narrow down the problem to provide a small play.golang.org benchmark that wasn't part of a big package.\r\n\r\nHere are the pprof results of both before and after the tip commit. Before:\r\n\r\n```\r\n $ ./1_parser.test -test.bench=Parse/Quoted -test.cpuprofile=1_cpu.out -test.benchtime=5s\r\n $ go tool pprof 1_parser.test 1_cpu.out\r\n(pprof) top\r\n5520ms of 8110ms total (68.06%)\r\nDropped 73 nodes (cum \u003c= 40.55ms)\r\nShowing top 10 nodes out of 82 (cum \u003e= 180ms)\r\n      flat  flat%   sum%        cum   cum%\r\n    1760ms 21.70% 21.70%     3290ms 40.57%  runtime.mallocgc\r\n    1070ms 13.19% 34.90%     1400ms 17.26%  github.com/mvdan/sh/parser.(*parser).advanceLitDquote\r\n     820ms 10.11% 45.01%      820ms 10.11%  runtime.heapBitsSetType\r\n     480ms  5.92% 50.92%     1340ms 16.52%  runtime.growslice\r\n     300ms  3.70% 54.62%      300ms  3.70%  runtime.memclr\r\n     260ms  3.21% 57.83%     3580ms 44.14%  github.com/mvdan/sh/parser.(*parser).wordPart\r\n     250ms  3.08% 60.91%      440ms  5.43%  runtime.scanobject\r\n     220ms  2.71% 63.63%     4570ms 56.35%  github.com/mvdan/sh/parser.(*parser).wordParts\r\n     180ms  2.22% 65.84%     1670ms 20.59%  github.com/mvdan/sh/parser.(*parser).next\r\n     180ms  2.22% 68.06%      180ms  2.22%  runtime.greyobject\r\n```\r\n\r\nAfter:\r\n\r\n```\r\n $ ./2_parser.test -test.bench=Parse/Quoted -test.cpuprofile=2_cpu.out -test.benchtime=5s\r\n $ go tool pprof 2_parser.test 2_cpu.out\r\n(pprof) top\r\n5790ms of 8240ms total (70.27%)\r\nDropped 74 nodes (cum \u003c= 41.20ms)\r\nShowing top 10 nodes out of 81 (cum \u003e= 140ms)\r\n      flat  flat%   sum%        cum   cum%\r\n    1910ms 23.18% 23.18%     3470ms 42.11%  runtime.mallocgc\r\n    1460ms 17.72% 40.90%     1860ms 22.57%  github.com/mvdan/sh/parser.(*parser).advanceLitDquote\r\n     780ms  9.47% 50.36%      780ms  9.47%  runtime.heapBitsSetType\r\n     410ms  4.98% 55.34%      410ms  4.98%  runtime.memclr\r\n     370ms  4.49% 59.83%     1220ms 14.81%  runtime.growslice\r\n     220ms  2.67% 62.50%     3910ms 47.45%  github.com/mvdan/sh/parser.(*parser).wordPart\r\n     180ms  2.18% 64.68%      180ms  2.18%  runtime.greyobject\r\n     160ms  1.94% 66.63%     4760ms 57.77%  github.com/mvdan/sh/parser.(*parser).wordParts\r\n     160ms  1.94% 68.57%      340ms  4.13%  runtime.scanobject\r\n     140ms  1.70% 70.27%      140ms  1.70%  runtime.memmove\r\n```\r\n\r\nI can upload the test binaries if that would help.",
	"user": {
		"login": "mvdan",
		"id": 3576549,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"comments": 9,
	"closed_at": "2016-09-28T20:59:12Z",
	"created_at": "2016-09-27T11:07:35Z",
	"updated_at": "2016-09-29T09:48:20Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
