{
	"id": 168971224,
	"number": 16578,
	"state": "closed",
	"title": "Add support for line breaks for base64 input to json.Unmarshal()",
	"body": "I would like to see `encoding/json` support email-style formatted base64 input.  That is to say, I would like to see the following code not panic.\r\n\r\n    var data []byte = []byte(`\r\n    [\"VGhpcyBpcyBhIGxvbmcgdGV4dCBmaWxlLCBqdXN0IGZpbGxlZCBpbiB3aXRoIHJhbmRvbSB0ZXh0\r\n    IHRvIGZvcmNlIGxpbmUKd3JhcHBpbmcgb25jZSBpdCdzIEJhc2U2NC1lbmNvZGVkLgo=\"]\r\n    `)\r\n\r\n    func main() {\r\n    \tdec := make([]string,0)\r\n    \terr := json.Unmarshal(data, \u0026dec)\r\n    \tif err != nil {\r\n    \t\tpanic(err)\r\n    \t}\r\n    }\r\n\r\nWith the current implementation, however, it does panic:\r\n\r\n\u003e panic: invalid character '\\n' in string literal\r\n\r\nWhy? It would make it easier to write readable unit tests of code that does a lot of marshaling and unmarshaling of custom data types.\r\n\r\nI can't imagine it would be especially expensive to support this feature always, as I imagine simply filtering out all whitespace from the input stream would do it. But if it did prove to be expensive, supporting it only optionally some how would be reasonable for me as well.",
	"user": {
		"login": "flimzy",
		"id": 8555063,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-08-02T20:13:48Z",
	"created_at": "2016-08-02T19:43:33Z",
	"updated_at": "2016-08-02T20:13:48Z"
}
