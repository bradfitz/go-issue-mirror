{
	"id": 255571210,
	"body": "I must admit that I do not know how to create a CL on a branch.\r\n\r\nThe patch for #14795 is:\r\n\r\n    diff -r 4857784ba342 src/runtime/sys_linux_386.s\r\n    --- a/src/runtime/sys_linux_386.s\tThu Jan 08 14:10:03 2015 +1100\r\n    +++ b/src/runtime/sys_linux_386.s\tSat Oct 22 22:52:26 2016 -0700\r\n    @@ -379,9 +379,18 @@\r\n     #define SEG_NOT_PRESENT 0x20\r\n     #define USEABLE 0x40\r\n\r\n    +// `-1` means the kernel will pick a TLS entry on the first setldt call,\r\n    +// which happens during runtime init, and that we'll store back the saved\r\n    +// entry and reuse that on subsequent calls when creating new threads.\r\n    +DATA  runtime·tls_entry_number+0(SB)/4, $-1\r\n    +GLOBL runtime·tls_entry_number(SB), NOPTR, $4\r\n    +\r\n     // setldt(int entry, int address, int limit)\r\n    +// We use set_thread_area, which mucks with the GDT, instead of modify_ldt,\r\n    +// which would modify the LDT, but is disabled on some kernels.\r\n    +// The name, setldt, is a misnomer, although we leave this name as it is for\r\n    +// the compatibility with other platforms.\r\n     TEXT runtime·setldt(SB),NOSPLIT,$32\r\n    -\tMOVL\tentry+0(FP), BX\t// entry\r\n\t    MOVL\taddress+4(FP), CX\t// base address\r\n\r\n\t    /*\r\n    @@ -400,18 +409,19 @@\r\n\t    ADDL\t$0x8, CX\t// address\r\n\t    MOVL\tCX, 0(CX)\r\n\r\n    +\t// get entry number\r\n    +\tMOVL\truntime·tls_entry_number(SB), DX\r\n    +\r\n\t    // set up user_desc\r\n\t    LEAL\t16(SP), AX\t// struct user_desc\r\n    -\tMOVL\tBX, 0(AX)\r\n    -\tMOVL\tCX, 4(AX)\r\n    -\tMOVL\t$0xfffff, 8(AX)\r\n    +\tMOVL\tDX, 0(AX)\t// unsigned int entry_number\r\n    +\tMOVL\tCX, 4(AX)\t// unsigned long base_addr\r\n    +\tMOVL\t$0xfffff, 8(AX)\t// unsigned int limit\r\n\t    MOVL\t$(SEG_32BIT|LIMIT_IN_PAGES|USEABLE|CONTENTS_DATA), 12(AX)\t// flag bits\r\n\r\n    -\t// call modify_ldt\r\n    -\tMOVL\t$1, BX\t// func = 1 (write)\r\n    -\tMOVL\tAX, CX\t// user_desc\r\n    -\tMOVL\t$16, DX\t// sizeof(user_desc)\r\n    -\tMOVL\t$123, AX\t// syscall - modify_ldt\r\n    +\t// call set_thread_area\r\n    +\tMOVL\tAX, BX\t// user_desc\r\n    +\tMOVL\t$243, AX\t// syscall - set_thread_area\r\n\t    CALL\t*runtime·_vdso(SB)\r\n\r\n\t    // breakpoint on error\r\n    @@ -419,10 +429,18 @@\r\n\t    JLS 2(PC)\r\n\t    INT $3\r\n\r\n    -\t// compute segment selector - (entry*8+7)\r\n    -\tMOVL\tentry+0(FP), AX\r\n    +\t// read allocated entry number back out of user_desc\r\n    +\tLEAL\t16(SP), AX\t// get our user_desc back\r\n    +\tMOVL\t0(AX), AX\r\n    +\r\n    +\t// store entry number if the kernel allocated it\r\n    +\tCMPL\tDX, $-1\r\n    +\tJNE\t2(PC)\r\n    +\tMOVL\tAX, runtime·tls_entry_number(SB)\r\n    +\r\n    +\t// compute segment selector - (entry*8+3)\r\n\t    SHLL\t$3, AX\r\n    -\tADDL\t$7, AX\r\n    +\tADDL\t$3, AX\r\n\t    MOVW\tAX, GS\r\n\r\n\t    RET\r\n",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-23T05:52:54Z",
	"updated_at": "2016-10-23T05:52:54Z"
}
