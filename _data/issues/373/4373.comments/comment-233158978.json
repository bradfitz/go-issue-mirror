{
	"id": 233158978,
	"body": "I'm trying to find out the correct way to shut down a Listener too.\r\nMy program has an interactive mode in which the user should be able to start and stop listening anytime. Any error should be displayed and possibly terminate the program but of course the \"use of closed network connection\" one shouldn't (by the logic of the program there was no error at all).\r\n\r\nIf there was a net.ErrClosing I would have done something like this and just called l.Close from the terminal handling goroutine:\r\n```\r\nl, err := net.Listen(\"unix\", mysocket)\r\nif err != nil {\r\n    log.Fatal(err)\r\n}\r\nL:\r\nfor {\r\n    conn, err := l.Accept()\r\n    switch err {\r\n    case nil:\r\n        go handle(conn)\r\n    case net.ErrClosing:\r\n        break L\r\n    default:\r\n        log.Fatal(err)\r\n    }\r\n}\r\n```\r\nIs there a way to handle this, currently?\r\nI could use a channel or mutex to send the information about the Close inside the above for loop, but I still wouldn't know whether the value of err was caused by a Close or not.",
	"user": {
		"login": "clementino",
		"id": 4610628,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-17T00:50:17Z",
	"updated_at": "2016-07-17T00:50:17Z"
}
