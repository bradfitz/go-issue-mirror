{
	"id": 66063734,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eI spent some time on this and although there are easy fixes for some of the details I\nwould prefer not to make them right now, but rather wait until after Go 1 is released.\n\nThe chaining bug (mapString.key) is maybe just an oversight, and is easy to fix but not\nas cleanly as I would like. I dabbled in a deep change to the evaluator with good\nresults, but there are subtle semantic changes that urge caution.\n\nThe case where there is no following field is tricky because it is ambiguous whether the\nfunction should be called. Consider\n\n  {{f}}\n\nIf is a function, we call it. But if f is a function returning a function, do we call it\nor don't we? It's not obvious. We don't have the f() notation to tell us now many calls\nto make: f f() f()() f()()() etc.\n\nEven in apparently more clear-cut cases, there are ambiguities. Consider\n\n  {{f 1}}\n\nThis could mean f takes one argument and we call f(1), or it could mean f is a niladic\nfunction-valued function that we call once, then use that: f()(1). This ambiguity\nbothers me; I would like the syntax to tell me what to do.\n\nTemplates do not have general evaluation capability, and this issue report touches one\nor two areas where that can be problematic.  Since there are workarounds for these\nexamples no worse than a custom function for some cases, I would prefer to wait until\nafter Go 1, when I plan to do some major work on the evaluator.\u003c/pre\u003e\n\n_Labels changed: added **priority-later**, removed **priority-go1**._",
	"user": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-03-03T03:58:02Z",
	"updated_at": "2014-12-08T10:16:19Z"
}
