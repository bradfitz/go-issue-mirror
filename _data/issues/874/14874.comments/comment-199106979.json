{
	"id": 199106979,
	"body": "I'm not entirely sure about shared libraries.\r\n\r\nIn the single-executable case, what happens is that packages X and Y will both emit a go.itab.t.T,i.I symbol which is marked as dupok. The linker then notices the two same-named symbols, throws one, keeps the other, and we end up with a unique itab in the final binary (I actually tested this).\r\n\r\nIn the case of shared libraries, I'm not sure how dupok symbols are handled, but I would assume they have to be handled already anyway - before my changes, libX.so and libY.so already both define go.type.t.T and they already need to end up with a single symbol being used. I don't quite remember ELF semantics but I think what happens is that the linker loads shared libraries in a certain order and if one redefines a previously linked global symbol, the new definition is thrown out and the symbol is made to point to the previous definition instead (essentially giving dupok semantics to all ELF global symbols).",
	"user": {
		"login": "walken-google",
		"id": 17941188,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-21T03:59:42Z",
	"updated_at": "2016-03-21T03:59:42Z"
}
