{
	"id": 51288186,
	"number": 8430,
	"state": "closed",
	"title": "runtime: memory stats broken",
	"body": "\u003cpre\u003eThe value of HeapInuse, as displayed by runtime.ReadMemStats, and in the scavenger lines\nwhen gc trace mode is enabled both show excessively large values. HeapIdle values look\nalso to be inflated, although not to such an extreme degree.\n\nFor example, on my machine: go version devel +fda4c0d14c53 Sat Jul 26 17:46:51 2014\n-0400 darwin/amd64\n\nUsing the net/http/pprof interface when running godoc (after a few minutes of running)\nprovides:\n# runtime.MemStats\n# Alloc = 1811664\n# TotalAlloc = 134017400\n# Sys = 25450744\n# Lookups = 11707\n# Mallocs = 521186\n# Frees = 502891\n# HeapAlloc = 1811664\n# HeapSys = 15138816\n# HeapIdle = 918953984\n# HeapInuse = 18446744072783716352\n# HeapReleased = 10821632\n# HeapObjects = 18295\n\nWhen the scavenger runs (in gctrace=1 mode) it similarly reports:\nscvg6: inuse: 17592186043539, idle: 876, sys: 21, released: 10, consumed: 10 (MB)\n\nAt first glance it looks like HeapInuse could be a negative number stored in a uint64,\nsuggesting that HeapIdle might be the only thing that is broken.\u003c/pre\u003e",
	"user": {
		"login": "cookieo9",
		"id": 109270,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2014-12-08T10:46:52Z",
	"created_at": "2014-07-27T14:48:03Z",
	"updated_at": "2016-06-25T01:38:36Z",
	"milestone": {
		"id": 1067218,
		"number": 21,
		"title": "Go1.4"
	}
}
