{
	"id": 154309958,
	"number": 15650,
	"state": "closed",
	"title": "net/http/httptest: possible leaky goroutine",
	"body": "I am still investigating this issue, but I would like to get some help to debug it.\r\n\r\n\u003e What version of Go are you using (`go version`)?\r\n\r\n`go 1.6.1`\r\n\r\n\u003e What operating system and processor architecture are you using (`go env`)?\r\n\r\n`Semaphore CI with Ubuntu 14.04 LTS`\r\n\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/runner/workspace/src/github.com/coreos/etcd/gopath\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/golang/1.6.1/go\"\r\nGOTOOLDIR=\"/usr/local/golang/1.6.1/go/pkg/tool/linux_amd64\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n\u003e What did you do?\r\n\r\nThis was first reported at https://github.com/coreos/etcd/issues/5275. I've been trying to reproduce in my local machine, but haven't been able to for the last two days. It often happens in the slow CI environment with `go test -v -race -cpu 4 -run=ExampleLease_keepAliveOnce` command.\r\n\r\n\u003e What did you expect to see?\r\n\r\nNo race condition.\r\n\r\n\u003e What did you see instead?\r\n\r\n\r\n```\r\nToo many goroutines running after all test(s).\r\n1 instances of:\r\ninternal/race.Enable()\r\n    /usr/local/golang/1.6.1/go/src/internal/race/race.go:32\r\nsync.(*WaitGroup).Add(...)\r\n    /usr/local/golang/1.6.1/go/src/sync/waitgroup.go:92 +0x27d\r\nsync.(*WaitGroup).Done(...)\r\n    /usr/local/golang/1.6.1/go/src/sync/waitgroup.go:96 +0x38\r\nnet/http/httptest.(*Server).forgetConn(...)\r\n    /usr/local/golang/1.6.1/go/src/net/http/httptest/server.go:329 +0xe7\r\nnet/http/httptest.(*Server).wrap.func1(...)\r\n    /usr/local/golang/1.6.1/go/src/net/http/httptest/server.go:283 +0x654\r\nnet/http.(*conn).setState(...)\r\n    /usr/local/golang/1.6.1/go/src/net/http/server.go:1371 +0x7d\r\nnet/http.(*conn).serve.func1(...)\r\n    /usr/local/golang/1.6.1/go/src/net/http/server.go:1394 +0x35a\r\nnet/http.(*conn).serve(...)\r\n    /usr/local/golang/1.6.1/go/src/net/http/server.go:1452 +0x11ff\r\ncreated by net/http.(*Server).Serve\r\n    /usr/local/golang/1.6.1/go/src/net/http/server.go:2137 +0x4d2\r\n1 instances of:\r\nnet.runtime_pollWait(...)\r\n    /usr/local/golang/1.6.1/go/src/runtime/netpoll.go:160 +0x63\r\nnet.(*pollDesc).Wait(...)\r\n    /usr/local/golang/1.6.1/go/src/net/fd_poll_runtime.go:73 +0x56\r\nnet.(*pollDesc).WaitRead(...)\r\n    /usr/local/golang/1.6.1/go/src/net/fd_poll_runtime.go:78 +0x44\r\nnet.(*netFD).Read(...)\r\n    /usr/local/golang/1.6.1/go/src/net/fd_unix.go:250 +0x27b\r\nnet.(*conn).Read(...)\r\n    /usr/local/golang/1.6.1/go/src/net/net.go:172 +0x121\r\nnet.(*TCPConn).Read(...)\r\n    \u003cautogenerated\u003e:68 +0x7d\r\ngithub.com/coreos/etcd/pkg/transport.timeoutConn.Read(...)\r\n    /home/runner/workspace/src/github.com/coreos/etcd/gopath/src/github.com/coreos/etcd/pkg/transport/timeout_conn.go:43 +0x1d6\r\ngithub.com/coreos/etcd/pkg/transport.(*timeoutConn).Read(...)\r\n    \u003cautogenerated\u003e:42 +0xf0\r\nnet/http.noteEOFReader.Read(...)\r\n    /usr/local/golang/1.6.1/go/src/net/http/transport.go:1683 +0x75\r\nnet/http.(*noteEOFReader).Read(...)\r\n    \u003cautogenerated\u003e:284 +0xf8\r\nbufio.(*Reader).fill(...)\r\n    /usr/local/golang/1.6.1/go/src/bufio/bufio.go:97 +0x365\r\nbufio.(*Reader).Peek(...)\r\n    /usr/local/golang/1.6.1/go/src/bufio/bufio.go:132 +0x187\r\nnet/http.(*persistConn).readLoop(...)\r\n    /usr/local/golang/1.6.1/go/src/net/http/transport.go:1069 +0x223\r\ncreated by net/http.(*Transport).dialConn\r\n    /usr/local/golang/1.6.1/go/src/net/http/transport.go:853 +0x16f0\r\n1 instances of:\r\nnet/http.(*persistConn).writeLoop(...)\r\n    /usr/local/golang/1.6.1/go/src/net/http/transport.go:1273 +0x563\r\ncreated by net/http.(*Transport).dialConn\r\n    /usr/local/golang/1.6.1/go/src/net/http/transport.go:854 +0x1715\r\n```\r\n\r\nIt seems like the race condition is detected between `net/http/httptest.(*Server).wrap` and `net/http/httptest.(*Server).forgetConn`. I would very much appreciate it if somebody can point me to the Go code that I should investigate further.\r\n\r\nThanks in advance.\r\n",
	"user": {
		"login": "gyuho",
		"id": 6799218,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2016-05-20T22:57:02Z",
	"created_at": "2016-05-11T18:24:53Z",
	"updated_at": "2016-05-20T23:12:28Z",
	"milestone": {
		"id": 1714149,
		"number": 40,
		"title": "Go1.7Maybe"
	}
}
