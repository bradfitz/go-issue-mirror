{
	"id": 51285102,
	"number": 6384,
	"state": "closed",
	"title": "encoding/json: encode precise floating point integers using %.0f, not %g",
	"body": "\u003cpre\u003eGo 1.1.2 on OS X 10.8.4, and on play.golang.org.\n\nIf you unmarshal a JSON numeric value into interface{}, it is encoded as a float64.  If\nit is sufficiently large (\u0026gt;= 1e6, I believe) when you marshal it, it is encoded as a\nstring using exponent notation.  If the original value was an integer and you later try\nto decode into an int64 value, an error is returned.\n\nExample code is available here: \u003ca href=\"http://play.golang.org/p/fYuB4tT7Ul\"\u003ehttp://play.golang.org/p/fYuB4tT7Ul\u003c/a\u003e\n\nUsing 'f' for the fmt byte to AppendFloat() instead of 'g' in\n\u003ca href=\"http://golang.org/src/pkg/encoding/json/encode.go#L334\"\u003ehttp://golang.org/src/pkg/encoding/json/encode.go#L334\u003c/a\u003e would solve this problem, as\nvalues which can be represented as integers will be encoded in a way that can be read\nback in as integers.\n\n(There are other issues as you get to very large values, since float64 can't encode a\nwhole int64... not sure what or if anything can be done about that.)\u003c/pre\u003e",
	"user": {
		"login": "joeshaw",
		"id": 39916,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Thinking"
		}
	],
	"comments": 7,
	"closed_at": "2016-10-05T19:15:25Z",
	"created_at": "2013-09-14T01:13:28Z",
	"updated_at": "2016-10-05T19:15:26Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
