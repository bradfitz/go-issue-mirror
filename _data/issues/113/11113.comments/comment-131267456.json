{
	"id": 131267456,
	"body": "On the recent illumos-joyent the man page for fcntl says:\r\n\r\n```\r\n       Two types of file locks are supported: POSIX-style and OFD-style. OFD-\r\n       style locks are associated with the open file description (not\r\n       descriptor) instead of with a process. Either type is advisory by\r\n       default, but POSIX-style locks can be mandatory if, and only if,\r\n       mandatory locking has been enabled on the file being locked.  Each type\r\n       of lock may be created through two different interfaces. POSIX-style\r\n       locks are created via the F_SETLK, F_SETLK64, F_SETLKW, or F_SETLKW64\r\n       commands to this system call or by use of the lockf(3C) routine. There\r\n       is no difference between locks created via one mechanism or the other.\r\n       Likewise, OFD-style locks are created via the F_OFD_SETLK,\r\n       F_OFD_SETLK64, F_OFD_SETLKW, or F_OFD_SETLKW64 commands to this system\r\n       call or by use of the Linux/BSD-compatible flock(3C) routine. Note that\r\n       this system call supports the creation of range-specified OFD-style\r\n       file locks, while flock(3C) does not. However, the current\r\n       implementation of OFD-style locking is limited to locking the entire\r\n       file. This limitation might be removed in the future.\r\n\r\n\r\n       The essential distinction between POSIX-style locks and OFD-style locks\r\n       lie in how ownership of a lock is scoped. POSIX locks are scoped to a\r\n       process. All POSIX locks associated with a file for a given process are\r\n       removed when any file descriptor for that file is closed by that\r\n       process or the process holding that file descriptor terminates. POSIX-\r\n       style locks are not inherited by a child process created using fork(2).\r\n       An OFD-style lock is scoped to the file description for a file, not the\r\n       process or open file descriptor. Thus all file descriptors referring to\r\n       the same description (i.e. those created via the F_DUPFD, F_DUP2FD,\r\n       F_DUPFD_CLOEXEC, or F_DUP2FD_CLOEXEC commands to the fcntl(2) system\r\n       call, or those created via the dup(2) system call, or those inherited\r\n       by a child process created via fork(2)) reference the same lock, but a\r\n       file descriptor obtained via a separate open(2) call on the same file\r\n       will reference a different lock.  A lock is removed only on the last\r\n       close(2) of the description, or when the lock is explicitly unlocked.\r\n\r\n\r\n       Locks of both styles are compatible. A file that has been locked with\r\n       one style of lock will be regarded as locked when creation of a lock of\r\n       either style is attempted, and information about the lock will be\r\n       provided via any of the F_GETLK, F_GETLK64, F_OFD_GETLK, or\r\n       F_OFD_GETLK64 commands to this system call if that lock would conflict\r\n       with an attempt to create the specified lock regardless of whether the\r\n       specified lock is of the same style as the conflicting extant lock.\r\n       Because ownership of OFD-style locks is scoped to the open description\r\n       rather than the calling process, the l_pid field of a lock descriptor\r\n       for any such lock will always be set to -1.\r\n\r\n\r\n       When a shared lock is set on a segment of a file, other callers\r\n       (regardless of whether in the same or different process and of whether\r\n       referenced via the same open file) will be able to set shared locks on\r\n       that segment or a portion of it. A POSIX-style shared lock prevents any\r\n       other process from setting an exclusive lock on any portion of the\r\n       protected area. A OFD-style shared lock prevents any caller (even\r\n       callers in the same process) from setting an exclusive lock on any\r\n       portion of the protected area, unless the caller makes the request\r\n       against a file descriptor referencing the same open file against which\r\n       the shared lock was created, in which case the lock will be downgraded\r\n       to a shared lock with respect to the specified region. A request for a\r\n       shared lock of either style will fail if the file descriptor was not\r\n       opened with read access.\r\n```\r\n\r\nBut this isn't part of Solaris or other illumos distributions.",
	"user": {
		"login": "akolb1",
		"id": 4513662,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-14T23:35:23Z",
	"updated_at": "2015-08-14T23:35:37Z"
}
