{
	"id": 66076725,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9:\n\n\u003cpre\u003eI looked at the document so I could send you a page number but I am having trouble\nfinding the very information I intended for the reader.  Sorry about that.\n\nThe traditional ARM prologue uses a store-multiple instruction to save the LR and all of\nthe callee save registers.  A matching load-multiple will assign the saved LR to the PC,\nthereby returning to the caller.  You can see an example by looking at GCC generated\ncode or here, at the ARM documentation site\n\n\u003ca href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0473i/BABBJEBD.html\"\u003ehttp://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0473i/BABBJEBD.html\u003c/a\u003e\n\nThis idiom is supported by the control flow prediction\n\n\u003ca href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0438h/BABGEAEF.html\"\u003ehttp://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0438h/BABGEAEF.html\u003c/a\u003e\n\nBecause the LR is a high numbered register the store-multiple always leaves the return\naddress in the bottom most (highest address) slot in the frame, just like on the x86.\u003c/pre\u003e",
	"user": {
		"login": "lexprfuncall",
		"id": 5360361,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-07-16T21:58:23Z",
	"updated_at": "2014-12-08T10:27:20Z"
}
