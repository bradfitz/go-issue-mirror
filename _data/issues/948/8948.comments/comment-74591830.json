{
	"id": 74591830,
	"body": "@dvyukov,\r\n\r\nI agree with you. This looks like effect of using 2 different packages (each must use cgo) in one program. When Go linker produces final executable, it might use different relocation strategies for external Windows API functions (like for example GetLastError). If single executable contains 2 function references that require different strategies, the linker just pick one at random. The relocations would be wrong for some function references, and, when the function is called, it just crashes. Running this test:\r\n\r\n```\r\ndiff --git a/src/runtime/crash_cgo_test.go b/src/runtime/crash_cgo_test.go\r\nindex 7152b93..b5ff65e 100644\r\n--- a/src/runtime/crash_cgo_test.go\r\n+++ b/src/runtime/crash_cgo_test.go\r\n@@ -80,6 +80,17 @@ func TestCgoExternalThreadSIGPROF(t *testing.T) {\r\n \t}\r\n }\r\n \r\n+func TestCgoDLLImports(t *testing.T) {\r\n+\tif runtime.GOOS != \"windows\" {\r\n+\t\tt.Skip(\"skipping windows specific test\")\r\n+\t}\r\n+\tgot := executeTest(t, cgoDLLImportsMainSource, nil, \"a/a.go\", cgoDLLImportsPkgSource)\r\n+\twant := \"OK\\n\"\r\n+\tif got != want {\r\n+\t\tt.Fatalf(\"expected %q, but got %v\", want, got)\r\n+\t}\r\n+}\r\n+\r\n const cgoSignalDeadlockSource = `\r\n package main\r\n \r\n@@ -267,3 +278,43 @@ func main() {\r\n \tprintln(\"OK\")\r\n }\r\n `\r\n+\r\n+const cgoDLLImportsMainSource = `\r\n+package main\r\n+\r\n+/*\r\n+#include \u003cwindows.h\u003e\r\n+\r\n+DWORD getthread() {\r\n+\treturn GetCurrentThreadId();\r\n+}\r\n+*/\r\n+import \"C\"\r\n+\r\n+import \"./a\"\r\n+\r\n+func main() {\r\n+\tC.getthread()\r\n+\ta.GetThread()\r\n+\tprintln(\"OK\")\r\n+}\r\n+`\r\n+\r\n+const cgoDLLImportsPkgSource = `\r\n+package a\r\n+\r\n+/*\r\n+#cgo CFLAGS: -mnop-fun-dllimport\r\n+\r\n+#include \u003cwindows.h\u003e\r\n+\r\n+DWORD agetthread() {\r\n+\treturn GetCurrentThreadId();\r\n+}\r\n+*/\r\n+import \"C\"\r\n+\r\n+func GetThread() uint32 {\r\n+\treturn uint32(C.agetthread())\r\n+}\r\n+`\r\ndiff --git a/src/runtime/crash_test.go b/src/runtime/crash_test.go\r\nindex 43cea90..dceb7a6 100644\r\n--- a/src/runtime/crash_test.go\r\n+++ b/src/runtime/crash_test.go\r\n@@ -64,7 +64,14 @@ func executeTest(t *testing.T, templ string, data interface{}, extra ...string)\r\n \t}\r\n \r\n \tfor i := 0; i \u003c len(extra); i += 2 {\r\n-\t\tif err := ioutil.WriteFile(filepath.Join(dir, extra[i]), []byte(extra[i+1]), 0666); err != nil {\r\n+\t\tfname := extra[i]\r\n+\t\tcontents := extra[i+1]\r\n+\t\tif d, _ := filepath.Split(fname); d != \"\" {\r\n+\t\t\tif err := os.Mkdir(filepath.Join(dir, d), 0755); err != nil {\r\n+\t\t\t\tt.Fatal(err)\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tif err := ioutil.WriteFile(filepath.Join(dir, fname), []byte(contents), 0666); err != nil {\r\n \t\t\tt.Fatal(err)\r\n \t\t}\r\n \t}\r\n```\r\n\r\nproduces this output\r\n\r\n```\r\nc:\\go\\root\\src\u003ego test -run=TestCgoDLLImports runtime\r\n--- FAIL: TestCgoDLLImports (12.84s)\r\n        crash_cgo_test.go:90: expected \"OK\\n\", but got Exception 0xc0000005 0x8 0x4b9040 0x4b9040\r\n                PC=0x4b9040\r\n                signal arrived during cgo execution\r\n\r\n                _/C_/Users/brainman/AppData/Local/Temp/go-build072577395/a._Cfunc_agetthread(0xc000000000)\r\n                        _/C_/Users/brainman/AppData/Local/Temp/go-build072577395/a/_obj/_cgo_gotypes.go:37 +0x4b\r\n                _/C_/Users/brainman/AppData/Local/Temp/go-build072577395/a.GetThread(0xc0000015cc)\r\n                        C:/Users/brainman/AppData/Local/Temp/go-build072577395/a/a.go:16 +0x26\r\n                main.main()\r\n                        C:/Users/brainman/AppData/Local/Temp/go-build072577395/main.go:17 +0x2b\r\n\r\n                goroutine 17 [syscall, locked to thread]:\r\n                runtime.goexit()\r\n                        c:/go/root/src/runtime/asm_amd64.s:2446 +0x1\r\n                rax     0xc08202c000\r\n                rbx     0xc08202bf78\r\n                rcx     0x4dcfa0\r\n                rdi     0xc08202c000\r\n                rsi     0x4ba700\r\n                rbp     0x0\r\n                rsp     0x22fe68\r\n                r8      0xc082016000\r\n                r9      0xc08202bf20\r\n                r10     0x0\r\n                r11     0x246\r\n                r12     0x33\r\n                r13     0x1\r\n                r14     0x0\r\n                r15     0x0\r\n                rip     0x4b9040\r\n                rflags  0x10202\r\n                cs      0x33\r\n                fs      0x53\r\n                gs      0x2b\r\nFAIL\r\nFAIL    runtime 13.349s\r\n\r\nc:\\go\\root\\src\u003egcc --version\r\ngcc (GCC) 4.9.1\r\nCopyright (C) 2014 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```\r\n\r\nI had to use \"#cgo CFLAGS: -mnop-fun-dllimport\" to force the crash with my gcc. But I suspect there are different ways to do it. github.com/mattn/go-sqlite3 does it too.\r\n\r\nThe code that does relocations is in cmd/ld/data.c:^dynrelocsym. The logic that decides what to do is in cmd/ld/ldpe.c. I discovered all this while investigating issue #9356. I suspect it is a dup.\r\n\r\nI don't have fix for this. I tried some ideas but none of them work - I don't know this area enough. Perhaps if someone suggest something, I will try it.\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-16T23:42:54Z",
	"updated_at": "2015-02-16T23:42:54Z"
}
