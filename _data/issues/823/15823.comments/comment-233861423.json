{
	"id": 233861423,
	"body": "I have a another proposal for Go 1.8 and beyond, and\nit's not limited to ppc64 port. It should help with all the\nRISC ports where jump/call instructions can't cover\nthe entire 2GB/4GB space.\n\nIn compiler, we don't assemble the entire function into\na single blob of instructions, and instead, we assemble\neach basic block separately, and we let the linker\nassemble the exit instruction of each basic block based\non the actual distance.\n\nThe other benefit of this is that, we can make the linker\nreorder the basic blocks and possibly do basic block\ncache alignment.\n\nIn the new SSA backend, this is probably fairly easy\nto do. If not, I think we can make cmd/internal/obj do\nthis by tracing the instructions. I think we already have\nthe code for some RISC architectures (but the code\nis probably disabled and lost during the c2go translation?)\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-20T07:10:04Z",
	"updated_at": "2016-07-20T07:10:04Z"
}
