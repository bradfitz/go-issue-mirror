{
	"id": 66066345,
	"body": "\u003ca id=\"c15\"\u003e\u003c/a\u003eComment 15:\n\n\u003cpre\u003eI'm running into a problem that sounds very similar, and wanted to add a few\nobservations. My test program is pasted at the bottom.\n\n-This problem gets worse with concurrency. Running 1000 concurrent GET requests to\n\u003ca href=\"https://www.google.com\"\u003ehttps://www.google.com\u003c/a\u003e consistently fails 0.1-1% of the time:\n $ go run test_get.go -c -s -n 1000 -u www.google.com | grep failed\n2/1000 failed\n\nUp that to 10000 concurrent requests and the rate skyrockets to \u0026gt;80%(!):\n$ go run test_get.go -c -s -n 10000 -u www.google.com | grep failed\n8441/10000 failed\n\n-This problem also gets worse when redirects are involved, even without concurrency.\n(For these I used google.com, which 301s to www.google.com.)\n$ go run test_get.go -c -s -n 1000 -u google.com | grep failed\n311/1000 failed\n$ go run test_get.go -s -n 1000 -u google.com | grep failed\n7/1000 failed\n\n-Just as a control, which is what makes me suspect it's this bug, all of the above\nreport 0 failures without -s.\n\n\n$ cat test_get.go \npackage main\n\nimport (\n        \"flag\"\n        \"fmt\"\n        \"net/http\"\n)\n\nvar (\n        n = flag.Int(\"n\", 100, \"number of GETs to run\")\n        s = flag.Bool(\"s\", false, \"whether to use HTTPS\")\n        c = flag.Bool(\"c\", false, \"whether to run concurrently\")\n        u = flag.String(\"u\", \"google.com\", \"URL to fetch, without scheme\")\n)\n\nfunc main() {\n        flag.Parse()\n        out := make(chan error, *n)\n        var url string\n        if *s {\n                url = fmt.Sprintf(\"https://%v\", *u)\n        } else {\n                url = fmt.Sprintf(\"http://%v\", *u)\n        }\n        for i := 0; i \u0026lt; *n; i++ {\n                f := func() {\n                        res, err := http.Get(url)\n                        if res != nil {\n                                res.Body.Close()\n                        }\n                        if err != nil {\n                                out \u0026lt;- err\n                        } else {\n                                out \u0026lt;- nil\n                        }\n                }\n                if *c {\n                        go f()\n                } else {\n                        f()\n                }\n        }\n        failed := 0\n        for i := 0; i \u0026lt; *n; i++ {\n                err := \u0026lt;-out\n                if err != nil {\n                        fmt.Println(err)\n                        failed++\n                }\n        }\n        fmt.Printf(\"%d/%d failed\\n\", failed, *n)\n}\u003c/pre\u003e",
	"user": {
		"login": "dborowitz",
		"id": 194927,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-06T20:23:28Z",
	"updated_at": "2014-12-22T06:13:36Z"
}
