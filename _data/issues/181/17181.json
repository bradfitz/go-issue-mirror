{
	"id": 178386885,
	"number": 17181,
	"state": "closed",
	"title": "doc: FAQ states copies of an interface results in copies of underlying data.",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n### What version of Go are you using (`go version`)?\r\ngo1.7\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nnacl amd64p32 (go playground https://play.golang.org/p/BRJAYJccog)\r\n\r\n### What did you do?\r\nThe FAQ states that \"Copying an interface value makes a copy of the thing stored in the interface value. If the interface value holds a struct, copying the interface value makes a copy of the struct.\"  After having been told that this was wrong on the #go-nuts irc, I did some testing, and discovered that while a copy is made when the interface value is first \"created\", from then on further copies of the interface value retain the same underlying struct.\r\n\r\nExample playground:\r\nhttps://play.golang.org/p/s0A35084oY\r\n\r\nTo my mind this is an understandable change, as it is pretty much impossible to change the underlying struct without the use of the unsafe package.  The main issue is that this leaves the FAQ at https://golang.org/doc/faq#pass_by_value out of date, so I am requesting that the FAQ be updated.\r\n\r\n### What did you expect to see?\r\nExpected to see the \"copies\" of the interface value to have different \"value\" pointers.\r\n\r\n### What did you see instead?\r\nAll copies of the interface value have the same \"value\" pointer, while obviously being copies due to different addresses.\r\n\r\n",
	"user": {
		"login": "andyleap",
		"id": 1445195,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		},
		{
			"name": "NeedsFix"
		}
	],
	"comments": 9,
	"closed_at": "2016-10-24T16:05:39Z",
	"created_at": "2016-09-21T15:46:55Z",
	"updated_at": "2016-10-24T16:05:39Z",
	"milestone": {
		"id": 1748849,
		"number": 42,
		"title": "Go1.8Maybe"
	}
}
