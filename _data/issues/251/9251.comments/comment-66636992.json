{
	"id": 66636992,
	"body": "Yes, always doubling is more in keeping with the original code.\r\n\r\nThis is a bit off the topic of the issue, but it is interesting to consider what's a good trade-off here, especially since function parameter signatures and parameter sizes may vary across usage of this facility.\r\n\r\nOur app passes JSON data as strings from Java to Go. In the specific case of our Java-\u003eGo function calls, always doubling isn't an optimal strategy since there's only one \"big\" parameter. Allocating ~2x the necessary size might be a concern on a memory constrained Android device (although native code isn't as constrained as the Java VM; and, of course, once the data gets to be a certain size we'd no longer be passing it around as strings).\r\n\r\nFor what it's worth, code such as Java's [ArrayList](http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8-b132/java/util/ArrayList.java/#237) and Android Java's [AbstractStringBuilder](https://android.googlesource.com/platform/libcore/+/master/luni/src/main/java/java/lang/AbstractStringBuilder.java) (see enlargeBuffer) appear to allocate just enough memory when trying to add additional capacity that's not within the next factor size. I think both of these cases use a [1.5x factor](http://stackoverflow.com/questions/1100311/what-is-the-ideal-growth-rate-for-a-dynamically-allocated-array) as well.\r\n",
	"user": {
		"login": "rod-hynes",
		"id": 488643,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-11T15:40:39Z",
	"updated_at": "2014-12-11T15:40:39Z"
}
