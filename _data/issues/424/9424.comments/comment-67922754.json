{
	"id": 67922754,
	"body": "On 23 Dec 2014 15:58, \"Bryan C. Mills\" \u003cnotifications@github.com\u003e wrote:\r\n\u003e\r\n\u003e @davecheney A simple type-assertion doesn't work - while most of the\r\nerrors in the \"net\" package implement a Temporary() method, url.Error - the\r\none returned most of the type by (http.Client).Get - does not. In order to\r\nunpack the errors correctly, you need to know about both url.Error (for its\r\nErr field) and net.Error (for the Temporary method). And neither of those\r\nis prominently mentioned in the net/http docs.\r\n\r\nI believe that returning the *url.Error was fixed in #9405.\r\n\r\n\u003e\r\n\u003e @minux I tend to agree, but getting to that state would require being\r\nmuch more careful about which errors to retry. (For example: the spurious\r\nio.EOF errors would need to be fixed, and some more syscall errors - EPIPE\r\nin particular - would probably need to be marked Temporary.) Documenting\r\nand fixing the errors seems like a prerequisite for retrying them.\r\n\r\nI'm a bit confused where the EPIPE entered the conversation, but IMO that\r\nis not a temporary error.\r\n\r\n\u003e\r\n\u003e @bradfitz Yes, that's basically what I'm doing - but I'm not retrying\r\nmost of the HTTP status codes, because most of them indicate permanent\r\nerrors for typical HTTP usage. And note that there's a bit more subtlety to\r\nit if you want to handle the Retry-After header correctly.\r\n\u003e\r\n\u003e The problem is, there is a class of net errors that are not temporary -\r\nwhy else would there be a Temporary method on net.Error? - and it seems\r\nwrong to retry in those cases. (For example, what if the URL I passed in\r\nwas not even syntactically valid?)\r\n\u003e\r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub.",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-23T05:13:34Z",
	"updated_at": "2014-12-23T05:13:34Z"
}
