{
	"id": 67912544,
	"body": "I believe it is the opposite. The general principal is the error value, if not nil is opaque, the caller is not supposed to assign any meaning to it other than a failure. \r\n\r\nIf, and these are the exceptions, a method identifies that the error value returned conforms to an interface, say providing a Temporary() bool method, then that should be called out and is part of the contract for the method. Again, this is the exception, not the rule. I've only seen that pattern in the net package, and close derivatives of that package.\r\n\r\n\r\n\r\n\u003e On 23 Dec 2014, at 12:05, Bryan C. Mills \u003cnotifications@github.com\u003e wrote:\r\n\u003e \r\n\u003e Do we expect programmers to memorize every error in the standard library, then? Or to read the implementation of every package to figure out whether there are certain errors they should be on the lookout for?\r\n\u003e \r\n\u003e For example: without knowing about url.Error, it's easy for one to see net.Error and try to use that for detecting temporary errors. But that doesn't work because url.Error doesn't implement net.Error.\r\n\u003e \r\n\u003e In order to handle errors - and the existence of net.Error is a witness to the fact that there are useful properties of errors needed to handle them correctly! - the user must know that they exist in the first place.\r\n\u003e \r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub.\r\n\u003e ",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-23T01:27:01Z",
	"updated_at": "2014-12-23T01:27:01Z"
}
