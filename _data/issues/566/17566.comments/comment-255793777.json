{
	"id": 255793777,
	"body": "I'm going to toss in a few more ideas to consider.\r\n\r\nAn unexported function that is only called once is often cheaper to inline.\r\n\r\nFunctions that include tests of parameter values can be cheaper to inline for specific calls that pass constant arguments for those parameters.  That is, the cost of inlining is not solely determined by the function itself, it is also determined by the nature of the call.\r\n\r\nFunctions that only make function calls in error cases, which is fairly common, can be cheaper to handle as a mix of inlining and outlining: you inline the main control flow but leave the error handling in a separate function.  This may be particularly worth considering when inlining across packages, as the export data only needs to include the main control flow.  (Error cases are detectable as the control flow blocks that return a non-nil value for a single result parameter of type `error`.)\r\n\r\nOne of the most important optimizations for large programs is feedback directed optimization aka profiled guided optimization.  One of the most important lessons to learn from feedback/profiling is which functions are worth inlining, both on a per-call basis and on a \"most calls pass X as argument N\" basis.  Therefore, while we have no FDO/PGO framework at present, any work on inlining should consider how to incorporate information gleaned from such a framework when it exists.\r\n\r\nPareto optimal is a nice goal but I suspect it is somewhat unrealistic.  It's almost always possible to find a horrible decision made by any specific algorithm, but the algorithm can still be better on realistic benchmarks.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-24T16:35:52Z",
	"updated_at": "2016-10-24T16:35:52Z"
}
