{
	"id": 66086700,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eI bisected this and it looks to be related to goroutine preemption [1]. Looking at\nsrc/pkg/runtime/mprof.goc [2], it looks like this could happen when a goroutine is\npreempted during runtime·MProf_Malloc (or runtime·MProf_Free) after incrementing\nm-\u0026gt;nomemprof . If another goroutine runs on the same M* in the meantime, it will see\nthat m-\u0026gt;nomemprof is set and not record the malloc/free.\n\nDoes my analysis sound correct?\n\nCan preemption be disabled for specific runtime functions? Or maybe there's a different\nway to avoid the deadlock that m-\u0026gt;nomemprof prevents?\n\n\n[1]\nThe first bad revision is:\nchangeset:   17451:a5b5cbb9bd3d\nuser:        Dmitriy Vyukov \u0026lt;dvyukov@google.com\u0026gt;\ndate:        Tue Jul 30 22:17:38 2013 +0400\nsummary:     runtime: enable goroutine preemption\n\n[2] \u003ca href=\"http://tip.golang.org/src/pkg/runtime/mprof.goc#L248\"\u003ehttp://tip.golang.org/src/pkg/runtime/mprof.goc#L248\u003c/a\u003e\n[3]\n\u003ca href=\"https://code.google.com/p/go/source/diff?spec=svn9e1fd312d1bd4c0d4202fc9795f55a4d867c52c4\u0026old=0cdceeba29f24c7dedb650f67b9d66a6705b52f9\u0026r=9e1fd312d1bd4c0d4202fc9795f55a4d867c52c4\u0026format=unidiff\u0026path=%2Fsrc%2Fpkg%2Fruntime%2Fsymtab.c\"\u003ehttps://code.google.com/p/go/source/diff?spec=svn9e1fd312d1bd4c0d4202fc9795f55a4d867c52c4\u0026old=0cdceeba29f24c7dedb650f67b9d66a6705b52f9\u0026r=9e1fd312d1bd4c0d4202fc9795f55a4d867c52c4\u0026format=unidiff\u0026path=%2Fsrc%2Fpkg%2Fruntime%2Fsymtab.c\u003c/a\u003e\u003c/pre\u003e",
	"user": {
		"login": "rhysh",
		"id": 230685,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-14T19:19:36Z",
	"updated_at": "2014-12-22T06:29:26Z"
}
