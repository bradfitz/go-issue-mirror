{
	"id": 66091464,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eThat's the nature of socket and/or raw IP stuff. net.Dial doesn't specify the near end\nidentifier and such configuration installs a tuple like [protocol: ICMP for IPv4, src:\n\u0026lt;wildcard IP address\u0026gt;, dst: \u0026lt;specified IP address\u0026gt;] into the protocol stack\ninside the kernel. If you want to have a socket that works as not only an endpoint on\ntop of the ICMP for IPv4 but kinda filter, you need to use either net.Dialer or\nnet.DialIP.\n\nFor example, \n\nvar laddr net.Addr\nvar err error\nswitch host {\ncase \"192.168.1.4\":\n        laddr, err = net.ResolveAddr(\"ip4\", \"a specified address #1 on your node under the test to prevent a crosstalk using wildcard\")\ncase \"192.168.1.8\":\n        laddr, err = net.ResolveAddr(\"ip4\", \"a specified address #2 on your node under the test to prevent a crosstalk using wildcard\")\n}\nif err != nil {\n        // error handling\n}\nd := \u0026net.Dialer{LocalAddr: laddr}\nc, err := d.Dial(\"ip4:icmp\", host)\u003c/pre\u003e\n\n\n\n_Status changed to **Retracted**._",
	"user": {
		"login": "mikioh",
		"id": 92117,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-02-17T00:33:45Z",
	"updated_at": "2014-12-22T06:32:47Z"
}
