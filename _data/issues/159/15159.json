{
	"id": 146475436,
	"number": 15159,
	"state": "closed",
	"title": "x/crypto/ssh/agent: `ssh-add -D` results in `unknown opcode 9`",
	"body": "1. What version of Go are you using (`go version`)?\r\n`go version go1.6 darwin/amd64`\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n`darwin` / `amd64`\r\n`windows` / `amd64`\r\n\r\n3. What did you do?\r\n    ```go\r\n\t// agent.go\r\n\tpackage main\r\n\r\n\timport (\r\n\t\t\"io\"\r\n\t\t\"net\"\r\n\r\n\t\t\"golang.org/x/crypto/ssh/agent\"\r\n\t)\r\n\r\n\tfunc main() {\r\n\t\tkeyring := agent.NewKeyring()\r\n\r\n\t\tl, err := net.Listen(\"unix\", \"agent_test.sock\")\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\r\n\t\tfor {\r\n\t\t\tc, err := l.Accept()\r\n\t\t\tif err != nil {\r\n\t\t\t\tpanic(err)\r\n\t\t\t}\r\n\r\n\t\t\terr = agent.ServeAgent(keyring, c)\r\n\t\t\tif err != nil \u0026\u0026 err != io.EOF {\r\n\t\t\t\tpanic(err)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    ```\r\n    1. `go run agent.go \u0026`\r\n    2. `SSH_AUTH_SOCK=agent_test.sock ssh-add -D`\r\n    3. The running agent emits a `unknown opcode 9` log message\r\n\r\n4. What did you expect to see?\r\nAs this is a protocol 2 agent implementation, I expect the server to handle all involved opcodes relating to protocol 2 operation without error.\r\n\r\n5. What did you see instead?\r\nThe server returns a failure when issued an `ssh-add -D` command and logs an `unknown opcode 9` error.\r\n\r\nThis is caused by the client issuing two subsequent operations, a remove all for protocol 1 as well as a remove all for protocol 2. Opcode 9 is the protocol 1 message (`SSH_AGENTC_REMOVE_ALL_RSA_IDENTITIES`) for remove all. Some clients consider the operation a failure and report an error to the user.\r\n\r\nThere is already similar precedent already in the package for supporting opcode 1 (`SSH_AGENTC_REQUEST_RSA_IDENTITIES`) which is also a protocol 1 operation and is issued during `ssh-add -l` operations. Just as `ssh-add -D` issues protocol 1 \u0026 2 messages, `ssh-add -l` also issues protocol 1 \u0026 2.\r\n\r\nFollowing in line with this, I think an null-op version of the protocol 1 remove all message should also be supported.",
	"user": {
		"login": "miquella",
		"id": 2895155,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-04-20T10:42:41Z",
	"created_at": "2016-04-07T00:39:04Z",
	"updated_at": "2016-04-20T10:42:41Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
