{
	"id": 51285301,
	"number": 6513,
	"state": "closed",
	"title": "cmd/gc: inconsistent definition during type import",
	"body": "\u003cpre\u003eThis required three packages:\n  A: defines an exported struct type T with an embedded field of a builtin type (e.g. \u0026quot;int\u0026quot;, \u0026quot;error\u0026quot;)\n  B: imports \u0026quot;A\u0026quot; and embeds A.T in its own exported struct type U\n  C: imports both \u0026quot;A\u0026quot; and \u0026quot;B\u0026quot;\n\nI have created a sample in \u003ca href=\"https://golang.org/cl/14115043\"\u003ehttps://golang.org/cl/14115043\u003c/a\u003e. When you apply it to\na go tree, and run \u0026quot;go install expvar\u0026quot; you will get\n# expvar\nexpvar/expvar.go:30: inconsistent definition for type io.Exported during import\n        struct { int } (in \u0026quot;io\u0026quot;)\n        struct { int } (in \u0026quot;net/http\u0026quot;)\n\nThis does *not* happen with Go 1.1, so is a regression.\u003c/pre\u003e",
	"user": {
		"login": "dsymonds",
		"id": 31506,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 7,
	"closed_at": "2014-12-08T10:36:01Z",
	"created_at": "2013-09-30T05:22:21Z",
	"updated_at": "2016-06-25T01:19:56Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
