{
	"id": 66054552,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eThere are two bugs in the program:\n\n1) The FileSet provided to printer.Fprint must be the same as the one provided the\nparser - it is where the position information for that AST is recorded. By providing a\nnew (empty) FileSet to the printer, all position information collected by the parser is\nlost. The main function should look like this:\n\nfunc main() {\n\tfset := token.NewFileSet()\n\tf, err := parser.ParseFile(fset, \"x.go\", prog,\n\t\tparser.ParseComments)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar config printer.Config\n\tconfig.Fprint(os.Stdout, fset, f)\n}\n\nand it will print the compilable program:\n\n// This is a comment\n//\npackage main\n\nimport \"fmt\"\n\nfunc main() {\nfmt.Printf(\"hello, world\\n\")\n}\n\n2) When using a custom printer.Config, it must be initialized correctly. This one is\ninitialized with a tab-width of 0 and thus there is no indentation. Either initialize it\ncorrectly, or simply use the default. This main function does the right thing:\n\nfunc main() {\n\tfset := token.NewFileSet()\n\tf, err := parser.ParseFile(fset, \"x.go\", prog,\n\t\tparser.ParseComments)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tprinter.Fprint(os.Stdout, fset, f)\n}\n\nThe output is:\n\n// This is a comment\n//\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Printf(\"hello, world\\n\")\n}\n\n(I will look into why the printer can produce incorrect programs when the position\ninformation is broken - that said, the printer is supposed to be used with correct\nposition information and thus this is not a bug in the library but in the use of the\nlibrary.)\u003c/pre\u003e\n\n\n\n_Status changed to **WorkingAsIntended**._",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-02-11T18:50:07Z",
	"updated_at": "2014-12-08T10:08:37Z"
}
