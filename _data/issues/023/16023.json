{
	"id": 159469785,
	"number": 16023,
	"state": "closed",
	"title": "reflect modyfied all strings (I can not modified single instance by reflect)",
	"body": "1. What version of Go are you using (`go version`)?\r\ncurrent play.golang version\r\n \r\n2. What operating system and processor architecture are you using (`go env`)?\r\ncurrent play.golang version\r\n\r\n3. What did you do?\r\nI create script like that https://play.golang.org/p/u_tH8tTgs4\r\npackage main\r\n\r\n```\r\nimport (\r\n\t\"fmt\"\r\n\t\"reflect\"\r\n)\r\n\r\ntype T struct {\r\n\tp interface{}\r\n}\r\n\r\nfunc main() {\r\n\tstr := \"str\"\r\n\ttree := T{\r\n\t\tp: interface{}(\u0026str),\r\n\t}\r\n\tv := reflect.ValueOf(tree.p).Elem()\r\n\tif !v.CanSet() {\r\n\t\tpanic(\"the value can not be set\")\r\n\t}\r\n\tv.SetString(\"new str\")\r\n\r\n\tfmt.Println(\"Hello, \", *(tree.p.(*string)), \" \", str)\r\n}\r\n```\r\n\r\nOutput:\r\n\r\n\u003e Hello,  new str   new str\r\n\r\nIt mean str variable is changed. I am not sure it is correct action.  CanSet return false for *string always. When I use reflect I modified  both value.\r\n\r\n4. What did you expect to see?\r\n\r\n\u003e Hello,  new str  str\r\n\r\n5. What did you see instead?\r\n\r\n\u003e Hello,  new str   new str\r\n\r\n",
	"user": {
		"login": "SebastianPozoga",
		"id": 1093166,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-06-09T18:17:05Z",
	"created_at": "2016-06-09T17:56:30Z",
	"updated_at": "2016-06-09T18:17:05Z"
}
