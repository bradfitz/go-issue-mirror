{
	"id": 79876939,
	"number": 10940,
	"state": "closed",
	"title": "net: 0-byte read from TCP connection always return EOF",
	"body": "My understanding is that the recommended way to test whether a TCP connection has been closed by the remote peer is to do a 0-byte read from the socket, which would return EOF if the remote peer sent a FIN.\r\n\r\nUnfortunately that doesn't work in go as netFD.Read *always* return EOF when 0 bytes are read, regardless of the requested read size.\r\n\r\nIs that on purpose? Is there another way to detect reception of a FIN? This matters to me because I need to stream data to a write-only raw TCP endpoint that I don't control and the first Write on a closed connection often silently fails, potentially resulting in data loss.",
	"user": {
		"login": "huguesb",
		"id": 7319881,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 13,
	"closed_at": "2015-05-24T00:40:49Z",
	"created_at": "2015-05-23T15:34:38Z",
	"updated_at": "2016-09-08T23:29:00Z"
}
