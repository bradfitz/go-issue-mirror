{
	"id": 105046041,
	"body": "I don't see what Go can do here.  Try using \"go test -c\" to build your test into an executable and then run \"strace -f EXECUTABLE\".  You will see that the final write system call succeeds and the kernel reports it as succeeding.  Go is just returning that success to the caller.  The same thing would happen for a C program.\r\n\r\nAt the TCP level, you have closed one side of the TCP connection but not the other.  The kernel will accept writes until both sides are closed.  This is not as simple a matter as you seem to be expecting.  I found a decent description of the issue at http://stackoverflow.com/questions/11436013/writing-to-a-closed-local-tcp-socket-not-failing .\r\n\r\nYou can get the result you want in your test program by adding this line just after the successful call to l.Accept:\r\n\t\t\tc.(*net.TCPConn).SetLinger(0)",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-05-24T18:25:05Z",
	"updated_at": "2015-05-24T18:25:05Z"
}
