{
	"id": 104961146,
	"body": "I don't think the Read with zero length buffer is a valid to determine\r\nif you can write to a TCP connection (not just in Go). [Even though\r\nit doesn't work in Go for another reason explained below.]\r\n\r\nTCP connections are fully duplex, and the read and write stream\r\ncan be shutdown separately.\r\n\r\nWhat if the remote end has shutdown the write end, so you will\r\nget a EOF when read, but the connection is still valid and you\r\ncan still write to it?\r\n\r\nFor example,\r\nhttp://play.golang.org/p/MJ62fKYSAD\r\nEven though the client has got an EOF, the connection is still\r\ngood for write.\r\n\r\nThe only way to determine whether you can write to a TCP\r\nconnection is to actually write data to it. Data loss should be\r\nhandled by higher level protocols.\r\n\r\n\r\nBTW, according to Go's io.Reader definition, http://golang.org/pkg/io/#Reader\r\nasking a reader with a zero-length buffer doesn't have well defined\r\nthe behavior, it could return 0, nil, or 0, EOF, or 0, some other error.\r\n\r\nThis is working as intended.\r\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-05-24T00:40:28Z",
	"updated_at": "2015-05-24T00:40:46Z"
}
