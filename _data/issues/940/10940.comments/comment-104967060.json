{
	"id": 104967060,
	"body": "Let me backtrack and give a little bit of background:\r\n\r\nI have a service with an HTTP endpoint accepting JSON documents describing audit events to be fed to Splunk. Which means I am stuck with TCP or TCP+SSL and do not have the option to punt detection of packet loss or broken connection to a higher level application protocol.\r\n\r\nThis service is currently written in Java, using Netty and I was hoping I could rewrite it in go to reduce RAM and disk footprint.\r\n\r\nMy problem arise from the fact that Go does not offer any way for me to check the liveness of a TCP connection and will happily keep writing data into a closed socket.\r\n\r\nYou are asserting that such a behavior is normal because of shortcomings of TCP, yet Netty has no apparent trouble detecting dropped connections and failed writes, which makes your claim hard to believe. I understand that whatever Netty is doing is not 100% accurate but quite frankly, I'll take 90% any day.\r\n\r\nIs low-level networking simply not a thing that go caters to?",
	"user": {
		"login": "huguesb",
		"id": 7319881,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-05-24T01:58:19Z",
	"updated_at": "2015-05-24T01:58:19Z"
}
