{
	"id": 51280601,
	"number": 3435,
	"state": "closed",
	"title": "runtime: scavenge deadlock with locked memory pages",
	"body": "\u003cpre\u003eI am seeing a pretty frequent deadlock (server wedges) in an\nexternal web server using the Go 1 binary distribution for Linux/amd64.\nIf I kill -ABRT the server, the scavenger goroutine is always the \nrunning goroutine (I have GOMAXPROCS unset, so 1).\n\nThe locking of runtime.MHeap looks like the only potential for\ndeadlock while in a running state.  I note that the scavenger does not\nset m-\u0026gt;mallocing = 1, making it different from any of the other code\nthat locks the heap.  If the scavenger were tricked into allocating, perhaps\nin a stack split or during the handling of a signal, that would cause a\ndeadlock.  However, what the scavenger does is simple enough (and\nruns in a fresh goroutine) that I can't see the stack split as a likely\npossibility.  Also, I can't think of any allocations done by our signal\nhandlers.  That would be a problem for any thread holding the malloc\nheap lock, not just the scavenger.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Suggested"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 10,
	"closed_at": "2014-12-08T10:17:56Z",
	"created_at": "2012-03-30T02:31:57Z",
	"updated_at": "2016-06-24T22:16:49Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
