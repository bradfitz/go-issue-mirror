{
	"id": 169270747,
	"body": "I would like to add that the suggested workaround of using capabilities does not work. In order to be useful for security, capabilities need to be dropped by the process after performing the privileged function. However just as you cannot setuid() other threads than your own, you cannot drop capabilities of other threads than your own. So the other threads created by the Go runtime keep the elevated privileges granted by the capabilities.\r\n\r\nThis is a big problem. E.g. the capability CAP_SYS_CHROOT is worthless if you cannot drop it, since that capability can be used to break out of chroots.\r\n\r\nSo even with the best effort using SystemD and file capabilities it is currently not possible to create a Go program that performs some privileged task and then drops ALL of its privileges. This is embarassing.",
	"user": {
		"login": "mbenkmann",
		"id": 6864958,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-06T09:00:29Z",
	"updated_at": "2016-01-06T09:12:34Z"
}
