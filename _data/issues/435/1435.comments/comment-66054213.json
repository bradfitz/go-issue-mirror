{
	"id": 66054213,
	"body": "\u003ca id=\"c51\"\u003e\u003c/a\u003eComment 51:\n\n\u003cpre\u003eSince Setuid is used for security, and is often used to drop privileges, it's fairly\nimportant to get it right.\n\nIn a pure Go program with no cgo, I believe we can freeze the world and force each\nthread to use the system call.  I don't think we need any signals in that case.\n\nThe problem is a Go program that uses cgo.  We have to assume that cgo code has created\nthreads that we don't know about.  We also have to assume that cgo code can call setuid.\n Because of that possibility, I don't think we can provide a SIGSETXID signal handler\nourselves for a cgo program; see \u003ca href=\"https://golang.org/issue/3871\"\u003eissue #3871\u003c/a\u003e.\n\nAdding this all together, it now occurs to me that it may work to make syscall.Setuid a\nfunction that uses cgo to call the C setuid function.  That will force the use of cgo\nfor any program that uses syscall.Setuid, meaning that every thread will be created\nusing pthread_create and that we should get the C library signal handler for SIGSETXID.\n\nWant to see if that will work?\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-06-24T13:49:04Z",
	"updated_at": "2014-12-08T10:08:20Z"
}
