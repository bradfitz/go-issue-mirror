{
	"id": 51279914,
	"number": 2944,
	"state": "closed",
	"title": "net/rpc: API",
	"body": "\u003cpre\u003eIn the overview, I am not sure what \u0026quot;exported or local\u0026quot; means, nor how the RPC\npackage can distinguish local from unexported-but-not-local.\n\nI am not sure if the arg types need to be exported for reflect.  If you have a type t\n(unexported), I don't know if reflect lets you reflect.New it.\n\nThere is no mention that struct fields need to be exported to be sent, at least in the\npackage doc.  In fact that's probably not a true restriction now that we have codecs.  A\ncustom codec could marshal and unmarshal types in its own package directly, without\nusing reflect, and thus access unexported fields.  Maybe reword a bit to make it clear\nwhich restrictions are imposed by package rpc and which by the choice of codec.\n\nThere is at least one \u0026quot;gob\u0026quot; (in quotes) that should probably be gob; others\ndon't use quotes.\n\nThe package doc says Go returns a channel, but it returns a *Call.\n\nThe package doc talks about a restriction based on object type, but the restriction is\nactually based on name (now that we have RegisterName, there's a difference).  Should\nreword.\n\nNot sure InvalidResult needs to be exported.  I can't see how a client or server would\never see one.\nAlso, does the use of InvalidResult mean that if you try to call a function expecting,\nsay, *int as the\nresult, but you get an InvalidResult (a struct, not an int) back, gob will produce a\ndecode error?\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2014-12-08T10:15:25Z",
	"created_at": "2012-02-09T19:45:15Z",
	"updated_at": "2016-06-24T21:26:28Z",
	"milestone": {
		"id": 1061233,
		"number": 7,
		"title": "Go1"
	}
}
