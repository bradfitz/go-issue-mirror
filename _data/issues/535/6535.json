{
	"id": 51285330,
	"number": 6535,
	"state": "open",
	"title": "reflect: Is reflect.Type guaranteed to be hashable?",
	"body": "\u003cpre\u003eI want to construct a cache of properties computed from a reflect.Type.\n(For an example application, see \u003ca href=\"http://play.golang.org/p/csLP1bBXJV)\"\u003ehttp://play.golang.org/p/csLP1bBXJV)\u003c/a\u003e\n\nThe natural representation for that is map[reflect.Type]properties, but the correctness\nof that approach depends on the implementation details of reflect.Type.\n\nThe documentation for (reflect.Type).String() says, \u0026quot;To test for equality, compare\nthe Types directly.\u0026quot;  So that gives me some indication that what I'm trying to do\nis reasonable.  However, nothing in the package tells me whether I can rely on the fact\nthat a reflect.Type is hashable.  (In practice, it currently is.)\n\n\nThe other alternatives I've considered are:\n\n    map[struct{ pkgPath, name string }]properties - fails for unnamed types.\n\n    map[uintptr]properties using reflect.Value.UnsafeAddr(t) - seems much worse than relying on hashability.\n\n    map[uintptr]struct{reflect.Type, properties} using a hand-rolled hash function - very, very messy.\n\n\nSince reflect.Type is hashable in practice anyway, the simplest solution would be to\ndocument that that must be the case.\n\nObviously that has some drawbacks - it prevents reflect.Type from ever acquiring a\nnon-hashable field - but that still seems preferable to adding some kind of user-side\nhashing or a new method for retrieving a unique ID.\n\nOn the other hand, if reflect.Type is not hashable, it would be good to document the\npreferred workaround for constructing maps with Types as keys.\u003c/pre\u003e",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		}
	],
	"comments": 5,
	"created_at": "2013-10-04T22:24:12Z",
	"updated_at": "2015-04-14T19:45:20Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
