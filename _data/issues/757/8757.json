{
	"id": 51288651,
	"number": 8757,
	"state": "open",
	"title": "x/sys/unix: Sysctl doesn't supporting writing values",
	"body": "\u003cpre\u003eHello,\n\nThis is not really reporting defects but more like a feature request.\n\nIn syscall package, or go.sys package, Sysctl is defined as: \n\nfunc Sysctl(name string) (value string, err error)\n\nIt provides a way to read values through sysctl, but makes it impossible to write/update\nvalues. Internally, it uses \u0026quot;sysctl\u0026quot; defined in each particular OS / ARCH. For\nexample, (from zsyscall_freebsd_amd64.go):\n\nfunc sysctl(mib []_C_int, old *byte, oldlen *uintptr, new *byte, newlen uintptr) (err\nerror)\n\nIt would be nice if it can be exported in some way because this is essentially the same\ninterface as defined in BSD systems. e.g. \u003ca href=\"https://www.freebsd.org/cgi/man.cgi?sysctl(3)\"\u003ehttps://www.freebsd.org/cgi/man.cgi?sysctl(3)\u003c/a\u003e\n\nint sysctl(const int *name, u_int namelen, void *oldp, size_t *oldlenp, const void\n*newp, size_t newlen);\nint sysctlbyname(const char *name, void *oldp, size_t *oldlenp, const void *newp, size_t\nnewlen);\n\nCan we provide a similar set of functions in go.sys that provides full sysctl support\n(both read / write)? If go.sys is not frozen yet, maybe it's a good idea to use the\nfunction names used in most BSD systems, in which case current Sysctl will need to be\nrenamed to, e.g., SysctlRead.\u003c/pre\u003e",
	"user": {
		"login": "songgao",
		"id": 255797,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"created_at": "2014-09-17T00:17:24Z",
	"updated_at": "2015-04-14T19:25:54Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
