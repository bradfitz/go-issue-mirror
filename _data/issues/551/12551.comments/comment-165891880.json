{
	"id": 165891880,
	"body": "This is still not fixed in 1.5.2\r\n```\r\npackage main\r\n\r\nimport(\r\n\t\"fmt\"\r\n\t\"net\"\r\n\t\"os\"\r\n\t\"strings\"\r\n\t\"syscall\"\r\n\t\"unsafe\"\r\n\t\"runtime\"\r\n)\r\n\r\nfunc main(){\r\n\tfmt.Println(runtime.Version())\r\n\tfmt.Println(GetV4LansGolang())\r\n\tfmt.Println(GetV4LansWinAPI())\r\n}\r\n\r\nfunc GetV4LansGolang() ([]*net.IPNet, error) {\r\n\taddrs, err := net.InterfaceAddrs()\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\tnets := make([]*net.IPNet, 0, len(addrs))\r\n\r\n\tfor _, addr := range addrs {\r\n\t\tnetw, ok := addr.(*net.IPNet)\r\n\t\tif ok {\r\n\t\t\t\r\n\t\t\tif netw.IP.To4() != nil {\r\n\t\t\t\tnets = append(nets, netw)\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\treturn nets, nil\r\n}\r\n\r\nfunc getAdapterList() (*syscall.IpAdapterInfo, error) {\r\n\tb := make([]byte, 10240)\r\n\tl := uint32(len(b))\r\n\ta := (*syscall.IpAdapterInfo)(unsafe.Pointer(\u0026b[0]))\r\n\t// TODO(mikio): GetAdaptersInfo returns IP_ADAPTER_INFO that\r\n\t// contains IPv4 address list only. We should use another API\r\n\t// for fetching IPv6 stuff from the kernel.\r\n\terr := syscall.GetAdaptersInfo(a, \u0026l)\r\n\tif err == syscall.ERROR_BUFFER_OVERFLOW {\r\n\t\tb = make([]byte, l)\r\n\t\ta = (*syscall.IpAdapterInfo)(unsafe.Pointer(\u0026b[0]))\r\n\t\terr = syscall.GetAdaptersInfo(a, \u0026l)\r\n\t}\r\n\tif err != nil {\r\n\t\treturn nil, os.NewSyscallError(\"GetAdaptersInfo\", err)\r\n\t}\r\n\treturn a, nil\r\n}\r\n\r\nfunc GetV4LansWinAPI() ([]*net.IPNet, error) {\r\n\tifaces, err := net.Interfaces()\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\tnets := make([]*net.IPNet, 0, len(ifaces))\r\n\r\n\taList, err := getAdapterList()\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\tfor _, ifi := range ifaces {\r\n\t\tfor ai := aList; ai != nil; ai = ai.Next {\r\n\t\t\tindex := ai.Index\r\n\r\n\t\t\tif ifi.Index == int(index) {\r\n\t\t\t\tipl := \u0026ai.IpAddressList\r\n\t\t\t\tfor ; ipl != nil; ipl = ipl.Next {\r\n\t\t\t\t\tipStr := strings.Trim(string(ipl.IpAddress.String[:]), \"\\x00\")\r\n\t\t\t\t\tmaskStr := strings.Trim(string(ipl.IpMask.String[:]), \"\\x00\")\r\n\t\t\t\t\tip := net.ParseIP(ipStr)\r\n\t\t\t\t\tmaskip := net.ParseIP(maskStr)\r\n\t\t\t\t\tif ip.IsUnspecified() || maskip.IsUnspecified() {\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnets = append(nets, \u0026net.IPNet{\r\n\t\t\t\t\t\tIP: ip,\r\n\t\t\t\t\t\tMask: net.IPv4Mask(\r\n\t\t\t\t\t\t\tmaskip[net.IPv6len-net.IPv4len],\r\n\t\t\t\t\t\t\tmaskip[net.IPv6len-net.IPv4len+1],\r\n\t\t\t\t\t\t\tmaskip[net.IPv6len-net.IPv4len+2],\r\n\t\t\t\t\t\t\tmaskip[net.IPv6len-net.IPv4len+3],\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn nets, err\r\n}\r\n```\r\n\r\nOutput:\r\n```\r\ngo1.5.2\r\n[169.254.131.41/16 192.168.1.66/16 127.0.0.1/16] \u003cnil\u003e\r\n[192.168.1.66/24] \u003cnil\u003e\r\n```\r\n\r\nipconfig output:\r\n\r\n```\r\nC:\\Users\\Audrius\u003eipconfig\r\n\r\nWindows IP Configuration\r\n\r\n\r\nWireless LAN adapter Local Area Connection* 2:\r\n\r\n   Media State . . . . . . . . . . . : Media disconnected\r\n   Connection-specific DNS Suffix  . :\r\n\r\nWireless LAN adapter Wi-Fi:\r\n\r\n   Connection-specific DNS Suffix  . :\r\n   Link-local IPv6 Address . . . . . : fe80::f9a2:1fe9:751f:bc7b%3\r\n   IPv4 Address. . . . . . . . . . . : 192.168.1.66\r\n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\r\n   Default Gateway . . . . . . . . . : 192.168.1.254\r\n\r\nTunnel adapter Teredo Tunneling Pseudo-Interface:\r\n\r\n   Connection-specific DNS Suffix  . :\r\n   IPv6 Address. . . . . . . . . . . : 2001:0:9d38:90d7:1c37:3e14:a88d:67e0\r\n   Link-local IPv6 Address . . . . . : fe80::1c37:3e14:a88d:67e0%8\r\n   Default Gateway . . . . . . . . . : ::\r\n\r\nTunnel adapter isatap.{1F734CEB-3098-4579-8169-BA5D2AF5EEDE}:\r\n\r\n   Media State . . . . . . . . . . . : Media disconnected\r\n   Connection-specific DNS Suffix  . :\r\n```\r\n",
	"user": {
		"login": "AudriusButkevicius",
		"id": 1144861,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-18T20:31:38Z",
	"updated_at": "2015-12-18T20:31:38Z"
}
