{
	"id": 158742398,
	"number": 15974,
	"state": "closed",
	"title": "text/template: index is too restrictive in its type validation",
	"body": "Given:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"html/template\"\r\n\t\"os\"\r\n)\r\n\r\nfunc main() {\r\n\tm := make(map[template.HTML]string)\r\n\tm[\"Key\"] = \"Val\"\r\n\r\n\t// OK!\r\n\tif _, ok := m[\"Key\"]; !ok {\r\n\t\tpanic(\"Map lookup failed\")\r\n\t}\r\n\r\n\tt, err := template.New(\"foo\").Parse(data)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\t// This fails\r\n\terr = t.Execute(os.Stdout, m)\r\n\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nvar data = `{{ index . \"Key\" }}`\r\n```\r\n\r\nThis panics:\r\n\r\n```\r\npanic: template: foo:1:3: executing \"foo\" at \u003cindex . \"Key\"\u003e: error calling index: value has type string; should be template.HTML\r\n```\r\nJuggling around with `template.HTML` and `string` types seems like a common thing in Go templates, and I would expect the `index` func to work the same way as a straight `map` lookup in this case.",
	"user": {
		"login": "bep",
		"id": 394382,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		}
	],
	"comments": 4,
	"closed_at": "2016-10-18T03:34:26Z",
	"created_at": "2016-06-06T18:25:17Z",
	"updated_at": "2016-10-18T14:54:08Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	}
}
