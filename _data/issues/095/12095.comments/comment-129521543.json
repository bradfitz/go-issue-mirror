{
	"id": 129521543,
	"body": "Ian wrote on gofrontend-dev:\n\n\tIn your past messages about this, I have not been able to understand \n\twhat you are proposing.  I still don't understand.  You are presenting \n\tpatches when you need to present documentation. \n\nI agree. Starting with implementation is usually not a great idea for something as subtle as this. Especially if you want others to understand what you are doing, you need to write documentation. And explaining things while writing the documentation is often a way to find problems.\n\nAs far as I can tell from looking at your test suite (really one program) and the \"Activate the wildcard checking\" patch, what you are calling \"*\" is basically \"void*\" in C. It is an untyped pointer that can read or written as any other pointer type. As you seem to admit the motivation section, this violates the type safety of Go. We're not going to make changes to Go that give up type safety. That's very important to the design of Go.\n\nIn Workiva/go-datastructures#65, though, you describe this as \"1-parametric polymorphic functions\", so maybe I am misunderstanding. Let's say the proposal is instead some kind of notation for polymorphic functions over a single type parameter where the type parameter must be a pointer. That's at least type safe, but it is a stop-gap. If we later figured out how to do general polymorphic functions well in Go, we'd be stuck supporting both that and this one-off. Taking the long view, that doesn't seem wise.\n\nFor both these reasons I suggest we decline this proposal.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-10T16:39:21Z",
	"updated_at": "2015-08-10T16:39:21Z"
}
