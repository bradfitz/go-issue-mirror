{
	"id": 119503118,
	"number": 13429,
	"state": "closed",
	"title": "fmt: Printf(\"%#v\", v) stack overflow when print nested data",
	"body": "The code:\r\n\r\n```go\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n\tvar a = make(map[int]interface{})\r\n\ta[1] = a\r\n\tfmt.Printf(\"%#v\", a)\r\n}\r\n```\r\n\r\nError message:\r\n```\r\nruntime: goroutine stack exceeds 250000000-byte limit\r\nfatal error: stack overflow\r\n\r\nruntime stack:\r\nruntime.throw(0x1710e0, 0xe)\r\n\t/usr/local/go/src/runtime/panic.go:527 +0x100\r\nruntime.newstack()\r\n\t/usr/local/go/src/runtime/stack1.go:794 +0x1000\r\nruntime.morestack()\r\n\t/usr/local/go/src/runtime/asm_amd64p32.s:283 +0xa0\r\n\r\ngoroutine 1 [stack growth]:\r\nfmt.(*pp).printReflectValue(0x1045a120, 0x138900, 0x124e6620, 0x42, 0x76, 0x1ca49, 0x185005c0, 0x0)\r\n\t/usr/local/go/src/fmt/print.go:855 fp=0x18500558 sp=0x18500550\r\nfmt.(*pp).printValue(0x1045a120, 0x138900, 0x124e6620, 0x42, 0x76, 0x1ca49, 0x1, 0x0)\r\n\t/usr/local/go/src/fmt/print.go:848 +0x4e0 fp=0x185005e0 sp=0x18500558\r\nfmt.(*pp).printReflectValue(0x1045a120, 0x138ec0, 0x104342e0, 0x15, 0x76, 0x1ca48, 0x0, 0x41)\r\n\t/usr/local/go/src/fmt/print.go:902 +0x2e80 fp=0x185009d0 sp=0x185005e0\r\nfmt.(*pp).printValue(0x1045a120, 0x138ec0, 0x104342e0, 0x15, 0x76, 0x1ca48, 0x15, 0x0)\r\n\t/usr/local/go/src/fmt/print.go:848 +0x4e0 fp=0x18500a58 sp=0x185009d0\r\nfmt.(*pp).printReflectValue(0x1045a120, 0x138740, 0x104eea20, 0x54, 0x76, 0x1ca47, 0x33100, 0x66b9)\r\n\t/usr/local/go/src/fmt/print.go:945 +0x2680 fp=0x18500e48 sp=0x18500a58\r\nfmt.(*pp).printValue(0x1045a120, 0x138740, 0x104eea20, 0x54, 0x76, 0x1ca47, 0x138740, 0x104eea20)\r\n\t/usr/local/go/src/fmt/print.go:848 +0x4e0 fp=0x18500ed0 sp=0x18500e48\r\nfmt.(*pp).printReflectValue(0x1045a120, 0x138ec0, 0x104342e0, 0x15, 0x76, 0x1ca46, 0x0, 0x41)\r\n\t/usr/local/go/src/fmt/print.go:904 +0x2fc0 fp=0x185012c0 sp=0x18500ed0\r\nfmt.(*pp).printValue(0x1045a120, 0x138ec0, 0x104342e0, 0x15, 0x76, 0x1ca46, 0x15, 0x0)\r\n\t/usr/local/go/src/fmt/print.go:848 +0x4e0 fp=0x18501348 sp=0x185012c0\r\nfmt.(*pp).printReflectValue(0x1045a120, 0x138740, 0x104eea18, 0x54, 0x76, 0x1ca45, 0x33100, 0x66b9)\r\n\t/usr/local/go/src/fmt/print.go:945 +0x2680 fp=0x18501738 sp=0x18501348\r\nfmt.(*pp).printValue(0x1045a120, 0x138740, 0x104eea18, 0x54, 0x76, 0x1ca45, 0x138740, 0x104eea18)\r\n\t/usr/local/go/src/fmt/print.go:848 +0x4e0 fp=0x185017c0 sp=0x18501738\r\nfmt.(*pp).printReflectValue(0x1045a120, 0x138ec0, 0x104342e0, 0x15, 0x76, 0x1ca44, 0x0, 0x41)\r\n\t/usr/local/go/src/fmt/print.go:904 +0x2fc0 fp=0x18501bb0 sp=0x185017c0\r\nfmt.(*pp).printValue(0x1045a120, 0x138ec0, 0x104342e0, 0x15, 0x76, 0x1ca44, 0x15, 0x0)\r\n\t/usr/local/go/src/fmt/print.go:848 +0x4e0 fp=0x18501c38 sp=0x18501bb0\r\n```\r\n\r\nI think `fmt.Printf()` can learn from `reflect.DeepEqual()`, use a `make(map[visit]bool)` to avoid infinite loop on nested data.",
	"user": {
		"login": "idada",
		"id": 259552,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2015-11-30T17:18:05Z",
	"created_at": "2015-11-30T14:30:09Z",
	"updated_at": "2015-11-30T17:18:05Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
