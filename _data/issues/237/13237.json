{
	"id": 116858524,
	"number": 13237,
	"state": "closed",
	"title": "cmd/go: generate doesn't document -tags flag",
	"body": "go generate help string doesn't have any mention to tags, although tags are currently supported by go generate.\r\n```\r\nusage: generate [-run regexp] [file.go... | packages]\r\n\r\nGenerate runs commands described by directives within existing\r\nfiles. Those commands can run any process but the intent is to\r\ncreate or update Go source files, for instance by running yacc.\r\n\r\nGo generate is never run automatically by go build, go get, go test,\r\nand so on. It must be run explicitly.\r\n\r\nGo generate scans the file for directives, which are lines of\r\nthe form,\r\n\r\n\t//go:generate command argument...\r\n\r\n(note: no leading spaces and no space in \"//go\") where command\r\nis the generator to be run, corresponding to an executable file\r\nthat can be run locally. It must either be in the shell path\r\n(gofmt), a fully qualified path (/usr/you/bin/mytool), or a\r\ncommand alias, described below.\r\n\r\nNote that go generate does not parse the file, so lines that look\r\nlike directives in comments or multiline strings will be treated\r\nas directives.\r\n\r\nThe arguments to the directive are space-separated tokens or\r\ndouble-quoted strings passed to the generator as individual\r\narguments when it is run.\r\n\r\nQuoted strings use Go syntax and are evaluated before execution; a\r\nquoted string appears as a single argument to the generator.\r\n\r\nGo generate sets several variables when it runs the generator:\r\n\r\n\t$GOARCH\r\n\t\tThe execution architecture (arm, amd64, etc.)\r\n\t$GOOS\r\n\t\tThe execution operating system (linux, windows, etc.)\r\n\t$GOFILE\r\n\t\tThe base name of the file.\r\n\t$GOLINE\r\n\t\tThe line number of the directive in the source file.\r\n\t$GOPACKAGE\r\n\t\tThe name of the package of the file containing the directive.\r\n\t$DOLLAR\r\n\t\tA dollar sign.\r\n\r\nOther than variable substitution and quoted-string evaluation, no\r\nspecial processing such as \"globbing\" is performed on the command\r\nline.\r\n\r\nAs a last step before running the command, any invocations of any\r\nenvironment variables with alphanumeric names, such as $GOFILE or\r\n$HOME, are expanded throughout the command line. The syntax for\r\nvariable expansion is $NAME on all operating systems.  Due to the\r\norder of evaluation, variables are expanded even inside quoted\r\nstrings. If the variable NAME is not set, $NAME expands to the\r\nempty string.\r\n\r\nA directive of the form,\r\n\r\n\t//go:generate -command xxx args...\r\n\r\nspecifies, for the remainder of this source file only, that the\r\nstring xxx represents the command identified by the arguments. This\r\ncan be used to create aliases or to handle multiword generators.\r\nFor example,\r\n\r\n\t//go:generate -command yacc go tool yacc\r\n\r\nspecifies that the command \"yacc\" represents the generator\r\n\"go tool yacc\".\r\n\r\nGenerate processes packages in the order given on the command line,\r\none at a time. If the command line lists .go files, they are treated\r\nas a single package. Within a package, generate processes the\r\nsource files in a package in file name order, one at a time. Within\r\na source file, generate runs generators in the order they appear\r\nin the file, one at a time.\r\n\r\nIf any generator returns an error exit status, \"go generate\" skips\r\nall further processing for that package.\r\n\r\nThe generator is run in the package's source directory.\r\n\r\nGo generate accepts one specific flag:\r\n\r\n\t-run=\"\"\r\n\t\tif non-empty, specifies a regular expression to select\r\n\t\tdirectives whose full original source text (excluding\r\n\t\tany trailing spaces and final newline) matches the\r\n\t\texpression.\r\n\r\nIt also accepts the standard build flags -v, -n, and -x.\r\nThe -v flag prints the names of packages and files as they are\r\nprocessed.\r\nThe -n flag prints commands that would be executed.\r\nThe -x flag prints commands as they are executed.\r\n\r\nFor more about specifying packages, see 'go help packages'.\r\n```",
	"user": {
		"login": "rakyll",
		"id": 108380,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2015-11-20T00:28:31Z",
	"created_at": "2015-11-13T21:44:09Z",
	"updated_at": "2015-11-20T00:28:31Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
