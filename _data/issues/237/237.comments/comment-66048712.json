{
	"id": 66048712,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4 by **wmundt42**:\n\n\u003cpre\u003eJust to clarify, the error is on line \"myMap[0].t += 1;\" and states:\n\n  test.go:9: cannot assign to (myMap[0]).t\n\nThis is the same as if you just do \"myMap[0].t = 2;\" so the += is irrelevant.\n\nThe language spec states that: \"Each left-hand side operand must be addressable, a\nmap index expression, or the blank identifier.\"  Quick tests indicate that\n\"\u0026myMap[0]\" and \"\u0026myMap[0].t\" also fail so that indicates that 6g does not regard map\nvalues as addressable.  This is spec-compatible.  Furthermore, \"myMap[0].t\" is not\ndirectly a map index expression, nor is it a blank identifier.\n\nTechnically, I think that gccgo probably \"violates\" the spec by considering map value\nexpressions to be addressable.  As a language user, though, I'd certainly find it\nmuch more convenient if that were the case, or at least if struct members and other\nindirect references within map values (array entries, etc) were assignable.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-11-17T02:27:10Z",
	"updated_at": "2014-12-08T10:03:46Z"
}
