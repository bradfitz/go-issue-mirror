{
	"id": 113193586,
	"body": "I can think of a few possible ways to fix this.\r\n\r\n1. Somehow synchronize stack growth and scanobject. I don't think this is a good idea unless we can find a way that doesn't slow down scanobject.\r\n2. Delay freeing stack spans during a GC until the end of that GC. This would give stack spans the same monotonic property that makes heapBitsForObject safe on heap spans. I think we do something like this for some runtime data structure, though I forget what it is. This has the downside that, if the user is creating goroutines at a rapid clip during a GC, they'll eat up memory faster than they do now.\r\n3. Replace all heap-to-stack pointers with uintptrs. The garbage collector simply won't trace these, and it can even blow up if it finds a pointer into a stack span.\r\n\r\n3 seems like the cleanest solution, assuming it doesn't have other ramifications.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-18T15:32:43Z",
	"updated_at": "2015-06-18T15:32:43Z"
}
