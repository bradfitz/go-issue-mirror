{
	"id": 144528628,
	"body": "@infogulch It is indeed not enough. In my provisionally worked out API I do define a Key function that can be used for things like adding meaning and alternatives. I left it out of the design doc to not go into details too much. (I also stripped about 1/3rd of my original draft; maybe I went a bit overboard.)\r\n\r\nNote that as the string has no meaning in itself, you could always write the format string as, for example, `\"Archive (verb)\"` and `\"Archive (noun)\"` and supply a \"translation\" for these in English (`\"Archive\"` for both). But this does not address all concerns. A more general solution:\r\n\r\nPrintf would have the following signature:\r\n\r\n    func (p *Printer) Printf(key Reference, args ...interface{}) (n int, err error) {\r\n\r\nwhere Reference is either a string or a result from a func like\r\n\r\n    func Key(id string, fallback ...string) Reference {\r\n\r\nThis allows the familiar `Printf()` usage while addressing the concerns you raised. Many localization frameworks have a solution of a similar nature.\r\n\r\nBut the example string you provide does raise another good point: there may be format strings one does not want to translate at all while still using the message package to substitute localized values. This is possible as is (e.g. `fmt.Printf(\"%s: %d\", m.Print(m), m.Print(i)))`, but may be a bit clunky.  A bit better may be something like `m.Printf(message.Raw(\"%s: %d\"), m, i)`, where the use of Raw makes extraction skip the string. I don't think there are too many cases where this is used, though. Even `\"%s: %d\"` will vary per language. But single-value substitutions like `\"%2.3d\"` should probably be excluded from translation.",
	"user": {
		"login": "mpvl",
		"id": 6445383,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-30T20:19:24Z",
	"updated_at": "2015-09-30T20:23:54Z"
}
