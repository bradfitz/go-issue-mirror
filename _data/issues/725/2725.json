{
	"id": 51279620,
	"number": 2725,
	"state": "closed",
	"title": "gob, json, xml: marshal/unmarshal interfaces should be consistent",
	"body": "\u003cpre\u003egob:\n\ntype GobDecoder interface {\n    GobDecode([]byte) error\n}\ntype GobEncoder interface {\n    GobEncode() ([]byte, error)\n}\n\njson:\n\ntype Marshaler interface {\n    MarshalJSON() ([]byte, error)\n}\ntype Unmarshaler interface {\n    UnmarshalJSON([]byte) error\n}\n\nxml:\n\ntype Marshaler interface {\n    MarshalXML() ([]byte, error)\n}\n// no Unmarshaler\n\nSo a type T that implements these three looks like this:\n\nfunc (T) GobDecode([]byte) error\nfunc (T) GobEncode() ([]byte, error)\nfunc (T) MarshalJSON() ([]byte, error)\nfunc (T) MarshalXML() ([]byte, error)\nfunc (T) UnmarshalJSON([]byte) error\n\nKinda gross.\n\nI'd prefer it that the encoding name came first (either FooMarshal or FooEncode), so\nthat the Marshal and Unmarshal methods are alphabetical neighbors.\n\nI have no preference as to Marshal vs Encode.\u003c/pre\u003e",
	"user": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2014-12-08T10:14:29Z",
	"created_at": "2012-01-18T03:41:09Z",
	"updated_at": "2016-06-24T21:23:46Z",
	"milestone": {
		"id": 1061233,
		"number": 7,
		"title": "Go1"
	}
}
