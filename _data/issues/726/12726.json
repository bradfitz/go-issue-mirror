{
	"id": 107891255,
	"number": 12726,
	"state": "closed",
	"title": "unknown: consistency of address uniqueness of anonymous struct instances",
	"body": "\u003e Go 1.5.1\r\n\r\nLet's talk about the following code. The difference among a()/b()/c() is the print output.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n    \"fmt\"\r\n)\r\n\r\nfunc a() {\r\n    var x interface{} = \u0026struct{}{}\r\n    var y interface{} = \u0026struct{}{}\r\n    fmt.Printf(\"a: %v\\n\", x == y)\r\n}\r\n\r\nfunc b() {\r\n    var x interface{} = \u0026struct{}{}\r\n    var y interface{} = \u0026struct{}{}\r\n    fmt.Printf(\"b: %v %p\\n\", x == y, x)\r\n}\r\n\r\nfunc c() {\r\n    var x interface{} = \u0026struct{}{}\r\n    var y interface{} = \u0026struct{}{}\r\n    fmt.Printf(\"c: %v %p %p\\n\", x == y, x, y)\r\n}\r\n\r\nfunc main() {\r\n    a()\r\n    b()\r\n    c()\r\n}\r\n```\r\n\r\nHere goes the output.\r\n\r\n```\r\na: true\r\nb: false 0x1b59d0\r\nc: true 0x1b59d0 0x1b59d0\r\n```\r\n\r\nIt seems that there is some inconsistent optimization that causes the difference. I think that it is more useful for empty anonymous structs to generate unique addresses.",
	"user": {
		"login": "albertjin",
		"id": 640151,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2015-09-23T10:57:53Z",
	"created_at": "2015-09-23T10:29:27Z",
	"updated_at": "2016-09-23T04:34:10Z"
}
