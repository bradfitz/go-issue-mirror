{
	"id": 66048437,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3 by **jesse.dailey**:\n\n\u003cpre\u003eThat is a nice little generator pattern there, and I like it a lot conceptually.\n\nBut, I think it's the wrong fit for this particular corner of the language.\n\nI'd be happy enough I suppose if there were just an import that had something like \nyou describe.  But, let me make my case for why it makes sense in terms of language \ndesign and performance.\n\nThe RangeClause is added to the language for the purpose of substituting for the \nForClause.  All the other iterations that range does are things one could do with a \nlonger form ForClause, but RangeClause exists to make 'for' more expressive, with \nless cruft.  What is the most common ForClause in the world?\n\nfor i := 0; i \u0026lt; N; i++ { }\n\nIn order to express this you really need to be able to provide: start, end, and \nstride to produce a range of integers.\n\nAlso, a for-loop is an extremely tight piece of machine code, so you'd be replacing a \nfew cmps and adds with launching a new goroutine and doing channel I/O... and all \nthat I/O would compound-scale as you chain new steps on (so when you add .By(2) you \ndon't cut your workload in half, you double it)... where adding a stride of 2 to \nrange simply gets you the half of the results you wanted with no additional overhead.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-11-15T02:41:10Z",
	"updated_at": "2014-12-22T05:44:29Z"
}
