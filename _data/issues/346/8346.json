{
	"id": 51288059,
	"number": 8346,
	"state": "open",
	"title": "cmd/compile: Opportunity for de-pessimization in provably const range loops",
	"body": "\u003cpre\u003eWhat does 'go version' print?\n\ngo version go1.3 linux/amd64\n\nWhat steps reproduce the problem?\n\nUsing the 2-return 'range' over a slice of structs will copy each struct, even if the\nstruct is provably not modified in the loop.  This is a premature pessimization that the\ncompiler could and should eliminate.  Ideally the spec would guarantee this optimization\n(a la RVO in C++) so people could count on it and maybe even warn when it is not true.\n\nThe for-each construct is much nicer to read and write, but this behavior sort of makes\nit a non-starter for large data.  This is discussed in many places on the web, with the\ngeneral recommendation of \u0026quot;just iterate on index\u0026quot;.  This is unfortunate for\nthe language.\n\nAlternatively: some syntax to say explicitly \u0026quot;iterate by reference\u0026quot; or by\npointer.\n\nIan asked me to file this issue.\u003c/pre\u003e",
	"user": {
		"login": "thockin",
		"id": 5595220,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Suggested"
		}
	],
	"comments": 2,
	"created_at": "2014-07-09T00:46:54Z",
	"updated_at": "2015-06-08T06:21:41Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
