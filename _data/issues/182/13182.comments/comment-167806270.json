{
	"id": 167806270,
	"body": "Thanks for reviewing Russ. Here is the benefit I see of enabling a more flexible logger output via an approach like `OutputFn` vs. using current `SetOuptut` \r\n\r\n- Currently, doing any non-standard logging (either in format or in action) with the log package is a four step process using the `SetOutput` approach.\r\n  1. Setup the standard logger to generate the fields required for your custom logging through `SetFlags()` and/or `SetPrefix()`. The standard flags may be insufficient.\r\n  2. Implement a custom logger that supports the writer interface \u0026 call `SetOutput()` with it\r\n  3. In the custom logger, parse each line of output from the writer to extract the required fields from the string\r\n  4. Perform whatever is the custom logging required.\r\n- Point 1 means the application code and the logger implementation get tightly coupled and you need to have knowledge of the input format that the custom logger implementation expects to use it. This is fragile and also depends on logging output format being guaranteed. \r\n- Point 3 is an unnecessary extra step and possibly a performance penalty. Why should a custom logger contain code to parse a []byte and extract timestamps and file-paths and so on vs. focusing on the mechanics of the custom logging? \r\n- The OutputFn type of approach lets logging implementations be swapped out cleanly without tying the implementation to the application code and also eliminates text parsing.",
	"user": {
		"login": "srinathh",
		"id": 2973973,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-29T15:06:33Z",
	"updated_at": "2015-12-29T15:06:33Z"
}
