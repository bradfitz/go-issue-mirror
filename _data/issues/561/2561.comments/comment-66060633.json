{
	"id": 66060633,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11:\n\n\u003cpre\u003eI looked at the spec further, and saw that in the Constant Expressions section it says\n\"A constant \u0026lt;a href=\"#Comparison_operators\"\u0026gt;comparison\u0026lt;/a\u0026gt; always yields\nan untyped boolean constant.\"  That could be said to contradict the Comparison Operators\nsection, which says \"Comparison operators compare two operands and yield a value of type\n\u0026lt;code\u0026gt;bool\u0026lt;/code\u0026gt;.\"  It seems clear to me that for comparisons, constant\nexpressions and non-constant expressions should produce the same type: either the named\ntype \"bool\" or the unnamed boolean type.  I can't see any reason why the fact that the\nexpressions are constants should affect the generated type for a comparison.  I hope we\ncan agree on that and that therefore the spec should change one way or another.\n\nIntuitively I think that a comparison should produce a result of the unnamed boolean\ntype.  I think this should work:\n\ntype Bool bool\nvar eq Bool = i == j\n\nBut it is true that no other operation in the language works that way, so although I\nthink that would be best I can also see an argument for saying that the result of a\ncomparison is always the named type \"bool\".\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-02-17T21:05:09Z",
	"updated_at": "2014-12-22T06:05:01Z"
}
