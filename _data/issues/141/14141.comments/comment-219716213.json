{
	"id": 219716213,
	"body": "@bradfitz It seems `golang.org/x/net/http2` not hosted on github?\r\n\r\nHere is a diff. Since http port is not 443, i add some if-else to use 80\r\n\r\n```diff\r\ndiff --git a/http2/configure_transport.go b/http2/configure_transport.go\r\nindex daa17f5..dde578a 100644\r\n--- a/http2/configure_transport.go\r\n+++ b/http2/configure_transport.go\r\n@@ -32,7 +32,7 @@ func configureTransport(t1 *http.Transport) (*Transport, error) {\r\n \t\tt1.TLSClientConfig.NextProtos = append(t1.TLSClientConfig.NextProtos, \"http/1.1\")\r\n \t}\r\n \tupgradeFn := func(authority string, c *tls.Conn) http.RoundTripper {\r\n-\t\taddr := authorityAddr(authority)\r\n+\t\taddr := authorityAddr(authority, \"https\")\r\n \t\tif used, err := connPool.addConnIfNeeded(addr, t2, c); err != nil {\r\n \t\t\tgo c.Close()\r\n \t\t\treturn erringRoundTripper{err}\r\ndiff --git a/http2/transport.go b/http2/transport.go\r\nindex a7ada8f..a9f24dd 100644\r\n--- a/http2/transport.go\r\n+++ b/http2/transport.go\r\n@@ -75,6 +75,9 @@ type Transport struct {\r\n \t// explicitly requested gzip it is not automatically\r\n \t// uncompressed.\r\n \tDisableCompression bool\r\n+\t\r\n+\t// Allow plain text HTTP/2\r\n+\tAllowHTTPScheme bool\r\n \r\n \t// MaxHeaderListSize is the http2 SETTINGS_MAX_HEADER_LIST_SIZE to\r\n \t// send in the initial settings frame. It is how many bytes\r\n@@ -268,20 +271,27 @@ func (t *Transport) RoundTrip(req *http.Request) (*http.Response, error) {\r\n \r\n // authorityAddr returns a given authority (a host/IP, or host:port / ip:port)\r\n // and returns a host:port. The port 443 is added if needed.\r\n-func authorityAddr(authority string) (addr string) {\r\n+func authorityAddr(authority string, scheme string) (addr string) {\r\n \tif _, _, err := net.SplitHostPort(authority); err == nil {\r\n \t\treturn authority\r\n \t}\r\n-\treturn net.JoinHostPort(authority, \"443\")\r\n+\tvar defaultPort string\r\n+\tif scheme == \"http\" {\r\n+\t\tdefaultPort = \"80\"\r\n+\t} else {\r\n+\t\tdefaultPort = \"443\"\r\n+\t}\r\n+\treturn net.JoinHostPort(authority, defaultPort)\r\n }\r\n \r\n // RoundTripOpt is like RoundTrip, but takes options.\r\n func (t *Transport) RoundTripOpt(req *http.Request, opt RoundTripOpt) (*http.Response, error) {\r\n-\tif req.URL.Scheme != \"https\" {\r\n+\tif !(req.URL.Scheme == \"https\" || (req.URL.Scheme == \"http\" \u0026\u0026 t.AllowHTTPScheme)) {\r\n \t\treturn nil, errors.New(\"http2: unsupported scheme\")\r\n \t}\r\n \r\n-\taddr := authorityAddr(req.URL.Host)\r\n+    \r\n+\taddr := authorityAddr(req.URL.Host, req.URL.Scheme)\r\n \tfor {\r\n \t\tcc, err := t.connPool().GetClientConn(req, addr)\r\n \t\tif err != nil {\r\n```",
	"user": {
		"login": "ayanamist",
		"id": 406779,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-17T13:25:03Z",
	"updated_at": "2016-05-17T13:25:03Z"
}
