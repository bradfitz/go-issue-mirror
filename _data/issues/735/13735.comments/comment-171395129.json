{
	"id": 171395129,
	"body": "/cc @aclements\r\n\r\nThis reminds me of the mcall bug that led to this big comment, but that comment does not apply here:\r\n```\r\n// mcall switches from the g to the g0 stack and invokes fn(g),\r\n// where g is the goroutine that made the call.\r\n// mcall saves g's current PC/SP in g-\u003esched so that it can be restored later.\r\n// It is up to fn to arrange for that later execution, typically by recording\r\n// g in a data structure, causing something to call ready(g) later.\r\n// mcall returns to the original goroutine g later, when g has been rescheduled.\r\n// fn must not return at all; typically it ends by calling schedule, to let the m\r\n// run other goroutines.\r\n//\r\n// mcall can only be called from g stacks (not g0, not gsignal).\r\n//\r\n// This must NOT be go:noescape: if fn is a stack-allocated closure,\r\n// fn puts g on a run queue, and g executes before fn returns, the\r\n// closure will be invalidated while it is still executing.\r\n```\r\nNonetheless, it seems like somehow systemstack has jumped to the wrong code, perhaps because the closure is corrupt. I wondered if maybe the stack was being shrunk but I don't see how that would be allowed before systemstack got a chance to do its jump.\r\n",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-13T18:48:27Z",
	"updated_at": "2016-01-13T18:48:27Z"
}
