{
	"id": 201111332,
	"body": "[I thought I'd already responded but I can't find any evidence of it.  Apologies if you get deja vu reading it.]\r\n\r\nThe implements and referrers queries might in principle have inspect the entire workspace---that is, the reverse transitive closure of import dependencies, starting from the selected declaration.  In a very large workspace this doesn't scale if you search for say fmt.Print, although it does pretty well for declarations in less commonly used standard packages like go/types.  So I think there is a notion of \"type analysis\" scope wanted here, distinct from \"pointer analysis scope\" even though my change conflates them.  We could introduce two separate scopes, but I feel that a single scope is already almost too much configuration for most users.  There may be other ways to bound the amount of work, e.g. stopping after 100 reports, or after 100 packages have been inspected, or after 10 seconds.",
	"user": {
		"login": "adonovan",
		"id": 5658175,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-25T02:25:56Z",
	"updated_at": "2016-03-25T02:25:56Z"
}
