{
	"id": 66053752,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2 by **pgavlin**:\n\n\u003cpre\u003eLooking at the source, this happens because fmt.Scanf and friends consume input one\nUTF-8 rune at a time.  Readers that do not provide a ReadRune method (e.g. os.Stdin) are\nwrapped inside of a type that does.  The ReadRune method that this type provides reads\none byte at a time from its underlying reader until a rune is found.  Reading naturally\nstops when the format string ends--thus, any remaining runes/bytes are never read.  You\ncan get the same behavior from C using read() instead of scanf(); an example is\nattached.  I've also attached a workaround for Go (kind of a hack, but it seems to work\nfine).\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1359/2/readStdin.c\"\u003ereadStdin.c\u003c/a\u003e (43 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1359/2/issue1359.go\"\u003eissue1359.go\u003c/a\u003e (167 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-12-20T05:24:35Z",
	"updated_at": "2014-12-08T10:07:58Z"
}
