{
	"id": 66090587,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eIn contrast to the section on Index Expressions (\n\u003ca href=\"http://tip.golang.org/ref/spec#Index_expressions\"\u003ehttp://tip.golang.org/ref/spec#Index_expressions\u003c/a\u003e ), for Slice Expressions (\n\u003ca href=\"http://tip.golang.org/ref/spec#Slice_expressions\"\u003ehttp://tip.golang.org/ref/spec#Slice_expressions\u003c/a\u003e ) the spec does _not_ explicitly say\nthat constant indices _must_ be in \"in range\" for arrays or constant strings (this is\narguably an oversight in the spec).\n\nThe gc compiler is handling \"abc\"[5:6] according to the spec by causing a run-time\npanic. On the other hand, the gc compiler is reporting a compile-time error for\n(\u0026[3]int{})[5:6], where it shouldn't according to the spec.\n\nThus, the gc compiler is inconsistent here.\n\nThe gccgo compiler and go/types report compile-time errors for out-of-bounds constant\nindices of array or constant string slices.\n\nI argue that the spec has an oversight since non-gc implementations already implement\nthe compile-time check, and gc implements it already for arrays, and doing those checks\nat compile time are sensible and in the original intent.\n\nThere's a tiny chance that adjusting gc will invalidate programs that now compile:\n\"foo\"[4:5] will become a compiler error. However, if that code is actually executed, the\nprogram would panic.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-06T20:52:06Z",
	"updated_at": "2014-12-08T10:40:00Z"
}
