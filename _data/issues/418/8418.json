{
	"id": 51288163,
	"number": 8418,
	"state": "closed",
	"title": "Redundant computations in src/pkg/sort/sort.go",
	"body": "by **Raphael.Geronimi**:\n\n\u003cpre\u003eBrowsing through Golang code (a pleasure), I was surprised to see that in the case where\nthere are more than 7 items, the quicksort function calls BOTH a recursive quicksort\ncode and an insertion sort, instead of doing one OR the other (as one sees in many libs,\ninsertion sort having better performance on small lists).\nThis redundancy is compounded by the recursive nature of quicksort.\nI am no expert in sorting algorithms so I may have missed something obvious, but it\nseems a \u0026quot;else\u0026quot; is missing on line 184:\n166\tfunc quickSort(data Interface, a, b, maxDepth int) {\n   167\t\tfor b-a \u0026gt; 7 {\n   168\t\t\tif maxDepth == 0 {\n   169\t\t\t\theapSort(data, a, b)\n   170\t\t\t\treturn\n   171\t\t\t}\n   172\t\t\tmaxDepth--\n   173\t\t\tmlo, mhi := doPivot(data, a, b)\n   174\t\t\t// Avoiding recursion on the larger subproblem guarantees\n   175\t\t\t// a stack depth of at most lg(b-a).\n   176\t\t\tif mlo-a \u0026lt; b-mhi {\n   177\t\t\t\tquickSort(data, a, mlo, maxDepth)\n   178\t\t\t\ta = mhi // i.e., quickSort(data, mhi, b)\n   179\t\t\t} else {\n   180\t\t\t\tquickSort(data, mhi, b, maxDepth)\n   181\t\t\t\tb = mlo // i.e., quickSort(data, a, mlo)\n   182\t\t\t}\n   183\t\t}\n   184\t\tif b-a \u0026gt; 1 {\n   185\t\t\tinsertionSort(data, a, b)\n   186\t\t}\n   187\t}\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:46:46Z",
	"created_at": "2014-07-23T20:26:12Z",
	"updated_at": "2016-06-25T01:38:32Z"
}
