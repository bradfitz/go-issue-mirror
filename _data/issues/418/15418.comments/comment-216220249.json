{
	"id": 216220249,
	"body": "@abligh I know the goroutine does not matter.\r\nBut you need the goroutine to get the buggy example.\r\n\r\nI think @bradfitz says that you can not have one thread call RLock twice and call RUnlock twice in sequence,and have an other thread call Lock at the same time.It will deadlock with little possibility.(It just look like the possibility of the data race has happend.) \r\nThe problem is that the sync.RWMutex may deadlock with little possibility in that case.\r\nYou can write a test case for that case , but you will pass the test case most of time.\r\nSo I think that is the reason why this forbids using the case which should be documented as soon as possible.\r\n\r\nBy the way,I think using the case in the way that i have found is better than the sentence \"Any RLock caller cannot depend on a future RLock succeeding in any goroutine as long as the first RLock is held\".",
	"user": {
		"login": "bronze1man",
		"id": 1107541,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-05-02T12:13:00Z",
	"updated_at": "2016-05-02T12:44:35Z"
}
