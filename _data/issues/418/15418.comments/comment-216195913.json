{
	"id": 216195913,
	"body": "That's a pretty significant limitation given the reason to use an `RWMutex` over a `Mutex` might precisely be because you *need* to have more than one `RLock` held at once (as opposed to merely you don't mind if it happens occasionally).\r\n\r\nThe docs currently say:\r\n\r\n\u003e An RWMutex is a reader/writer mutual exclusion lock. **The lock can be held by an arbitrary number of readers** or a single writer. RWMutexes can be created as part of other structures; the zero value for a RWMutex is an unlocked mutex.\r\n\r\nClearly current behaviour does conform to the above (unless you read the bit in bold as 'the lock might be able to be held by an arbitrary number of readers' which I would suggest is an unnatural interpretation).\r\n\r\nAt the least this is a documentation problem, but given the fact that `RWMutex`'s have well known behaviour outside go, one could argue this is in fact a bug.",
	"user": {
		"login": "abligh",
		"id": 1240226,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-02T10:45:15Z",
	"updated_at": "2016-05-02T10:45:15Z"
}
