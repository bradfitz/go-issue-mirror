{
	"id": 66047921,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eWow, interesting.  It's the \"should be\" answers that are wrong, not the\nactual answers, meaning that the test's calculations are broken, not\nthe 64-bit functionality being tested.\n\nThis line is particularly interesting:\n\n    int64 const 4294967295 \u0026 var -2147483648 = 2147483648 should be 2147483649\n\nIn hex this would be \n\n    int64 const 0xffffffff \u0026 var -0x80000000 = 0x80000000 should be 0x80000001\n\nwhich makes it clear that the \"should be\" is wrong.\n\nI've run this tree with GOARCH=386 GOOS=darwin on a MacBookPro,\na Mac Mini, and a Mac Pro and not had this problem, so there's something\nsubtle that's different about your configuration from mine.  \n\nDo you have any guesses about what makes your system different than mine?  \nMaybe the compiler version: what does gcc -version print?\n\nPlease try this:\n\n    cd $GOROOT/test\n    8g 64bit.go\n    8l 64bit.8\n    8.out \u003etmp.go\n    wc tmp.go\n    md5sum tmp.go\n\nFor the last two commands, I get this output:\n\n; wc tmp.go\n   11683  111813 1340668 tmp.go\n; md5sum tmp.go\nceb45a4b7755aa80641e1a08848d7df4\ttmp.go\n; \n\nIf you get different output, please attach tmp.go\nin a reply to this issue.\n\nIf you get the same output, let me know that too.\nThis will at least help us figure out whether the\n32-bit code is miscompiling (tmp.go differs) or\nthe compiler has a bug involving constants in \nprograms (tmp.go is the same).\n\nThanks for the report.\u003c/pre\u003e\n\n_Labels changed: added **compiler-bug**._\n\n_Owner changed to **r...@golang.org**._\n\n_Status changed to **WaitingForReply**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-11-12T06:09:01Z",
	"updated_at": "2014-12-08T10:03:10Z"
}
