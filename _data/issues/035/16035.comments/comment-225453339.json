{
	"id": 225453339,
	"body": "Possible?  Yes.  But a bit of risky move at this stage of the release.  The special handling of `syscall.Syscall` is implemented based on the fact that `syscall.Syscall` is written in assembler.  In assembler there is no way to force a pointer to be live, so there is some argument in support of doing it in the compiler.\r\n\r\nOf course, although `Proc.Call` and `LazyProc.Call` are written in Go, it's not clear to me that there is a good way that they could keep their pointers live.\r\n\r\nBut now that I think about it, because `Proc.Call` calls `syscall.Syscall` directly, it is possible that the compiler support for `syscall.Syscall` is ensuring that `Proc.Call` doesn't suffer from this problem.  It may be that only `LazyProc.Call` suffers from it,  because it does not call `syscall.Syscall`, but instead calls `Proc.Call`.  Could somebody with a Windows system see if they can recreate the problem in the original report, and then see if they can still recreate it using `Proc` rather than `LazyProc`?  (That is, I think, call `LoadDLL` rather than `NewLazyDLL`).",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-12T18:45:18Z",
	"updated_at": "2016-06-12T18:45:18Z"
}
