{
	"id": 51275962,
	"number": 35,
	"state": "closed",
	"title": "net: TestDialError fails",
	"body": "by **nick.fa.jones**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n1. all.bash\n\n\nWhat is the expected output? What do you see instead?\nexpected:\nPASS, nick, you are so cool\n\ngot:\nnick@nickhq3:~/src/go/src/pkg/net$ make test\ngotest\nmake[1]: Entering directory `/home/nick/src/go/src/pkg/net'\nrm -f _test/net.a _gotest_.6\nmake[1]: Leaving directory `/home/nick/src/go/src/pkg/net'\nmake[1]: Entering directory `/home/nick/src/go/src/pkg/net'\n6g -o _gotest_.6 dnsclient.go dnsconfig.go dnsmsg.go fd.go fd_linux.go \nip.go ipsock.go net.go parse.go port.go sock.go tcpsock.go udpsock.go \nunixsock.go    dialgoogle_test.go ip_test.go net_test.go parse_test.go \nport_test.go server_test.go timeout_test.go\nrm -f _test/net.a\ngopack grc _test/net.a _gotest_.6\nmake[1]: Leaving directory `/home/nick/src/go/src/pkg/net'\nthrow: index out of range\n\npanic PC=0x2b3ded88cd38\nthrow+0x3e /home/nick/src/go/src/pkg/runtime/runtime.c:74\n        throw(0x47f060, 0x0)\nruntime·throwindex+0x1c /home/nick/src/go/src/pkg/runtime/runtime.c:47\n        runtime·throwindex()\nnet·hostPortToIP+0x19a /home/nick/src/go/src/pkg/net/ipsock.go:199\n        net·hostPortToIP(0x446170, 0x0, 0x3, 0x0, 0x464280, ...)\nnet·ResolveTCPAddr+0x34 /home/nick/src/go/src/pkg/net/tcpsock.go:61\n        net·ResolveTCPAddr(0x464280, 0x0, 0xf, 0x0, 0x4462f0, ...)\nnet·Dial+0x2a3 /home/nick/src/go/src/pkg/net/net.go:133\n        net·Dial(0x446170, 0x0, 0x3, 0x0, 0x4462f0, ...)\nnet·TestDialError+0xbc /home/nick/src/go/src/pkg/net/net_test.go:56\n        net·TestDialError(0xed8c3ba0, 0x2b3d)\ntesting·tRunner+0x22 /home/nick/src/go/src/pkg/testing/testing.go:105\n        testing·tRunner(0xed8c3ba0, 0x2b3d, 0x494a28, 0x0)\ngoexit /home/nick/src/go/src/pkg/runtime/proc.c:134\n        goexit()\n0x2b3ded8c3ba0 unknown pc\n\ngoroutine 3:\nruntime·entersyscall+0x50 /home/nick/src/go/src/pkg/runtime/proc.c:539\n        runtime·entersyscall()\nsyscall·Syscall6+0x5 /home/nick/src/go/src/pkg/syscall/asm_linux_amd64.s:41\n        syscall·Syscall6()\nsyscall·EpollWait+0x84 /home/nick/src/go/src/pkg/syscall/\nzsyscall_linux_amd64.go:132\n        syscall·EpollWait(0x6, 0x2b3d, 0xed8c5280, 0x2b3d, 0x1, ...)\nnet·*pollster·WaitFD+0xb5 /home/nick/src/go/src/pkg/net/fd_linux.go:116\n        net·*pollster·WaitFD(0xed886ca0, 0x2b3d, 0x39cf6c58, 0x0, \n0x72, ...)\nnet·*pollServer·Run+0x9e /home/nick/src/go/src/pkg/net/fd.go:237\n        net·*pollServer·Run(0xed848680, 0x2b3d)\ngoexit /home/nick/src/go/src/pkg/runtime/proc.c:134\n        goexit()\n0x2b3ded848680 unknown pc\n\ngoroutine 1:\ngosched+0x34 /home/nick/src/go/src/pkg/runtime/proc.c:515\n        gosched()\nchanrecv+0x318 /home/nick/src/go/src/pkg/runtime/chan.c:319\n        chanrecv(0xed8e1a00, 0x2b3d, 0xed88bf68, 0x2b3d, 0x0, ...)\nruntime·chanrecv1+0x50 /home/nick/src/go/src/pkg/runtime/chan.c:415\n        runtime·chanrecv1(0xed8e1a00, 0x2b3d)\ntesting·Main+0x263 /home/nick/src/go/src/pkg/testing/testing.go:132\n        testing·Main(0x4949f8, 0x0)\nmain·main+0x23 /home/nick/src/go/src/pkg/net/_testmain.go:21\n        main·main()\nmainstart+0xf /home/nick/src/go/src/pkg/runtime/amd64/asm.s:55\n        mainstart()\ngoexit /home/nick/src/go/src/pkg/runtime/proc.c:134\n        goexit()\nmake: *** [test] Error 2, nick, you suck\n\n\nWhat is your $GOOS?  $GOARCH?\nGOARCH=amd64\nGOOS=linux\n\n\nWhich revision are you sync'ed to?  (hg log -l 1)\nchangeset:   3975:b51fd2d6c160\ntag:         tip\nuser:        Kevin Ballard \u0026lt;kevin@sb.org\u0026gt;\ndate:        Tue Nov 10 20:05:24 2009 -0800\nsummary:     Implement new emacs command M-x gofmt\n\n\nPlease provide any additional information below.\nnet_test #4 seems to be testing the domain suffix search list feature, \nrecorded by the _DNS_Config structure and used by the net.LookupHost \nfunction.  It uses a hostname with no internal or trailing dots, and \nexpects a failed result containing the same hostname followed by a dot, \nthen a domain consisting of zero (:O) or more characters, then another dot \nfollowed by an error message.\n\nIf the local machine is set up with NO domain suffixes configured, then \nnet_test #4 fails (in various ways described below)\n\nThe failure may or may not be fixed (described below also), but to get to \nthe point, net.LookupHost needs a fix, and so does the test.  Perhaps the \nbest way to fix the test, and retain its relevance, is to temporary add \ndomain a suffix search entry, such as '.localdomain', to the runtime \n_DNS_Config only for the duration of test #4 if there were no suffixes \n(suffixe??? suffii???) already discovered.\n\nThe first way that the test fails is quoted above.\n\nThe function net.hostPortToIP (ipsock.go:199) assumes that the addrs array \nreturned by net.LookupHost will always have length \u0026gt; 0 if there was no \nerror, but net.LookupHost can indeed return in this state.\n\nIf the host parameter contains no dot, either internally, or as the last \ncharacter (FQDN), and the host machine has no domain suffix search list \nconfigured, then this parameter will pass through net.LookupHost without \nany lookup being done on it, thus addrs and err will not be set.\n\nThe version of net.LookupHost in revision control behavies like this, but \nthe version at: \u003ca href=\"http://golang.org/src/pkg/net/dnsclient.go\"\u003ehttp://golang.org/src/pkg/net/dnsclient.go\u003c/a\u003e seems to work \naround this same issue with an attempt at a final, unavioudable lookup of \nthe hostname with a '.' appended.  I'm not sure which version is more up \nto date, but the fix in the version of dnsclient.go from the website \n(actually both versions) is missing a step.\n\nShould there not be a local lookup of hostnames on the host machine, ie, /\netc/hosts ?  This is usually done as a first step in a number of resolvers \n(like c-ares, doesn't google use c-ares?), and is the default setting for \nthe libc resolver on most linuxes (linuxe??! linii?!!). Appending the dot \nto the dotless/trailingdotless hostname is only valid as a last resort if \nthe local lookup has already been performed.\n\nThe second way that the test fails (using the fix from the web version of \ndnsclient.go), is the error string returned by net.LookupHost still \ndoesn't match the pattern expected by net_test #4 (it doesn't contain a \ndomain).  To fix this, net_test #4 could be changed as explained above, to \ntemporarily add one '.localdomain' entry (or even many, to further test \nthe code) to an empty domain suffix search list for the duration of the \ntest, so that the test remains relevant and covers the code paths it is \nintended to cover.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:02:58Z",
	"created_at": "2009-11-11T12:38:43Z",
	"updated_at": "2016-06-24T18:51:31Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
