{
	"id": 122707530,
	"body": "That's concurrent GC issue.\r\n\r\nI've run:\r\n$ GODEBUG=gctrace=1 ./pprof.test -test.run=TestTraceStress$ -test.cpu=1,1,1,1,.......,1\r\n\r\nIf I sprinkle runtime.GC calls in the test, in particular inside of the following loop:\r\n\r\n```go\r\n\tfor i := 0; i \u003c 1e3; i++ {\r\n\t\t_ = make([]byte, 1\u003c\u003c20)\r\n\t}\r\n```\r\n\r\nMemory usage stabilizes at ~68MB.\r\n\r\nBut if I remove the calls, and let the concurrent GC do its work, memory steadily grows to 240MB, then to 300MB, then to 340MB.\r\n\r\nIf I enable gctracing, then I see lines like this:\r\n\r\ngc #1095 @60.193s 9%: 0.35+0.59+0.66+7.4+0.61 ms clock, 1.4+0.59+0+0/1.3/0.16+2.4 ms cpu, 4-\u003e125-\u003e2 MB, 4 MB goal, 10 P\r\n\r\nGC is basically 30x off of the goal.\r\n\r\nGC must not ever let heap grow above the GOGC goal. If it needs some reserve room, it should aim at 0.9 GOGC or so, but then cap the heap at GOGC if it fails to reclaim memory in time.\r\n\r\n",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-19T21:15:22Z",
	"updated_at": "2015-07-19T21:15:22Z"
}
