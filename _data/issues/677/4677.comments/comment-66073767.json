{
	"id": 66073767,
	"body": "\u003ca id=\"c14\"\u003e\u003c/a\u003eComment 14:\n\n\u003cpre\u003eFWIW we just came across an issue that triggered this problem\nin a way that happens reliably.\n\nThe problem happens when GOMAXPROCS=1 and there's something\ndoing lots of work (in our case it was reading a bunch of\ndata from disk and gzipping it) and then issues an http request.\n\nThe connection times out while the code is spinning, but\nthe http transport code doesn't get scheduled to see the EOF\nuntil the code stops spinning, so we see the EOF almost exactly\nat the same time as the request is issued, so the request\nfails because it doesn't realise that the EOF is out of band.\n\nThe problem is exacerbated because the window for the race is larger than\nit needs to be (the request is marked as in flight before the\nrequest has been transferred to the writing goroutine, instead\nof incrementing the count just before conn.Write is called).\n\nHere's a program that demonstrates the issue reliably for me:\n\n   \u003ca href=\"http://play.golang.org/p/bVf9wsCJSx\"\u003ehttp://play.golang.org/p/bVf9wsCJSx\u003c/a\u003e\n\nThe second GET request fails with \"can't write HTTP request on broken connection\" or\n\"EOF\".\n\nIt succeeds when run with GOMAXPROCS\u003e0.\n\nFor the time being we can work around this avoiding connection reuse\non all our http client connections, but this is less than ideal.\u003c/pre\u003e",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-16T16:00:10Z",
	"updated_at": "2014-12-08T10:24:47Z"
}
