{
	"id": 72859905,
	"number": 10677,
	"state": "closed",
	"title": "encoding/json: Unmarshal and special character tag",
	"body": "The below json demarshalling code will not detect the `@rid` field.\r\n\r\nI can not tell what I am doing wrong here, is the @ symbol some kind of utf problem?\r\n\r\n```\r\ntype TargetsResult struct{\r\n  Result Targets \"json: 'result'\" \r\n}\r\ntype Targets []struct{\r\n  Rid string \"json: '@rid'\"\r\n  Toclaim string \"json: 'toClaim'\"\r\n}\r\n\r\nfunc TestJsonTarget(t *testing.T){\r\n  //t.Skip()\r\n  input := \"{\\\"result\\\": [\t{\\\"@rid\\\": \\\"#5:0\\\", \\\"toClaim\\\": \\\"testcode\\\"},{\\\"@rid\\\": \\\"#5:2\\\", \\\"toClaim\\\": \\\"second\\\"},{\\\"@rid\\\": \\\"#5:1\\\"}]}\"\r\n  var results TargetsResult\r\n  if err := json.Unmarshal([]byte(input), \u0026results); err != nil{\r\n    fmt.Print(err) \r\n  }\r\n  fmt.Print(results.Result)\r\n}\r\n```\r\n\r\n```\r\nOutput:\r\n[{ testcode} { second} { }]\r\n```\r\n\r\nIf I unmarshal the same sample into the ugly \r\n```\r\ntype TargetsResult map[string][]map[string]interface{}\r\n```\r\nI can access it with\r\n```\r\nresults[\"result\"][0][\"@rid\"].(string)\r\n```\r\n\r\nBesides this test where the input is a go string (a rune?) I also tested the actual result coming from an http REST response where the header specifically says utf8.",
	"user": {
		"login": "cdeadlock",
		"id": 7480688,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2015-05-03T20:51:28Z",
	"created_at": "2015-05-03T20:21:42Z",
	"updated_at": "2016-06-25T02:07:21Z"
}
