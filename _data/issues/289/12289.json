{
	"id": 102778347,
	"number": 12289,
	"state": "open",
	"title": "net/http: implementing size capped connection pools",
	"body": "Hi,\r\n\r\nThis issue came up a few times already on golang-nuts. We could use an upper bound on the HTTP connection pool (active + idle) size and either block the caller until a connection becomes available, or return an error.\r\n\r\nOne of the suggested approaches is to provide a custom Transport that does the bookkeeping inside Dial(). That works only partially, as after the HTTP Client call (Do() or any of the verb helpers) returns there is no way to get a reference to the underlying connection and return that to the pool.\r\n\r\nnet/httputil contains a ClientConn type that seems to have some potential, but it is considered old (and probably will disappear soon). Even so, as far as I can tell the only way to grab the underlying TCP connection is to hijack it, which in turn forces one to handle the entire HTTP logic themselves.\r\n\r\nA naive approach would be to pool HTTP requests instead, but that is not really the desired approach.\r\n\r\nThanks for reading!",
	"user": {
		"login": "vgalu",
		"id": 4678183,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"created_at": "2015-08-24T12:11:27Z",
	"updated_at": "2016-03-29T11:03:26Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
