{
	"id": 66065370,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003eI don't believe we should accept TZ location names in the Parse patterns. Parse does not\ntoday require file system access (except that the package loads the default TZ from disk\nat startup), and I don't think we should change that precedent. There is also a question\nabout whether to accept both \"America/New York\" and \"America/New_York\" and, if so, which\nto use when printing and how to know when the zone name is done for the purpose of a\nlookup.\n\nThat said, I do intend to add a time.ParseInLocation (\u003ca href=\"https://golang.org/issue/3653\"\u003eissue #3653\u003c/a\u003e), and that could be\nused to build a custom parser that accepted the format you gave:\n\n2012-03-23T22:14 Europe/Berlin\n2013-02-03T15:35 America/New York\n\nThe parsing function (not time.Parse but your own) would have to deal with cutting the\ntime zone off (perhaps splitting at the last space before the slash), converting it into\na file path for LoadLocation (turning the space into an underscore), calling\ntime.LoadLocation (perhaps with a cache), and calling time.ParseInLocation.\n\nSo what you've described will be possible in Go 1.1 (it isn't today), but it won't be\nthere out of the box. There are too many design decisions I don't want to hard code.\n\nStar \u003ca href=\"https://golang.org/issue/3653\"\u003eissue #3653\u003c/a\u003e for updates on ParseInLocation.\u003c/pre\u003e\n\n\n\n_Status changed to **WontFix**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-02-03T20:36:50Z",
	"updated_at": "2014-12-08T10:17:39Z"
}
