{
	"id": 153096547,
	"body": "The value stream argument seems to be winning at this end (i.e., I floated the possibility of an RNG that differed by 1eps in many instances, and that was judged to be not worth the trouble), but I agree that the wrap-back from 1 overrepresents 0, by I think a factor of 1\u003c\u003c9 for Float64 and 1\u003c\u003c38 for Float32 -- I may have a fencepost error in my exponents, the derivation is that the highest two values for Float64 are 1 and 1-1/(1\u003c\u003c53), there are 1024 points between them in the integer random stream, and each point gets half, versus a single point for 1/(1\u003c\u003c63) and 0.  Wrapping 1 to 0 maps 512 points from the integer stream to 0, which is a substantial overrepresentation, and egregiously so for Float32.\r\n\r\nTo (mostly) preserve the value stream, it appears that the least-awful method is to replace the zero substitution with try-another-number.  It benchmarked the same, though of course this was just a microbenchmark.\r\n\r\nI don't understand the claim that zero is overrepresented.  The Mersenne twister RNG will generate 1/(1\u003c\u003c53) and 0 both at p=1/(1\u003c\u003c53), this algorithm generates 1/(1\u003c\u003c63) and 0 both at p=1/(1\u003c\u003c63).  In both cases the probability of zero and its nearest neighbor are the same (and p(0) is lower in this algorithm because all of the points between 0 and 1/(1\u003c\u003c54) get hits, where in Mersenne twister they instead round to zero).",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-02T17:43:10Z",
	"updated_at": "2015-11-02T17:43:10Z"
}
