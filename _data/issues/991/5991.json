{
	"id": 51284516,
	"number": 5991,
	"state": "closed",
	"title": "%v in fmt handles precision specification inconsistently for floats",
	"body": "by **gsivek@google.com**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n\u003ca href=\"http://play.golang.org/p/GM86nwT3k4\"\u003ehttp://play.golang.org/p/GM86nwT3k4\u003c/a\u003e\n\nWhat is the expected output?\n[0.123457] [0.123457] [0.12346] [0.1235]\n0.100000 0.100000 0.100000 0.100000\n\nWhat do you see instead?\n[0.123456789] [0.123457] [0.12346] [0.1235]\n0.100000 0.100000 0.1 0.1\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\nplay.golang.org\n\nWhich operating system are you using?\nLinux\n\nWhich version are you using?  (run 'go version')\ngo1.1.1\n\nPlease provide any additional information below.\n\nThe \u0026quot;fmt\u0026quot; docs (golang.org/pkg/fmt) say that %v prints the value in a default\nformat. For floats, this appears to be %f, and the docs state that the default precision\nfor %f is 6. But %v on a slice of floats or a struct containing a float may print with\nhigher precision (see the 0.123456789 above).\n\nSpecifying precision does truncate floats, but unlike %f, it does not add trailing\nzeros: fmt.Printf(\u0026quot;%.6v\u0026quot;, 0.123456789) prints 0.123457 and\nfmt.Printf(\u0026quot;%.6f\u0026quot;, 0.1) prints 0.100000, but fmt.Printf(\u0026quot;%.6v\u0026quot;, 0.1)\nprints 0.1. Nothing in the docs suggests that %v should behave differently from %f in\nthis case.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:32:57Z",
	"created_at": "2013-07-30T14:08:25Z",
	"updated_at": "2016-06-24T22:53:01Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
