{
	"id": 94594865,
	"body": "Fundamentally, this type is recursive; internally this means that the data structure representing the type has a (pointer) loop. More generally, this can happen with any type data structure containing loops.\r\n\r\nTrying to serialize such a data structure in finite form (e.g., print it in text form) requires some mechanism to break the loop.\r\n\r\nThe straight-forward algorithm to serialize cyclic data structures is to mark (e.g., number) each node, and when a node is encountered that was seen before during serialization, instead of serializing it again, use that number to refer to it.\r\n\r\nIt may be possible to export nodes in a clever order (after sorting them topologically) and preserve the current textual export format that emulates source code. Cycles would be broken by using identifiers, similar to what we do when we write cyclic type definitions in the first place.\r\n\r\nAnother alternative is to ditch the current format and use an algorithm that can handle cycles from the outset. x/tools/go/importer implements this for go/types.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-20T23:53:32Z",
	"updated_at": "2015-04-20T23:54:15Z"
}
