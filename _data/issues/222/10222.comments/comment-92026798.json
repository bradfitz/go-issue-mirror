{
	"id": 92026798,
	"body": "I had a poke at this, and I think I have an inkling of what's going on.  In some sense the type symbol for T should be an infinite string\r\n\r\ninterface { f() interface { f() interface { f() interface { ... \r\n\r\n(with an infinite balancing number of }s).\r\n\r\nNow it's clear that if type symbols really could be infinite, the interface string for interface { T } is the same.  But in fact of course type symbols cannot be infinite and the compiler truncates at a certain level of nesting, and the levels are different for T and interface { T }. so the type symbols are different (it's something eyeball melting like \"interface { main.m() interface { main.m() interface { main.m() interface { main.m() interface { main.m() interface { main.m\u003c...\u003e } } } } } }\" vs \"interface { main.m() interface { main.m() interface { main.m() interface { main.m() interface { main.m\u003c...\u003e } } } } }\").  I'm not entirely sure why the Trecur check in TConv triggers at different depths, but I find that code fairly confusing.  It's possible it could be bodged but a real fix probably needs a real computer scientist (skimming wikipedia suggests what we are doing here is trying to compute type equivalence in an equirecursive type system and this paper: http://gallium.inria.fr/~fpottier/publis/gauthier-fpottier-icfp04.pdf)",
	"user": {
		"login": "mwhudson",
		"id": 672022,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-12T10:02:00Z",
	"updated_at": "2015-04-12T10:02:00Z"
}
