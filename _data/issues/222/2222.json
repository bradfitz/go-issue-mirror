{
	"id": 51278909,
	"number": 2222,
	"state": "closed",
	"title": "x11 tearing / race",
	"body": "\u003cpre\u003eI wrote this little Go MJPEG stream viewer, using the x11 package:\n\n\u003ca href=\"https://gist.github.com/1190721\"\u003ehttps://gist.github.com/1190721\u003c/a\u003e\n\n(you can reproduce using the free Android app\n\u003ca href=\"https://market.android.com/details?id=com.pas.webcam\"\u003ehttps://market.android.com/details?id=com.pas.webcam\u003c/a\u003e to run a MJPEG server)\n\nUnfortunately it can't keep up, and has tearing.  I see Flush is implemented like this:\n\nfunc (c *conn) FlushImage() {\n\tselect {\n\tcase c.flush \u0026lt;- false:\n\t\t// Flush notification sent.\n\tdefault:\n\t\t// Could not send.\n\t\t// Flush notification must be pending already.\n\t}\n}\n\nWhich means FlushImage() never blocks and is a no-op if a Flush is already in-flight.\n\nBut the image isn't guarded:\n\nfunc (c *conn) Screen() draw.Image { return c.img }\n\n... hence the tearing.\n\nEven with that, it seems quite slow.  (JPEG decoding? MIME multipart?)  Seems like a fun\nbenchmark.  The same machine can do it all in JavaScript in a browser with smooth video,\nstreaming over Wifi.\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:11:58Z",
	"created_at": "2011-09-03T06:31:48Z",
	"updated_at": "2016-06-24T19:34:17Z"
}
