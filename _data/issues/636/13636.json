{
	"id": 122428072,
	"number": 13636,
	"state": "open",
	"title": "cmd/cgo: cgo gets confused by equivalent #defined types",
	"body": "Unfortunately I don't have a simple example for this one. I observed it while working with a .h file that was conditionally including all sorts of other .h files and having its own defines. The problem occurred with __u8 and u8 types. They were both eventually defined as \"unsigned char\" but cgo considered them different and even got confused in the following case:\r\n\r\n- a C call returned a ``[16]C.__u8``   (checked with a Printf %#v)\r\n\r\n- I created a Go function that took a ``[16]C.__u8`` as the only argument and passed it the value I got above:\r\n``func uuidBytesToString(ub [16]C.__u8) string {...}``\r\n\r\nWhen trying to compile it I got this error message:\r\n``cannot use cHandle.id.b (type [16]C.__u8) as type [16]C.u8 in argument to uuidBytesToString``\r\n\r\nIt thinks that the func signature is ``[16]C.u8`` instead of ``[16]C.__u8``, but even so these 2 types are eventually ``unsigned char``",
	"user": {
		"login": "bits01",
		"id": 10517679,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"created_at": "2015-12-16T04:44:05Z",
	"updated_at": "2015-12-16T19:11:46Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
