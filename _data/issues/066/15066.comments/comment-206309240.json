{
	"id": 206309240,
	"body": "I agree that the library doesn't perform up to spec, since a kex may be requested at any time and should not cause problems during auth.\r\n\r\nHowever, in the unittests, the client and server are both golang.crypto, which should issue only one key exchange, the initial one right before the auth step. Client and server synchronize on both sides, see here \r\n\r\n https://github.com/golang/crypto/blob/master/ssh/client.go#L106\r\n\r\nand here\r\n\r\n https://github.com/golang/crypto/blob/master/ssh/server.go#L197\r\n\r\nI would guess that there is still some sort of race condition lingering that somehow causes msgNewKeys to be read once, but emitted twice from the packetTransport.\r\n\r\nIf you have a platform where this problem reproduces easily, it would be great if you could try to run with the race detector to see if there are any race conditions I missed.",
	"user": {
		"login": "hanwen",
		"id": 31547,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-06T10:56:56Z",
	"updated_at": "2016-04-06T10:56:56Z"
}
