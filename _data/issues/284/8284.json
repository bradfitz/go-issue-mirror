{
	"id": 51287976,
	"number": 8284,
	"state": "closed",
	"title": "go.tools/go/vet: excessive imports",
	"body": "\u003cpre\u003eProfiling vet on a large corpus shows about \u0026gt;10% time spent in syscalls initiated by\ngcimporter.(*parser).next. Many of these reads are avoidable; there is high import\noverlap across packages, particularly within a given project.\n\nConcretely, instrumenting calls to Import (in gcimporter.go) and then running 'go vet'\non camlistore yields these top duplicate imports:\n\n 153 fmt.a\n 147 testing.a\n 120 io.a\n 119 strings.a\n 113 os.a\n 108 bytes.a\n  99 time.a\n  97 errors.a\n  82 io/ioutil.a\n  80 log.a\n  76 sync.a\n  70 strconv.a\n  64 net/http.a\n  56 path/filepath.a\n  51 camlistore.org/pkg/blob.a\n  44 runtime.a\n  39 sort.a\n  39 flag.a\n  35 reflect.a\n  35 net/url.a\n  \nThese 20 account for 1627 of the 2750 import reads.\n\nHacking in a quick LRU that simply caches the raw data in the files cuts 'go vet' user\ntime for camlistore by ~10%. I'm not sure that that is the right long-term approach,\nthough.\u003c/pre\u003e",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "HelpWanted"
		},
		{
			"name": "Performance"
		}
	],
	"comments": 4,
	"closed_at": "2015-01-01T01:50:24Z",
	"created_at": "2014-06-25T00:39:37Z",
	"updated_at": "2016-06-25T01:37:12Z"
}
