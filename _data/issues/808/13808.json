{
	"id": 124678501,
	"number": 13808,
	"state": "closed",
	"title": "encoding/gob: document gob format compatibility promise ",
	"body": "Using ```go1.5```.\r\n\r\nThe ```encoding/gob``` package does a fair job at describing the underlying gob format as it appears on the wire. However, it makes no explicit statements about the stability of the format *across* different versions of Go. For example, will a gob output from ```go1.5``` still be decodable by a hypothetical future ```go1.8```? \r\n\r\nThe docstring for the ```GobEncoder``` type, seems to indicate that this is true given the fact that gobs can be stored:\r\n\u003e Note: Since gobs can be stored permanently, It is good design to guarantee the encoding used by a GobEncoder is stable as the software evolves. For instance, it might make sense for GobEncode to include a version number in the encoding.\r\n\r\nHowever, the fact that gobs can be stored permanently is mentioned nowhere else in the package documentation, except for the linked blog post. (In fact, most of package refers to gobs as a data interchange format to be sent over the network, rather than as a format that is suitable for disk storage.)\r\n\r\nCan the format compatibility promise be more explicit? Perhaps in the Overview section of the package documentation? Obviously, this promise can only be kept if custom GobEncoder and BinaryMarshaler implementations remain stable. However, a promise could be made for types that do not implement those interfaces.",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		}
	],
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-04-22T00:14:53Z",
	"created_at": "2016-01-03T23:33:54Z",
	"updated_at": "2016-04-22T00:14:53Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
