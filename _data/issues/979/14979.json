{
	"id": 143745521,
	"number": 14979,
	"state": "closed",
	"title": "syscall: StartProcess exec status can be lost when fds are permuted",
	"body": "1. What version of Go are you using (`go version`)?\r\nmaster\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\ntried on plan9_arm, linux_amd64, and darwin_amd64\r\n\r\n3. What did you do?\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"os\"\r\n)\r\n\r\nfunc main() {\r\n\tattr := \u0026os.ProcAttr{Files: []*os.File{os.Stdin, os.Stdout, os.Stderr}}\r\n\t_, e := os.StartProcess(\"/no/such/command\", nil, attr)\r\n\tif e != nil {\r\n\t\tprintln(\"1 FAIL: \" + e.Error())\r\n\t} else {\r\n\t\tprintln(\"1 OK\")\r\n\t}\r\n\tattr = \u0026os.ProcAttr{Files: []*os.File{os.Stdin, os.Stderr, os.Stdout}}\r\n\t_, e = os.StartProcess(\"/no/such/command\", nil, attr)\r\n\tif e != nil {\r\n\t\tprintln(\"2 FAIL: \" + e.Error())\r\n\t} else {\r\n\t\tprintln(\"2 OK\")\r\n\t}\r\n}\r\n```\r\n4. What did you expect to see?\r\n```\r\n1 FAIL: fork/exec /no/such/command: ...\r\n2 FAIL: fork/exec /no/such/command: ...\r\n```\r\n5. What did you see instead?\r\n```\r\n1 FAIL: fork/exec /no/such/command: ...\r\n2 OK\r\n```\r\nIn `syscall.forkAndExecInChild`, a comment _don't stomp on pipe_ refers to avoiding a collision between `nextfd` (a temporary file descriptor used for permuting the order of fds for the child) and `pipe` (the file descriptor of the pipe used to report exec status back to the parent).  Unfortunately the code doesn't quite live up to the promise of the comment.\r\n\r\nMoving the referenced code to a more strategic place in the loop body is probably the tidiest correction.  A suggested CL will follow shortly.\r\n",
	"user": {
		"login": "millerresearch",
		"id": 17780869,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-03-29T00:03:33Z",
	"created_at": "2016-03-26T20:12:50Z",
	"updated_at": "2016-03-29T00:03:33Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
