{
	"id": 169208041,
	"number": 16586,
	"state": "closed",
	"title": "Go1.7 sub-test with t.Parallel() using data from loop out of its scope",
	"body": "Hi there,\r\nI was playing with go1.7's sub-tests today and I ran into a not really obvious side-effect of marking sub-test with `t.Parallel()`.\r\n\r\n```go\r\n\r\nfunc TestSubtests(t *testing.T) {\r\n\troutes := []struct {\r\n\t\turl  string\r\n\t\tpath string\r\n\t}{\r\n\t\t{\"http://example.com/1\", \"/1\"},\r\n\t\t{\"http://example.com/2\", \"/2\"},\r\n\t\t{\"http://example.com/3\", \"/3\"},\r\n\t\t{\"http://example.com/4\", \"/4\"},\r\n\t\t{\"http://example.com/5\", \"/5\"},\r\n\t}\r\n\r\n\tt.Run(\"sequential\", func(t *testing.T) {\r\n\t\tfor _, tt := range routes {\r\n\t\t\tt.Run(tt.url, func(t *testing.T) {\r\n\t\t\t\tu, _ := url.Parse(tt.url)\r\n\t\t\t\tif u.Path != tt.path {\r\n\t\t\t\t\tt.Errorf(\"expected %v, got %v\", tt.path, u.Path)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t})\r\n\r\n\tt.Run(\"parallel\", func(t *testing.T) {\r\n\t\tfor _, tt := range routes {\r\n\t\t\tt.Run(tt.url, func(t *testing.T) {\r\n\r\n\t\t\t\tt.Parallel() // \u003c== trying to set Parallel(), while using tt from the range loop\r\n\r\n\t\t\t\tu, _ := url.Parse(tt.url)\r\n\t\t\t\tif u.Path != tt.path {\r\n\t\t\t\t\tt.Errorf(\"expected %v, got %v\", tt.path, u.Path)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t})\r\n}\r\n```\r\n\r\n```\r\n$ go test -v\r\n--- PASS: TestSubtests (0.00s)\r\n    --- PASS: TestSubtests/sequential (0.00s)\r\n        --- PASS: TestSubtests/sequential/http://example.com/1 (0.00s)\r\n        \tmain_test.go:28: tested /1\r\n        --- PASS: TestSubtests/sequential/http://example.com/2 (0.00s)\r\n        \tmain_test.go:28: tested /2\r\n        --- PASS: TestSubtests/sequential/http://example.com/3 (0.00s)\r\n        \tmain_test.go:28: tested /3\r\n        --- PASS: TestSubtests/sequential/http://example.com/4 (0.00s)\r\n        \tmain_test.go:28: tested /4\r\n        --- PASS: TestSubtests/sequential/http://example.com/5 (0.00s)\r\n        \tmain_test.go:28: tested /5\r\n\r\n    --- PASS: TestSubtests/parallel (0.00s)\r\n        --- PASS: TestSubtests/parallel/http://example.com/1 (0.00s)\r\n        \tmain_test.go:48: tested /5\r\n        --- PASS: TestSubtests/parallel/http://example.com/4 (0.00s)\r\n        \tmain_test.go:48: tested /5\r\n        --- PASS: TestSubtests/parallel/http://example.com/5 (0.00s)\r\n        \tmain_test.go:48: tested /5\r\n        --- PASS: TestSubtests/parallel/http://example.com/3 (0.00s)\r\n        \tmain_test.go:48: tested /5\r\n        --- PASS: TestSubtests/parallel/http://example.com/2 (0.00s)\r\n        \tmain_test.go:48: tested /5\r\n\r\n                                ^ always \"tested /5\"\r\n```\r\n\r\nThis bahavior was not obvious to me from the beginning, since all of my tests still passed :) But after a while I figured there was a concurrency issue similar to this:\r\n```go\r\n\tfor _, tt := range routes {\r\n\t\tgo func() {\r\n\t\t\tfmt.Println(tt.url) // Not guaranteed which item will be stored in tt during the goroutine execution.\r\n\t\t}()\r\n\t}\r\n```\r\nwhich is easy to solve by passing the value onto goroutine's stack:\r\n```go\r\n\tfor _, tt := range routes {\r\n\t\tgo func(url string) {\r\n\t\t\tfmt.Println(url)\r\n\t\t}(tt.url)\r\n\t}\r\n```\r\n\r\n### Question\r\n\r\nI'm trying to figure out a fix (similar to passing data onto goroutine's stack) for the above Parallel sub-test. Any suggestions?\r\n\r\n### Documentation suggestion\r\n\r\nImho, the `t.Parallel()` behavior should be documented better, especially in the context of sub-tests + table driven tests.",
	"user": {
		"login": "VojtechVitek",
		"id": 139342,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2016-08-03T20:04:53Z",
	"created_at": "2016-08-03T19:03:28Z",
	"updated_at": "2016-08-03T21:07:59Z"
}
