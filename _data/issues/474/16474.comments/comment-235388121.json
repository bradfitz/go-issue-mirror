{
	"id": 235388121,
	"body": "He said that `io.ReaderFrom` should have a buffer argument that should be ignored if it is not needed or nil. That cannot happen without breaking Go 1 Compatibility. Perhaps it should be better documented but the whole point of `io.ReaderFrom` is to not need a buffer. To write it directly like say `sendfile(2)`.\r\n\r\nFurthermore, a lot of code relies on the`io.Copy` functions using the `io.ReaderFrom` or `io.WriterTo` interfaces to optimize. Its documented behavior that `io.CopyBuffer` behaves identically to `io.Copy` except it stages through the provided buffer rather than allocating a temporary one. By changing `io.CopyBuffer` we break this documented behaviour that go programs could rely on.\r\n\r\nI definitely agree though, I find it unintuitive that `io.CopyBuffer` doesn't always use the passed buffer, but because `io.CopyBuffer` using `io.ReaderFrom` or `io.WriterTo` is documented behavior, it breaks the Go 1 compatibility promise.",
	"user": {
		"login": "nhooyr",
		"id": 10180857,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-26T20:05:39Z",
	"updated_at": "2016-07-26T20:26:27Z"
}
