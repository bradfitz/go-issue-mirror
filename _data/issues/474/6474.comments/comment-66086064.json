{
	"id": 66086064,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eI have a struct with many fields in it:\n\ntype TransactionRequest struct {\n....\n}\n\nSome are strings, some are other structs, etc...\n\nInside of MarshalXML if I do this (where \"tr\" is an instance of \"TransactionRequest\"):\n\nreturn e.EncodeElement(tr, start)\n\n\"EncodeElement\" causes the same MarshalXML function to be called recursively. What I\nwant to do is change \"start\" (add attributes, change the name, etc...) but marshal the\nfields normally. In order to do this, without statically/manually marshaling each field,\nI have to change the type, where \"_TransactionRequest\" is just a type from\n\"TransactionRequest\":\n\nreturn e.EncodeElement(_TransactionRequest(tr), start)\n\nThis prevents the recursion, but requires a new type to reflect.\n\nIdeally what I would like to do is simply call EncodeElement like this and not have it\ncall MarshalXML again:\n\nreturn e.EncodeElement(tr, start)\n\nOr have some way of telling it to marshal just the fields inside:\n\ne.EncodeToken(start) // \u0026lt;TransactionResponse ...\u0026gt;\ne.EncodeBody(tr) // ... \u0026lt;field\u0026gt;...\u0026lt;/field\u0026gt;...\ne.EncodeToken(EndElement{start.Name}); // \u0026lt;/TransactionResponse\u0026gt;\u003c/pre\u003e",
	"user": {
		"login": "lukescott",
		"id": 486224,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-01T17:20:48Z",
	"updated_at": "2014-12-22T06:29:05Z"
}
