{
	"id": 51278385,
	"number": 1849,
	"state": "closed",
	"title": "Automatic parameter escaping in syscall.StarProcess on windows is too restrictive",
	"body": "\u003cpre\u003eWindows parameters are transmitted as a single string and it is the responsibility of\neach program to do it's own parameter parsing.\n\nMicrosoft's C startup code (\u003ca href=\"http://msdn.microsoft.com/en-us/library/ms880421)\"\u003ehttp://msdn.microsoft.com/en-us/library/ms880421)\u003c/a\u003e defines a\nstandard way for C programs to split the command line into separate arguments and go's\nsyscall.StartProcess does the correct escaping for those cases.\n\nHowever, some programs - and most notably the cmd.exe shell - do their own command line\nparameter parsing. As an example, if passed the following arguments :\n  cmd /s /c \u0026quot;cd \u0026quot;C:\\Program Files\u0026quot; \u0026amp;\u0026amp; dir\u0026quot;\nthen cmd.exe will parse its arguments as follows :\n  /s\n  /c\n  cd \u0026quot;C:\\Program Files\u0026quot; \u0026amp;\u0026amp; dir\n\nSee \u003ca href=\"http://ss64.com/nt/cmd.html\"\u003ehttp://ss64.com/nt/cmd.html\u003c/a\u003e (see section on /C or /K flags which describes the logic\nused to process quote (\u0026quot;) characters).\n\nThe bug is that there is currently no way to prevent escaping of command line parameters\nand therefore no way to execute the previous command from syscall.StartProcess because\nthe double quotes in the last argument are automatically escaped...\u003c/pre\u003e",
	"user": {
		"login": "vanackere",
		"id": 800632,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 6,
	"closed_at": "2014-12-08T10:10:11Z",
	"created_at": "2011-05-19T13:57:30Z",
	"updated_at": "2016-06-24T19:29:31Z"
}
