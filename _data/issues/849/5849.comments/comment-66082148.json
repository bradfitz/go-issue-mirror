{
	"id": 66082148,
	"body": "\u003ca id=\"c14\"\u003e\u003c/a\u003eComment 14:\n\n\u003cpre\u003eAgreed, but...\n[dons pedant hat]\n...an attribute grammar is an analytical tool, not an implementation\ntechnique.  Same goes for type inference rules.\nEfficient implementations may resemble neither.\n\n\nOf course, as I don't have one. :)\n\nA simpler way to say it is that the type of an expression depends upon\n(a) its syntax;\n(b) the name-\u003etype mapping in its environment; and\n(c) perhaps, the type that is \"wanted\" by its enclosing context.\n\n(c) is a somewhat non-obvious yet critical fact of Go's type system, and no\nmatter what implementation you choose (or mental model you have), it will\nbe wrong if it doesn't capture it.\n\n\n\nRocky wrote:\n\ntracked independently? Namely:\n\ndiscussion, the intent of the spec has been clarified, even if the spec\ncould be phrased better. (And I agree, the intent could be made clearer,\neven if only by giving that how that specific example done in the\ndiscussion above.)\n\nI think I've said enough about this. :)\n\ntypes have been assigned in this particular case.\n\nThis was fixed in CL 088133ed831d.\n\nconversions on int-\u003eunit-\u003euint64 in this specific case.\n\nI've just mailed out \u003ca href=\"https://golang.org/cl/11011043\"\u003ehttps://golang.org/cl/11011043\u003c/a\u003e to fix this.\u003c/pre\u003e",
	"user": {
		"login": "adonovan",
		"id": 5658175,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-07-08T21:10:40Z",
	"updated_at": "2014-12-08T10:32:09Z"
}
