{
	"id": 66082140,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003e\u0026gt; There may be a bug in go/types or elsewhere, ...\n\ngo/types infers an 'untyped' type for the constant 1, and for many other constant\nexpressions for which I think a 'typed' type is appropriate.  \n\n        const c = 2\n        var x uint\n        println(uint64(c \u0026lt;\u0026lt; x))\n\n        t0 = convert uint64 \u0026lt;- uint (0:uint)                             uint64\n        t1 = 2:untyped integer \u0026lt;\u0026lt; t0                            untyped integer   !!!\n        t2 = convert uint64 \u0026lt;- untyped integer (t1)                      uint64\n        t3 = println(t2, nil:[]interface{})                                  ()\n\n\u0026gt; ... the spec is reasonably clear about the type of 1 here.\n\nIt's clear once the reader understands that type information flows both top-down and\nbottom-up, but this is an implicit assumption of the spec. Â It would be good to state\nthis explicitly and to rephrase the sentence (\"If the left operand...\") with reference\nto it.  Otherwise it sounds like the type of the constant changes from untyped to typed,\nwhich is a confusingly imperative description of type-checking.\u003c/pre\u003e",
	"user": {
		"login": "adonovan",
		"id": 5658175,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-07-08T18:28:10Z",
	"updated_at": "2014-12-22T06:26:32Z"
}
