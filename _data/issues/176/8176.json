{
	"id": 51287798,
	"number": 8176,
	"state": "closed",
	"title": "cmd/gc: Probably memory corruption when taking address of a type switch variable.",
	"body": "\u003cpre\u003eWhat does 'go version' print?\n\ngo version go1.3rc1 linux/amd64\n----\nchangeset:   20129:96c74cf6dc10\nbranch:      release-branch.go1.3\ntag:         tip\nparent:      20127:8e4d4d247e38\nuser:        Russ Cox \u0026lt;rsc@golang.org\u0026gt;\ndate:        Fri Jun 06 22:07:32 2014 -0400\nsummary:     [release-branch.go1.3] runtime: fix panic stack during runtime.Goexit\nduring panic\n----\nlinux, amd64\n\n\nWhat steps reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n\n1.\n\nCopy source from \u003ca href=\"http://play.golang.org/p/vpB0om-M3x\"\u003ehttp://play.golang.org/p/vpB0om-M3x\u003c/a\u003e to main.go\n\n2.\n\n$ go run main.go\n\nWhat happened?\n\nOutput is:\n\u0026amp;{0}\n\nWhat should have happened instead?\n\n\u0026amp;{42}\n\nPlease provide any additional information below.\n\nWorks as expected with release (1.2.2) and in the playground. The zero of the incorrect\noutput is accidental. The corruption in the non-minimized real code case gives values\nlike eg. 140641528417568. Might be a lack of copying the value and then returning\nwhatever garbage was left on the stack (hypothesis).\u003c/pre\u003e",
	"user": {
		"login": "cznic",
		"id": 729580,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"closed_at": "2014-12-08T10:45:21Z",
	"created_at": "2014-06-10T12:26:47Z",
	"updated_at": "2016-06-25T01:36:10Z",
	"milestone": {
		"id": 1067211,
		"number": 17,
		"title": "Go1.3"
	}
}
