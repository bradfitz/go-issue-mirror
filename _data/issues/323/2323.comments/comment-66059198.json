{
	"id": 66059198,
	"body": "\u003ca id=\"c21\"\u003e\u003c/a\u003eComment 21:\n\n\u003cpre\u003eI did some more research on this issue, particularly the issue reported in comment #20.\nI've talked to the author of that blog post, and cgo is NOT used.\n\nWindows shared libraries are not relocatable, if the dynamic linker can't load it at the\npreferred base address specified in the PE header, it has to rebase it. Apart from\nslowing loading of binaries, rebasing has the side effect of not allowing that dubious\nbenefit dynamic linking fans brag about -- it's not possible to have a single copy of a\nshared object mapped in every process.\n\nWindows tries really really hard to avoid rebasing, for obvious reasons. All the system\nDLLs are crafted with a base address close to the 2GB mark in a way that rebasing will\nnever be necessary. Also, by default, the compiler will generate shared objects with a\nbase address far from the space system DLLs are using, so 3rd party DLLs will not ask\nfor the same part of the address space as the system DLLs.\n\n  \u003edumpbin /headers KernelBase.dll | findstr /C:\"image base\"\n          7D850000 image base (7D850000 to 7D895FFF)\n\nWe can see that KernelBase.dll prefers to be loaded at 0x7D850000, but it rebased at\n0x0DCE0000. This is rather unusual in the Windows world. It's very common for 3rd party\nDLLs to be rebased, but it's unusual for system DLLs to be rebased. Even if a 3rd party\nDLL asks for the same address space reservation as a system DLL, the dynamic loader will\nrather rebase the 3rd party DLL, and map in the process the same system DLL used by\nother processes.\n\nIf a system DLL was rebased, it means it was rebased in the first process of that\nsession (a session is a Windows thing irrelevant to the discussion), and the rebased\ncopy is shared between all processes in that session. It has to be the first process,\nbecause it's the only process the system DLL has not been loaded yet.\n\nIf someone, accidentally or not, forced a system DLL to be rebased in the first process,\nthat someone injected a DLL in the first process where the system one wants to be. This\nis a way of doing user mode hooking, generally by malware, but it's also done by\npurposely legitimate \"security\" software. In fact, before Windows Vista, the only\nsanctioned way of doing registry monitoring, was through a user mode hook!\n\nI don't care about \"fixing\" Go to run with malware, but I do care about cgo, which has\nthe same effect (and is the purpose of this issue report anyway). We could make the\naddress space reservation in the PE header, but it pains me that it would require a\ndifferent mechanism for Windows and non-Windows. It also wouldn't be such a great idea\nif we ever get shared libraries, but I don't care about that crap the slightest.\u003c/pre\u003e",
	"user": {
		"login": "4ad",
		"id": 1331747,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-04-09T15:11:49Z",
	"updated_at": "2014-12-08T10:12:29Z"
}
