{
	"id": 51284198,
	"number": 5797,
	"state": "closed",
	"title": "runtime: panic during panic during deadlock detection",
	"body": "\u003cpre\u003e1. Run the program in \u003ca href=\"http://play.golang.org/p/1BGCSGhqfH\"\u003ehttp://play.golang.org/p/1BGCSGhqfH\u003c/a\u003e with GOMAXPROCS \u0026gt; 0 (not on\nthe playground)\n\nWhat is the expected output?\nA normal panic showing what all the goroutines are doing\n\nWhat do you see instead?\n\u0026quot;panic during panic\u0026quot; and truncated output.\n\nObserved at recent head:\ngo version devel +c96951f239c0 Wed Jun 26 13:59:25 2013 -0700 linux/amd64\nbut it works correctly at 1.1.1\nI bisected this regression to 916cb45c0d5f (runtime: add lr, ctxt, ret to Gobuf)\n\nBackground:\nI set up a simple work queue with one channel feeding some goroutines, which write their\nresults to another channel. Using a high GOMAXPROX I expected to see the program using\nall the cpu, but found that cpu usage starts high but quickly drops down to using one\ncpu. It seemed like there was some deadlock, so I told it to panic halfway through, but\npanicking failed...\u003c/pre\u003e",
	"user": {
		"login": "edre",
		"id": 1291499,
		"type": "User",
		"site_admin": false
	},
	"comments": 10,
	"closed_at": "2014-12-08T10:31:47Z",
	"created_at": "2013-06-26T22:45:42Z",
	"updated_at": "2016-06-24T22:43:31Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
