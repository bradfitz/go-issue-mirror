{
	"id": 51285430,
	"number": 6604,
	"state": "closed",
	"title": "spec: be clear about the meaning of _ methods in interfaces",
	"body": "\u003cpre\u003eThe spec at the moment permits _ methods in signatures, like:\n\ntype A interface{\n   _()\n}\n\nand such interfaces cannot be implemented, per a prior assessment of this problem (see\n\u003ca href=\"https://golang.org/issue/5691\"\u003eissue #5691\u003c/a\u003e). That said, there are open questions related to this that are unclear from\nthe spec. For instance:\n\n1) Given A, and a type B defined like A, and variables a, b of type A, and B,\nrespectively, is: a = b permitted at compile-time? That is, are type A and B identical?\n\n2) Given A, and a type B interface { _(); _() } with accordingly typed variables a, b,\nis: a = b permitted? That is, are type A and B identical now?\n\nThere are several ways we can fix this in the spec. Here are two possibilities:\n\n1) Disallow _ methods in interfaces altogether since it's never possible to implement\nsuch an interface, never possible to call the _ method, and the contents of such\nvariables is always nil. Cons: we permit _ identifiers everywhere else.\n\n2a) Permit _ methods in interfaces but any interface containing (at least) one _ method\nis different from any other interface type unless they both have the same name.\n\n2b) Permit _ methods in interfaces but any interface containing (at least) one _ method\nis different from any other interface type including itself (sort of the NaN of\ninterfaces: NaI).\n\n3) Maintain the _ methods in the method set, every single one of them. So interface\ntypes that have the same non-blank methods are identical only if they have the same _\nmethods. That seems like a bad idea since it would require comparing signatures, and\nalso makes compiler internal sorting very complicated.\n\nI am leaning towards 2a or 2b. 2b seems cleaner but precludes an easy pointer comparison\nto check for type equality w/o further checking that no interface with _ method is\ninvolved.\n\nThis is an esoteric corner case but affects how (compiler-) internally method sets are\nrepresented and sorted.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		},
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 11,
	"closed_at": "2014-12-08T10:36:33Z",
	"created_at": "2013-10-16T22:12:03Z",
	"updated_at": "2016-06-25T01:20:47Z"
}
