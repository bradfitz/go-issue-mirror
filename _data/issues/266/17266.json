{
	"id": 179831148,
	"number": 17266,
	"state": "closed",
	"title": "os: update signal mutex critical region",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\ngo version go1.7 darwin/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/mike/workplace/GOPATH\"\r\nGORACE=\"\"\r\nGOROOT=\"/Users/mike/workplace/go\"\r\nGOTOOLDIR=\"/Users/mike/workplace/go/pkg/tool/darwin_amd64\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/z4/vplvdvkx6fsfv7z6w8pzfqnr0000gn/T/go-build180986648=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\n\r\n### What did you do?\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n\r\nnone\r\n\r\n### What did you expect to see?\r\n\r\nsignal mutex locks Kill syscall only.\r\n\r\n### What did you see instead?\r\n\r\nsignal mutex lock process done flag also, but it is atomic, can be checked first.\r\n\r\n\r\nI just find , in os package `func (p *Process) signal(sig Signal) error`, `p.done()` is in the `p.sigMu` protection, but in fact `p.done()` is atomic, place it before `p.sigMu` lock, signal call to done process can return more quickly.\r\n\r\n\r\n",
	"user": {
		"login": "ggaaooppeenngg",
		"id": 4769989,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-09-28T17:33:00Z",
	"created_at": "2016-09-28T17:08:30Z",
	"updated_at": "2016-09-28T17:33:00Z"
}
