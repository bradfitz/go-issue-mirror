{
	"id": 66086069,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eThe behaviour of sFn seems consistent with the behaviour of iFn logically, I just wasn't\nsure if it was expected based on the wording of the spec. I was checking through the\nspec to see how the term \"receiver\" was used because of a topic I posted to the mailing\nlist, and happened upon this.\n\nIt already says that x in x.M will be dereferenced to match the receiver of the\nfunction. Dereferencing just doesn't normally mean traversing anonymous fields. I\nsuppose the current behaviour could be justified using the \"x.f is shorthand for\n(*x.A).f\" rule, but nowhere else is the literal expansion of this \"shorthand\"\nsemantically significant, that I can think of. If this is the basis for the current\nbehaviour, then it bears mentioning along with auto-reference/dereference, especially\nsince auto-dereference is just a special case of it.\n\nI didn't think it was worth mentioning, but the other behaviour (observing the change to\n*t rather than not) is observed when an interface is involved:\n\u003ca href=\"http://play.golang.org/p/993ZmY8324\"\u003ehttp://play.golang.org/p/993ZmY8324\u003c/a\u003e\nBut I was fairly certain this was expected based on both the language spec and how\ninterfaces normally behave as an opaque barrier between static and dynamic dispatch of\nmethods.\u003c/pre\u003e",
	"user": {
		"login": "stevenblenkinsop",
		"id": 3118803,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-25T03:52:21Z",
	"updated_at": "2014-12-08T10:35:45Z"
}
