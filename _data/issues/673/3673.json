{
	"id": 51280975,
	"number": 3673,
	"state": "closed",
	"title": "GC misbehaviour on windows/386",
	"body": "by **webmaster@webmaster.ms**:\n\n\u003cpre\u003eI use GC 1.0.1 from \u003ca href=\"http://code.google.com/p/go/downloads/list\"\u003ehttp://code.google.com/p/go/downloads/list\u003c/a\u003e\nWindows 2008 Server\n\nTestcase:\n===\npackage main\n\nimport (\n  \u0026quot;fmt\u0026quot;\n  \u0026quot;runtime\u0026quot;\n)\n\n\nfunc main() {\n  for i:=0; i\u0026lt;10000; i++ {\n    buf := make([]byte, 0x100000)\n    buf[0] = 0 // supress warning\n\n    var ms runtime.MemStats\n    runtime.ReadMemStats(\u0026amp;ms)\n    fmt.Println(float64(ms.Alloc)/1024.0/1024.0)\n\n    //if (ms.Alloc \u0026gt; 200*1024*1024) { runtime.GC() }\n  }\n}\n===\n\nThis works well compiled with 6g, consuming 1-2Mb of memory.\nBut being compiled with 8g it goes to \u0026quot;out of memory\u0026quot; very quickly.\n\nAdding explicit runtime.GC() call makes memory consumption fluctuate between 120Mb and\n200Mb (yes, 120Mb just after runtime.GC() call)\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:19:22Z",
	"created_at": "2012-05-28T16:43:07Z",
	"updated_at": "2016-06-24T22:19:36Z"
}
