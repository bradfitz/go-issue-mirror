{
	"id": 170689285,
	"number": 16673,
	"state": "open",
	"title": "database/sql: add API and give it some love",
	"body": "The database/sql API works well in many cases and the simplicity is extremely appealing. However is has been noted that if done again it wouldn't be in the std lib (maybe in an \"x\" repo).\r\n\r\nHere are some of the major issues with `database/sql`:\r\n * No context support / difficult to add in now (easy to leak connections). #15123\r\n * No multiple result set support (sql server, postgresql, my sql, oracle use this). #12382 \r\n * Unable to specify a transaction level (this is important for certain cases).\r\n * No support for named input parameters (mature database tables can get wide, counting columns has huge potential to introduce bugs and reduces clarity). #12381 \r\n * No support for custom types #13567 #16235\r\n\r\nHere are some of the minor issues with `database/sql`:\r\n * Unable to get result database types. #16652\r\n * Unable to get a single connection from the pool (needed for out of transaction queries but retain a temp tables that are specific to a session).\r\n * Unable to set parameter database types (can be important, can result in type mismatch issues). #12383 \r\n * No API for bulk insert operations (rdbms often have an alternate API for this). #5171\r\n * No Savepoint / Rollback To API (often suggested in place of nested transactions: sql server, postgresql, my sql). #7898 \r\n * No support for output parameters (often used esp when a shop requires all logic in stored procs / functions).\r\n * Developers often want type `string` from database types `varchar` and `text`, useful to be able to have as a default (with option to get as bytes to reduce allocs if desired).\r\n * Cannot stream out large values (many databases support 1GB values, want to stream them out in an io.Writer). (possible tie in with #13567 )\r\n\r\nSome of these may have been omitted by design, some by oversight, and some because the API was not available yet (context). However it is possible to make a `database/sql` compatible API from a more powerful API (I've done this). In this case I'm strongly favor making a more powerful API available. Due to fundamental issues with adding a context to the existing API, I propose freezing the `database/sql` package and moving development to an \"golang.org/x\" repo.\r\n\r\n---\r\n\r\nI would want to survey the developer community before proceeding. I also have a proposed API I am developing https://godoc.org/github.com/kardianos/rdb which is an evolution of an API I have in production today.\r\n\r\nI would be interested in hearing feedback from the go team (cc @bradfitz ) and others in the community who connect to rdbms (cc @kostya-sh @nightlyone @realpg @joegrasse @asambeka @kirubasankars )\r\n",
	"user": {
		"login": "kardianos",
		"id": 755121,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "kardianos",
		"id": 755121,
		"type": "User",
		"site_admin": false
	},
	"comments": 27,
	"created_at": "2016-08-11T16:32:28Z",
	"updated_at": "2016-09-26T11:25:25Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	},
	"reactions": {
		"total_count": 19,
		"+1": 19
	}
}
