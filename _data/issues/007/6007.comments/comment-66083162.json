{
	"id": 66083162,
	"body": "\u003ca id=\"c16\"\u003e\u003c/a\u003eComment 16:\n\n\u003cpre\u003e\u003e Where is it documented?\n\nI have not looked at the documentation, but:\n1. it is how it works now, so people may be relying on it (even if it's not explicitly\ndocumented).\n2. Go does not have a notion of monotonic time, so it's reasonable to infer that\neverything relates to real time. E.g. Russ's example in #10 should print something close\nto 10min, rather than arbitrary value.\nProbably we may try to change it, but we must be very careful.\n\nTo make it clear, I agree that it's not for Go1.2. This requires very serious changes.\n\nOn second though (I think I already described it in the golang-dev thread),\ntime.Sleep(10*time.Minute) can not possibly reliably sleep till some real time instant\n(e.g. midnight). A function that sleeps till some real time instant must necessary\naccept time instant (i.e. time.Time), otherwise it's broken if time change happens\nbefore runtime converts time.Duration to time.Time.\nSo, Russ, your example in #10 prints random value even now. And of course time can be\nchanges after time.Sleep returns, but before you query time.Now the second time.\n\n\u003eThe software had to use monotonic clocks in order to be robust and not break during\nwall time changes.\n\nThis is a good idea in all other contexts as well.\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-15T22:08:52Z",
	"updated_at": "2014-12-08T10:33:02Z"
}
