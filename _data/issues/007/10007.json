{
	"id": 58998503,
	"number": 10007,
	"state": "open",
	"title": "runtime: add asm version of cmpstring and bytes路Compare for ppc64",
	"body": "Currently only amd64 and 386 have asm versions of `cmpstring` and `bytes路Compare`. These can be important for performance (see e.g. #10000). The compiler generates ok but not amazing code for these. Here's the ARM output for `cmpstring`:\r\n\r\n```\r\n\"\".cmpstring t=1 size=268 value=0 args=0x14 locals=0x0\r\n\t0x0000 00000 (src/runtime/noasm.go:13)\tTEXT\t\"\".cmpstring+0(SB),0,$0-20\r\n\t0x0000 00000 (src/runtime/noasm.go:13)\tMOVW\t8(R10),R1\r\n\t0x0004 00004 (src/runtime/noasm.go:13)\tCMP\tR1,R13,\r\n\t0x0008 00008 (src/runtime/noasm.go:13)\tMOVW.LS\tR14,R3\r\n\t0x000c 00012 (src/runtime/noasm.go:13)\tCALL.LS\t,runtime.morestack_noctxt(SB)\r\n\t0x0010 00016 (src/runtime/noasm.go:13)\tBLS\t,0\r\n\t0x0014 00020 (src/runtime/noasm.go:13)\tMOVW.W\tR14,-4(R13)\r\n\t0x0018 00024 (src/runtime/noasm.go:13)\tFUNCDATA\t$0,gclocals路f271231f400e778e0f59be25f7a26a56+0(SB)\r\n\t0x0018 00024 (src/runtime/noasm.go:13)\tFUNCDATA\t$1,gclocals路3280bececceccd33cb74587feedb1f9f+0(SB)\r\n\t0x0018 00024 (src/runtime/noasm.go:13)\tMOVW\t$0,R0\r\n\t0x001c 00028 (src/runtime/noasm.go:14)\tMOVW\t\"\".s1+4(FP),R7\r\n\t0x0020 00032 (src/runtime/noasm.go:15)\tMOVW\t\"\".s2+12(FP),R3\r\n\t0x0024 00036 (src/runtime/noasm.go:15)\tCMP\tR7,R3,\r\n\t0x0028 00040 (src/runtime/noasm.go:15)\tBGE\t,264\r\n\t0x002c 00044 (src/runtime/noasm.go:16)\tMOVW\t\"\".s2+12(FP),R7\r\n\t0x0030 00048 (src/runtime/noasm.go:18)\tMOVW\t$0,R3\r\n\t0x0034 00052 (src/runtime/noasm.go:18)\tMOVW\tR3,R4\r\n\t0x0038 00056 (src/runtime/noasm.go:18)\tCMP\tR7,R3,\r\n\t0x003c 00060 (src/runtime/noasm.go:18)\tBGE\t$0,196\r\n\t0x0040 00064 (src/runtime/noasm.go:19)\tMOVW\t$\"\".s2+8(FP),R0\r\n\t0x0044 00068 (src/runtime/noasm.go:19)\tMOVW\tR3,R1\r\n\t0x0048 00072 (src/runtime/noasm.go:19)\tMOVW\t4(R0),R2\r\n\t0x004c 00076 (src/runtime/noasm.go:19)\tCMP\tR2,R3,\r\n\t0x0050 00080 (src/runtime/noasm.go:19)\tBLO\t$1,92\r\n\t0x0054 00084 (src/runtime/noasm.go:19)\tPCDATA\t$0,$0\r\n\t0x0054 00084 (src/runtime/noasm.go:19)\tCALL\t,runtime.panicindex(SB)\r\n\t0x0058 00088 (src/runtime/noasm.go:19)\tUNDEF\t,\r\n\t0x005c 00092 (src/runtime/noasm.go:19)\tMOVW\t0(R0),R0\r\n\t0x0060 00096 (src/runtime/noasm.go:19)\tMOVBU\tR3\u003c\u003c0(R0),R5\r\n\t0x0064 00100 (src/runtime/noasm.go:19)\tMOVW\t$\"\".s1+0(FP),R0\r\n\t0x0068 00104 (src/runtime/noasm.go:19)\tMOVW\tR3,R1\r\n\t0x006c 00108 (src/runtime/noasm.go:19)\tMOVW\t4(R0),R2\r\n\t0x0070 00112 (src/runtime/noasm.go:19)\tCMP\tR2,R3,\r\n\t0x0074 00116 (src/runtime/noasm.go:19)\tBLO\t$1,128\r\n\t0x0078 00120 (src/runtime/noasm.go:19)\tPCDATA\t$0,$0\r\n\t0x0078 00120 (src/runtime/noasm.go:19)\tCALL\t,runtime.panicindex(SB)\r\n\t0x007c 00124 (src/runtime/noasm.go:19)\tUNDEF\t,\r\n\t0x0080 00128 (src/runtime/noasm.go:19)\tMOVW\t0(R0),R0\r\n\t0x0084 00132 (src/runtime/noasm.go:19)\tMOVBU\tR3\u003c\u003c0(R0),R6\r\n\t0x0088 00136 (src/runtime/noasm.go:19)\tMOVBU\tR5,R5\r\n\t0x008c 00140 (src/runtime/noasm.go:20)\tCMP\tR5,R6,\r\n\t0x0090 00144 (src/runtime/noasm.go:20)\tBHS\t,160\r\n\t0x0094 00148 (src/runtime/noasm.go:21)\tMOVW\t$-1,R0\r\n\t0x0098 00152 (src/runtime/noasm.go:21)\tMOVW\tR0,\"\".~r2+16(FP)\r\n\t0x009c 00156 (src/runtime/noasm.go:21)\tMOVW.P\t4(R13),R15\r\n\t0x00a0 00160 (src/runtime/noasm.go:23)\tMOVBU\tR6,R4\r\n\t0x00a4 00164 (src/runtime/noasm.go:23)\tMOVBU\tR5,R2\r\n\t0x00a8 00168 (src/runtime/noasm.go:23)\tCMP\tR2,R4,\r\n\t0x00ac 00172 (src/runtime/noasm.go:23)\tBLS\t,188\r\n\t0x00b0 00176 (src/runtime/noasm.go:24)\tMOVW\t$1,R0\r\n\t0x00b4 00180 (src/runtime/noasm.go:24)\tMOVW\tR0,\"\".~r2+16(FP)\r\n\t0x00b8 00184 (src/runtime/noasm.go:24)\tMOVW.P\t4(R13),R15\r\n\t0x00bc 00188 (src/runtime/noasm.go:18)\tADD\t$1,R3,R3\r\n\t0x00c0 00192 (src/runtime/noasm.go:18)\tJMP\t,52\r\n\t0x00c4 00196 (src/runtime/noasm.go:27)\tMOVW\t\"\".s1+4(FP),R3\r\n\t0x00c8 00200 (src/runtime/noasm.go:27)\tMOVW\t\"\".s2+12(FP),R4\r\n\t0x00cc 00204 (src/runtime/noasm.go:27)\tCMP\tR4,R3,\r\n\t0x00d0 00208 (src/runtime/noasm.go:27)\tBGE\t,224\r\n\t0x00d4 00212 (src/runtime/noasm.go:28)\tMOVW\t$-1,R0\r\n\t0x00d8 00216 (src/runtime/noasm.go:28)\tMOVW\tR0,\"\".~r2+16(FP)\r\n\t0x00dc 00220 (src/runtime/noasm.go:28)\tMOVW.P\t4(R13),R15\r\n\t0x00e0 00224 (src/runtime/noasm.go:30)\tMOVW\t\"\".s1+4(FP),R2\r\n\t0x00e4 00228 (src/runtime/noasm.go:30)\tMOVW\t\"\".s2+12(FP),R3\r\n\t0x00e8 00232 (src/runtime/noasm.go:30)\tCMP\tR3,R2,\r\n\t0x00ec 00236 (src/runtime/noasm.go:30)\tBLE\t,252\r\n\t0x00f0 00240 (src/runtime/noasm.go:31)\tMOVW\t$1,R0\r\n\t0x00f4 00244 (src/runtime/noasm.go:31)\tMOVW\tR0,\"\".~r2+16(FP)\r\n\t0x00f8 00248 (src/runtime/noasm.go:31)\tMOVW.P\t4(R13),R15\r\n\t0x00fc 00252 (src/runtime/noasm.go:33)\tMOVW\t$0,R0\r\n\t0x0100 00256 (src/runtime/noasm.go:33)\tMOVW\tR0,\"\".~r2+16(FP)\r\n\t0x0104 00260 (src/runtime/noasm.go:33)\tMOVW.P\t4(R13),R15\r\n\t0x0108 00264 (src/runtime/noasm.go:18)\tJMP\t,48\r\n```\r\n\r\nAt first glance, there are extraneous `panicindex` calls, and we could be doing 32 bit comparisons instead of 8 bit comparisons as we loop. And I'm sure it could be optimized further.\r\n\r\ncc @davecheney \r\n\r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		}
	],
	"comments": 3,
	"created_at": "2015-02-26T00:49:17Z",
	"updated_at": "2016-09-26T19:25:14Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
