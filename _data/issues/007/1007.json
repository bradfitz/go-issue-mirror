{
	"id": 51277232,
	"number": 1007,
	"state": "closed",
	"title": "(big.*Int).Or gives runtime error on differently sized positive big.*Int's and test cases",
	"body": "by **ttlaak**:\n\n\u003cpre\u003eBefore filing a bug, please check whether it has been fixed since\nthe latest release: run \u0026quot;hg pull -u\u0026quot; and retry what you did to\nreproduce the problem.  Thanks.\n\nWhat steps will reproduce the problem?\n1. Saving the attached file bigbugor.go\npackage main\n\nimport \u0026quot;big\u0026quot;\n\nfunc main() {\n        k := big.NewInt(0)\n        l := big.NewInt(1)\n        k.SetString(\n                \u0026quot;100000000000000000000000000000000\u0026quot;+\n                \u0026quot;00000000000000000000000000000000\u0026quot;+\n                \u0026quot;00000000000000000000000000000000\u0026quot;+\n                \u0026quot;00000000000000000000000000000000\u0026quot;, 16) // 2^512\n        k.Or(k, l) // panic: runtime error: index out of range\n}\n2. Compiling and running it.\n6g bigbugor.go \u0026amp;\u0026amp; 6l -o bigbugor bigbugor.6 \u0026amp;\u0026amp; ./bigbugor\n8g bigbugor.go \u0026amp;\u0026amp; 8l -o bigbugor bigbugor.8 \u0026amp;\u0026amp; ./bigbugor\n\nWhat is the expected output?\nOn both pc's bigbugor should end silently.\n\nWhat do you see instead?\nOn the linux amd64 pc (the linux 386 made the same calls):\npanic: runtime error: index out of range\n\npanic PC=0x7f57970c9ea0\nruntime.panic+0xb2 /home/ttlaak/go/src/pkg/runtime/proc.c:1012\n        runtime.panic(0x7f5700000000, 0x4063cf)\npanicstring+0x69 /home/ttlaak/go/src/pkg/runtime/runtime.c:83\n        panicstring(0x45c648, 0x7f57970f01f0)\nruntime.panicindex+0x25 /home/ttlaak/go/src/pkg/runtime/runtime.c:44\n        runtime.panicindex()\nbig.nat·or+0xdd /home/ttlaak/go/src/pkg/big/nat.go:823\n        big.nat·or(0x7f57970c5000, 0xa00000009, 0xa00000001, 0x7f57970c5000, 0xa00000001, ...)\nbig.*Int·Or+0x1ee /home/ttlaak/go/src/pkg/big/int.go:665\n        big.*Int·Or(0x7f57970c5000, 0xa00000001, 0x7f57970c5000, 0xa00000009, 0x7f57970e75d0, ...)\nmain.main+0x89 /home/ttlaak/code/gostuff/bigbugor.go:13\n        main.main()\nmainstart+0xf /home/ttlaak/go/src/pkg/runtime/amd64/asm.s:78\n        mainstart()\ngoexit /home/ttlaak/go/src/pkg/runtime/proc.c:145\n        goexit()\n\nWhat is your $GOOS?  $GOARCH?\nlinux amd64\nand\nlinux 386\n\nWhich revision are you using?  (hg identify)\non both pc's\n8884f7b4c775+ release.2010-08-04/release\nThe attachments are based on the above. Last check for\n12d3d5576b0d+ tip\nshows no difference.\n\nPlease provide any additional information below.\nSome seemingly easy bugs to fix:\n\nThere are tests in the file $GOROOT/src/pkg/big/int_test.go that would produce the same\nruntime error. Except that in the variable bitwiseTests the string representations of\nbig.Int's contain \u0026quot;0x\u0026quot; as (part of) their prefixes, when further along such a\nrepresentation s is read using (big.*Int).SetString(s, 16) the method SetString presumes\nto know the base (i.e. 16). This then prevents SetString from recognizing prefixes like\n\u0026quot;0B\u0026quot; or \u0026quot;0x\u0026quot; and start converting the longest prefix containing\nhexadecimal characters. 'x' not being a hexadecimal character makes each representation\nread as 0. Hence they all (big.*Int).Cmp equal in testBitFun and testBitFunSelf making\nTestBitwise pass. Removing the \u0026quot;0x\u0026quot; in bitwiseTests should help.\n\nThe x argument in testBitFunSelf is reused, this is what is supposed to be tested. It is\nalso a reference to the original in the loop over bitwiseTests in the main test function\nTestBitwise. Then the modified value of x is unintentionally used for successive tests.\nCreating a local copy in testBitFunSelf suffices.\n\nThese changes can be found in fix-int_test.patch a diff made by\nhg diff int_test.go \u0026gt; fix-int_test.patch\n\nLooking into these, but taking longer than expected:\nFrom the call stack one finds that the runtime error occurs in big.nat·or. When fixing\nbig.nat·xor and applying the changes above a similar runtime error is produced on\nmake test\n\nThe proposed fix is substituting m for n and vice versa in the lines 819 to 828 of\nnat.go. The method big.nat·or will look like\nfunc (z nat) or(x, y nat) nat {\n        m := len(x)\n        n := len(y)\n        s := x                     // assume x is the longest\n        if m \u0026lt; n {\n                n, m = m, n\n                s = y\n        }\n        // m \u0026gt;= n and len(s) == m\n\n        z = z.make(m)              // resizes correctly\n        for i := 0; i \u0026lt; n; i++ {\n                z[i] = x[i] | y[i] // we can actually index all of them\n        }\n        copy(z[n:m], s[n:m])       // for remaining Words holds a | 0 == a\n\n        return z.norm()\n}\n\nThe fix for big.nat·xor is the same body as big.nat·or. except that the | is replaced\nby the ^ operator. This is not a problem because the hypothetical zero digits extending\nthe shortest natural operand do not produce a case where the semantics differ from\nbig.nat·or (the bitwise 1 xor 1 does not occur).\n\nAfter these changes 2 test cases fail. Not sure yet about those.\n\nIf preferred i would not mind putting these changes and the others (what's the deal with\nthese 2 test cases?) up for a code review.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1007/0/bigbugor.go\"\u003ebigbugor.go\u003c/a\u003e (320 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1007/0/out-386\"\u003eout-386\u003c/a\u003e (767 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1007/0/out-amd64\"\u003eout-amd64\u003c/a\u003e (861 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1007/0/fix-int_test.patch\"\u003efix-int_test.patch\u003c/a\u003e (4219 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1007/0/fix-nat.patch\"\u003efix-nat.patch\u003c/a\u003e (729 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2014-12-08T10:06:40Z",
	"created_at": "2010-08-07T12:00:10Z",
	"updated_at": "2016-06-24T19:18:50Z"
}
