{
	"id": 51287824,
	"number": 8195,
	"state": "closed",
	"title": "go/types: package documentation",
	"body": "\u003cpre\u003ego/types could use some high-level documentation of the basic concepts (the Type\nhierarchy, the Object hierarchy), and how to accomplish various kinds of mappings from\nsyntax to types and vice versa.  I think tool builders would also appreciate a\ndiscussion of the commonly misunderstood things, with explained examples, such as:\n- a list of invariants related to each Type/Object. The docstrings cover some of them\nbut it doesn't help a new user become oriented.\n- the fact the Objects are canonical.\n- what's the deal with Tuple.\n- what situations Info.Implicits are for\n- that fields (Vars) of structs don't know their owning struct and are in fact may be\nequally \u0026quot;owned\u0026quot; by several.\n- the analogous situation for interface methods.\n- why some Idents/FuncTypes/etc appear in Info.Types but not others\n- how PkgName objects work, and the possibility that two distinct PkgName objects can\nrepresent the same package.\n- that a struct may contain two fields (or an interface two methods) both named\n\u0026quot;f\u0026quot;\n- that a struct field identifier may be simultaneously use a type and define a field\n- how to determine whether an object is universal, file-scope, package scope or local,\nand which object kinds can inhabit which scopes.\n- etc.\u003c/pre\u003e",
	"user": {
		"login": "adonovan",
		"id": 5658175,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-02-11T22:23:51Z",
	"created_at": "2014-06-12T15:25:20Z",
	"updated_at": "2016-02-11T22:23:51Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
