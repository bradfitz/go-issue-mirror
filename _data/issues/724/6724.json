{
	"id": 51285629,
	"number": 6724,
	"state": "closed",
	"title": "encoding/json: Unmarshal([]byte(`null`), \u0026value) does nothing",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\n\n\u003ca href=\"http://play.golang.org/p/iVsT1IeNkU\"\u003ehttp://play.golang.org/p/iVsT1IeNkU\u003c/a\u003e\n\nThis code:\n\n    var s string = \u0026quot;foo\u0026quot;\n    err := Unmarshal([]byte(`null`), \u0026amp;s)\n\ndoes not change s, but also does not signal an error.\n\nWhile this does make some sense, it surprised me; I expected either an error or zero\nvalue. Error because `null` is not a string, zero value because that's what the logic is\nelsewhere for null:\n\n\u003ca href=\"http://golang.org/pkg/encoding/json/#Unmarshal\"\u003ehttp://golang.org/pkg/encoding/json/#Unmarshal\u003c/a\u003e says\n\n\u0026quot;To unmarshal JSON into a pointer, Unmarshal first handles the case of the JSON\nbeing the JSON literal null. In that case, Unmarshal sets the pointer to nil. Otherwise,\nUnmarshal unmarshals the JSON into the value pointed at by the pointer. If the pointer\nis nil, Unmarshal allocates a new value for it to point to.\u0026quot;\n\nwhich means that unmarshaling `null` into a pointer actually changes it, and\nunmarshaling `null` into a non-pointer doesn't.\n\nI feel like the docs need an extra paragraph that talks about null.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 7,
	"closed_at": "2014-12-08T10:37:20Z",
	"created_at": "2013-11-06T17:43:03Z",
	"updated_at": "2016-06-25T01:21:56Z",
	"milestone": {
		"id": 1067211,
		"number": 17,
		"title": "Go1.3"
	}
}
