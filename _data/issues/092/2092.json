{
	"id": 51278716,
	"number": 2092,
	"state": "closed",
	"title": "sort: Subtle bug in (Float64Array) Less",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\n1. Compile:\npackage main\nimport \u0026quot;math\u0026quot;\nimport \u0026quot;sort\u0026quot;\nimport \u0026quot;fmt\u0026quot;\nfunc main() {\n\ts:=[]float64{1,2,3,math.NaN(),1,2,3}\n\tsort.SortFloat64s(s)\n\tfmt.Println(s)\n}\n\n2. Run\n\nWhat is the expected output?\n[1 1 2 2 3 3 NaN]\nor\n[NaN 1 1 2 2 3 3]\nor\nsomething sorted with NaN at an arbitrary position, since it is not ordered anyway\n(impossible with current sort interface, imho)\n\nWhat do you see instead?\n[1 2 3 NaN 1 2 3]\nswapping numbers around in the initial vector produces all sorts of funny results.\n\nFirst reproduced it with webinterface on golang.org should be version and architecture\nindependent\n\nReason is how comparison operators works with NaN and float64, (Float64Array) Less\nalways returns false if NaN is involved.\nFixing the case above would be trivial, just make Less return !(p[i]\u0026gt;p[j]) instead of\np[i]\u0026lt;p[j]. Unfortunately this should lead to infinite loops if more than one NaN is\ninvolved.\nWill send correct fix later.\u003c/pre\u003e",
	"user": {
		"login": "MaVo159",
		"id": 917690,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:11:17Z",
	"created_at": "2011-07-22T20:11:00Z",
	"updated_at": "2016-06-24T19:32:34Z"
}
