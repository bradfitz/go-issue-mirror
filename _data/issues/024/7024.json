{
	"id": 51286087,
	"number": 7024,
	"state": "closed",
	"title": "language: Add ability to import string constant or data from an external file.",
	"body": "by **tdhutt**:\n\n\u003cpre\u003eHi,\n\nA really useful feature which I always missed in C++, and would be great in Go is the\nability to have a string or []byte constant that is initialised at compile time with the\ncontents of an external file.\n\nThis would be really useful in a number of instances:\n\n* Embedding graphics shader programs\n* Embedding icons and other graphics needed for programs.\n* Well, embedding anything really. Go currently has no decent way to do this.\n\nHere is a syntax proposal:\n\nconst string = #`filename.txt`\nconst []byte = #`filename.dat`\n\n(or any other combination of unambiguous characters:  #\u0026quot;foo\u0026quot;,\n@\u0026quot;foo\u0026quot;, @`foo`, $\u0026quot;foo\u0026quot;, !\u0026quot;foo\u0026quot;, etc.)\n\nOr you could overload \u0026quot;import\u0026quot;, since it is already a keyword and matches the\nmeaning well. Might be confusing for the reader though, and maybe make the parser more\ncomplicated.\n\nconst string = import(\u0026quot;filename.txt\u0026quot;)\nconst []byte = import(\u0026quot;filename.dat\u0026quot;)\n\nOr just make a new keyword and hope it doesn't break anyone's code.\n\nconst string = contents(\u0026quot;filename.txt\u0026quot;)\n\nIf the file is assigned to a []byte it has the obvious meaning. If it is assigned to a\nstring it is read as UTF-8 only.\n\nI can't see any obvious downsides to this really. If I were to write a decent patch for\nthis would it be accepted?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 7,
	"closed_at": "2014-12-08T10:39:06Z",
	"created_at": "2013-12-28T18:45:56Z",
	"updated_at": "2016-06-25T01:24:38Z"
}
