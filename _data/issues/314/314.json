{
	"id": 51276329,
	"number": 314,
	"state": "closed",
	"title": "6c defaults 1 cpu, gccgo defaults to all, fix (runtime.GOMAXPROCS) is incompatible with gccgo",
	"body": "by **broadley**:\n\n\u003cpre\u003eBefore filing a bug, please check whether it has been fixed since\nthe latest release: run \u0026quot;hg pull -u\u0026quot; and retry what you did to\nreproduce the problem.  Thanks.\n\nWhat steps will reproduce the problem?\n1. take any go source that has multiple CPU intensive goroutines\n2. Compile with 6g\n3. Compile with gccgo\n\nWhat is the expected output? What do you see instead?\n\nI expect them to behave similarly.  6g default to a single CPU, on a quad\ncore 3 cores sit idle.  Gccgo defaults to all CPUs.  Attempts to fix this\nwith runtime.GOMAXPROCS(4) work with 6g, but generate a fatal error with\ngccgo: \n  bw.go:(.text+0x4da): undefined reference to `runtime.GOMAXPROCS'\n\nSince goroutines are not the same as threads it seems reasonable to me for\ngccgo to get the addition of runtime.GOMAXPROCS()\n\nIn any case 6g should definitely be source code compatible with gccgo.\n\nWhat is your $GOOS?  $GOARCH?\nlinux amd64\n\nWhich revision are you using?  (hg identify)\nboth downloaded within the last 24 hours.\n\nPlease provide any additional information below.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:04:05Z",
	"created_at": "2009-11-23T08:11:03Z",
	"updated_at": "2016-06-24T19:08:15Z"
}
