{
	"id": 66066205,
	"body": "\u003ca id=\"c12\"\u003e\u003c/a\u003eComment 12:\n\n\u003cpre\u003eI'm not sure I understand what it is your saying?\n\nIn your example the compiler adds tail padding for alignment purposes but the zero\nlength arrays still have a size of zero, tail_padding = sizeof(struct ArrEmpty) -\noffsetof(struct ArrEmpty, arr), and sizeof empty.arr would return a value of 0 (is it\nvalid to call the sizeof macro on a 0-length flexible array member?).\n\nFor flexible array members, the C99 spec states that the size of the structure is as if\nthe flexible array member were omitted and if the array has no elements it behaves as if\nit had one element - I'm guessing GCC's spec states something similar for its flexible\narray member. It's possible for the C99 behavior statement to be misinterpreted as\nimplying a flexible array member has the size of one element when in fact its size is\nzero. The DWARF spec, which I quickly browsed over, didn't seem to have much to say\nabout the subject.\u003c/pre\u003e",
	"user": {
		"login": "jpoirier",
		"id": 490350,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-09-22T10:59:30Z",
	"updated_at": "2014-12-08T10:18:20Z"
}
