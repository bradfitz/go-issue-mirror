{
	"id": 188938613,
	"body": "Sorry to leave that out, yes I was referring to time.Parse.\r\nA particular use case would be the following.\r\nJava generates the following date:\r\n```java\r\nZonedDateTime now = ZonedDateTime.of(LocalDateTime.of(2009, Month.FEBRUARY, 4, 21, 0, 57), ZoneId.of(\"UTC\"));\r\nString javaDateTimeRFC1123 = now.format(DateTimeFormatter.RFC_1123_DATE_TIME);\r\n// javaDateTimeRFC1123 = \"Wed, 4 Feb 2009 21:00:57 GMT\"\r\n```\r\nParsing this in go:\r\n```golang\r\nt, err := time.Parse(time.RFC1123, \"Wed, 4 Feb 2009 21:00:57 GMT\")\r\n// expected\r\n// err = nil\r\n// t = 2009-02-04 21:00:57 +0000 GMT\r\n\r\n// actual\r\n// err = parsing time \"Wed, 4 Feb 2009 21:00:57 GMT\" as \"Mon, 02 Jan 2006 15:04:05 MST\": cannot parse \"4 Feb 2009 21:00:57 GMT\" as \"02\"\r\n// t = 0001-01-01 00:00:00 +0000 UTC\r\n```\r\n\r\nI do not see it as just a documentation issue, to me it seems that golang do not respects the RFC's actual directive on date.",
	"user": {
		"login": "Ecsy",
		"id": 255498,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-25T19:20:04Z",
	"updated_at": "2016-02-25T19:20:04Z"
}
