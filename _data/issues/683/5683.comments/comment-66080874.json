{
	"id": 66080874,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9 by **runner.mei**:\n\n\u003cpre\u003eI have the same feeling, I found the problem in the json/stream.go, as following:\n   155\tfunc (enc *Encoder) Encode(v interface{}) error {\n   156\t\tif enc.err != nil {\n   157\t\t\treturn enc.err\n   158\t\t}\n   159\t\tenc.e.Reset()\n   160\t\terr := enc.e.marshal(v)\n   161\t\tif err != nil {\n   162\t\t\treturn err\n   163\t\t}\n   164\t\n   165\t\t// Terminate each value with a newline.\n   166\t\t// This makes the output look a little nicer\n   167\t\t// when debugging, and some kind of space\n   168\t\t// is required if the encoded value was a number,\n   169\t\t// so that the reader knows there aren't more\n   170\t\t// digits coming.\n   171\t\tenc.e.WriteByte('\\n')\n   172\t\n---------------------------- here ----------------------------------\n   173\t\tif _, err = enc.w.Write(enc.e.Bytes()); err != nil {\n   174\t\t\tenc.err = err\n   175\t\t}\n   176\t\treturn err\n   177\t}\n\nIn general the \"w\" is the buffer,  Write method had an unnecessary memory copy\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-14T14:00:29Z",
	"updated_at": "2014-12-08T10:31:00Z"
}
