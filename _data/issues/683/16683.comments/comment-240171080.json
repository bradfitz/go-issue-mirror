{
	"id": 240171080,
	"body": "The [spec for PKCS#1 v1.5](https://tools.ietf.org/html/rfc3447#section-8.2.2) specifies the behaviour that Go implements. Steps 3 and 4 say to encode the expected message and compare.\r\n\r\nEvery TLS server and all but one (now two) certificates that I've seen manages to put the NULL in there. Sometimes the reality of the situation is such that concessions have to be made, but that's not the case here and there's good reason why we're strict about these things whenever possible in the security area.\r\n\r\nThe reality of implementations is that they're aimed in the general direction of a spec and then debugged until they roughly interoperate with one (or, if you're lucky, two) major implementations.\r\n\r\nIf some piece of code is inadvertently depending on some liberty of a major implementation then it might not find the problem until very late, when it fails in practice against a minor implementation. If implementations had been stricter then the problem would have been found sooner. The sooner a bug is found the cheaper the fix. (Ask the Estonian ID cards folks.)\r\n\r\nThus strict implementations help grow a healthy ecosystem. None the less, as shown here, the pressures are towards replicating every laxness in every implementation. That only works in the short-term however. We really want implementations that follow the spec for this as trying to parse the ASN.1 has been a disaster in practice and that means trying to defend the simple answer.\r\n\r\nAdditionally, implementations are reality, but specs are what gets analysed by researchers and proven. If there's a gap between the two then we can end up believing things that aren't actually true in reality.\r\n\r\nSo the real issue here is that OpenSSL parses signatures rather than comparing them and that has allowed Yubikey to end up inadvertently depending on it.",
	"user": {
		"login": "agl",
		"id": 21203,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-16T17:13:08Z",
	"updated_at": "2016-08-16T17:13:08Z"
}
