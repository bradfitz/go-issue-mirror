{
	"id": 66053807,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003e\"Three functions assemble and disassemble complex numbers. The built-in function cmplx\nconstructs a complex value from a floating-point real and imaginary part, while real and\nimag extract the real and imaginary parts of a complex value.\"\n\n\"The type of the arguments and return value correspond. For cmplx, the two arguments\nmust be of the same floating-point type and the return type is the complex type with the\ncorresponding floating-point constituents: complex for float, complex64 for float32,\ncomplex128 for float64. The real and imag functions together form the inverse, so for a\ncomplex value z, z == cmplx(real(z), imag(z)).\"\n\n\"If the operands of these functions are all constants, the return value is a constant.\"\n\nAssembling and disassembling complex numbers, The Go Programming Language Specification\n\u003ca href=\"http://golang.org/doc/go_spec.html#Complex_numbers\"\u003ehttp://golang.org/doc/go_spec.html#Complex_numbers\u003c/a\u003e\n\npackage main\n\nconst (\n\tc = cmplx(1, 2)\n\td = real(c)\n\te = imag(c)\n\tk = 1 + 2i\n\tm = real(k)\n\tn = imag(k)\n)\n\nfunc main() {}\n\ncmplx.go:5: const initializer must be constant\ncmplx.go:6: const initializer must be constant\ncmplx.go:8: const initializer must be constant\ncmplx.go:9: const initializer must be constant\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-12-24T15:42:42Z",
	"updated_at": "2014-12-08T10:08:00Z"
}
