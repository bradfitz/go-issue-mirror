{
	"id": 149520611,
	"number": 15369,
	"state": "closed",
	"title": "proposal: vendor links - provide communication on impacts of vendor folder for consuming packages",
	"body": "If a set of packages copy their dependencies locally, then either those packages must either be the end consumer of those packages or other packages which consume them must use a vendor tool to copy the vendor packages under that repo.\r\n\r\nThere are packages that want to have both end executables and a consumable API packages. Sometimes the API packages are only used by other packages. Forcing those packages to copy packages locally isn’t always desired.\r\n\r\nOne way to do this is to vendor your own files:\r\n```\r\ngithub.com/user/repo/\r\n\tcmd/\r\n\t\texec1/\r\n\t\t\tmain.go\r\n\t\texec2/\r\n\t\t\tmain.go\r\n\t\tvendor/\r\n\t\t\tgithub.com/user/repo/\r\n\t\t\t\tpkg1/\r\n\t\t\t\t\ta.go\r\n\t\t\t\t\tb.go\r\n\tpkg1/\r\n\t\ta.go\r\n\t\tb.go\r\n```\r\nThis would be the same structure regardless if “cmd” and “pkg1” where in the same repository or different repositories.\r\n\r\nAnswer 1: Use a symbolic links to link the vendor folder package to the library it uses. This can be used on systems that support symbolic links and on projects that combine the cmd and pkg1 into the same repository. As such, the applicability to this is limited.\r\n\r\nAnswer 2: Have the “go” tool look for a file under the vendor folder. For the purposes of this I will call it “links.txt”. In this file are a list of import paths that should be compiled as if they lived in the vendor folder. This will work on all systems and work regardless of whether or not cmd and pkg1 are in the same repository.\r\n```\r\ngithub.com/user/repo/\r\n\tcmd/\r\n\t\texec1/\r\n\t\t\tmain.go\r\n\t\texec2/\r\n\t\t\tmain.go\r\n\t\tvendor/\r\n\t\t\tlinks.txt\r\n\tpkg1/\r\n\t\ta.go\r\n\t\tb.go\r\n\r\n$ cat links.txt\r\ngithub.com/user/repo/…  (specify each package but allow … path matching)\r\nor\r\ngithub.com/user/repo      (only need to specify roots)\r\nor\r\ngithub.com/user/repo/pk1  (must specify each package)\r\n```\r\nAnswer 3: The folders “cmd” and “pkg1” should be separate, and if you want reproducible builds by copying vendor dependencies into the project tree, then copying “pkg1” under the “cmd” vendor folder is the correct solution. A project where “cmd”, “pkg1”, and “vendor” are all siblings is incorrect (likely to break normal builds, assuming “pkg1” is designed for external consumption).\r\n\r\n-------\r\n\r\nI understand that people use the vendor folder in different ways and have different build environments, but It would be nice to have a blog post or other \"official\" communication on project structure with the vendor folder.\r\n\r\nAnswer 2 looks interesting to me. I don't know if it is interesting to other people as well.\r\n\r\n",
	"user": {
		"login": "kardianos",
		"id": 755121,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 3,
	"closed_at": "2016-08-03T20:25:22Z",
	"created_at": "2016-04-19T17:02:31Z",
	"updated_at": "2016-08-03T20:25:22Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
