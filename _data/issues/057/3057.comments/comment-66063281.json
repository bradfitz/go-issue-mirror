{
	"id": 66063281,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eTracing the problem:\n- selfConnect is getting a *netFD with a nil raddr field.\n- that fd is coming from internetSocket, which must be returning no error.\nFrom the other end:\n- DialTCP checks for raddr==nil, so raddr.toAddr() must be a non-nil sockaddr.\n- internetSocket must call raddr.sockaddr (*TCPAddr.sockaddr), which only returns a\nnon-nil syscall.Sockaddr with nil error (and so ra is non-nil).\n- This means that the problem must be socket returning an fd with a nil raddr even if\nits ra argument is non-nil.\n- That, in turn, means the toAddr func passed to socket (and internetSocket) must be\ndoing that.\n- This fingers sockaddrToTCP, which will return nil if the syscall.Sockaddr is not one\nof {*syscall.SockaddrInet4,*syscall.SockaddrInet6}.\n- However, ipToSockaddr never returns a different type than those two, except with an\nerror.\n\nHere the trail runs cold. I can't see what is going wrong without a way to reproduce\nthis and scattering some logging throughout. All I can think of is that it slipped in\nwith 002f08814913 (Russ' \"net: avoid TCP self-connect\"), so assigning it to him for\nfurther diagnosis.\u003c/pre\u003e\n\n_Labels changed: added **priority-later**, removed **priority-triage**._\n\n_Owner changed to @rsc._",
	"user": {
		"login": "dsymonds",
		"id": 31506,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-02-18T05:10:13Z",
	"updated_at": "2014-12-08T10:15:55Z"
}
