{
	"id": 143729344,
	"number": 14977,
	"state": "closed",
	"title": "proposal: atomic keyword",
	"body": "* disclaimer: I'm horrible at writing essays and proposals, so take this with a grain of salt. \r\n\r\n### Abstract\r\n\r\nWith the growing number of processor cores, many developers use atomics rather than mutex/cond when they can.\r\n\r\n### Background\r\n\r\nFor primitive types, we have `sync/atomic`, which provides Load/Store/Swap/CAS, however, for other types we only have `atomic.Value`, which only provides Load/Store and the added overhead of runtime type assertion since it uses `interface{}`\r\n\r\n### Proposal\r\nHere comes the atomic keyword (more like chan, but it can be something else really):\r\n\r\n```\r\nv := make(atomic *SomeStruct)\r\nov := v.Swap(\u0026SomeStruct)\r\nif v.CompareAndSwap(nil, \u0026SomeStruct) { }\r\n\r\nv2 := v.Load()\r\nv.Store(v3)\r\n// or maybe?\r\nv2 := v // implicit v.Load()?\r\nv := v3 // implicit v.Store(v3)\r\n```\r\n\r\n### Implementation \r\n\r\nIt'd be implemented much like `atomic.Value` internally, probably using a spinlock for CAS and Swap operations, with the added runtime magic to handle types directly instead of using interface{}.\r\n\r\nIdeas? Feedback?",
	"user": {
		"login": "OneOfOne",
		"id": 1080443,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2016-03-27T20:25:57Z",
	"created_at": "2016-03-26T16:48:37Z",
	"updated_at": "2016-03-27T20:25:57Z",
	"reactions": {
		"total_count": 2,
		"+1": 2
	}
}
