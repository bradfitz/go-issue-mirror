{
	"id": 51277189,
	"number": 977,
	"state": "closed",
	"title": "JSON [line:108] string is not os.Error: missing method String",
	"body": "by **eshurmin**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n1. 8g -o json.8 json.go\n2. 8l -o json json.8 \n3. ./json\n\nWhat is the expected output?\n\n\u0026gt;\u0026gt;\u0026gt; Marshal\nT: {341}\nMarshal T: {\u0026quot;z\u0026quot;:\u0026quot;341\u0026quot;}\n\u0026gt;\u0026gt;\u0026gt; Unmarshal\npanic: cannot set value obtained via unexported struct field [recovered]\n\tpanic: interface conversion: string is not os.Error: missing method String\n\npanic PC=0x95f2b8\nruntime.panic+0xa9 /home/jpascal/go/src/pkg/runtime/proc.c:1012\n\truntime.panic(0x0, 0x80866a0)\nitab+0xd6 /home/jpascal/go/src/pkg/runtime/iface.c:125\n\titab(0x80aab48, 0x9696c0, 0x8086698, 0x0)\nifaceE2I+0xa8 /home/jpascal/go/src/pkg/runtime/iface.c:445\n\tifaceE2I(0x8086698, 0x809e91c, 0x0, 0x95c, 0x80a24ec, ...)\nruntime.assertE2I+0x27 /home/jpascal/go/src/pkg/runtime/iface.c:453\n\truntime.assertE2I(0x8086698, 0x809e91c, 0x947880, 0x95f394, 0x95c000, ...)\njson._func_001+0x89 /home/jpascal/go/src/pkg/json/decode.go:108\n\tjson._func_001(0x8086698, 0x809e91c, 0x947880, 0x0)\nruntime.panic+0xe9 /home/jpascal/go/src/pkg/runtime/proc.c:994\n\truntime.panic(0x95b2e0, 0x95b2d4)\nreflect.*StringValue·Set+0x5f /home/jpascal/go/src/pkg/reflect/value.go:294\n\treflect.*StringValue·Set(0x809e91c, 0x947880, 0x35)\njson.*decodeState·literal+0x37a /home/jpascal/go/src/pkg/json/decode.go:553\n\tjson.*decodeState·literal(0x95c160, 0x947878, 0x3)\njson.*decodeState·value+0x1cc /home/jpascal/go/src/pkg/json/decode.go:232\n\tjson.*decodeState·value(0x949b40, 0x95a5a0, 0x95c160)\njson.*decodeState·object+0x4b7 /home/jpascal/go/src/pkg/json/decode.go:480\n\tjson.*decodeState·object(0x949b40, 0x95a5a0, 0x95c160)\njson.*decodeState·value+0x1ee /home/jpascal/go/src/pkg/json/decode.go:229\n\tjson.*decodeState·value(0x949b40, 0x95a5d0, 0x95c180)\njson.*decodeState·unmarshal+0x100 /home/jpascal/go/src/pkg/json/decode.go:119\n\tjson.*decodeState·unmarshal(0x949b40, 0x95a5d0, 0x95c180, 0x95c190, 0x101, ...)\njson.Unmarshal+0xa0 /home/jpascal/go/src/pkg/json/decode.go:61\n\tjson.Unmarshal(0x949b40, 0x8095c04, 0x947800, 0x949b50, 0x0, ...)\nmain.main+0x343 /home/jpascal/Проекты/Наработки/JSON/json.go:34\n\tmain.main()\nmainstart+0xf /home/jpascal/go/src/pkg/runtime/386/asm.s:83\n\tmainstart()\ngoexit /home/jpascal/go/src/pkg/runtime/proc.c:145\n\tgoexit()\n\n\nWhat is your $GOOS?  $GOARCH?\nGOOS=linux\nGOARCH=386\n\nWhich revision are you using? \nb501df553a4b tip\n\nI dont want recive panic.\nI want recive os.Error only.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/977/0/json.go\"\u003ejson.go\u003c/a\u003e (559 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"closed_at": "2014-12-08T10:06:34Z",
	"created_at": "2010-07-29T08:06:10Z",
	"updated_at": "2016-06-24T19:18:24Z"
}
