{
	"id": 70607553,
	"body": "Some of the use cases this could replace could be statically analyzed and optimized. For example, using `append(x, make([]T, n)...)` to grow a slice could be automatically optimized to avoid a memory-to-memory copy (since every element will be zero) and to further avoid the allocation by `make` (since the element values are constant, and the slice does not change or escape, the slice itself is not needed). SSA-style analysis may allow such optimizations to be general and categorical.\r\n\r\nHistorically, performance/optimization considerations have not made it into the language (e.g. in the form of compiler hinting keywords) or the stdlib. The allocation and copying avoidance should therefore be given little weight, as an eventual compiler could make such optimizations implicit anyway.\r\n\r\nIf the non-performance merits of bytes.Extend are enough to still warrant inclusion, the function definition as proposed is a bit unconventional, since it adds convenience at the expense of increasing complexity. I would recommend `func Extend([]byte, int) []byte` such that the return value is the same as the \"larger\" value described above. \"suffix\" can be trivially created with a single slice expression. The supporting precedent for this recommendation is that there is no `path.SplitExt`, because the equivalent can likewise be created with a straightforward slice expression upon the result of calling `path.Ext`",
	"user": {
		"login": "extemporalgenome",
		"id": 536740,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-20T05:44:57Z",
	"updated_at": "2015-01-20T06:32:49Z"
}
