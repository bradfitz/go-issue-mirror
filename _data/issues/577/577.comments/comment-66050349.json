{
	"id": 66050349,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6 by **peterbourgon**:\n\n\u003cpre\u003eHm, actually, I think there is a real issue. When you time.Parse a string in a format \nthat uses stdNumTz, and then time.Format with a format that uses stdTZ, the time \nzone is not printed. Demo:\n\n  $ cat gotime.go\n  package main\n  \n  import (\n      \"time\"\n      \"fmt\"\n  )\n  \n  const RFC822 = \"Mon, 02 Jan 2006 15:04:05 -0700\"\n  \n  func main() {\n      t, err := time.Parse(RFC822, \"Tue, 02 Feb 2010 14:01:45 -0500\")\n      if err == nil {\n          fmt.Println(\"time struct:\", t)\n          fmt.Println(\"time format str (RFC822):\", t.Format(RFC822))\n          fmt.Println(\"time format str (RFC1123):\", t.Format(time.RFC1123))\n      } else {\n          fmt.Println(\"Failed to parse\")\n      }\n  }\n  $ makego gotime\n  $ ./gotime\n  time struct: Tue Feb  2 14:01:45  2010\n  time format str (RFC822): Tue, 02 Feb 2010 14:01:45 -0500\n  time format str (RFC1123): Tue, 02 Feb 2010 14:01:45\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-02-02T14:48:59Z",
	"updated_at": "2014-12-08T10:05:06Z"
}
