{
	"id": 66092295,
	"body": "\u003ca id=\"c36\"\u003e\u003c/a\u003eComment 36:\n\n\u003cpre\u003e\u003e My suspicion was that the child has not forked yet, but tried\n\u003e lock gclock, which is locked in child.\n\nYou mean the child has not exec'ed yet, but tried to lock gclock\nwhich is locked in *parent*?\n\n\u003e You always post traces from 2 processes, what are these processes?\n\u003e Is it 2 equivalent processes, or parent and child?\n\nParent and child. They have the same argv, so it seems exec didn't\nhappen yet.\n\n\u003e In #19 you've posted debugger thread dump. One process contains\n\u003e several threads, which is normal for Go process. But the other one\n\u003e contains only 1 thread, which can't happen in a running Go process.\n\u003e Maybe it's a forked-but-not-execed child?\n\nI think so, yes.\n\n\u003e Note that SIGABRT in such process can still print several goroutines\n\u003e (and some of them can be running), but that is just what left in\n\u003e memory from parent.\n\nMakes sense.\n\nWhat could trigger a GC in the child then? All variables are declared\nbeforehand, and all functions are NOSPLIT (I'll check again, a third\ntime). The NOSPLIT functions call asmcgocall, however, could that\nhave anything to do with it?\u003c/pre\u003e",
	"user": {
		"login": "4ad",
		"id": 1331747,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-13T06:25:28Z",
	"updated_at": "2014-12-08T10:41:44Z"
}
