{
	"id": 145457779,
	"number": 15080,
	"state": "closed",
	"title": "syscall: error in definition of constant RTNLGRP_IPV4_IFADDR",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n1.6\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nUbuntu 14.04 64bit\r\n\r\n3. What did you do?\r\nDefinition of `RTNLGRP_IPV4_IFADDR = 0x5` is incorrect from syscall.go. Because C language definition of this variable is equal to `#define RTMGRP_IPV4_IFADDR\t0x10` according here [rtnetlink.h](https://github.com/torvalds/linux/blob/master/include/uapi/linux/rtnetlink.h#L578)\r\n\r\nI cannot get `syscall.RTM_NEWADD` message due to this error. I did not create runnable code since to simulate you need IP address change. However this is my code which can be executed.\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"syscall\"\r\n)\r\n\r\nfunc main() {\r\n    l, _ := ListenNetlink()\r\n\r\n    for {\r\n        msgs, err := l.ReadMsgs()\r\n        if err != nil {\r\n            fmt.Println(\"Could not read netlink: %s\", err)\r\n        }\r\n\r\n        for _, m := range msgs {\r\n            if IsNewAddr(\u0026m) {\r\n                fmt.Println(\"New Addr\")\r\n            }\r\n\r\n            if IsDelAddr(\u0026m) {\r\n                fmt.Println(\"Del Addr\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ntype NetlinkListener struct {\r\n    fd int\r\n    sa *syscall.SockaddrNetlink\r\n}\r\n\r\nfunc ListenNetlink() (*NetlinkListener, error) {\r\n    groups := syscall.RTNLGRP_IPV4_IFADDR\r\n        \r\n    s, err := syscall.Socket(syscall.AF_NETLINK, syscall.SOCK_DGRAM,\r\n        syscall.NETLINK_ROUTE)\r\n    if err != nil {\r\n        return nil, fmt.Errorf(\"socket: %s\", err)\r\n    }\r\n\r\n    saddr := \u0026syscall.SockaddrNetlink{\r\n        Family: syscall.AF_NETLINK,\r\n        Pid:    uint32(0),\r\n        Groups: uint32(groups),\r\n    }\r\n\r\n    err = syscall.Bind(s, saddr)\r\n    if err != nil {\r\n        return nil, fmt.Errorf(\"bind: %s\", err)\r\n    }\r\n\r\n    return \u0026NetlinkListener{fd: s, sa: saddr}, nil\r\n}\r\n\r\nfunc (l *NetlinkListener) ReadMsgs() ([]syscall.NetlinkMessage, error) {\r\n    defer func() {\r\n        recover()\r\n    }()\r\n\r\n    pkt := make([]byte, 2048)\r\n\r\n    n, err := syscall.Read(l.fd, pkt)\r\n    if err != nil {\r\n        return nil, fmt.Errorf(\"read: %s\", err)\r\n    }\r\n\r\n    msgs, err := syscall.ParseNetlinkMessage(pkt[:n])\r\n    if err != nil {\r\n        return nil, fmt.Errorf(\"parse: %s\", err)\r\n    }\r\n\r\n    return msgs, nil\r\n}\r\n\r\nfunc IsNewAddr(msg *syscall.NetlinkMessage) bool {\r\n    if msg.Header.Type == syscall.RTM_NEWADDR {\r\n        return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunc IsDelAddr(msg *syscall.NetlinkMessage) bool {\r\n    if msg.Header.Type == syscall.RTM_DELADDR {\r\n        return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunc IsRelevant(msg *syscall.IfAddrmsg) bool {\r\n    if msg.Scope == syscall.RT_SCOPE_UNIVERSE ||\r\n        msg.Scope == syscall.RT_SCOPE_SITE {\r\n        return true\r\n    }\r\n\r\n    return false\r\n}\r\n```\r\nif this line \"groups := syscall.RTNLGRP_IPV4_IFADDR\" will be changed to `groups := uint32(16)` it start working normaly. \r\n\r\n4. What did you expect to see?\r\n`RTNLGRP_IPV4_IFADDR = 0x10` in syscall.go\r\n\r\n5. What did you see instead?\r\n`RTNLGRP_IPV4_IFADDR` = 0x5 in syscall.go\r\n",
	"user": {
		"login": "inoyatov",
		"id": 7060390,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"closed_at": "2016-04-03T16:15:02Z",
	"created_at": "2016-04-03T06:00:45Z",
	"updated_at": "2016-04-04T05:08:40Z"
}
