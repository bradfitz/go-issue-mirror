{
	"id": 136160581,
	"body": "The package `decnum` now contains the functions needed for basic work with money.\r\n\r\nhttps://github.com/rin01/decnum\r\nhttps://godoc.org/github.com/rin01/decnum\r\n\r\nThe API seems good to me, and easy to use. If you want to play with it and tell me your opinion.\r\n\r\nI've had a look at various implementations of 128bits decimal floating point.\r\nIt is really a huge work to write such code, and I wonder if it is a good idea to duplicate all this effort in Go.\r\nThe simplest solution may be to just take the C decNumber library of Mike Cowlishaw, which is very much free of bugs, and make a wrapper around it, like `decnum` package, after all.\r\nAnd it is already compliant with all the standards.\r\n\r\nBesides, most financial applications works heavily with databases, reading records, working on them, writing back the result to disk. So, the overhead of cgo calls is negligible, compared to IO operations.\r\nAnd most applications that deals with money, like webstores or reservation sites, don't make tons of calculations.\r\nThey just want to easily read money values from databases and work on them.\r\n\r\n@griesemer ultimately, there should be no problem to include a built-in decimal128 type in Go.\r\nIt should run with a fixed rounding mode, ROUND_HALF_EVEN.\r\nAlso, a `decmath` package will provide functions such as\r\n    `FromString(string) (decimal128, error)`\r\nwhich must return `error`, because there is no `Context` which can track errors.\r\nFor arithmetic operations like `+`, `-`, etc, the result will be NaN in case of error.\r\n\r\ngcc already includes Mike Cowlishaw's library, and proposes a built-in floating-point decimal type:\r\nhttps://gcc.gnu.org/onlinedocs/gcc/Decimal-Float.html\r\n\r\n",
	"user": {
		"login": "rin01",
		"id": 9582469,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-30T17:05:26Z",
	"updated_at": "2015-08-30T17:05:53Z"
}
