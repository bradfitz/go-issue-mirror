{
	"id": 136426397,
	"body": "Well, the purpose of this decimal 128bits type is to have a type as easy to work with as possible.\r\nSo, it is inherently subject to some trade-offs.\r\n\r\nIn particular, precision is fixed at 34 significant digits and cannot be changed.\r\n\r\nContext is primarily used to track errors that occurs during operations.\r\nThere are often long series of operations, and it is good to avoid cluttering the code with error detection lines.\r\nIt is better to perform all operations and check for error in the end, with `context.Error()` method.\r\nThat's why this `Context`object must be passed to all operations.\r\n\r\nThe `big.Float` methods raise a `panic(ErrNaN)` in case of error.\r\nSo the alternative for decimal 128bits package API would be to panic the same way ?...\r\n\r\nBesides, decimal 128bits is passed by value, like float64, and methods return the result as value.\r\n\r\nIf the API of this package is changed to embed rounding information in the type, and then passing it by pointer, it will become the `big.Decimal` package discussed in https://github.com/golang/go/issues/12127.\r\nBut this proposal is to have something a little bit \"lighter\", simpler, good-enough for most users...\r\n\r\nIn Python, Context is passed invisibly but implicitly.\r\nhttps://www.python.org/dev/peps/pep-0327/#use-of-context\r\n\r\nIn Java BigDecimal, a Context or RoundingMode is passed as argument to methods.\r\nhttp://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html\r\n\r\nIn C decNumber, Context is passed explicitly to each function.\r\nContext is the argument called `set`:\r\nhttp://speleotrove.com/decimal/dnfloat.html\r\n\r\n",
	"user": {
		"login": "rin01",
		"id": 9582469,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-31T16:49:53Z",
	"updated_at": "2015-08-31T16:49:53Z"
}
