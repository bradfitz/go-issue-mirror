{
	"id": 51276421,
	"number": 391,
	"state": "closed",
	"title": "Achieving Polymorphism",
	"body": "by **codedread**:\n\n\u003cpre\u003eBecause Go lacks a means of inheritance/subclassing, it seems it is\nimpossible to achieve runtime polymorphism.  \n\nFor instance, see the below code:\n\npackage main\nimport \u0026quot;fmt\u0026quot;;\n\ntype Fruit interface {\n\tName() string;\n\tEat() int;\n}\n\ntype FruitImpl struct {\n\tcalories int;\n}\nfunc (f *FruitImpl) Name() string { return \u0026quot;Fruit\u0026quot;; }\nfunc (f *FruitImpl) Eat() int {\n\tfmt.Println(\u0026quot;Inside Eat(), Name is\u0026quot;, f.Name(), \u0026quot;calories=\u0026quot;, f.calories);\n\tc := f.calories;\n\tf.calories = 0;\n\treturn c;\n}\n\ntype Apple struct { *FruitImpl; }\nfunc (a *Apple) Name() string { return \u0026quot;Apple\u0026quot;; }\n\ntype Banana struct { *FruitImpl; }\nfunc (b *Banana) Name() string { return \u0026quot;Banana\u0026quot;; }\n\nfunc main() {\n\ta := \u0026amp;Apple { \u0026amp;FruitImpl{100} };\n\tb := \u0026amp;Banana { \u0026amp;FruitImpl{200} };\n\tfmt.Println(\u0026quot;Apple Name is\u0026quot;, a.Name());\n\tfmt.Println(\u0026quot;Banana Name is\u0026quot;, b.Name());\n\tfruits := [2]Fruit{a,b};\n\tfor i := 0; i \u0026lt; 2; i++ {\n\t\tfruits[i].Eat();\n\t}\n}\n\n\nIn the above we have an interface (Fruit) and a base implementation\n(FruitImpl).  We then have specialized struct types (Apple, Banana) that\nembed FruitImpl but specialize the Name() method.  Because the receiver on\nEat() is always the inner type (FruitImpl) we do not get the expected value\nfor Name().\n\nInheritance promotes code reuse.  Without it, I have to provide the full\nimplementation of FruitImpl in each of my structs (i.e. two copies of the\nEat() function).  In real problems, this could be a lot of code.\n\nThe other solution is to store specialized type information at the\nFruitImpl level and have a series of switch statements in each method to\ncheck and execute the desired specialized behavior.  This essentially acts\nlike a bit of a vtable.\n\nDoes this mean that problems where inheritance / runtime polymorphism are a\nnatural fit are not good for Go?\n\nIs there a better way to achieve the desired result in Go?  It's probably\nclear that I am not fully versed in all of Go's idioms.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 5,
	"closed_at": "2014-12-08T10:04:24Z",
	"created_at": "2009-12-07T19:01:25Z",
	"updated_at": "2016-06-24T19:10:06Z"
}
