{
	"id": 66049773,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eYour first example is definitely too strict.\nYou suggest disallowing:\n\nv := new(Point)\nv.x = 1\n\nbut what about\n\nv := NewPoint()\nv.x = 1\n\nor\n\nv := OldPoint()  // returns a reference shared with others\nv.x = 1\n\nThe used and not set rules do not treat \"new\" specially.\n\"v\" is being used to get to the field v.x in all these\nexamples.  In particular, when v is a pointer,\n    for _, v = range arr { v.i = 1 }\nis a perfectly legitimate program.\n\nIt is only when v is a struct (not a pointer) that this\nmatters.  It might be reasonable to treat v.i = 1, when\nv is not a pointer, only as a write to v, not a read.\nI thought the specific rule was in the spec but I can't\nfind it at the moment.\u003c/pre\u003e\n\n_Labels changed: added **languagechange**._\n\n_Owner changed to **r...@golang.org**._\n\n_Status changed to **Thinking**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-12-22T19:31:52Z",
	"updated_at": "2014-12-08T10:04:37Z"
}
