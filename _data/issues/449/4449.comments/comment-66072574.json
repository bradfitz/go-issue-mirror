{
	"id": 66072574,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9:\n\n\u003cpre\u003eAlthough, I've just realized the current indent behavior cannot be correct either,\nbecause it's not idempotent.\n\n$ cat x.go\n\tfunc f() {\n\t\tconst s = `\nfoo\n`\n\t\tprintln(s)\n\t}\n\n$ cat x.go | gofmt\n\tfunc f() {\n\t\tconst s = `\n\tfoo\n\t`\n\t\tprintln(s)\n\t}\n\n$ cat x.go | gofmt | gofmt | gofmt | gofmt\n\tfunc f() {\n\t\tconst s = `\n\t\t\t\tfoo\n\t\t\t\t`\n\t\tprintln(s)\n\t}\n\nSigh. Trying to have \"correct\" behavior of preserving leading whitespace is really\ntricky and I wish it was handled by external tools rather than gofmt itself. I don't see\na good solution now. Even if you try to strip the leading whitespace when parsing\npartial Go code (to fix the lack of idempotence), what happens if some of the lines do\nnot contain the same leading whitespace? The value of the raw string literal in code\nlike this will become ambiguous:\n\n\tfunc f() {\n\t\tconst s = `\n\tfoo\n`\n\t\tprintln(s)\n\t}\u003c/pre\u003e",
	"user": {
		"login": "shurcooL",
		"id": 1924134,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-02T00:20:22Z",
	"updated_at": "2014-12-08T10:23:42Z"
}
