{
	"id": 66072576,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11:\n\n\u003cpre\u003eFair enough, I'll continue to consider this a bug.\n\nJust an update here, I have code that fixes this and 5551 issues, but I haven't gotten\naround to making a CL out of it yet. You can see it here:\n\n\u003ca href=\"https://github.com/shurcooL/go/compare/0f4891c007a\"\u003ehttps://github.com/shurcooL/go/compare/0f4891c007a\u003c/a\u003e...golang-issues-5551-4449\n\nThe code works and does the job (and all tests pass), but it's still very unclean and\nneeds to be improved. I hope to do that as soon as possible...\n\n\u003e I think the common case for partial program gofmt-ing is application inside an editor\n(emacs, etc.):\n\u003e A selected piece of code should be gofmt-ed; it's likely for that code to be indented\nbecause it's\n\u003e inside a function. In that case it shouldn't modify raw strings.\n\nI just want to comment that sounds very unusual. I see no reason why anyone would want\nto select and gofmt a part of a .go file instead of just having an on-save hook that\nruns either gofmt or goimports on the entire file (in emacs, vim, Sublime Text or any\nother editor). What would happen if you select a partial for statement, or start\nselection not from the beginning of a line? Why not gofmt the entire .go file?\u003c/pre\u003e",
	"user": {
		"login": "shurcooL",
		"id": 1924134,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-15T08:36:51Z",
	"updated_at": "2014-12-08T10:23:42Z"
}
