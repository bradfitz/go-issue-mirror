{
	"id": 69295721,
	"body": "I don't see how to do the linker script trick on Darwin.\r\n\r\nHere is another idea, kind of like the earlier ideas but it's simpler than I thought.  Link the .o with -r without libgcc.  Then examine the symbols in the object--we have the packages we need for that.  The libgcc symbols are easy to spot: they are undefined and start with \"__\".  We write some archive parsing code--archives are pretty simple and pretty much the same on all platforms.  We use that code to read libgcc.a and find the objects that define those symbols (if we can't find the symbol, we ignore it; it must be defined in some other library).  We pull those objects out of libgcc.a and store them somewhere in the Go .a file with their name.  Now at final link time, when doing internal linking, we gather together all those libgcc objects, pick one for each name, and add them to the final link.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-09T05:41:59Z",
	"updated_at": "2015-01-09T05:41:59Z"
}
