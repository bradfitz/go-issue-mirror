{
	"id": 69339736,
	"body": "I thought about the ld -r -lgcc approach, but it doesn't work.  You wind up with a single object.  In the final link, you will have a collection of single objects.  It could be the case that you wind up with two objects, one of which defines symbols A and B, and one of which defines symbols A and C.  You can't link those objects together, because you will get a multiple definition error on A.  You can't omit either one.  So you are stuck.\r\n\r\nIf it were easy to modify a file to mark a symbol as comdat we could do that, but it is not.  In ELF symbols are not comdat, sections are.  You have to create a section group that refers to other sections, and mark that entire group as comdat.  Once the object has been linked together, it's too late.\r\n\r\nYou're right about libgcc objects referring to other libgcc objects.  That is a bit of a pain.\r\n\r\nIt doesn't matter if you see __ symbols that aren't in libgcc.  You can ignore those, as they must be coming from somewhere else.\r\n\r\nYou're right about isinfd32/isinfd64/isinfd128.  I have no idea what those are doing in libgcc.  They are part of the binary decimal floating point support.  I've asked about them on the gcc mailing list.  I suspect it's a mistake.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-09T14:23:14Z",
	"updated_at": "2015-01-09T14:23:14Z"
}
