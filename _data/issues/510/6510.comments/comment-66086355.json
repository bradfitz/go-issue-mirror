{
	"id": 66086355,
	"body": "\u003ca id=\"c27\"\u003e\u003c/a\u003eComment 27:\n\n\u003cpre\u003e\u003eCorrect me if I am wrong, but, reading this, I take it we are covered on 386. I\n\u003econsider splitting of float64/int64/uint64 into uintptr is OK for this level\n\u003e(syscall). Perhaps we can provide some little functions to help with splitting here.\n\nI did not think of splitting that might work.  Since the current asm routine (386\nversion) just copies from the go stack to the c stack for the new call.  I was thinking\nit might just be easier to make a byte slice of the args and copy that.\nThat is what the \"type CallStack []byte\" thing above was, splitting is probably faster\nat runtime though.\n\n\u003eThank you for doing that. You are using int, float and double in your C code there.\n\u003eHow large are these? I am bit concerned about Go call matching these parameters.\n\nint might be questionable I will switch it to int32_t which is not.\nfloat and double I have never seen as anything other than what go calls float32 and\nfloat64, we could add checks to the C code though.  (ignoring x87 long double...)\n\n\u003eBut since you've mentioned opengl32.dll, why don't we call glClearDepth and \n\u003eglClearColor there instead? We won't need gcc for that test then. Also the test \n\u003ewould be a nice simple example for other users.\n\nWe could, but it would require we have a current opengl context.  Which would require we\nhave a window or an off screen buffer.  We are talking at least 10 calls into the\nwindows api before we get an opengl context.\n\nI spent 20 mins grep'ing the mingw headers for calls that use float or double in the\nwindows api.  They were all drawing calls (in gdi32) and some networking protocols? (ITT\n?).  Probably not usable for testing.\n\nThat test DLL has no prereqs.  It also has float32 return values and simplicity.\nAll of the test functions just add the args together and return the sum.\nIf they get scrambled or ignored going in the sum will not match the sum we make in go\nprior to the call.\n\nWhen i said\n\u003eMS talks about unprototyped functions and how all 8 are considered volatile every call.\nThe important part was all 8 of those regs can get clobbered every call (amd64 only).\nNo clue what unprototyped funcs are, I have some guesses but I don't think it matters.\u003c/pre\u003e",
	"user": {
		"login": "bryanturley",
		"id": 1634211,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-02T14:53:26Z",
	"updated_at": "2014-12-08T10:36:00Z"
}
