{
	"id": 66086333,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003eIt also appears to incorrect for floats.  I didn't actually test it, just been reading\nup on the calling conventions.\n\nTEXT runtimeÂ·callbackasm1(SB),NOSPLIT,$0\n  // Construct args vector for cgocallback().\n  // By windows/amd64 calling convention first 4 args are in CX, DX, R8, R9\n  // args from the 5th on are on the stack.\n  // In any case, even if function has 0,1,2,3,4 args, there is reserved\n  // but uninitialized \"shadow space\" for the first 4 args.\n  // The values are in registers.\n    MOVQ  CX, (16+0)(SP)\n    MOVQ  DX, (16+8)(SP)\n    MOVQ  R8, (16+16)(SP)\n    MOVQ  R9, (16+24)(SP)\n\nAgain if those first 4 args are floats they are switched for a xN register I believe.\n\nThe comment should read\n  // By windows/amd64 calling convention first 4 args are in CX/X0, DX/X1, R8/X2, R9/X3  (exclusively I believe, not in both like I did in my test fix)\n\nSo it is correct for integers only again.  I may not be reading this one correctly\nthough.\n\nThe first function is called asmstdcall but performs a fastcall, stdcall uses only\nstack.  I have still not actually found official docs for 32bit calling convention in\nwindows.  I don't know how anyone writes code for this platform... heh ;)\n\nThis is the most credible source I have found so far\n\u003ca href=\"http://agner.org/optimize/calling_conventions.pdf\"\u003ehttp://agner.org/optimize/calling_conventions.pdf\u003c/a\u003e\u003c/pre\u003e",
	"user": {
		"login": "bryanturley",
		"id": 1634211,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-30T01:20:12Z",
	"updated_at": "2014-12-08T10:35:59Z"
}
