{
	"id": 66086357,
	"body": "\u003ca id=\"c29\"\u003e\u003c/a\u003eComment 29:\n\n\u003cpre\u003e\u003e We are not going to do anything for this for Go 1.2.\n\nMakes sense to me, and I assumed that would be the case as I was writing the initial\nreport.\n\n\u003esyscall.Syscall cannot possibly know\n\u003ewhich arguments are supposed to be floats and which are integers.\n\nsyscall.Syscall also doesn't differentiate between (u)int8/(u)int16/(u)int32 either and\ncannot for the same reason.  All of those are working fine.  I think the 386 not working\nfor 64bit values was just an oversight or a shortcut.  \n\nIn windows 386 (stdcall) all of the arguments are 32bit or 64bit values on the stack.\nCurrently it just can't handle putting 64bit values on the stack since it only deals in\n32bit uintptr's.\nI believe it can work with the Alex's splitting idea with no changes to the syscall\npackage now, I was just about to read up and test.\n\nIt may be as simple as 4 more mov instructions for amd64 (4 line change), and splitting\n64bit vals into two args for 386 (no change unless we add a split helper func in\nsyscall).\u003c/pre\u003e",
	"user": {
		"login": "bryanturley",
		"id": 1634211,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-02T17:51:17Z",
	"updated_at": "2014-12-08T10:36:00Z"
}
