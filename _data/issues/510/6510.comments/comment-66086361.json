{
	"id": 66086361,
	"body": "\u003ca id=\"c33\"\u003e\u003c/a\u003eComment 33:\n\n\u003cpre\u003e\u003eWhat about r2 in\n\nIt won't hold a full float64.\nWe could if they returned uint64s instead of uintptrs, but go 1.0 promise (applies to\nsyscall?)\n\nIt could work with a 2nd version of asmstdcall that got the x87 regs.\nOr modify the first version to take a flag on what to return.\nThen a 2nd set of syscall.SyscallX() to call which ever of those methods came into being.\nIt is not impossible it will just break or add API.\n\n\u003e Your call if you want to push this.\n\nWell if you want to I will write up and submit code to make 386 work after go 1.2.\nBut it will involve a 2nd set of syscall.SyscallX funcs or changing the sigs of the\ncurrent ones.\nAnd an asmstdcallfloat or modified version of the original.\n\nI already generate all of the opengl calls in cgo for linux so just need to do some\nminor tweaks probably to fix it for windows again.\nI have just seen a lot of calling DLLs with SyscallX's (and the wiki page), so I\nmimicked that style for windows, then it didn't work.\n\n\u003e Use cgo. This is what it's for.\n\nI am thinking so as well.  I was really liking the compile speed without involving gcc\nthough. It does work on amd64 without any api changes.\nI think I will actually just use a hybrid approach I don't want to rewrite all these\nwindow calls in c and they don't use floats.  syscall for window creation, input events\nand cgo for gl calls.\n\nLines like \nreturn *(*float32)(unsafe.Pointer(\u0026ret)) // ret being uintptr \nare a bit annoying and I have had to fix a few that were wrong already.\nBack to c with lines like that ;)\u003c/pre\u003e",
	"user": {
		"login": "bryanturley",
		"id": 1634211,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-03T03:03:44Z",
	"updated_at": "2014-12-08T10:36:00Z"
}
