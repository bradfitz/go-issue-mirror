{
	"id": 66060275,
	"body": "\u003ca id=\"c26\"\u003e\u003c/a\u003eComment 26 by **lawrence.kesteloot**:\n\n\u003cpre\u003eFor two years I've been using the Tornado web framework (Python), which is\nsingle-threaded and asynchronous. It has an on_connection_close() callback that is\ncalled immediately when the client disconnects (modulo proxies etc). It's incredibly\nuseful. Here are two examples:\n\nA chat room where you GET for the next line from other chatters. When a client\ndisconnects you want to announce to the room that the person has left.\n\nA GET request to retrieve some data. The data also comes back with a version number. The\nclient then immediately does another GET, specifying the version number. The GET hangs\nas long as the specified version number is current. The GET is released with new data\nand version when they change. You may have lots of clients waiting like this and you\nwant to clean out blocked handlers when clients disconnect. It may also be important to\nknow when they disconnect (say, to garbage-collect data structures associated with them).\n\nWhen I started learning Go this was almost the first thing I looked for (along with how\nmany long-running handlers it could handle). I agree with others that hijacking is not\nthe right solution.\n\nSeveral of the projects I've implemented in the last two years would not be possible (I\nbelieve) in Go.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-10-12T04:55:15Z",
	"updated_at": "2014-12-08T10:13:23Z"
}
