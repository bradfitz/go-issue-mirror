{
	"id": 66060270,
	"body": "\u003ca id=\"c21\"\u003e\u003c/a\u003eComment 21:\n\n\u003cpre\u003eA big use case for this is long polling. The fact than IE 9 doesn't support websockets\npretty much means I have to do long polling. Flash is not an option for us.\n\nWith long polling I have a select{} on a write channel. The request is hung there until\nsomething comes in on the write channel. I need some way of knowing when an unexpected\ndisconnect happens. Polling writes is very inefficient.\n\nHijacking is really wonky. After you Hijack there's no way to Un-Hijack it. I understand\nthe purpose of the Hijack - start off as HTTP protocol and do something else (websocket\nhandshake, typically). But hiding the connection object from the public API is just\ncrude. Right now the only way to make this work is either to modify the core, or Hijack\nthe connection and duplicate a bunch of code that ResponseWriter is supposed to do. \n\nWhat it comes down to is I need the connection/buffer objects AND I want to continue\nspeaking HTTP. There should be no reason I shouldn't be able to do that. \n\nIf you really don't want to expose the connection object a function that blocks until\nthe connection closes OR something is written by ResponseWriter would work. In that case\nI can block on my write channel on another goroutine. I don't necessarily need a\ncallback, I just need to bock the Handler from finishing until a disconnect/write occurs.\u003c/pre\u003e",
	"user": {
		"login": "lukescott",
		"id": 486224,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-05-23T23:04:22Z",
	"updated_at": "2014-12-08T10:13:23Z"
}
