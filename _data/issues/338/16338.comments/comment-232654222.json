{
	"id": 232654222,
	"body": "Delve: cool!\r\n\r\nHowever this is not an issue for \"dlv debug\", since it is compiling things with \"-N -l\". DWARF looks fine in that case:\r\n\r\n```\r\n \u003c1\u003e\u003c1c53f\u003e: Abbrev Number: 2 (DW_TAG_subprogram)\r\n    \u003c1c540\u003e   DW_AT_name        : github.com/thanm/gccgo-demangler/demangler.dem_struct\t\r\n    \u003c1c576\u003e   DW_AT_low_pc      : 0x470e00\t\r\n    \u003c1c57e\u003e   DW_AT_high_pc     : 0x4727d0\t\r\n    \u003c1c586\u003e   DW_AT_external    : 1\t\r\n...\r\n \u003c2\u003e\u003c1c6b1\u003e: Abbrev Number: 4 (DW_TAG_variable)\r\n    \u003c1c6b2\u003e   DW_AT_name        : fieldnames\t\r\n    \u003c1c6bd\u003e   DW_AT_location    : 5 byte block: 9c 11 b0 72 22 \t(DW_OP_call_frame_cfa; DW_OP_consts: -1744; DW_OP_plus)\r\n    \u003c1c6c3\u003e   DW_AT_type        : \u003c0x4529b\u003e\t\r\n\r\n```\r\nFor \"dlv exec\" run on regular go-compiled binary I see the same as gdb, e.g. \"could not find symbol value\" for the local slice/string variables that have been split, plus the clutter/cruft for all of the split fields (ptr, len, etc).\r\n\r\nFor regular compiles with optimization it seems that there isn't much point emitting location expressions for locals corresponding to split components of strings, slices, etc. At least that's how I see it.\r\n\r\nI will experiment and see if I can come up with a patch that suppresses the DW_TAG_variable's DIEs for these vars. Might be interesting.\r\n\r\n",
	"user": {
		"login": "thanm",
		"id": 12280172,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-14T12:41:43Z",
	"updated_at": "2016-07-14T12:41:43Z"
}
