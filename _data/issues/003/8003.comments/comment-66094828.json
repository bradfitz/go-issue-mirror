{
	"id": 66094828,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6 by **alex.tomlins@digital.cabinet-office.gov.uk**:\n\n\u003cpre\u003eHi, thanks for getting back to me.\n\nI've done some more digging, and the problem only seems to surface with a request read\nfrom the network.  More specifically, only when req.Body is an instance of http.body. \nI've created an example here: \u003ca href=\"http://play.golang.org/p/2BkktJSnjr\"\u003ehttp://play.golang.org/p/2BkktJSnjr\u003c/a\u003e.\n\nOn go 1.1.2 it returns:\n\n  $ go run test.go \n  go1.1.2\n  http: Request.ContentLength=10 with Body length 3\n\nWhereas on go 1.2.1 it returns:\n\n  $ go run test.go \n  go1.2.1\n  unexpected EOF\n\nI think this is because the Read method in http.body now returns an\nio.ErrUnexpectedEOF[1], which is therefore not swallowed by io.Copy called in\ntransferWriter.WriteBody[2].\n\n\nI'm aware that the way we're currently intercepting these errors is somewhat fragile. \nIs there a better way of identifying an error returned by http.Transport.RoundTrip\nthat's caused by a mismatched Content-Length header?\n\n\nthanks,\nAlex\n\n[1]\n\u003ca href=\"https://code.google.com/p/go/source/browse/src/pkg/net/http/transfer.go?name=release-branch.go1.2#547\"\u003ehttps://code.google.com/p/go/source/browse/src/pkg/net/http/transfer.go?name=release-branch.go1.2#547\u003c/a\u003e\n[2]\n\u003ca href=\"https://code.google.com/p/go/source/browse/src/pkg/net/http/transfer.go?name=release-branch.go1.2#196\"\u003ehttps://code.google.com/p/go/source/browse/src/pkg/net/http/transfer.go?name=release-branch.go1.2#196\u003c/a\u003e\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-05-16T10:15:14Z",
	"updated_at": "2014-12-08T10:44:22Z"
}
