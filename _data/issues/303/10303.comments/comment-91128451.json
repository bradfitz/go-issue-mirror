{
	"id": 91128451,
	"body": "@dvyukov\r\n\r\nI think windows syscall might have same problem:\r\n\r\n```\r\nfunc syscall_Syscall(fn, nargs, a1, a2, a3 uintptr) (r1, r2, err uintptr) {\r\n        var c libcall\r\n        c.fn = fn\r\n        c.n = nargs\r\n        c.args = uintptr(unsafe.Pointer(\u0026a1))\r\n        cgocall_errno(asmstdcallAddr, unsafe.Pointer(\u0026c))\r\n        return c.r1, c.r2, c.err\r\n}\r\n```\r\n\r\nc does not escape to the heap. Our asm code writes into c.r1, c.r2, c.err just before syscall returns. That could be fatal if stack moved. Isn't it?\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-09T06:41:47Z",
	"updated_at": "2015-04-09T06:41:47Z"
}
