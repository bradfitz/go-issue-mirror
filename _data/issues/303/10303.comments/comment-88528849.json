{
	"id": 88528849,
	"body": "I can see the problem with passing stack pointers into C.  While in C the\nstack can shrink, and that induces a stack copy.  Any pointers into the\nstack held by C code become invalid (the stack copier doesn't know where\nthose are so it can't update them).\n\nSo I don't think we should allow pointers to stack objects to escape to C.\n\nThe other option would be to disable shrinking while in cgo.  Or shrink\nstacks in place.  Both are possible, but come with nontrivial penalties.\n\nOn Wed, Apr 1, 2015 at 7:36 AM, JT Olds \u003cnotifications@github.com\u003e wrote:\n\n\u003e I agree it does seem like keeping zero-copy byte slices between C and Go\n\u003e kills a lot of possible Go GC strategies (unless byte slices are special\n\u003e cased and come out of a different memory segment I suppose). @dvyukov\n\u003e \u003chttps://github.com/dvyukov\u003e, in the case that the heap isn't being moved\n\u003e around, is there much harm in forcing things that go into C-land to the\n\u003e heap? I think you end up getting the ability to remember Go pointers in\n\u003e C-land for free that way.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/10303#issuecomment-88507903\u003e.\n\u003e\n",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-01T15:46:54Z",
	"updated_at": "2015-04-01T15:46:54Z"
}
