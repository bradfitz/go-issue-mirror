{
	"id": 88611364,
	"body": "Dmitry, I think you're right that copying can never happen in a syscall.\nBut it can happen in cgo, specifically during a Go callback.  See\nhttps://codereview.appspot.com/144130043/\n\n\nOn Wed, Apr 1, 2015 at 12:23 PM, Russ Cox \u003cnotifications@github.com\u003e wrote:\n\n\u003e This discussion is getting way out of scope for the issue. We are not\n\u003e going to redefine the way cgo works in this issue.\n\u003e\n\u003e The problem is that when I converted cgo from generating C stubs to\n\u003e generating Go stubs, I did not preserve the semantics of the generated C\n\u003e stubs, namely that (1) from the compiler's perspective all pointers passed\n\u003e to the stubs escape, and (2) from the garbage collector's perspective all\n\u003e pointers passed to the stubs are kept live for the duration of the stub\n\u003e call.\n\u003e\n\u003e As Minux wrote, the fix is similar to what we did in syscall: insert\n\u003e use(x) calls in the stubs after C is done with x, both to make x appear to\n\u003e escape and to make sure it is considered live until that point. Something\n\u003e along these lines should work and not require any assembly. The diff below\n\u003e illustrates what I mean but is not complete (isPointer needs to be defined)\n\u003e and not tested.\n\u003e\n\u003e g% git diff\n\u003e diff --git a/src/cmd/cgo/out.go b/src/cmd/cgo/out.go\n\u003e index 346ae94..0d36fd0 100644\n\u003e --- a/src/cmd/cgo/out.go\n\u003e +++ b/src/cmd/cgo/out.go\n\u003e @@ -76,6 +76,10 @@ func (p *Package) writeDefs() {\n\u003e         fmt.Fprintf(fgo2, \"var _ syscall.Errno\\n\")\n\u003e     }\n\u003e     fmt.Fprintf(fgo2, \"func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }\\n\\n\")\n\u003e +   if !*gccgo {\n\u003e +       fmt.Fprintf(fgo2, \"//go:linkname _Cgo_use runtime.cgoUse\\n\")\n\u003e +       fmt.Fprintf(fgo2, \"func _Cgo_use(unsafe.Pointer)\\n\")\n\u003e +   }\n\u003e\n\u003e     typedefNames := make([]string, 0, len(typedef))\n\u003e     for name := range typedef {\n\u003e @@ -403,7 +407,7 @@ func (p *Package) writeDefsFunc(fgo2 io.Writer, n *Name) {\n\u003e         return\n\u003e     }\n\u003e\n\u003e -   // C wrapper calls into gcc, passing a pointer to the argument frame.\n\u003e +   // Wrapper calls into gcc, passing a pointer to the argument frame.\n\u003e     fmt.Fprintf(fgo2, \"//go:cgo_import_static %s\\n\", cname)\n\u003e     fmt.Fprintf(fgo2, \"//go:linkname __cgofn_%s %s\\n\", cname, cname)\n\u003e     fmt.Fprintf(fgo2, \"var __cgofn_%s byte\\n\", cname)\n\u003e @@ -438,6 +442,11 @@ func (p *Package) writeDefsFunc(fgo2 io.Writer, n *Name) {\n\u003e     if n.AddError {\n\u003e         fmt.Fprintf(fgo2, \"\\tif errno != 0 { r2 = syscall.Errno(errno) }\\n\")\n\u003e     }\n\u003e +   for i, param := range d.Type.Params.List {\n\u003e +       if isPointer(param.Type) {\n\u003e +           fmt.Fprintf(fgo2, \"\\t_Cgo_use(unsafe.Pointer(p%d))\\n\", i)\n\u003e +       }\n\u003e +   }\n\u003e     fmt.Fprintf(fgo2, \"\\treturn\\n\")\n\u003e     fmt.Fprintf(fgo2, \"}\\n\")\n\u003e  }\n\u003e diff --git a/src/runtime/cgo.go b/src/runtime/cgo.go\n\u003e index 5dc83c0..3fc576a 100644\n\u003e --- a/src/runtime/cgo.go\n\u003e +++ b/src/runtime/cgo.go\n\u003e @@ -28,3 +28,11 @@ var iscgo bool\n\u003e  // cgoHasExtraM is set on startup when an extra M is created for cgo.\n\u003e  // The extra M must be created before any C/C++ code calls cgocallback.\n\u003e  var cgoHasExtraM bool\n\u003e +\n\u003e +// cgoUse is called by cgo-generated code (using go:linkname to get at\n\u003e +// an unexported name). The calls serve two purposes:\n\u003e +// 1) they are opaque to escape analysis, so the argument is considered to\n\u003e +// escape to the heap.\n\u003e +// 2) they keep the argument alive until the call site; the call is emitted after\n\u003e +// the end of the (presumed) use of the argument by C.\n\u003e +func cgoUse(unsafe.Pointer) {}\n\u003e g%\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/10303#issuecomment-88600772\u003e.\n\u003e\n",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-01T19:50:56Z",
	"updated_at": "2015-04-01T19:50:56Z"
}
