{
	"id": 51282421,
	"number": 4641,
	"state": "closed",
	"title": "With time.RFC3339Nano the output from Format() can not be used in time.Parse().",
	"body": "by **brady**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n\u003ca href=\"http://play.golang.org/p/PYWwr-fAKh\"\u003ehttp://play.golang.org/p/PYWwr-fAKh\u003c/a\u003e\n\nNote that play.golang.org sets the time to a fixed value so I specifically ensure that\nit has some nanoseconds attached, hence the first awkward code to generate 'a'.\n\nWhat is the expected output?\nSuccess. The time generated by Format() should be able to be passed with the same exact\nformat string into Parse().\n\nWhat do you see instead?\nAn error parsing the nanoseconds because they are not 9 digits long.\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g, gccgo\n\nWhich operating system are you using?\nMac OS 10.8, Ubuntu\n\nWhich version are you using?  (run 'go version')\n1.0.3 (mac), 1.0.2 (linux)\n\nPlease provide any additional information below.\n\nNanoseconds in RFC3339 (\u003ca href=\"http://www.ietf.org/rfc/rfc3339.txt)\"\u003ehttp://www.ietf.org/rfc/rfc3339.txt)\u003c/a\u003e are poorly defined at best,\nhowever an example given within the RFC is: 1985-04-12T23:20:50.52Z  which includes a\ndecimal which is only two characters long, as such it seems that Parse() is the culprit\nhere, refusing to parse a time stamp without all 9 digits for nanoseconds.\n\nIdeally, each predefined format string should be run through a test in time_test.go to\nensure that the string produced by Format() can be passed into Parse() with the same\nformat string to return the same results.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:24:36Z",
	"created_at": "2013-01-10T23:45:54Z",
	"updated_at": "2016-06-24T22:31:01Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
