{
	"id": 66086233,
	"body": "\u003ca id=\"c7\"\u003e\u003c/a\u003eComment 7 by **Christopher.Pfohl**:\n\n\u003cpre\u003eSorry for the long pause, work required a work around, and I didn't have time to get\nback here.\n\nI'll explain what I was trying to do, perhaps I'm doing it wrong, thinking about it\nwrong, or something.  Should have done that in the first place, programmers write the\nworst bug reports...I am a programmer.\n\nI want to take the results of a query and scan them into `map[string]interface{}`, where\nthe key is the column name, and the value is the actual value at that location.  This is\nhandy for a variety of reasons, for me it's because I want to return the results of a\nquery as JSON without an intermediate struct that will be 100% coupled to my query.\n\nCurrently I'm doing this like so: \u003ca href=\"http://play.golang.org/p/-vYciy-s9D\"\u003ehttp://play.golang.org/p/-vYciy-s9D\u003c/a\u003e\n\nIt works great as long the source data is typed correctly, but if the source data comes\nfrom a driver which follows the 'convert to []byte' rule it fails, because deserializing\n[]byte into interface{} results in the same thing when the original value was a varchar,\nblob, or fixed width char(n); heck, xml in sqlserver is a []byte.\n\nDoes that make more sense?\n\nThe example I passed along doesn't run because I'm not really sure how to fake a\n*sql.Rows...so if someone creates (or points me at instructions to create) the\nmockRows() func it'll better exemplify this for you.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-16T12:02:27Z",
	"updated_at": "2014-12-08T10:35:53Z"
}
