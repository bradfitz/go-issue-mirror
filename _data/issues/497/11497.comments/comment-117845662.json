{
	"id": 117845662,
	"body": "It's working as intended. There's a good explanation [here](https://groups.google.com/d/msg/golang-nuts/42iXW3mqCzc/y-lsBpqwAwEJ).\r\n\r\n\u003e We like regularity too, but we like readability more, \r\n\u003e and the few breaks from regularity in gofmt are for \r\n\u003e things that we felt, after over a year of writing \r\n\u003e Go programs, enhanced readability enough to justify \r\n\u003e breaking from the simpler rules. \r\n\u003e \r\n\u003e In this specific case, 1\u003c\u003cx + y is much clearer as \r\n\u003e to its meaning than 1 \u003c\u003c x + y, because it emphasizes \r\n\u003e the precedence. \r\n\u003e \r\n\u003e Your example -  \"x \u0026\u0026 rand.Int()%RAND_FACT\" - is not \r\n\u003e the whole story: you lifted a fragment.  The real expression \r\n\u003e would have been something like \r\n\u003e \r\n\u003e     x \u0026\u0026 rand.Int()%RAND_FACT != 0 \r\n\u003e \r\n\u003e since a % cannot produce a bool and \u0026\u0026 requires one. \r\n\u003e If the op were \u0026 instead of %, like in \r\n\u003e \r\n\u003e     x \u0026\u0026 rand.Int()\u0026RAND_MASK != 0 \r\n\u003e \r\n\u003e then I appreciate the visual reinforcement that it's being \r\n\u003e parsed the way I intend (i.e. it has a different meaning \r\n\u003e here than it would in C). \r\n\u003e \r\n\u003e Especially because operator precedence is a notorious \r\n\u003e source of confusion in C and because Go changed \r\n\u003e the precedences to simplify things, we think this is an \r\n\u003e important way to help programmers adjust. \r\n",
	"user": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-01T22:59:06Z",
	"updated_at": "2015-07-01T22:59:06Z"
}
