{
	"id": 51282367,
	"number": 4603,
	"state": "closed",
	"title": "text/template: empty templates with same name don't result in error",
	"body": "\u003cpre\u003eWhen templates with the same name are parsed together, an error only occurs if all\ntemplates are not empty:\n\n\u003ca href=\"http://play.golang.org/p/zCOU4ggrqe\"\u003ehttp://play.golang.org/p/zCOU4ggrqe\u003c/a\u003e\n\nOnly the last test here pass on tip:\n\nfunc TestRedefinition(t *testing.T) {\n\t_, err := New(\u0026quot;root\u0026quot;).Parse(`{{define \u0026quot;t\u0026quot;}}{{end}}{{define \u0026quot;t\u0026quot;}}{{end}}`, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, make(map[string]*Tree), nil)\n\tif err == nil {\n\t\tt.Errorf(\u0026quot;expected error\u0026quot;)\n\t}\n\t_, err = New(\u0026quot;root\u0026quot;).Parse(`{{define \u0026quot;t\u0026quot;}}a{{end}}{{define \u0026quot;t\u0026quot;}}{{end}}`, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, make(map[string]*Tree), nil)\n\tif err == nil {\n\t\tt.Errorf(\u0026quot;expected error\u0026quot;)\n\t}\n\t_, err = New(\u0026quot;root\u0026quot;).Parse(`{{define \u0026quot;t\u0026quot;}}{{end}}{{define \u0026quot;t\u0026quot;}}b{{end}}`, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, make(map[string]*Tree), nil)\n\tif err == nil {\n\t\tt.Errorf(\u0026quot;expected error\u0026quot;)\n\t}\n\t_, err = New(\u0026quot;root\u0026quot;).Parse(`{{define \u0026quot;t\u0026quot;}}a{{end}}{{define \u0026quot;t\u0026quot;}}b{{end}}`, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, make(map[string]*Tree), nil)\n\tif err == nil {\n\t\tt.Errorf(\u0026quot;expected error\u0026quot;)\n\t}\n}\n\nIs this expected?\u003c/pre\u003e",
	"user": {
		"login": "moraes",
		"id": 3164,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2014-12-08T10:24:26Z",
	"created_at": "2013-01-01T13:44:57Z",
	"updated_at": "2016-06-24T22:30:38Z"
}
