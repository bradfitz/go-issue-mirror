{
	"id": 192360321,
	"body": "I agree that it's a bit of a leap.\r\n\r\n\u003e constant 0.9 truncated to integer\r\n\r\nCompare that to the error when only variables are in the expression. It includes the expression and the types of the variables in question: https://play.golang.org/p/nfZ_xMultw\r\n\r\n\u003e invalid operation: w * x (mismatched types float64 and int)\r\n\r\nI like the idea of including (x) in the error message.\r\n\r\n\u003e constant truncated: 0.9 * x ...\r\n\r\nOn the other hand, it's not always clear which variables are the cause when only variables are involved: https://play.golang.org/p/9_EchugdkA\r\n\r\n\u003e invalid operation: v * w * x (mismatched types float64 and int)\r\n\r\nSo maybe there's a better way to do that error message as well. What comes to mind is the conversion syntax to indicate the types:\r\n\r\n\u003e constant 0.9 truncated to integer: 0.9 * int(x)\r\n\u003e mismatched types: float64(v) * float64(w) * int(x)\r\n\r\nHere's a slightly more complex [constants example](https://play.golang.org/p/wklLBzn6XY) where it might be nice if the error indicated that `w` is involved as well as that `x` is an integer (the reason for the truncation)\r\n\r\n```\r\nconst w = 0.9\r\nvar x = 10\r\nvar z = w * w * x\r\n```\r\n\r\n\u003e constant 0.81 truncated to integer\r\n\u003e constant 0.81 truncated to integer: w * w * int(x)\r\n\u003e constant 0.81 truncated to integer: 0.9 * 0.9 * int(x)\r\n\r\n\r\nhttps://play.golang.org/p/wklLBzn6XY\r\n\r\nThis is my random issue today via [CodeTriage](http://www.codetriage.com/golang/go).",
	"user": {
		"login": "nathany",
		"id": 4566,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-04T17:06:35Z",
	"updated_at": "2016-03-04T17:09:40Z"
}
