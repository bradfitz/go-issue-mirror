{
	"id": 137226738,
	"number": 14565,
	"state": "open",
	"title": "cmd/compile: coverage instrumentation for fuzzing",
	"body": "Go-fuzz (https://github.com/dvyukov/go-fuzz) is quite successful at finding bugs in Go code and reasonably widely used in Go community. However there are several problems with the current go-fuzz implementation that hinder wider adoption (in particular internal adoption at Google):\r\n1. go-fuzz mimics go tool build logic, which leads to constant breakages.\r\n2. go-fuzz-build does not handle cgo, and it is hard to implement.\r\n3. coverage instrumentation is source-to-source, which makes it very difficult to integrate with other build systems.\r\n4. source-to-source transformation can't handle all cases and has limited transformation capabilities (e.g. instrumenting \u0026\u0026 is tough). Some code patterns can be mishandled or lead to build failures.\r\n5. source-to-source transformation produces slow code (lots of closures).\r\n\r\nIdeally we have coverage instrumentation in compiler, and corresponding support in go tool. Something similar to -race flag, which triggers compiler instrumentation and adds race build tag.\r\n",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"created_at": "2016-02-29T11:29:18Z",
	"updated_at": "2016-02-29T11:30:25Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
