{
	"id": 66051362,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eMore evidence in support of the above interpretation of the spec. The following program:\n\npackage main\n\ntype S struct{ x int }\n\ntype X3 interface {\n\tfoo() struct{ x int }\n}\n\ntype T3 bool\nfunc (t T3) foo() S {\n\treturn S{0}\n}\n\nfunc main() {\n\tt3 := T3(false)\n\tvar _ X3 = t3  // t3 is assignment compatible with X3\n\tvar _ = X3(t3)  // conversion legal because t3 is assignment compatible with X3\n}\n\nis accepted by 6g; it accepts the t3 interface as compatible with X3 despite the fact\nthat the result type of foo() is merely \"compatible\" and not \nidentical. The respective conversion is legal as a consequence.\n\nUsing the argument:\n``In general, a conversion succeeds if the value of x is assignment compatible with type\nT, or if the value \nwould be assignment compatible with type T if the value's type, or T, or any of their\ncomponent types \nwere unnamed.''\n\nt3 should be convertible to an X2 even if the result type of T3's foo() were a named\ntype T with T struct{x int}.\u003c/pre\u003e\n\n\n_Owner changed to **r...@golang.org**._",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-05-25T17:59:28Z",
	"updated_at": "2014-12-08T10:05:57Z"
}
