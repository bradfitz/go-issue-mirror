{
	"id": 66051357,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eA \"type literal\" is the source text describing the respective type. For an interface\ntype, the type literal is the text from \"interface{\" to the closing \"}\" (see: \n\u003ca href=\"http://golang.org/doc/go_spec.html#Types\"\u003ehttp://golang.org/doc/go_spec.html#Types\u003c/a\u003e ).\n\nConversions are primarily intended to operate on concrete (i.e., non-interface) types; a\nconversion is concerned about the value (and possibly changing it) and \nignores any associated methods. Interface types (i.e., abstract types) don't say\nanything about values, only methods. One might argue that conversions shouldn't be \nallowed on interfaces in the first place, and converting a value of a concrete type to\nan interface (say X1(t1)) is only useful to obtain the interface type, say for a \nvariable declaration (as in: x1 := X1(t1)). Conversely, the opposite operation\n(converting an interface variable to a concrete type) is strictly forbidden; instead a\ntype \nassertion is used (because it may fail, while conversions never fail).\n\nThat said, converting an interface type to another interface type is strictly a typing\noperation; only methods are involved. Furthermore, function conversions, such as \nin:\n\ntype F1 func(x Y) int\ntype F2 func(x int) Y\n\nvar f1 F1\nvar f2 F2\nf1 = F1(f2)\nf2 = F2(f1)\n\n(using type Y int) are perfectly legal.\n\nThus a conversion of the form X2(x1) (as in your example) is essentially a set of method\n(function) conversions. Arguably that should be allowed.\u003c/pre\u003e\n\n\n_Owner changed to **g...@golang.org**._\n\n_Status changed to **Thinking**._",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-05-25T16:34:54Z",
	"updated_at": "2014-12-08T10:05:57Z"
}
