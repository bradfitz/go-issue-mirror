{
	"id": 51282257,
	"number": 4519,
	"state": "closed",
	"title": "go/parser: too many errors from typing == as =",
	"body": "\u003cpre\u003e$ cat x.go\npackage p\n\nimport (\n    \u0026quot;strings\u0026quot;\n    \u0026quot;testing\u0026quot;\n    . \u0026quot;bufio\u0026quot;\n)\n\ntype negativeReader int\n\nfunc (*negativeReader) Read([]byte) (int, error) {panic(1)}\n\nfunc TestNegativeRead(t *testing.T) {\n\t// should panic with a description pointing at the reader, not at itself.\n\t// (should NOT panic with slice index error, for example.)\n\tb := NewReader(new(negativeReader))\n\tdefer func() {\n\t\tif err := recover(); err = nil {\n\t\t\tt.Fatal(\u0026quot;read did not panic\u0026quot;)\n\t\t} else if !strings.Contains(err.Error(), \u0026quot;reader returned negative count from Read\u0026quot;) {\n\t\t\tt.Fatal(\u0026quot;wrong panic: %v\u0026quot;, err)\n\t\t}\n\t}()\n\tb.Read(make([]byte, 100))\n}\n\n$ gofmt x.go\nx.go:17:8: expected function/method call\nx.go:18:28: expected '{', found '='\nx.go:19:33: missing ',' before newline in composite literal\nx.go:20:5: expected ';', found 'else'\nx.go:23:3: expected ';', found '('\nx.go:25:3: expected '}', found 'EOF'\n\n$ go tool 6g x.go\nx.go:18: err = nil used as value\nx.go:20: err.Error undefined (type interface {} has no field or method Error)\n\nIt would be nice if the parser could handle seeing an assignment where an expression was\nexpected a bit more gracefully. Ideally it would produce just the single line of output\nthat 6g does (at x.go:18).\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2014-12-08T10:24:05Z",
	"created_at": "2012-12-10T22:14:39Z",
	"updated_at": "2016-06-24T22:29:40Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
