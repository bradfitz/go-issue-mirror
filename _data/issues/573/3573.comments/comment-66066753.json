{
	"id": 66066753,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eIt's a straighforward but very serious bug.  The hashmap code uses a uint8 to store the\nsize of a data element.  That means that the hashmap code fails if the total of the key\nsize plus the data size, with appropriate rounding, is \u003e= 256.  That was fine before Go\n1, but it failed once we started to permit struct and array values to be used as hash\nkeys.\n\nBut strangely there is already an assertion to check for this type of error in hash_init:\n\tassert (h-\u003edatasize == datasize);\nAh, but it doesn't work because the caller uses h-\u003evaloff, which is itself a uint8 field.\n\nHere is a possible fix but I'm not sure it's ideal or complete:\n\n\u003ca href=\"http://golang.org/cl/6137051\"\u003ehttp://golang.org/cl/6137051\u003c/a\u003e\u003c/pre\u003e\n\n\n_Owner changed to **---**._",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-04-29T05:02:45Z",
	"updated_at": "2014-12-08T10:18:47Z"
}
