{
	"id": 229784228,
	"body": "I know its been a while since I asked this question, but I would still like to see this addition. @minux  You seem to be more knowledgeable about the compile time problems. To the question @ianlancetaylor originally proposed:\r\n\r\n    if package A imports packages B and C, and B imports D#v1 and C imports D#v2\r\n\r\nthe source tree would look like this:\r\n```\r\nsrc/A\r\nsrc/B\r\nsrc/C\r\nsrc/D#v1\r\nsrc/D#v2\r\n```\r\n\r\nFirst D#v2 and D#v1 would be compiled, then they would be linked to C and B, respectively, which would then be compiled and linked to A, which would then be compiled. This seems like a relatively simple solution to the problem. \r\n\r\nA utility could be written to detect imports of different versions of the same package independent of the build or compile process. It would be up to package authors to use this utility at their own discretion. We could use notation similar to [semver](https://github.com/npm/node-semver) for the version numbers. Whenever `go get` is called it would simply obey the rules of the notation to retrieve and checkout the most recent allowable version of each package.\r\n\r\nThis seems like it would completely solve all of go's versioning problems with minimal overhead. Am I missing something that would make this a very complicated or undesirable change?",
	"user": {
		"login": "marksalpeter",
		"id": 1033500,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-30T20:48:08Z",
	"updated_at": "2016-06-30T20:53:55Z"
}
