{
	"id": 239805767,
	"body": "The GC and the compiler are conspiring here to do their best to clean up a\nprogram that does not close a file. \"Their best\" in this case means that\nthe compiler notices that \"l\" is dead after line 3 in main. The GC notices\nthat it hasn't done a GC is a long time so it executes a GC. The GC\ncorrectly notices that \"l\" is no longer live and the referent is collected.\nThe GC sees that the file that has not been closed so it runs a finalizer\nthat closes the file.\n\nAll this could have been avoided if the program simply closed the file\ninstead of relying on when the GC and finalizers are run and how good the\ncompiler is about identifying dead variables.\n\nYour questions.\nmy questions are:\n1. is this file descriptor closed by gc? Yes, by the finalizer.\n why struct member variable closed and global variable not?\n    The compiler thinks the global variable is live. The compiler can prove\nthe local variable is dead. The GC relies on this information.\n2. is there any suggested way to use file lock\n    If a program opens a file, close the file. Never rely on a finalizer,\nthey will cause pain. \"Never rely on a finalizer to close a file\" is an\ninstance of the more general statement \"Never rely on a finalizer\". Sure\nsometimes a program has no choice but finalizers should never be the first\nchoice.\n\nThe compiler and the GC will keep getting smarter. In this case 1.7 figured\nout that \"l\" is dead after line 3.\n\nOn Mon, Aug 15, 2016 at 7:16 AM, Dave Cheney \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e Can you provide a complete runnable example?\n\u003e\n\u003e \u003e On 15 Aug 2016, at 21:14, galric \u003cnotifications@github.com\u003e wrote:\n\u003e \u003e\n\u003e \u003e when i used member variable of a struct to store this os.File object, it\n\u003e was also closed even if the struct object not out of scope\n\u003e \u003e\n\u003e \u003e —\n\u003e \u003e You are receiving this because you commented.\n\u003e\n\u003e \u003e Reply to this email directly, view it on GitHub, or mute the thread.\n\u003e \u003e\n\u003e\n\u003e —\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/16700#issuecomment-239779874\u003e, or mute\n\u003e the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AA7Wn5sbfmhj87CSe-aTxfSH6dTVXRzpks5qgEqAgaJpZM4JkPRv\u003e\n\u003e .\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-15T13:47:34Z",
	"updated_at": "2016-08-15T13:47:34Z"
}
