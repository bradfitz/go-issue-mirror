{
	"id": 51276425,
	"number": 395,
	"state": "open",
	"title": "spec: derive array pointer from slice",
	"body": "\u003cpre\u003eCurrently, it's possible to convert from an array or array pointer to a slice, but\nthere's no way of reversing \nthis.\n\nA possible syntax could be similar to the current notation for type assertions:\n\nArrayAssertion  = \u0026quot;.\u0026quot; \u0026quot;[\u0026quot; Expression \u0026quot;:\u0026quot; Expression\n\u0026quot;]\u0026quot; .\n\nwhere the operands either side of the \u0026quot;:\u0026quot; are constant expressions.\n\nOne motivation for doing this is that using an array pointer allows the compiler to\nrange check constant \nindices at compile time.\n\na function like this:\n\nfunc foo(a []int) int\n{\n    return a[0] + a[1] + a[2] + a[3];\n}\n\ncould be turned into:\n\nfunc foo(a []int) int\n{\n    b := a.[0:4];\n    return b[0] + b[1] + b[2] + b[3];\n}\n\nallowing the compiler to check all the bounds once only and give compile-time errors\nabout out of range \nindices.\u003c/pre\u003e",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "LanguageChange"
		},
		{
			"name": "Thinking"
		}
	],
	"comments": 23,
	"created_at": "2009-12-08T15:42:39Z",
	"updated_at": "2015-09-21T16:28:11Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
