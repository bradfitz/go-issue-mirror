{
	"id": 152554103,
	"body": "I'm still not super excited about a global handler, but I think I see how this could work.\r\n\r\nI make a request on a http.Transport that I need to wrap / override within a library (in case someone at a higher level of application logic is tracing requests). \r\n\r\nMy ClientTrace object has a function pointer that returns an object of my choosing, so I return a handle object to associate things with at the point where I have a connection, associate that handle with the IP address it connected to (and chain the call down to any other handler). \r\n\r\nMy calling function then sends the request to something that can use the headers and path to look up the handle, and can from there determine the IP that I connected to (perhaps I stuff a GUID per-request into a request header to make it easier to associate a specific request with a handle). That way I can also more easily ignore any requests that someone else is making on the Transport.\r\n\r\nIt's a bit of a pain for anyone creating a library, because they should defer choices about the Transport to the application layer (for things like proxies, right?), but have to modify it to get the information that they need.",
	"user": {
		"login": "Redundancy",
		"id": 5021300,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-30T15:20:20Z",
	"updated_at": "2015-10-30T15:20:20Z"
}
