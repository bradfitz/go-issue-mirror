{
	"id": 149429378,
	"body": "I've written a reproducer, included below. Its perf_events profile, collected on linux/amd64, looks very similar to what I see for my production program in terms of CPU time spent in runtime.freeStackSpans (10%), in runtime.shrinkstack (83%), in runtime.stackalloc (37%), and in runtime.stackfree (37%).\r\n\r\nThe reproducer starts 10,000 goroutines which each repeatedly grow and shrink their stack by 10kB. The production program has around 200,000 goroutines and has a garbage collection every 60-120 seconds, so any goroutines that grow and shrink their stacks during that time will contribute to the mark termination pause. (Ironic that generating more garbage, which would lead to more frequent collections, could reduce the duration of each pause.)\r\n\r\nHere's output from some runs of the program on darwin/amd64.\r\n\r\n```\r\n$ go version\r\ngo version devel +3bc0601 Tue Oct 20 03:16:09 2015 +0000 darwin/amd64\r\n```\r\n\r\n```\r\n$ GODEBUG=gctrace=1 ./12967 \r\ngc 1 @0.002s 20%: 22+9.1+0.15+2.4+0.72 ms clock, 45+9.1+0+0/4.5/0+1.4 ms cpu, 10-\u003e14-\u003e13 MB, 15 MB goal, 8 P\r\ngc 2 @0.126s 7%: 0.24+24+0.001+0.065+0.50 ms clock, 0.48+24+0+1.0/0/6.2+1.0 ms cpu, 15-\u003e15-\u003e15 MB, 27 MB goal, 8 P\r\ngc 3 @0.856s 1%: 0.31+24+0.001+0.067+0.54 ms clock, 2.4+24+0+1.4/0.001/10+4.3 ms cpu, 22-\u003e22-\u003e16 MB, 30 MB goal, 8 P\r\ngc 4 @2.118s 0%: 0.25+24+0.001+0.066+0.51 ms clock, 2.0+24+0+0.029/0/13+4.1 ms cpu, 28-\u003e28-\u003e16 MB, 32 MB goal, 8 P\r\ngc 5 @3.684s 2%: 0.19+20+0.002+0.068+79 ms clock, 1.5+20+0+0.95/0.003/6.7+638 ms cpu, 31-\u003e31-\u003e16 MB, 32 MB goal, 8 P\r\ngc 6 @5.239s 2%: 0.36+24+0.001+0.10+0.53 ms clock, 2.9+24+0+0.031/0.021/13+4.2 ms cpu, 31-\u003e31-\u003e16 MB, 32 MB goal, 8 P\r\ngc 7 @6.904s 1%: 0.25+29+0.002+0.069+0.59 ms clock, 2.0+29+0+7.2/0.002/0.039+4.7 ms cpu, 32-\u003e32-\u003e16 MB, 33 MB goal, 8 P\r\ngc 8 @8.551s 1%: 0.22+20+0.002+0.065+23 ms clock, 1.8+20+0+1.7/0/7.1+185 ms cpu, 32-\u003e32-\u003e16 MB, 33 MB goal, 8 P\r\ngc 9 @10.175s 1%: 0.24+25+0.001+0.071+0.57 ms clock, 1.9+25+0+0/0.014/10+4.5 ms cpu, 32-\u003e32-\u003e15 MB, 33 MB goal, 8 P\r\ngc 10 @11.690s 1%: 0.21+26+0.002+0.072+0.60 ms clock, 1.6+26+0+5.6/0.002/0.016+4.8 ms cpu, 30-\u003e30-\u003e16 MB, 31 MB goal, 8 P\r\ngc 11 @13.316s 1%: 0.25+23+0.001+0.054+13 ms clock, 2.0+23+0+1.8/0.006/12+105 ms cpu, 32-\u003e32-\u003e16 MB, 33 MB goal, 8 P\r\ngc 12 @14.942s 1%: 0.24+19+0.001+0.059+8.8 ms clock, 1.9+19+0+0.80/0.001/7.1+70 ms cpu, 32-\u003e32-\u003e16 MB, 33 MB goal, 8 P\r\ngc 13 @16.603s 1%: 0.22+25+0.001+0.085+0.61 ms clock, 1.7+25+0+3.8/0.020/7.4+4.9 ms cpu, 32-\u003e32-\u003e16 MB, 33 MB goal, 8 P\r\ngc 14 @18.239s 1%: 0.22+20+0.001+0.15+14 ms clock, 1.7+20+0+0.034/0.010/10+112 ms cpu, 32-\u003e32-\u003e16 MB, 33 MB goal, 8 P\r\ngc 15 @19.875s 1%: 0.23+21+0.001+0.069+9.7 ms clock, 1.8+21+0+0/0.002/8.1+78 ms cpu, 32-\u003e32-\u003e15 MB, 33 MB goal, 8 P\r\ngc 16 @21.392s 0%: 0.21+23+0.001+0.067+0.59 ms clock, 1.6+23+0+0.26/0.002/10+4.7 ms cpu, 30-\u003e30-\u003e16 MB, 31 MB goal, 8 P\r\ngc 17 @23.014s 0%: 0.20+21+0.001+0.067+13 ms clock, 1.6+21+0+1.7/0.015/9.0+105 ms cpu, 32-\u003e32-\u003e16 MB, 33 MB goal, 8 P\r\n```\r\n\r\nDisabling stack shrinking makes the mark termination STW pauses significantly shorter.\r\n\r\n```\r\n$ GODEBUG=gctrace=1,gcshrinkstackoff=1 ./12967 \r\ngc 1 @0.002s 20%: 22+6.9+0.21+2.2+0.64 ms clock, 45+6.9+0+0/4.2/0+1.2 ms cpu, 10-\u003e14-\u003e13 MB, 15 MB goal, 8 P\r\ngc 2 @0.128s 6%: 0.30+23+0.001+0.069+0.56 ms clock, 0.60+23+0+0.82/0.002/8.5+1.1 ms cpu, 15-\u003e15-\u003e15 MB, 27 MB goal, 8 P\r\ngc 3 @0.841s 1%: 0.21+24+0.001+0.053+0.47 ms clock, 1.7+24+0+1.1/0.004/7.2+3.7 ms cpu, 22-\u003e22-\u003e16 MB, 30 MB goal, 8 P\r\ngc 4 @2.059s 0%: 0.29+24+0.001+0.058+0.43 ms clock, 2.0+24+0+0/0.010/8.1+3.0 ms cpu, 28-\u003e28-\u003e15 MB, 32 MB goal, 8 P\r\ngc 5 @3.475s 0%: 0.28+21+0.002+0.077+0.28 ms clock, 2.2+21+0+0.049/0.001/11+2.3 ms cpu, 29-\u003e29-\u003e16 MB, 30 MB goal, 8 P\r\ngc 6 @4.995s 0%: 0.20+19+0.002+0.077+0.28 ms clock, 1.6+19+0+0/0.027/9.5+2.3 ms cpu, 31-\u003e31-\u003e15 MB, 32 MB goal, 8 P\r\ngc 7 @6.509s 0%: 0.20+28+0.001+0.068+0.56 ms clock, 1.6+28+0+6.0/0.001/0.032+4.5 ms cpu, 30-\u003e30-\u003e16 MB, 31 MB goal, 8 P\r\ngc 8 @8.138s 0%: 0.21+20+0.001+0.077+0.27 ms clock, 1.6+20+0+0/0.018/7.0+2.1 ms cpu, 32-\u003e32-\u003e15 MB, 33 MB goal, 8 P\r\ngc 9 @9.652s 0%: 0.25+21+0.001+0.070+0.26 ms clock, 2.0+21+0+0.28/0.015/10+2.1 ms cpu, 30-\u003e30-\u003e16 MB, 31 MB goal, 8 P\r\ngc 10 @11.275s 0%: 0.23+22+0.002+0.078+0.64 ms clock, 1.8+22+0+0/0.018/7.6+5.1 ms cpu, 32-\u003e32-\u003e15 MB, 33 MB goal, 8 P\r\ngc 11 @12.791s 0%: 0.26+21+0.001+0.070+0.23 ms clock, 1.8+21+0+0/0.014/10+1.6 ms cpu, 30-\u003e30-\u003e15 MB, 31 MB goal, 8 P\r\ngc 12 @14.302s 0%: 0.20+19+0.002+0.073+0.28 ms clock, 1.6+19+0+0/0.002/7.2+2.2 ms cpu, 30-\u003e30-\u003e15 MB, 31 MB goal, 8 P\r\ngc 13 @15.815s 0%: 0.26+28+0.001+0.066+0.47 ms clock, 2.1+28+0+6.6/0/0.020+3.7 ms cpu, 30-\u003e30-\u003e16 MB, 31 MB goal, 8 P\r\ngc 14 @17.441s 0%: 0.26+24+0.001+0.067+0.56 ms clock, 2.0+24+0+1.2/0.001/8.5+4.5 ms cpu, 32-\u003e32-\u003e16 MB, 33 MB goal, 8 P\r\ngc 15 @19.064s 0%: 0.21+20+0.001+0.077+0.24 ms clock, 1.7+20+0+0/0.017/9.6+1.9 ms cpu, 32-\u003e32-\u003e15 MB, 33 MB goal, 8 P\r\ngc 16 @20.577s 0%: 0.22+22+0.001+0.079+0.54 ms clock, 1.8+22+0+0/0.002/9.5+4.3 ms cpu, 30-\u003e30-\u003e15 MB, 31 MB goal, 8 P\r\ngc 17 @22.091s 0%: 0.21+26+0.001+0.070+0.55 ms clock, 1.6+26+0+4.8/0.001/0.014+4.4 ms cpu, 30-\u003e30-\u003e16 MB, 31 MB goal, 8 P\r\n```\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"sync\"\r\n\t\"time\"\r\n)\r\n\r\nconst (\r\n\tballastSize   = 10 \u003c\u003c 20\r\n\tgarbageSize   = 1 \u003c\u003c 20\r\n\tgarbagePeriod = 100 * time.Millisecond\r\n\r\n\tstackCount  = 10000\r\n\tstackSize   = 10 \u003c\u003c 10\r\n\tstackPeriod = 5 * time.Second\r\n)\r\n\r\nvar (\r\n\tballast []byte\r\n\tgarbage []byte\r\n)\r\n\r\nfunc churn() {\r\n\tballast = make([]byte, ballastSize)\r\n\r\n\tfor {\r\n\t\ttime.Sleep(garbagePeriod)\r\n\t\tgarbage = make([]byte, garbageSize)\r\n\t}\r\n}\r\n\r\nfunc stack(a, b *sync.WaitGroup) {\r\n\tfor {\r\n\t\tgrow(a)\r\n\t\tb.Wait()\r\n\t}\r\n}\r\n\r\nfunc grow(a *sync.WaitGroup) byte {\r\n\tvar s [stackSize]byte\r\n\ta.Wait()\r\n\treturn s[0]\r\n}\r\n\r\nfunc main() {\r\n\tgo churn()\r\n\r\n\tvar a, b sync.WaitGroup\r\n\ta.Add(1)\r\n\tfor i := 0; i \u003c stackCount; i++ {\r\n\t\tgo stack(\u0026a, \u0026b)\r\n\t}\r\n\r\n\tfor {\r\n\t\ttime.Sleep(stackPeriod / 2)\r\n\t\tb.Add(1)\r\n\t\ta.Add(-1)\r\n\r\n\t\ttime.Sleep(stackPeriod / 2)\r\n\t\ta.Add(1)\r\n\t\tb.Add(-1)\r\n\t}\r\n}\r\n```\r\n",
	"user": {
		"login": "rhysh",
		"id": 230685,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-20T04:36:44Z",
	"updated_at": "2015-10-20T04:36:44Z"
}
