{
	"id": 51284698,
	"number": 6115,
	"state": "closed",
	"title": "fmt: verb override using tags on struct fields.",
	"body": "by **BeMasher**:\n\n\u003cpre\u003eI find that often when I'm writing types I need to apply special fmt formatting to\nspecific fields in structs while leaving the rest as the default \u0026quot;v\u0026quot; fmt verb.\nImplementing Stringer on the type becomes cumbersome when I only need to modify the\nformatting for one or two fields in a struct.\n\nFor example the following type requires a tedious String function where adding or\nremoving fields requires modification in the type and the String function:\n\ntype Foo {\n\tBar  []byte\n\tBaz1 uint32\n\tBaz2 uint32\n\tBaz3 uint32\n\tBaz4 uint32\n\tBaz5 uint32\n}\n\nfunc (f Foo) String() string {\n\treturn fmt.Sprintf(\u0026quot;{Bar:%s Baz1:%d Baz2:%d Baz3:%d Baz4:%d Baz5:%d}\u0026quot;, f.Bar, f.Baz1, f.Baz2, f.Baz3, f.Baz4, f.Baz5)\n}\n\nOne solution is to add a tag to the Bar field specifying the verb to use since it is the\nonly field that needs to be formatted differently from the standard \u0026quot;v\u0026quot; verb.\nThis allows me to use fmt functions that don't require a format string without\nconstantly having to update the String method.\n\ntype Foo {\n\tBar  []byte `fmt:\u0026quot;s\u0026quot;`\n\tBaz1 uint32\n\tBaz2 uint32\n\tBaz3 uint32\n\tBaz4 uint32\n\tBaz5 uint32\n}\n\nPrinting using fmt.Println (or other non-formatting) then produces the desired result\nwithout needing to implement Stringer for the type.\n\nNeed to determine when tags will be used or ignored, particularly when a format string\nis supplied.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2014-12-08T10:33:35Z",
	"created_at": "2013-08-12T09:58:25Z",
	"updated_at": "2016-06-24T22:54:52Z"
}
