{
	"id": 138197649,
	"number": 14616,
	"state": "closed",
	"title": "fmt: inconsistent padding of integers with and without f.sharp",
	"body": "go1.4 go1.6 (see playground)\r\n\r\nhttp://play.golang.org/p/C8nFpvFtCa\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Printf(\"|%#6x|\\n\",1)\r\n\tfmt.Printf(\"|%#06x|\\n\",1)\r\n\tfmt.Printf(\"|%06x|\\n\",1)\r\n\tfmt.Printf(\"|%6x|\\n\",1)\r\n\tfmt.Printf(\"|%#.6x|\\n\",1)\r\n}\r\n```\r\n\r\nOutput\r\n```\r\n|   0x1|\r\n|0x000001|\r\n|000001|\r\n|     1|\r\n|0x000001|\r\n```\r\nI would have expected the length of the output of %#6x and %#06x to be the same, namely 6 characters/runes as the width flag suggests.\r\n\r\nA few places in the standard library use e.g. %#08x instead of %#.8x.\r\nThere are 37 places outside of fmt_test.go for grep \"%#0.*x\" of which 19 seem to be error message formatting.\r\n\r\nThe fmt_test.go tests that fail were added to check overflow of the internal buffer.\r\nInterestingly besides these only the decode test that uses %#08x in https://github.com/golang/arch/blob/master/arm/armasm/gnu.go#L70 seems to fail if i change the behavior of the 0 padding to be the same as the space padding. ( only a small change in the integer function of fmt when f.sharp is set )\r\n\r\nIs it to late to make them behave the same with padding as to much code may already rely on this? Then maybe the documentation should note this deviation from normal padding behavior instead.\r\n( Maybe this is something for go vet. when %#0Lx is used it was maybe intended to be %#.Lx .)",
	"user": {
		"login": "martisch",
		"id": 184995,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2016-04-19T06:32:26Z",
	"created_at": "2016-03-03T14:44:43Z",
	"updated_at": "2016-04-19T06:32:27Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
