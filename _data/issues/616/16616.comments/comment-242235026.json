{
	"id": 242235026,
	"body": "Preliminary analysis: It looks like the compiler canonicalizes unnamed types such as struct { i int } because it uses its string representation to identify the respective type information. Thus, the interfaces for both a.V and V have the same type information (which can also readily be seen from the assembly output generated by the compiler for b.go above).\r\n\r\nA quick hack to fully qualify unexported field names in the compiler's fmt.go (lines 1576ff) leads to different type strings for the two structs and in return to different types encountered by reflect.Value. However it doesn't quite fix the problem yet (I'm probably missing another place where the field names are encoded).\r\n\r\nEither way, the problem here is unrelated to export data but has to do with how unnamed type symbols are referenced.\r\n\r\nAssigning to @crawshaw  for more insight.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-24T23:01:59Z",
	"updated_at": "2016-08-24T23:01:59Z"
}
