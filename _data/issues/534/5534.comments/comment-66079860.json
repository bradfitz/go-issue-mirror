{
	"id": 66079860,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9 by **mikesamuel**:\n\n\u003cpre\u003eThat's intentional because\n\n    x-{{-1}}\n\nshould not lead to the token sequence\n\n    \"x\" \"--\"(decrement) \"1\"\n\ninstead of the probably intended\n\n     \"x\" \"-\"(binary -) \"-\"(unary -) \"1\"\n\nAlso the guarantee the IS escaping functions provide is\n\u003ca href=\"http://golang.org/src/pkg/html/template/js.go#L133\"\u003ehttp://golang.org/src/pkg/html/template/js.go#L133\u003c/a\u003e\n   133 // jsValEscaper escapes its inputs to a JS Expression (section 11.14) that has\n   134 // neither side-effects nor free variables outside (NaN, Infinity).\n\nand allowing token merging would mean that the simplest sub-expression into which an\ninterpolation happens could have free variables not in (NaN, Infinity).\n\n\nIt's done at \u003ca href=\"http://golang.org/src/pkg/html/template/js.go#L183\"\u003ehttp://golang.org/src/pkg/html/template/js.go#L183\u003c/a\u003e\n\n   183 // Prevent IdentifierNames and NumericLiterals from running into\n   184 // keywords: in, instanceof, typeof, void\n   185 pad := isJSIdentPart(first) || isJSIdentPart(last)\n   186 if pad {\n   187   buf.WriteByte(' ')\n   188 }\n\nIf there's a strong use case for merged tokens then content.JS should allow a safety\nhatch.  If the concern is over output-size, then it should be possible to determine\nwhether the\n\nMost of the token merging cases shouldn't affect JS that is likely to appear in a\ntemplate -- there are few places in a JS program where two identifiers/numbers can be\nadjacent; but there's some interest in TC39 for moving towards a less punctuation heavy\nsyntax.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-06-03T15:38:21Z",
	"updated_at": "2014-12-08T10:30:04Z"
}
