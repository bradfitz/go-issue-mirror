{
	"id": 162911949,
	"body": "In line 19 you return a value of type `CustomErrorType`.  That type does not implement `error`, so you a compilation error.  The type `error` requires an `Error` method.  The type `CustomErrorType` has no methods.  The pointer type `*CustomErrorType` does have a method, but the type `CustomErrorType` does not.  So the compilation error is correct.\r\n\r\nIn line 28 you take a value of type `error` and try to convert it to type `CustomErrorType`.  That conversion can not possibly succeed, because `CustomErrorType` does not implement `error`.  Any value of type `error` must have an `Error` method, and `CustomErrorType` does not.\r\n\r\nIn line 14 you are returning a value of type `*CustomErrorType`.  That is, you are returning a pointer type, not a struct type.  The pointer type `*CustomErrorType` does have an `Error` method; you defined it on line 8.  So the pointer type `*CustomErrorType` does implement `error`, so the code compiles.\r\n\r\nYou seem to be suggesting that because `CustomErrorType` does not have an `Error` method, that `*CustomErrorType` also does not have an `Error` method.  But that's not how Go works.  Perhaps it would help to read https://golang.org/doc/faq#different_method_sets .",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-08T15:17:41Z",
	"updated_at": "2015-12-08T15:17:41Z"
}
