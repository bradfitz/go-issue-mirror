{
	"id": 66094675,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11 by **hector@marcansoft.com**:\n\n\u003cpre\u003eI'm pretty sure I figured out what's going on. The tl;dr version is that\nruntime.cgocallbackg doesn't play nice with runtime.entersyscall and\nruntime.exitsyscall. They assume that the stack frame that called entersyscall is valid\nuntil exitsyscall is called, which is not the case when returning from a C-\u0026gt;Go\ncallback. entersyscall saves the caller's SP for use by the GC/traceback functions, but\nby the time exitsyscall is called that frame is no longer valid.\n\nThis is a diagram of what I think happens:\n\n* = g-\u0026gt;syscallsp\n\ng stack ========\u0026gt;                 g0 stack =======\u0026gt;\n Go [ReadJPEG()]\n   runtime.cgocall(...) [C.jpeg_read_raw_data]\n    *runtime.entersyscall()\n    *runtime.asmcgocall(...)\n    *  === STACK SWITCH ===\n    *                             _cgo_C...()\n    *                               c_func() [jpeg_read_raw_data()]\n    *                                 GoF() [mgr-\u0026gt;fill_input_buffer() --\u0026gt; sourceFill()]\n    *                                   crosscall2(...)\n    *                                     _cgoexp_GoF()\n    *                                       runtime.cgocallback(...)\n    *                                         runtime.cgocallback_gofunc(...)\n    *                                           === STACK SWITCH ===\n    *  runtime.cgocallbackg()\n    *    runtime.exitsyscall()\n         runtime.cgocallbackg1()\n           runtime.newstackcall(...)\n             === STACK SWITCH ===\n                                                runtime.newstack(...)\n                                                  runtime.gogo(...)\n                                                    === STACK SWITCH ===\n             +\u0026gt; stack segment boundary\n             | pkg.GoF() [jpeg.sourceFill()]\n             +\u0026lt;\n           \u0026lt;-runtime.newstackcall\n         \u0026lt;-runtime.cgocallbackg1\n  /     *runtime.entersyscall()\n |     \u0026lt;*runtime.cgocallbackg\n |     =*= STACK SWITCH ===\n |      *                                     \u0026lt;-runtime.cgocallback_gofunc\n |      *                                   \u0026lt;-runtime.cgocallback\n |      *                                 \u0026lt;-_cgoexp_GoF\n |      *                               \u0026lt;-crosscall2\n |      *                             \u0026lt;-GoF\n |      *                           \u0026lt;-c_func [jpeg_read_raw_data]\n |      *                         \u0026lt;-_cgo_C...\n |      *                         === STACK SWITCH ===\n |   \u0026lt;-r*ntime.asmcgocall\n |\\  run*ime.exitsyscall()  \u0026lt;- actual crash happens here (1)\n | \u0026lt;-runtime.cgocall()\n |\n +- danger area, g-\u0026gt;syscallsp \u0026lt; SP\n\n(1) exitsyscall calls runtime.mcall before setting syscallsp to nil.\n    runtime.mcall yields. Eventually the GC gets called, tries to trace the\n    stack starting at g-\u0026gt;syscallsp, which is now garbage.\n\nThis is a raw stack dump that I got while reproducing the original issue with a patched\ntraceback function:\n\ngoroutine 55430 [runnable]:\nruntime: unexpected return pc for runtime.cgocallbackg called from 0x0\npc0=0x4081fc sp0=0xc208855d70 lr0=0x0\ngp-\u0026gt;status=1\ngp-\u0026gt;syscallstack=0xc208859fa8\ngp-\u0026gt;syscallsp=0xc208855d70\ngp-\u0026gt;syscallpc=0x4081fc\ngp-\u0026gt;syscallguard=0xc208852100\ngp-\u0026gt;sched.sp=0xc208855d88\ngp-\u0026gt;sched.pc=0x417eec\ngp-\u0026gt;stackbase=0xc208859fa8\ngp-\u0026gt;stackguard=0xc208852100\ngp-\u0026gt;sched.ctxt=0x0\nstack dump:\n0xc208855cf0: 0x411f37 (runtime.futexsleep+0x0x47)\n0xc208855cf8: 0xa84400\n0xc208855d00: 0x200000000\n0xc208855d08: 0x412002 (runtime.futexwakeup+0x0x52)\n0xc208855d10: 0xa84400\n0xc208855d18: 0x100000001\n0xc208855d20: 0x0\n0xc208855d28: 0x0\n0xc208855d30: 0x0\n0xc208855d38: 0xa84400\n0xc208855d40: 0x408668 (runtime.unlock+0x0x68)\n0xc208855d48: 0xa84400\n0xc208855d50: 0x200000001\n0xc208855d58: 0x200408483\n0xc208855d60: 0x417fec (exitsyscallfast+0x0xbc)\n0xc208855d68: 0xa84400\n0xc208855d70: 0xc20806c00c \u0026lt;=== SP\n0xc208855d78: 0x0\n0xc208855d80: 0x417eec (runtime.exitsyscall+0x0x10c) \u0026lt;=== FP\n0xc208855d88: 0x4180c0 (exitsyscall0+0x0x0)\n0xc208855d90: 0x408082 (runtime.cgocall+0x0x102)\n0xc208855d98: 0x402720\n0xc208855da0: 0xc208855df8\n0xc208855da8: 0x7f0100000000\n0xc208855db0: 0xffffffffffffffff\n0xc208855db8: 0x19000\n0xc208855dc0: 0xa660d8\n0xc208855dc8: 0xc2080bac30\n0xc208855dd0: 0x42836b (runtime.new+0x0x3b)\n0xc208855dd8: 0x566311\n(github.com/pixiv/go-thumber/jpeg._Cfunc_jpeg_read_raw_data+0x0x31)\n0xc208855de0: 0x402720\n0xc208855de8: 0xc208855df8\n0xc208855df0: 0x5635c0 (github.com/pixiv/go-thumber/jpeg.ReadJPEG+0x0x770)\n\nHence we see a traceback where the tracer thinks it's in cgocallbackg (which called\nentersyscall), but the actual stack shows runtime.cgocall -\u0026gt; runtime.exitsyscall\n-\u0026gt; runtime.mcall, and the traceback routine is very confused since it can't find the\nLR in the right place. Note how gp-\u0026gt;sched.sp \u0026gt; gp-\u0026gt;syscallsp. I'm dumping some\nstack before the SP too, but those are invalid/leftover stack frames, so take them with\na grain of salt.\n\nI've attached a patch that adds a sanity check to exitsyscall that panics if this ever\nhappens, and a tentative fix to runtime.cgocallback that saves the syscallsp and\nrestores it after entersyscall. I'm not sure if this is sufficient, though; I suspect it\nalso needs to be restored in a defer in case of a panic. I didn't see any panic handling\ncode in entersyscall/exitsyscall themselves so I'm not sure (haven't checked the normal\nsyscall path yet). The sanity check will go off on every c-\u0026gt;go callback if patched in\nalone, so that's an easy way to catch the issue without having to wait for the stars to\nalign and the GC to get called in the right place and cause a crash.\n\n(Note: I've just signed the Individual CLA in case you want to use the patch; I assume\nit might take a while to get processed though.)\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/7978/11/cgocallback_syscall_fix.patch\"\u003ecgocallback_syscall_fix.patch\u003c/a\u003e (1699 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-08-18T14:19:58Z",
	"updated_at": "2014-12-22T06:34:27Z"
}
