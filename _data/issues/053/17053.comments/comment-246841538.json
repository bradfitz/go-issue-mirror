{
	"id": 246841538,
	"body": "@hlandau \r\n\r\n\u003e My understanding is that net/http is not 'frontend-hardened'; that it is desirable in production use to put another webserver, such as nginx, in front of it.\r\n\r\nWhat do you mean by this? nginx isn't any more \"frontend-hardened\" than Go is, unless you configure it a bunch. Go is the same way, but [it is certainly production-ready](https://www.reddit.com/r/golang/comments/2ay3ea/go_and_httphttps_servers/).\r\n\r\n\u003e  Even if an ACME implementation were to be placed in the standard library, this shouldn't be done until the ACME protocol is finalized.\r\n\r\nThis has already been understood above, as the earliest this would land, if at all, is next year, presumably after ACME is finalized.\r\n\r\n@Merovius \r\n\r\n\u003e At some point the official communication was discouraging using go to terminate your TLS connections as go's tls implementation wasn't well-vetted and instead use a reverse proxy or link in OpenSSL. Are we now straying from that recommendation?\r\n\r\nWhat official communication? What defines well-vetted? Go's crypto/tls package has had much fewer vulnerabilities than OpenSSL has.\r\n\r\n\u003e In a similar vein, I'd consider it more or less bad practice to read/write to disk in a frontend binary, as it limits scalability.\r\n\r\nThis behavior can be swapped out. Merely the default is a file system cache, which is fine -- what else are you going to use?",
	"user": {
		"login": "mholt",
		"id": 1128849,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 3,
		"+1": 3
	},
	"created_at": "2016-09-13T22:09:17Z",
	"updated_at": "2016-09-13T22:09:17Z"
}
