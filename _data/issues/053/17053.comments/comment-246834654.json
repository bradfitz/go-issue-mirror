{
	"id": 246834654,
	"body": "Some points:\r\n\r\n- I don't think `net/http` should be made to depend on an ACME implementation. While making it very very easy to automatically obtain certificates is surely desirable, I think it would be preferable to expose this as a package which can be used on top of `net/http` or `crypto/tls`. It should be on the importing code to link up `net/http` or `crypto/tls` and the ACME package. This could be made to require a minimum of code if the package is well designed. As evidence for this, look at the existing packages that accomplish just this without modifying `net/http`.\r\n- My understanding is that `net/http` is not 'frontend-hardened'; that it is desirable in production use to put another webserver, such as nginx, in front of it. In this regard, the impact of ACME-enabling `net/http` may be minimal anyway. Likewise for `crypto/tls` as has already been mentioned above, where `crypto/tls` is AFAIK not considered fully ready. In this regard adding ACME support at this point may actually encourage the adoption of discourageable practices.\r\n- The ACME specification is still a draft and has undergone radical changes between `-02` and `-03`. Even if an ACME implementation were to be placed in the standard library, this shouldn't be done until the ACME protocol is finalized.\r\n- The value proposition of adding an ACME implementation to the standard library is unclear. Yes, it means you don't have to vendor it, but that argument could be made for any library.\r\n",
	"user": {
		"login": "hlandau",
		"id": 2270010,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 5,
		"+1": 4,
		"-1": 1
	},
	"created_at": "2016-09-13T21:43:11Z",
	"updated_at": "2016-09-13T21:43:11Z"
}
