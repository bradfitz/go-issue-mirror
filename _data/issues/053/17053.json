{
	"id": 176199560,
	"number": 17053,
	"state": "open",
	"title": "doc: add ACME (LetsEncrypt, etc) example docs to the standard library",
	"body": "Thanks to @crhym3, we now have a suitably-licensed \u0026 CLA-clean ACME implementation in https://godoc.org/golang.org/x/crypto/acme (and a high-level package in https://godoc.org/golang.org/x/crypto/acme/autocert).\r\n\r\nI'd like to consider privately vendoring that into Go 1.8 and making HTTPS even easier.\r\n\r\nI'd like a complete user program with automatic HTTPS certs to look something like:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"log\"\r\n\t\"net/http\"\r\n)\r\n\r\nfunc main() {\r\n\thttp.HandleFunc(\"/\", websiteHandler)\r\n\tsrv := \u0026http.Server{\r\n\t\tAddr:         \"example.com:443\",\r\n\t\tACMEServer:   http.LetsEncrypt, // non-empty enables autocert support\r\n\t\tACMEAgreeTOS: func(tosURL string) bool { return true },\r\n\t\tACMEEmail:    \"foo@bar.com\", // (but optional)\r\n\t}\r\n\tlog.Fatal(srv.ListenAndServeTLS(\"\", \"\"))\r\n}\r\n```\r\n\r\nMisc notes:\r\n\r\n* The `ACMEFoo` names are placeholders. Maybe they'd deserve their own struct.\r\n\r\n* `ACMEServer` would be required as the opt-in, and we wouldn't make LetsEncrypt be automatic or preferred, but we would add a constant `const LetsEncrypt = \"https://acme-v01.api.letsencrypt.org/directory\"` like the `acme` package has.\r\n\r\n* `ACMEAgreeTOS` would be required for now. The ACME protocol requires a TOS agreement because the CAB Forum requires cert issuers to have a legal relationship with the people getting certs or something. It's mostly a formality, but we shouldn't make it automatically say \"yes\" either, even though I don't think LetsEncrypt themselves care. Maybe we could export the https://godoc.org/golang.org/x/crypto/acme#AcceptTOS func in the `net/http` package to reduce the boilerplate.\r\n\r\n* `ACMEEmail` is optional. If provided, your ACME cert provider can keep you updated on problems or changes.\r\n\r\n* the default cache directory would be automatic. We could provide a string to let people pick an alternate directory. If you want to do something more complicated (e.g. cache coordination over a cluster), then you can just import the `golang.org/x/crypto/acme/autocert` package yourself. This is analogous to the HTTP/2 situation where common HTTP/2 is provided automatically, but weird uses require importing the guts.\r\n\r\n* `srv.ListenAndServeTLS(\"\", \"\")` is already valid for the past few releases, since 6a208efbdfa939dc236a63383df19c7ab44aa50a for #14268 requested by @willchan specifically for LetsEncrypt stuff. It's a little ugly but works. Maybe we could provide instead a new method or option which also listens on an cleartext port 80 and redirects HTTP to HTTPS, optionally with a HSTS header.\r\n\r\nMy goal is for HTTPS to be dead simple out of the box.\r\n\r\nThoughts?\r\n\r\n/cc @adg @broady @campoy @quentinmit @rsc @robpike @ianlancetaylor @mholt @crhym3\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Thinking"
		}
	],
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 57,
	"created_at": "2016-09-10T19:58:15Z",
	"updated_at": "2016-10-03T22:30:42Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	},
	"reactions": {
		"total_count": 256,
		"+1": 168,
		"-1": 19,
		"heart": 44,
		"hooray": 25
	}
}
