{
	"id": 66052402,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eIn this case, we would want an interface similar to POSIX glob(), as in\n\u003ca href=\"http://www.mirbsd.org/htman/i386/man3/glob.htm\"\u003ehttp://www.mirbsd.org/htman/i386/man3/glob.htm\u003c/a\u003e .\n\nSomething like:\n\nfunc Glob(patterns []string, flags int, errfunc func(string, os.Error) bool) (matches\n[]string, ok bool)\n\nI don't know if the first argument should be one pattern or a list. A list is helpful\nfor the Glob(flag.Args()) idiom needed on Win32.\n\nerrfunc is called, if not nil, for any file-not-found and other errors, and the glob is\naborted if it returns true.\n\nThe flags that make sense in Go are:\n\nGLOB_ERR: abort on error\nGLOB_MARK: append a path name separator (/ or \\) to the matches if they are directories\nGLOB_NOCHECK: if a pattern does not match any pathname, return it unchanged\nGLOB_NOESCAPE (not sure)\nGLOB_NOSORT: do not sort results\n\nGLOB_BRACE: expand {foo,bar}\nGLOB_TILDE: replace ~ by the user's home directory (unix only)\n\nThe last two are part of what I called cross-platform differences, while on Windows\nthere needs to be special handling of drive letters and such. UNC paths\n\\\\server\\filename should work, too.\n\nWhat do you think? Would this be too okay?\u003c/pre\u003e",
	"user": {
		"login": "bsiegert",
		"id": 866330,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-09-07T13:40:05Z",
	"updated_at": "2014-12-08T10:06:49Z"
}
