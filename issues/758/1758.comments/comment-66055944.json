{
	"id": 66055944,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eIan, do you know what this code is trying to do?\n\n\u003ca href=\"http://goo.gl/y8g5u\"\u003ehttp://goo.gl/y8g5u\u003c/a\u003e\n\nIt has something to do with executing init and fini sections\nin dependency order across files, so I think it is just rearranging\nthe shared library dependencies.  It looks like nlink counts the\nexecutable itself in the list, so it would always be \u003e= 1.\nBut Go generates binaries that are \"dynamic\" but don't have\nany actual shared library dependencies, so it is possible to\nhave nlink == 1 here, while the assert says nlink \u003e 1.\n\nThat is, I think it is just a bug in glibc 2.13, but I would\nlike a second opinion before pushing this back to the glibc\nbug tree.  Is there some way with gcc to generate a dynamically\nlinked binary that links no shared libraries?\n\nIs there some flag sequence I can pass to gcc so that it\ncompiles this program (or a similar one) into a dynamic\nbinary without any shared library dependencies?\n\nint\nmain()\n{\n\treturn 0;\n}\n\nBy default I seem to get three:\n\n\n$ ldd a.out\n\tlinux-vdso.so.1 =\u003e  (0x00007ffffe992000)\n\tlibc.so.6 =\u003e /lib/libc.so.6 (0x00007fe96e51e000)\n\t/lib64/ld-linux-x86-64.so.2 (0x00007fe96e8c1000)\n$\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-05-01T14:55:32Z",
	"updated_at": "2014-12-08T10:09:46Z"
}
