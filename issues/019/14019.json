{
	"id": 127498887,
	"number": 14019,
	"state": "closed",
	"title": "x/sys/windows/svc/mgr: CreateService does not allow driver loading",
	"body": "Summary:\r\n\r\n [golang.org/x/sys/windows/svc/mgr.CreateService](https://godoc.org/golang.org/x/sys/windows/svc/mgr#Mgr.CreateService) does not allow driver loading.\r\n\r\nDetails:\r\n\r\n[golang.org/x/sys/windows/svc/mgr.CreateService](https://godoc.org/golang.org/x/sys/windows/svc/mgr#Mgr.CreateService) is a high-level interface for the Windows [CreateService](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682450(v=vs.85).aspx) function. The former accepts a struct [Config](https://godoc.org/golang.org/x/sys/windows/svc/mgr#Config) but ignores that structure's `ServiceType` field. Instead, it uses the constant [windows.SERVICE_WIN32_OWN_PROCESS](https://github.com/golang/sys/blob/master/windows/service.go#L26). This implementation precludes the creation of other service types, including drivers.\r\n\r\nI propose modifying [golang.org/x/sys/windows/svc/mgr.CreateService](https://godoc.org/golang.org/x/sys/windows/svc/mgr#Mgr.CreateService) to honor the `ServiceType` field, but continue using `windows.SERVICE_WIN32_OWN_PROCESS` as the default when that field is unpopulated (i.e., equal to zero). This change is consistent with other `Config` members in that function, preserves the semantics for existing callers, and allows driver loading (more generally, other service types).\r\n\r\nSomething like this works for me:\r\n\r\n```\r\ndiff --git a/windows/svc/mgr/mgr.go b/windows/svc/mgr/mgr.go\r\nindex 4d7e72e..da8ceb6 100644\r\n--- a/windows/svc/mgr/mgr.go\r\n+++ b/windows/svc/mgr/mgr.go\r\n@@ -85,12 +85,15 @@ func (m *Mgr) CreateService(name, exepath string, c Config, args ...string) (*Se\r\n        if c.ErrorControl == 0 {\r\n                c.ErrorControl = ErrorNormal\r\n        }\r\n+       if c.ServiceType == 0 {\r\n+               c.ServiceType = windows.SERVICE_WIN32_OWN_PROCESS\r\n+       }\r\n        s := syscall.EscapeArg(exepath)\r\n        for _, v := range args {\r\n                s += \" \" + syscall.EscapeArg(v)\r\n        }\r\n        h, err := windows.CreateService(m.Handle, toPtr(name), toPtr(c.DisplayName),\r\n-               windows.SERVICE_ALL_ACCESS, windows.SERVICE_WIN32_OWN_PROCESS,\r\n+               windows.SERVICE_ALL_ACCESS, c.ServiceType,\r\n                c.StartType, c.ErrorControl, toPtr(s), toPtr(c.LoadOrderGroup),\r\n                nil, toStringBlock(c.Dependencies), toPtr(c.ServiceStartName), toPtr(c.Password))\r\n        if err != nil {\r\n```",
	"user": {
		"login": "npetroni",
		"id": 5727495,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2016-01-21T06:24:11Z",
	"created_at": "2016-01-19T17:36:08Z",
	"updated_at": "2016-01-21T06:27:29Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
