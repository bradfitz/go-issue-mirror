{
	"id": 178488799,
	"body": "drive-by, some comments from my point of view.\r\n\r\ntl;dr, built-in functions should be really designed carefully. The best: never design built-in methods with inconsistent behaviours. Better: designed such methods but added clear documentation for it. Saying what is undefined is also necessary. Worst: Bad design without clear documentation.\r\n\r\nI think the worst thing about this issue lies in that:\r\na = append(b, 1)\r\nmight have or not have side-effects depending on things programers cannot control at all, while the declaration of append really seams to indicate that it does not, otherwise it should just be implemented like:\r\n// if you'd like to in-place updates b do this:\r\nappend(b, 1)\r\n// if you'd like to leave b alone and make a new slice c that contains b plus 1, do this:\r\ncopy(c, b)\r\nappend(c, 1)\r\nand we could totally get rid of things like a = append(b, 1)\r\n\r\nTo argue why there should be a big red alert box for this issue specifically, while we usually don't do that for stack overflow and data races:\r\nData races are really common-sense dangers for people who want to use it, we don't alert it because it requires people to understand some basic knowledge that we shall know before using it in this area. The same with stack overflow.\r\nHowever, this append spec is clearly Go-only and is too far from intuitive even to people who have advanced knowledge with C/C++. I don't think this makes Go any closer to what the language always advertises: simpler than c/c++ but as efficient. Making a function with inconsistent behaviours built-in really makes Go a much less rigorous language than C/C++.\r\n\r\nI cannot agree with you on: we don't need to warn it because 99% of your code never had such an issue. I just cannot believe this could be taken as a principle in language design.\r\n\r\nI agree that a red alert box is bad for such issue, because spec is not intended to teach you the language. However, it's never a solid definition either, without clearly saying what behaviours are intended and what not. I tend to believe that other popular languages' spec don't do such thing, only because they don't allow such inconsistent language features to present from the very beginning.\r\n",
	"user": {
		"login": "mengbiping",
		"id": 10163201,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-02T10:03:43Z",
	"updated_at": "2016-02-02T10:03:43Z"
}
