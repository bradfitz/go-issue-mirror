{
	"id": 51277708,
	"number": 1366,
	"state": "closed",
	"title": "sync: add Mutex.MustBeLocked",
	"body": "\u003cpre\u003eTo prevent careless programming, I want to panic if a lock is not held at a certain\npoint.\n\nI could see the rationale for making this panic and renaming the method MustBeLocked()\nor PanicIfUnlocked(). I can't think of too many valid use cases other than panicking.\n\nI can see people not reading it carefully and assuming that !IsUnlocked() means that\nthey hold the lock, or that if IsUnlocked() { Lock() } would only lock if you weren't\nalready.\n\n\n\ndiff -r 23006c94f1aa src/pkg/sync/mutex.go\n--- a/src/pkg/sync/mutex.go\tFri Dec 17 14:00:46 2010 -0800\n+++ b/src/pkg/sync/mutex.go\tTue Dec 21 15:12:49 2010 -0800\n@@ -59,3 +59,13 @@\n \t}\n \truntime.Semrelease(\u0026amp;m.sema)\n }\n+\n+// Check if the mutex lock is unlocked.\n+// The most common case is where you want to fail code with a high probability\n+// if a mutex is not locked. There is no false positive, but there is a\n+// false negative if another goroutine is holding the lock.\n+func (m *Mutex) IsUnlocked() bool {\n+\treturn m.key == 0\n+}\n+\n+\u003c/pre\u003e",
	"user": {
		"login": "msolo",
		"id": 5078276,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"closed_at": "2014-12-08T10:08:00Z",
	"created_at": "2010-12-22T01:22:14Z",
	"updated_at": "2016-06-24T19:23:27Z"
}
