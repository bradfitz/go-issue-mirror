{
	"id": 51280195,
	"number": 3158,
	"state": "closed",
	"title": "rpc: should allow registering an unexported type",
	"body": "\u003cpre\u003eThe following program prints \u0026quot;cannot register: rpc Register: type foo is not\nexported\u0026quot;.\nThis restriction seems unnecessary (I can pass an instance of foo to anything expecting\nan interface{Test(int, *int)error}) and restrictive (it means that it's not possible to\nuse rpc privately within a package).\n\nIn my case, I wanted to embed a private type containing the RPC methods, so I could have\nnon-RPC methods on the outer type, to avoid the log messages when a method doesn't\nconform to the rpc package's rules.\n\npackage main\nimport (\n\t\u0026quot;fmt\u0026quot;\n\t\u0026quot;net/rpc\u0026quot;\n)\n\nfunc main() {\n\tsrv := rpc.NewServer()\n\terr := srv.Register(\u0026amp;foo{})\n\tfmt.Printf(\u0026quot;cannot register: %v\\n\u0026quot;, err)\n}\n\ntype foo struct {\n}\n\nfunc (*foo) Test(arg int, ret *int) error {\n\treturn nil\n}\u003c/pre\u003e",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:16:24Z",
	"created_at": "2012-02-29T08:11:34Z",
	"updated_at": "2016-06-24T21:29:08Z"
}
