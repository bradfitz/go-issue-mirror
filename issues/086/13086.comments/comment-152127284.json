{
	"id": 152127284,
	"body": "Some notes on the measuring strategy.\r\n\r\nThe same unfair algorithm is used on two levels: sync.Mutex and runtime semaphores. If you change only one of them you can get all kinds of weird non-linear effects that can both improve and worsen fairness and performance.\r\n\r\nIn the test you statically partition iterations among goroutines. And this strategy strongly prefers fair execution -- all goroutines need to finish at the same time. That can explain better numbers in benchmarks.\r\n\r\nI've did a quick prototype of fully fair (FIFO) sync.Mutex and runtime sema:\r\nhttps://go-review.googlesource.com/#/c/16469/\r\nand changed the test to (RunParallel knows how to do it properly):\r\n```go\r\nfunc benchmarkRand(b *testing.B, n int) {\r\n\tb.SetParallelism(n)\r\n\tb.RunParallel(func(pb *testing.PB) {\r\n\t\tfor pb.Next() {\r\n\t\t\trand.Int()\r\n\t\t}\r\n\t})\r\n}\r\n```\r\n\r\nHere are results on a silly 2 HT core notebook (and number of goroutines is not as high as in typical Go servers):\r\n```\r\nbenchmark             old ns/op     new ns/op     delta\r\nBenchmarkRand1        50.8          48.1          -5.31%\r\nBenchmarkRand1-2      63.1          576           +812.84%\r\nBenchmarkRand1-4      206           584           +183.50%\r\nBenchmarkRand1-8      209           505           +141.63%\r\nBenchmarkRand2        59.8          112           +87.29%\r\nBenchmarkRand2-2      82.1          500           +509.01%\r\nBenchmarkRand2-4      219           496           +126.48%\r\nBenchmarkRand2-8      238           472           +98.32%\r\nBenchmarkRand4        65.5          230           +251.15%\r\nBenchmarkRand4-2      290           472           +62.76%\r\nBenchmarkRand4-4      261           477           +82.76%\r\nBenchmarkRand4-8      275           478           +73.82%\r\nBenchmarkRand8        64.2          385           +499.69%\r\nBenchmarkRand8-2      85.8          471           +448.95%\r\nBenchmarkRand8-4      285           476           +67.02%\r\nBenchmarkRand8-8      283           485           +71.38%\r\nBenchmarkRand16       65.7          295           +349.01%\r\nBenchmarkRand16-2     305           470           +54.10%\r\nBenchmarkRand16-4     290           498           +71.72%\r\nBenchmarkRand16-8     287           495           +72.47%\r\n```\r\n\r\nYou can see that the things Doug is talking about are not fake. Even with GOMAXPROCS=1 slowdown is significant (that's our goroutine switching overhead).",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-29T09:33:42Z",
	"updated_at": "2015-10-29T09:33:42Z"
}
