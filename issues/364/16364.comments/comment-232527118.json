{
	"id": 232527118,
	"body": "By loosely-ordered channel I understand a channel that does not guarantee FIFO. What it means more specifically is that two writers could write \"a\" and \"b\" to a channel (in that order) and readers could get it as \"b\" and \"a\". It is also possible that \"a\" and \"b\" could be written at the same moment in time (e.g. in less than 1 cycle of a time difference from different cores) so there is no sensible way to even define what order of events here means. It is a weaker guarantee than a FIFO and allows to receive and send events with much higher throughput.\r\n\r\n\u003eAre you suggesting that when a buffered channel has many readers, we implement several different buffers for the channel, and let each goroutine read from one buffer?\r\n\r\nYes.\r\n\r\n\u003e Thus there would theoretically be less lock contention?\r\n\r\nYes, if implemented and used properly :). Basically any \"proper usage\" would mean that you need several (e.g. 4+) goroutines trying to rcv/send to a channel at the same time.\r\n\r\n\u003e How would we decide when to use multiple buffers?\r\n\r\nIf you decide to use multiple buffers at runtime then it would break FIFO guarantee of a channel so it must be specified when doing make(...). Very limited suggestion for syntax would be `make(chan something, buffer_size, shards_count)`. I do not know whether or not you can achieve higher throughput on a channel using lock-free data structures so I couldn't suggest to use it.",
	"user": {
		"login": "YuriyNasretdinov",
		"id": 575929,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-14T00:45:05Z",
	"updated_at": "2016-07-14T00:45:36Z"
}
