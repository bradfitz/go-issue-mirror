{
	"id": 158155951,
	"body": "Our actual use case involves matrix views, and so it can't be as simple as the above code. Our real code is closer to \r\n````\r\nif m \u003c 0 {\r\n    panic(\"negative rows\")\r\n}\r\nif n \u003c 0 {\r\n   panic(\"negative columns\")\r\n}\r\nif stride \u003c n {\r\n    panic(\"bad stride\")\r\n}\r\nif (m-1)*stride + n \u003e len(a) {\r\n     panic(\"out of bounds error\")\r\n}\r\nfor i := 0; i \u003c m; i++ {\r\n    for j := 0; j \u003c n; j++ {\r\n      _ = a[i*stride +j]\r\n    }\r\n}\r\n`````\r\nnote in particular that in general stride != m. \r\n\r\nHonestly though, I think the highest impact you could have on optimizing gonum code is (code snippets assume correct bounds checking has been done above)\r\n1) Dot product\r\n````\r\nvar dot float64\r\nfor i, v := range x {\r\n   dot += y[i]\r\n}\r\n````\r\n2) Scale \r\n````\r\nfor i := range x {\r\n    x[i] *= beta\r\n}\r\n````\r\n3) \"Axpy\", i.e. y += a*x\r\n````\r\nfor i, v := range x {\r\n    y[i] += a*v\r\n}\r\n````\r\n\r\nAll of these also come in the \"strided\" form you mention above, where instead i is incremented by a constant value. If these three expressions could have bounds checks removed and SIMD, there would be a huge speedup in the BLAS benchmarks.\r\n\r\nIf you're interested for testing purposes, we have a bunch of benchmarks at  godoc.org/github.com/gonum/blas/native, and godoc.org/github.com/gonum/matrix/mat64 .\r\n\r\nThanks for thinking about compiler optimizations!",
	"user": {
		"login": "btracey",
		"id": 3680859,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-19T18:56:53Z",
	"updated_at": "2015-11-19T18:56:53Z"
}
