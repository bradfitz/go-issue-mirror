{
	"id": 157751610,
	"body": "It's slipped to 1.7, the analysis ought to exist in buggy form later this week or early next week.  In the short run I'm not targeting multiplication, but I am trying to get the following cases:\r\n```\r\nfor i := 0 ; i + K-1 \u003c len(a); i+= K { ... a[i] ... a[i+K-1] }\r\n```\r\n```\r\nif len(a) \u003e len(b) {\r\n  t := a\r\n  a = b\r\n  b = t\r\n}\r\nfor i := 0; i \u003c len(a); i++ { ... a[i] ... b[i] ... }\r\n```\r\n\r\nThe multiplication expression is harder than you might think because of integer overflow.\r\nConsider\r\n```\r\nif len(a) \u003c m*n {\r\n    return \r\n}\r\nfor i := 0: i \u003c m; i++ {\r\n    for j := 0 ; j \u003cn ;j++{\r\n       _ =  a[i*m + j]\r\n   }\r\n}\r\n```\r\nSuppose m = 4, n = 1\u003c\u003c62.\r\nThen m*n == 0, len(a) is greater than 0, and therefore we can remove bounds checking, right? :-)\r\n\r\nJust remember, we design languages to let integers overflow and wrap because it's \"more efficient\".\r\n\r\n",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-18T15:37:53Z",
	"updated_at": "2015-11-18T15:42:58Z"
}
