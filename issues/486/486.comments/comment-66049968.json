{
	"id": 66049968,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eYour code fragment doesn't compile: \"11: syntax error near go\".\n\nIn your example, the Go for statement executes as expected; it executes an infinite\nloop, as it would in most languages.\n\u003ca href=\"http://golang.org/doc/go_spec.html#For_statements\"\u003ehttp://golang.org/doc/go_spec.html#For_statements\u003c/a\u003e\n\nIn Go, byte is an alias for uint8, with a range of 0 through +255.\n\u003ca href=\"http://golang.org/doc/go_spec.html#Numeric_types\"\u003ehttp://golang.org/doc/go_spec.html#Numeric_types\u003c/a\u003e\n\nIn Go, unsigned integer operations discard high bits upon overflow.\n\u003ca href=\"http://golang.org/doc/go_spec.html#Integer_overflow\"\u003ehttp://golang.org/doc/go_spec.html#Integer_overflow\u003c/a\u003e\n\nIn the for loop, after i reaches +255, the i++ statement increments it to +266 and\nthen discards the overflowing high order bits, leaving a byte (uint8) value of zero.\nThe for statement cycles the loop variable i through the range 0 to +255 forever.\n\nIf you change the for statement condition from i \u0026lt;= 255 to i \u0026lt; 255, the loop will\nterminate.\n\nQuestions about language usage, as opposed to confirmed bugs, are best posed in the\nGo Nuts mailing list.\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-01-02T17:02:39Z",
	"updated_at": "2014-12-22T05:50:37Z"
}
