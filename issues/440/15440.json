{
	"id": 150975561,
	"number": 15440,
	"state": "closed",
	"title": "cmd/compile: GOARM=5 bad floating point",
	"body": "Looks like the floating-point simulator for arm5 can't handle floating point writes at large offsets to pointers.\r\n```\r\nfunc TestArmFloatBigOffset(t *testing.T) {\r\n\ttype X struct {\r\n\t\tpad [1024]byte\r\n\t\tv   float64\r\n\t}\r\n\tf := func(x *X, v float64) {\r\n\t\tx.v = v\r\n\t}\r\n\tvar x X\r\n\tf(\u0026x, 2.0)\r\n\tif v := x.v; v != 2.0 {\r\n\t\tt.Errorf(\"bad x.v=%f\\n\", v)\r\n\t}\r\n}\r\n```\r\nThe Go compiler compiles the write in f to:\r\n```\r\n\t0x0014 00020 (tmp2.go:9)\tCALL\t_sfloat(SB)\r\n\t0x0018 00024 (tmp2.go:9)\tMOVD\t\"\".v+4(FP), F0\r\n\t0x001c 00028 (tmp2.go:9)\tMOVD\tF0, 1024(R0)\r\n```\r\nwhich all looks ok, until you see what the obj library did to it:\r\n```\r\n   11014:       eb017942        bl      6f524 \u003c_sfloat\u003e\r\n   11018:       ed9d0b03        vldr    d0, [sp, #12]\r\n   1101c:       e59fb018        ldr     fp, [pc, #24]   ; 1103c \u003cmain.f+0x3c\u003e\r\n   11020:       e08bb000        add     fp, fp, r0\r\n   11024:       ed8b0b00        vstr    d0, [fp]\r\n   ...\r\n   1103c:       00000400        andeq   r0, r0, r0, lsl #8\r\n```\r\nThe problem (I think) is the sfloat interpreter stops interpreting when it gets to the ldr, and the store doesn't work due to there not being a sfloat call before it.\r\n\r\nThis issue is what is currently breaking the linux-arm-arm5 build.\r\n\r\n@minux ",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2016-04-25T22:34:00Z",
	"created_at": "2016-04-25T20:42:10Z",
	"updated_at": "2016-04-25T22:34:00Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
