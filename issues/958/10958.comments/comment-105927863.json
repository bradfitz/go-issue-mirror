{
	"id": 105927863,
	"body": "This is the reference for doing a GC safepoint at every instruction. It is\nnot something we want to do for x86 much less the various other\narchitectures we need to support.\nhttp://dl.acm.org/citation.cfm?id=301652\n\nMost systems I know of do what Austin suggests, unroll the loop and insert\na check. No numbers but 8 unrolls seems to be what I recall. Not only is\nthe branch highly predictable but the check does not introduce any\ndependencies making it close to free on an out of order machine. There have\nbeen other approaches such as code plugging and predicated branches but HW\nhas moved on.  I had not seen Ian's suggestion.\n\n\nOn Tue, May 26, 2015 at 9:24 PM, Austin Clements \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e The problem of inserting artificial preemption points is reduced\n\u003e numerical performance.\n\u003e\n\u003e True. That's why I suggested unrolling loops, which AFAIK is a standard\n\u003e solution to this problem.\n\u003e\n\u003e However, I think the check can be done in just two instructions, even\n\u003e without adding Ian's loop counter. Just CMP the preempt flag and branch if\n\u003e it's set. That branch will almost never be hit, so it will be highly\n\u003e predictable, and the preempt flag should be in the L1, so the check may in\n\u003e fact be extremely cheap.\n\u003e\n\u003e No pointer writes to the heap. But maybe this is enough?\n\u003e\n\u003e This certainly reduces the set of programs that have this problem, but I\n\u003e don't think it actually helps with either of the examples I gave, since\n\u003e numerical kernels probably won't have heap pointer writes, and the runtime\n\u003e test that can deadlock the GC certainly has no pointer writes.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/10958#issuecomment-105710995\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-05-27T14:17:00Z",
	"updated_at": "2015-05-27T14:17:00Z"
}
