{
	"id": 225619653,
	"body": "I wanted to note an interesting case that hasn't occurred to me until recently: currently we omit the stack growth check from functions with very small frames (the exact value differs between arches), which means we also don't check for preemption in these functions. As a result, even a loop that contains a function call may be non-preemptible if the function it calls has a very small frame. That function call could even be a method call or a function pointer, in which case the compiler has no way to soundly detect that it's calling a function without a preemption check when it's compiling the loop.\r\n\r\nAny fix for this issue has to deal with this case. I can think of a few possible solutions, and there may be others: 1) put preemption points in *all* function prologues or 2) insert preemption points on back-edges conservatively if the compiler can't prove that at least one call in the loop is preemptible. As an extension of 2, we could also 3) insert preemption points in all *method* prologues, which would increase the number of loops the compiler can prove already contain a preemption point.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-13T15:39:22Z",
	"updated_at": "2016-06-13T15:39:22Z"
}
