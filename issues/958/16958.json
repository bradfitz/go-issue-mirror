{
	"id": 174612587,
	"number": 16958,
	"state": "open",
	"title": "net/http: ReadTimeout Breaks Server CloseNotify Functionality For Keep-Alive Connections",
	"body": "### Issue\r\nGO1.7's functionality for HTTP 1.1's keep-alive, net/http.Server.ReadTimeout, and net/http.CloseNotifier is not consistent with the documented and/or expected behavior, and cannot be used together properly. The timer created by setting the server's readTimeout value is reset only at the end of **processing** each request and is not paused/reset when we have finished **reading** in each request, causing CloseNotify() to signal without cause.\r\n\r\n### What did I do\r\nThis test creates a simple http server and then sends 2 requests, each of which takes 40ms of processing time with a 70ms gap between them, responding 200OK if the 40ms of work completes, and 503 if it receives a closeNotify signal before finishing that work.\r\n\r\n### Expected Result\r\nWe should receive 2 200 OK messages and not receive a signal from CloseNotify().\r\n\r\nWe have a readTimeout of 100ms, and a 70ms delay between receiving a response for the first request and sending the second request, so both requests should be read within the timeout and be able to complete their work.\r\n\r\n### Actual Result\r\nWe actually see that during the second request, we receive a closeNotify() signal approximately 30ms after the client has sent the second request. At this time we have clearly read the second request and started processing it with a still alive TCP connection, but still receive a closeNotify() signal, which should not be happening. There is also an attached wireshark log showing this.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"io\"\r\n\t\"io/ioutil\"\r\n\t\"net/http\"\r\n\t\"net/http/httptest\"\r\n\t\"sync\"\r\n\t\"testing\"\r\n\t\"time\"\r\n)\r\n\r\nfunc TestServerKeepAliveReadTimeoutCloseNotify(t *testing.T) {\r\n\tvar startMu sync.Mutex\r\n\tvar start time.Time\r\n\r\n\ttestServer := httptest.NewUnstartedServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n\t\tcn := w.(http.CloseNotifier)\r\n\t\tselect {\r\n\t\tcase \u003c-time.After(40 * time.Millisecond):\r\n\t\t\tw.WriteHeader(http.StatusOK)\r\n\t\tcase \u003c-cn.CloseNotify():\r\n\t\t\tstartMu.Lock()\r\n\t\t\tdelta := time.Since(start)\r\n\t\t\tstartMu.Unlock()\r\n\t\t\tt.Errorf(\"Unexpected CloseNotify received after %s\", delta)\r\n\t\t\tw.WriteHeader(http.StatusServiceUnavailable)\r\n\t\t}\r\n\t}))\r\n\ttestServer.Config.ReadTimeout = 100 * time.Millisecond\r\n\ttestServer.Start()\r\n\tdefer testServer.Close()\r\n\r\n\tfor i := 0; i \u003c 2; i++ {\r\n\t\tstartMu.Lock()\r\n\t\tstart = time.Now()\r\n\t\tstartMu.Unlock()\r\n\r\n\t\tresp, err := http.Get(testServer.URL)\r\n\t\tif err != nil {\r\n\t\t\tt.Fatal(err)\r\n\t\t}\r\n\t\t_, err = io.Copy(ioutil.Discard, resp.Body)\r\n\t\tif err != nil {\r\n\t\t\tt.Fatal(err)\r\n\t\t}\r\n\t\terr = resp.Body.Close()\r\n\t\tif err != nil {\r\n\t\t\tt.Fatal(err)\r\n\t\t}\r\n\r\n\t\ttime.Sleep(70 * time.Millisecond)\r\n\t}\r\n}\r\n```\r\n\r\nTest output\r\n```\r\n$ go test notifierIssue_test.go \r\n--- FAIL: TestServerKeepAliveReadTimeoutCloseNotify (0.22s)\r\n\tnotifierIssue_test.go:26: Unexpected CloseNotify received after 30.752781ms\r\nFAIL\r\nFAIL\tcommand-line-arguments\t0.225s\r\n```\r\n[wSharkLogs.pcapng.zip](https://github.com/golang/go/files/450479/wSharkLogs.pcapng.zip)\r\n\r\n### Potential Fix\r\nCurrently the read timeout is only reset here: https://github.com/golang/go/blob/go1.7/src/net/http/server.go#L749 after a request has finished being processed and we start waiting on the next one. However, the timeout is never paused/reset for the period between the end of reading the request and the end of sending the response, as it should be. \r\n\r\n### What version of Go are you using (`go version`)?\r\ngo version go1.7 darwin/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/4r/1g2c4css78b1yn2q32dmqqm0l05w9h/T/go-build102138663=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"",
	"user": {
		"login": "prabrisat1",
		"id": 1643824,
		"type": "User",
		"site_admin": false
	},
	"comments": 14,
	"created_at": "2016-09-01T20:02:24Z",
	"updated_at": "2016-09-06T23:35:59Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
