{
	"id": 128059887,
	"number": 14065,
	"state": "closed",
	"title": "x/net/context/ctxhttp: race condition preventing response from being closed",
	"body": "The `ctxhttp.Do` method contains a race condition when the context is cancelled before the `client.Do` performed in a go routine returns. The `http.Response` is discarded, leaving its `Body` opened and thus leading to sockets left in `CLOSE_WAIT` state.\r\n\r\nTo reproduce the issue, run this on Linux (can't reproduce on osx, I'm not sure why):\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\r\n\t\"golang.org/x/net/context\"\r\n\t\"golang.org/x/net/context/ctxhttp\"\r\n)\r\n\r\nfunc main() {\r\n\tctx, cancel := context.WithCancel(context.Background())\r\n\tcancel()\r\n\tresp, err := ctxhttp.Get(ctx, nil, \"http://httpbin.org/get\")\r\n\tfmt.Printf(\"%v, %v\\n\", resp, err)\r\n\t\u003c-make(chan struct{})\r\n}\r\n```\r\n\r\nThe output is:\r\n\r\n```\r\n\u003cnil\u003e, context canceled\r\n```\r\n\r\nAs the `res` is `nil`, I have no way for the caller to close the `resp.Body`.\r\n\r\nThen look at `netstat -lan | grep CLOSE_WAIT`, you will see a new socket lying down forever.",
	"user": {
		"login": "rs",
		"id": 68232,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 8,
	"closed_at": "2016-01-26T03:35:38Z",
	"created_at": "2016-01-22T01:19:17Z",
	"updated_at": "2016-01-26T03:35:38Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
