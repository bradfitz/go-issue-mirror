{
	"id": 109483831,
	"body": "I see the situation as symmetric between client and server.  I think your client implementation is standard compliant (no EKU means all) and your server implementation not compliant (no EKU means none).  Since client authentication isn't very commonly used there aren't too many people who care about this...  Not sure if there's something else I can say to convince you here that isn't simply a matter of opinion.  I can do a little more research and see if I come up with something.  In situation where I've seen client certs used EKU wasn't typically set (hence the original report and the similar SO question).\r\n\r\nIf I set RequireAnyClientCert (which I tried) it seems the only place I can verify the cert is in the context of my handler functions.  I'm using persistent connections and I don't want to need to re-verify this for every HTTP request.  It's not clear where I can hook the server to only verify on the initial incoming connection.  Also I wouldn't be able to fail the TLS negotiation at this point, it would need to be an HTTP error.  Is there a better way of doing this?",
	"user": {
		"login": "GuySirton",
		"id": 4914433,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-05T23:45:49Z",
	"updated_at": "2015-06-05T23:45:49Z"
}
