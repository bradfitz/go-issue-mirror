{
	"id": 148618680,
	"body": "@adg Would you please explain the details? I don't think this will bring any extra security issues(arbitrary code execution).\r\n\r\nGiven the feature, all C/C++ source files are specified by Peter who write the golang code. If he want to execute any evil C++ code in the go project, he can do it without the proposed feature. One concern is: Peter should not add files outside the project (~~`#cgo SOURCE_FILES /opt/foo/bar.cpp`~~). If someone deliberately add  evil code to the file, I think Peter rather than the go project should be blame. Anyway this is a rare case I think.\r\nI'm not sure if I got you idea.\r\n\r\n* * *\r\n\r\n@bradfitz That's true, python is not a build system neither. In my view, go is to python as cgo is to cython. Cython can do such stuff while cgo can't. Go is not a build system but actually it(cgo) does, though not doing very tell. Why not trying to make it better.\r\n\r\nLibmc, As a open-source library (not a standlone program), I wish there's no pain for users to use it. Peter can install the library `pip install libmc` just like a normal python library, without worrying about compiling the C/C++ part. Cython did the job for Peter but these's no need for Peter to know anything about Cython. Bazel is great but I don't want it be a dependency of libmc.(If Peter want to use libmc, he has to install Bazel first. -- I think that's terrible.)\r\n",
	"user": {
		"login": "mckelvin",
		"id": 865677,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-16T06:10:55Z",
	"updated_at": "2015-10-16T06:10:55Z"
}
