{
	"id": 148662143,
	"body": "\u003e Different C/C++ library have different build procedures, for example,\r\nsome require running a configure script before make, should go build\r\nsupport building those?\r\n\r\n*should go build support building those?* You can build libmc using **cmake**, that does not mean you have to use cmake. You can even use **autotools** to to build it if you like. These are just build tools. c go is also shipped with a build tool, and the point is, the build tool is not working well.\r\n\r\n\u003e The C/C++ library that the Go package interfaces with should be built\r\nseparately.\r\n\r\nANSWER is in : https://github.com/golang/go/issues/12953#issuecomment-148618680 , in addition:\r\n\r\nThat's true and is the common case. In such way, I have to release the C++ part as a separate library, and resolve version problems between the Python/Golang wrapper and the base library. If the base library is upgraded, programs running under the old version of the Python/Golang wrapper may break. That's terrible. Now that I can build source files from the scratch in Python and Golang, why not?",
	"user": {
		"login": "mckelvin",
		"id": 865677,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-16T09:10:37Z",
	"updated_at": "2015-10-16T09:10:37Z"
}
