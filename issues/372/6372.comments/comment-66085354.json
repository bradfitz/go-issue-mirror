{
	"id": 66085354,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eIn fairness, it could happen in principle if there were a GC bug.  The goroutine would\ncall wait, which would cause a thread to suspend until the wait system call returned. \nThe wait system call would be pointing to an integer on the heap.  A GC bug could free\nthat integer even though there is a pointer to it on the goroutine stack.  It's possible\nthat everything else on the page would also be freed.  The scavenger could then release\nthe page back to the OS via madvise.  Then the wait could return, and get precisely that\nerror.\n\nIt doesn't seem very likely but I can't think of anything else other than a kernel bug.\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-13T00:15:36Z",
	"updated_at": "2014-12-08T10:35:05Z"
}
