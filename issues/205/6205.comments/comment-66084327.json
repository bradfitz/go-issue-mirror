{
	"id": 66084327,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eThanks!\n\n\u003e I'm wondering whether a Go programmer should code with the assumption that multiple\ngoroutines waiting to read or write on a channel can potentially starve?\n\nDefinitely no. If it negatively affects real programs, then it's definitely a bug in Go\nimplementation.\nThis issue was never reported before.\n\nFor server type applications, goroutines routinely block on IO and are scheduled mostly\nchaotically (in the good sense of this word in this context).\n\nFor HPC type applications, you usually don't care what exactly computation runs, you\nneed to do them all anyway. So this is fine to schedule one goroutine as long as it has\nwork to do, when the first goroutine finishes the goroutine will be scheduled and so on.\n\n\u003e[2] I've placed the results from my local go install rather than from play.golang.org,\nbecause it shows a different set of behaviors; and I'm not familiar with any additional\nrestrictions it may be employing.\n\nYes, playground is somewhat special for security reasons.\u003c/pre\u003e\n\n_Labels changed: added **priority-later**, removed **priority-triage**._\n\n\n_Status changed to **Thinking**._",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-21T20:39:03Z",
	"updated_at": "2014-12-08T10:34:08Z"
}
