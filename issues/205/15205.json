{
	"id": 147065803,
	"number": 15205,
	"state": "open",
	"title": "cmd/vet: check for http.Error followed by other statements in handler?",
	"body": "Using `go1.6`\r\n\r\nI recently saw code that did the following:\r\n```\r\nfunc serveHTTP(resp http.ResponseWriter, req *http.Request) {\r\n    ...\r\n\r\n    if err := foo(); err != nil {\r\n        http.Error(resp, err.Error(), http.StatusInternalServerError)\r\n    }\r\n\r\n    if err := bar(); err != nil {\r\n        http.Error(resp, err.Error(), http.StatusInternalServerError)\r\n    }\r\n}\r\n```\r\n\r\nThe assumption made was that http.Error() terminates the current handler in some magical way. Instead, Error simply sets the headers and writes the body message, and it is the programmer's responsibility to return. We should document this.\r\n",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"created_at": "2016-04-08T23:47:35Z",
	"updated_at": "2016-04-12T18:35:59Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
