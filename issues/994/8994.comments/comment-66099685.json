{
	"id": 66099685,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eI'm interested in what people think about the test program below (similar to what I\ndescribed in \u003ca href=\"https://golang.org/issue/7192\"\u003eissue #7192\u003c/a\u003e, comment 12).  \"go vet\" is happy with it, yet \"go run\" reliably\npanics with \"not 42\".\n\nIs \"go vet\" at fault for not warning about this?  Is cmd/gc at fault for not ensuring\nthat spilled (reflect.Value).Pointer() values are tracked as pointers?  Or is the\ndeveloper at fault for writing something tricky that \"obviously\" isn't supported?\n\nThis particular use case is fabricated, but I've seen real world code like \"if\nv1.Pointer() == v2.Pointer()\" that I suspect could spuriously trigger similar failures\nif a concurrent goroutine triggers a stop-the-world GC run that interrupts v2.Pointer().\n\n\npackage main\n\nimport (\n\t\"reflect\"\n\t\"runtime\"\n\t\"unsafe\"\n)\n\ntype array [1000]int\n\nfunc arrayPointer() reflect.Value {\n\treturn reflect.ValueOf(\u0026array{42})\n}\n\nfunc zero() int {\n\truntime.GC()\n\treturn 0\n}\n\nfunc main() {\n\tfor i := 0; i \u0026lt; 20; i++ {\n\t\tif (*array)(unsafe.Pointer(arrayPointer().Pointer()))[zero()] != 42 {\n\t\t\tpanic(\"not 42\")\n\t\t}\n\t}\n}\u003c/pre\u003e",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-10-24T19:45:12Z",
	"updated_at": "2014-12-22T06:37:56Z"
}
