{
	"id": 51281479,
	"number": 3994,
	"state": "closed",
	"title": "ssh: rework/re-think server public key auth API",
	"body": "\u003cpre\u003eI log all successful and failed authentications to the server. I also have more then one\nkey in my ssh client key-ring to test. When open a connection to the go ssh server, the\nfirst key fails, and the second key succeeds.\n\nI see two issues with current auth API.\n1. There is no connection level view on the auth callback, so I don't know if it is a\nfailed auth or just a failed key. Maybe that doesn't matter.\n\n2. Old cached keys will never be ejected, so the first 16 cached keys will remain. Also\nthis bypasses the security method, so if I revoke one of these cached keys, the user\nwill continue to have access until the service is restarted.\n\n? Would it be appropriate to use a constant time compare on the public key auth? Or is\nthat unneeded?\n\n.. I like how simple the current auth mechanism is and I'd like to keep that as much as\npossible.\n\nPerhaps rather then a callback, the auth could be assigned an interface like:\ntype SshAuth interface {\n  Connect(connId uint64, user string)\n  Attempt(connId uint64, user string, publicKey byte[])\n  Finish(connId uint64, success bool)\n}\n\nAnd let the user deal with any caching. In the simplest case one could just implement\nAttempt. Not sold on this suggestion.\u003c/pre\u003e",
	"user": {
		"login": "kardianos",
		"id": 755121,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 12,
	"closed_at": "2014-12-08T10:21:09Z",
	"created_at": "2012-08-23T04:35:05Z",
	"updated_at": "2016-06-24T22:23:35Z"
}
