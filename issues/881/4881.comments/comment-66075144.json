{
	"id": 66075144,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eAnother example to add to the confusion: We have explained above that:\n\n\tvar s uint\n\tvar x = 1.0\u0026lt;\u0026lt;s != 0\n\nis accepted correctly according to the spec (to run: //play.golang.org/p/-bjoJZCYJ2).\ngccgo does not accept it.\n\nBut:\n\n\tvar s uint\n\tvar x = 1.0\u0026lt;\u0026lt;s != 0.0\n\nis not accepted (to run: \u003ca href=\"http://play.golang.org/p/azxrJnkdyw)\"\u003ehttp://play.golang.org/p/azxrJnkdyw)\u003c/a\u003e:\n\nprog.go:7: invalid operation: 1 \u0026lt;\u0026lt; s (shift of type float64)\n\nand gccgo does not accept it either:\n\nx.go:7:13: error: shift of non-integer operand\n  var x = 1.0\u0026lt;\u0026lt;s != 0.0\n             ^\n\nThis is another indiction that gc (and gccgo) do not always honor the special case for\ncomparisons, and in favor \u003ca href=\"https://golang.org/issue/4883\"\u003eissue #4883\u003c/a\u003e which proposes to abandon the special rule for\nshifts in comparisons.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-02-28T18:44:10Z",
	"updated_at": "2014-12-22T06:22:22Z"
}
