{
	"id": 66089986,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eLooks like a GC bitmap is wrong.  The function in which this appears is\ngo/doc.methodSet.set.  The snippet of code is:\n\n\tmset[name] = \u0026Func{\n\t\tDoc:  f.Doc.Text(),\n\t\tName: name,\n\t\tDecl: f,\n\t\tRecv: recv,\n\t\tOrig: recv,\n\t}\n\nHere's a hacked-up trace of what is happening:\n\nmallocing 0xc210081b90 doc.Func    \u0026lt;- the \u0026Func{} allocation\nmallocing 0xc210081be0/80          \u0026lt;- ? - no type info, probably settype data?\nscan go/doc.methodSet.set          \u0026lt;- GC triggered in mapassign\nafter prologue\nfull locals info                   \u0026lt;- pointer map for go/doc.methodSet.set\n  0x28: 0                          \u0026lt;- bug!\n  0x30: 1\n  0x38: 0\n  0x40: 1\n  0x48: 0\n  0x50: 1\n  0x58: 0\n  0x60: 1\n  0x68: 0\n  0x70: 1\n  0x78: 0\nfull args info\n  0x88: 1\n  0x90: 1\nGC: conservative stack scan        \u0026lt;- all ptr-looking things on the stack that point\nto non-marked objects\n  ptr not marked testing.RunTests/144 -\u0026gt; 0xc21005d1b0\n  ptr not marked go/doc.methodSet.set/40 -\u0026gt; 0xc210081b90  \u0026lt;- this is the bug\n  ptr not marked go/doc.test/160 -\u0026gt; 0xc2100c3720\n  ptr not marked go/doc.test/168 -\u0026gt; 0xc210053d90\n  ptr not marked go/doc.test/200 -\u0026gt; 0xc210053d90\n  ptr not marked go/doc.test/208 -\u0026gt; 0xc210051540\n  ptr not marked go/doc.test/304 -\u0026gt; 0xc210051540\nfreeing 0xc210081b90               \u0026lt;- oops!\nmallocing 0xc21004b000 map.bucket[string]*doc.Func\n\nNote that a doc.Func is allocated, a GC is run, then that doc.Func is immediately\ndeallocated.  The bug is the 0x28:0 line.  The return value of the malloc of the Func\nstructure is stored here.\n\nI haven't delved into the compiler yet, but I suspect this has something to do with\nchanging the map operations to take pointers instead of values.  The GC that throws away\nthe doc.Func pointer is called from inside mapassign.  mapassign receives a pointer to\nthe 0x28 stack slot containing the doc.Func pointer.  The slot is still live because we\nhave a pointer to it, but maybe the analysis happens before the rewrite to have map ops\ntake pointers instead of values.  (Before, the doc.Func pointer was copied to the arg\nregion, so even though the pointer isn't dead, the 0x28 stack slot is.)\n\nThe 0x28 slot is otherwise dead after the mapassign.\u003c/pre\u003e\n\n\n\n_Status changed to **Started**._",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-01-13T21:13:03Z",
	"updated_at": "2014-12-22T06:31:24Z"
}
