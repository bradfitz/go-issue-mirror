{
	"id": 66097224,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4 by **jason@eggnet.com**:\n\n\u003cpre\u003eAgreed. Solving this for multiple platforms makes this a lot more complicated.\n\nI also noticed one more problem with just triggering on EPOLLIN. The second epoll_wait\ncall that has this event also does not have EPOLLIN set. If go just looks for EPOLLIN,\nit will probably just leave this fd open forever.\n\nI guess the question is do you have the ability to test something on all of the\nsupported go target environments?\n\nIt's pretty hard to replicate the problem in go. On the other hand replicating it in C\nshould be straight forward.\n\nA program could be written to spawn a thread in epoll_wait (or the kqueue, etc\nequivalents on relevant platforms) to determine which operating systems exhibit the\nproblem in the first place. A program could also be written to test the behavior of\npolling after connect, basically a portable version of the test.c program I uploaded.\n\nI was digging around in libev, since it is a popular cross platform event library, for a\npotential answer to this question.\n\nThe library is just a thin abstraction layer around various event handling mechanisms. I\nguess that is why it is popular. In short, the library doesn't call connect. That is\nsomething the user of the library is supposed to do.\n\nBut I think libev would be useful for simplifying the creation of a portable test.c\nprogram since it covers all of the supported go platforms.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-07-26T19:04:09Z",
	"updated_at": "2014-12-08T10:46:48Z"
}
