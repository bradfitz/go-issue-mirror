{
	"id": 123078329,
	"number": 13691,
	"state": "closed",
	"title": "x/net/http2: curGoroutineID is called in production",
	"body": "When I was looking at http2 benchmark profiles, I found calls to curGoroutineID. This should not happen unless DEBUG_HTTP2_GOROUTINES=1, but it is inexplicably happening anyway.\r\n\r\nAll three calls to curGoroutineID are in gotrack.go, and all three are protected by the boolean. If you make the following patch to gotrack.go, so that the boolean is unambiguously false:\r\n\r\n```\r\ngit diff gotrack.go \r\ndiff --git a/http2/gotrack.go b/http2/gotrack.go\r\nindex 9933c9f..57196da 100644\r\n--- a/http2/gotrack.go\r\n+++ b/http2/gotrack.go\r\n@@ -11,13 +11,12 @@ import (\r\n \t\"bytes\"\r\n \t\"errors\"\r\n \t\"fmt\"\r\n-\t\"os\"\r\n \t\"runtime\"\r\n \t\"strconv\"\r\n \t\"sync\"\r\n )\r\n \r\n-var DebugGoroutines = os.Getenv(\"DEBUG_HTTP2_GOROUTINES\") == \"1\"\r\n+var DebugGoroutines = false\r\n \r\n type goroutineLock uint64\r\n \r\n@@ -49,6 +48,8 @@ func (g goroutineLock) checkNotOn() {\r\n var goroutineSpace = []byte(\"goroutine \")\r\n \r\n func curGoroutineID() uint64 {\r\n+\tpanic(\"how can we possibly be getting here?\")\r\n+\r\n \tbp := littleBuf.Get().(*[]byte)\r\n \tdefer littleBuf.Put(bp)\r\n \tb := *bp\r\n```\r\nAnd then you run the benchmarks, the panic happens:\r\n\r\n```\r\n$ go test -c \u0026\u0026 ./http2.test -test.cpuprofile=prof -test.bench=BenchmarkServerPosts -test.run=XXX\r\nBenchmarkServerPosts-4\t--- FAIL: BenchmarkServerPosts-4\r\n\thttp2_test.go:64: 2015/12/19 16:38:31 http: panic serving 127.0.0.1:54702: how can we possibly be getting here?\r\n\t\tgoroutine 9 [running]:\r\n\t\tnet/http.(*conn).serve.func1(0xc820ad6000)\r\n\t\t\t/Users/jra/go/src/net/http/server.go:1380 +0xc1\r\n\t\tgolang.org/x/net/http2.curGoroutineID(0x0)\r\n\t\t\t/Users/jra/src/golang.org/x/net/http2/gotrack.go:51 +0x6e\r\n\t\tgolang.org/x/net/http2.newGoroutineLock(0x38c620)\r\n\t\t\t/Users/jra/src/golang.org/x/net/http2/gotrack.go:27 +0x2f\r\n\t\tgolang.org/x/net/http2.(*Server).handleConn(0xc8200e2660, 0xc82007a180, 0x949e90, 0xc820ad4000, 0xb26d80, 0xc8203c4080)\r\n\t\t\t/Users/jra/src/golang.org/x/net/http2/server.go:222 +0x23a\r\n```\r\n\r\nThis is with: go version devel +97f854c Sat Dec 19 10:00:04 2015 +0000 darwin/amd64\r\n\r\n(I am profiling on MacOS 10.10 with rsc's kernel patch installed. The profile looks correct in all other aspects.)\r\n",
	"user": {
		"login": "jeffallen",
		"id": 1131456,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2015-12-19T11:21:39Z",
	"created_at": "2015-12-19T10:42:38Z",
	"updated_at": "2015-12-19T11:21:39Z"
}
