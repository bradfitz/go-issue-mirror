{
	"id": 130305912,
	"number": 14173,
	"state": "closed",
	"title": "higher-order functions built in to slice",
	"body": "I've been using Go for about 9 months and over that time I've come to like the explicitness of most of the language's semantics. But I feel that the language lacks some convenient ways to handle slices as you will find in most other languages. I feel that adding HOFs such as map/filter/reduce would make code less verbose when handling slices without compromising on explicitness or type-safety.\r\n\r\nThe current idiom for doing a map operation is something like:\r\n\r\n```go\r\ns0 := []int{1,2,3}\r\ns1 := make([]int, 3)\r\n\r\nfor i := range s0 {\r\n    s1[i] = s0[i] * 2\r\n}\r\n```\r\n\r\nWhile this is a trivial case, and I could have just mutated `s0` in this case, it is clearly very imperative and verbose compared to what it could be.\r\n\r\nI propose an alternative:\r\n\r\n```go\r\ns0 := []int{1,2,3}\r\ns1 := s0.map(func(x int) int {\r\n    return x * 2\r\n})\r\n```\r\n\r\nIn this case the function passed to map has two properties of interest. The argument which would need to be the slice's Kind (type-checked at compile time), and the return type which could be any type. The one caveat is that the type of the resulting slice will need to be inferred from the type returned from the function. \r\n\r\nFor example:\r\n\r\n```go\r\ns0 := []int{1,2,3}\r\ns1 := s0.map(func(x int) float32 {\r\n    return float32(x) / 2\r\n})\r\n```\r\n\r\nwhere `s1` would have type `[]float32`.\r\n\r\nI feel like this seemingly low-hanging fruit would be a step in the right direction in terms of making the language more enjoyable to use with its lack of generics.",
	"user": {
		"login": "huoy",
		"id": 12127285,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"closed_at": "2016-02-01T17:40:22Z",
	"created_at": "2016-02-01T09:19:35Z",
	"updated_at": "2016-07-01T13:28:37Z"
}
