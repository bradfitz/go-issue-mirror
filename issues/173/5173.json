{
	"id": 51283234,
	"number": 5173,
	"state": "closed",
	"title": "add cycle detection to fmt?",
	"body": "\u003cpre\u003eThis is a common rookie mistake:\n\npackage main\n\nimport \u0026quot;fmt\u0026quot;\n\ntype A int\n\nfunc (a A) String() string {\n    return fmt.Sprintf(\u0026quot;%v\u0026quot;, a)\n}\n\nfunc main() {\n    var a A\n    fmt.Println(\u0026quot;this will never print\u0026quot;, a)\n}\n\nThis programs has a cycle calling String(), so it tries to allocate infinite memory and\nthen gets killed by the kernel. The language is behaving as expected, but debugging this\ncan be quite tricky. If this happens in a rarely executed section of code, finding what\ntriggered it is very hard (assuming you don't immediately connect the dots and start\nsearching for possible sources of unintended recursion). Even getting heap profile is\nextremely hard in these circumstances.\n\nOther than hoping that programmers aren't as stupid as me, I wonder if we could make the\nprogram crash with a nicer panic that identifies the bogus recursion, before the kernel\nOOM killer sends a SIGKILL.\n\nIn Go it's possible[1] to allocate up to 128GB of RAM, so just using a fixed limit for\nthis wouldn't work.\n\nI guess next time I could tweak the MaxMem constant in malloc.h and try to run the\nprogram again, to get a go-generated panic.\n\nBut even better would be Jan Merci's suggestion of having cycle detection in the fmt\npackage itself. That would probably catch the most common cases.\n\n[1] \u003ca href=\"https://code.google.com/p/go/source/detail?r=a310cb32c278\"\u003ehttps://code.google.com/p/go/source/detail?r=a310cb32c278\u003c/a\u003e\u003c/pre\u003e",
	"user": {
		"login": "nictuku",
		"id": 202998,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 6,
	"closed_at": "2014-12-08T10:27:43Z",
	"created_at": "2013-03-31T22:33:21Z",
	"updated_at": "2016-06-24T22:36:49Z"
}
