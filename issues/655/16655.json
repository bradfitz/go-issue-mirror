{
	"id": 170349861,
	"number": 16655,
	"state": "open",
	"title": "x/sys/windows: named pipes support on Windows",
	"body": "1. What version of Go are you using (`go version`)?\r\ngo version go1.7rc3 windows/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOEXE=.exe\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOOS=windows\r\nset GOPATH=d:\\developing\\go\\xxx\\..\\3td;d:\\developing\\go\\meijing\\\r\nset GORACE=\r\nset GOROOT=d:\\tools\\go_amd64\r\nset GOTOOLDIR=d:\\tools\\go_amd64\\pkg\\tool\\windows_amd64\r\nset CC=gcc\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\xxx\\go-build491836642=/tmp/go-build -gno-record-gcc-switches\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\n\r\n\r\nOn *nix we have unix sockets - a standard way of doing IPC (interprocess communication).\r\nOn windows we can use TCP sockets for doing the IPC, but a natural way of doing so according to this page (http://msdn.microsoft.com/en-us/library/windows/desktop/aa365574(v=vs.85).aspx) is named pipes. Very close analogy to unix sockets. Providing net.NamedPipeConn in the net package sounds like a good idea to me. I need run web app on the pipe.\r\n\r\nI find this issues https://github.com/golang/go/issues/3599,  but is closed. It provide a alternative package  “gopkg.in/natefinch/npipe.v2”。 but it is unstable and low performance.  All thread will blocked at syscall.WaitForSingleObject while Use PipeListener on the server.",
	"user": {
		"login": "runner-mei",
		"id": 1052632,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "OS-Windows"
		}
	],
	"comments": 5,
	"created_at": "2016-08-10T07:34:56Z",
	"updated_at": "2016-08-12T01:30:41Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
