{
	"id": 138660648,
	"number": 14655,
	"state": "closed",
	"title": "net/http: improve performance for parsePostForm",
	"body": "My main concern is using `ioutil.ReadAll` everytime the `io.Reader` is read in `parsePostForm` since it will then trigger `bytes.makeSlice` and allocate new space each and every time the function is called. Very similar to my open PR to @bradfitz's memcache library (https://github.com/bradfitz/gomemcache/pull/45)\r\n\r\nInstead I think using a `sync.Pool` of `*bytes.Buffer` would be a fairly better solution.\r\n\r\nI've implemented the solution and added a benchmark to show you the performance improvements.\r\n\r\nFirst of, here's the benchmark:\r\n\r\n\tfunc BenchmarkParsePostForm(b *testing.B) {\r\n\t\tb.ReportAllocs()\r\n\r\n\t\t// Create bodies\r\n\t\tbodies := [][]byte{\r\n\t\t\tmake([]byte, 100),\r\n\t\t\tmake([]byte, 1000),\r\n\t\t\tmake([]byte, 10000),\r\n\t\t\tmake([]byte, 100000),\r\n\t\t\tmake([]byte, 1000000),\r\n\t\t\tmake([]byte, 10000000),\r\n\t\t}\r\n\r\n\t\t// Run\r\n\t\tb.RunParallel(func(pb *testing.PB) {\r\n\t\t\tfor pb.Next() {\r\n\t\t\t\t// Create request\r\n\t\t\t\tr, e := NewRequest(\"POST\", \"/test\", bytes.NewReader(bodies[rand.Intn(len(bodies))]))\r\n\t\t\t\tif e != nil {\r\n\t\t\t\t\tb.Error(e.Error())\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Add content type\r\n\t\t\t\tr.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\r\n\r\n\t\t\t\t// Parse post form\r\n\t\t\t\te = r.ParseForm()\r\n\t\t\t\tif e != nil {\r\n\t\t\t\t\tb.Error(e.Error())\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\nNow here's the first run of the benchmark before the improvement:\r\n\r\n\t$ go test ./src/net/http -v -run=^$ -bench=BenchmarkParsePostForm -benchtime=10s -parallel=4 -memprofile=prof.mem\r\n\tBenchmarkParsePostForm-4\t    2000\t  11205322 ns/op\t 7821503 B/op\t      25 allocs/op\r\n\tPASS\r\n\tok  \tnet/http\t32.253s\r\n\r\n\t$ go tool pprof --alloc_space http.test prof.mem Entering interactive mode (type \"help\" for commands)\r\n\t(pprof) top \r\n\t23140.16MB of 23187.37MB total (99.80%)\r\n\tDropped 11 nodes (cum \u003c= 115.94MB)\r\n\t      flat  flat%   sum%        cum   cum%\r\n\t17720.08MB 76.42% 76.42% 17720.08MB 76.42%  bytes.makeSlice\r\n\t 5418.08MB 23.37% 99.79% 23141.66MB 99.80%  net/http.parsePostForm\r\n\t       2MB 0.0086% 99.80% 17722.08MB 76.43%  io/ioutil.readAll\r\n\t\t 0     0% 99.80% 17720.08MB 76.42%  bytes.(*Buffer).ReadFrom\r\n\t\t 0     0% 99.80% 17722.08MB 76.43%  io/ioutil.ReadAll\r\n\t\t 0     0% 99.80% 23141.66MB 99.80%  net/http.(*Request).ParseForm\r\n\t\t 0     0% 99.80% 23144.16MB 99.81%  net/http_test.BenchmarkParsePostForm.func1\r\n\t\t 0     0% 99.80% 23187.37MB   100%  runtime.goexit\r\n\t\t 0     0% 99.80% 23144.16MB 99.81%  testing.(*B).RunParallel.func1\r\n\r\n\t(pprof) list parsePostForm\r\n\tTotal: 22.64GB\r\n\tROUTINE ======================== net/http.parsePostForm in /home/asticode/projects/go/go/src/net/http/request.go\r\n\t    5.29GB    22.60GB (flat, cum) 99.80% of Total\r\n\t\t .          .    884:\t// RFC 2616, section 7.2.1 - empty type\r\n\t\t .          .    885:\t//   SHOULD be treated as application/octet-stream\r\n\t\t .          .    886:\tif ct == \"\" {\r\n\t\t .          .    887:\t\tct = \"application/octet-stream\"\r\n\t\t .          .    888:\t}\r\n\t\t .   512.02kB    889:\tct, _, err = mime.ParseMediaType(ct)\r\n\t\t .          .    890:\tswitch {\r\n\t\t .          .    891:\tcase ct == \"application/x-www-form-urlencoded\":\r\n\t\t .          .    892:\t\tvar reader io.Reader = r.Body\r\n\t\t .          .    893:\t\tmaxFormSize := int64(1\u003c\u003c63 - 1)\r\n\t\t .          .    894:\t\tif _, ok := r.Body.(*maxBytesReader); !ok {\r\n\t\t .          .    895:\t\t\tmaxFormSize = int64(10 \u003c\u003c 20) // 10 MB is a lot of text.\r\n\t\t .          .    896:\t\t\treader = io.LimitReader(r.Body, maxFormSize+1)\r\n\t\t .          .    897:\t\t}\r\n\t\t .    17.31GB    898:\t\tb, e := ioutil.ReadAll(reader)\r\n\t\t .          .    899:\t\tif e != nil {\r\n\t\t .          .    900:\t\t\tif err == nil {\r\n\t\t .          .    901:\t\t\t\terr = e\r\n\t\t .          .    902:\t\t\t}\r\n\t\t .          .    903:\t\t\tbreak\r\n\t\t .          .    904:\t\t}\r\n\t\t .          .    905:\t\tif int64(len(b)) \u003e maxFormSize {\r\n\t\t .          .    906:\t\t\terr = errors.New(\"http: POST too large\")\r\n\t\t .          .    907:\t\t\treturn\r\n\t\t .          .    908:\t\t}\r\n\t    5.29GB     5.29GB    909:\t\tvs, e = url.ParseQuery(string(b))\r\n\t\t .          .    910:\t\tif err == nil {\r\n\t\t .          .    911:\t\t\terr = e\r\n\t\t .          .    912:\t\t}\r\n\t\t .          .    913:\tcase ct == \"multipart/form-data\":\r\n\t\t .          .    914:\t\t// handled by ParseMultipartForm (which is calling us, or should be)\r\n\r\nYou can see that `ioutil.ReadAll(reader)` at line 898 is eating `17.31GB`.\r\n\r\nNow here's the result of the benchmark after the improvement I suggest:\r\n\r\n\t$ go test ./src/net/http -v -run=^$ -bench=BenchmarkParsePostForm -benchtime=10s -parallel=4 -memprofile=prof.mem\r\n\tBenchmarkParsePostForm-4\t    2000\t   7830166 ns/op\t 1874354 B/op\t      18 allocs/op\r\n\tPASS\r\n\tok  \tnet/http\t17.011s\r\n\r\n\t$ go tool pprof --alloc_space http.test prof.mem Entering interactive mode (type \"help\" for commands)\r\n\t(pprof) top\r\n\t4030.01MB of 4033.51MB total (99.91%)\r\n\tDropped 7 nodes (cum \u003c= 20.17MB)\r\n\t      flat  flat%   sum%        cum   cum%\r\n\t 3638.12MB 90.20% 90.20%  3998.51MB 99.13%  net/http.parsePostForm\r\n\t  359.40MB  8.91% 99.11%   359.40MB  8.91%  bytes.makeSlice\r\n\t   31.99MB  0.79% 99.90%    31.99MB  0.79%  net/http_test.BenchmarkParsePostForm\r\n\t    0.50MB 0.012% 99.91%  4001.52MB 99.21%  net/http_test.BenchmarkParsePostForm.func1\r\n\t\t 0     0% 99.91%   359.40MB  8.91%  bytes.(*Buffer).ReadFrom\r\n\t\t 0     0% 99.91%  3999.01MB 99.14%  net/http.(*Request).ParseForm\r\n\t\t 0     0% 99.91%  4033.51MB   100%  runtime.goexit\r\n\t\t 0     0% 99.91%  4001.52MB 99.21%  testing.(*B).RunParallel.func1\r\n\t\t 0     0% 99.91%    31.99MB  0.79%  testing.(*B).launch\r\n\t\t 0     0% 99.91%    31.99MB  0.79%  testing.(*B).runN\r\n\r\n\t(pprof) list parsePostForm\r\n\tTotal: 3.94GB\r\n\tROUTINE ======================== net/http.parsePostForm in /home/asticode/projects/go/go/src/net/http/request.go\r\n\t    3.55GB     3.90GB (flat, cum) 99.13% of Total\r\n\t\t .          .    895:\t// RFC 2616, section 7.2.1 - empty type\r\n\t\t .          .    896:\t//   SHOULD be treated as application/octet-stream\r\n\t\t .          .    897:\tif ct == \"\" {\r\n\t\t .          .    898:\t\tct = \"application/octet-stream\"\r\n\t\t .          .    899:\t}\r\n\t\t .   512.05kB    900:\tct, _, err = mime.ParseMediaType(ct)\r\n\t\t .          .    901:\tswitch {\r\n\t\t .          .    902:\tcase ct == \"application/x-www-form-urlencoded\":\r\n\t\t .          .    903:\t\tvar reader io.Reader = r.Body\r\n\t\t .          .    904:\t\tmaxFormSize := int64(1\u003c\u003c63 - 1)\r\n\t\t .          .    905:\t\tif _, ok := r.Body.(*maxBytesReader); !ok {\r\n\t\t .          .    906:\t\t\tmaxFormSize = int64(10 \u003c\u003c 20) // 10 MB is a lot of text.\r\n\t\t .          .    907:\t\t\treader = io.LimitReader(r.Body, maxFormSize+1)\r\n\t\t .          .    908:\t\t}\r\n\t\t .          .    909:\t\tbuf := bufferPool.Get().(*bytes.Buffer)\r\n\t\t .          .    910:\t\tdefer freeBuffer(buf)\r\n\t\t .   359.40MB    911:\t\t_, e := buf.ReadFrom(reader)\r\n\t\t .          .    912:\t\tif e != nil {\r\n\t\t .          .    913:\t\t\tif err == nil {\r\n\t\t .          .    914:\t\t\t\terr = e\r\n\t\t .          .    915:\t\t\t}\r\n\t\t .          .    916:\t\t\tbreak\r\n\t\t .          .    917:\t\t}\r\n\t\t .          .    918:\t\tif int64(buf.Len()) \u003e maxFormSize {\r\n\t\t .          .    919:\t\t\terr = errors.New(\"http: POST too large\")\r\n\t\t .          .    920:\t\t\treturn\r\n\t\t .          .    921:\t\t}\r\n\t    3.55GB     3.55GB    922:\t\tvs, e = url.ParseQuery(buf.String())\r\n\t\t .          .    923:\t\tif err == nil {\r\n\t\t .          .    924:\t\t\terr = e\r\n\t\t .          .    925:\t\t}\r\n\t\t .          .    926:\tcase ct == \"multipart/form-data\":\r\n\t\t .          .    927:\t// handled by ParseMultipartForm (which is calling us, or should be)\r\n\r\nThe very same command, this time at line 911, now eats only `359.40MB` for the same number of requests.\r\n\r\nIf you need any extra information please let me know.\r\n\r\nIf you think this performance proposal is sound I'll mail the change for review using `codereview`.\r\n\r\nCheers\r\nQuentin\r\n\t",
	"user": {
		"login": "asticode",
		"id": 11619296,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "HelpWanted"
		},
		{
			"name": "Performance"
		}
	],
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 13,
	"closed_at": "2016-10-04T20:05:17Z",
	"created_at": "2016-03-05T08:21:36Z",
	"updated_at": "2016-10-05T21:35:12Z",
	"milestone": {
		"id": 1748849,
		"number": 42,
		"title": "Go1.8Maybe"
	},
	"assignees": [
		{
			"login": "bradfitz",
			"id": 2621,
			"type": "User",
			"site_admin": false
		},
		{
			"login": "odeke-em",
			"id": 4898263,
			"type": "User",
			"site_admin": false
		}
	]
}
