{
	"id": 117995550,
	"number": 13338,
	"state": "open",
	"title": "proposal: encoding/json: Unmarshal support for dynamic types",
	"body": "I'd love to see a version of json.Unmarshal that accepts a type selector. E.g. a function that, given the to-be-decoded json returns the type that should be unmarshalled.\r\n\r\nThis is very useful if you are reading a JSON array where the elements don't all have the same fields and you are ok with a heterogeneous array.\r\n\r\nSay you have this JSON:\r\n\r\n    [{\"a\":1}, {\"b\":2}]\r\n\r\nand you want the unmarshalled array to be like this\r\n\r\n    []interface{}{A{A: 1}, B{B: 2}}\r\n\r\nyou could pass in a function to Unmarshal that, given the map[string]interface{} containing every one of the elements would return an empty struct to be unmarshalled to. These would, of course, slow the things down as it would require double unmarshalling.",
	"user": {
		"login": "ANPez",
		"id": 380056,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 4,
	"created_at": "2015-11-20T08:55:56Z",
	"updated_at": "2015-12-28T17:29:37Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	}
}
