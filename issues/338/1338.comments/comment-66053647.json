{
	"id": 66053647,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003e\"The function append appends zero or more values x to a slice s and returns the\nresulting slice, with the same type as s.\"\n\nAppending to and copying slices, , The Go Programming Language Specification.\n\u003ca href=\"http://golang.org/doc/go_spec.html#Appending_and_copying_slices\"\u003ehttp://golang.org/doc/go_spec.html#Appending_and_copying_slices\u003c/a\u003e\n\nTherefore, we can simply consider a slice s.\n\npackage main\n\nfunc main() {\n\ts := []int{1, 2}\n\t_ = \u0026s\n\t_ = \u0026s[0]\n\t_ = s[0:len(s)]\n\t// cannot take the address of s[0:len(s)]\n\t_ = \u0026s[0:len(s)]\n\t// cannot assign to s[0:len(s)]\n\ts[0:len(s)] = s[0:len(s)]\n}\n\n\"The address-of operator \u0026 generates the address of its operand, which must be\naddressable, that is, either a variable, pointer indirection, or slice indexing\noperation; or a field selector of an addressable struct operand; or an array indexing\noperation of an addressable array.\"\n\nAddress operators, The Go Programming Language Specification.\n\u003ca href=\"http://golang.org/doc/go_spec.html#Address_operators\"\u003ehttp://golang.org/doc/go_spec.html#Address_operators\u003c/a\u003e\n\n\"A primary expression of the form a[x] denotes the element of the array, slice, string\nor map a indexed by x.\"\n\nIndexes, The Go Programming Language Specification\n\u003ca href=\"http://golang.org/doc/go_spec.html#Indexes\"\u003ehttp://golang.org/doc/go_spec.html#Indexes\u003c/a\u003e\n\n\"For a string, array, or slice a, the primary expression a[low : high] constructs a\nsubstring or slice. The index expressions low and high select which elements appear in\nthe result. The result has indexes starting at 0 and length equal to high - low.\"\n\nSlices, The Go Programming Language Specification.\n\u003ca href=\"http://golang.org/doc/go_spec.html#Slices\"\u003ehttp://golang.org/doc/go_spec.html#Slices\u003c/a\u003e\n\n\"Each left-hand side operand must be addressable, a map index expression, or the blank\nidentifier.\"\n\nAssignments, , The Go Programming Language Specification.\n\u003ca href=\"http://golang.org/doc/go_spec.html#Assignments\"\u003ehttp://golang.org/doc/go_spec.html#Assignments\u003c/a\u003e\n\nThe variable s is a slice of int. You can take the address of the variable s: \u0026s. You\ncan take the address of the result of a slice indexing operation, an indexed element of\nthe variable s: \u0026s[0]. You can assign the result of a slicing operation on the variable\ns to a variable of the same type: _ = s[0:len(s)]. You can't take the address of the\nresult of a slicing operation on the variable s: \u0026s[0:len(s)]. It's not addressable;\nit's not the same as a slice indexing operation. You can't assign to a slicing operation\non the variable s: s[0:len(s)] = s[0:len(s)]. It's not addressable.\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-12-11T17:47:11Z",
	"updated_at": "2014-12-08T10:07:53Z"
}
