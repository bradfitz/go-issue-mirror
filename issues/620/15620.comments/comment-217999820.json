{
	"id": 217999820,
	"body": "@ianlancetaylor I think a close reading will be required to determine corner-cases such as this one. I don't remember the details of the original discussions, but the spec is careful in distinguishing between evaluation of operands (of index and indirection expressions), and evaluation of entire expressions.\r\n\r\nTo contrast, if the expressions `xs` and `xs[4]` were on the right, in this order, I'd agree that it's not further specified when those expressions are evaluated. But they are on the left and they are influenced by the assignments, which is the point. For instance: https://play.golang.org/p/1rkU6oIsBL\r\n```\r\npackage main\r\n\r\nvar p *int\r\n\r\nfunc main() {\r\n\tp = new(int)\r\n\tp, *p = nil, 1\r\n\tprintln(*p)\r\n}\r\n```\r\nis of similar nature: The assignment of `nil` to `p` happens before the assignment of 1 to `*p` (and thus the evaluation of `*p` (but not the evaluation of the operand `p`). The result is a run-time panic. This seems to corroborate my previous claim. \r\n\r\nPS: This is of course rubbish. The panic is happening during the `println`. See comments by @mdempsky below.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-09T21:45:57Z",
	"updated_at": "2016-05-09T22:36:30Z"
}
