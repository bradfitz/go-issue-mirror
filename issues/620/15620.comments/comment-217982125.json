{
	"id": 217982125,
	"body": "It's not obvious to me that this program is well-defined according to Go's order of evaluation rules.\r\n\r\nThe rules say that in a tuple assignment all index expressions are evaluated on both the left and right hand sides.  Then all the assignments are done in left to right order.\r\n\r\nWhat the rules do not say is precisely when the first `xs` in the expression `xs[len(xs)-1]` is evaluated.  It's clear that the second `xs` in that expression is evaluated first.  However, the program also expects that the first `xs` is evaluated before the assignment to `xs` in the tuple assignment.  But I don't see anything in the spec that requires that.\r\n\r\nIt is at least possible that the precise behavior of this program is not defined by the spec, and that gccgo is implementing it correctly.\r\n\r\nCC @griesemer for a second opinion.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-09T20:38:07Z",
	"updated_at": "2016-05-09T20:38:07Z"
}
