{
	"id": 169652986,
	"number": 16620,
	"state": "open",
	"title": "proposal: sync: mechanism to select on conditional variables",
	"body": "Sometimes condition variables are the best fit for a problem, and sometimes channels are. They don't compose well, though.\r\n\r\nI've increasingly been finding myself in a position where I would like to select on both channel(s) and a condition variable. This has come up a few times in http2, where I use condition variables for flow control, but there are plenty of channels (including the net/http.Request.Cancel channel) in play too. Sometimes I need to both wait for flow control, or wait for a user to cancel their request, or the peer side to close their connection, etc.\r\n\r\nI would love to be able to select on a condition variable, like if the `sync.Cond` type had a method:\r\n\r\n```go\r\n// WaitChan returns a channel which receives a value when awoken\r\n// by Broadcast or Signal. Unlike Wait, WaitChan does not unlock\r\n// or lock the c.L mutex.\r\nfunc (c *Cond) WaitChan() \u003c-chan struct{} {\r\n     // ....\r\n}\r\n```\r\n\r\nThe semantics would be the receiving from it acts like a `runtime_Syncsemacquire` on `c.sema`. We'd need to define what happens if another case in the select fires first. (does the semacquire get canceled?).\r\n\r\nThoughts?\r\n\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 14,
	"created_at": "2016-08-05T17:07:17Z",
	"updated_at": "2016-09-08T21:38:36Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	},
	"reactions": {
		"total_count": 3,
		"+1": 3
	}
}
