{
	"id": 66065106,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11 by **diogomfranco**:\n\n\u003cpre\u003e\u003e On the other hand, nothing stops our users from doing\nos.Create(`\\\\?\\c:\\tmp\\alex.txt`), if they want to.\n\nThat'd mean making stdlib users write OS-dependent code even without using syscall\n(which doesn't sound desirable); moreover, *not* writing that OS-dependent code\nwould only be noticed on corner cases and would imply lots of boilerplate around\nevery single call that deals with the filesystem, which is specially harsh when dealing\nwith relative paths.\n\nIf making os handling such conversion automatically looks overkill, then maybe\nadding a function to path/filepath that can create such a \"super-absolute\" path,\nbut returns a regular absolute path on non-windows? It would also need documentation\nthat it's needed to handle long paths (or long CWDs) on windows, and possibly a\nreference on the os package's filesystem functions.\n\nAs an additional note, \"native Cygwin\" apps are not hit by this restriction and can\naccess the full 32k character paths with stdio by internally always doing the path\nconversion to \"super-absolute\" paths. I was hit by this when running a Go program\nagainst files that were created by a cygwin program.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-07-31T02:05:55Z",
	"updated_at": "2014-12-08T10:17:27Z"
}
