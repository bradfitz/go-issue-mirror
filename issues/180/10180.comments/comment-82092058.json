{
	"id": 82092058,
	"body": "There are two linkers in the GNU binutils.  They both support options -z common-page-size and -z max-page-size to set, at link time, the usual page size and the maximum page size.  The default values for these are processor specific.  These all feed into the algorithm that determines the layout of the segments in memory.  Basically, each segment is aligned to the maximum page size.  The linkers try to save a page on disk by offsetting the start of the data segment so that the last page of the text segment and the first page of the data segment can be on the same page of the executable (obviously that page gets mapped twice in memory, once executable, once writable).  When trying to save this page, they use the usual page size, not the maximum page size.\r\n\r\nOn amd64, for gold, the default maximum and usual page size are both 0x10000.  That is, gold does not support huge pages by default.  For the GNU linker, the default maximum page size is The usual page size is 0x200000 and the default usual page size is 0x1000.\r\n\r\nI'm sure you're glad you asked.\r\n\r\nFor these kinds of numbers, I agree that the amount of VM space wasted by large segment alignments is not very important (although there used to be an interesting bug in glibc when it was able to map a small shared library into the gap between the text and data segments of the executable).  For Go, I think the linker should align the segments to the maximum page size that is really used on the processor.  I don't see why this would make the binary bigger, at least I don't see why it would be bigger on ELF systems.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-03-17T04:10:29Z",
	"updated_at": "2015-03-17T04:10:29Z"
}
