{
	"id": 81957509,
	"body": "Detecting the page size inside cmd/dist sounds reasonable.\n\nDumb question time, what are the downsides of just assuming 64k pages\neverywhere?\nOn 17 Mar 2015 07:15, \"Minux Ma\" \u003cnotifications@github.com\u003e wrote:\n\n\u003e At least three problems here:\n\u003e 1. cmd/ld INITRND needs to be at least as large as the page size, otherwise\n\u003e we might trigger kernel bugs. See\n\u003e https://groups.google.com/forum/#!topic/golang-nuts/29RraQ-t3gc\n\u003e for a case.\n\u003e\n\u003e I think we can have a way to have a much larger INITRND without increasing\n\u003e the size of the binary by leaving a VM hole between the segments.\n\u003e (e.g. text segment ends at N\n\u003e *INITRND + x, then we make the next segment start at (N+1)*INITRND + x +\n\u003e 1, so there is no hole in the file, but we've made\n\u003e sure different segments end up on different page (if INITRND \u003e page size).\n\u003e\n\u003e    1.\n\u003e\n\u003e    _PhysPageSize in runtime needs to be a variable and auto detected\n\u003e    at process start up. This might incur a performance overhead, but as\n\u003e    the\n\u003e    proliferation of non-4K page size systems (power64, arm, arm64), we\n\u003e    should\n\u003e    make the change to continue the Go tradition that it just works\n\u003e    without extra\n\u003e    tuning. At least, we should make cmd/dist detect page size and tune the\n\u003e    const in runtime.\n\u003e    2.\n\u003e\n\u003e    syscall.Getpagesize should return the value in the runtime. Right now,\n\u003e    it's hardcoded on all systems.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/10180\u003e.\n\u003e\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-03-16T21:52:03Z",
	"updated_at": "2015-03-16T21:52:03Z"
}
