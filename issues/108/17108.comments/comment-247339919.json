{
	"id": 247339919,
	"body": "On 14 September 2016 at 23:52, Robert Griesemer \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e If we have the parent, field name (or field index), plus slice index if\n\u003e needed, we have all that is necessary because we can use reflect to set a\n\u003e field with this information. Changing/rewriting fields is (probably) much\n\u003e less common then reading (traversing) the tree, thus the more costly set\n\u003e field operation is ok. In turn, the API can be closer to Walk and thus\n\u003e easier to use:\n\u003e\n\nSounds good.  It's interesting that Apply is now a primitive interface for\ntraversing AST tree nodes and edges, whether or not you wish to update the\ntree.  In other words, you could define the existing ast.Walk and\nast.Inspect functions in terms of Apply.  That might be a good exercise to\nvalidate the API.\n\n\n\u003e // Apply traverses a syntax tree recursively, starting with the node\n\u003e // identified by parent, name, index, and n. See Apply for the meaning\n\u003e\n\u003e typo: \"See ApplyFunc\"\n\n\u003e\n\n1) Should Apply require parent, name, and index (which often will be nil,\n\u003e \"\", -1) so that even the top-level node can be rewritten, or should that\n\u003e require a special case and in return a simpler Apply that just requires,\n\u003e the starting node n, pre, and post?\n\u003e\nI don't have a good sense of how important this case will be.  You could\nprovide a wrapper for the root case with the three zero arguments.\n\n\u003e 2) Should field addressing happen via a name (string), which is nice to\n\u003e read but more expensive than say just the field index as provided by\n\u003e reflect)?\n\u003e\nI see three reasons to prefer field names over field indices:\n(1) Client code that uses strings will be easier to read.  Unnamed integer\nconstants are inscrutable and error-prone.\n(2) Strings are invaluable during debugging.  You can print them out to\ndocument the descent, something that is hard to do with the existing (read\nonly) traversal API.\n(3) The AST is bound to change, if only slightly, in future versions of Go,\nand we should not assume that all new fields will be added at the end of\ntheir struct, thus the field numbering may not be durable in the long term.\n",
	"user": {
		"login": "alandonovan",
		"id": 8433140,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-15T14:13:03Z",
	"updated_at": "2016-09-15T14:13:03Z"
}
