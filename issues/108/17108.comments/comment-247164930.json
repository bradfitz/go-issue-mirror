{
	"id": 247164930,
	"body": "Here's a slightly more thought-through API that provides explicit names for fields. Nice, but definitively somewhat costly:\r\n```\r\n// An ApplyFunc is invoked by Apply for each node, before and/or after\r\n// the node's children. See Apply for the interpretation of the return\r\n// value.\r\n//\r\n// The node is given by the node pointer's address addr which makes it\r\n// possible for an ApplyFunc to rewrite (replace) the node. The node\r\n// is referred to from its parent which contains a field with the given\r\n// name. If the field is a list, index identifies the node's position in\r\n// that list; index is \u003c 0 otherwise. Or roughly speaking:\r\n//\r\n//   addr == \u0026parent.name         if index \u003c 0\r\n//   addr == \u0026parent.name[index]  if index \u003e= 0\r\n//\r\n// Exception: If the parent is an *ast.Package, and Apply is iterating\r\n// through the Files map, name is the filename, and index is incremented\r\n// by 1 with each file, starting at 0. Assigning to *addr will change the\r\n// corresponding Files map entry but only upon return from pre and post.\r\ntype ApplyFunc func(parent Node, name string, index int, addr interface{}) bool\r\n\r\n// Apply traverses a syntax tree recursively, starting with the node\r\n// identified by parent, name, index, and addr. See Apply for the meaning\r\n// of these arguments.\r\n//\r\n// If pre is not nil, it is called for each node before its children\r\n// are traversed (pre-order). If the result of calling pre is false,\r\n// no children are traversed, and post is not called for the node.\r\n//\r\n// If post is not nil, it is called for each node after its children\r\n// were traversed (post-order). If the result of calling post is false,\r\n// traversal is terminated and Apply returns immediately.\r\n//\r\n// Only fields that refer to AST nodes are considered children;\r\n// specifically, token.Pos, Scopes, Objects, and fields of basic types\r\n// (strings, etc.) are ignored. Children are traversed in the order in\r\n// which they appear in the respective node's struct definition.\r\nfunc Apply(parent Node, name string, index int, addr interface{}, pre, post ApplyFunc) {\r\n```",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-14T21:44:02Z",
	"updated_at": "2016-09-14T21:44:02Z"
}
