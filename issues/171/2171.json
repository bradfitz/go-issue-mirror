{
	"id": 51278835,
	"number": 2171,
	"state": "closed",
	"title": "in json.Indent(), json.SyntaxError's Offset is always 0",
	"body": "\u003cpre\u003eCalling json.Indent broken json will create SyntaxErrors with Offsets always equal to 0\ninstead the proper Offsets similar to json.Unmarshal, etc.\n\nFor example,  these tests will fail:\n\ntype indentErrorTest struct {\n\tin  string\n\terr os.Error\n}\n\nvar indentErrorTests = []indentErrorTest{\n\t{`{\u0026quot;X\u0026quot;: \u0026quot;foo\u0026quot;, \u0026quot;Y\u0026quot;}`, \u0026amp;SyntaxError{\u0026quot;invalid character '}' after object key\u0026quot;, 17}},\n\t{`{\u0026quot;X\u0026quot;: \u0026quot;foo\u0026quot; \u0026quot;Y\u0026quot;: \u0026quot;bar\u0026quot;}`, \u0026amp;SyntaxError{\u0026quot;invalid character '\\\u0026quot;' after object key:value pair\u0026quot;, 13}},\n}\n\nfunc TestIdentErrors(t *testing.T) {\n\tfor i, tt := range indentErrorTests {\n\t\tslice := make([]uint8, 0)\n\t\tbuf := bytes.NewBuffer(slice)\n\t\tif err := Indent(buf, []uint8(tt.in), \u0026quot;\u0026quot;, \u0026quot;\u0026quot;); err != nil {\n\t\t\tif !reflect.DeepEqual(err, tt.err) {\n\t\t\t\tt.Errorf(\u0026quot;#%d: checkValid: %#v\u0026quot;, i, err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t}\n}\u003c/pre\u003e",
	"user": {
		"login": "jmhodges",
		"id": 598,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:11:41Z",
	"created_at": "2011-08-22T04:18:18Z",
	"updated_at": "2016-06-24T19:33:37Z"
}
