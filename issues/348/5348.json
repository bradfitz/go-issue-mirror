{
	"id": 51283504,
	"number": 5348,
	"state": "closed",
	"title": "runtime: finalizers keep data live for a surprising amount of time",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\n1. \u003ca href=\"http://play.golang.org/p/G8in4BHWr-\"\u003ehttp://play.golang.org/p/G8in4BHWr-\u003c/a\u003e\n2. Build with -ldflags=-Z  (note that you can't reproduce this on play)\n\nWhat is the expected output?\nHello, playground\nGC T\nGC string\nGoodbye, playground\n\nWhat do you see instead?\nHello, playground\nGC T\nGoodbye, playground\n\nThe string is never GC'd.  However, if you remove the finalizer from the struct, the\nstring *is* GC'd.\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g, I guess?\n\nWhich operating system are you using?\nLinux\n\nWhich version are you using?  (run 'go version')\ngo version devel +62bf913b4f40 Wed Feb 27 20:55:01 2013 -0800 linux/amd64\n\nPlease provide any additional information below.\nAdding a \u0026quot;*(void**)frame = 0\u0026quot; just after the reflect.call in runfinq() results\nin the string being GC'd on the next GC pass.  If I'm right, this limits the data held\nartificially live to a single object.\u003c/pre\u003e",
	"user": {
		"login": "neild",
		"id": 52544,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 10,
	"closed_at": "2014-12-08T10:28:54Z",
	"created_at": "2013-04-24T18:45:41Z",
	"updated_at": "2016-06-24T22:38:47Z"
}
