{
	"id": 184841627,
	"body": "OK, I guess it comes down to this:\r\n\r\n\u003e Suppose that, inside a directory \"foo\", you do `golint ../foo`. A file path will be printed as \"../foo/bar.go\"\r\n\u003e\r\n\u003e That is, all the paths are prefixed with \"..\", since this is how I specified the import paths on the command line.\r\n\u003e\r\n\u003e ...\r\n\u003e\r\n\u003e Using shortPath in the previous example, golint would print \"bar.go\", and not \"../foo/bar.go\"\r\n\r\nThat's right, that's how the go command works today:\r\n\r\n```\r\n$ cd $GOROOT/src/io/ioutil\r\n$ echo broken \u003ebad.go\r\n$ go build ../ioutil\r\ncan't load package: package io/ioutil: \r\nbad.go:1:1: expected 'package', found 'IDENT' broken\r\n$ \r\n```\r\n\r\nThe error message refers to `bad.go`, not `../ioutil/bad.go`.\r\n\r\nNow I understand what you want from the go command, but I don't see a good way to get it to you. The fact is, the model you're asking for is contrary to how the go command thinks about import paths, about packages, and about files. It could go out of its way to do something it doesn't need, for clients that want to be different, but the tool ecosystem would be more consistent if clients followed the go command's lead.\r\n\r\nI don't think it's worth adding complexity to the go command just to allow golint to (continue to?) print file names in an idiosyncratic way.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-16T19:25:59Z",
	"updated_at": "2016-02-16T19:25:59Z"
}
