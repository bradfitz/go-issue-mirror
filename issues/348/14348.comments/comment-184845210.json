{
	"id": 184845210,
	"body": "On Tue, Feb 16, 2016 at 8:20 PM, Russ Cox \u003cnotifications@github.com\u003e wrote:\n\n\u003e On golang-dev you asked:\n\u003e\n\u003e It is possible that I'm misunderstanding what \"local\" means, for the go\n\u003e tool.\n\u003e\n\u003e The default for imports in Go is to be \"absolute\" or \"fully-qualified\" in\n\u003e the sense that import \"X\" has a fixed meaning regardless of the directory\n\u003e in which it appears (ignoring vendoring). Within GOROOT and GOPATH, this is\n\u003e the only permitted import form.\n\u003e\n\u003e Outside GOROOT and GOPATH, mainly to allow simple experiments and\n\u003e throwaway programs, the go command permits an import to use a relative\n\u003e import path like \"./X\", which obviously changes meaning based on the\n\u003e directory in which it appears. But directory a/b/c might import \"./d\" and\n\u003e directory a/b might import \"./c/d\" and directory a/b/c/x might import\n\u003e \"../d\" and those all refer to the same directory, so internally the go\n\u003e command must construct one canonical import path for that directory. The\n\u003e path it constructs is _/, which you see, for example, in the output of go\n\u003e list. The go command refers to packages found outside GOROOT/GOPATH as\n\u003e \"local\", in the sense that they are not part of the GOROOT/GOPATH space.\n\u003e\n\nThanks. This makes things more clear.\nMy confusion was probably caused by the fact that I was reading the source\ncode from the point of view of go command line processing.\n\nBy the way: is this documented somewhere? I don't remember reading a\ndocument where this was well explained.\nAll I can remember is that I always found go tool hard to understand,\nprobably because it has evolved a lot.\n",
	"user": {
		"login": "perillo",
		"id": 6217088,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-16T19:33:44Z",
	"updated_at": "2016-02-16T19:33:44Z"
}
