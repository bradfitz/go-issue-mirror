{
	"id": 184838283,
	"body": "On golang-dev you asked:\r\n\r\n\u003e It is possible that I'm misunderstanding what \"local\" means, for the go tool.\r\n\r\nThe default for imports in Go is to be \"absolute\" or \"fully-qualified\" in the sense that import \"X\" has a fixed meaning regardless of the directory in which it appears (ignoring vendoring). Within GOROOT and GOPATH, this is the only permitted import form.\r\n\r\nOutside GOROOT and GOPATH, mainly to allow simple experiments and throwaway programs, the go command permits an import to use a relative import path like \"./X\", which obviously changes meaning based on the directory in which it appears. But directory a/b/c might import \"./d\" and directory a/b might import \"./c/d\" and directory a/b/c/x might import \"../d\" and those all refer to the same directory, so internally the go command must construct one canonical import path for that directory. The path it constructs is _/\u003cfullpath\u003e, which you see, for example, in the output of go list. The go command refers to packages found outside GOROOT/GOPATH as \"local\", in the sense that they are not part of the GOROOT/GOPATH space.\r\n\r\nCode in GOROOT/GOPATH needs to be self-contained, so it cannot import local packages, although of course imports in the other direction are fine.\r\n\r\nAll that concerns import paths found in import statements in source code.\r\n\r\nThe go command line processes import paths as well, and there it is convenient to allow mentioning a directory (for example, in GOROOT/src/io, saying . or ./ioutil) as a shorthand for the standard, absolute import path of that directory (for that example, io or io/ioutil). The shorthand is limited to command line argument processing. The code in GOROOT/src/io cannot import \"./ioutil\".\r\n\r\n\r\n",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-16T19:18:56Z",
	"updated_at": "2016-02-16T19:18:56Z"
}
