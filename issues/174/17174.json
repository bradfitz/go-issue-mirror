{
	"id": 178250813,
	"number": 17174,
	"state": "closed",
	"title": "An empty for{} will block large slice allocation in another goroutine, even with GOMAXPROCS \u003e 1 ?",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n### What version of Go are you using (`go version`)?\r\n`go version go1.6.1 darwin/amd64`\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/yaofu/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n### What did you do?\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"runtime\"\r\n)\r\n\r\nfunc work() {\r\n\tprintln(\"before\")\r\n\ts := make([]int, 6000000)\r\n\tprintln(\"after\")\r\n\ts[0] = 1\r\n}\r\n\r\nfunc main() {\r\n\truntime.GOMAXPROCS(4)\r\n\r\n\t//work()   // This is OK. Very quick.\r\n\tgo work()\r\n\r\n\tfor {\r\n\t}\r\n}\r\n```\r\n\r\nPS: I know `for{}` busy wait is no good. But I'm curious to know the underlying reason.\r\n\r\n### What did you expect to see?\r\nfollowing print:\r\n```\r\nbefore\r\nafter\r\n```\r\n\r\n### What did you see instead?\r\nfollowing printed:\r\n```\r\nbefore\r\n```\r\n\r\n\r\n",
	"user": {
		"login": "yaofu1986",
		"id": 18565524,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2016-09-21T06:26:05Z",
	"created_at": "2016-09-21T05:34:11Z",
	"updated_at": "2016-09-22T08:33:28Z"
}
