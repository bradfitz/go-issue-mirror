{
	"id": 146597666,
	"number": 15174,
	"state": "open",
	"title": "database/sql: different handling of underlying types in DefaultParameterConverter",
	"body": "After e405c29ce74bf8145f88e4ce33b292474911ce71 (#11489) `DefaultParameterConverter` documentation says:\r\n\r\n// DefaultParameterConverter returns its argument directly if\r\n// IsValue(arg). Otherwise, if the argument implements Valuer, its\r\n// Value method is used to return a Value. As a fallback, the provided\r\n// argument's underlying type is used to convert it to a Value:\r\n// underlying integer types are converted to int64, floats to float64,\r\n// and **strings to []byte**. If the argument is a nil pointer,\r\n// ConvertValue returns a nil Value. If the argument is a non-nil\r\n// pointer, it is dereferenced and ConvertValue is called\r\n// recursively. Other types are an error.\r\n\r\nUnderlying integers are really converted to int64, but underlying strings are not in fact converted â€“ there is no code for this.\r\n\r\nTestcase: https://github.com/AlekSi/go-sql-bugs/blob/master/issue15174_test.go\r\nTest output: https://travis-ci.org/AlekSi/go-sql-bugs/builds/121408329 (see 1.6 and tip)\r\n\r\nI propose to do what documentation says and convert the underlying string to []byte, it will help with custom string-like types with constants (enums).\r\nAlso, can we do the same thing for bools?\r\n\r\n/cc @bradfitz",
	"user": {
		"login": "AlekSi",
		"id": 11512,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"created_at": "2016-04-07T12:09:44Z",
	"updated_at": "2016-08-25T22:00:25Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	}
}
