{
	"id": 51284788,
	"number": 6174,
	"state": "open",
	"title": "cmd/go: provide support for VCS branches in go get / import",
	"body": "by **tv@duh.org**:\n\n\u003cpre\u003eRunning go1.1.2 -- but as far as I can tell, this hasn't been filed as an actual issue\nyet.\n\nBasically, the vcs-based checkouts are now pretty flexible (even when not from a\nwell-known hosting service), but there is no syntax for checking out a branch other than\nthe vcs's \u0026quot;default\u0026quot; branch. Something as simple as\n\u0026quot;example.org/foo/projname.vcs::branchname/bar/baz\u0026quot; as the URL syntax might be\ngood enough. How this is stored on disk to prevent conflicts would likely be more\ncomplicated, perhaps as separate parallel directories of some fashion.\n\nNote that this is not the same goal as in \u003ca href=\"https://golang.org/issue/5779\"\u003eissue #5779\u003c/a\u003e. Here, I'm talking about giving a\nthird-party library creator the ability to supply generationally stable APIs for that\nlibrary (irrespective of Go language version, for which build constraints are probably\nsufficient for now).\n\nFor instance, the main development branch of example.org/mylibrary.git may contain a\nrefactor/rethink of how fundamental logic works, but this requires an API-call rework by\nall downstream applications. The author could provide a \u0026quot;1.x-stable\u0026quot; branch,\nor other indicative name, to keep changes as compatible as possible without impeding new\ndevelopment.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"created_at": "2013-08-16T23:07:08Z",
	"updated_at": "2015-04-14T19:45:20Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
