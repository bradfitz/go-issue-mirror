{
	"id": 227058058,
	"body": "@mezoni I agree that this proposal (if for methods only) would not be hard to implement, and as proposed would also not pose significant syntactic hurdles. There's some more look-ahead needed, but the mechanism in this case exists (the factored out receiver can be \"copied\" for each grouped method declaration).\r\n\r\nThat said, for symmetry and DRY (since that's one of your points with other declarations), one should also permit grouping of functions (why have an exception here?).\r\n\r\nFor instance, the following is a valid method declaration:\r\n\r\n```\r\nfunc (f (T)) M() {...}\r\n```\r\n\r\nwhere f is the name of the receiver of type T, which happens to be parenthesized. If grouping of functions were permitted, the following\r\n\r\n```\r\nfunc (\r\n   f (T) ...\r\n```\r\narguably is a valid opening of a group of functions (not methods!), the first one called f taking an unnamed argument T. Note that only after the first closing ) we know what we have in front of us. Dealing with the look-ahead in this case is more complicated because we need to go from what looked like a receiver declaration to a regular function declaration. It is also becoming a readability burden because a reader has to do the same look-ahead.\r\n\r\nThis was definitively one of the considerations that made it into the decision not to group functions. But more importantly, for methods, one of the points of Go method declarations is that we can explicitly declare even the receiver, _with_ every method. Factoring out the receiver is a slippery slope. Why not leave it away and always call the receiver 'this' or 'self'? The point here is that it is just a parameter, and we want to see it as such and be able to name it for each method (or not). If you permit to factor out the receiver parameter, why not the others?\r\n\r\nThere's no \"right\" answer. At the end this was a design decision that the three of us (Ken, Rob, and I) felt comfortable with. We looked at grouping of functions but it didn't quite feel as natural or even important as for the other declarations, and so we left it out.\r\n\r\nAt the end of the day this is syntactic sugar. The bar is higher than that for language changes (even if they are backward-compatible).\r\n",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-20T06:14:25Z",
	"updated_at": "2016-06-20T06:14:25Z"
}
