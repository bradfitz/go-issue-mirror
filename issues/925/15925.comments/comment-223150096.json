{
	"id": 223150096,
	"body": "The SSA backend doesn't handle arrays terribly well, as they are not SSAable.  This leads to some extra copies that the old backend was able to avoid.\r\n\r\n`add` is inlined in this test.  The inner loop of the `BenchmarkAdd` is (with ssa):\r\n```\r\n\t0x0047 00071 (vec_test.go:12)\tMOVQ\t$0, \"\".~r1(SP)\r\n\t0x004f 00079 (vec_test.go:12)\tMOVQ\t$0, \"\".~r1+8(SP)\r\n\t0x0058 00088 (vec_test.go:12)\tMOVQ\t$0, \"\".autotmp_5+48(SP)\r\n\t0x0061 00097 (vec_test.go:12)\tMOVQ\t$0, \"\".autotmp_5+56(SP)\r\n\t0x006a 00106 (vec_test.go:12)\tMOVSS\t\"\".v0+32(SP), X0\r\n\t0x0070 00112 (vec_test.go:12)\tMOVSS\t\"\".v1+16(SP), X1\r\n\t0x0076 00118 (vec_test.go:12)\tADDSS\tX1, X0\r\n\t0x007a 00122 (vec_test.go:12)\tMOVSS\tX0, \"\".autotmp_5+48(SP)\r\n\t0x0080 00128 (vec_test.go:12)\tMOVSS\t\"\".v0+36(SP), X0\r\n\t0x0086 00134 (vec_test.go:12)\tMOVSS\t\"\".v1+20(SP), X1\r\n\t0x008c 00140 (vec_test.go:12)\tADDSS\tX1, X0\r\n\t0x0090 00144 (vec_test.go:12)\tMOVSS\tX0, \"\".autotmp_5+52(SP)\r\n\t0x0096 00150 (vec_test.go:12)\tMOVSS\t\"\".v0+40(SP), X0\r\n\t0x009c 00156 (vec_test.go:12)\tMOVSS\t\"\".v1+24(SP), X1\r\n\t0x00a2 00162 (vec_test.go:12)\tADDSS\tX1, X0\r\n\t0x00a6 00166 (vec_test.go:12)\tMOVSS\tX0, \"\".autotmp_5+56(SP)\r\n\t0x00ac 00172 (vec_test.go:12)\tMOVSS\t\"\".v0+44(SP), X0\r\n\t0x00b2 00178 (vec_test.go:12)\tMOVSS\t\"\".v1+28(SP), X1\r\n\t0x00b8 00184 (vec_test.go:12)\tADDSS\tX1, X0\r\n\t0x00bc 00188 (vec_test.go:12)\tMOVSS\tX0, \"\".autotmp_5+60(SP)\r\n\t0x00c2 00194 (vec_test.go:12)\tMOVUPS\t\"\".autotmp_5+48(SP), X0\r\n\t0x00c7 00199 (vec_test.go:12)\tMOVUPS\tX0, \"\".~r1(SP)\r\n\t0x00cb 00203 (vec_test.go:12)\tMOVUPS\t\"\".~r1(SP), X0\r\n\t0x00cf 00207 (vec_test.go:12)\tMOVUPS\tX0, \"\".tmp(SB)\r\n\t0x00d6 00214 (vec_test.go:11)\tINCQ\tCX\r\n\t0x00d9 00217 (vec_test.go:11)\tMOVQ\t184(AX), DX\r\n\t0x00e0 00224 (vec_test.go:11)\tCMPQ\tCX, DX\r\n\t0x00e3 00227 (vec_test.go:11)\tJLT\t$0, 71\r\n```\r\nNote the unnecessary zeroings of ~r1 and autotmp_5, and the copy autotmp5 -\u003e ~r1 -\u003e tmp.\r\n```\r\n\t0x0090 00144 (vec_test.go:12)\tLEAQ\t\"\".v0+16(SP), BX\r\n\t0x0095 00149 (vec_test.go:12)\tMOVQ\tBX, CX\r\n\t0x0098 00152 (vec_test.go:12)\tLEAQ\t\"\".v1(SP), BX\r\n\t0x009c 00156 (vec_test.go:12)\tMOVQ\tBX, AX\r\n\t0x009f 00159 (vec_test.go:12)\tMOVQ\t$0, BX\r\n\t0x00a1 00161 (vec_test.go:12)\tXORPS\tX0, X0\r\n\t0x00a4 00164 (vec_test.go:12)\tMOVQ\t$0, BX\r\n\t0x00a6 00166 (vec_test.go:12)\tMOVSS\t(CX), X4\r\n\t0x00aa 00170 (vec_test.go:12)\tMOVSS\t(AX), X1\r\n\t0x00ae 00174 (vec_test.go:12)\tADDSS\tX1, X4\r\n\t0x00b2 00178 (vec_test.go:12)\tMOVSS\t4(CX), X3\r\n\t0x00b7 00183 (vec_test.go:12)\tMOVSS\t4(AX), X1\r\n\t0x00bc 00188 (vec_test.go:12)\tADDSS\tX1, X3\r\n\t0x00c0 00192 (vec_test.go:12)\tMOVSS\t8(CX), X2\r\n\t0x00c5 00197 (vec_test.go:12)\tMOVSS\t8(AX), X1\r\n\t0x00ca 00202 (vec_test.go:12)\tADDSS\tX1, X2\r\n\t0x00ce 00206 (vec_test.go:12)\tMOVSS\t12(CX), X0\r\n\t0x00d3 00211 (vec_test.go:12)\tMOVSS\t12(AX), X1\r\n\t0x00d8 00216 (vec_test.go:12)\tADDSS\tX1, X0\r\n\t0x00dc 00220 (vec_test.go:12)\tMOVSS\tX4, \"\".tmp(SB)\r\n\t0x00e4 00228 (vec_test.go:12)\tMOVSS\tX3, \"\".tmp+4(SB)\r\n\t0x00ec 00236 (vec_test.go:12)\tMOVSS\tX2, \"\".tmp+8(SB)\r\n\t0x00f4 00244 (vec_test.go:12)\tMOVSS\tX0, \"\".tmp+12(SB)\r\n\t0x00fc 00252 (vec_test.go:11)\tINCQ\tDX\r\n\t0x00ff 00255 (vec_test.go:11)\tMOVQ\t184(SI), BX\r\n\t0x0106 00262 (vec_test.go:11)\tCMPQ\tBX, DX\r\n\t0x0109 00265 (vec_test.go:11)\tJGT\t$0, 144\r\n```\r\nThe old compiler does the direct write to the destination.\r\n\r\nThis is on my radar to fix, but it isn't easy.  Hopefully for 1.8.\r\nSee also #14762, it applies to the uninlined version of `add`.",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-01T23:00:24Z",
	"updated_at": "2016-06-01T23:00:24Z"
}
