{
	"id": 158022097,
	"number": 15925,
	"state": "open",
	"title": "cmd/compile: SSA performance regression due to array zeroing",
	"body": "go version devel +bbd1dcd Wed Jun 1 21:32:46 2016 +0000 darwin/amd64\r\n\r\nhttps://github.com/hydroflame/go1.7bench\r\nThis very simple program take 2 4 element vector and performs component wise addition.\r\nIf you run the benchmark with SSA and without you will see that it is much faster without SSA.\r\n\r\n\r\n\t$ go test -run NONE -bench . -gcflags -ssa=0 \u003e nossa.txt\r\n\ttesting: warning: no tests to run\r\n\t$ go test -run NONE -bench . -gcflags -ssa=1 \u003e ssa.txt\r\n\ttesting: warning: no tests to run\r\n\t$ benchcmp nossa.txt ssa.txt \r\n\tbenchmark          old ns/op     new ns/op     delta\r\n\tBenchmarkAdd-4     2.45          11.4          +365.31%\r\n\r\nI expect that the binary generated with SSA would be at least the same speed as the old one.\r\n\r\nThis particular example is extracted from one of my bigger library: `github.com/luxengine/glm`\r\nfor more example of SSA bad performance run benchmarks in\r\n- github.com/luxengine/glm\r\n- github.com/luxengine/glm/geo",
	"user": {
		"login": "hydroflame",
		"id": 2773127,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		},
		{
			"name": "Performance"
		}
	],
	"comments": 5,
	"created_at": "2016-06-01T22:33:50Z",
	"updated_at": "2016-10-06T17:37:47Z",
	"milestone": {
		"id": 1709364,
		"number": 39,
		"title": "Go1.8Early"
	}
}
