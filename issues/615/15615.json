{
	"id": 153839190,
	"number": 15615,
	"state": "closed",
	"title": "runtime: filepath.Walk panics on huge tree traversal",
	"body": "My environment:\r\n```\r\n\u003e go version\r\ngo version go1.6.2 windows/amd64\r\n\r\n\u003e go env\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOEXE=.exe\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOOS=windows\r\nset GOPATH=C:\\Storage\\Work\\Go\r\nset GORACE=\r\nset GOROOT=C:\\Program Files (x86)\\Go\r\nset GOTOOLDIR=C:\\Program Files (x86)\\Go\\pkg\\tool\\windows_amd64\r\nset GO15VENDOREXPERIMENT=1\r\nset CC=gcc\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\n```\r\n\r\nTest script:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"os\"\r\n\t\"path/filepath\"\r\n\t\"sync/atomic\"\r\n)\r\n\r\nvar folderCount = 0\r\n\r\nfunc callback(path string, info os.FileInfo, err error) error {\r\n\tif info.IsDir() {\r\n\t\tfolderCount++\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc main() {\r\n\tfilepath.Walk(\"C:\\\\path\\\\to\\\\some\\\\huge\\\\dir\", callback)\r\n}\r\n```\r\n\r\nWhen I run this script against a directory that contains ~150K folders and ~1M files (the actual folder I tried this on contained about 50 big project checkouts with pretty deep tree structure), the program works for several seconds, then crashes:\r\n\r\n`panic: runtime error: invalid memory address or nil pointer dereference`\r\n\r\nExperiment 1: if I comment out the `if info.IsDir() { ... }` clause (replace it with simply `folderCount++`), there will be no crash.\r\n\r\nExperiment 2: if I replace the `filepath.Walk` with my own implementation of this function that doesn't use recursion, the program won't crash either.\r\n\r\nSo my current understanding is that this happens due to a combination of a recursive algorithm (which might take much stack/memory) and some specific code inside a callback.\r\n\r\n---\r\n\r\nA related question: did you consider getting rid of the recursive algorithm in `filepath.Walk`? I experimented with an alternative implementation of this function that uses goroutines/workers, and it seems not only to work correctly on huge directory trees, but also gives performance boost due to parallelism.",
	"user": {
		"login": "iafan",
		"id": 1728158,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "OS-Windows"
		}
	],
	"assignee": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"comments": 10,
	"closed_at": "2016-05-09T19:18:29Z",
	"created_at": "2016-05-09T18:29:08Z",
	"updated_at": "2016-05-09T20:39:02Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
