{
	"id": 186738491,
	"body": "The problem as far as I can tell it is TestUpdateResolvConf uses resolvConfTest to write and load a /tmp/foo/resolv.conf file like \"nameserver 8.8.8.8\\n\".  However, the actual DNS resolver code still checks /etc/resolv.conf.\r\n\r\nThe logic in forceUpdate intentionally zeros out lastChecked (which only limits os.Stat calls), but previously it left conf.mtime untouched.  So the next DNS client call would call os.Stat(\"/etc/resolv.conf\") and see it (most likely) still matches conf.mtime.\r\n\r\nHowever, now that conf.mtime has been moved to conf.dnsConfig.mtime, the tryUpdate(\"/etc/resolv.conf\") calls are noticing that /etc/resolv.conf's mtime does not match /tmp/foo/resolv.conf, and reloading the file.\r\n\r\nThe quick fix to restore the previous behavior would be changing forceUpdate to something like:\r\n\r\n        conf.mu.Lock()\r\n        dnsConf.mtime = conf.dnsConfig.mtime\r\n        conf.dnsConfig = dnsConf\r\n        conf.mu.Unlock()\r\n\r\nHowever, that feels hacky to me.  I'm thinking writeAndUpdate should actually set lastChecked to far in the future to avoid it being reloaded, and then only teardown needs to zero out lastChecked.",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-21T04:26:12Z",
	"updated_at": "2016-02-21T04:26:12Z"
}
