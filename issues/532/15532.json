{
	"id": 152882370,
	"number": 15532,
	"state": "open",
	"title": "cmd/compile: SSA performance regression on polygon code",
	"body": "1. What version of Go are you using (`go version`)?\r\ngo 1.6.2 and devel +15f7a66\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/nkovacs/progs/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n3. What did you do?\r\n\r\nclone this repo: https://github.com/nkovacs/polygonperf\r\nand run `go test -cpu x -bench .` with go 1.6.2 and devel +15f7a66\r\n\r\nResults for BenchmarkContains (ns/op) on a Core 2 Q6600:\r\n\r\nmaster 4 cpu | 1.6.2 4 cpu | master 1 cpu | 1.6.2 1 cpu | master 2 cpu | 1.6.2 2 cpu\r\n-----------------|----------------|------------------|----------------|------------------|----------------\r\n370 | 285 | 297 | 282 | 334 | 264\r\n378 | 295 | 297 | 284 | 325 | 264\r\n374 | 304 | 299 | 283 | 367 | 235\r\n364 | 295 | 298 | 411 | 316 | 251\r\n386 | 285 | 298 | 278 | 353 | 301\r\n375 | 272 | 298 | 277 | 328 | 254\r\n374 | 305 | 297 | 279 | 351 | 260\r\n379 | 318 | 298 | 394 | 333 | 241\r\n374 | 289 | 298 | 310 | 361 | 247\r\n380 | 296 | 298 | 272 | 346 | 247\r\n375.4 | 294.4 | 297.8 | 307 | 341.4 | 256.4\r\n\r\nResults for BenchmarkStructContains (ns/op) on a Core 2 Q6600:\r\n\r\nmaster 4 cpu | 1.6.2 4 cpu | master 1 cpu | 1.6.2 1 cpu | master 2 cpu | 1.6.2 2 cpu\r\n----------|-------------|-----------|-------------|-----------|--------------\r\n390 | 280 | 297 | 408 | 353 | 327\r\n367 | 299 | 441 | 283 | 357 | 279\r\n387 | 282 | 297 | 283 | 339 | 277\r\n372 | 314 | 444 | 413 | 347 | 250\r\n371 | 307 | 296 | 298 | 339 | 264\r\n381 | 284 | 296 | 278 | 340 | 281\r\n371 | 291 | 297 | 288 | 359 | 280\r\n348 | 298 | 435 | 278 | 351 | 288\r\n343 | 295 | 300 | 411 | 338 | 274\r\n394 | 304 | 297 | 397 | 364 | 302\r\n372.4 | 295.4 | 340 | 333.7 | 348.7 | 282.2\r\n\r\n(last line is average)\r\n\r\nI've seen a similar 30% increase in ns/op on an AMD Athlon II X2 270, but on that CPU the 1 cpu benchmark had the same result as the 2 cpu benchmark.\r\n\r\nOn the two more modern Intel CPUs I briefly tested, this simple polygon does not show a difference between master and 1.6.2. I added a second polygon (BenchmarkContains2 and BenchmarkStructContains2) that does show a difference, with 1.6.2 again being faster. On the Q6600, go 1.6.2 performs twice as fast in these benchmarks, on a Xeon server, go 1.6.2 is about 100-200 ns/op faster.",
	"user": {
		"login": "nkovacs",
		"id": 2269242,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"assignee": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2016-05-03T21:48:01Z",
	"updated_at": "2016-05-09T18:06:29Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
