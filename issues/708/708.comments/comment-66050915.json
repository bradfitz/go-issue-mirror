{
	"id": 66050915,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eThe current spec very deliberately binds export visibility to the identifier name. This\nhas several advantages over almost any other design: 1) \nExtremely simple rule w/o exceptions or special cases, 2) high readability of the code\n(no clutter, identifier speaks for itself), 3) significant \nsimplification of other aspects of the language.\n\nVirtually all critics of the current design underestimate 3). If the export notion is\nnot tied to the identifier, other parts of the language \n(specifically assignment rules, possibly others) become more complex and thus the\nfeature non-orthogonal. For instance, when is a concrete \ntype with exported and non-exported methods assignment-compatible to an interface (with\nexported and non-exported) methods? Can \nnon-exported methods \"escape\" a package via assignment to an interface with exported\nmethods? Should it be ok? What about assignment \nof structs with partially exported fields to other structs with all fields exported?\nEtc., etc. With the current design, these questions are \nanswered trivially.\n\nThere has been an (internal) proposal to alleviate the issues brought up by you and\nothers: An identifier in a declaration may optionally be \npreceded by an export mark (proposal is a \"+\"). The export mark marks the identifier as\nexported, it is *part* of the name (but is not written \nwhen the identifier is used). For backward-compatibility, identifiers that start with a\ncapital letter are implicitly marked with a \"+\". (Thus, \neffectively, the \"+\" allows the use of lower-case idents to be exported; one may decide\nto drop the backward compatibility at some point).\n\nThe choice of short symbol over say \"public\" or \"export\" makes fine-grained export more\npractical and avoids the kind of keyword noise \nfound in other languages. By making the \"+\" become part of the identifier one can avoid\nthe impact on other aspects of the language as \nmentioned above.\n\nThat said, it's hard to beat the simplicity of the current design; and while it\nconstrains the free choice of identifier slightly, it does not have \nan impact on the expressibility of the language.\u003c/pre\u003e\n\n_Labels changed: added **priority-low**, removed **priority-medium**._\n\n\n_Status changed to **Thinking**._",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-03-31T17:46:52Z",
	"updated_at": "2014-12-08T10:05:34Z"
}
