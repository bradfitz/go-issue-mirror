{
	"id": 66055665,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eOk, case in the comment #6 is clear to me now. But I think also that you were right in\nthe comment #2. Gccgo has a bug.\n\n  const ui uint = 5\n  var a int = 2.0 \u0026lt;\u0026lt; ui\n\nHere 'ui' is a const and constant expression '2.0 \u0026lt;\u0026lt; ui' gets evaluated before\nreceiving a real type which depends on context. And I'm saying that because the\nfollowing is correct (here '2' doesn't get float64 type, because the whole shift\nexpression gets float64 type _after_ evaluation):\n\n  const ui uint = 5\n  var a float64 = 2 \u0026lt;\u0026lt; ui\n\nGccgo evaluates the code on the top after '2.0' gets real type, which is a mistake to\nme. Maybe a spec clarification on that part is a must?\n\nSpec says: \"If the left operand of a non-constant shift operation is an untyped\nconstant, the type of constant is what it would be if the shift operation were replaced\nby the left operand alone.\"\n\nBut what if we don't need a type for LHS, because we can evaluate the whole expression\nusing abstract numbers terms. One of these is wrong:\n\n  const ui uint = 5\n  var a float64 = 2 \u0026lt;\u0026lt; ui; // shift expression gets float64 type after evaluation\n  var b int = 2.0 \u0026lt;\u0026lt; ui; // '2.0' gets int type before evaluation in gccgo, I think it's a bug\u003c/pre\u003e",
	"user": {
		"login": "nsf",
		"id": 12567,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-04-15T15:10:01Z",
	"updated_at": "2014-12-22T05:55:03Z"
}
