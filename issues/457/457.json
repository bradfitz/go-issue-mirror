{
	"id": 51276506,
	"number": 457,
	"state": "closed",
	"title": "Language Specification error",
	"body": "by **kq1quick**:\n\n\u003cpre\u003eThe language specification currently states:\n\nTokens \n\n      Tokens form the vocabulary of the Go language. There are four \nclasses: identifiers, keywords, operators and  delimiters, and \nliterals. White space, formed from spaces (U+0020), horizontal tabs (U \n+0009), carriage returns (U+000D), and newlines (U+000A), is ignored \nexcept as it separates tokens that would otherwise combine into a \nsingle token. While breaking the input into tokens, the next token is \nthe longest sequence of characters that form a valid token.\n\n\nThe second sentence is wrong: it states that there are \u0026quot;four\u0026quot; classes and \nthen proceeds to enumerate 5.\n\nThe third sentence is no longer true with the Dec 22 release.  At a \nminimum, the assertion above that carriage returns are whitespace must be \nremoved because they now no longer server to separate tokens and are \nignored otherwise: they significantly affect the parse.  See issues 453 \nand 454 and \u003ca href=\"http://groups.google.com/group/golang-nuts/t/9eb0c7c1f20db921\"\u003ehttp://groups.google.com/group/golang-nuts/t/9eb0c7c1f20db921\u003c/a\u003e \n(particularly my post).  More explicitly, it should discuss the fact that \nnewlines are sometimes just whitespace and sometimes parse elements and \nthat there are special rules throughout the latter portions of the \nlanguage specification detailing when they are not just whitespace.\n\nTo this end, newlines may form the 6th class of tokens.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2014-12-08T10:04:40Z",
	"created_at": "2009-12-23T22:02:42Z",
	"updated_at": "2016-06-24T19:10:55Z"
}
