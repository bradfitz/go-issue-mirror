{
	"id": 81204394,
	"body": "This cannot be done. Consider this expression:\r\n\r\nvar x = []byte(\"0123\")\r\n\r\nx is now a byte slice. If the conversion is done at compile time there can be only one instance of the memory holding the string. For some simple cases, that will result in incorrect behavior. This function:\r\n\r\nfunc f(b byte) []byte {\r\n  var x = []byte(\"0123\")\r\n  x[0] = b\r\n  return x\r\n}\r\n\r\nIf x is built at compile time, every call to f will return the same memory, so if we call f('a') and then f('b'), the second call will overwrite the memory returned by the first call.\r\n\r\nIn other words, this is a change in language semantics that cannot be done in general. There are some cases where a compiler might be able to guarantee this cannot happen, but _semantically_ the conversion cannot be done only once. The program must behave as though new memory is created for each conversion.",
	"user": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-03-15T19:15:48Z",
	"updated_at": "2015-03-15T19:15:48Z"
}
