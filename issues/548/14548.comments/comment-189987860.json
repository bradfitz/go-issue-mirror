{
	"id": 189987860,
	"body": "\u003e so there must be a lingering wakeup caused by reuse of pollDesc objects that started before this snippet, which unblocks the goroutine and allows it to proceed to call getsockopt.\r\n\r\nI don't know the reason why you suppose so. I've just scratched the TCP control block inside the kernel by using the following snippet and observed that the kernel poked with the application even when the state of TCP was \"syn-sent.\" Furthermore, it happened without any notification through ev.flags such as EV_EOF, EV_ERROR.\r\n```\r\npackage main\r\n\r\nimport (\r\n        \"log\"\r\n        \"net\"\r\n        \"runtime\"\r\n        \"sync\"\r\n\r\n        \"github.com/mikioh/tcp\"\r\n)\r\n\r\nfunc main() {\r\n        ln, err := net.Listen(\"tcp\", \"127.0.0.1:0\")\r\n        if err != nil {\r\n                log.Fatal(err)\r\n        }\r\n        defer ln.Close()\r\n\r\n        go func() {\r\n                for {\r\n                        c, err := ln.Accept()\r\n                        if err != nil {\r\n                                return\r\n                        }\r\n                        go func(c net.Conn) {\r\n                                defer c.Close()\r\n                                var b [512]byte\r\n                                read(c, b[:])\r\n                                write(c, b[:])\r\n                        }(c)\r\n                }\r\n        }()\r\n\r\n \r\n        attempts := int(1e4)\r\n        var wg sync.WaitGroup\r\n        wg.Add(attempts)\r\n        N := runtime.GOMAXPROCS(-1) * 2\r\n        sem := make(chan bool, N)\r\n        for i := 0; i \u003c attempts; i++ {\r\n                sem \u003c- true\r\n                go func() {\r\n                        defer wg.Done()\r\n                        defer func() {\r\n                                \u003c-sem\r\n                        }()\r\n                        c, err := net.Dial(ln.Addr().Network(), ln.Addr().String())\r\n                        if err != nil {\r\n                                return\r\n                        }\r\n                        defer c.Close()\r\n                        var b [512]byte\r\n                        write(c, b[:])\r\n                        read(c, b[:])\r\n                }()\r\n        }\r\n        wg.Wait()\r\n\r\n        log.Printf(\"%dx%d concurrent runs\", N, attempts)\r\n}\r\n\r\nfunc write(c net.Conn, b []byte) {\r\n        n, err := c.Write(b)\r\n        if n != len(b) || err != nil {\r\n                switch runtime.GOOS {\r\n                case \"darwin\", \"freebsd\", \"linux\":\r\n                        tc, xerr := tcp.NewConn(c)\r\n                        if xerr != nil {\r\n                                log.Fatal(xerr)\r\n                        }\r\n                        ti, xerr := tc.Info()\r\n                        if xerr != nil {\r\n                                log.Fatal(xerr)\r\n                        }\r\n                        log.Fatalf(\"err=%q tcp-state=%q\\n\", err, ti.State)\r\n                default:\r\n                        log.Fatalf(\"err=%q\\n\", err)\r\n                }\r\n        }\r\n}\r\nfunc read(c net.Conn, b []byte) {\r\n        for nr := 0; nr != len(b); {\r\n                n, err := c.Read(b)\r\n                nr += n\r\n                if err != nil {\r\n                        log.Fatal(err)\r\n                }\r\n        }\r\n}\r\n```",
	"user": {
		"login": "mikioh",
		"id": 92117,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-29T01:24:12Z",
	"updated_at": "2016-02-29T01:24:12Z"
}
