{
	"id": 66056911,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003e\u003e Your cache implies that you think there are lots of calls to NewCallback\n\u003e with the same arguments.  Is that true?  ...\n\nOriginal goal was just make \"all\" callbacks permanent, non-garbage collected: it is easy\nfor user to overlook the fact that callback needs to be kept around, because once user\ncreates association between a Windows event and a go function, they forget that Windows\ncalls into that callback and therefore little compiled code needs to be kept around,\nand, if it gets garbage collected, Windows will jump to the address, but the code will\nbe gone and something else will be there, so everything will crash with non-predictable\nresults.\n\nSo I created link list of all callbacks that user ever creates. But then I realized,\nthat potentially, syscall.NewCallback(myGoProc) might get called repeatedly - you create\nassociating, then you don't need it any more, you release it, then you do all over again\nand again. I didn't want my list grow without limit, so, I decided, to check for\nrepeated calls and return previously created callback, because it is good enough for\nthat.\n\n\u003e ...  I would be happy to say that\n\u003e NewCallback's result is never garbage collected and make people\n\u003e be careful about not calling it too much.\n\nSo are you're saying that I should revert my change, and let users worry about keeping\nit around as long as it is required by Windows API? I'm OK with that. But how do we make\npeople careful about it? Perhaps more documentation? Perhaps function name\n(syscall.NewCallback) is not good? Perhaps we need different API altogether to make it\nclearer for the user.\n\nStill, I'm not convinced, that my current approach will not work. I didn't expect to\nhave more then a couple of go functions been a target for Windows events, therefore I\nput 20 as limit. Looking at Alex code, I can see, that when you use OLE, you certainly\nneed more. But I'm still convinced that there is a limit, ultimately, we can't create\nmore then number of go functions in our program. So with my approach, it is just matter\nof how simple the implementation is and runtime costs.\n\nI would just increase the limit of 20 up to 2000 or something and wait until we see how\nand where it is used, we could change implementation from link list to something more\nefficient later. The only problem with this approach is, it sends wrong message to our\nusers (don't worry about callbacks, they will stay around without your help) if we\ndecide to go back and make user manage callbacks again.\n\nAlex\u003c/pre\u003e",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-06-08T00:35:20Z",
	"updated_at": "2014-12-08T10:10:31Z"
}
