{
	"id": 51277976,
	"number": 1550,
	"state": "closed",
	"title": "gc compiler error: private methods can leak through interfaces",
	"body": "\u003cpre\u003eGiven an imported interface with a private method, a variable of that imported interface\ntype can be assigned to a local variable with a local interface type of the same\nstructure through the use of a type assertion. This makes it possible to call a private\nmethod in another package.\n\nThe attached files document and illustrate the problem. To execute: copy the files p.go\nand main.go into a new directory and run:\n\n6g p.go \u0026amp;\u0026amp; 6g main.go \u0026amp;\u0026amp; 6l main.6 \u0026amp;\u0026amp; 6.out\n\nThe output is:\n\nmain.Implementation.private()\np.Implementation.private()\n\nbut in fact it should not compile.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1550/0/p.go\"\u003ep.go\u003c/a\u003e (187 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1550/0/main.go\"\u003emain.go\u003c/a\u003e (1030 bytes)",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2014-12-08T10:08:51Z",
	"created_at": "2011-02-25T02:07:19Z",
	"updated_at": "2016-06-24T19:25:47Z"
}
