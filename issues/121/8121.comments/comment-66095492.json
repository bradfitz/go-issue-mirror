{
	"id": 66095492,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eYour CL makes reference to V8 and Python. That's not interesting. This is Go. The Go\nrule is that if you have two embedded structs with the same field name at the same depth\nin a struct type, that field name is not accessible from the top level of the struct\nusing the . operator.\n\njson.Marshal uses all the fields that are accessible from the top level using the .\noperator. If there are JSON-specific tag overrides, it applies the same Go rule to those\ninstead of the Go field names. But either way it is the Go semantics that are being used\nhere, not anything defined by JSON or V8 or Python.\n\nTo be very concrete, here is an edited version of your program:\n\u003ca href=\"http://play.golang.org/p/aFmsL3WA-L\"\u003ehttp://play.golang.org/p/aFmsL3WA-L\u003c/a\u003e\n\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ttype a struct {\n\t\tHello string\n\t}\n\ttype b struct {\n\t\tHello string\n\t}\n\ttype c struct {\n\t\ta\n\t\tb\n\t}\n\t\n\therp := c{a{\"hello\"},b{\"world\"}}\n\tfmt.Println(herp.Hello)\n}\n\nThis doesn't compile. There is no herp.Hello. Therefore json.Marshal does not marshal\none.\u003c/pre\u003e\n\n\n\n_Status changed to **WorkingAsIntended**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-10-06T18:41:31Z",
	"updated_at": "2014-12-08T10:45:01Z"
}
