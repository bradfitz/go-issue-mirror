{
	"id": 121379311,
	"number": 13560,
	"state": "open",
	"title": "proposal: standardize format for simple code generator disclaimer headers; enable a reliable machine-readable way to determine if a file is generated.",
	"body": "### Abstract\r\n\r\nI propose Go creates a standardized format, which would enable code-generating tools to reliably communicate to humans and other machine tools that the output is in fact a generated file. Additionally, Go should add a recommended style for a simple code generated disclaimer (which satisfies the above criteria).\r\n\r\n### Proposed Definition\r\n\r\nA file is considered to be \"generated\" if and only if the maintainer(s) of the project consider it a non-canonical source. In order to make long-term changes to such files, another source must be modified, and the file in question is then fully (re)generated by a reproducible machine tool.\r\n\r\nA distinguishable property of generated files is that they can be deleted and re-generated with a zero diff.\r\n\r\n### Background\r\n\r\nOne of the strong values that Go brings are conventions and best practices that reduce bikeshedding, increase consistency and readability across diverse teams of Go programmers. Having a well defined convention, format, or standard for things that are unimportant to the key task, but need to have *some* value saves time.\r\n\r\nDuring Gopherfest SV 2015, Rob Pike gave a talk Go Proverbs ([video](https://www.youtube.com/watch?v=PAAkCSZUG1c), [bullet-point summary](https://go-proverbs.github.io/)) that mentioned:\r\n\r\n\u003e Gofmt's style is no one's favorite, yet gofmt is everyone's favorite.\r\n\r\nTo expand on that, there are many examples for things that have have a recommend format/style in Go that let you simply reuse that and not force you (and other people) to invent your own style:\r\n\r\n-\t`gofmt` for Go code formatting. https://golang.org/cmd/gofmt/\r\n-\tVariable naming. https://github.com/golang/go/wiki/CodeReviewComments#mixed-caps\r\n-\tPackage comments. https://github.com/golang/go/wiki/CodeReviewComments#package-comments\r\n-\tPackage names. https://github.com/golang/go/wiki/CodeReviewComments#package-names\r\n-\tExample func naming. https://godoc.org/testing#hdr-Examples\r\n-\tBuild constraints. https://godoc.org/go/build#hdr-Build_Constraints\r\n-\tStruct tag strings. https://godoc.org/reflect#StructTag\r\n\r\n### Description\r\n\r\nThere is one type of comment which is commonly used, but has no existing well-defined officially suggested style recommended by Go.\r\n\r\nIt is a comment that most tools that generate Go code tend to write somewhere at the top of the code.\r\n\r\nThere are currently many variations of such disclaimer headers in the wild, and they often vary insignificantly (in spacing, punctuation, etc.). New variations come to be when authors look at how other tools do this, see a large variance, end up picking their favorite and tweaking it.\r\n\r\nConsider the following examples in the wild:\r\n\r\n```Go\r\n// generated by stringer -type Pill pill.go; DO NOT EDIT\r\n\r\n// Code generated by \"stringer -type Pill pill.go\"; DO NOT EDIT\r\n\r\n// Code generated by vfsgen; DO NOT EDIT\r\n\r\n// Created by cgo -godefs - DO NOT EDIT\r\n\r\n/* Created by cgo - DO NOT EDIT. */\r\n\r\n// Generated by stringer -i a.out.go -o anames.go -p ppc64\r\n// Do not edit.\r\n\r\n// DO NOT EDIT\r\n// generated by: x86map -fmt=decoder ../x86.csv\r\n\r\n// DO NOT EDIT.\r\n// Generate with: go run gen.go -full -output md5block.go\r\n\r\n// generated by \"go run gen.go\". DO NOT EDIT.\r\n\r\n// DO NOT EDIT. This file is generated by mksyntaxgo from the RE2 distribution.\r\n\r\n// GENERATED BY make_perl_groups.pl; DO NOT EDIT.\r\n\r\n// generated by mknacl.sh - do not edit\r\n\r\n// Generated by running\r\n//\tmaketables --tables=all --data=http://www.unicode.org/Public/8.0.0/ucd/UnicodeData.txt --casefolding=http://www.unicode.org/Public/8.0.0/ucd/CaseFolding.txt\r\n// DO NOT EDIT\r\n\r\n/*\r\n* CODE GENERATED AUTOMATICALLY WITH github.com/ernesto-jimenez/gogen/unmarshalmap\r\n* THIS FILE SHOULD NOT BE EDITED BY HAND\r\n*/\r\n```\r\n\r\nThis creates 2 problems.\r\n\r\n1.\tIt's a problem for authors of code generator tools. Such authors need to spend time figuring out what format of a disclaimer header they want to use; there is no canonical standardized format.\r\n\r\n2.\tIt's a problem for authors of tools that want to be able to use the information (in a helpful way) whether certain files are generated or not. There is no simple implementation that will catch all of the variations above, and there is no standardized machine-readable format that they can detect.\r\n\r\nThis leads to circular arguments and PRs/CLs. For example, see the discussion and the change itself at https://go-review.googlesource.com/#/c/15073/. It started from https://github.com/github/linguist/blob/473282d/lib/linguist/generated.rb#L241, which led to CL 15073. That lead to https://github.com/shurcooL/vfsgen/commit/b2aab1c20b69a97790ee44d826c7f44baa852382 and https://github.com/shurcooL/go/commit/43b216689b91e7e2d2c6b7dd0971ad4625384a81. But the initial GitHub behavior came from protobuf disclaimers.\r\n\r\nI've created the following func to try to answer the question if a file is generated. At this time, it uses heuristics and best-effort to tell if a file is generated. https://github.com/shurcooL/go/blob/master/analysis/generated_detection.go If there was a well defined requirement for tools to follow, this code can be made simpler and more reliable. Ideally, that helper should be moved into external library for people to reuse, and for generator tools that wish to be compliant to be able to use it for verification.\r\n\r\nGoals\r\n-----\r\n\r\nThe goals of this proposal are twofold.\r\n\r\nPrimarily, to resolve the current **impossibility of reliable communication** between code generator tool output, and tools that try to determine if a file is code generated.\r\n\r\nThere should be a way for code generator tool authors to be able to express in their generated output that the file is generated, such that it's possible to reliably detect if a file is generated by other tools.\r\n\r\nSecondarily, for code generator authors that simply don't care about what their disclaimer header looks like, provide a recommended style (that satisfies the first condition) template to use.\r\n\r\nThe implementation details should be defined in a design doc.\r\n\r\n### Non-goal\r\n\r\nIt is a non-goal to figure out how existing tools should choose to use or not use the fact whether a given file is generated.\r\n\r\nThere is some fear that if it's possible to determine if a file is generated reliably, then tools that display code differences will hide generated code differences. That is absolutely the choice of the tool, and in my opinion it should not enforce any behavior that users are unhappy with.\r\n\r\nHaving additional information (whether a file is generated or not) should *enable* tools to offer better user experiences - it should not cause tools offer worse experiences than currently.\r\n\r\nThis proposal focuses solely on enabling code generator tool authors that wish to use a standard disclaimer header to do without forcing them to invent their own format, and for tool authors that wish to make use of information whether a file is generated or not to be able to use that information as they wish. Details of how they do that is outside the scope.\r\n\r\n### Conclusion\r\n\r\nBy not standardizing a way for those two types of tools to communicate, it leads to ad-hoc solutions that are sub-optimal emerging, as can be seen above. Go has an opportunity to de-fragment this space and create a recommended standard format that will resolve the needs above, and allow people to migrate existing tools to use the specified format.\r\n\r\nOnce there's a standard, it's easy to begin updating existing tools towards it over time, and new generator/other tools can start relying on it.\r\n\r\n#### Meta-disclaimer\r\n\r\nI expect coming up with a recommended style may likely cause a lot of bikeshedding. However, I think it's a cost that's worth incurring, to go through this process once, so that we can avoid having to continuously suffer it while there's no standard at all. I personally don't care too much about what the actual format is (as much as I do about resolving the higher level problems described); I'm okay with whatever Go authors come up with. Any standard is better than no standard at all.",
	"user": {
		"login": "shurcooL",
		"id": 1924134,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 6,
	"created_at": "2015-12-10T01:13:24Z",
	"updated_at": "2015-12-11T00:18:58Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	},
	"reactions": {
		"total_count": 3,
		"+1": 2,
		"heart": 1
	}
}
