{
	"id": 161322316,
	"number": 16131,
	"state": "closed",
	"title": "flag: Parse incorrectly interprets quoted path with a trailing slash as having escaped quotes.",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\ngo version go1.6.2 windows/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOEXE=.exe\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOOS=windows\r\nset GOPATH=s:\\docker\\\r\nset GORACE=\r\nset GOROOT=C:\\Go\r\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_amd64\r\nset GO15VENDOREXPERIMENT=1\r\nset CC=gcc\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\n\r\n3. What did you do?\r\nusing import \"flag\" and Windows cmd, compile this program into an executable:\r\nimport (\r\n    \"flag\"\r\n    \"fmt\"\r\n)\r\nfunc main() {\r\n    flag.Parse()\r\n    fmt.Println(flag.Arg(0))\r\n}\r\n\r\nand then run it using the following argument:\r\n`test.exe \"c:\\test\\\"`\r\n\r\n4. What did you expect to see?\r\nEither the argument as passed at the cmdline, `\"c:\\test\\\"`, or the argument with the quotes stripped, `c:\\test\\`.\r\n\r\n5. What did you see instead?\r\nThe program displays `c:\\test\\\"` because somehow `flag.Parse()` incorrectly interprets the seconds quote as being escaped.\r\n\r\n",
	"user": {
		"login": "swernli",
		"id": 10567287,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2016-06-21T11:40:36Z",
	"created_at": "2016-06-21T00:00:55Z",
	"updated_at": "2016-06-21T11:40:36Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
