{
	"id": 51287722,
	"number": 8131,
	"state": "closed",
	"title": "crypto/subtle: ConstantTimeCompare might give a false-positive on differing lengths",
	"body": "by **justinas@justinas.me**:\n\n\u003cpre\u003eWhat does 'go version' print?\ngo version go1.2.2 darwin/amd64\n\nWhat steps reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n\n1. Compare two byte slices with ConstantTimeCompare(), where the second slice is longer\nand the first slice is a prefix of the second.\n\n\u003ca href=\"http://play.golang.org/p/XH0gRhdDTu\"\u003ehttp://play.golang.org/p/XH0gRhdDTu\u003c/a\u003e\n\nWhat happened?\n\nThe function compares slices only up to the length of the first slice and thus gives a\nfalse-positive.\n\nWhat should have happened instead?\n\nI understand that this is not the way this function is supposed to be used. However, the\nbehavior on this incorrect usage varies based on the order of the arguments. \n\nI think that panicking (due to out-of-range access), as the function does when the\n*first* slice is longer, is a much better solution. Panic clearly indicates a mistake on\nthe programmer's part, whereas passing silently can go unnoticed for a long time and\neven be exploited.\n\nIt's a simple fix to do, I think: instead of iterating up to len(x), iterate up to\nmax(len(x), len(y)).\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:45:05Z",
	"created_at": "2014-06-01T10:38:09Z",
	"updated_at": "2016-06-25T01:35:41Z"
}
