{
	"id": 66070003,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eThread pool with bounded number of threads known to cause problems. The first problem is\nsystem-induced deadlocks. And it's not something that you will uncover during\nunit-testing. Then, it may cause poor performance, e.g. I may have X threads almost\npermanently blocked and I do not want them to affect the rest of the program. Then, it's\ndifficult for a user to set it correctly; so users may change the default when they do\nnot need to, or don't change when need to.\n\nThe new runtime partially solves the problem by \"ignoring\" short syscalls. On network\nbenchmarks with GOMAXPROCS=16 I see only about 25 threads. It may be further tuned by\nincreasing delay before cpu retake if there are already a lot of threads. If we are\ncommitting the new runtime, then I would prefer to see whether it makes things better or\nnot before introducing user control.\nDo we have a good reproducer for the problem?\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-09-10T17:28:03Z",
	"updated_at": "2014-12-08T10:21:31Z"
}
