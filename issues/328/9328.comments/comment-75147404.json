{
	"id": 75147404,
	"body": "I've been trying to get the audio done on Android, and this is so far I've discovered:\r\n\r\n1. We cant statically link libopenal.a as we discussed earlier, because it requires multiple definitions of JNI_Onload to exist due to OpenAL's android.c [1].\r\n\r\n2. We need to dynamically link libopenal.so while building an apk and load it dynamically on app/android.c's JNI_OnLoad on the app startup. I don't understand the Go's execution modes well and not quite sure we can output an app shared object that has an external dynamic library dependency.\r\n\r\n3. Android linker has limitations about where an external library could exist on the disk. So, we need to pack libopenal.a/so into the stripped Android NDK archive that is downloaded on gomobile init and copy the library to certain places before building.\r\n\r\nMy current strategy is to do a System.loadLibrary(\"openal\"); on Go.java and add libopenal.so to the final apk. I couldn't make it work yet and not sure it can ever work. I need to read more about Go shared libraries.\r\n\r\n[1] https://github.com/rakyll/al/blob/master/android.c (for reference)",
	"user": {
		"login": "rakyll",
		"id": 108380,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-19T21:59:49Z",
	"updated_at": "2015-02-19T21:59:49Z"
}
