{
	"id": 57734238,
	"number": 9883,
	"state": "closed",
	"title": "spec: the \"nil is overloaded\" problem",
	"body": "Hi (and forgive my bad English).\r\nI was writing my first attempt to a \"serious\" project in Go and one crazy idea came into my mind. I think one possible solution to make the semantics of nil less confusing could be to make nil even \"more overloaded\" :D\r\nAnd with that I mean: make nil the zero value of every type, not just reference types, including user defined structs. This way, just saying that an interface is a pair (type, pointer) and a slice is a triplet (pointer, len, cap) would be enough to understand what a nil interface and a nil slice really are (instead of claiming that a slice is a reference type, which is not totally true). Also \"effective Go\" encourages people to \"arrange that the zero value of each type can be used without further initialization\". So, it would be convenient to be able to check user defined structs for nil equality and to use nil instead of (for example) image.ZP and image.ZR.\r\nThis would be really different from what other languages do (but f*ck them, right?), and would have far reaching implications; checking if and array value is nil would mean scanning the whole array, but it seems to me that this would make the specs more consistent.\r\nWhat do you think?\r\n(hope this is the right place to post this)",
	"user": {
		"login": "robzan8",
		"id": 8711500,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2015-02-15T19:26:32Z",
	"created_at": "2015-02-15T15:42:24Z",
	"updated_at": "2016-06-25T02:00:54Z"
}
