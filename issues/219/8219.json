{
	"id": 51287862,
	"number": 8219,
	"state": "closed",
	"title": "testing: external test code not compiled or run if contains no tests",
	"body": "\u003cpre\u003eTo reproduce, create the following three files:\n\ntestit.go\n\n    package testit\n\nextern_test.go:\n\n    package testit_test\n\n    import (\n    \t\u0026quot;code.google.com/p/rog-go/testit\u0026quot;\n    )\n\n    func init() {\n    \ttestit.Register()\n    \tunused\n    }\n\nintern_test.go:\n\n\tpackage testit\n\t\n\timport \u0026quot;testing\u0026quot;\n\t\n\tvar registered bool\n\t\n\tfunc Register() {\n\t\tregistered = true\n\t}\n\t\n\tfunc TestPackage(t *testing.T) {\n\t\tif !registered {\n\t\t\tt.Fatal(\u0026quot;registry never called\u0026quot;)\n\t\t}\n\t}\n\nRunning the tests gives the error \u0026quot;registry never called\u0026quot;,\nindicating that the code in extern_test.go is never run.\nMoreover, it's not even compiled - there's no error from\nthe unused variable.\n\nWhile it may look contrived, the above configuration mirrors the way\nthat tests are registered with the popular gocheck testing\npackage - tests that were previously run correctly may now\nbe silently skipped.\n\nI have verified that this is a regression since Go 1.2.2.\n\nFWIW, there is an easy workaround (define TestPackage in the external\ntest file) but it might be better to avoid the regression.\u003c/pre\u003e",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:45:36Z",
	"created_at": "2014-06-16T15:20:05Z",
	"updated_at": "2016-06-25T01:36:35Z",
	"milestone": {
		"id": 1067218,
		"number": 21,
		"title": "Go1.4"
	}
}
