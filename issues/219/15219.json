{
	"id": 147184174,
	"number": 15219,
	"state": "open",
	"title": "cmd/go: testmain program doesn't use vendored stdlib packages",
	"body": "go 1.6 linux/amd64\r\n\r\nIt is possible (and I believe intended as a valid practice) to vendor a stdlib package and have it \"shadow\" the package in $GOROOT.\r\n\r\nHowever, the testmain program constructed by `go test` doesn't use such vendored stdlib packages. In particular, this prevents vendoring package \"testing\"; the testmain program refers to the GOROOT testing package, where as the package under test uses the vendored testing package. Thus the testmain program does not compile and so `go test` cannot work.\r\n\r\nDemo:\r\n\r\n```\r\n$ export GOPATH=/tmp/gopath\r\n$ mkdir -p $GOPATH/src/x\r\n$ cd $GOPATH/src/x\r\n$ cat \u003e x_test.go\r\npackage x\r\n\r\nimport \"testing\"\r\n\r\nfunc TestX(t *testing.T) {}\r\n$ go test\r\nPASS\r\nok      x       0.009s\r\n$ mkdir -p $GOPATH/src/vendor\r\n$ cp -r ~/apps/go/src/testing $GOPATH/src/vendor/ # vendor testing from your usual GOROOT\r\n$ go test\r\n# testmain\r\n/var/folders/7r/pz2frytd23gb3pt4bwwshp1c0000gn/T/go-build151556267/x/_test/_testmain.go:22: cannot use x.TestX (type func(*\"vendor/testing\".T)) as type func(*\"testing\".T) in field value\r\nFAIL    x [build failed]\r\n```\r\n\r\n",
	"user": {
		"login": "cespare",
		"id": 318501,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Vendoring"
		}
	],
	"comments": 0,
	"created_at": "2016-04-10T02:10:18Z",
	"updated_at": "2016-04-10T03:02:51Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
