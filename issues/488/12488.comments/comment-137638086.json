{
	"id": 137638086,
	"body": "@mdempsky I think the idea of \"GOPATH is the parent of a directory called src/\" works well.\r\n\r\n@adg \r\n\r\n\u003e I think at some point people need to learn about packages.\r\n\r\nAgreed.\r\n\r\n\u003e I don't think we should design our entire build process around the very first new user experience.\r\n\r\nI'll have to disagree with you to some degree there :smile: \r\n\r\n\u003e Can you suggest a way of avoiding this conversation that doesn't throw out everything we already have? (My gut reaction is \"just tell them to put it in \"src/hello\" in the first place.\")\r\n\r\nI think I probably conflated a number of things in my response. From my experience there are several common pain points for newcomers when they see a path like `src/github.com/user/hello`\r\n\r\n1. Why do I have to setup GOPATH, why can't I just put my stuff anywhere I want (or more likely where I put it in $INSERT_PREVIOUS_LANGUAGE). To that, I agree with you, the answers is \"Because reasons\".\r\n2. The second is why do they have to put things in a subdirectory of a subdirectory `src/` ? Again, it's probably better to stick with \"reasons\".\r\n3. The third is the confusion that putting a github'ish url in the path. We've seen lots of users who think they have to push to github to compile. \r\n\r\nMaybe this is just a matter of introducing the terms in order. Something like\r\n\r\n----\r\nThere are two pieces of information you need to know to write Go code. The first is all Go code must live inside a workspace, we call that GOPATH. A GOPATH workspaces is any directory that contains the following three directories `src/`, `bin/`, and `pkg/`. You can create one like this\r\n```\r\nmkdir -p gocode/{src,bin,pkg}\r\n```\r\nSo, `gocode` is your workspace, your GOPATH. `gocode/src` is where you will put your Go packages (we'll get to that in a second), `gocode/bin` is where the compiler will place any programs you compile, and `gocode/pkg` is the location that the compiler will cache files for later reuse to speed up compilation.\r\n\r\nAs mentioned above, all the Go code you write must be arranged into packages. What is a package ? A package is just a directory. The name of the directory must match the name of the `package` declaration that every file in that directory shares, that's why we call them packages. \r\n\r\nPutting these two pieces of knowledge together, if you want to write a program called `hello`, it needs to be in the `hello` package, and knowing that packages need to live inside your workspaces' src/ directory, the path to this package must be `gocode/src/hello`\r\n\r\n----\r\nThis explanation obviously trades off some degree of accuracy to avoid getting bogged down in the details, please don't beat me up for this.",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-04T03:23:25Z",
	"updated_at": "2015-09-04T03:23:38Z"
}
