{
	"id": 150751557,
	"body": "@rsc thanks for your comments.\n\nre: finding the wrong `src` directory in a hierarchy. I think this is quite\nunlikely, to the point that the advice could be 'don't do that'. There are\nsome Go repos on github (not naming any names, but those may be children of\nthe alphabet group) that include a '/src/' directory in the checkout, but\nthey could be said to be in the former category and should be fixed.\n\nre: not being able to do 'go $CMD' anywhere on the filesystem is quite a\nlimitation. In both this and the previous case gb punts on this by making\nit clear you arrange your work into projects and decide which project you\nare working on by being present inside that directory -- a model well\nunderstood by most git/svn/hg users. As a backup there is a -R flag to\noverride the root of the project detection logic, analogous to -C in modern\nversions of git.\n\nWith that said, the place where this will bite will be `go get` from\nscratch, that is to say, the first user experience; install go; go get\n$BIGPROJECT; confusing error message as there is no /src/ to be found on\nthe filesystem and the user was following some potted advice from a project\nREADME, not our getting started documentation.\n\nIn the face of this, defaulting $GOPATH to $HOME would\n\na. solve all of the issues above\nb. mean that in the average case users have to set zero environment\nvariables to use Go, a moderate win for posix users, and a substantial win\nfor Windows users.\n\nAnd, as you say, if people don't like the default, all they have to do is\nset $GOPATH, just as they have for the last 5 years.\n\nOn Sat, Oct 24, 2015 at 2:54 PM, Russ Cox \u003cnotifications@github.com\u003e wrote:\n\n\u003e I really like the idea of auto-detecting GOPATH. I've been thinking about\n\u003e how to do this ever since I saw that @davecheney\n\u003e \u003chttps://github.com/davecheney\u003e had done the equivalent in gb.\n\u003e\n\u003e I'm not as sure about how. Finding src does seem to be the obvious\n\u003e choice, and it may work well. On the other hand, it may lead to wrong or\n\u003e confusing behavior if it found an unrelated src. At the least I think\n\u003e you'd need to say it's the highest-level src, so that if someone names\n\u003e their GitHub repo src and you're in /home/you/src/\n\u003e github.com/otherguy/src/pkg that uses GOPATH=/home/you.\n\u003e\n\u003e Then there's the problem that any directory-based detection fails when\n\u003e you're outside the directory. You might be in $HOME or $HOME/bin and\n\u003e realize you need a command and run \"go get that/command\" and it fails\n\u003e because you're not in the src tree. That's annoying.\n\u003e\n\u003e @davecheney \u003chttps://github.com/davecheney\u003e's other points based on\n\u003e experience with gb are interesting too.\n\u003e\n\u003e Counter-proposal, as suggested by Dave: If GOPATH is not set, it defaults\n\u003e to the user's home directory (aka $HOME on Unix, $USERPROFILE on Windows,\n\u003e $home on Plan 9).\n\u003e\n\u003e The counter-proposal is not as flexible, but it's the suggested setting,\n\u003e it works outside the source tree, and it can't ever be confused by an\n\u003e inadvertently named parent directory.\n\u003e\n\u003e I put the counter-proposal here mainly to play devil's advocate: if we're\n\u003e going to autodetect, we should make sure we are considering all the\n\u003e possible ways, not just one, and then pick the best.\n\u003e\n\u003e As I go through the details, though, I'm starting to like default $HOME\n\u003e better than default magic search based on current directory.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/12488#issuecomment-150750387\u003e.\n\u003e\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	},
	"created_at": "2015-10-24T04:12:25Z",
	"updated_at": "2015-10-24T04:12:25Z"
}
