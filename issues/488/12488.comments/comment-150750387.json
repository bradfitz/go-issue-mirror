{
	"id": 150750387,
	"body": "I really like the idea of auto-detecting GOPATH. I've been thinking about how to do this ever since I saw that @davecheney had done the equivalent in gb.\n\nI'm not as sure about how. Finding `src` does seem to be the obvious choice, and it may work well. On the other hand, it may lead to wrong or confusing behavior if it found an unrelated `src`. At the least I think you'd need to say it's the highest-level `src`, so that if someone names their GitHub repo src and you're in /home/you/src/github.com/otherguy/src/pkg that uses GOPATH=/home/you.\n\nThen there's the problem that any directory-based detection fails when you're outside the directory. You might be in $HOME or $HOME/bin and realize you need a command and run \"go get that/command\" and it fails because you're not in the src tree. That's annoying.\n\n@davecheney's other points based on experience with gb are interesting too.\n\nCounter-proposal, as suggested by Dave: If GOPATH is not set, it defaults to the user's home directory (aka $HOME on Unix, $USERPROFILE on Windows, $home on Plan 9).\n\nThe counter-proposal is not as flexible, but it's the suggested setting, it works outside the source tree, and it can't ever be confused by an inadvertently named parent directory.\n\nI put the counter-proposal here mainly to play devil's advocate: if we're going to autodetect, we should make sure we are considering all the possible ways, not just one, and then pick the best.\n\nAs I go through the details, though, I'm starting to like default $HOME better than default magic search based on current directory.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-24T03:54:00Z",
	"updated_at": "2015-10-24T03:54:00Z"
}
