{
	"id": 110406738,
	"number": 12877,
	"state": "closed",
	"title": "About hot replacement of Channel",
	"body": "Please see: https://gist.github.com/hyper-carrot/85d082e83b35122ca53e .\r\n\r\nI run `go run chan_hotrepl_go1.4.go` under go1.4, it (one goroutine) can receive the elements from the getChan()'s result after chan1 reset by another goroutine. The output like:\r\n\r\n```bash\r\nBegin to receive elements from chan1...\r\nSend element 0...\r\nReceived an element: 0\r\nSend element 1...\r\nReceived an element: 1\r\nSend element 2...\r\nReceived an element: 2\r\nReset chan1...\r\nSend element 3...\r\nReceived an element: 3\r\nSend element 4...\r\nReceived an element: 4\r\nSend element 5...\r\nReceived an element: 5\r\nReset chan1...\r\nSend element 6...\r\nReceived an element: 6\r\n```\r\n\r\nBut, It is not the case in go1.5. In go1.5, the goroutine can not receive the element after chan1 reset. The output like:\r\n\r\n```bash\r\nBegin to receive elements from chan1...\r\nSend element 0...\r\nReceived an element: 0\r\nSend element 1...\r\nReceived an element: 1\r\nSend element 2...\r\nReceived an element: 2\r\nReset chan1...\r\nSend element 3...\r\nSend element 4...\r\nSend element 5...\r\nReset chan1...\r\nSend element 6...\r\nSend element 7...\r\nSend element 8...\r\n```\r\n\r\nI put the reset operation into a independent goroutine, like chan_hotrepl_go1.5.go. Its behavior is normal both in go1.4 and go1.5.\r\nI want to know the cause of these appearances. Is this relevant to the compiler optimizations in the different Golang versions?",
	"user": {
		"login": "hyper-carrot",
		"id": 315569,
		"type": "User",
		"site_admin": false
	},
	"comments": 11,
	"closed_at": "2015-10-08T13:27:09Z",
	"created_at": "2015-10-08T09:27:18Z",
	"updated_at": "2015-10-09T06:15:04Z"
}
