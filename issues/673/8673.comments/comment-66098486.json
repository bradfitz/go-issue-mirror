{
	"id": 66098486,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4 by **lufia@me.com**:\n\n\u003cpre\u003esorry...I don't know Plan 9 supports AES-NI instructions.\n\nbut I attempted to be disable AES-NI.\n\nalg.goc:\n\n#ifdef GOOS_plan9\nenum {\n   Plan9 = 1\n};\n#else\nenum {\n   Plan9 = 0\n};\n#endif\n\nvoid\nruntimeÂ·hashinit(void)\n{\n    if(NaCl || Plan9)\n        return;\n    ...\n}\n\nthen I ran all.rc again.\nabove code solved \"invalid opcode\" in aeshashbody, but raised \"invalid opcode\" in\nruntime.cmpbody.\noutput is below:\n\n(snip)\npkg/go/build\ncmd/go\nsys: trap: invalid opcode pc=0x0004ffa9\nPC=0x4ffa9\n\ngoroutine 16 [running]:\nruntime.cmpbody()\n\t/usr/lufia/go/src/pkg/runtime/asm_386.s:1270 +0x29 fp=0x104b9334 sp=0x104b9330\nruntime.cmpstring(0x104e00c0, 0x10, 0x10486000, 0x13, 0x104403f0)\n\t/usr/lufia/go/src/pkg/runtime/asm_386.s:1209 +0x15 fp=0x104b9338 sp=0x104b9334\nio/ioutil.byName.Less(0x1047c380, 0xa, 0x64, 0x7, 0x6, 0x3042f600)\n\t/usr/lufia/go/src/pkg/io/ioutil/ioutil.go:95 +0xb1 fp=0x104b936c sp=0x104b9338\nio/ioutil.(*byName).Less(0x104e0110, 0x7, 0x6, 0x6ca5b)\n\t\u0026lt;autogenerated\u0026gt;:2 +0x7f fp=0x104b938c sp=0x104b936c\n\nobjdump is below:\n\nTEXT runtime.cmpbody(SB) /usr/lufia/go/src/pkg/runtime/asm_386.s\n        asm_386.s:1258  0x4ff80 39fe                    CMPL DI, SI\n        asm_386.s:1259  0x4ff82 0f8483000000            JE 0x5000b\n        asm_386.s:1260  0x4ff88 39d3                    CMPL DX, BX\n        asm_386.s:1261  0x4ff8a 89d5                    MOVL DX, BP\n        asm_386.s:1262  0x4ff8c 0f4ceb                  CMOVL BX, BP\n        asm_386.s:1263  0x4ff8f 83fd04                  CMPL $0x4, BP\n        asm_386.s:1264  0x4ff92 0f829a000000            JB 0x50032\n        asm_386.s:1265  0x4ff98 f7057c91300000000004    TESTL $0x4000000, 0x3091\n7c(IP)\n        asm_386.s:1266  0x4ffa2 742a                    JE 0x4ffce\n        asm_386.s:1268  0x4ffa4 83fd10                  CMPL $0x10, BP\n        asm_386.s:1269  0x4ffa7 7225                    JB 0x4ffce\n        asm_386.s:1270  0x4ffa9 f30f6f06                REP MOVDQU 0(SI), X0\n        asm_386.s:1271  0x4ffad f30f6f0f                REP MOVDQU 0(DI), X1\n        asm_386.s:1272  0x4ffb1 660f74c8                PCMPEQB X0, X1\n        asm_386.s:1273  0x4ffb5 660fd7c1                PMOVMSKB X1, AX\n        asm_386.s:1274  0x4ffb9 35ffff0000              XORL $main.gccgoToolchain.linker+63(SB), AX\n        asm_386.s:1275  0x4ffbe 755c                    JNE 0x5001c\n\nI think, \"invalid opcode\" is raised when execute MOVSD, MOVD and MOVDQU operations.\nfor example, on Mac OS X:\n  GO386=sse2 GOOS=plan9 GOARCH=386 ./make.rc\n  GOOS=plan9 GOARCH=386 go build -o hello hello.go\non Plan 9:\n  ./hello\nalso raise \"invalid opcode\" by MOVSD in pkg/math/pow10.go:34.\nAre these operations SSE2?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-07T12:07:13Z",
	"updated_at": "2014-12-22T06:37:15Z"
}
