{
	"id": 146390946,
	"body": "Perhaps I'm misremembering, but I thought the traces displayed on requestz were the same traces written to BINARY_TRACE logs and consumed by dapper for analysis. Maybe a `String` method is not the appropriate way to expose the trace data for external consumption. I'm pretty sure traces inside Google have an associated proto. I was initially thinking a `String` method would be simpler and more palatable, but I'd also be happy with a `Proto` method which serialized the trace to a protobuf.\r\n\r\nI could have sworn that C++ traces (at Google) allowed outputting the trace to a string. My mind might be playing tricks on me. It's been years. I'm mildly surprised that you jumped to the conclusion so quickly that there is nothing useful to do here as right now the trace info seems entirely locked up within the `x/net/trace` package with no way to access other than through an http endpoint. Tying the trace data to the lifetime of a process severely limits its utility. For example, I can't easily run a nightly benchmark and collect traces for later analysis. (Yes, I can crawl the http endpoint at the end of the benchmark, but that is not what I would call easy).",
	"user": {
		"login": "petermattis",
		"id": 6201335,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-08T01:49:36Z",
	"updated_at": "2015-10-08T01:49:36Z"
}
