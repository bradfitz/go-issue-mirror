{
	"id": 51284630,
	"number": 6071,
	"state": "closed",
	"title": "encoding/gob: ignore func and chan values during encoding",
	"body": "\u003cpre\u003eWe have been assuming that we can add new fields to existing structs as long as the zero\nvalue of the field means \u0026quot;the old behavior\u0026quot;.\n\nThis is not strictly true for gob, because the new field may contain a type that will\ncause gob to reject a struct that it formerly accepted.\n\nI ran across this because I added a Client *http.Client to a struct that I had forgotten\nwas being gob-encoded, and http.Client contains a func-valued field, which caused gob to\nrefuse to encode any instance of that struct.\n\nI am not sure what, if anything, we should do, but I wanted to record the fact as\nsomething we should think about. It would be good to find some way to avoid making\nexisting gob-compatible structs gob-incompatible in future releases. Perhaps the API\ntool should reject new additions of gob-incompatible fields, although that\ndeterminination requires recursive traversal of the content of the type of the new\nfield. Perhaps gob should change to be more lax. It's unclear.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 7,
	"closed_at": "2014-12-08T10:33:22Z",
	"created_at": "2013-08-07T13:22:51Z",
	"updated_at": "2016-06-24T22:54:00Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
