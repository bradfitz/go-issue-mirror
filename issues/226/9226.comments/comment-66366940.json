{
	"id": 66366940,
	"body": "Thanks Robert, I see the distinction being drawn between named and unnamed\r\ntypes. I gave my feedback earlier, thanks for considering and clarifying.\r\n\r\nOn Tue, Dec 9, 2014 at 2:19 PM, Robert Griesemer \u003cnotifications@github.com\u003e\r\nwrote:\r\n\r\n\u003e It does say \"Given the declarations\" ... \"these types are identical\" - and\r\n\u003e some of the types are in reference to the declarations - there's no need\r\n\u003e for all examples to refer to those declarations. If you have a much better\r\n\u003e way of stating this, let me know. Just keep in mind that there's few words\r\n\u003e in the spec that are arbitrary...\r\n\u003e\r\n\u003e Finally, while it may seem \"obvious\" that a thing x is identical to\r\n\u003e itself, it is a property that needs to be defined and/or concluded from\r\n\u003e other rules - it's not a given at all. The examples here illustrate those\r\n\u003e specific Go type rules and thus are justified.\r\n\u003e\r\n\u003e In fact, you're example 0 == 0 is true, but x == x is false if x happens\r\n\u003e to be a floating-point NaN (Not-A-Number). This is a very concrete example\r\n\u003e where the \"obvious\" assumption is wrong.\r\n\u003e\r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub\r\n\u003e \u003chttps://github.com/golang/go/issues/9226#issuecomment-66340318\u003e.\r\n\u003e\r\n\r\n\r\n\r\n-- \r\nRob Murtha\r\n302-359-5943\r\n\r\nhttp://www.linkedin.com/in/robmurtha\r\nhttp://www.twitter.com/robmurtha",
	"user": {
		"login": "robmurtha",
		"id": 1581298,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-09T22:04:54Z",
	"updated_at": "2014-12-09T22:04:54Z"
}
