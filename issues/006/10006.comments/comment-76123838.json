{
	"id": 76123838,
	"body": "That's an interesting suggestion @minux , but it opens other questions: does such a rule apply only to div/mod-0 or also other constant expressions that might fail depending on constant value? For instance:\r\n\r\nhttp://play.golang.org/p/NdqsO123u3\r\n\r\nShould this be valid? Arguably it should.\r\n\r\n@randall77 Using a poison constant value amounts to the same effect (and perhaps is easier to explain in the spec), but it needs a definition of what \"using\" a constant means. I assume it would mean it would be an error to \"materialize\" such a constant to be used in a runtime-evaluated expression (incl. an assignment or to direct control flow). At least on the type-checker side that would be pretty straight-forward to implement and would work transitively. For instance:\r\n\r\nconst c1 = 1/0\r\nconst c2 = byte(256)\r\n\r\ncould be valid as long as those constants are not actually used at runtime. And of course using a poisoned constant in another constant expression poisons that one as well. (This is basically the mechanism we had in Sawzall ( http://research.google.com/archive/sawzall.html ), and we called them \"undef\" values; except there they were actual runtime values.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-26T05:16:18Z",
	"updated_at": "2015-02-26T05:16:18Z"
}
