{
	"id": 106452927,
	"number": 12621,
	"state": "open",
	"title": "gccgo: inconsistent handling of float constants rounded to 0.0",
	"body": "The following program\r\n```\r\npackage main\r\nimport \"fmt\"\r\nvar p = +1e-10000\r\nvar m = -1e-10000\r\nfunc main() {\r\n\tfmt.Println(p \u003c 0, m \u003c 0)\r\n\tfmt.Println(p == 0, m == 0)\r\n\tfmt.Println(p \u003e 0, m \u003e 0)\r\n\tfmt.Println(p, m)\r\n}\r\n```\r\nprints\r\n```\r\nfalse false\r\ntrue true\r\nfalse false\r\n0 -0\r\n```\r\nwhen executing after compiling with gccgo (gccgo (google-gccgo-219769) 5.0.0 20150116 (experimental)) . That is, while \"ideal\" constant arithmetic pretends that both p and m are perfectly 0, when the values are assigned to a variable, m becomes -0. This seems odd.\r\n\r\nI would expect that floating-point constants that are 0 in the ideal constant expression world at compile time never convert to a value with a negative sign.\r\n\r\nSee also #12576.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "paranoiacblack",
		"id": 1035296,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"created_at": "2015-09-15T00:22:55Z",
	"updated_at": "2015-10-23T00:23:53Z",
	"milestone": {
		"id": 1069171,
		"number": 23,
		"title": "Gccgo"
	}
}
