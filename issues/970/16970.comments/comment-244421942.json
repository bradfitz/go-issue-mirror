{
	"id": 244421942,
	"body": "Why do you say \"perhaps\"? I state clearly that I have a version of clang which was installed from LLVM website. I also have the stock Xcode installed. CoreFoundation.h exists:\r\n\r\n\u003cpre\u003e\r\n~/felix\u003elocate CoreFoundation.h\r\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/System/Library/Frameworks/CoreFoundation.framework/Versions/A/Headers/CoreFoundation.h\r\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/System/Library/Frameworks/CoreFoundation.framework/Versions/A/Headers/CoreFoundation.h\r\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h\r\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h\u003c/pre\u003e\r\n\r\nso clearly the fault is in your build. You should be calling /usr/bin/clang not clang:\r\n\r\nGiven this file:\r\n\r\n\u003cpre\u003e\r\n#include \u0026lt;CoreFoundation/CoreFoundation.h\u0026gt;\r\nint main(){ return 0; }\r\n\u003c/pre\u003e\r\n\r\nthis works just fine:\r\n\r\n\u003cpre\u003e\r\n~/felix\u003e/usr/bin/clang -framework CoreFoundation xx.c\r\n\u003c/pre\u003e\r\n\r\nbut this fails:\r\n\r\n\u003cpre\u003e\r\n~/felix\u003eclang -framework CoreFoundation xx.c\r\nxx.c:1:10: fatal error: 'CoreFoundation/CoreFoundation.h' file not found\r\n#include \u003cCoreFoundation/CoreFoundation.h\u003e\r\n         ^\r\n1 error generated.\r\n\u003c/pre\u003e\r\n\r\nI'm not sure why but that's not the issue: you cannot assume that the default clang is the xcode supplied one. That's like invoking gcc, which on OSX 10.10 actually calls clang by default, but not on my system because I have a real gcc installed.\r\n\r\nBuild systems are complex and messy, I spent several years on the one for my system (argghh). But they're intrinsically the responsibility of the builder not the client. If there is a condition like \"the xcode clang must be the one on the path\" they you should document that because, as I said, upgrading one's compiler is pretty usual for a developer.\r\n\r\nI suggest you change your build system to call /usr/bin/clang instead of just clang.",
	"user": {
		"login": "skaller",
		"id": 431744,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-02T16:22:47Z",
	"updated_at": "2016-09-02T16:23:59Z"
}
