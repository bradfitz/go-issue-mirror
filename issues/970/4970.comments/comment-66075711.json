{
	"id": 66075711,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5 by **jeff.allen**:\n\n\u003cpre\u003eThis limitation stems from recursion in typecheck1(), and would be impossible to fix\nwithout changing it to use an explicit stack (allocated on the heap) to track the\nrecursion instead of the system stack.\n\nA compromise would be a counter to limit the recursion to a reasonable depth, and when\nit is crossed to give an \"expression too complex\" error, which includes the file/lineno.\nThis would be significantly more useful to a programmer who hits this bug than a\nsegfault.\n\nA CL that would do this is here: \u003ca href=\"https://golang.org/cl/8612043\"\u003ehttps://golang.org/cl/8612043\u003c/a\u003e\n\nWith that CL, the example gives:\n\n$ go tool 6g long.go \nlong.go:5822: expression too complex\nlong.go:5823: expression too complex\nlong.go:5824: expression too complex\nlong.go:5825: expression too complex\nlong.go:5826: expression too complex\nlong.go:5827: expression too complex\nlong.go:5828: expression too complex\nlong.go:5829: expression too complex\nlong.go:5830: expression too complex\nlong.go:5831: expression too complex\nlong.go:5822: too many errors\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-04-10T08:56:28Z",
	"updated_at": "2014-12-08T10:26:29Z"
}
