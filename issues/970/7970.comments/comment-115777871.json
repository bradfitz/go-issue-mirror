{
	"id": 115777871,
	"body": "#6817 might help with this, but I'm not convinced it is always available in all cases. Maybe I'm wrong.\r\n\r\nWe might be able to just keep living with this. Certainly we don't hear about it much.\r\n\r\nIf we need to fix things, and AIO is not good enough (and I suspect it's not), one possibility would be to create an unusable fd somehow (for example call socket without binding it anywhere, or maybe call pipe and close the read end and use the write fd) and instead of using Close(fd) use Dup(badfd, fd). That would close the original fd and make f.fd unusable, without leaving the fd available for reuse immediately. The Dup'ed copy of badfd could be properly closed when we know all the i/o has stopped. The problem with this, I suspect, is that Close of a file open for writing can return information about write errors that are as yet unreported, and I suspect Dup onto an existing fd does not return those errors.\r\n\r\nLike I said, this is very difficult to fix. I expect that most other languages just live with this the same as Go. I don't know that there's any fix that's not worse than the problem.\r\n\r\n\r\n\r\n",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-26T17:18:13Z",
	"updated_at": "2015-06-26T17:18:13Z"
}
