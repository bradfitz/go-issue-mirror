{
	"id": 67912229,
	"body": "In random order:\r\n\r\n* url.Error should not wrap an io.EOF. That should've been turned into an ErrUnexpectedEOF by whoever wrapped it I imagine. I don't know where that is, though.\r\n* I don't read the Client comments about \"HTTP protocol error\" as meaning ProtocolError specifically. I can update those docs.\r\n* We don't document the error types in general in Go (some things do, like os.PathError), but in general once we start returning a concrete type instead of an errors.New/fmt.Errorf one, then we kinda need to stick with it, in case people depend on it. We try to add tests for these so we don't regress, but not well enough.\r\n* http.ProtocolError is kinda old and weird. In retrospect we tend to document sentinel exported ErrFoo = errors.New(\"...\") variables instead, and document that those are returned.\r\n* likewise, *net.OpError is old. It exists to implement the net.Error interface, but it need not be exposed itself probably. But we're stuck with it now.\r\n* net/http just upstream of lots of legacy. It's not surprising that the various experiments in error behaviors all manifest themselves through net/http's higher level interfaces.\r\n\r\nIn summary, we can improve some docs (where improve likely means make more vague), but for compatibility there's little we can do.",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-23T01:21:11Z",
	"updated_at": "2014-12-23T01:21:11Z"
}
