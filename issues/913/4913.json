{
	"id": 51282821,
	"number": 4913,
	"state": "closed",
	"title": "spec: type of \"foo\"[i:j] is unclear",
	"body": "\u003cpre\u003eThe spec says:\n\n\u0026quot;If the sliced operand is a string or slice, the result of the slice operation is a\nstring or slice of the same type.\u0026quot; (\n\u003ca href=\"http://tip.golang.org/ref/spec#Index_expressions\"\u003ehttp://tip.golang.org/ref/spec#Index_expressions\u003c/a\u003e ).\n\nIt also says that the type of an untyped constant is it's default type when not\nderivable from context (an assignment), but that language is more vague and spread out.\nNote that:\n\ntype mystring string\nvar s1 mystring = \u0026quot;foo\u0026quot; // legal\nvar s2 mystring = \u0026quot;foo\u0026quot;[1:2] // refused by gc, gccgo because the slice\nexpression has type string\ni, j := 0, 1\nvar s3 mystring = \u0026quot;foo\u0026quot;[i, j] // refused by gc, gccgo because the slice\nexpression has type string\n\nArguably these slice expressions could be of untyped string, but that would be another\ncase (besides bool results after comparisons) where non-constant values have untyped\ntype.\n\nSomewhat related: The spec does not spell out that \u0026quot;foo\u0026quot;[1:2] is not a\nconstant anymore.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		},
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2014-12-08T10:26:10Z",
	"created_at": "2013-02-25T21:19:43Z",
	"updated_at": "2016-06-24T22:34:06Z"
}
