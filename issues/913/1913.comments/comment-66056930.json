{
	"id": 66056930,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5 by **jdnurmi@qwe.cc**:\n\n\u003cpre\u003eI'm uninclined to have a strong opinion on how it _should_ be done, but as it is, .Dial\nperforms 'magic' based on the Scheme of the passed in URL;  The fact that this then\nimplies an unmodifiable tls.Config seems to be worse than having 2 optional parameters\n-- especially if (for whatever reason) I don't trust the /etc/ssl/certs/... bundle for\nmy application.\n\nSo that is to say: If .Dial will magically upswing to TLS based on a potentially\nuser-specified parameter, I want to be able to control TLS parameters in one call;\n  \n- If Dial were re-formed to something like (host,port,resource,ws_origin,ws_protocols)\nand a TLS version, then I'd be unconcerned by the magic, but by the length of the call.  \n\n-  I also don't like the idea of having to be 'smart' if i'm accepting a user WS://URL\nand make a different call if I have specific TLS/SSL needs;\n\n- I'd consider it probably wrong to have a DialTLS with similar 'auto-sensing'  URL\nbehaviour, but an extra parameter for *tls.Config;  Esp., if DialTLS could create\na non-TLS connection by using a 'ws://' URL.\n\nFWIW, the two protocol \u0026 origin parameters are not so much optional, as WS specific --\nyou don't _have_ to care what they are (tho Go kills an origin-less WS), but the\nprotocol considers them 'core' connection strings;\n\nRyans comment about allowing us to 'hijack' an existing net.Conn or http.ClientConn\nwould be a good thing to have regardless, and would've allowed (albeit with more work) a\nsimilar end.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-06-14T01:44:08Z",
	"updated_at": "2014-12-08T10:10:31Z"
}
