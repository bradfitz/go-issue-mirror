{
	"id": 66094830,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eRuss, this is a bug report about a difference between 1.1 and 1.2, not 1.2 to 1.3.\n\nIn Go 1.2, we properly now return an ErrUnexpectedEOF on the read of an HTTP body\nshorter than its declared Content-Length. That was a good bug fix.\n\nSo naturally when you io.Copy that, the resulting error (from the Read side) will also\nbe ErrUnexpectedEOF.\n\nIf your application cares about whether the read side failed or the write side failed,\ndo them yourself and don't use io.Copy or similar helpers. If you can't (somebody else\nis calling io.Copy), you can wrap the Reader and/or Writer with versions that record\ntheir errors. Or even slurp the body and replace the http.Request.Body with a validated\none. (that's reasonable only if there's a sane upper bound on request body size).\n\nBut for this load balancer, I'd just get the incoming HTTP request and replace the\nRequest.Body with your own io.ReadCloser that wraps the underlying http.body ReadCloser\nand tracks whether it ever got a Read error.  If it did, then don't echo the HTTP\nresponse from the backend and instead send your 400.\n\nBut note that the request has already been written to the backend and therefore may have\nside effects if your backend has side effects without reading its Request.Body to the\nend.\u003c/pre\u003e\n\n\n\n_Status changed to **WorkingAsIntended**._",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-05-21T17:00:44Z",
	"updated_at": "2014-12-08T10:44:22Z"
}
