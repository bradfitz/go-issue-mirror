{
	"id": 149750541,
	"body": "I don't know iOS that well, but on Android, does the NDK actually give us access to the MediaPlayer API? What do C++ NDK apps do?\r\n\r\nI'd still like to know what the (platform-agnostic) API will look like, and I think that choosing to implement that Go API on e.g. MediaPlayer instead of OpenAL is putting the cart before the horse. You say that Player will have no significant API breaking changes. IIUC, that means it will continue to take a ReadSeekCloser, which means that you can't stream audio over a network (because you can't seek into a network connection). Is that a deliberate design decision? Will I be able to play a sine wave modulated on-the-fly by Go code? If so, what's the concurrency model? It's still unclear to me what's exactly in and out of scope of the audio API.\r\n\r\nI think I've said this before, but I still think the first step is to get rough consensus on the big-picture API design. I'm wary of a significant implementation change like this that doesn't actually break API, because I think that the API needs to change in the long run, so we should design the API first.",
	"user": {
		"login": "nigeltao",
		"id": 8565232,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-21T01:13:21Z",
	"updated_at": "2015-10-21T01:13:21Z"
}
