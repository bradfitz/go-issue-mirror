{
	"id": 205131963,
	"body": "With that statement I agree and admittedly, the code is not production quality. If this were a code review the hammering on checking my errors would be warranted. But that is in this particular case not the point. There is only one spot in the code in which it creates the file which the panic claims is missing. Interrupting the test run and checking the whether the file really doesn't exist, I find the file is present and it is complete and contains what it should be containing. Still the panic just claimed it didn't exist. Although I cannot claim with absolute certainty that no error occurred I think I am reasonably sure that no error was returned, since the file is created and complete and correct. Unless there is a possibility that the function returns an error and does what it is supposed to do anyway, just a little time after returning (? Don't know how, but I would be interested in your explanation ?).\r\n\r\nLeaves me with a timing issue during the interaction between the go run-time and the operating system. WriteFile thinks it has created the file (or not depending on your explanation) and returns. The os appears not to immediately write the file, might be busy with some other task (it is busy creating about 12000 files in about 1 minute). os.Stat panics b/c the file does not exists, I check after hitting CTRL-C and  it turns out the file does exists and  contains exactly what the expectation was. I think this confirms exactly what TheHippo claimed in his initial opening of this issue.\r\n\r\nI will code around this and avoid using ioutil.WriteFile, since it is not reliable. \r\n\r\nWilbert",
	"user": {
		"login": "dotwilbert",
		"id": 12401718,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-04T04:23:24Z",
	"updated_at": "2016-04-04T09:13:41Z"
}
