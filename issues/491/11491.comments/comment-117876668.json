{
	"id": 117876668,
	"body": "On 2 July 2015 at 13:47, Keith Randall \u003cnotifications@github.com\u003e wrote:\n\n\u003e Right, that's the algorithm I was trying to describe.\n\u003e\n\u003e I suspect value types \u003e1k are very uncommon. You almost always want to use\n\u003e pointers-to-big-thing instead.\n\u003e\nRight.\n\n\u003e I guess I'm still a bit confused as to how the current setup doesn't work.\n\u003e There should only be a single shared library with the runtime package in\n\u003e it, and zerovalue is in the runtime package. Does the problem occur when\n\u003e compiling other shared libraries with other packages - where the compiler\n\u003e ends up putting a large runtime.zerovalue symbol in that other shared\n\u003e library, and when that shared library is loaded, it can't affect the\n\u003e runtime.zerovalue that was already loaded in the runtime-containing shared\n\u003e library?\n\u003e\nMostly -- it's always the runtime.zerovalue from the executable that \"wins\"\nbecause the executable is the first entry in the \"global symbol lookup\nscope\".\n\nIn trying to explain exactly what goes wrong, I also became very confused.\nI think I could make things work by always defining when linking a\nruntime.zerovalue that is the same size as the largest of all the\nzerovalues from the packages being linked /and/ the largest zerovalue of\nall the dependent libraries. And actually I'm a bit confused as to why that\ndoesn't happen already.\n\n\u003e If my description is accurate, it sounds like the dynamic linker should at\n\u003e least barf when this happens instead of silently ignoring the problem. Is\n\u003e there any way to make the dynamic linker barf in this situation? I can\n\u003e imagine there might be other cases where the compiler introduces runtime\n\u003e data symbols that might interact badly with dynamic linking.\n\u003e\nI don't think so, welcome to wonderful wacky world of symbol interposition.\n",
	"user": {
		"login": "mwhudson",
		"id": 672022,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-02T02:10:47Z",
	"updated_at": "2015-07-02T02:10:47Z"
}
