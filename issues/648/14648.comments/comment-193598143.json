{
	"id": 193598143,
	"body": "I looked into this. While removing all the type strings would in fact make mergestrings unnecessary, there are simpler ways to make it mostly unnecessary. In my tests I am using the github.com/davecheney/benchjuju tree and I'm leaving DWARF in the binary (because I was lazy). If you want numbers without DWARF, multiply the space percentages by 1.5X.\r\n\r\nI measure the benefit of calling mergestrings as 2.5% in jujud.\r\nHowever, after changing go.string symbols to have default alignment 1 byte (not maxalign for most strings) and changing the reflect type information for non-pointer `\"T\"` to record its name as `\"*T\"[1:]`, forcing the sharing of the names for `\"T\"` and `\"*T\"`, the benefit of calling mergestrings drops to 0.6%. At that reduced effectiveness, it seems even more clearly not worth a 50% time overhead. I prepared [CL 20334](https://go-review.googlesource.com/20334) making these two optimizations and deleting mergestrings. That will close this issue.\r\n\r\nHowever, I didn't want to make jujud even 0.6% larger, because I do understand that it's the wrong direction. So I also prepared [CL 20335](https://go-review.googlesource.com/20335) to change functype to merge the in and out slices, saving one slice header per type. That saved 1.35%, so after both CLs, instead of jujud being +0.6% in size it is -0.75% in size. I know @crawshaw has a more aggressive functype CL pending, but this one was a trivial first step and preserves downward binary size monotonicity.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-08T04:18:27Z",
	"updated_at": "2016-03-08T04:26:25Z"
}
