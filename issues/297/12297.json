{
	"id": 102853424,
	"number": 12297,
	"state": "closed",
	"title": "hash: add Combine functions",
	"body": "I propose that the standard libraries hash/crc32, hash/crc64, and hash/adler32 add a Combine function that does the following:\r\n\r\nLet AB be the string concatenation of strings A and B. Then it is possible to define a efficient function Combine that computes Hash(AB) given only Hash(A), Hash(B), Len(B).\r\n```go\r\nHash(AB) == Combine(Hash(A), Hash(B), Len(B))\r\n```\r\n\r\nThus, usage of Combine in hash/crc32 may look like:\r\n```go\r\nvar s1, s2 []byte // Let these be two large byte strings\r\ncrc1 := crc32.ChecksumIEEE(s1)\r\ncrc2 := crc32.ChecksumIEEE(s2)\r\nlen2 := int64(len(s2))\r\n\r\n// crc3 is equivalent to crc32.ChecksumIEEE(append(s1, s2...))\r\ncrc3 := crc32.Combine(crc32.IEEE, crc1, crc2, len2) \r\n```\r\n\r\nThe [zlib library provides these functions](http://www.zlib.net/manual.html#Checksum) and they are extremely useful for merging large data segments under a single hash or for computing the hash of a large dataset in parallel. \r\n\r\n### Advantages\r\n* Add functionality that is obviously related to each of the hash libraries and has clear usefulness and prevents users from needing to implement these non-trivial functions themselves.\r\n\r\n### Disadvantages\r\n* The hash libraries will be slightly asymmetrical since hash/fnv won't have a Combine function. I haven't spent too much time on it, but it may be possible to define a Combine function for fnv as well.\r\n\r\nI'd be interested in adding these if other people find them useful as well.",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2015-10-13T20:38:41Z",
	"created_at": "2015-08-24T17:53:55Z",
	"updated_at": "2015-10-13T20:38:41Z"
}
