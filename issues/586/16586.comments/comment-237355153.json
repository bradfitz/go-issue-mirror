{
	"id": 237355153,
	"body": "This is a common pattern in any kind of parallel loop. Nothing is specific to `t.Parallel` here. Effective Go [recommends](https://golang.org/doc/effective_go.html#channels) making a local copy of the variable inside the loop:\r\n\r\n```go\r\n    t.Run(\"parallel\", func(t *testing.T) {\r\n        for _, tt := range routes {\r\n            tt := tt\r\n            t.Run(tt.url, func(t *testing.T) {\r\n\r\n                t.Parallel() // \u003c== trying to set Parallel(), while using tt from the range loop\r\n\r\n                u, _ := url.Parse(tt.url)\r\n                if u.Path != tt.path {\r\n                    t.Errorf(\"expected %v, got %v\", tt.path, u.Path)\r\n                }\r\n            })\r\n        }\r\n    })\r\n```\r\n\r\nAs Effective Go says, \"It may seem odd to write `req := req` but it's legal and idiomatic in Go to do this. You get a fresh version of the variable with the same name, deliberately shadowing the loop variable locally but unique to each goroutine.\"",
	"user": {
		"login": "quentinmit",
		"id": 115761,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-03T20:04:53Z",
	"updated_at": "2016-08-03T20:04:53Z"
}
