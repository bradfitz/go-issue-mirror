{
	"id": 121799478,
	"number": 13586,
	"state": "closed",
	"title": "cmd/go: go get Segmentation Fault after using setfacl",
	"body": "The following script allows to replicate the environment.\r\n``` go\r\n#!/bin/bash\r\n \r\nFP=/tmp2/$USER/raid/$USER\r\nsudo mkdir -p $FP\r\nsudo chmod 755 /tmp2\r\nsudo chmod 750 /tmp2/$USER\r\nsudo setfacl -m user:$USER:r-x /tmp2/$USER\r\nsudo chmod 705 /tmp2/$USER/raid\r\nsudo chmod 755 $FP\r\nsudo chown $USER.$USER $FP\r\nexport GOPATH=$FP/gopath\r\ngo get google.golang.org/grpc\r\n```\r\n\r\nThe failures I got were:\r\n\r\n```\r\nunexpected fault address 0x0\r\nfatal error: fault\r\n[signal 0xb code=0x80 addr=0x0]\r\n\r\ngoroutine 25 [running]:\r\nSegmentation fault (core dumped)\r\n```\r\nor\r\n```\r\nfatal error: unexpected signal during runtime execution\r\n[signal 0xb code=0x80 addr=0x0]\r\n\r\ngoroutine 25 [running]:\r\nSegmentation fault (core dumped)\r\n```\r\nor just\r\n```\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nNow the funny part:\r\nI've rerun the tool many times in hope for some more useful error, and probably after 10th run it run successfully. I guess it means some race condition?\r\n\r\nSystem: Linux; Ubuntu 15.04; filesystem: ext4\r\nKernel: Linux xx 3.19.0-30-generic #33-Ubuntu SMP Mon Sep 21 20:58:04 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\r\nGo: 1.4.2 and 1.5.2 (both from golang.org)",
	"user": {
		"login": "orian",
		"id": 144554,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "OS-Linux"
		}
	],
	"comments": 10,
	"closed_at": "2016-01-05T11:22:07Z",
	"created_at": "2015-12-11T21:55:12Z",
	"updated_at": "2016-07-08T10:20:17Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
