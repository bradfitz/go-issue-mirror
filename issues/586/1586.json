{
	"id": 51278022,
	"number": 1586,
	"state": "closed",
	"title": "6g sometimes counts _ as a named result and sometimes it doesn't",
	"body": "\u003cpre\u003eThe following program does not compile with 6g:\n\npackage p\n\nimport \u0026quot;os\u0026quot;\n\nfunc f() (_ int, err os.Error) {\n\treturn  // test.go:6: not enough arguments to return\n}\n\nfunc g() (x int, _ os.Error) {\n\treturn\n}\n\n\nFor g, the _ is counted as a named result and the return is ok. For f, that does not\nseem to be the case.\n\nA blank _ should count as a named result parameter. It behaves as a named parameter in\nincoming parameter lists, and on the left-hand side of an assignment or import\ndeclaration. (Arguably the spec could be a bit more precise).\n\nIt makes a lot of sense to allow _ results. For instance, some functions must return an\nos.Error to satisfy an interface, but they do not generate an error. One may still want\nto use the expression-free return for the other result parameters and it should be ok to\nname the error result _.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2014-12-08T10:08:59Z",
	"created_at": "2011-03-07T22:19:59Z",
	"updated_at": "2016-06-24T19:26:14Z"
}
