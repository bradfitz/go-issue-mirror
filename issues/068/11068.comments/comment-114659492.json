{
	"id": 114659492,
	"body": "From e-mail thread:\r\n\r\nhere is an idea about how to do the floating point prints more\r\nefficiently. it works but doesn't have enough precision. what it does\r\nis break out the exponent, scales it to a power of 10 that will\r\ndisplay as \"e+(exp)\", and then multiplies the reside onto the\r\nmantissa. The mantissa is now in range so prints quickly.\r\n\r\nthis code works but is missing many important properties, such as\r\nhandling negative exponents, adjustable precision, and so on, and the\r\nmath with the exponent needs to be done with high precision, but the\r\nidea is sound i think.\r\n\r\n-rob\r\n\r\n```\r\n// Assumes positive exponent.\r\nvar mant big.Float\r\nexp := f.MantExp(\u0026mant)\r\nfexp := newF().SetInt64(int64(exp))\r\nfexp.Mul(fexp, floatLog2)\r\nfexp.Quo(fexp, newF().SetFloat64(2.3025850929940456840179914546843642076011014886287729760333279009675726096773667591101485283253788949))\r\n// log 2 to many digits.\r\nf64exp, _ := fexp.Float64()\r\n// We now have a floating-point base 10 exponent.\r\n// The integer part is what we will show.\r\ni64exp := int64(f64exp)\r\n// Now compute 10**(fractional part).\r\nscale := math.Pow(10, f64exp - float64(i64exp))\r\n// Rescale mantissa.\r\nmant.Mul(\u0026mant, newF().SetFloat64(scale))\r\nreturn fmt.Sprintf(\"%ge+%d\\n\", \u0026mant, i64exp)\r\n```",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-23T22:28:29Z",
	"updated_at": "2015-06-23T22:28:29Z"
}
