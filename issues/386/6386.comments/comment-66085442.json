{
	"id": 66085442,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003eSome comments:\n\n1) This is neither a defect of the language nor the design. The language was\n_deliberately_ designed to only permit constant of basic types.\n\n2) The implications of such a change are much more far-fetching than meets the eye:\nthere are numerous open questions that would have to be answered _satisfactorily_; and I\ndon't think we are there yet.\n\nFor instance, if we allow such constants, where is the limit? Do we allow constant maps?\nWhat about constant channels? Constant pointers? Is it just a special case for slices?\netc.\n\nA first step might be to allow constant arrays and structs as long as they are only\ncomposed of fields that can have constant types themselves.\n\nAn even smaller step (which I do think we should do) is to make \"foo\"[i] a constant if i\nis a constant (right now it's a non-constant byte).\n\nFinally, note that it's often not very hard for a compiler to detect that a\npackage-level variable is never modified. Thus, an implementation may choose to optimize\nthe variable initialization and possibly compute it compile time. At this point, the\nconst declaration only serves as documentation and for safety; there's no performance\nloss anymore.\n\nBut again, we have tried to keep the type system (incl. what constants are) relatively\nsimple so that it doesn't get into the way. It's not clear the benefits are worth the\nprice in additional complexity.\u003c/pre\u003e\n\n\n\n_Status changed to **LongTerm**._",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-15T22:18:26Z",
	"updated_at": "2014-12-08T10:35:08Z"
}
