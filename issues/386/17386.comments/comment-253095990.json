{
	"id": 253095990,
	"body": "\u003e\u003e A function that returns a new canonical version of the entire profile\r\n\u003e\r\n\u003e I'm confused about how this would work. Can you elaborate on how this solves the \"I have four nicknames\" problem?\r\n\u003e\r\n\u003e Similarly, I'm confused about what a CanonicalTransformer would do.\r\n\u003e Is it because preparation and enforcement are separable steps?\r\n\r\nNot preparation and enforcement (we got rid of preparation, and there's been a little talk about getting rid of it in a future version of the RFC too), but enforcement and comparison (the form you have to transform the string into to see if two strings are equivalant). Because there is a specific order of operations to the steps we can't just tack any extra comparison steps (eg. to lowercase before a case insensitive comparison) on to the already enforced text, we have to start all over from the original input and execute the transformations over again. Right now the only output from our comparison function is true or false, I'm proposing giving us a way to access the data from the comparison transformation:\r\n\r\n```go\r\n//  Creates output useful for comparison\r\nt := precis.Nickname.NewCompareTransformer()\r\na := \"Compare me\"\r\nb := \"Compare Me\"\r\na = t.String(a) // We only have to do this transformation once, then we can compare with == as many times as we want against as many strings as we want without having to transform \"a\" again\r\nb = t.String(b)\r\n// a == b == \"compare me\"\r\n\r\n// Create output useful for enforcement\r\nt = precis.Nickname.NewTransformer()\r\na = \"Compare me\"\r\na = t.String(a)\r\n// a == \"Compare me\"\r\n```\r\n\r\n\u003e type CanonicalString string\r\n\r\nThat's an interesting idea; have a special type just for comparison, keying on in maps, etc. I wonder if it would end up being confusing? I'm really not sure. Does it buy us anything over effectively just duplicating the current APIs and having separate methods for enforcement and comparison? Definitely worth thinking about.",
	"user": {
		"login": "SamWhited",
		"id": 512573,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-12T01:42:33Z",
	"updated_at": "2016-10-12T01:46:38Z"
}
