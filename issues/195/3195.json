{
	"id": 51280244,
	"number": 3195,
	"state": "closed",
	"title": "Method inlining should not affect stack traces",
	"body": "by **esko.luontola**:\n\n\u003cpre\u003eNow when methods are inlined, the inlined methods disappear from stack traces, which\nmakes it harder to find out from which line the exception was thrown. Both stack traces\nof uncaught exceptions, and the runtime.Callers/Caller methods are affected by this\nproblem.\n\nWhat steps will reproduce the problem?\n\npackage main\n\nfunc main() {\n\tboom2()\n}\nfunc boom2() {\n\tboom1()\n}\nfunc boom1() {\n\tboom0()\n}\nfunc boom0() {\n\tpanic(\u0026quot;panic from boom0\u0026quot;)\n}\n\n\nWhat is the expected output?\nThe first element of the stack trace should be main.boom0(). This is how it works when\ncompiled with method inlining disabled (-gcflags '-l'), as shown below:\n\npanic: panic from boom0\n\ngoroutine 1 [running]:\nmain.boom0()\n\t/home/orfjackal/devel/test/test.go:13 +0x47\nmain.boom1()\n\t/home/orfjackal/devel/test/test.go:10 +0x18\nmain.boom2()\n\t/home/orfjackal/devel/test/test.go:7 +0x18\nmain.main()\n\t/home/orfjackal/devel/test/test.go:4 +0x18\n\n\nWhat do you see instead?\nWith inlining enabled the stack trace starts with main.boom1():\n\npanic: panic from boom0\n\ngoroutine 1 [running]:\nmain.boom1()\n\t/home/orfjackal/devel/test/test.go:10 +0x47\nmain.boom2()\n\t/home/orfjackal/devel/test/test.go:7 +0x18\nmain.main()\n\t/home/orfjackal/devel/test/test.go:4 +0x18\n\n\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g\n\nWhich operating system are you using?\nLinux vm-ubuntu64 2.6.38-13-generic\n\nWhich revision are you using?  (hg identify)\nf4470a54e6db weekly/weekly.2012-03-04\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Unfortunate"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:16:36Z",
	"created_at": "2012-03-05T17:57:38Z",
	"updated_at": "2016-06-24T21:29:37Z"
}
