{
	"id": 162720073,
	"body": "Let me be clear, I assume that go has already dealt with most of these\nproblems. I can certainly provide some glue for existing services. However,\nif there is a need to write totally new runtime support I will need a lot\nmore direction.\n\nOn windows there were certain conventions for dll entry points. However,\nthose are generally C library artifacts. If go has particular needs I might\nbe able to satisfy those, given some pointers.\n\nMy personal need is to take go code, expose some of it via a C ABI, and\nlink an executable written in another language with it. The code needs to\nwork on Windows, Linux, and Mac. Android, iOS, and Windows Mobile are a\nplus, but not urgently pending. Go satisfies most of these wonderfully. I\nam interested in any solution that helps me accomplish this goal. I would\nprefer a robust, integrated solution. However, if it is an unreasonably\nlarge task for a new contributor then I would be happy to know about\nworkarounds.\n\nOn Mon, Dec 7, 2015, 7:27 PM Alex Brainman \u003cnotifications@github.com\u003e wrote:\n\n\u003e @nadiasvertex \u003chttps://github.com/nadiasvertex\u003e The main thing is to make\n\u003e the function hostlink in cmd/link/internal/ld/lb.go do the right thing on\n\u003e Windows. On Darwin it invokes theC linker with -dynamiclib. On GNU/Linux it\n\u003e invokes the C linker with -Wl,-Bsymbolic -Wl,-z,relro -shared\n\u003e -Wl,-z,nodelete.\n\u003e\n\u003e If you just want to build a DLL that does not contain any C code, you\n\u003e don't have to use external linker. I am sure you can modify Go linker to\n\u003e produce what you want. Go linker does just that when it creates windows\n\u003e executables. I don't see how creating of DLL would be different.\n\u003e\n\u003e You will also have to deal with issues every windows DLL deals with. You\n\u003e must have set of mimimum functions required in DLL. You have to deal with\n\u003e your DLL exported functions called on different threads. You have to deal\n\u003e with exceptions.\n\u003e\n\u003e You might also have to worry about how thread-local storage works in a DLL\n\u003e (I have no idea how this sort of thing works on windows)\n\u003e\n\u003e What is wrong with the way thread-local storage works in Go windows\n\u003e executables now?\n\u003e\n\u003e Alex\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/11058#issuecomment-162714478\u003e.\n\u003e\n",
	"user": {
		"login": "nadiasvertex",
		"id": 2034108,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-08T01:01:24Z",
	"updated_at": "2015-12-08T01:01:24Z"
}
