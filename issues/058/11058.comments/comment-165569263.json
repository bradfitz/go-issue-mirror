{
	"id": 165569263,
	"body": "My colleague and I have gotten to the point that the _rt0_amd64_windows_lib initializer is called correctly from an executable linked to the Go generated static library. That's pretty exciting.\r\n\r\nThe problem now is that the executable segfaults. I'll briefly explain where I think it is happening, and maybe some guidance can be provided on what the \"right\" thing to do is.\r\n\r\nFirst, I understand that we have to pass in command-line arguments somehow. On Windows this appears to be really complicated, so I'm not even dealing with it yet. By the time we get to the initialization routine, the registers which held the information from the Windows kernel have been overwritten.\r\n\r\nSo currently I am initializing the memory locations that we pull this stuff back out of to 0x0. Maybe this is bad, but it seems like the code in the runtime should just skip processing the args if I set them to empty.\r\n\r\nThe runtime passes through into x_cgo_sys_thread_create(), which receives _rt0_amd64_windows_lib_go as the function to spawn. pthread_create is given this value and returns success.\r\n\r\nWalking out, we exit the __do_global_ctors() function fine. In the meantime, the initialized thread starts to run. This thread ends up segfaulting fairly quickly, by jumping to address 0x00000000ffffffff. Clearly this is wrong.\r\n\r\nAre there any suggestions where I should look to narrow down why it's going off into the weeds?",
	"user": {
		"login": "nadiasvertex",
		"id": 2034108,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-17T20:10:57Z",
	"updated_at": "2015-12-17T20:10:57Z"
}
