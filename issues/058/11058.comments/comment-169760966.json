{
	"id": 169760966,
	"body": "@jtsylve There is currently no way to generate a functional .dll straight from a Go\r\npackage on Windows. However, the -buildmode=c-archive patch for Windows is\r\nworking through the acceptance process. The patch works for me in the\r\nlimited testing I have done with it. You could download the patch and apply\r\nit to the compiler source, then generate a static library with it. You\r\ncould then write a .c file which exposes .dll entry points and calls into\r\nthe static library, and generate a .dll from that .c file and the .a file.\r\n\r\nIt would be useful to see someone test it in a larger scope, so if you\r\nwould like to try this out I would be happy to help you get it working.\r\n\r\nOn Thu, Jan 7, 2016 at 12:51 PM Joe Sylve \u003cnotifications@github.com\u003e wrote:\r\n\r\n\u003e @nadiasvertex \u003chttps://github.com/nadiasvertex\u003e Is go.o ever explicitly\r\n\u003e closed after it's written to? I'm wondering if that could be why you need\r\n\u003e to do the os.Stat workaround to get it to flush to disk.\r\n\u003e\r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub\r\n\u003e \u003chttps://github.com/golang/go/issues/11058#issuecomment-169754620\u003e.\r\n\u003e\r\n",
	"user": {
		"login": "nadiasvertex",
		"id": 2034108,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-07T18:15:55Z",
	"updated_at": "2016-01-07T18:16:29Z"
}
