{
	"id": 162746642,
	"body": "\u003e On windows there were certain conventions for dll entry points. However,\r\n\u003e those are generally C library artifacts. ...\r\n\r\nIt is not true. There are variety of non C compilers on Windows that will allow you to build a DLL.\r\n\r\n\u003e My personal need is to take go code, expose some of it via a C ABI, and\r\n\u003e link an executable written in another language with it. \r\n\r\nYou don't have to use DLLs for that. You can also include your Go code as part of your final executable. But then you need to be specific about the tools you use to build that executable. Is that going to be gcc? If yes, then what Ian suggests is your path. I do not know much about gcc, so I am not familiar with what is required.\r\n\r\nYou can also try and create DLL using gcc. Again, that is path that Ian suggested.\r\n\r\nIf you don't want to rely on gcc to build your programs, then you would have to build windows DLL as part of Go linkers. The code lives in $GOROOT/src/cmd/link/internal/ld/pe.go. Current code produces Windows PE executable (among other things). You can modify it to output Windows DLL (with whatever DLL requires). I am familiar with pe.go, but I have never built a DLL from scratch. But happy to help.\r\n\r\nYou should, probebly, try gcc approach first, because it has been implemented on some non-Windows OSes already. So, perhaps, it will be easy enough.\r\n\r\n\u003e It's unusual to want to build a shared library/DLL if you don't have a C toolchain available. ...\r\n\r\nPerhaps I misunderstand you, but I disagree. I don't see how building Windows DLL is different from building Windows executable. Surely we require gcc for cgo, but other than that.\r\n\r\n\u003e On Unix we decided to simply rely on that, rather than spend the time to teach the Go linker how to generate a shared library. \r\n\r\nFair enough.\r\n\r\n\u003e On Windows, in which DLLs are more different from executables than they are on ELF, I would suggest following the same strategy. Since in the general case we must use external linking when generating a shared library, I don't think it's so bad to always require it.\r\n\r\nThere are advantages of not requiring gcc on Windows. Go just works out of the box. When things break, you have all source code with you; and source code is Go. You can build Go Windows executable on any other OS - you can use Plan9 computer to build Go Windows executable.\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-08T03:14:22Z",
	"updated_at": "2015-12-08T03:14:22Z"
}
