{
	"id": 196607260,
	"body": "@ianlancetaylor As the c-archive patch feels like it is wrapping up, I have started looking more closely at the c-shared stuff for Windows.  I re-read the discussion here, and I have some notes and questions.\r\n\r\nI see in src/cmd/internal/obj/x86/asm6.go:\r\n\r\n```\r\n3610: // Windows TLS base is always 0x14(FS)\r\n\r\n3690: // Windows TLS base is always 0x28(GS)\r\n```\r\n\r\nThe comments talk about \"TLS initial init\" and direct-access systems. This looks to me like Windows would be a \"TLS initial init\" system, since presumably someone has to initialize the TLS area and then store it into those locations above. Is that correct?\r\n\r\nIn the end, I think the problem is this:\r\n\r\nWindows has a Thread Environment Block mapped to FS (32-bit) and GS (64-bit). Many of the \"slots\" in this block are mapped out for certain values. Windows has a convention for TLS called the \"thread-local storage array\" at FS:0x2C and GS:0x58, but Go decided to use the so-called \"arbitrary\" slot at  FS:0x14 and GS:0x28 to manage its own TLS.  \r\n\r\nThe concern is that other code may use the \"arbitrary\" slot for its own purposes, thus accidentally destroying the TLS space for the runtime and causing catastrophic failure. \r\n\r\nIs that correct?\r\n\r\nI suppose the simple solution is \"Do what C does and either call the Win API functions, or re-implement the algorithm.\" \r\n\r\nClearly, I would prefer to just emit calls to the API.\r\n\r\nHowever, I see a number of problems and it is not clear to me how they are resolved.\r\n\r\n1. Special mention is made of DLLs, but I don't see why they are a bigger problem than static libraries. If stomping is done by another runtime, why should it matter if it is a DLL or a static library?\r\n2. GCC on Windows appears to use a function to get the TLS address. However, in the places I've looked in Go, \"TLS\" appears to be a \"named\" location, that translates to the stuff above. Is it even reasonable to think about using a Win32 API function to deal with TLS?\r\n\r\nIf it is reasonable to use the API, it seems like the most reliable implementation would be to use TlsAlloc and TlsFree for TLS slot management and use the normal FS and GS TLS array in the TEB to access the values (for performance.) I saw comments to the effect that Go doesn't really use TLS much anyway. So if this is the case, the performance impact might be quite minimal.   \r\n\r\nThanks.",
	"user": {
		"login": "nadiasvertex",
		"id": 2034108,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-15T01:53:20Z",
	"updated_at": "2016-03-15T01:54:06Z"
}
