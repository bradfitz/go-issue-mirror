{
	"id": 188877722,
	"body": "You do not get any alignment guarantee on the memmove inputs.\nIf ppc can't do unaligned loads and stores, it does need fixup code.\nIf there isn't yet, you should definitely add a test for this.\n\nOn Thu, Feb 25, 2016 at 8:51 AM, laboger \u003cnotifications@github.com\u003e wrote:\n\n\u003e There is a ppc64(le) specific implementation of memmove in\n\u003e runtime/memmove_ppc64x.s which works well in some cases but found some\n\u003e cases where further improvements can be made and plan to work on those. On\n\u003e inspection I also have some concerns about the alignment assumptions.\n\u003e\n\u003e There are no alignment checks for the source and destination in this code.\n\u003e Is there an assumption when using the runtime.memmove function that these\n\u003e pointers will refer to data that is 8 byte aligned? If the length is \u003e= 8\n\u003e then it does ldu/stdu regardless of the alignment. I couldn't find any\n\u003e documentation stating that there is an expectation for the alignment of the\n\u003e source and destination with this function.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/14507\u003e.\n\u003e\n",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-25T16:58:23Z",
	"updated_at": "2016-02-25T16:58:23Z"
}
