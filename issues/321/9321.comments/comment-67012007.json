{
	"id": 67012007,
	"body": "It occurs even if the other goroutine is not runtime.Stack(). Extremely, it crashes with runtime.GC(), wow!\r\n\r\nIn src/runtime/mprof.go#L581, goroutine X does `acquirem` then `semacquire` `worldsema` without `releasem`.\r\nIf another goroutine Y has `worldsema`, goroutine X get back to the queue at `semacquire` and wait for `schedule`.\r\nBut goroutine X still holds `m-\u003elocks` so it crashes.\r\n\r\nI'm not sure for runtime, but it seems that it should `releasem` before calling `semacquire` and call `acquirem` again during runtime.Stack() func.\r\n",
	"user": {
		"login": "t-yuki",
		"id": 3804806,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-15T15:37:45Z",
	"updated_at": "2014-12-15T15:37:45Z"
}
