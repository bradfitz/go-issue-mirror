{
	"id": 164537749,
	"body": "\u003e But it doesn't yet explain the slow growth on tip.\r\n\r\nIt turns out there's simply a long, low-probability tail on how much memory is tied up in unfreed large stack spans. That means if you run the program long enough, you'll eventually have a single GC cycle that ties up over a GB in stack spans (if you were sufficiently unlucky, I don't think there's anything stopping this from happening early in an execution).\r\n\r\nI added a debug print to report how much memory in large stack spans is being freed during mark termination and here's what the distribution looked like after just two minutes:\r\n\r\n```\r\nN 691  sum 45753  mean 66.2127  gmean 54.7903  std dev 51.492  variance 2651.43\r\n\r\n     min 10\r\n   1%ile 17\r\n   5%ile 27\r\n  25%ile 38\r\n  median 49\r\n  75%ile 71\r\n  95%ile 180.7\r\n  99%ile 267.767\r\n     max 400\r\n\r\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠒⠲⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡖ 0.026\r\n⠀⠀⠀⠀⠀⠀⠀⠀⢀⠞⠁⠀⠀⠉⠳⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇\r\n⠠⠤⠤⠤⠤⠤⠴⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠉⠓⠒⠒⠒⠒⠒⠢⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠄⠧ 0.000\r\n⠈⠉⠉⠋⠉⠉⠉⠉⠉⠉⠉⠉⠉⠙⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠋⠉⠉⠉⠉⠉⠉⠉⠉⠉⠋⠉⠉⠉⠉⠉⠉⠉⠉⠉⠙⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠋⠉⠉⠉⠉⠉⠉⠉⠉⠉⠙⠉⠉⠉⠁\r\n   0        50         100       150       200        250       300\r\n```",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-14T19:40:13Z",
	"updated_at": "2015-12-14T19:40:13Z"
}
