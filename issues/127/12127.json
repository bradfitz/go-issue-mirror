{
	"id": 100699597,
	"number": 12127,
	"state": "open",
	"title": "proposal: math/big: Decimal",
	"body": "Motivation\r\n==========\r\nIn many areas, especially in commerce, exact values need to be processed and the inputs are commonly decimal. Unfortunately, decimal values cannot be represented accurately using binary floating points.\r\n\r\nSince Go can be used in many places where accurate decimal arithmetic is required it seems reasonable to support it as part of the standard library.\r\n\r\nProposal\r\n========\r\nThe idea is to add math/big Decimal data type that supports integer, fixed-point, and floating-point decimal numbers.\r\n\r\nThe Decimal API is consistent with Float API when possible.\r\n\r\nInternal representation\r\n-----------------------\r\nA Decimal consists of a boolean sign, an arbitrary precision integer unscaled value and a 32-bit integer scale. The value of the number represented by the Decimal is therefore `sign × unscaledValue × 10^(-scale)`.\r\n\r\nA Decimal (similar to Float) may also be zero (+0, -0) or infinite (+Inf, -Inf). NaN values are not supported.\r\n\r\nEach Decimal value also has a precision, rounding mode, and accuracy. The precision is the maximum number of decimal digits available to represent the value. The rounding mode specifies how a result should be rounded to fit into the unscaled value, and accuracy describes the rounding error with respect to the exact result.\r\n\r\nThe same numerical value can have different representations (with different scales). The rules of arithmetic and rounding specify both the numerical result and the scale used in the result's representation.\r\n\r\nOperations\r\n----------\r\nThe Decimal type provides operations for\r\n- arithmetic: Add, Sub, Mul, Div, Quo, Rem, QuoRem, Abs\r\n- scale manipulation: Scale, SetScale\r\n- control over rounding behaviour: Mode, SetMode, \r\n- control over precision and accuracy: Prec, SetPrec, Acc\r\n- comparison: Cmp, TotalCmp (http://speleotrove.com/decimal/decifaq4.html#order)\r\n- format conversion: to/from int64, uint64, float32, float64, big.Float, big.Int, big.Rat\r\n- to/from string conversion\r\n\r\nImplementation of the above operations closely follows the [General Decimal Arithmetic Specification](http://speleotrove.com/decimal/decarith.html). This specification defines a decimal arithmetic which meets the requirements of commercial, financial, and human-oriented applications. It also matches the decimal arithmetic in the IEEE 754 Standard for Floating Point Arithmetic.\r\n\r\nTest cases can be based on [General Decimal Arithmetic \r\nTestcases](http://speleotrove.com/decimal/dectest.html).\r\n\r\nIEEE 754 fixed-point types\r\n--------------------------\r\nBy setting the desired precision to 7, 16 or 34 and using matching rounding mode (typically ToNearestEven), Decimal operations produce the same results as the corresponding decimal32, decimal64 or decimal128 IEEE-754 arithmetic for operands that correspond to normal (i.e., not denormal) decimal32, decimal64 or decimal128 numbers.\r\n\r\nQ\u0026A\r\n---\r\n1. **Why floating point?**  \r\n    See https://www.python.org/dev/peps/pep-0327/#why-floating-point\r\n2. **Why are trailing fractional zeros important?**   \r\n    See http://speleotrove.com/decimal/decifaq1.html#tzeros and http://speleotrove.com/decimal/decifaq4.html#unnari\r\n3. **How much precision and range is needed for decimal arithmetic?**  \r\n    See http://speleotrove.com/decimal/decifaq1.html#needed\r\n   In particular there is one example where decimal128 doesn't provide enough precision\r\n4. **Why arbitrary precision?**  \r\n    See p3.  \r\n    Other use-cases: big.Float to string conversion, representing arbitrary precision numbers that are supported in other systems such as databases (for example PostgreSQL decimal can store up to 131072 digits before the decimal point and up to 16383 digits after the decimal point)\r\n\r\n\r\nExisting packages\r\n=================\r\n- Python: [PEP-0327](https://www.python.org/dev/peps/pep-0327/#abstract), [decimal](https://docs.python.org/3/library/decimal.html)\r\n- Java: [JSR 13](https://www.jcp.org/en/jsr/detail?id=13), [BigDecimal](http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html)\r\n- ECMA Script proposal: http://wiki.ecmascript.org/doku.php?id=proposals:decimal",
	"user": {
		"login": "kostya-sh",
		"id": 7126275,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 46,
	"created_at": "2015-08-13T06:31:47Z",
	"updated_at": "2016-08-31T00:24:09Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	}
}
