{
	"id": 75484445,
	"body": "It's broken and misleading.  If Go can't parse the timezone as provided in its own example format, it should throw an error.  This points out the inherent limitations of the example-driven format.  I think this problem wouldn't exist if Go supported token-based time parsing.\r\n\r\n[This example](http://play.golang.org/p/MWc0XNnIwd) shows that even though `time.Parse` sets the location to `PST`, the offset is broken:\r\n\r\n```\r\npackage main\r\n\r\nimport \"fmt\"\r\nimport \"time\"\r\n\r\nfunc main() {\r\n\tstr := \"Mon, 2 Jan 2006 15:04:05 MST\"\r\n\t// Mon Jan 2 15:04:05 MST 2006\r\n\tt, err := time.Parse(\"Mon, _2 Jan 2006 15:04:05 MST\", str)\r\n\tfmt.Printf(\"t: %v, err: %v\", t, err)\r\n}\r\n```\r\n\r\nThe output is\r\n```\r\nt: 2006-01-02 15:04:05 +0000 MST, err: \u003cnil\u003e\r\n```\r\n\r\nSo `time.Parse` can't even get its example timestamp correct.  This means there's a whole class of timestamps that Go can't parse (rss pubDates for example), despite defining those very formats as constants in the `time` package!",
	"user": {
		"login": "blalor",
		"id": 109915,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-23T03:18:08Z",
	"updated_at": "2015-02-23T03:18:08Z"
}
