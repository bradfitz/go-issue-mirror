{
	"id": 66098201,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eLooks like it is the allocations at fmt_test.go:872 for the Fprintf interface arguments\n(7, 8, and 9).\n\nfmt_test.go:872:\t{0, `Fprintf(buf, \"%x %x %x\")`, func() { mallocBuf.Reset();\nFprintf(\u0026mallocBuf, \"%x %x %x\", 7, 8, 9) }},\n\n\ntracealloc(0xc20806d910, 0x10, int)\ngoroutine 5 [running]:\nruntime.gomallocgc(0x10, 0x518000, 0x1, 0xc20806d908)\n        /usr/local/google/home/khr/sandbox/go-ro/src/pkg/runtime/malloc.go:317 +0x229 fp=0xc208037ce0 sp=0xc208037c48\nruntime.newobject(0x518000, 0xc208037d98)\n        /usr/local/google/home/khr/sandbox/go-ro/src/pkg/runtime/malloc.go:348 +0x4a fp=0xc208037d08 sp=0xc208037ce0\nruntime.convT2E(0x518000, 0xc208037d90, 0x0, 0x0)\n        /usr/local/google/home/khr/sandbox/go-ro/src/pkg/runtime/iface.go:141 +0xac fp=0xc208037d40 sp=0xc208037d08\nfmt_test.funcÂ·007()\n        /usr/local/google/home/khr/sandbox/go-ro/src/pkg/fmt/fmt_test.go:872 +0x130 fp=0xc208037e18 sp=0xc208037d40\ntesting.AllocsPerRun(0x64, 0x5c2158, 0x0)\n        /usr/local/google/home/khr/sandbox/go-ro/src/pkg/testing/allocs.go:33 +0xc0 fp=0xc208037e48 sp=0xc208037e18\nfmt_test.TestCountMallocs(0xc20805c090)\n        /usr/local/google/home/khr/sandbox/go-ro/src/pkg/fmt/fmt_test.go:886 +0x271 fp=0xc208037f68 sp=0xc208037e48\ntesting.tRunner(0xc20805c090, 0x649440)\n        /usr/local/google/home/khr/sandbox/go-ro/src/pkg/testing/testing.go:427 +0x8b fp=0xc208037f98 sp=0xc208037f68\nruntime.goexit()\n        /usr/local/google/home/khr/sandbox/go-ro/src/pkg/runtime/proc.c:1625 fp=0xc208037fa0 sp=0xc208037f98\ncreated by testing.RunTests\n        /usr/local/google/home/khr/sandbox/go-ro/src/pkg/testing/testing.go:509 +0x914\n\nSo maybe this test is just wrong after our interfaces-are-always-pointers conversion. \nProbably other such tests are only succeeding by chance.\n\nThere are 150 allocations for 100 iterations.  That's what I expect when allocating 3\n8-byte items per iteration (tinyalloc is in play here, with one 16-byte alloc every\nother call).\u003c/pre\u003e",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-08-29T19:32:09Z",
	"updated_at": "2014-12-08T10:47:50Z"
}
