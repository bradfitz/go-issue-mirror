{
	"id": 180519107,
	"number": 17318,
	"state": "open",
	"title": "cmd/compile: escaping closure incorrectly allocated on the stack",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n### What version of Go are you using (`go version`)?\r\ngo version go1.7.1 darwin/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/jacob/Projects/gocode\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/Cellar/go/1.7.1/libexec\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.7.1/libexec/pkg/tool/darwin_amd64\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/d6/ynnsnz1x4m9188yk1r8xns3w0000gn/T/go-build882056681=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\n\r\nAlso tested with same configuration using GOARCH=386 on Darwin (issue reproducible) and on windows/386 in a virtual machine (issue NOT reproducible).\r\n\r\n### What did you do?\r\nAttempted to pass a closure as a callback to another function that generates values to be processed and invokes the callback with these values (see demo below).\r\n\r\n### What did you expect to see?\r\n\r\nThe program should run without issue.\r\n\r\n### What did you see instead?\r\n\r\nAfter an indeterminate number of invocations, the closure seems to be invalidated, and invoking it as a callback generates a segmentation fault. Alternatively, with optimizations disabled, the garbage collector indicates that there is a reference to an invalid block of memory (which to my novice reading seems to be pointing at the closure).\r\n\r\nA package demonstrating this problem (and including stack traces) is available here:\r\n\r\nhttps://github.com/havoc-io/go-closure-issue\r\n\r\nI apologize in advance for not being able to produce a more minimal test case - I really did try. This package is already extracted from a larger program.\r\n\r\nInstructions and more details are included in the repository, but cloning and running `go test` (possibly 3 or 4 times) should reproduce the error. \r\n\r\nNone of the code here uses unsafe or cgo, nor is the callback ever changed after defined.  Using `GOGC=off` seems to stop the issue.  Disabling SSA makes no difference.  My suspicion is that the GC is somehow not realizing that the closure is referenced and is reclaiming it (potentially due to the complex structure of the function invoking the callback), but I am not even remotely an expert on Go's internals or GC implementation.\r\n\r\nPerhaps @kardianos can chime in since he wrote the underlying package.\r\n",
	"user": {
		"login": "havoc-io",
		"id": 1358139,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsInvestigation"
		}
	],
	"assignee": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"comments": 13,
	"created_at": "2016-10-02T15:58:22Z",
	"updated_at": "2016-10-08T21:05:11Z",
	"milestone": {
		"id": 1709364,
		"number": 39,
		"title": "Go1.8Early"
	}
}
