{
	"id": 51277890,
	"number": 1503,
	"state": "closed",
	"title": "go/printer: //-style comments must always be terminated with a newline",
	"body": "\u003cpre\u003eEven in the presence of incorrect position information, the go/printer should always\nformat //-style comments with a newline at the end. Otherwise, illegal Go programs can\nbe the result. The following is a test case.\n\npackage main\n\nimport (\n\t\u0026quot;bytes\u0026quot;\n\t\u0026quot;fmt\u0026quot;\n\t\u0026quot;go/parser\u0026quot;\n\t\u0026quot;go/printer\u0026quot;\n\t\u0026quot;go/token\u0026quot;\n)\n\nconst src =\n`// comment 1\n// comment 2\n// comment 3\npackage main\n`\n\nfunc newlines(s string) (n int) {\n\tfor _, b := range s {\n\t\tif b == '\\n' {\n\t\t\tn++\n\t\t}\n\t}\n\treturn\n}\n\n\nfunc main() {\n\tfset := token.NewFileSet()\n\tast1, err1 := parser.ParseFile(fset, \u0026quot;\u0026quot;, src, parser.ParseComments)\n\tif err1 != nil {\n\t\tpanic(err1)\n\t}\n\n\tvar buf bytes.Buffer\n\t// Comments are not properly terminated when using a new (empty)\n\t// file set. Without the assignment below, the code works.\n\tfset = token.NewFileSet()\n\tprinter.Fprint(\u0026amp;buf, fset, ast1)\n\n\tnsrc := newlines(src)\n\tnbuf := newlines(buf.String())\n\tif nsrc != nbuf {\n\t\tfmt.Printf(\u0026quot;got %d, expected %d\\n\u0026quot;, nbuf, nsrc)\n\t}\n}\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2014-12-08T10:08:37Z",
	"created_at": "2011-02-11T21:27:29Z",
	"updated_at": "2016-06-24T19:25:11Z"
}
