{
	"id": 66066004,
	"body": "\u003ca id=\"c20\"\u003e\u003c/a\u003eComment 20 by **germanium@gmx.us**:\n\n\u003cpre\u003eA lot of existing Read callers make one big assumption: that if err != nil you have got\nall the data you can possibly get from there (maybe you really can get more data, or\nmaybe the Reader can be reset someway, but if you are dealing with a generic io.Reader\nyou can't know that).\n\nI think this assumption should be in the docs.\nWe can't have unspecified transient errors and expect io.Reader users to handle them\ncorrectly. Even with specification I don't think the added complexity would be worth it,\nand a lot of code would need fixing. E.g. each composite Reader would need to manage\ntransient errors from the underlying Reader.\n\nA reader that returns (0, nil) doesn't necessarily break ReadFull or similar code: in\nthe worst case it introduces busy-waiting.\nCurrently the only way for a non-blocking reader to be used as an io.Reader is by\nreturning (0, nil) when not ready, which means busy-waiting in Read loops.\nIf busy-waiting is not acceptable we may as well require that io.Readers are blocking. I\nthink you can abstract Readers more effectively if you abstract blocking and\nnon-blocking separately or if the abstraction always behave as blocking.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-06-11T02:45:58Z",
	"updated_at": "2014-12-08T10:18:11Z"
}
