{
	"id": 120288903,
	"number": 13472,
	"state": "closed",
	"title": "cmd/compile: asymmetric constant arithmetic leads to hilbert test failure",
	"body": "hilbert.go (attached below) computes the product H*H' of a 4x4 Hilbert matrix H and its inverse H' using constant arithmetic only. The product should be the identity matrix I. The Hilbert matrix is famously ill-conditioned leading quickly to unrecoverable floating-point errors even given the large (but limited) mantissa size used for constant arithmetic by the compiler.\r\n\r\nThat said, the matrices are symmetric and thus H*H' should lead to a sequence of totally symmetric computations (but for opposite signs). However, this test fails with a non-symmetric error, indicating that the two computations for elements (3, 4) and (4, 3) are not symmetric.\r\n```\r\n$ go run hilbert.go \r\n+1.000000e+000 +0.000000e+000 +0.000000e+000 +0.000000e+000\r\n+0.000000e+000 +1.000000e+000 +0.000000e+000 +0.000000e+000\r\n+0.000000e+000 +0.000000e+000 +1.000000e+000 +3.818670e-152\r\n+0.000000e+000 +0.000000e+000 +0.000000e+000 +1.000000e+000\r\n```\r\nInvestigate if this is a compiler or big.Float issue.\r\n\r\n```\r\n// WARNING: GENERATED FILE - DO NOT MODIFY MANUALLY!\r\n// (To generate, in go/types directory: go test -run=Hilbert -H=4 -out=\"hilbert.go\")\r\n\r\n// This program tests arbitrary precision constant arithmetic\r\n// by generating the constant elements of a Hilbert matrix H,\r\n// its inverse I, and the product P = H*I. The product should\r\n// be the identity matrix.\r\npackage main\r\n\r\nfunc main() {\r\n\tif !ok {\r\n\t\tprintProduct()\r\n\t\treturn\r\n\t}\r\n\tprintln(\"PASS\")\r\n}\r\n\r\n// Hilbert matrix, n = 4\r\nconst (\r\n\th0_0, h0_1, h0_2, h0_3 = 1.0/(iota + 1), 1.0/(iota + 2), 1.0/(iota + 3), 1.0/(iota + 4)\r\n\th1_0, h1_1, h1_2, h1_3\r\n\th2_0, h2_1, h2_2, h2_3\r\n\th3_0, h3_1, h3_2, h3_3\r\n)\r\n\r\n// Inverse Hilbert matrix\r\nconst (\r\n\ti0_0 = +1 * b4_3 * b4_3 * b0_0 * b0_0\r\n\ti0_1 = -2 * b4_2 * b5_3 * b1_0 * b1_0\r\n\ti0_2 = +3 * b4_1 * b6_3 * b2_0 * b2_0\r\n\ti0_3 = -4 * b4_0 * b7_3 * b3_0 * b3_0\r\n\r\n\ti1_0 = -2 * b5_3 * b4_2 * b1_1 * b1_1\r\n\ti1_1 = +3 * b5_2 * b5_2 * b2_1 * b2_1\r\n\ti1_2 = -4 * b5_1 * b6_2 * b3_1 * b3_1\r\n\ti1_3 = +5 * b5_0 * b7_2 * b4_1 * b4_1\r\n\r\n\ti2_0 = +3 * b6_3 * b4_1 * b2_2 * b2_2\r\n\ti2_1 = -4 * b6_2 * b5_1 * b3_2 * b3_2\r\n\ti2_2 = +5 * b6_1 * b6_1 * b4_2 * b4_2\r\n\ti2_3 = -6 * b6_0 * b7_1 * b5_2 * b5_2\r\n\r\n\ti3_0 = -4 * b7_3 * b4_0 * b3_3 * b3_3\r\n\ti3_1 = +5 * b7_2 * b5_0 * b4_3 * b4_3\r\n\ti3_2 = -6 * b7_1 * b6_0 * b5_3 * b5_3\r\n\ti3_3 = +7 * b7_0 * b7_0 * b6_3 * b6_3\r\n\r\n)\r\n\r\n// Product matrix\r\nconst (\r\n\tp0_0 = h0_0*i0_0 + h0_1*i1_0 + h0_2*i2_0 + h0_3*i3_0\r\n\tp0_1 = h0_0*i0_1 + h0_1*i1_1 + h0_2*i2_1 + h0_3*i3_1\r\n\tp0_2 = h0_0*i0_2 + h0_1*i1_2 + h0_2*i2_2 + h0_3*i3_2\r\n\tp0_3 = h0_0*i0_3 + h0_1*i1_3 + h0_2*i2_3 + h0_3*i3_3\r\n\r\n\tp1_0 = h1_0*i0_0 + h1_1*i1_0 + h1_2*i2_0 + h1_3*i3_0\r\n\tp1_1 = h1_0*i0_1 + h1_1*i1_1 + h1_2*i2_1 + h1_3*i3_1\r\n\tp1_2 = h1_0*i0_2 + h1_1*i1_2 + h1_2*i2_2 + h1_3*i3_2\r\n\tp1_3 = h1_0*i0_3 + h1_1*i1_3 + h1_2*i2_3 + h1_3*i3_3\r\n\r\n\tp2_0 = h2_0*i0_0 + h2_1*i1_0 + h2_2*i2_0 + h2_3*i3_0\r\n\tp2_1 = h2_0*i0_1 + h2_1*i1_1 + h2_2*i2_1 + h2_3*i3_1\r\n\tp2_2 = h2_0*i0_2 + h2_1*i1_2 + h2_2*i2_2 + h2_3*i3_2\r\n\tp2_3 = h2_0*i0_3 + h2_1*i1_3 + h2_2*i2_3 + h2_3*i3_3\r\n\r\n\tp3_0 = h3_0*i0_0 + h3_1*i1_0 + h3_2*i2_0 + h3_3*i3_0\r\n\tp3_1 = h3_0*i0_1 + h3_1*i1_1 + h3_2*i2_1 + h3_3*i3_1\r\n\tp3_2 = h3_0*i0_2 + h3_1*i1_2 + h3_2*i2_2 + h3_3*i3_2\r\n\tp3_3 = h3_0*i0_3 + h3_1*i1_3 + h3_2*i2_3 + h3_3*i3_3\r\n\r\n)\r\n\r\n// Verify that product is the identity matrix\r\nconst ok =\r\n\tp0_0 == 1 \u0026\u0026 p0_1 == 0 \u0026\u0026 p0_2 == 0 \u0026\u0026 p0_3 == 0 \u0026\u0026\r\n\tp1_0 == 0 \u0026\u0026 p1_1 == 1 \u0026\u0026 p1_2 == 0 \u0026\u0026 p1_3 == 0 \u0026\u0026\r\n\tp2_0 == 0 \u0026\u0026 p2_1 == 0 \u0026\u0026 p2_2 == 1 \u0026\u0026 p2_3 == 0 \u0026\u0026\r\n\tp3_0 == 0 \u0026\u0026 p3_1 == 0 \u0026\u0026 p3_2 == 0 \u0026\u0026 p3_3 == 1 \u0026\u0026\r\n\ttrue\r\n\r\nfunc printProduct() {\r\n\tprintln(p0_0, p0_1, p0_2, p0_3)\r\n\tprintln(p1_0, p1_1, p1_2, p1_3)\r\n\tprintln(p2_0, p2_1, p2_2, p2_3)\r\n\tprintln(p3_0, p3_1, p3_2, p3_3)\r\n}\r\n\r\n// Binomials\r\nconst (\r\n\tb0_0 = f0 / (f0*f0)\r\n\r\n\tb1_0 = f1 / (f0*f1)\r\n\tb1_1 = f1 / (f1*f0)\r\n\r\n\tb2_0 = f2 / (f0*f2)\r\n\tb2_1 = f2 / (f1*f1)\r\n\tb2_2 = f2 / (f2*f0)\r\n\r\n\tb3_0 = f3 / (f0*f3)\r\n\tb3_1 = f3 / (f1*f2)\r\n\tb3_2 = f3 / (f2*f1)\r\n\tb3_3 = f3 / (f3*f0)\r\n\r\n\tb4_0 = f4 / (f0*f4)\r\n\tb4_1 = f4 / (f1*f3)\r\n\tb4_2 = f4 / (f2*f2)\r\n\tb4_3 = f4 / (f3*f1)\r\n\tb4_4 = f4 / (f4*f0)\r\n\r\n\tb5_0 = f5 / (f0*f5)\r\n\tb5_1 = f5 / (f1*f4)\r\n\tb5_2 = f5 / (f2*f3)\r\n\tb5_3 = f5 / (f3*f2)\r\n\tb5_4 = f5 / (f4*f1)\r\n\tb5_5 = f5 / (f5*f0)\r\n\r\n\tb6_0 = f6 / (f0*f6)\r\n\tb6_1 = f6 / (f1*f5)\r\n\tb6_2 = f6 / (f2*f4)\r\n\tb6_3 = f6 / (f3*f3)\r\n\tb6_4 = f6 / (f4*f2)\r\n\tb6_5 = f6 / (f5*f1)\r\n\tb6_6 = f6 / (f6*f0)\r\n\r\n\tb7_0 = f7 / (f0*f7)\r\n\tb7_1 = f7 / (f1*f6)\r\n\tb7_2 = f7 / (f2*f5)\r\n\tb7_3 = f7 / (f3*f4)\r\n\tb7_4 = f7 / (f4*f3)\r\n\tb7_5 = f7 / (f5*f2)\r\n\tb7_6 = f7 / (f6*f1)\r\n\tb7_7 = f7 / (f7*f0)\r\n)\r\n\r\n// Factorials\r\nconst (\r\n\tf0 = 1\r\n\tf1 = 1\r\n\tf2 = f1 * 2\r\n\tf3 = f2 * 3\r\n\tf4 = f3 * 4\r\n\tf5 = f4 * 5\r\n\tf6 = f5 * 6\r\n\tf7 = f6 * 7\r\n)\r\n```",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2016-01-07T22:59:52Z",
	"created_at": "2015-12-03T22:45:12Z",
	"updated_at": "2016-01-07T23:42:12Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
