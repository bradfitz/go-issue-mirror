{
	"id": 66086056,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eThis is (of course) clang's fault. Here is an interesting dump:\n\ng% cat x.c\ntypedef struct s1 {\n\tstruct s2 {\n\t\tint mode;\n\t} loops[16];\n} s1;\n\ntypedef struct s3 {\n\tstruct {\n\t\tint mode;\n\t} loops[16];\n} s3;\n\ns1 x;\ns3 y;\n\ng% clang -ggdb -c x.c\ng% dwarfdump x.o\n----------------------------------------------------------------------\n File: x.o (x86_64)\n----------------------------------------------------------------------\n.debug_info contents:\n\n0x00000000: Compile Unit: length = 0x000000e3  version = 0x0002  abbr_offset =\n0x00000000  addr_size = 0x08  (next CU at 0x000000e7)\n\n0x0000000b: TAG_compile_unit [1] *\n             AT_producer( \"Apple clang version 4.1 (tags/Apple/clang-421.11.66) (based on LLVM 3.1svn)\" )\n             AT_language( DW_LANG_C99 )\n             AT_name( \"x.c\" )\n             AT_entry_pc( 0x0000000000000000 )\n             AT_stmt_list( 0x00000000 )\n             AT_comp_dir( \"/Users/rsc\" )\n\n0x00000026:     TAG_base_type [2]  \n                 AT_name( \"int\" )\n                 AT_encoding( DW_ATE_signed )\n                 AT_byte_size( 0x04 )\n\n0x0000002d:     TAG_structure_type [3] *\n                 AT_name( \"s2\" )\n                 AT_byte_size( 0x04 )\n                 AT_decl_file( \"/Users/rsc/x.c\" )\n                 AT_decl_line( 2 )\n\n0x00000035:         TAG_member [4]  \n                     AT_name( \"mode\" )\n                     AT_type( {0x00000026} ( int ) )\n                     AT_decl_file( \"/Users/rsc/x.c\" )\n                     AT_decl_line( 3 )\n                     AT_data_member_location( +0 )\n                     AT_accessibility( DW_ACCESS_public )\n\n0x00000044:         NULL\n\n0x00000045:     TAG_base_type [5]  \n                 AT_byte_size( 0x04 )\n                 AT_encoding( DW_ATE_signed )\n\n0x00000048:     TAG_array_type [6] *\n                 AT_type( {0x0000002d} ( s2 ) )\n\n0x0000004d:         TAG_subrange_type [7]  \n                     AT_type( {0x00000045} ( base  ) )\n                     AT_upper_bound( 0x0f )\n\n0x00000053:         NULL\n\n0x00000054:     TAG_structure_type [3] *\n                 AT_name( \"s1\" )\n                 AT_byte_size( 0x40 )\n                 AT_decl_file( \"/Users/rsc/x.c\" )\n                 AT_decl_line( 1 )\n\n0x0000005c:         TAG_member [4]  \n                     AT_name( \"loops\" )\n                     AT_type( {0x00000048} ( s2[] ) )\n                     AT_decl_file( \"/Users/rsc/x.c\" )\n                     AT_decl_line( 4 )\n                     AT_data_member_location( +0 )\n                     AT_accessibility( DW_ACCESS_public )\n\n0x0000006b:         NULL\n\n0x0000006c:     TAG_typedef [8]  \n                 AT_type( {0x00000054} ( s1 ) )\n                 AT_name( \"s1\" )\n                 AT_decl_file( \"/Users/rsc/x.c\" )\n                 AT_decl_line( 5 )\n\n0x00000077:     TAG_variable [9]  \n                 AT_name( \"x\" )\n                 AT_type( {0x0000006c} ( s1 ) )\n                 AT_external( 0x01 )\n                 AT_decl_file( \"/Users/rsc/x.c\" )\n                 AT_decl_line( 13 )\n                 AT_location( [0x0000000000000000] )\n\n0x0000008d:     TAG_array_type [6] *\n                 AT_type( {0x000000a1} ( struct  ) )\n\n0x00000092:         TAG_subrange_type [7]  \n                     AT_type( {0x00000045} ( base  ) )\n                     AT_upper_bound( 0x0f )\n\n0x00000098:         NULL\n\n0x00000099:     TAG_structure_type [3] *\n                 AT_name( \"s3\" )\n                 AT_byte_size( 0x40 )\n                 AT_decl_file( \"/Users/rsc/x.c\" )\n                 AT_decl_line( 7 )\n\n0x000000a1:         TAG_structure_type [10] *\n                     AT_byte_size( 0x04 )\n                     AT_decl_file( \"/Users/rsc/x.c\" )\n                     AT_decl_line( 8 )\n\n0x000000a5:             TAG_member [4]  \n                         AT_name( \"mode\" )\n                         AT_type( {0x00000026} ( int ) )\n                         AT_decl_file( \"/Users/rsc/x.c\" )\n                         AT_decl_line( 9 )\n                         AT_data_member_location( +0 )\n                         AT_accessibility( DW_ACCESS_public )\n\n0x000000b4:             NULL\n\n0x000000b5:         TAG_member [4]  \n                     AT_name( \"loops\" )\n                     AT_type( {0x0000008d} ( struct [] ) )\n                     AT_decl_file( \"/Users/rsc/x.c\" )\n                     AT_decl_line( 10 )\n                     AT_data_member_location( +0 )\n                     AT_accessibility( DW_ACCESS_public )\n\n0x000000c4:         NULL\n\n0x000000c5:     TAG_typedef [8]  \n                 AT_type( {0x00000099} ( s3 ) )\n                 AT_name( \"s3\" )\n                 AT_decl_file( \"/Users/rsc/x.c\" )\n                 AT_decl_line( 11 )\n\n0x000000d0:     TAG_variable [9]  \n                 AT_name( \"y\" )\n                 AT_type( {0x000000c5} ( s3 ) )\n                 AT_external( 0x01 )\n                 AT_decl_file( \"/Users/rsc/x.c\" )\n                 AT_decl_line( 14 )\n                 AT_location( [0x0000000000000000] )\n\n0x000000e6:     NULL\n\ng% \n\nThe named version (s1/s2) is fine: s1 is at 0x54...0x6b and s2 is at 0x2d...0x44. The\nunnamed version (s3) contains the anonymous inner struct definition at offsets\n0xa1...0xb4 nested *inside* the outer struct definition at 0x99...0xc4. Despite this,\nthe array of 16 of those structs has a type outside the outer struct (0x8d...0x98). We\ncould argue about whether it's even valid to place the inner struct where it is, but we\ncan handle it now that we know to expect it.\n\nSigh.\u003c/pre\u003e\n\n_Labels changed: added **go1.2**, removed **go1.2maybe**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-09T00:59:54Z",
	"updated_at": "2014-12-08T10:35:44Z"
}
