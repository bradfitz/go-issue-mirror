{
	"id": 151469014,
	"number": 15472,
	"state": "closed",
	"title": "net/http: http.ListenAndServeTLS lowercasing request header keys",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n```\r\ngo version go1.6.2 darwin/amd64\r\n```\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/Users/dean/.go/bin\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/dean/.go\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/Cellar/go/1.6.2/libexec\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.6.2/libexec/pkg/tool/darwin_amd64\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n3. What did you do?\r\n\r\nunfortunately I could not make a runnable example, a valid SSL Certificate seems to be needed to recreate this issue, using:\r\n\r\n```\r\ntr := \u0026http.Transport{\r\n\tTLSClientConfig: \u0026tls.Config{InsecureSkipVerify: true},\r\n}\r\n\r\nclient := \u0026http.Client{Transport: tr}\r\n\r\nor\r\n\r\ntlsConfig := \u0026tls.Config{\r\n\tCertificates: make([]tls.Certificate, 1),\r\n}\r\n\r\ntlsConfig.Certificates[0], err = tls.X509KeyPair([]byte(httpPem), []byte(httpKey))\r\nif err != nil {\r\n\tlog.Fatal(err)\r\n}\r\nserver = \u0026http.Server{Addr: port, Handler: handler, TLSConfig: tlsConfig}\r\nserver.ListenAndServeTLS(\"\",\"\")\r\n```\r\nthe issue does not occur, only using the http.ListenAndServerTLS that I could find so far. below is what causes the issue (need to use your own Cretificates + URL.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"errors\"\r\n\t\"fmt\"\r\n\t\"log\"\r\n\t\"net/http\"\r\n\t\"time\"\r\n)\r\n\r\nfunc main() {\r\n\tgo server()\r\n\r\n\ttime.Sleep(3000)\r\n\r\n\treq, err := http.NewRequest(\"GET\", \"https://localhost:8080\", nil)\r\n\tif err != nil {\r\n\t\tlog.Fatal(errors.New(\"Error Creating Request:\" + err.Error()))\r\n\t}\r\n\r\n\treq.Header.Set(\"UPDATE_API_KEY\", \"Efewfjnewjkfewjkfew\")\r\n\r\n\t// tr := \u0026http.Transport{\r\n\t// \tTLSClientConfig: \u0026tls.Config{InsecureSkipVerify: true},\r\n\t// }\r\n\r\n\t// client := \u0026http.Client{Transport: tr}\r\n\r\n\t// This issue is very specific, using the code above actually works as expected\r\n\tclient := \u0026http.Client{}\r\n\r\n\t_, err = client.Do(req)\r\n\tif err != nil {\r\n\t\tlog.Fatal(fmt.Sprint(\"ERROR Fetching Updates:\", err))\r\n\t}\r\n}\r\n\r\nfunc server() {\r\n\r\n\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n\t\tlog.Println(r.Header)\r\n\t})\r\n\r\n\thttp.ListenAndServeTLS(\":8080\", \"path to certFile\", \"path to keyFile\", handler)\r\n}\r\n```\r\n\r\nGo 1.6 does not have this issue, either patch 1.6.1 or 1.6.2 caused this.\r\n\r\n4. What did you expect to see?\r\n```\r\nmap[User-Agent:[Go-http-client/1.1] UPDATE_API_KEY:[Efewfjnewjkfewjkfew] Accept-Encoding:[gzip]]\r\n\r\nmap key of \"UPDATE_API_KEY\" is correct\r\n```\r\n5. What did you see instead?\r\n```\r\nmap[Accept-Encoding:[gzip] User-Agent:[Go-http-client/2.0] update_api_key:[Efewfjnewjkfewjkfew]]\r\n\r\nmap key of \"update_api_key\" is not correct\r\n```",
	"user": {
		"login": "joeybloggs",
		"id": 8068371,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2016-04-27T19:52:44Z",
	"created_at": "2016-04-27T19:19:55Z",
	"updated_at": "2016-04-27T19:52:44Z"
}
