{
	"id": 169027689,
	"number": 16581,
	"state": "open",
	"title": "x/net/http2: rename and export Transport's t1 field",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\n    go version go1.7rc4 darwin/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\n    GOARCH=\"amd64\"\r\n    GOHOSTARCH=\"amd64\"\r\n    GOHOSTOS=\"darwin\"\r\n    GOOS=\"darwin\"\r\n\r\n3. What did you do?\r\n\r\n    Directly use an `http2.Transport` to set its `AllowHTTP` field to true, to enable HTTP/2 over HTTP (and set DialTLS accordingly, as mentioned here: https://github.com/golang/go/issues/14141#issuecomment-219212895).\r\n\r\n4. What did you expect to see?\r\n\r\n    Have access to the same rich set of configuration options as are available on `http.Transport`.\r\n\r\n5. What did you see instead?\r\n\r\n    Many configuration options from `http.Transport` are not available on `http2.Transport` (e.g. controlling idle connections in the ClientConnPool).\r\n\r\nAs discussed on golang-dev mailing list (https://groups.google.com/forum/#!topic/golang-dev/HmqDsLpTywk), as it currently stands, if we have to directly use the `http2.Transport`, we have to give up on a number of configuration options that are present only on `http.Transport`. @bradfitz suggested to rename and export the `http2.Transport.t1` field to fix this.\r\n",
	"user": {
		"login": "PuerkitoBio",
		"id": 692384,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"created_at": "2016-08-03T01:36:01Z",
	"updated_at": "2016-08-15T19:27:09Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
