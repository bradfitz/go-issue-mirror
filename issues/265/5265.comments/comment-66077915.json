{
	"id": 66077915,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eThe Go Programming Language Specification\nVersion of September 4, 2012\n\u003ca href=\"http://golang.org/ref/spec\"\u003ehttp://golang.org/ref/spec\u003c/a\u003e\n\nSource code representation\n\nSource code is Unicode text encoded in UTF-8. The text is not canonicalized, so a single\naccented code point is distinct from the same character constructed from combining an\naccent and a letter; those are treated as two code points. For simplicity, this document\nwill use the unqualified term character to refer to a Unicode code point in the source\ntext.\n\nEach code point is distinct; for instance, upper and lower case letters are different\ncharacters.\n\nImplementation restriction: For compatibility with other tools, a compiler may disallow\nthe NUL character (U+0000) in the source text. \n\n\n\nThe Unicode Standard, Version 6.2\nChapter 3 Conformance\n\u003ca href=\"http://www.unicode.org/versions/Unicode6.2.0/ch03.pdf\"\u003ehttp://www.unicode.org/versions/Unicode6.2.0/ch03.pdf\u003c/a\u003e\n\nD95\n\nWhen represented in UTF-8, the byte order mark [U+FEFF] turns into the byte sequence\n\u0026lt;EF BB BF\u0026gt;.\n\nD89\n\nIn a Unicode encoding form: A Unicode string is said to be in a particular Unicode\nencoding form if and only if it consists of a well-formed Unicode code unit sequence of\nthat Unicode encoding form.\n\n• A Unicode string consisting of a well-formed UTF-8 code unit sequence is said to be\nin UTF-8. Such a Unicode string is referred to as a valid UTF-8 string, or a UTF-8\nstring for short.\n\nD92\n\n• Any UTF-8 byte sequence that does not match the patterns listed in Table 3-7 is\nill-formed.\n\nTable 3-7 lists all of the byte sequences that are well-formed in UTF-8. \n\nTable 3-7. Well-Formed UTF-8 Byte Sequences [in pertinent part]\nCode Points        First Byte Second Byte Third Byte Fourth Byte\nU+E000..U+FFFF     EE..EF     80..BF      80..BF \n\n\n\nThe Unicode specification defines UTF-8. It looks to me as if the UTF-8 byte sequence\n\u0026lt;EF BB BF\u0026gt;, for the BOM U+FEFF code point, is defined by Unicode as a well-formed\nsequence of UTF-8 bytes. Therefore, I'm surprised that Go does not accept it. Are there\nany other well-formed sequences of UTF-8 bytes does Go not accept, apart from the NUL\ncharacter?\n\nDoes this break the Go 1 guarantee that \"Source code is Unicode text encoded in UTF-8.\",\nexcept that \"a compiler may disallow the NUL character (U+0000)\"?\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-04-11T00:24:50Z",
	"updated_at": "2014-12-22T06:24:21Z"
}
