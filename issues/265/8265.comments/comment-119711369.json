{
	"id": 119711369,
	"body": "Please, see this thread for reference: https://groups.google.com/forum/#!topic/golang-nuts/Jxbc0Aazzcw\r\n\r\nCould you at least provide a workaround? I ran into this issue myself trying to communicate with HP LaserJet printers (not all of them have negative serial numbers), over a LAN.\r\n\r\nThose printers present self signed certificates out of the factory, and thus fall into the category \"Non-conforming CAs\" I guess.\r\n\r\nOne can use a regular web browser to connect to the printer's web interface without any problems (once you override the security warnings)\r\n\r\nSecurity is secondary in my scenario.\r\n\r\nSome devices won't allow HTTP connections, or may redirect to HTTPS on certain pages. I still need to access those pages programmatically.\r\n\r\nMy simplified code looks like this.\r\n\r\n```go\r\nclient := \u0026http.Client{\r\n\tTransport: \u0026http.Transport{\r\n\t\tTLSClientConfig: \u0026tls.Config{InsecureSkipVerify: true},\r\n\t},\r\n}\r\n\r\nresp, err := client.Get(url)\r\nif err != nil {\r\n\treturn fmt.Errorf(\"Failed getting '%s': %s \", url, err)\r\n}\r\n```\r\n\r\nI feel the library could be less strict, considering `InsecureSkipVerify` is set to true, and that in practice other programs in the wild do not abort on such an anomaly.\r\n\r\nThe only solution so far is to recompile go after having edited it's source which is just messy/clunky.\r\n\r\nThanks for your feedback.",
	"user": {
		"login": "benjamin-thomas",
		"id": 1557738,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-08T19:49:09Z",
	"updated_at": "2015-07-08T19:49:09Z"
}
