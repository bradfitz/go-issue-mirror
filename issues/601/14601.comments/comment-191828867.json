{
	"id": 191828867,
	"body": "\u003e I hadn't considered closing on buffered channels, but I believe the proposal is still good.\r\n\r\nIf you do a receiver-side close, then when a future send fails, the sender can handle that failure by doing something else. But if you do a receiver-side close on a buffered channel, there are past sends into the buffer that _succeeded_ that are now effectively failing after the fact, unless the semantics is that you can close the receiver side of the channel and then still receive from it to drain the buffer. Certainly that's not the semantics of TCP sockets or Unix pipes.\r\n\r\n\u003e You don't have to look far to see great examples of the usefulness of bidirectional signalling. \r\n\r\nTrue, but you also don't have to work hard to create two channels.\r\n\r\n\u003e Can you imagine a world where you had to signal to a TCP server, or the other end of a unix pipe, that you were no longer going to be receiving data by using an out of band channel?\r\n\r\nIsn't that the world we live in? By default when the receiver closes its end of a TCP connection or Unix pipe, a future send on that connection causes the sender to be killed by a SIGPIPE. In general TCP connections are bidirectional (more like two channels), and most TCP-based protocols do use an explicit message to end the protocol instead of just closing the _receive_ side of one direction.\r\n\r\nThe analogy to TCP connections and Unix pipes is further confusing since they do not have the dup operation described in the proposal, unless you count giving each reader and writer its own fd (which is semantically a bit different).",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	},
	"created_at": "2016-03-03T16:06:56Z",
	"updated_at": "2016-03-03T16:06:56Z"
}
