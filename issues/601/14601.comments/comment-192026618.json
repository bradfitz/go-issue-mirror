{
	"id": 192026618,
	"body": "If the producer is sending on a buffered channel, it already can't make any assumptions about data that was successfully \"sent\" on the channel, since there are no guarantees anybody received or ever will receive it. Two way communication is already a requirement for a sender to guarantee that something sent down a channel was \"handled\" by a receiver, orthogonal to whether a channel is buffered or unbuffered (just because somebody received it, doesn't mean it was \"handled\"). I don't see how this proposal changes anything except to provide a convenient way for senders to know that nobody will ever receive again so don't bother continuing to produce.\r\n\r\nI concede that relating channels to sockets or pipes isn't a perfect analogy. However, I do feel that current channel semantics cause unnecessary friction, and people end up building up abstractions around them over and over again to facilitate producer cleanup. Considering the lack of generics, you end up with a ton of mostly non-reusable boilerplate littered all over the code which comes with all of the joys of maintenance hell.\r\n\r\nI'm not married to my proposal. If somebody can come up with a cleaner way to provide two way signalling between senders and receivers, I'd be pleased as punch. I do feel that until there is such a mechanism, channels will be a shadow of their potential glory.\r\n",
	"user": {
		"login": "azdagron",
		"id": 7400314,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-03T23:56:11Z",
	"updated_at": "2016-03-03T23:56:11Z"
}
