{
	"id": 51277251,
	"number": 1022,
	"state": "closed",
	"title": "incorrect and misleading compiler error message ",
	"body": "by **ehog.hedge**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n\nCompile this code:\n\n(((((((((((((((((((((((((((((((((\npackage main\n\ntype Int struct{value int}\n\nfunc ok( spoo Int ) {\n    _ = Int{1} \n}\n\nfunc bad( spoo (Int) ) {\n    _ = Int{1} \n}\n)))))))))))))))))))))))))))\n\nWhat is the expected output?\n\nSilent (successful) compilation.\n\nWhat do you see instead?\n\n  main.go:7: cannot parenthesize type in composite literal\n\nSetup:\n  GOOS=linux GOARCH=amd64\n\nWhich revision are you using?  (hg identify)\n\n  52b9b58d0cfa+ tip\n\nThis problem initially revealed itself when the argument types were\nmore complex -- chan(Int) or [](Int) -- but it's reduceable to just\nthe (superfluous, at least in this example) bracketing.\n\nExchanging the two function definition causes the error to additionally\nappear inside ok as well as bad.\n\nIt /looks/ like the bracketing is being injected into the type at its\nfirst appearance and persists after that.\n\nChris\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2014-12-08T10:06:43Z",
	"created_at": "2010-08-11T12:30:46Z",
	"updated_at": "2016-06-24T19:19:03Z"
}
