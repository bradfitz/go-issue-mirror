{
	"id": 168305911,
	"body": "@markfink Yes, you are correct in thinking that you have to advance the clock yourself. However, I find it useful when I am trying to test a timeout or a sleep:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"time\"\r\n\t\"github.com/pivotal-golang/clock\"\r\n\t\"github.com/pivotal-golang/clock/fakeclock\"\r\n)\r\n\r\nfunc BananaFunc(clk clock.Clock, t time.Duration) {\r\n\t\u003c-clk.NewTimer(t).C()\r\n\tfmt.Println(\"Banana!\")\r\n}\r\n\r\nfunc main() {\r\n\tfakeClock := fakeclock.NewFakeClock(time.Now())\r\n\tc := make(chan struct{})\r\n\tgo func() {\r\n\t\tBananaFunc(fakeClock, time.Minute)\r\n\t\tclose(c)\r\n\t}()\r\n\tfakeClock.WaitForWatcherAndIncrement(time.Minute)\r\n\t\u003c-c\r\n}\r\n```\r\n\r\nIn a real test, I would assert on a post condition, to make sure that the unit you are testing actually worked.\r\n\r\nI am not sure what do you mean by concurrent situations. I guess you would like to test the synchronization between different goroutines (?). I think this is still possible, but admittedly more complex than the above example.",
	"user": {
		"login": "glestaris",
		"id": 1753414,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-01T13:09:39Z",
	"updated_at": "2016-01-01T13:09:39Z"
}
