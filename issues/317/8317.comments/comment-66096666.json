{
	"id": 66096666,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eIt's not Read(nil) that I'm concerned about.  It's cases like unmarshaling a binary\nformat with a \"length\" stamp, where a 0-length is valid and expected.\n\nConsider this program:\n\nvar hdr struct{ Length uint32 }\nif err := binary.Read(r, binary.BigEndian, \u0026hdr); err != nil {\n  return err\n}\nbuf := make([]byte, hdr.Length)\n_, err := io.ReadFull(r, buf)\nreturn err\n\nIf r.Read([]byte{}) returns a non-nil error, io.ReadFull will spuriously return a\nnon-nil error as well.\n\nDo you really think it's worth complicating user code in cases like this just to avoid\nfixing documentation?\u003c/pre\u003e",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-07-02T17:50:24Z",
	"updated_at": "2014-12-08T10:46:12Z"
}
