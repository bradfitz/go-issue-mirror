{
	"id": 240580157,
	"body": "I think this is actually working as intended.\r\n\r\nThe spec says:\r\n\u003e A value x is assignable to a variable of type T (\"x is assignable to T\") in any of these cases: \r\n\u003e  * ...\r\n\u003e  * x's type V and T have identical underlying types and at least one of V or T is not a named type. \r\n\r\nand\r\n\r\n\u003e Each type T has an underlying type: If T is one of the predeclared boolean, numeric, or string types, or a type literal, the corresponding underlying type is T itself. Otherwise, T's underlying type is the underlying type of the type to which T refers in its type declaration. \r\n\r\nand\r\n\r\n\u003e Types may be named or unnamed. Named types are specified by a (possibly qualified) type name; unnamed types are specified using a type literal, which composes a new type from existing types. \r\n\r\nConsider this code:\r\n```\r\ntype T []byte\r\nvar x = []byte{1, 2, 3}\r\nvar _ T = x\r\n```\r\n\r\nT is a named type whose underlying type is []byte. X is a variable with an unnamed type (call it V) whose underlying type is also []byte. Since T and V have the same underlying type, and V is unnamed, the assignment in the third line is permitted.",
	"user": {
		"login": "magical",
		"id": 175539,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-17T23:27:25Z",
	"updated_at": "2016-08-17T23:27:25Z"
}
