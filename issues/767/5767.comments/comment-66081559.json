{
	"id": 66081559,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eIn practice the somewhat weak ID (note that it is rand ^ low-16-bits-of-nanotime, not\njust rand) does not matter very much, because it is combined with a random UDP port on\nmost systems.\n\nSpecifically:\n1) On Linux since 2.6.24, UDP without an explicit source gets a random port.\n2) On my Mac (OS X 10.8.4), same. I don't know when it started.\n3) Other systems should behave similarly.\n\nAlso in practice, this code never runs, because the default behavior is to use the C\nlibrary for DNS resolution; this code is only a fallback that is only built with\nCGO_ENABLED=0 or on incomplete ports that do not yet support cgo.\n\nIt's somewhat counterproductive for net to pick random ports if the kernel is already\ndoing it. The kernel has a much better view of the situation and can do a better job. If\nGo tries to do the job instead, the kernel cannot. \n\nIt would be nice to know what operating systems do need \"help\". \n\nThe attached program estimates the number of bits of entropy in the UDP port choice.\nIt's off by a small constant factor, so that on my Mac it reports 19.5 bits even though\nthe actual entropy appears to be around 13 bits. But if the ports were assigned in order\nor something predictable like that it would say 0.3 bits or so, so it's fine.\n\nIf anyone wants to run the program and report back its determination and the OS name and\nversion, that'd be great.\n\nI would strongly prefer net not to depend on crypto/rand.\u003c/pre\u003e\n\n_Labels changed: added **priority-later**, removed **priority-triage**._\n\n\n_Status changed to **Accepted**._\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/5767/2/x.go\"\u003ex.go\u003c/a\u003e (818 bytes)",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-06-24T15:19:02Z",
	"updated_at": "2014-12-08T10:31:37Z"
}
