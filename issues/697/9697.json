{
	"id": 55558482,
	"number": 9697,
	"state": "closed",
	"title": "cmd/go: very difficult to work with private Github repositories",
	"body": "The new custom import path checking behavior introduced in Go 1.4 makes it extremely difficult to work with private Github repositories.\r\n\r\nBefore Go 1.4, the traditional way to work with a private Github repository was to run something similar the following:\r\n```\r\ngit config --global url.\"git@github.com:\".insteadOf \"https://github.com/\"\r\n```\r\n\r\nThis would allow `go get` and friends to transparently work as expected, automatically rewriting `https` URLs to use SSH for auth. This worked both when pushing and pulling.\r\n\r\nHowever, in Go 1.4 this setting causes fun things like this to happen:\r\n```\r\n~$ go get -u github.com/tools/godep\r\npackage github.com/tools/godep: github.com/tools/godep is a custom import path for https://github.com/tools/godep, but /Users/carl/go/src/github.com/tools/godep is checked out from git@github.com:tools/godep\r\n~/go/src/github.com/tools/godep$ git config remote.origin.url\r\nhttps://github.com/tools/godep\r\n```\r\n(while I've chosen a public repository as my example here, this occurs on private repos as well, meaning that it's not sufficient to use a non-`--global` setting)\r\n\r\nI've been loosely following some discussion (on go-nuts, I believe) that advocates for `pushInsteadOf`: while this works well for contributors for open-source repositories, it doesn't help in situations in which both push and pull access to a repository need authentication.\r\n\r\nIs there a suggested course of action here?",
	"user": {
		"login": "zenazn",
		"id": 12960,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 14,
	"closed_at": "2015-02-20T03:24:13Z",
	"created_at": "2015-01-27T00:27:07Z",
	"updated_at": "2016-06-25T01:59:24Z"
}
