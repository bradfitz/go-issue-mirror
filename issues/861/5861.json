{
	"id": 51284304,
	"number": 5861,
	"state": "closed",
	"title": "runtime: segmentation violation in net/http.ListenAndServe",
	"body": "by **zarcardfly**:\n\n\u003cpre\u003eBefore filing a bug, please check whether it has been fixed since the\nlatest release. Search the issue tracker and check that you're running the\nlatest version of Go:\n\nRun \u0026quot;go version\u0026quot; and compare against\n\u003ca href=\"http://golang.org/doc/devel/release.html\"\u003ehttp://golang.org/doc/devel/release.html\u003c/a\u003e  If a newer version of Go exists,\ninstall it and retry what you did to reproduce the problem.\n\nThanks.\n\nWhat steps will reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n1. We encounter a problem in production environments that our go program crashed with \nstack trace.\n2. The full stack trace is show below:\nSIGSEGV: segmentation violation\nPC=0x4121b3\n\n\ngoroutine 1 [IO wait]:\nnet.runtime_pollWait(0x7ff6b5a99f00, 0x72, 0x0)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/runtime/znetpoll_linux_amd64.c:118 +0x82\nnet.(*pollDesc).WaitRead(0xc2001cb080, 0xb, 0xc2000b93f0)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/fd_poll_runtime.go:75 +0x31\nnet.(*netFD).accept(0xc2001cb000, 0x734eb0, 0x0, 0xc2000b93f0, 0xb, ...)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/fd_unix.go:385 +0x2c1\nnet.(*TCPListener).AcceptTCP(0xc20031df90, 0x4b15a6, 0x7ff6c7c7daf8, 0x4b15a6)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/tcpsock_posix.go:229 +0x45\nnet.(*TCPListener).Accept(0xc20031df90, 0xc2000d8540, 0xc2005ed8b0, 0xc20027e510, 0x0,\n...)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/tcpsock_posix.go:239 +0x25\nnet/http.(*Server).Serve(0xc2001c6e10, 0xc2000e3740, 0xc20031df90, 0x0, 0x0, ...)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/http/server.go:1542 +0x85\nnet/http.(*Server).ListenAndServe(0xc2001c6e10, 0xc2001c6e10, 0xc2001c48a0)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/http/server.go:1532 +0x9e\nnet/http.ListenAndServe(0xc2000ccf40, 0x13, 0xc2001c48a0, 0xc2001c4630, 0x0, ...)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/http/server.go:1597 +0x65\nqbox.us/mc.Run(0xc2000ccf40, 0x13, 0xc2000b5c10, 0xd, 0xc2001c44e0, ...)\n\t/home/jenkins/qbox/nio/mc/src/qbox.us/mc/mc_svr.go:252 +0x721\nmain.main()\n\t/home/jenkins/qbox/service/service/src/qboxmc/qboxmc.go:67 +0x757\n\ngoroutine 2 [syscall]:\n\ngoroutine 7 [chan receive]:\nqbox.us/servend/digest_auth.(*Service).timedTask(0xc2000d8120, 0x15d3ef79800)\n\t/home/jenkins/qbox/base/biz/src/qbox.us/servend/digest_auth/digest_auth_servend.go:230 +0x3c\ncreated by qbox.us/servend/digest_auth.(*Service).Init\n\t/home/jenkins/qbox/base/biz/src/qbox.us/servend/digest_auth/digest_auth_servend.go:223 +0x1ea\n\ngoroutine 9 [IO wait]:\nnet.runtime_pollWait(0x7ff6b5a99e60, 0x72, 0x0)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/runtime/znetpoll_linux_amd64.c:118 +0x82\nnet.(*pollDesc).WaitRead(0xc2001ce080, 0xb, 0xc2000b93f0)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/fd_poll_runtime.go:75 +0x31\nnet.(*netFD).accept(0xc2001ce000, 0x734eb0, 0x0, 0xc2000b93f0, 0xb, ...)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/fd_unix.go:385 +0x2c1\nnet.(*TCPListener).AcceptTCP(0xc2001cd030, 0x18, 0xc20010c810, 0x4b1397)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/tcpsock_posix.go:229 +0x45\nnet.(*TCPListener).Accept(0xc2001cd030, 0x0, 0x0, 0x0, 0xc2000e83f0, ...)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/tcpsock_posix.go:239 +0x25\nnet/http.(*Server).Serve(0xc2001cc000, 0xc2000e3740, 0xc2001cd030, 0x0, 0x0, ...)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/http/server.go:1542 +0x85\nnet/http.(*Server).ListenAndServe(0xc2001cc000, 0xc2001cc000, 0x0)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/http/server.go:1532 +0x9e\nnet/http.ListenAndServe(0xc2000b5c10, 0xd, 0xc2001c48a0, 0xc2001c4810, 0x86b040, ...)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/http/server.go:1597 +0x65\nqbox.us/mc.funcÂ·001()\n\t/home/jenkins/qbox/nio/mc/src/qbox.us/mc/mc_svr.go:246 +0x64\ncreated by qbox.us/mc.Run\n\t/home/jenkins/qbox/nio/mc/src/qbox.us/mc/mc_svr.go:249 +0x6e2\n\ngoroutine 180863207 [running]:\nnet/http.(*conn).serve(0xc20027e510)\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/http/server.go:1017\ncreated by net/http.(*Server).Serve\n\t/home/jenkins/jenkins_bin/go-tip2013-06-02/src/pkg/net/http/server.go:1564 +0x266\nrax     0x0\nrbx     0x7ff6b74fe000\nrcx     0x30040b8a5\nrdx     0x7ff6b74fe000\nrdi     0x7ff6b74fe000\nrsi     0x0\nrbp     0x7ff6b74fe000\nrsp     0x7ff6aeffcc18\nr8      0x0\nr9      0x0\nr10     0x0\nr11     0x246\nr12     0x0\nr13     0x9\nr14     0x2cde1fea\nr15     0x69f4af21\nrip     0x4121b3\nrflags  0x10206\ncs      0x33\nfs      0x0\ngs      0x0\n3. The code is show below:\n/home/jenkins/qbox/nio/mc/src/qbox.us/mc/mc_svr.go:252         return\nhttp.ListenAndServe(addr, mux)\n/home/jenkins/qbox/base/biz/src/qbox.us/servend/digest_auth/digest_auth_servend.go:230  \n              \u0026lt;-time.After(time.Duration(duration))\n/home/jenkins/qbox/nio/mc/src/qbox.us/mc/mc_svr.go:246                         if err :=\nhttp.ListenAndServe(gateAddr, gateMux); err != nil {\n4. In fact, I'm not sure if it was panic in net/http.ListenAndServe.\n\nWhat is the expected output?\nNever panic (and most of the time, it did).\n\nWhat do you see instead?\nThe program panics accidental.\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g\n\nWhich operating system are you using?\nx86_64 GNU/Linux\n\nWhich version are you using?  (run 'go version')\ngo version go1.1 linux/amd64\n\nPlease provide any additional information below.\n1. The program recieves about 120 Http Requests Per Second.\n2. The program processes requests within 0.5ms at most time. It receives the request,\nmake another http request to another server, and do some light weight logic work.\n3. It's the second time we encountered the problem(The stack trace of first time was\nlost, sorry for that).\n4. I wonder if there is a Tutorials for reading golang stack trace. I don't know how to\ndetermine which goroutine cause the panic, the first one in stack trace or the 'running'\none. I hope someone can give me some tips if possible, thanks in advance.\n5. I'd be very much interested to know why the panic happened.\n6. If someone need more details, contact me with zarcardfly@gmail.com.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 8,
	"closed_at": "2014-12-08T10:32:12Z",
	"created_at": "2013-07-11T03:22:21Z",
	"updated_at": "2016-06-24T22:51:38Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
