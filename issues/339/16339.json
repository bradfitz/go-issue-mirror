{
	"id": 165179573,
	"number": 16339,
	"state": "open",
	"title": "Proposal: Alias declarations for Go",
	"body": "**Abstract**\r\nWe propose to add alias declarations to the Go language. An alias declaration introduces an alternative name for an object (type, function, etc.) declared elsewhere. Aliases simplify splitting packages because clients can be updated incrementally, which is crucial for large-scale refactoring.\r\n\r\n**Motivation**\r\nDuring refactoring, it is often desirable to split an existing package into multiple packages. Exported objects such as types, functions, etc. that move from one package to another will require clients to be updated accordingly. In a continuous build environment, build breakages are the consequence if not all clients can be updated simultaneously.\r\n\r\nThis is a real issue in large-scale systems such as we find at Google and other companies because the number of dependencies can grow into the hundreds if not thousands. Client packages may be under control of different teams and evolve at different speeds. Updating a large number of client packages simultaneously may be close to impossible. This is an effective barrier to system evolution and maintenance.\r\n\r\nGo trivially permits constants to refer to other constants, possibly from another package. Similarly, if a function moves from one package to another, a “forwarder” function that simply calls the moved function may be left behind so clients can continue to refer to the old package. These techniques enable incremental update of clients without breaking a continuous build system.\r\n\r\nNo such work-around exists for types and variables. To address the issue, we propose the notion of a general alias declaration. An alias declaration introduces an alternative name for an object (constant, type, variable, or function) declared elsewhere, possibly in another package. An alias may be exported, so clients can refer to on object via the package that declares the object, or any package exporting an alias to an object, and get the same object.\r\n\r\nAlias declarations are designed such that they fit seamlessly in the existing language spec without invalidating backward-compatibility or any other aspect of the Go 1 guarantees. Tools that process Go code which will require changes to support alias declarations.\r\n\r\nAlias declarations are a compile-time mechanism and don’t incur any runtime costs.\r\n\r\nThe design document (forthcoming) describes alias declarations in detail.\r\n\r\nAdded July 25, 2016: Link to design document: https://github.com/golang/proposal/blob/master/design/16339-alias-decls.md",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 283,
	"created_at": "2016-07-12T21:00:07Z",
	"updated_at": "2016-08-18T18:02:35Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	},
	"reactions": {
		"total_count": 140,
		"+1": 29,
		"-1": 89,
		"confused": 10,
		"hooray": 12
	}
}
