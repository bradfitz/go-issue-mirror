{
	"id": 234466074,
	"body": "While I'm aware of problems with large refactorings - I have to make too often commits that span several hundred files in a 30+yr old codebase - and I still do not think `alias` is a good thing to have. It would have negative effect over 5-years for short-term convenience.\r\n\r\nI would use syntax `wemessedup T fixingwith X`, because that is what it is /s. When you imagine such things over many packages -- it is less and less attractive. Making things short and convenient legitimizes things, but large-scale-refactorings should be avoided as much as possible.\r\n\r\nI'm fully aware of project dynamics and that large-scale refactorings are not due to mistakes or errors, but rather an unfortunate side-effect of learning and getting a better understanding of what you are building. Having an \"easy\" way to fix your rushing means people are more willing to accept quick solutions.\r\n\r\nAll that said, I am sympathetic of large projects that have to deal with it. Here's a possible solution that could work:\r\n\r\n    // file in $GOPATH/tofix\r\n    http.Server -\u003e google/http.Server\r\n    http.Client -\u003e google/http.Client\r\n\r\nThere is only one such file and must be commited and shared. Then a custom `go build`, would use that information to adjust the compiling source accordingly. How to exactly hook this into `go build` is a good question, but custom `go build`, or a preprocessor could work.\r\n\r\nThis file has a psychological effect that people would want to fix it rather than push it into the future. It looks like an hack, which it is. It would also probably break some tooling  (go vet, go lint, editors), i.e.\r\npeople want to fix it, however they are not pressured into it. Of course all the changes to the file must be coordinated and communicated to avoid issues. Probably there are some ways how this approach can be improved, e.g. automated renaming, statistics on use, etc... *Note: there must be only one such file to properly incentivise people.*\r\n\r\nWith regards to using it to expose internal packages. I understand the enamour for organizing things, but I don't see it improving code that much. The only benefit I can see is that you cannot use circular imports and hence are forced to better design things. Of course, such controls could also be enforced by tooling. There's the downside that you are now developing multiple packages instead of `package X` as a whole. If you are developing separated things, make them separate packages - if they are not really separate, then put them together.",
	"user": {
		"login": "egonelbre",
		"id": 192964,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 5,
		"+1": 5
	},
	"created_at": "2016-07-22T06:37:34Z",
	"updated_at": "2016-07-22T06:37:34Z"
}
