{
	"id": 236386886,
	"body": "@dlsniper Is there a link to a proposal for a better package management system? I haven't run across that conversation yet.\r\n\r\n@Merovius\r\n\u003e Package-level aliases as you suggest would break the builds of dependencies, as a go get of any package which transitively uses a moved package would fail without the correct environment variable.\r\n\r\nGood point. If you want to allow packages to redirect themselves, you could use a \"gomigrate\" file as suggested elsewhere in this thread. The global config file has advantages as well -- it let's users solve the \"disappearing package\" problem that almost took down node.js. It's not the greatest solution to that problem, but Go currently has *no* solution to that problem, so I think it's worth considering.\r\n\r\n\u003e The great thing about the aliases is, that I can use them without any dependency breaking, enabling gradual, non-obstrusive refactorings.\r\n\r\nI think the point about gradual refactorings is being overstated. I recognize the problem. I understand that aliases help incrementalize refactorings, especially in very large monolithic repos. But, I don't think the solution generalizes as much as has been stated.\r\n\r\nTake the protobuf API refactor suggested by @bcmills. It would be great to split that package in two. Your ultimate goal is to remove some identifiers from the original package. This is fundamentally a backwards-incompatible change. Sure, you could use aliases as an intermediate stage, but you're just delaying the problem. How do you know all clients have switched to your new packages? On the public internet, you cannot answer this question. The old names must live forever, else you risk breaking some client you've never heard of. This suggests that, on the public internet, aliases cannot help you refactor APIs, only implementations. You cannot make backwards-incompatible API changes without some kind of versioning. Am I missing something?\r\n\r\n(You're right that there's a circular conversation going on. Sorry if I'm adding more noise to that cycle. I think part of the reason for that cycle is that @dlsniper and @atdiar have a legitimate point, which I've tried to summarize above, that hasn't received good response yet. The question is important because it gets at the heart of what you can and cannot do with aliases.)",
	"user": {
		"login": "tombergan",
		"id": 13954200,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-30T19:56:10Z",
	"updated_at": "2016-07-30T19:56:10Z"
}
