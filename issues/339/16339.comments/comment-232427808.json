{
	"id": 232427808,
	"body": "For sufficiently large codebases, type aliases aren't just a convenience. It's effectively impossible to refactor types without them.\r\n\r\nIt's not uncommon for us to make changes to packages which are imported by hundreds or thousands of files spread across many different projects. The usual process when making an incompatible API change is to initially support both the old and new interfaces, gradually update all the uses of the old interface to the new one, and finally drop the old interface. We've got tools which automate parts of this process.\r\n\r\nIt is impossible to move a type from one package to another using this approach, however, since it is not possible to have a transitional period where the type exists in both places..\r\n\r\nBuild tags as suggested by @josharian are unfortunately not a solution, since they would require that all the components of a program agree on a single location for the type.\r\n\r\nThe inability to move types in widely-used packages is causing us ongoing pain, and I don't see any way to resolve it without some form of type aliasing.",
	"user": {
		"login": "neild",
		"id": 52544,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 7,
		"+1": 6,
		"heart": 1
	},
	"created_at": "2016-07-13T17:29:21Z",
	"updated_at": "2016-07-13T17:29:21Z"
}
