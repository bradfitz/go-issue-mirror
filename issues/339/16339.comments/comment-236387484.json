{
	"id": 236387484,
	"body": "@tombergan \r\n\u003e It would be great to split that package in two. Your ultimate goal is to remove some identifiers from the original package. This is fundamentally a backwards-incompatible change. Sure, you could use aliases as an intermediate stage, but you're just delaying the problem. How do you know all clients have switched to your new packages? On the public internet, you cannot answer this question. The old names must live forever, else you risk breaking some client you've never heard of. This suggests that, on the public internet, aliases cannot help you refactor APIs, only implementations. You cannot make backwards-incompatible API changes without some kind of versioning. Am I missing something?\r\n\r\nNo, you are right, that you can never be sure about that. In the world I imagine what you do is, you do the move, with a shim at the old place, you announce a breaking API change after a generous grace-period (say, 6 months or a year) on yourproject-announce and remove the shim after that grace-period has passed. You still risk breaking abandoned software (or software with unattentive maintainers), but it would be a risk I, personally, at least would be okay with. The important part is, that for this process to be bearable (i.e. not having stale versions of the code and diamond dependency problems and everything all the time), *both* an updated and a non-updated client must be able to build the same thing still.\r\n\r\nThe story still isn't actually complete (as there are very close to no backwards-compatible API changes in go), but it paints a picture for the process. There still needs to be significant project management effort behind it, but at least it can eliminate the technical impossibility to do the transition at all.",
	"user": {
		"login": "Merovius",
		"id": 720787,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-30T20:10:41Z",
	"updated_at": "2016-07-30T20:10:41Z"
}
