{
	"id": 235148016,
	"body": "I agree that it's not a bad thing that a misuse generates a compile error.\nI just now have a frustrated user who tried to do this thing they were\ntrying to do two different ways (previously they had 1, which also didn't\nwork).\n\nI also realize that it's possible to alias functions, but it's just not\nsomething we do really. I am afraid that adding first class support will\nencourage it and I'll have even more hoops to jump through when trying to\nunderstand what a customers code or a library is doing.\n\nIn the end it's about cognitive overhear. I'm probably wrong, but IMO this\nproposal adds to it.\n\nPS: Re convention. There is quite a lot of unconventional go code out there\nfor people to learn from. :-(\n\n.....\n\nI dislike overriding the meaning of import and would much prefer the =\u003e\nsyntax. Also, as aliases would be package scoped it feels weird doing them\nin a file's import block.\n\nSince aliases would be package scoped, why not require all of these aliases\nto be inside of a particular .go file inside of the package? This nicely\naccumulates them all in a single place, with a given name (_aliases.go for\nexample) and calls out their special nature? This may also discourage their\nuse?\n\nThere are probably no good file names that won't break somebody though.\n\nOn Mon, Jul 25, 2016 at 19:10 Ian Lance Taylor \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e I do think it's important to realize, as @robpike\n\u003e \u003chttps://github.com/robpike\u003e points out and as Robert's design doc says,\n\u003e that aliasing of constants and functions already works fine. I don't\n\u003e personally think that aliasing of variables is very important, though I\n\u003e appreciate Rob's point above that it's nice to be consistent. It's really\n\u003e only aliasing of types that matters.\n\u003e\n\u003e I want to pick up on a suggestion from @nathany\n\u003e \u003chttps://github.com/nathany\u003e above: what if instead of the alias syntax\n\u003e that @griesemer \u003chttps://github.com/griesemer\u003e described, and instead of\n\u003e the type T1 = T2 syntax that several people have mentioned, we instead\n\u003e permit import p.N. The meaning of this statement would be to alias N from\n\u003e package p and make it available as an exported name N in the current\n\u003e package. The package p must of course be imported itself.\n\u003e\n\u003e This means that an alias is always to a name in an external package. It\n\u003e means that the alias always use the same name as it has in the external\n\u003e package. We can permit it to be a const, func, type, or var--it will have\n\u003e the same meaning it has in the external package. This will enforce Rob's\n\u003e suggestion above: it will be impossible for a single package to have an\n\u003e alias for the same object under two different names, because all aliases to\n\u003e N must themselves be named N. It will of course be impermissible to\n\u003e define a new method on an imported type. This will permit refactoring a\n\u003e package. It will permit the kind of API separation into multiple packages\n\u003e that Robert described above.\n\u003e\n\u003e We could require that this kind of import statement appear along with the\n\u003e other import statements. I don't feel strongly about that. It's important\n\u003e to note that, unlike those other import statements, this kind of import\n\u003e statement defines a name in package scope (it must be that way because the\n\u003e name is re-exported), so it may be appropriate to not mix it with the other\n\u003e import statements, which only change file scope.\n\u003e\n\u003e This does mean that in a package doing an import, values with the type N\n\u003e and p.N will have the same type. And it means that in some other package\n\u003e that imports both packages, values with the type p1.N and p2.N will have\n\u003e the same type. I would argue that in a sensible program the potential for\n\u003e confusion is low.\n\u003e\n\u003e â€”\n\u003e You are receiving this because you were mentioned.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/16339#issuecomment-235142690\u003e, or mute\n\u003e the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AAAAZ01u1C-KvzjwS7FKBORJrwkZqUXzks5qZWyrgaJpZM4JK0gz\u003e\n\u003e .\n\u003e\n",
	"user": {
		"login": "freeformz",
		"id": 103,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-26T02:48:40Z",
	"updated_at": "2016-07-26T02:48:40Z"
}
