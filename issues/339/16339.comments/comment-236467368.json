{
	"id": 236467368,
	"body": "\u003e Yes, but we don't have covariant interface types, meaning that while you can pass a `context.Context` as a `x/net/context.Context` and vice versa, you can't pass a `func(context.Context)` as a `func(x/net/context.Context)` (excuse the bastardized notation), which is really at the heart of the issue.\r\n\r\n@Merovius If I've understood correctly, #8082 seeks to address this problem at its roots, by making it possible to pass a `func(context.Context)` as a `func(x/net/context.Context)`. And if I'm mistaken, it might be worth looking into, as an extension of #8082? There are other reasons why I prefer #8082 over this proposal. To keep the intensive discussion of this proposal on track, I'll add the relevant use-cases addressed by #8082 (but not by this proposal) to the comment section of #8082 (edit: specific use-case added in https://github.com/golang/go/issues/8082#issuecomment-236474953).",
	"user": {
		"login": "mewmew",
		"id": 1414531,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-08-01T00:41:15Z",
	"updated_at": "2016-08-01T02:17:47Z"
}
