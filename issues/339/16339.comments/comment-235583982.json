{
	"id": 235583982,
	"body": "@atdiar \r\n\u003e I actually don't think it is possible unless you have abstractions at the compile unit level over objects. But then you would have to specify what those abstractions resolve to.\r\n\u003e\r\n\u003e Even by adding aliases, you will break clients. This is another problem entirely from the one described in the proposal.\r\n\u003e \r\n\u003e [...]\r\n\u003e\r\n\u003e In the end, it's the refactoring methodology that might have to be rethought completely.\r\n\r\nI don't understand what you mean - could you be more specific?\r\n\r\nThe way I can see to fix Context in the `appengine` and `cloud` packages is to define `golang.org/x/net/context.Context` as an alias for `context.Context` in Go 1.8 and above (e.g. using build constraints).\r\n\r\nThat would imply that `golang.org/x/net/context.Context` can't be \"a different version\" from the one in the standard library, but that's ok (and even desirable): the standard library already has a development branch (a.k.a. `tip`), and having just one definition of `Context` (with one alias in a deprecated package) is arguably much simpler than two separate-but-mostly-compatible definitions.",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-27T13:26:25Z",
	"updated_at": "2016-09-12T22:17:37Z"
}
