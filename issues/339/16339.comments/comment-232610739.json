{
	"id": 232610739,
	"body": "\u003e We did think about a special notation for variables only; including the possibility of making `@a` more generally useful (in fact, we internally discussed the very same notation). That is, `@x` could mean a something along the lines of `reference to x without using pointer notation`. But now we have two mechanisms to discuss: aliasing, and \"variable references\", and the latter seems to open an even bigger Pandorra's box. Let's not go there in this discussion.\r\n\r\nI was thinking about something like `unsafe.Reference(x)` that would mean *a reference to x without using pointer notation*. That way it might be clearer that it's not intended for regular usage, although it's probably not clear enough.\r\n\r\nBeing the proposal one way or another (make aliasing available for all const, var, func, type, or just for type), I think it is important to come up with a solution that makes it possible to mark all const, var, func, type as being deprecated as part of some refactoring process (either using the proposed special syntax `=\u003e` or by making some kind of `//go:comment` with a special meaning) to enable some go tools (not necessarily goimports) to automatically refactor the deprecated stuff as was mentioned by @Kunde21.\r\n\r\n",
	"user": {
		"login": "mibk",
		"id": 2324898,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-14T09:13:01Z",
	"updated_at": "2016-07-14T09:13:01Z"
}
