{
	"id": 232249643,
	"body": "I agree with @Kunde21 @mem: while the motivation is to add this feature for refactoring I think it will likely be used more often in permanent code. I think @Kunde21's suggestions to have `go vet` discourage usage would be beneficial in preventing permanent usage, but since we're specifically talking about refactoring that will take a long time, we'd basically be ignoring warnings for a long time and we'd risk becoming decensitized to them.\r\n\r\nAlternatives that come to mind that I did not see listed in the design document:\r\n\r\n1. Versioning – Is this problem something that versioning imports would resolve? When the public interface of a package changes in many other language ecosystems there's a bump in the major version number. The motivation statement gives the example of 100 clients. If each of these clients specified different versions of the import, then they could upgrade as they are able. This would still require upgrading an entire project at once, but at least not all projects at once.\r\n\r\n2. Renaming – Would it be practical to rename the package? i.e. Instead of `L` becoming `L` and `L1`, could `L` become `L1` and `L2`? `L` would become deprecated.\r\n\r\n_(edited only to remove a duplicate word which made a sentence read poorly)_",
	"user": {
		"login": "leighmcculloch",
		"id": 351529,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-13T03:50:50Z",
	"updated_at": "2016-07-13T03:56:07Z"
}
