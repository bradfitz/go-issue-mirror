{
	"id": 234474706,
	"body": "```\r\ntype T = L1.T  \r\n```\r\n\r\nNow I need to explain that you can't add methods to some types in your own packages, that is, if those types are aliases.\r\n\r\nIf that's the case, some variant of `import` seems better to me.\r\n* obviously limits to the top-level :+1:\r\n* we already have package aliases :+1:\r\n* it's clear that it's an alias and not a local type :+1:\r\n* but it's a little odd to both import and export the type if the alias is capitalized :-1:\r\n* and as mentioned in the proposal, that's file scope rather than the desired package scope, so not the best either :-1:\r\n\r\nIf type aliases did allow methods, then we're talking extension methods (C#/Kotlin) and a completely different proposal for different purposes.\r\n\r\n```\r\nvar V -\u003e L1.V\r\n```\r\n\r\nI find variable aliases particularly confusing to explain. It's already odd to explain that arrays are values whereas maps are references (unlike, say, Swift, where both use copy-on-write) -- and that references are different from pointers, at least in terms of syntax. We already have `var` and `:=`. Adding variable aliases `-\u003e` into the mix is yet another variant with different rules, especially if available at more than just package scope.\r\n\r\n\u003e One of the strengths of Go is that it can be taught in very small and easy steps, with few features requiring to know \"the whole language\" before understanding them. Alias declarations come last.\r\n\r\nI guess I have a different perspective. There are other languages that I learned in small steps, but still was discovering unusual features and edge cases 8 years in. What attracts me to Go is that the initial language is well thought out with only a few rough edges. Certainly that's why I think it is a good language for newcomers to master, as mastery of the language shouldn't take eons.\r\n\r\nAt the same time, I think it's great to have a language that scales from newcomers taking on hobby projects up to large-scale systems and large teams.\r\n\r\nI'm curious to better understand the problem. From what I can tell this is the key:\r\n\r\n\u003e Client packages may be under control of different teams and evolve at different speeds.\r\n\r\nOtherwise large scale refactoring could be addresses with tools instead of a language addition. This appears to be a language feature to address a social issue (code that cannot be changed). Though the other possibilities (umbrella packages such as go/*) do sound interesting.",
	"user": {
		"login": "nathany",
		"id": 4566,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 3,
		"+1": 3
	},
	"created_at": "2016-07-22T07:33:30Z",
	"updated_at": "2016-07-22T07:49:02Z"
}
