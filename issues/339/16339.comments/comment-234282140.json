{
	"id": 234282140,
	"body": "I'm seeing a lot of concern on this thread about, essentially, whether the language sufficiently punishes bad APIs.  But that's not really how Go operates: it's easy to misuse channels and goroutines, but we don't banish them from the language; instead, we teach people how to use them effectively.\r\n\r\nIt may be the case that teaching people to use aliases effectively adds some overhead, and that may be a good motivation for keeping any alias proposal fairly minimal.\r\n\r\nEven so, I think it's a mistake to fixate on misuse.  The other question I'm very much interested in is this:\r\n\r\nHow can we help Go users transform _bad_ APIs into _good_ ones?\r\n\r\nI firmly believe that type aliases, at the very least, are necessary for that purpose.  If you make some mistakes and end up with an enormous hairball package that really ought to have been split into three or four, how do you get back out of that situation?  Especially, how do you do that in a way that gives users of your hairball package time to migrate, without breaking them?\r\n\r\nSuppose you're using a package H that has turned into a \"hairball\".  Packages B and C use H, and you vendor those in and use them in package A.  You upstream some changes to split up H into H1, H2, H3, etc.  Now, how do you pull those changes back in to your project?\r\n\r\nIf you rely strictly on vendoring, the answer is: upstream patches to B and C.  While that's going on, you can't import new versions *either* of those packages without breaking A: they require incompatible versions of H.\r\n\r\nIf you have aliases, now you have another option: you can convert H into a set of aliases into H1, H2, H3, etc.  Now you can upgrade B to use H1, ..., but still compile it in the same environment as a version of C that relies on the monolithic H.  Then you can upgrade C and re-import it, and finally remove your dependency on H.  If you give folks enough time to do that migration, you can eventually remove H - whereas, without aliases, you might not be able to convince B or C to upgrade at all (because they can't do so without at least temporarily breaking their users).\r\n\r\n----\r\n\r\nNow, maybe you can't think of any packages like H.  That's fine, and that might be a reason you would see aliases as a drag.  I can think of several hairball packages I interact with, and that's why I'm in favor of aliases.  But that's not really my point.\r\n\r\nMy point, rather, is this: a lot of the comments on this thread seem to be suggesting that the author of package H and all of its users need to be taught some kind of lesson for having gotten into this mess to begin with.  I don't think that's a productive way to maintain a language, and in the long term I think it's harmful to Go's users: the lesson we want to teach is \"here's how Go can help you fix your messes\", not \"here's how Go makes life unpleasant if you make a mistake with your package structure\".",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 10,
		"+1": 7,
		"-1": 2,
		"hooray": 1
	},
	"created_at": "2016-07-21T15:03:16Z",
	"updated_at": "2016-07-21T15:03:16Z"
}
