{
	"id": 234742924,
	"body": "A few minor points.\r\n\r\nFirst, the types-only version of this (type A = pkg.B) bothers me because it is too specific and leaves variables in the cold. Worse, it behaves opposite to the most common meaning of A = B for variables in procedural programming. Usually, var A = pkg.B means that A is a new thing with the same value as B, but now they are decoupled and A can be changed without changing B. With the proposed type A = pkg.B, A is not a copy but a synonym; it is _exactly_ the same as pkg.B, not a copy. Thus the proposal would use the same notation for two very different things.  (The situation is slightly different again with const; I'm not sure which way that argues.)\r\n\r\nAnyway, providing a mechanism for types alone that doesn't address the problem for variables seems like a complicating rather than simplifying feature. I prefer the nature of the original proposal largely for its generality.\r\n\r\nSecond, it has been suggested that we forbid aliases within a package. I have a counterproposal that is just as simple but more general: Forbid a package to have two names for the same variable, function, method or type, at any scope. (Consts are fine, don't worry about them, although it would be fine to say that two consts can have the same value only if they are both created in a non-aliasing const declaration.)  Not only does this prevent a package from defining a local alias, it goes a long way to prevent chains of aliasing as it would require them to appear only one step at a time through explicit imports.\r\n\r\nFinally, I think the proposal should explicitly forbid declaring a method with an alias for a receiver. It's one more way to prevent abuse. If we do the \"no two names\"  or \"only qualified identifier\" rule, it happens automatically, but I think being explicit clarifies that abuse is limited.\r\n\r\n",
	"user": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 9,
		"+1": 9
	},
	"created_at": "2016-07-23T22:00:45Z",
	"updated_at": "2016-07-23T22:00:45Z"
}
