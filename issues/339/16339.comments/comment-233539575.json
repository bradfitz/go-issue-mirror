{
	"id": 233539575,
	"body": "## Scope\r\n\r\nBefore reading about the multi-package \"components\" use case, I was under the impression that the main motivation behind this proposal was to facilitate large-scale refactoring efforts. Based on my initial understanding of the intended scope of this proposal, some of the concerns expressed by @mibk and @natefinch resonated with me. They both describe how \"temporary\" solutions tend to become permanent, and how this may make the initial problem even worse. An analogy may be that any large enough file system will contain stale symlinks, as projects move files around to evolve, and users start to depend on old symlinks to be around forever.\r\n\r\nTo substantiate this concern, see @natefinch's [comment](https://github.com/golang/go/issues/16339#issuecomment-232385516) about the Juju refactoring effort:\r\n\r\n\u003e ... If all I had to do was make an alias in the original place, all those conflicts would not have happened, and in theory, we could have done the conversion incrementally (though, see number 2 above, I don't think we actually ever would have put forth the effort).\r\n\r\n## Ugly is good\r\n\r\nAs [stated by Benjamin Black](http://blog.b3k.us/2012/01/24/some-rules.html)\r\n\r\n\u003e *An insufficiently ugly temporary hack is permanent.*\r\n\r\nTL;DR *Make the syntax or some detail ugly enough to discourage \"temporary\" usage becoming permanent.*\r\n\r\n@mibk's [suggestion](https://github.com/golang/go/issues/16339#issuecomment-232610739) to highlight temporary or discourage usage with `unsafe`, relevant extract below:\r\n\r\n\u003e I was thinking about something like `unsafe.Reference(x)` that would mean *a reference to x without using pointer notation*. That way it might be clearer that it's not intended for regular usage, although it's probably not clear enough.\r\n\r\nalso made me think of how other projects have solved \"temporary\" not becoming permanent in the past. Make the syntax or some detail of its use ugly enough, so that programmer will have incentive to fix it.\r\n\r\n## Proposal document notes\r\n\r\nFrom the [proposal document](https://github.com/golang/proposal/blob/master/design/16339-alias-decls.md).\r\n\r\n\u003e ... , with the extensions marked in red:\r\n\r\nThe Markdown document does not highlight the syntax extensions in red.\r\n\r\n\u003e TODO(gri): Expand on use of alias declarations instead of \"dot-imports\".\r\n\r\n@griesemer For the record, I'd be very interested in reading this section once added as dot-imports have felt like a hack since day one and are generally discouraged, except for the specific use case of preventing import cycles in test cases. Would it be possible to provide a brief example outlining how dot-imports are used today to solve the problem of import cycles in test cases (as used by the \"fmt\" package for instance), and how aliases may help resolve this issue?\r\n\r\nOn a related note, I was wondering if aliases may somehow be employed to replace the need for the \"Unicode middle dot hack\", an example of which may be seen in the `runtime` package which uses the middle-dot character `'·'` to  \"push\" definitions (such as `time·now`) into other packages. For the record, this is clearly an issue which I would not expect the scope of the proposal to cover. I mainly wanted to include it to spark discussions, and more importantly to highlight that perhaps this proposal should not be intended to solve *all* issues, but rather the crucial issue of large-scale refactoring.\r\n\r\nFor other issues than large-scale refactoring, better solutions may exist if given time to explore other options.",
	"user": {
		"login": "mewmew",
		"id": 1414531,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-07-19T05:59:09Z",
	"updated_at": "2016-07-19T06:08:27Z"
}
