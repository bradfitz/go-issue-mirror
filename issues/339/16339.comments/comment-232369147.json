{
	"id": 232369147,
	"body": "And that observation points out an existing way to accomplish the refactoring goals (I think) without changing the language: build tags. Type T could live in package L or L1, depending on the presence of a build tag. When clients migrate, they flip their build tags. Once all clients have migrated, all build tags get removed.\r\n\r\nThis adds several burdens.\r\n\r\n* The library maintainer must juggle the build tags, which is harder than adding aliases. Nevertheless, it seems workable.\r\n\r\n* The client libraries that have upgraded must now remember to provide build tags on every invocation of the Go tool. This pushes developers towards makefiles. This could be addressed with additional support from cmd/go, though. For example, one could add a magic comment next to imports indicating which build tags to use when compiling that import for use:\r\n\r\n```go\r\nimport \"pkg/path/L\" // +build v2\r\n```\r\n\r\nThere are obviously wrinkles here. For example, the build tags for an import must appear only once (or must not conflict), but that kind of situation already exists for the custom import path restriction comments. There are other build tag persistence mechanisms available; this is just to illustrate. (Please don't bikeshed with new ideas for build tag persistence here. That would be a separate proposal. The important point is that there are options.)\r\n\r\n* godoc and other tools have marginal support for build tags and build restrictions. For example, https://godoc.org/syscall is of little use to developers on Windows. Tooling improvements might be needed.\r\n\r\n* If there are multiple migrations occurring at the same time, you could get combinatorial build tag explosion. Not sure what to say about that other than \"don't do that\".\r\n\r\nI'm not sure where I stand on aliases vs build tags, but it seems worth exploring a little.\r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	},
	"created_at": "2016-07-13T14:18:04Z",
	"updated_at": "2016-07-13T14:18:04Z"
}
