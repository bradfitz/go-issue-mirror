{
	"id": 236382372,
	"body": "@dlsniper, I think you have a reasonable point that many (most?) refactorings are more complex than simple renamings and aliases won't help much in those more complex cases. I also think you have a reasonable point that `x/net/context` might be a bit of a special snowflake because it's used so pervasively. However, I agree with @ianlancetaylor that you are vastly underestimating the challenge of migrating all users of `x/net/context` to go 1.7.\r\n\r\n\u003e\u003e Here's a simple idea. Add a new environment variable GOPKGALIASES.\r\n\r\n\u003e I've sadly stopped reading (and won't further read) when I've seen adding yet another environment variable.\r\n\r\nI understand the distaste for environment variables, but I think you missed my point. `x/net/context` has moved. The fundamental question is: How do you find package `x/net/context`? SemVar does not help you find packages, only specific versions of a package. What if the package [goes away](http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/)? SemVar won't help. The left-pad debacle was resolved only because node.js has a centrally-controlled package repository (NPM) that restored the package. If github user foo goes away, and your package's public Go API relies on `github.com/foo/bar`, you're out of luck. You have no control over `github.com/foo/bar` even *existing* in the first place, let alone a specific version of that package existing. You don't even have control over *github* [existing](http://google-opensource.blogspot.com/2015/03/farewell-to-google-code.html).\r\n\r\nYou could make an argument that Go needs a better package management system, and perhaps an NPM-like entity to register and preserve packages. For better or worse, Go's current package management system is (partially) controlled by environment variables (GOROOT and GOPATH). Adding a third variable (GOPKGALIASES) is a quick and simple solution that doesn't seem too offensive to me in the grand scheme of things.\r\n\r\n\u003e Oh and the current implementation [of GOPATH] is not under the language specifications nor the same assurance in terms of breaking as the language specifications.\r\n\r\nThis is an advantage of a build system change IMO. It will solve the most important problem at present (x/net/context moving), but if people don't like it, we can revert GOPKGALIASES in go 1.x and switch to a different solution. In contrast, any language change we make, we're stuck with.",
	"user": {
		"login": "tombergan",
		"id": 13954200,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-30T18:43:43Z",
	"updated_at": "2016-07-30T18:43:43Z"
}
