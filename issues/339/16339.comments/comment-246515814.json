{
	"id": 246515814,
	"body": "@mem \r\n\r\n\u003e Given that interface satisfaction is implict, the context.Context type returned from x/net/context can be passed to functions taking context.Context from the new package.\r\n\r\nYes, but functions which accept a `context.Context` parameter are a different type from functions which accept an `x/net/context.Context`.  This matters in some cases (e.g. [gRPC](https://godoc.org/google.golang.org/grpc)).\r\n\r\n\u003e When godoc displays the definition of the type `U`, it would either have to inline the type `A.X` or spell out the fact that this is an alias. The first option doesn't make sense because it refers to a non-existent `Y`.\r\n\r\nYep.  I would propose that it do both: that way the reader doesn't have to navigate to the other package, but the context of other identifiers in the documentation is (at least somewhat) clearer:\r\n\u003e X is an alias for foo/bar/A.X:\r\n\u003e X uses a Y to implement the WZ algorithm for fizzling bozzles.\r\n",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-12T22:29:24Z",
	"updated_at": "2016-09-12T22:29:24Z"
}
