{
	"id": 236367849,
	"body": "\u003e In this case versioning and vendoring will definitely help:\r\n\r\nThe issue that I take with that is, that it still means I can't upgrade until all transitive dependencies have bumped their stuff. I don't have any faith in the general open source community that that happens in a timely manner. So you'll end up with two incompatible versions and either the burden of maintaining both in the meantime, so that users can choose which they use, or only maintaining the newer one, in which case everyone else is left in the cold in regards to new features, bug- and security fixes.\r\nIn short, they don't *actually* solve the problem of a large-scale, fast moving codebase, at least not without significant maintenance overhead for everyone involved.\r\n\r\n\u003e However, for normal projects, once you move stuff around, the next thing you'll want to do is to also change the API in some cases (most? not most? I don't have data for this). It's absurd to think that the API will stay the same and it's absurd to think that the alias proposal is anything but a delay into getting to the real problem, the changes which come after moving packages from one place to another.\r\n\r\nThe overwhelming majority of API changes can be done in a gradual, multi-phase-commit way of providing shims and wrappers. You add the new API, you wait until everyone has stopped using the old, you remove the old. Moving things from package to package isn't possible this way.\r\n\r\n\u003e Aliasing won't freeze the object until everyone is moved on so now you'll have people that need to change both the alias usage then conform to the new API. Or simply conform to the new API. Which one do you think it will be proffered?\r\n\r\nThe two aren't mutually exclusive. I can, with this change, provide the new API at `foo/bar` and leave a shim around in `foo`. Users can then update to the new API whenever they want, but - and that's the important part - in the meantime, they'll just silently profit from my maintenance of `foo/bar` and *their* users don't suffer from diamond dependency issues and incompatibilities.\r\n\r\n\u003e Also, in Googles case, where a mono-repo exists, and according to presentations like this: https://youtu.be/W71BTkUbdqE?t=384 humans do less compared to automated tools, I can't see how moving a package from one place to another.\r\n\r\nSee above, I don't think Google should be viewed as the primary profiteer of this change, but the open source community (the argument is also a red herring, as \"automatic\" doesn't imply \"changing lots of independent files and needing one atomic submit\", but that's another story).",
	"user": {
		"login": "Merovius",
		"id": 720787,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 6,
		"+1": 3,
		"-1": 3
	},
	"created_at": "2016-07-30T14:22:26Z",
	"updated_at": "2016-07-30T14:22:26Z"
}
