{
	"id": 236435085,
	"body": "@perses I've provided those already (and like pointed out, I'll just rehash my arguments at some point). \r\n\r\n\u003e The benefit is clear: you can move types (and functions, variables) to another package, without breaking compatibility. It doesn't help with adding breaking changes, yes, that's not what the proposal is about. That's a different problem.\r\n\r\nNo, it's not a different problem, it's the very bottom line of the issue. You are just allowed to move types around without doing breaking changes. It gives you a false sense of security on the package you are using and then one day, it won't work anymore and you'll have to then discover that you need to do a more complex refactoring that you wanted as a consumer. And as a producer apparently it's ok to be burdened with maintaining the type links now as well and be as organized as the Go team with their release process.\r\n\r\nAnd with tools not working to support this, any such refactoring or code comprehension chances are null. Which some are ok with and that's not a very good idea (again, godoc and guru are not the only tools out there).\r\n\r\n\u003e The fact that the context package seems like a bad example to you should point you in the right direction: this proposal helps with it, SemVer doesn't. This proposal is about solving stuff like context, not for what SemVer is useful for.\r\n\r\nYou simply choose to ignore everything that has been said, no?\r\n\r\n\u003e Please provide an example with a couple of types of where SemVer would help and in which this proposal would too (so that it's a sort of counter-proposal).\r\n\r\n- I don't need to provide a counter-proposal\r\n- I don't have the burden to prove this is actually useful and can't be solved in any other way\r\n- I've provided a bunch of examples where this proposal is flawed and how SemVer would actually clearly help\r\n- Others have kindly provided ways to misuse this feature quite happily in the above comments\r\n\r\n@atdiar: \r\n\r\n\u003e But the underlying assumption in go's tooling is that your packages will not be API breaking.\r\n\r\nAssumption is the mother of all issues (to put it nicely). And assumptions can be changed if needed, which seems it's the case.\r\n\r\nThe ongoing discussions to solve the package management state in Go covers the possibility of `go get` getting smarter. Which again, does not need a language change.\r\n\r\n\u003e It will facilitate a lot of things and avoid a lot of issues if we stick with this.\r\n\r\nVagueness everywhere",
	"user": {
		"login": "dlsniper",
		"id": 607868,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-31T15:08:00Z",
	"updated_at": "2016-07-31T15:08:00Z"
}
