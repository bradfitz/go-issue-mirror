{
	"id": 234638163,
	"body": "2 cents from an outside (heavy) developer of Go.\r\n\r\n(1)\r\nThis proposal brings a benefit to the \"owner-maintened libraries\" model, i.e. where a library has still active \u0026 committed owners. Users have few risks of being alone to patch the library (and so dont need to be able to read the library code fluently), owners have strong commitment in improving the library (and so need some power to refactor it).\r\n\r\nI dont know for Google, but this was the case in the large corporate environments I have seen. Each library had its support team (sometimes 1 or 2 men, but still more than zero). A library without active owners was deemed \"deprecated\" and we ran the hell out of here, and this was a project in itself. Maintainers had dozen of user projects, so they needed aliases, wrapper front-ends, etc... for decoupling.\r\n\r\nThis is less the case with the \"user-maintained libraries\" model, i.e., when the user integrates large set of open source-libraries whose owners are not so active (particularly small/medium-size libraries addressing a specific niche). In that model, the user needs to be able to dig into his code fluently to assess the quality (can I rely on it?) and produce patches himself. The users need more power, at the expense of the owners. It is less common in large corporates but prevalent in most startup and medium-size companies.\r\n\r\nAfter having spent years with C++ and Java, Golang is the first language I found which moved the cursor back to the users.\r\n\r\nAliases, as a specific kind of indirection (together with macros, inheritance, override, overload, templates and generics) would slightly move the cursor back to library maintainers. That would benefit corporate library projects and large open-source projects (and, this is my belief, only them).\r\n\r\n(2) For the specific refactoring use-case\r\nSubstituting a wrapper tool (which generates a wrapper library code) to this proposal would be an imperfect solution, on many fronts. But it would not move the cursor between users and maintainers. And it would prevent the use of aliases for other use cases (if that is desired)\r\n\r\n",
	"user": {
		"login": "rgeronimi",
		"id": 3017338,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-07-22T19:45:24Z",
	"updated_at": "2016-07-22T19:45:24Z"
}
