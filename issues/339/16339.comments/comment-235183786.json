{
	"id": 235183786,
	"body": "Yeah, if we have to support all three of type, const and var,\r\nI think it's better to introduce a new keyword alias:\r\n\r\n    alias (\r\n        T1 = pkg.T2\r\n        V1 = pkg.Var\r\n        C1 = pkg.Const\r\n    )\r\n\r\nThe drawback is that you can't see the type of the alias from\r\nthe alias declaration, but x/tools/cmd/guru should be able to\r\nhelp here.\r\n\r\nFWIW, I really think the \"type T =\u003e pkg.T1\" syntax doesn't look\r\ngood. And it's also slightly confusing, for me, I always think\r\nthe arrow should be reversed (there are arguments both ways).\r\nIt's Better to use equal sign when there is no directionality\r\nimplied and this also makes it clear that aliases are equivalent\r\nrelations.\r\n\r\n\r\nRegarding abuses of this feature, all Go features can be abused\r\nincluding Go's distinctive features (goroutine, channel, defers, etc.)\r\nWe don't limit the language to eliminate those abuses. after all,\r\nthe language just provides a mechanism, and not policy. Abusing\r\ngoroutine/channel and goto can produce programs that are hard\r\nto understand both for humans and static analyzers. But as aliases\r\nare fully static and determined at compile time, even if it's abused,\r\nautomated tools should be able to detangle them perfectly. Also,\r\nbecause they are fully determined at compile time, once we have\r\na consensus regarding their use, we can implement tools to check\r\nfor such uses.\r\n\r\nThe bottom line is: if you're that concerned about abuse of Go's\r\nfeatures, I think you should worry about gotos and goroutine/channels\r\n(which can be regarded as a modern form of goto) much more\r\nthan this feature (or think about the reason why they are not abused\r\nin practice and can we use the same mechanism that prevented\r\ntheir abuse to help with aliases?)\r\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 5,
		"+1": 5
	},
	"created_at": "2016-07-26T07:24:45Z",
	"updated_at": "2016-07-26T07:27:11Z"
}
