{
	"id": 236389789,
	"body": "\u003e No, you are right, that you can never be sure about that. In the world I imagine what you do is, you do the move, with a shim at the old place, you announce a breaking API change after a generous grace-period (say, 6 months or a year) on yourproject-announce and remove the shim after that grace-period has passed. You still risk breaking abandoned software (or software with unattentive maintainers), but it would be a risk I, personally, at least would be okay with. The important part is, that for this process to be bearable (i.e. not having stale versions of the code and diamond dependency problems and everything all the time), both an updated and a non-updated client must be able to build the same thing still.\r\n\r\nSo in your imagination developers would rather happily comply with an arbitrary deadline in which most of them will actually upgrade to the proper version while you, the developer cannot do any breaking change to the package / types so that they can upgrade. How is this possible in this imaginative world and using semver correctly not? And why does the maintainer have to pay the price instead of the users which can't semver correctly?\r\n\r\n\u003e The story still isn't actually complete (as there are very close to no backwards-compatible API changes in go), but it paints a picture for the process. There still needs to be significant project management effort behind it, but at least it can eliminate the technical impossibility to do the transition at all.\r\n\r\nI'll be the first one to say it: Go is not representative for software written in Go. There are many libraries / apps out there that would like to break compatibility but can't because of how packages are currently handled.\r\nAlso you pointed out the major flaw in your thinking in an excellent manner:\r\n\u003e There still needs to be significant project management effort behind it, \r\n\r\nI, project owner Florin, do not want to have this burden. I have to make sure I respect versioning correctly, according to http://semver.org/spec/v2.0.0.html and that's it. It's the users problems when they choose to upgrade / apply the needed changes. In the world you envision, no software will ever be done because you'll always be in a constant state of waiting for users to upgrade and deadlines to expire.\r\n\r\nSolving this particular refactoring issue at a language level instead of at a tools level is a _*BAD*_ idea.",
	"user": {
		"login": "dlsniper",
		"id": 607868,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-30T21:02:48Z",
	"updated_at": "2016-07-30T21:02:48Z"
}
