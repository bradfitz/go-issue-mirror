{
	"id": 234582282,
	"body": "@Merovius \r\n\u003e I've been given to understand that Google uses one huge repository for it's complete codebase and has tools to help manage and coordinate large-scale refactorings precisely for that reason. If anything, I'd expect this to be more of a problem for open source software, where you have hundreds of actually independent entities that are known to move slow.\r\n\r\nIt's a problem for both.\r\n\r\nIn the open-source world, you have the problem of coordinating API changes across multiple packages (with multiple maintainers) and maintaining compatibility in the face of version skew.  (Vendoring can help you delay upgrades to resolve version skew, but it cannot help you accelerate them.)\r\n\r\nIn the Google-style monorepo world, you have the problem of churn: if a change is extensive enough, by the time you have fixed up and tested the existing packages, many of them have changed out from under you (and new uses have been added), causing enormous merge conflicts and potential live-lock situations in which the change can never actually be committed.\r\n\r\nThe solution to both is the same: incremental refactoring.  But incremental refactoring across package boundaries is nearly impossible without at least type aliases.\r\n\r\n(FWIW, I am not convinced that the other proposed aliases - particularly variable aliases - are nearly as useful.)",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-22T15:54:42Z",
	"updated_at": "2016-07-22T15:54:42Z"
}
