{
	"id": 234337029,
	"body": "@atdiar \r\n\u003e The question is why introduce a language level feature when the problem is a package management one.\r\n\r\nThe problem is not one that can be solved through package management.  Thus, it cannot be \"a package management [problem]\".\r\n\r\nIf you have a package B whose current releases require V2 of an API (e.g. the H1,...Hn subpackages in my example), and a package C whose current releases require V1, then you must choose: either you never upgrade package B to the current release, or you break package C until it pulls in a fix.  If you don't control both of those packages - or if you expect the transition process for package C to be lengthy - then neither is an acceptable solution.\r\n\r\n\r\n\u003e If you consider a package as a function which may take as input a package and returns Exports, the goal is to transform a single input function into a multiple input one.\r\n\r\nI think that's an oversimplification?  The constraint that packages must be acyclic means that you have to consider the dependencies between the subpackages as part of how you do the transformation.\r\n\r\n\r\n\u003e For refactoring, why not introduce refactored packages then? In other terms, package level aliasing ?\r\n\u003e\r\n\u003e This is just an idea that is not reallly formalized. But I think that the current proposal is not right as it is.\r\n\r\nIf you are going to use the existence of a possible alternative approach as a reason to reject the current proposals, then I think it's on you to demonstrate that that alternative is feasible.  I suspect that a \"refactored packages\" feature would be substantially more complex - harder to teach, harder to use, and perhaps more prone to misuse - than both the current alias proposal and the more restricted \"type T = T2\" alternative.\r\n\r\nI could be wrong.  If I am, I look forward to seeing your alternative proposal.  :)",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-21T18:12:25Z",
	"updated_at": "2016-07-21T18:13:41Z"
}
