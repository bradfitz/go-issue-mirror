{
	"id": 161525778,
	"body": "I had some time to play with this. I made this changes:\r\n```\r\ndiff --git a/http2/http2_test.go b/http2/http2_test.go\r\nindex 0a4da46..20d0fae 100644\r\n--- a/http2/http2_test.go\r\n+++ b/http2/http2_test.go\r\n@@ -61,7 +61,7 @@ func (w twriter) Write(p []byte) (n int, err error) {\r\n \t\t\t}\r\n \t\t}\r\n \t}\r\n-\tw.t.Logf(\"%s\", p)\r\n+\t//w.t.Logf(\"%s\", p)\r\n \treturn len(p), nil\r\n }\r\n \r\ndiff --git a/http2/logger.go b/http2/logger.go\r\nnew file mode 100644\r\nindex 0000000..6301e37\r\n--- /dev/null\r\n+++ b/http2/logger.go\r\n@@ -0,0 +1,90 @@\r\n+// Copyright 2015 The Go Authors. All rights reserved.\r\n+// Use of this source code is governed by a BSD-style\r\n+// license that can be found in the LICENSE file.\r\n+\r\n+package http2\r\n+\r\n+import (\r\n+\t\"fmt\"\r\n+\t\"net\"\r\n+\t\"time\"\r\n+)\r\n+\r\n+type ConnLogger struct {\r\n+\ttitle string\r\n+\tconn  net.Conn\r\n+}\r\n+\r\n+func NewConnLogger(title string, c net.Conn) *ConnLogger {\r\n+\treturn \u0026ConnLogger{title: title, conn: c}\r\n+}\r\n+\r\n+func sliceOfBytesWithManyElementsToString(b []byte) string {\r\n+\tif len(b) == 0 {\r\n+\t\treturn \"\"\r\n+\t}\r\n+\ts := \"\"\r\n+\tfor i, v := range b {\r\n+\t\tif i \u003e 0 {\r\n+\t\t\ts += \" \"\r\n+\t\t}\r\n+\t\ts += fmt.Sprintf(\"%d\", v)\r\n+\t\tif i \u003e 40 {\r\n+\t\t\ts += \" ...\"\r\n+\t\t\tbreak\r\n+\t\t}\r\n+\t}\r\n+\treturn s\r\n+}\r\n+\r\n+func (cl *ConnLogger) Read(b []byte) (n int, err error) {\r\n+\tfmt.Printf(\"%s: about to read some data\\n\", cl.title)\r\n+\tn2, err2 := cl.conn.Read(b)\r\n+\tif err2 != nil {\r\n+\t\tfmt.Printf(\"%s: read error: %v\\n\", cl.title, err2)\r\n+\t} else {\r\n+\t\tfmt.Printf(\"%s: %d bytes read: [%s]\\n\", cl.title, n2, sliceOfBytesWithManyElementsToString(b[:n2]))\r\n+\t}\r\n+\treturn n2, err2\r\n+}\r\n+\r\n+func (cl *ConnLogger) Write(b []byte) (n int, err error) {\r\n+\tfmt.Printf(\"%s: about to write %d bytes: [%s]\\n\", cl.title, len(b), sliceOfBytesWithManyElementsToString(b))\r\n+\tn2, err2 := cl.conn.Write(b)\r\n+\tif err2 != nil {\r\n+\t\tfmt.Printf(\"%s: write error: %v\\n\", cl.title, err2)\r\n+\t} else {\r\n+\t\tfmt.Printf(\"%s: %d bytes written\\n\", cl.title, n2)\r\n+\t}\r\n+\treturn n2, err2\r\n+}\r\n+\r\n+func (cl *ConnLogger) Close() error {\r\n+\terr2 := cl.conn.Close()\r\n+\tif err2 != nil {\r\n+\t\tfmt.Printf(\"%s: close error: %v\\n\", cl.title, err2)\r\n+\t} else {\r\n+\t\tfmt.Printf(\"%s: close OK\\n\", cl.title)\r\n+\t}\r\n+\treturn err2\r\n+}\r\n+\r\n+func (cl *ConnLogger) LocalAddr() net.Addr {\r\n+\treturn cl.conn.LocalAddr()\r\n+}\r\n+\r\n+func (cl *ConnLogger) RemoteAddr() net.Addr {\r\n+\treturn cl.conn.RemoteAddr()\r\n+}\r\n+\r\n+func (cl *ConnLogger) SetDeadline(t time.Time) error {\r\n+\treturn cl.conn.SetDeadline(t)\r\n+}\r\n+\r\n+func (cl *ConnLogger) SetReadDeadline(t time.Time) error {\r\n+\treturn cl.conn.SetReadDeadline(t)\r\n+}\r\n+\r\n+func (cl *ConnLogger) SetWriteDeadline(t time.Time) error {\r\n+\treturn cl.conn.SetWriteDeadline(t)\r\n+}\r\ndiff --git a/http2/server.go b/http2/server.go\r\nindex 8ef9e24..99e4b32 100644\r\n--- a/http2/server.go\r\n+++ b/http2/server.go\r\n@@ -198,6 +198,7 @@ func ConfigureServer(s *http.Server, conf *Server) error {\r\n }\r\n \r\n func (srv *Server) handleConn(hs *http.Server, c net.Conn, h http.Handler) {\r\n+\tc = NewConnLogger(\"server\", c)\r\n \tsc := \u0026serverConn{\r\n \t\tsrv:              srv,\r\n \t\ths:               hs,\r\ndiff --git a/http2/server_test.go b/http2/server_test.go\r\nindex 7a42051..de4a6a5 100644\r\n--- a/http2/server_test.go\r\n+++ b/http2/server_test.go\r\n@@ -131,8 +131,9 @@ func newServerTester(t testing.TB, handler http.HandlerFunc, opts ...interface{}\r\n \t\tif err != nil {\r\n \t\t\tt.Fatal(err)\r\n \t\t}\r\n-\t\tst.cc = cc\r\n-\t\tst.fr = NewFramer(cc, cc)\r\n+\t\tcm := NewConnLogger(\"client\", cc)\r\n+\t\tst.cc = cm\r\n+\t\tst.fr = NewFramer(cm, cm)\r\n \t}\r\n \treturn st\r\n }\r\n```\r\nso I can log all tcp activity and compare what is different between my linux and windows programs. Here are https://gist.github.com/alexbrainman/5cef4b81f3a8ae2f9218#file-linux-txt and https://gist.github.com/alexbrainman/5cef4b81f3a8ae2f9218#file-windows-txt logs for linux and windows. It looks like the difference is in how client handles server closing connection in the middle of large client write. Windows client write fails immediately, followed by client read error. Linux client write fails too, but is followed by successfull read and read EOF after that.\r\n\r\nI don't think you can expect this all to work reliably accross different OS and environments. I have changed the test this way:\r\n```\r\ndiff --git a/http2/http2_test.go b/http2/http2_test.go\r\nindex 0a4da46..20d0fae 100644\r\n--- a/http2/http2_test.go\r\n+++ b/http2/http2_test.go\r\n@@ -61,7 +61,7 @@ func (w twriter) Write(p []byte) (n int, err error) {\r\n \t\t\t}\r\n \t\t}\r\n \t}\r\n-\tw.t.Logf(\"%s\", p)\r\n+\t//w.t.Logf(\"%s\", p)\r\n \treturn len(p), nil\r\n }\r\n \r\ndiff --git a/http2/server_test.go b/http2/server_test.go\r\nindex 7a42051..02e4186 100644\r\n--- a/http2/server_test.go\r\n+++ b/http2/server_test.go\r\n@@ -918,7 +918,7 @@ func TestServer_RejectsLargeFrames(t *testing.T) {\r\n \t// Write too large of a frame (too large by one byte)\r\n \t// We ignore the return value because it's expected that the server\r\n \t// will only read the first 9 bytes (the headre) and then disconnect.\r\n-\tst.fr.WriteRawFrame(0xff, 0, 0, make([]byte, defaultMaxReadFrameSize+1))\r\n+\tst.fr.WriteRawFrame(0xff, 0, 0, make([]byte, 100000000))\r\n \r\n \tgf := st.wantGoAway()\r\n \tif gf.ErrCode != ErrCodeFrameSize {\r\n```\r\nand now it is failing on linux too with:\r\n```\r\n# go test -v -i \u0026\u0026 go test -run=sLa\r\n--- FAIL: TestServer_RejectsLargeFrames (2.14s)\r\n        server_test.go:413: Error while expecting a GOAWAY frame: timeout waiting for frame\r\nFAIL\r\nexit status 1\r\nFAIL    golang.org/x/net/http2  2.327s\r\n#\r\n```\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-03T06:01:54Z",
	"updated_at": "2015-12-03T06:01:54Z"
}
