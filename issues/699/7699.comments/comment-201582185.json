{
	"id": 201582185,
	"body": "Unfortunate indeed, I just wasted many days of project progress on this bug. :crying_cat_face: \r\n\r\nI was intercepting syscalls using ptrace's `syscall.PtraceSyscall` and I was getting `syscall.ESRCH`, but only intermittently after 30k to 200k successful interception enter-exit cycles.\r\n\r\nI think either:\r\n\r\n1. We should add `syscall` package documentation line that reads \"All calls to ptrace for a given child must be made from the same thread; therefore, use `runtime.LockOSThread()` to guarantee this behavior occurs for any programs that use `syscall.Ptrace*(..` functions\".\r\n2. We should call `runtime.LockOSThread()` the first time a `syscall.Ptrace* function is used and document that behavior in the syscall package.\r\n\r\nI realize this is a stupid (non-Go) API fragility, but the current Go API inferface implementation is both guaranteed to break by default for non-trivial ptrace use cases and, while known to be so, is not documented to say so. Perhaps this was less of a major issue back at 1.3 when GOMAXPROCs defaulted to 1?\r\n\r\n@rsc @ianlancetaylor Does this need to be re-evaluated in light of the GOMAXPROCs change that took place with Go 1.5?",
	"user": {
		"login": "tarndt",
		"id": 2077678,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-25T23:27:34Z",
	"updated_at": "2016-03-25T23:27:34Z"
}
