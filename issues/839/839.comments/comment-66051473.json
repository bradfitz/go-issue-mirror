{
	"id": 66051473,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eThis is a compiler bug related to scope handling; most likely related to dot import. The\nfollowing two files expose the problem:\n\n// file p.go\npackage p\n\ntype F int  // if this is renamed to G, the code in main.go compiles\n\ntype S struct {\n\tF int\n}\n\n\n// file main.go\npackage main\n\nimport . \"./p\"\n\nfunc main() {\n\tvar s S\n\ts.F = 0 // this works\n\ts = S{F: 0} // this doesn't\n}\n\n\nCompiling with 6g:\n\n6g p.go \u0026\u0026 6g main.go \nmain.go:8: unknown p.S field 'F' in struct literal\n\n\nThe problem disappears if type F in p.go is renamed to G (or if the field F is named\ndifferently), indicating a scoping issue. The problem also disappears \nif one doesn't use dot import.\n\nSuggested work-around: Don't use dot import (it's better coding practice as well).\u003c/pre\u003e\n\n_Labels changed: added **compilerbug**._\n\n_Owner changed to **r...@golang.org**._\n\n_Status changed to **Accepted**._",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-06-04T23:13:26Z",
	"updated_at": "2014-12-08T10:06:03Z"
}
