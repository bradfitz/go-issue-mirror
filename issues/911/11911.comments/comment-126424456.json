{
	"id": 126424456,
	"body": "It looks like the preemption can happen immediately after the backgroundgc\nis unparked. This is before it has any time to do much of anything beyond\nsetting a few globals.\n\nThe scheduler can suppress the preemption of the background GC during times\nthe mutator does not have any back pressure or ask/force the mutator to do\nassists where we now have no back pressure. Currently this is when we are\nentering or exiting the GC. The assist may well take the form of self\npreemption if it notices the GC should be running on a P but isn't.\n\nBoth approaches have risk, whether the risk of not doing anything is higher\nis unknown.\n\nOn Wed, Jul 29, 2015 at 10:32 PM, Austin Clements \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e I added a probe when we preempt the backgroundgc goroutine. 5 out of 5\n\u003e times I've run it there's been an involuntary preemption of the GC startup\n\u003e operation that takes a long time and lets the heap overflow. It's hard to\n\u003e say if this is cause or effect—the preemption could be happening because\n\u003e we're taking too long to do an operation—but when it happens it certainly\n\u003e exacerbates the situation since the large number of runnable goroutines in\n\u003e this test means the GC goroutine won't get rescheduled for some time.\n\u003e\n\u003e —\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/11911#issuecomment-126163295\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-30T18:23:37Z",
	"updated_at": "2015-07-30T18:23:37Z"
}
