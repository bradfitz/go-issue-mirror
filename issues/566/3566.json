{
	"id": 51280809,
	"number": 3566,
	"state": "closed",
	"title": "encoding/json: decoding can match both field name and struct tag name",
	"body": "\u003cpre\u003eI was getting terribly confused today trying to figure this out:\n----------\npackage main\n\nimport (\n\t\u0026quot;encoding/json\u0026quot;\n\t\u0026quot;fmt\u0026quot;\n)\n\nvar s =\n`{\u0026quot;owner_email\u0026quot;:\u0026quot;first\u0026quot;,\u0026quot;owner\u0026quot;:\u0026quot;second\u0026quot;}`\n\nfunc main() {\n\tvar data struct {\n\t\tOwner string `json:\u0026quot;owner_email\u0026quot;`\n\t}\n\tif err := json.Unmarshal([]byte(s), \u0026amp;data); err != nil {\n\t\tfmt.Printf(\u0026quot;Malformed JSON: %v\u0026quot;, err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\u0026quot;data: %+v\u0026quot;, data)\n}\n----------\n\nI only cared about the \u0026quot;owner_email\u0026quot; field, so was just trying to select it.\nUnfortunately, the decoding of the later \u0026quot;owner\u0026quot; field overwrites it. I'm not\nsure it's a bug, but I'm leaning that way. My reason for thinking it's a bug is that the\n`json:\u0026quot;owner_email\u0026quot;` is declaring that the JSON name for that field is\n\u0026quot;owner_email\u0026quot;, and thus the \u0026quot;owner\u0026quot; field should *not* be matching\nagainst it, even if it was the only piece of the input.\n\nThis is easy enough to work around (I just have to rename the Owner field); I'm not sure\nwhether this qualifies as a clear enough bug to warrant a technical change to the API.\u003c/pre\u003e",
	"user": {
		"login": "dsymonds",
		"id": 31506,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "dsymonds",
		"id": 31506,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2014-12-08T10:18:46Z",
	"created_at": "2012-04-25T13:29:00Z",
	"updated_at": "2016-06-24T22:18:20Z"
}
