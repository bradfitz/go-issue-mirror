{
	"id": 66081406,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eif the Fatalf can't be called from a goroutine,\nhow to report the other goroutine Fatal infomation?\n\nI look over the `testing.T` and `testing.T` source code,\nthe `{t|b}.Fatalf` is thread safe.\n\ncan we use `defer wg.Done()` to fix these issue(net/rpc/server_test.go [1])?\n\nfor p := 0; p \u0026lt; procs; p++ {\n\tgo func() {\n\t\tdefer wg.Done()\n\t\treply := new(Reply)\n\t\tfor atomic.AddInt32(\u0026N, -1) \u0026gt;= 0 {\n\t\t\terr := client.Call(\"Arith.Add\", args, reply)\n\t\t\tif err != nil {\n\t\t\t\tb.Fatalf(\"rpc error: Add: expected no error but got string %q\", err.Error())\n\t\t\t}\n\t\t\tif reply.C != args.A+args.B {\n\t\t\t\tb.Fatalf(\"rpc error: Add: expected %d got %d\", reply.C, args.A+args.B)\n\t\t\t}\n\t\t}\n\t}()\n}\n\n---\n\n[1]\n\u003ca href=\"http://golang.org/src/pkg/net/rpc/server_test.go?s=12968:13320#L548\"\u003ehttp://golang.org/src/pkg/net/rpc/server_test.go?s=12968:13320#L548\u003c/a\u003e\u003c/pre\u003e",
	"user": {
		"login": "chai2010",
		"id": 2295542,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-06-21T05:58:57Z",
	"updated_at": "2014-12-22T06:26:13Z"
}
