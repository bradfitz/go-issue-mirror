{
	"id": 221025598,
	"body": "This is not a bug. This is the way io.Copy was designed and also the basic idea for IO in go. \r\n\r\nThe first sentence in the description of io.Copy explains this:\r\n\r\n```\r\nCopy copies from src to dst until either EOF is reached on src or an error occurs.\r\n```\r\n\r\nMost functions that do some kind of IO use io.EOF to signal the end of a stream of data. The functions and interfaces in the io package are built around this idea. \r\n\r\nSeeing it from another angle, without the io.EOF many functions wouldn't know when to stop. The same holds for code that you write. Without an explicit mechanism like io.EOF you would need to know the exact amount bytes to read or use some other kind of mechanism (like delimiters).\r\n\r\nIf your source doesn't return an io.EOF, it is from the point of view of the io package, an infinite stream. If you don't want your code to \"hang\" forever, you can wrap your reader inside another reader, for example with a [LimitReader](https://golang.org/pkg/io/#LimitReader) or you could implement a type that wraps your io.Reader and adds timeouts to the Read() method. ",
	"user": {
		"login": "nuss-justin",
		"id": 6443781,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-23T16:36:16Z",
	"updated_at": "2016-05-23T16:36:16Z"
}
