{
	"id": 162447451,
	"number": 16194,
	"state": "closed",
	"title": "x/crypto/ssh: Session.Run() returns error EOF",
	"body": "Hi,\r\n\r\nI'm trying to run commands on a router through SSH. The program works fine if I run it against an OpenSSH server, but against the router with its own proprietary implementation of ssh, Session.Run() returns the error EOF. I'm running Go 1.6.2 and tried executing this program on Linux amd64, Windows amd64, Windows i386. Is this a bug and is there a work around?\r\n\r\n```\r\npackage main\r\n\r\nimport(\r\n        \"log\"\r\n        \"bytes\"\r\n        \"golang.org/x/crypto/ssh\"\r\n)\r\n\r\nfunc main() {\r\n        config := \u0026ssh.ClientConfig{\r\n                User: \"admin\",\r\n                Auth: []ssh.AuthMethod{ssh.Password(\"admin\")},\r\n                Config: ssh.Config{\r\n                        Ciphers: []string{\"aes128-cbc\"},\r\n                },\r\n        }\r\n\r\n        client, err := ssh.Dial(\"tcp\", \"192.168.1.1:22\", config)\r\n        if err != nil {\r\n                log.Fatalln(\"Unable to connect: \" + err.Error())\r\n        }\r\n\r\n        defer client.Close()\r\n\r\n        session, err := client.NewSession()\r\n        if err != nil {\r\n                log.Fatalln(\"Unable to open session: \" + err.Error())\r\n        }\r\n\r\n        var b bytes.Buffer\r\n        session.Stdout = \u0026b\r\n\r\n        err = session.Run(\"show Device\")\r\n        if err != nil {\r\n                log.Fatalln(\"Unable to run command: \" + err.Error())\r\n        }\r\n\r\n        log.Println(b.String())\r\n}\r\n```\r\n\r\nThe program returns the following:\r\n\r\nUnable to run command: EOF.",
	"user": {
		"login": "Farioko",
		"id": 7338984,
		"type": "User",
		"site_admin": false
	},
	"comments": 13,
	"closed_at": "2016-07-25T12:11:59Z",
	"created_at": "2016-06-27T13:06:10Z",
	"updated_at": "2016-07-25T12:11:59Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
