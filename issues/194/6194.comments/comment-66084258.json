{
	"id": 66084258,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eThe code lives in a pending CL: \u003ca href=\"https://golang.org/cl/10618043/\"\u003ehttps://golang.org/cl/10618043/\u003c/a\u003e.  I should have\nmade clear that I attached the binary so you could see (=disassemble) exactly which\nhashtable implementation is being used, not with the expectation that you could\nreproduce the crash by running it.  It will take extra work to get a hermetic\nmostly-reproducible test case. \n\nYes, the map is initialized lazily.  z.add is defined here:\n\nfunc (ns *nodeset) add(n nodeid) bool {\n\tsz := len(*ns)\n\tif *ns == nil {\n\t\t*ns = make(nodeset)\n\t}\n\t(*ns)[n] = void{}\n\treturn len(*ns) \u003e sz\n}\n\nThis code is not concurrent.\n\n\n\u003e BTW: The type aliases {nodeid,void} used seems like a non idiomatic coding style.\n\nMaybe so for void, but I think nodeid is fine in the context; comment on the CL if you\nlike.\u003c/pre\u003e",
	"user": {
		"login": "adonovan",
		"id": 5658175,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-20T16:10:51Z",
	"updated_at": "2014-12-08T10:34:03Z"
}
