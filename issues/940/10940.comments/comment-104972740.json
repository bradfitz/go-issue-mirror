{
	"id": 104972740,
	"body": "\"But if that's correctly handled, why bother to check for close before the write?\"\r\n\r\nBecause, as I've tried to explain, the write *always* succeeds. Or rather, it always silently fails. i.e it returns a nil error and n == len(buf)\r\n\r\nI have unit tests where a dummy endpoints closes the connection. I can see the FIN packet in wireshark. The client connection just doesn't seem to care. In some cases if multiple subsequent sends are attempted, a RST may eventually be sent by the server and go will finally realize that the connection is unusable.\r\n\r\nThe only reason I am looking for a way to manually check connection liveness (and in turn the only reason I asked a question about 0-byte read) is because of that surprising failure to honor the FIN in the first place.\r\n\r\nAs explained above, Netty, among others, is perfectly capable of detecting the FIN and reacting appropriately. I would expect go to be able to do something similar: at the very least, writes to a socket having received a FIN should fail. Ideally there should be a way to manually test for that condition before attempting the write but I can live without that as long as writes don't silently fail.\r\n\r\nTOCTTOU is a race. The issue I am facing is not even close to being a race as evidenced by the fact that writes still silently fail several seconds after the socket is closed.\r\n\r\nIs this behavior intentional? If so what is the rationale and is there any way to work around it without forking the net package?\r\n",
	"user": {
		"login": "huguesb",
		"id": 7319881,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-05-24T03:19:25Z",
	"updated_at": "2015-05-24T03:19:25Z"
}
