{
	"id": 104988746,
	"body": "From the wireshark capture, the client doesn't know the server\r\nhas closed the connection, it just knows it has closed its write\r\nend.\r\n\r\nFor example, the tcpdump for my example\r\n(http://play.golang.org/p/MJ62fKYSAD):\r\n\r\n0.397171 IP client \u003e server: Flags [S], seq 564126983, win 43690, options [..], length 0\r\n0.397179 IP server \u003e client: Flags [S.], seq 569645624, ack 564126984, win 43690, options [..], length 0\r\n0.397187 IP client \u003e server: Flags [.], ack 1, win 342, options [..], length 0\r\n0.397227 IP server \u003e client: Flags [P.], seq 1:10, ack 1, win 342, options [..], length 9\r\n0.397231 IP client \u003e server: Flags [.], ack 10, win 342, options [..], length 0\r\n0.397241 IP server \u003e client: Flags [F.], seq 10, ack 1, win 342, options [..], length 0\r\n0.437071 IP client \u003e server: Flags [.], ack 11, win 342, options [..], length 0\r\n1.397365 IP client \u003e server: Flags [P.], seq 1:13, ack 11, win 342, options [..], length 12\r\n1.397371 IP server \u003e client: Flags [.], ack 13, win 342, options [..], length 0\r\n1.397767 IP client \u003e server: Flags [F.], seq 13, ack 11, win 342, options [..], length 0\r\n1.397773 IP server \u003e client: Flags [.], ack 14, win 342, options [..], length 0\r\n\r\n(For demonstration purposes, I added an one second sleep to the\r\nclient code, so that the ACK to server's FIN is not piggybacked\r\non the client's next write. I removed all the TCP options and\r\nclient/server IP:port in the dump for clarity.)\r\n\r\nThe first part looks almost exactly the same as your wireshark\r\ncapture. At time 1.397365, when the client is about to write, from\r\nthe client's standpoint, it really can't know whether the server can\r\naccept the write or not (in your case, it can't, but in my case, it\r\ncan).\r\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-05-24T07:39:02Z",
	"updated_at": "2015-05-24T07:40:04Z"
}
