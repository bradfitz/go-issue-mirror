{
	"id": 98195219,
	"number": 11940,
	"state": "open",
	"title": "encoding/json: Encode channel as array",
	"body": "I'm currency doing something like this to encode a channel:\r\n```go\r\nif _, err = w.Write([]byte{'['}); err != nil {\r\n\treturn err\r\n}\r\nenc := json.NewEncoder(w)\r\nif err = enc.Encode(\u003c-objects); err != nil {\r\n\treturn err\r\n}\r\nfor o := range objects {\r\n\tif _, err = w.Write([]byte{','}); err != nil {\r\n\t\treturn err\r\n\t}\r\n\tif err = enc.Encode(o); err != nil {\r\n\t\treturn err\r\n\t}\r\n}\r\nif _, err = w.Write([]byte{']'}); err != nil {\r\n\treturn err\r\n}\r\n```\r\n\r\nI have a couple issues with this approach:\r\n\r\n1 - It's verbose\r\n2 - enc.Encode terminates each object with a newline character, so I end up with something like:\r\n\r\n```json\r\n[{}\r\n,{}\r\n,{}]\r\n```\r\nInstead of:\r\n```json\r\n[{},{},{}]\r\n```\r\n\r\nWhich is a bit odd because json.Marshal does not terminate with a newline character. I would have expected them both to do the same thing, just Marshal allocates a writer/buffer for you.",
	"user": {
		"login": "lukescott",
		"id": 486224,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"created_at": "2015-07-30T15:16:46Z",
	"updated_at": "2016-10-19T15:28:04Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	},
	"reactions": {
		"total_count": 2,
		"+1": 1,
		"-1": 1
	}
}
