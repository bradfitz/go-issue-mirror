{
	"id": 241891322,
	"body": "Here's another test case:\r\n```\r\n$ cat a.go\r\npackage a\r\nfunc F() (_ struct { _ int32 }) { return }\r\n\r\n$ cat b.go\r\npackage b\r\nfunc F() (_ struct { _ int32 }) { return }\r\n\r\n$ cat c.go\r\npackage c\r\nimport \"./a\"\r\nimport \"./b\"\r\nvar aa = a.F()\r\nvar bb = b.F()\r\nvar _ = aa == bb // \u003c\u003c\u003c comparison should fail\r\n```\r\ngo/types reports an error in this case when type-checking c.go:\r\n```\r\n$ gotype c.go \r\nc.go:6:9: cannot compare aa == bb (mismatched types struct{_ int32} and struct{_ int32})\r\n```\r\nwhich is correct. go/types can report an error because its importer assigns the package from which the struct is imported to the struct's _ field. (That's not correct in general either, because a struct may have been imported transitively and then gets the last package rather than the original one. But fixing this bug for cmd/compile in the export data will also fix this case for go/types).",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"laugh": 1
	},
	"created_at": "2016-08-23T21:50:19Z",
	"updated_at": "2016-08-23T21:50:19Z"
}
