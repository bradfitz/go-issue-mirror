{
	"id": 241888934,
	"body": "I cannot reproduce this anymore with Go1.6 (I don't think it was present in 1.6, the error case was probably flawed due to a buggy exporter/importer at that time).\r\n\r\nThis bug also doesn't exist in Go1.7 - at least given the above testcase. In fact, it happens to have been fixed inadvertently by https://go-review.googlesource.com/#/c/22714/6 ; specifically: https://go-review.googlesource.com/#/c/22714/6/src/cmd/compile/internal/gc/bimport.go, line 521:\r\n\r\nThe exporter doesn't export a package for the (unexported) _ field. The importer uses the builtin package for the _ field. Since any local struct type using a _ field will use the local package for _ field, an anonymous struct with a _ field and a structurally equal imported struct with _ field will have different packages for that field, leading to the expected error.\r\n\r\nBut the \"optimization\" of using the builtin package for imported _ fields is still incorrect because it's possible to export unnamed structs with _ fields which should also not be assignment compatible. Here's a test case:\r\n\r\n```\r\n$ cat a.go\r\npackage a\r\ntype A struct { _ int32 }\r\n\r\n$ cat b.go\r\npackage b\r\nfunc B() (_ struct { _ int32 }) { return }\r\n\r\n$ cat c.go\r\npackage c\r\nimport \"./a\"\r\nimport \"./b\"\r\nvar _ a.A = b.B() // \u003c\u003c\u003c assignment should fail\r\n```",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"laugh": 1
	},
	"created_at": "2016-08-23T21:40:53Z",
	"updated_at": "2016-08-23T21:40:53Z"
}
