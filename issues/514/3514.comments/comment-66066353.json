{
	"id": 66066353,
	"body": "\u003ca id=\"c21\"\u003e\u003c/a\u003eComment 21:\n\n\u003cpre\u003eAdam,\n\nI'm suspecting that the crypto/tls package could be more aggressive at noticing that an\nalertCloseNotify packet is the next thing on the wire (potentially already read by us)\nand returning (non-zero, io.EOF) from its io.Readers instead of its (non-zero, nil)\nresponses.\n\nBut that would require crypto/tls using bufio on its input Reader, so we could do bigger\nreads and get lucky more often and read in more packets than we asked for.  Then, if we\nwere using bufio, we could add *Conn.maybeReadRecord, which returned a packet if\navailable (looking at the un-consumed bytes in bufio.Reader) without blocking longer,\nper the io.Reader contract. Then, if it is an alertCloseNotify behind the application\ndata, we could return io.EOF along with the same Read.\n\nAs a side note, it would be nice if the crypto/tls package had support for easily\nwriting out the symmetric keys as needed by wireshark (\u003ca href=\"http://wiki.wireshark.org/SSL)\"\u003ehttp://wiki.wireshark.org/SSL)\u003c/a\u003e so\ntheories like this could be more easily investigated with production servers (servers\nwhose private keys I don't know and are doing weird things).\n\nI will locally hack up the crypto/tls package probably to debug this, but curious your\nthoughts on the above two items.\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-17T23:47:57Z",
	"updated_at": "2014-12-08T10:18:27Z"
}
