{
	"id": 66060303,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6 by **jordanorelli**:\n\n\u003cpre\u003eI'd love to toss in a +1 for a `,permitnull` option.  The permitnull option would\nsubstitute null for the zero value of a given type.  I.e., if you have a field declared\nthusly:\n\n    Url string `json:\"url,permitnull\"`\n\nand you receive null in some json input, it is unmarshaled to an empty string.\n\n\u003ca href=\"https://dev.twitter.com/docs/api/1.1/get/users/lookup\"\u003ehttps://dev.twitter.com/docs/api/1.1/get/users/lookup\u003c/a\u003e is a good example of what I'm\ntalking about: they have fields that should be string that return null instead of just\nleaving the key off or returning the empty string.\n\nof course, once you use \",permitnull\", you'll be unmarshalling null into empty string,\nand then marshaling it back to empty string instead of null, so it's a consistency\nbreaker.  Since it's opt-in, I find this to be an acceptable risk, but I could see why\nit may be decided that this is not acceptable and prevents any such \",permitnull\" option\nfrom ever appearing.\n\nthere's also the \"just use *string\" argument, but I'm wary of having structs with a\nlarge number of *string fields in an exported interface.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-09-06T23:13:20Z",
	"updated_at": "2014-12-08T10:13:26Z"
}
