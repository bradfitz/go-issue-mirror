{
	"id": 250850486,
	"body": "Basically all floating point printing algorithms use a fast path for most numbers and fall back to a slow path. Go's fast path is the Grisu3 algorithm, which fails for 0.5% of inputs. The fallback is to some slow decimal code that I wrote a long time ago. In practice this is fine. Grisu3 was basically state of the art when it was added here, I believe by @remyoudompheng .\r\n\r\nVery recently a new paper came out that gets the fast path down to \"all but 45 float64 values\", which you can then handle with a table. See Andrysco, Jhala, and Lerner,\r\n\"[Printing Floating-Point Numbers: A Faster, Always Correct Method](https://cseweb.ucsd.edu/~lerner/papers/fp-printing-popl16.pdf)\", POPL 2016.\r\n\r\nIf someone wants to implement that, great, but I don't think it's a particularly high priority.\r\n",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 5,
		"+1": 5
	},
	"created_at": "2016-09-30T20:57:43Z",
	"updated_at": "2016-09-30T20:57:58Z"
}
