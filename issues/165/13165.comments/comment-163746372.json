{
	"id": 163746372,
	"body": "@vcaputo,\r\n\r\n\u003e Unless I'm mistaken, it appears the root of this headache is the lack of a mechanism\r\n\u003e for detecting hangups on the socket out-of-band, so you're forced to read everything\r\n\u003e until EOF, buffering it in userspace, just to realize the hangup. That's a very\r\n\u003e significant shortcoming in Golang if accurate.\r\n\r\nSignificant shortcoming? What is the portable API for this in any other language?\r\n\r\nIn any case, I think the CloseNotifier interface and HTTP/1.1 pipelining just aren't compatible. Even if we started separate goroutines for each pipelined request and serialized their responses, any request using CloseNotify with an infinite response would hang all the other requests from replying.\r\n\r\nAfter much discussion with @martine I think the only sane thing to do here is document that CloseNotify fires when either the connection goes to EOF or an HTTP/1.1 pipelined request arrives on the same connection. (HTTP/2 doesn't have this problem).  In practice this won't matter because no browser uses pipelining by default because it doesn't work on the Internet. The workaround for people who care is to either use HTTP/2 instead, or only use CloseNotifier with non-idempotent requests (e.g. POST instead of GET) when using HTTP/1.",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-10T20:54:07Z",
	"updated_at": "2015-12-10T20:54:17Z"
}
