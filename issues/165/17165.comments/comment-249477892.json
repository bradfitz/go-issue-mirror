{
	"id": 249477892,
	"body": "@supernow Why you take an address of callback pointer? I don't reproduce with following code.\r\n\r\ntest0001.c\r\n```c\r\n#include \u003cprocess.h\u003e\r\n#include \u003cstdio.h\u003e\r\n\r\ntypedef void (*callback) (int, int, char*);\r\n\r\ncallback goCallback;\r\n\r\nvoid\r\ntimeProc(void *p) {\r\n  for (;;) {\r\n\tgoCallback(1, 2, \"Hello\");\r\n  }\r\n}\r\n\r\nvoid\r\ninit(void* p) {\r\n  goCallback = p;\r\n  printf(\"init success!\\n\");\r\n  _beginthread(\u0026timeProc, 0, 0);\r\n  printf(\"End \\n\");\r\n}\r\n```\r\ntest.go\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"C\"\r\n\t\"fmt\"\r\n\t\"net/http\"\r\n\t_ \"net/http/pprof\"\r\n\t\"os\"\r\n\t\"runtime/pprof\"\r\n\t\"syscall\"\r\n\t\"time\"\r\n)\r\n\r\nvar (\r\n\ttimes = 0\r\n\tdll   = syscall.NewLazyDLL(\"test0001.dll\")\r\n\tproc  = dll.NewProc(\"init\")\r\n)\r\n\r\nfunc main() {\r\n\tproc.Call(syscall.NewCallback(goCbStr))\r\n\tf, _ := os.Create(\"cpu.prof\")\r\n\terr := pprof.StartCPUProfile(f)\r\n\tif err != nil {\r\n\t\tfmt.Println(\"pprof.StartCPUProfile:\", err)\r\n\t}\r\n\tdefer pprof.StopCPUProfile()\r\n\tgo func() {\r\n\t\tfmt.Println(http.ListenAndServe(\"localhost:54321\", nil))\r\n\t}()\r\n\tfor {\r\n\t\ttime.Sleep(time.Second)\r\n\t}\r\n}\r\n\r\nfunc goCbStr(callId int, funtype int, str *C.char) uintptr {\r\n\ttimes++\r\n\tfmt.Println(times, callId, funtype, C.GoString(str))\r\n\treturn uintptr(0)\r\n}\r\n```\r\n",
	"user": {
		"login": "mattn",
		"id": 10111,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-26T04:38:18Z",
	"updated_at": "2016-09-26T04:38:18Z"
}
