{
	"id": 51278448,
	"number": 1891,
	"state": "closed",
	"title": "http.ListenAndServe denial of service",
	"body": "by **binary@fiane.dyndns.org**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n\nhttp.ListenAndServer seems to be quite easy to DOS.\n\nThe following example:\n\npackage main\n\nimport (\n    \u0026quot;http\u0026quot;\n    \u0026quot;log\u0026quot;\n    \u0026quot;runtime\u0026quot;\n)\n\nfunc main() {\n\n    http.Handle(\u0026quot;/\u0026quot;, http.FileServer(\u0026quot;.\u0026quot;,\u0026quot;\u0026quot;))\n    err := http.ListenAndServe(\u0026quot;:12345\u0026quot;, nil)\n    if err != nil {\n        log.Fatalln(\u0026quot;ListenAndServe: \u0026quot;, err.String())\n    }\n}\n\nwill eventually bail out and exit the http server with:\n\n2011/05/27 00:29:51 ListenAndServe:  accept tcp [::]:12345: too many open files \n\nCan be produced by running this bash piece\n\n   for i in {0...20000} ; do nc localhost 12345 \u0026amp; done\n\n\nhttp.Serve() likely needs to be more lenient on what errors it considers fatal on\naccept(). (Note that on linux, fast detected client errors can also be returned from\naccept() , such as ENETDOWN, EPROTO, ENOPROTOOPT, EHOSTDOWN, ENONET, EHOSTUNREACH,\nEOPNOTSUPP, and ENETUNREACH)\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n8g\n\nWhich operating system are you using?\nLinux(Fedora 14)\n\nWhich revision are you using?  (hg identify)\nf1519be2d0e9 tip\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2014-12-08T10:10:24Z",
	"created_at": "2011-05-27T15:44:43Z",
	"updated_at": "2016-06-24T19:30:03Z"
}
