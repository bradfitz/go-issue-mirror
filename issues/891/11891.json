{
	"id": 97544684,
	"number": 11891,
	"state": "open",
	"title": "cmd/vet: detect non-64-bit-aligned arguments to sync/atomic funcs",
	"body": "Discussion at https://groups.google.com/d/topic/golang-nuts/CN_rTywuD2U/discussion.\r\n\r\nPer [sync/atomic \"BUG\" note](http://golang.org/pkg/sync/atomic/#pkg-note-BUG):\r\n\r\n\u003eOn both ARM and x86-32, it is **the caller's responsibility to arrange for 64-bit alignment** of 64-bit words accessed atomically. The first word in a global variable or in an allocated struct or slice can be relied upon to be 64-bit aligned. \r\n\r\nIt would be highly desirable if go/vet could detect when this rule is violated and warn about such cases. This note is easy to overlook, and non-trivial to satisfy. It's also not obvious how it applies in more complicated scenarios - e.g.:\r\n\r\n- \"If I have an array of structs, are the first words of each and every structs in the array automatically 64-bit aligned or just the first one?\"\r\n  - *davecheney*: \"Potentially just the first one, it depends if the size of each element, plus padding, is a multiple of 8.\"\r\n- \"Do I need to know the size of a word for each build target in order to make it work correctly?\"\r\n  - *davecheney*: \"Potentially, you may have to special case // +build arm, 386\"\r\n- \"The piece of doc I quoted is so confusing. Is a struct in an allocated array considered allocated struct? If so, should all the structs in the array have its first word 64-bit aligned?\"\r\n  - *iant*: \"The first word in a struct or slice that is allocated via new or via a composite literal will be 64-bit aligned.  A **struct inside a slice or array** is not allocated by itself, and **no particular alignment is guaranteed** beyond that of unsafe.AlignOf. \"\r\n\r\netc. (see the discussion linked above)",
	"user": {
		"login": "akavel",
		"id": 273837,
		"type": "User",
		"site_admin": false
	},
	"comments": 0,
	"created_at": "2015-07-27T20:09:17Z",
	"updated_at": "2015-07-27T21:13:10Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
