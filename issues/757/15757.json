{
	"id": 155839705,
	"number": 15757,
	"state": "open",
	"title": "cmd/cover: go test reports panics on wrong line when using -covermode",
	"body": "1. What version of Go are you using (`go version`)?\r\n\r\nReproduced on both:\r\n- `go version go1.6.2 linux/amd64`\r\n- `go version devel +3b50adb Thu May 19 18:40:53 2016 +0000 linux/amd64`\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/henrik/gopath\"\r\nGORACE=\"\"\r\nGOROOT=\"/home/henrik/.gimme/versions/go\"\r\nGOTOOLDIR=\"/home/henrik/.gimme/versions/go/pkg/tool/linux_amd64\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build860467575=/tmp/go-build -gno-record-gcc-switches\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n3. What did you do?\r\n\r\nProject to reproduce is at https://github.com/henrikhodne/go-cover-test-panic (requires multiple files, otherwise I'd use play.golang.org).\r\n\r\n4. What did you expect to see?\r\n\r\nI'd expect the stack trace from `go test` with and without `-covermode=count` to report the panic on the same line (`foo.go:7`).\r\n\r\n5. What did you see instead?\r\n\r\nWhen enabling the coverage tool (`go test -covermode=count ./...`), the stack trace indicates that the panic is on `foo.go:9`, which is incorrect (probably due to the way the coverage tool injects code to mark lines as called?)\r\n\r\nInterestingly, the line numbers are correct when I move the `Foo()` function into foo_test.go.\r\n\r\n#6329 might be related.",
	"user": {
		"login": "henrikhodne",
		"id": 24421,
		"type": "User",
		"site_admin": false
	},
	"comments": 0,
	"created_at": "2016-05-19T21:28:57Z",
	"updated_at": "2016-05-20T00:21:23Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
