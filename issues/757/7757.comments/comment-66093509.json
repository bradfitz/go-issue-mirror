{
	"id": 66093509,
	"body": "\u003ca id=\"c7\"\u003e\u003c/a\u003eComment 7:\n\n\u003cpre\u003eI don't think we can use Go consts here, because they need to be known at compile-time,\nwhereas a C function's address won't be known at least until link-time (and possibly not\nuntil run-time).\n\nHowever, two possible ways to address this problem (both of which ultimately defer to\nthe Go compiler to reject assignments to C.foo):\n\n1. Instead of emitting C.foo as \"_Cfpvar_fp_foo\", emit it as\n\"unsafe.Pointer(_Cfpvar_fp_foo)\".  The explicit conversion would make it\nnon-addressable.  (I'd probably actually emit as \"_Cgo_pointer(_Cfpvar_fp_foo)\" and\nchange the \"type _ unsafe.Pointer\" in _cgo_gotypes.go to \"type _Cgo_pointer\nunsafe.Pointer\" to avoid worrying about whether package \"import\" is available in the\nuser code.)\n\n2. Emit it as a function call like \"_Cfpvar_fp_foo()\" and change _Cfpvar_fp_foo into a C\nfunction that returns the address of 'foo'.\u003c/pre\u003e",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-08-06T22:02:15Z",
	"updated_at": "2014-12-08T10:43:01Z"
}
