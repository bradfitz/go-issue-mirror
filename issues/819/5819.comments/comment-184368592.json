{
	"id": 184368592,
	"body": "**tl;dr** my expectation is that gob should be able to cleanly serialize the total visible serializable state of any instance of a Go type.\r\n\r\nI was trying to serialize and deserialize cluster configurations within the gocql library: https://godoc.org/github.com/gocql/gocql#ClusterConfig\r\n\r\n(Also, embarrassed to say I missed the encoding.Binary{Marshaler,Unmarshaler} interfaces)\r\n\r\nUnfortunately I didn't write gocql, so for now I'm using my own struct and copying values over.  Either way I find the behavior of gob in this circumstance to be somewhat inconsistent with the rest of the library.\r\n\r\nGiven that gob does nice things around skipping function pointers, channels, unexported fields, etc. cleanly and making a best effort around type matching when the tags and field names don't match, throwing an error if a struct with no exported fields is visible anywhere in your object hierarchy is surprising.  The spirit of gob otherwise seems to be very much do the sane thing with best effort around all exposed state and while I would understand the condition of no exported fields anywhere in the hierarchy being an error, it would be convenient to be able to override the behavior with respect to non-root nodes in the object tree so to speak.  Not asking for a change in default behavior, but perhaps increased configurability.  Also a change would have no effect on the binary format or the unmarshal / deserialize operation.\r\n\r\nHappy to propose a change and put up a PR if you are amenable to it?",
	"user": {
		"login": "robmccoll",
		"id": 2169777,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-15T20:10:25Z",
	"updated_at": "2016-02-15T20:18:29Z"
}
