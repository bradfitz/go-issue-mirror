{
	"id": 192748539,
	"body": "This is probably out of my reach, but I'll write a few notes for the posterity.\r\n\r\nIn both \r\n```go\r\na := [100000000]int64{}\r\n```\r\nand\r\n\r\n```go\r\na := [100000000]int64{1}\r\n```\r\nthe compiler correctly marks `a` as escaping and moves it to the heap. \r\n\r\nThe problem is that the for the latter the compiler generates an `autotmp_0001` variabile to hold the array literal. `autotmp`s are generated by the `Tempname` function in `gen.go` and they're always marked as not escaping (`n.Esc = EscNever`). For this reason when the compiler computes the stack size of the function (`allocauto` function in `pgen.go`), looping over the function variables, `a` is skipped (because it's marked as escaping), while `autotmp_0001` is not. The compiler add the size of `autotmp_0001` (which is \u003e 1 GB) to the total stack size, and then at runtime the program calls morestack and it panics because the stack is too big.\r\n\r\n",
	"user": {
		"login": "ALTree",
		"id": 3586803,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-05T21:50:53Z",
	"updated_at": "2016-03-05T21:50:53Z"
}
