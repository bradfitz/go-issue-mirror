{
	"id": 66050829,
	"body": "\u003ca id=\"c10\"\u003e\u003c/a\u003eComment 10:\n\n\u003cpre\u003eOn second thought, I am not convinced anymore this is good enough.\n\nShould \\r (the utf-8 byte) also be stripped from interpreted string literals? And if\nnot, why not?\n\nIn the spec we refer to \"line breaks\" explicitly (or mostly) as newline (which is\ndefined as \\n), but for interpreted string literals we say that they cannot span\nmultiple lines. On a \\r-based system, an interpreted string containing a \\r byte will\nmake it appear on multiple lines; on a \\n-based system it will appear on one. Is the\nstring legal or not?\n\nSimilarly for comments: Multi-line comments act like newline, which matters for\nsemicolon insertion. When is a comment mult-iline? It may depend on the system (newline\nis defined, on the other hand).\n\nI think we want to be able to take a given source (\\r, \\r\\n, or \\n-based) to be\nreproduced into an equivalent program (e.g. w/ gofmt) on system with a different line\nbreak.\n\nOne way out might be:\n\n- We don't care about \\r-based systems; a line break is present if there is a \\n byte.\n- Consequently, a string or comment spans multiple lines if there is a \\n byte.\n- \\r bytes outside strings act as white space, they are ignored inside (all?) strings.\n\nThus, avoiding the notion of \"multiple lines\":\n\n- A general comment containing newlines acts like a newline; otherwise it acts like a\nspace.\n- An interpreted string may not contain newlines.\n- \\r chars are ignored in all strings. (?)\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-12-15T06:59:53Z",
	"updated_at": "2014-12-08T10:05:29Z"
}
