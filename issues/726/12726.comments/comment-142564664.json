{
	"id": 142564664,
	"body": "Passing x or y to fmt.Printf causes the anonymous structs to escape.  They are as a result allocated by the runtime.  All zero-sized objects allocated by the runtime are given the same address.\r\n\r\nIf you don't pass x or y to fmt.Printf, then the anonymous structs they reference are \"allocated\" on the stack.  They happen to get the same address in this instance.\r\n\r\nYour middle case generates one runtime allocation and one stack allocation, which is why they are not equal.\r\n\r\nI agree that having \u0026struct{}{} generate unique addresses would be marginally more useful than the current situation.  But the only way I see to implement that is to treat struct{} as a 1-byte type.  At that point, you might as well use a byte object instead (in cases where you care).  So I don't see a compelling reason why we should introduce special cases for struct{} into the language.\r\n",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-23T10:53:02Z",
	"updated_at": "2015-09-23T10:53:02Z"
}
