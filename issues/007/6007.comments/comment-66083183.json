{
	"id": 66083183,
	"body": "\u003ca id=\"c36\"\u003e\u003c/a\u003eComment 36:\n\n\u003cpre\u003eI had a go at implementing similar logic to\n\u003ca href=\"https://golang.org/cl/53010043/patch/160001/170003\"\u003ehttps://golang.org/cl/53010043/patch/160001/170003\u003c/a\u003e. That requires\nQueryPerformanceFrequency and QueryPerformanceCounter. Unfortunately these don't work on\nmy computer (windows xp sp3). This program:\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"syscall\"\n\t\"unsafe\"\n)\n\nvar (\n\tmodkernel32                   = syscall.NewLazyDLL(\"kernel32.dll\")\n\tprocQueryPerformanceFrequency = modkernel32.NewProc(\"QueryPerformanceFrequency\")\n\tprocQueryPerformanceCounter   = modkernel32.NewProc(\"QueryPerformanceCounter\")\n\tprocSleep                     = modkernel32.NewProc(\"Sleep\")\n)\n\nfunc QueryPerformanceFrequency(frequency *int64) (err error) {\n\tr1, _, e1 := syscall.Syscall(procQueryPerformanceFrequency.Addr(), 1, uintptr(unsafe.Pointer(frequency)), 0, 0)\n\tif r1 == 0 {\n\t\tif e1 != 0 {\n\t\t\terr = error(e1)\n\t\t} else {\n\t\t\terr = syscall.EINVAL\n\t\t}\n\t}\n\treturn\n}\n\nfunc QueryPerformanceCounter(counter *int64) (err error) {\n\tr1, _, e1 := syscall.Syscall(procQueryPerformanceCounter.Addr(), 1, uintptr(unsafe.Pointer(counter)), 0, 0)\n\tif r1 == 0 {\n\t\tif e1 != 0 {\n\t\t\terr = error(e1)\n\t\t} else {\n\t\t\terr = syscall.EINVAL\n\t\t}\n\t}\n\treturn\n}\n\nfunc Sleep(milliseconds uint32) {\n\tsyscall.Syscall(procSleep.Addr(), 1, uintptr(milliseconds), 0, 0)\n\treturn\n}\n\nfunc run() error {\n\tconst sleepTime = 1000 // milliseconds\n\tvar freq, c1, c2, elapsed int64\n\terr := QueryPerformanceFrequency(\u0026freq)\n\tif err != nil {\n\t\treturn err\n\t}\n\terr = QueryPerformanceCounter(\u0026c1)\n\tif err != nil {\n\t\treturn err\n\t}\n\tSleep(sleepTime)\n\terr = QueryPerformanceCounter(\u0026c2)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Printf(\"freq=%v c1=%v c2=%v\\n\", freq, c1, c2)\n\telapsed = c2 - c1\n\telapsed *= 1000\n\telapsed /= freq\n\tfmt.Printf(\"expected to sleep %d milliseconds, but slept for %d\\n\", sleepTime, elapsed)\n\treturn nil\n}\n\nfunc main() {\n\terr := run()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nprints\n\nC:\\\u003eu:\\test\nfreq=2992510000 c1=7164703103697 c2=7165973295765\nexpected to sleep 1000 milliseconds, but slept for 424\n\nC:\\\u003eu:\\test\nfreq=2992510000 c1=7169081842638 c2=7170240724920\nexpected to sleep 1000 milliseconds, but slept for 387\n\nC:\\\u003eu:\\test\nfreq=2992510000 c1=7171448379462 c2=7172621592201\nexpected to sleep 1000 milliseconds, but slept for 392\n\nC:\\\u003eu:\\test\nfreq=2992510000 c1=7173720760509 c2=7174864821591\nexpected to sleep 1000 milliseconds, but slept for 382\n\nC:\\\u003eu:\\test\nfreq=2992510000 c1=7175887542162 c2=7177105452861\nexpected to sleep 1000 milliseconds, but slept for 406\n\nC:\\\u003eu:\\test\nfreq=2992510000 c1=7178472882108 c2=7179632072496\nexpected to sleep 1000 milliseconds, but slept for 387\n\nC:\\\u003eu:\\test\nfreq=2992510000 c1=7180663195404 c2=7181818244919\nexpected to sleep 1000 milliseconds, but slept for 385\n\nI verified that Sleep works as expected (I extended the sleep to 10 seconds and actually\nmeasured it with stop watch). I cannot reproduce that problem anywhere else.\n\nLooking for suggestions.\n\nAlex\u003c/pre\u003e",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-07-15T04:54:12Z",
	"updated_at": "2014-12-08T10:33:03Z"
}
