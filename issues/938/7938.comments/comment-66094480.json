{
	"id": 66094480,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eYou have to checked Signaled to see whether the process exited because of a signal. \nThis is a direct reflection of the way that Unix wait status work in Go.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"sleep\", \"1000000\")\n\tcmd.Start()\n\n\tdone := make(chan struct{})\n\tgo func() {\n\t\terr := cmd.Wait()\n\t\tstatus := cmd.ProcessState.Sys().(syscall.WaitStatus)\n\t\texitStatus := status.ExitStatus()\n\t\tsignaled := status.Signaled()\n\t\tsignal := status.Signal()\n\n\t\tfmt.Println(\"Error:\", err)\n\t\tif signaled {\n\t\t\tfmt.Println(\"Signal:\", signal)\n\t\t} else {\n\t\t\tfmt.Println(\"Status:\", exitStatus)\n\t\t}\n\n\t\tclose(done)\n\t}()\n\n\tcmd.Process.Kill()\n\n\t\u0026lt;-done\n}\u003c/pre\u003e\n\n\n\n_Status changed to **WorkingAsIntended**._",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-05-05T13:40:26Z",
	"updated_at": "2014-12-22T06:34:18Z"
}
