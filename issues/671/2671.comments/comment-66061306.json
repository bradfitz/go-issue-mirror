{
	"id": 66061306,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eI am still seeing a bit of a slowdown:\n\nbenchmark                      old ns/op    new ns/op    delta\nBenchmarkString100Base10            1662         1695   +1.99%\nBenchmarkString1000Base10           9732         9838   +1.09%\nBenchmarkString10000Base10         42616        43845   +2.88%\nBenchmarkString100000Base10     14408500     15512376   +7.66%\n\nThe new numbers are with using t*10 instead of the existing code. With 6g, the generated\ncode still looks like before as far as I can tell:\n\n5420 (nat.go:887) MOVQ    SI,BP\n5421 (nat.go:887) MOVQ    SI,i+-32(SP)\n5422 (nat.go:887) CMPQ    SI,R14\n5423 (nat.go:887) JCS     $1,5426\n5424 (nat.go:887) CALL    ,runtime.panicindex+0(SB)\n5425 (nat.go:887) UNDEF   ,\n5426 (nat.go:887) LEAQ    (BX)(BP*1),BX\n5427 (nat.go:887) MOVQ    AX,BP\n5428 (nat.go:887) IMULQ   $10,BP   \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; not using\nshifts and adds for *10\n5429 (nat.go:887) MOVQ    DI,R8\n5430 (nat.go:887) SUBQ    BP,R8\n5431 (nat.go:887) MOVQ    R8,BP\n5432 (nat.go:887) MOVQ    charset+48(FP),R8\n5433 (nat.go:887) MOVQ    charset+56(FP),R9\n5434 (nat.go:887) CMPQ    BP,R9\n5435 (nat.go:887) JCS     $1,5438\n5436 (nat.go:887) CALL    ,runtime.panicindex+0(SB)\n5437 (nat.go:887) UNDEF   ,\n5438 (nat.go:887) LEAQ    (R8)(BP*1),R8\n5439 (nat.go:887) MOVBQZX (R8),BP\n5440 (nat.go:887) MOVB    BP,(BX)\n\nI prefer to leave this open and no make changes to nat.go for a bit longer. For one, the\ncode is working fine as is and appears to be faster for large strings.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-11-07T23:51:17Z",
	"updated_at": "2014-12-22T06:05:25Z"
}
