{
	"id": 66055449,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11:\n\n\u003cpre\u003epackage main\n\t\n\timport (\n\t\t\"runtime\"\n\t\t\"fmt\"\n\t\t\"time\"\n\t)\n\t\n\ttype Foo bool\n\t\n\tfunc main() {\n\t\tfor i := 0;; i++ {\n\t\t\tnewFoo()\n\t\t\tif i%100 == 0 {\n\t\t\t\ttime.Sleep(100*time.Millisecond)\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar count int\n\tvar nfin int\n\t\n\tfunc newFoo() *Foo {\n\t\tf := new(Foo)\n\t\tthis := count\n\t\truntime.SetFinalizer(f, func(_ *Foo) {\n\t\t\tnfin++\n\t\t\tfmt.Printf(\"finalized #%d %d/%d\\n\", this, nfin, count)\n\t\t})\n\t\tcount++\n\t\treturn f\n\t}\n\nSleeping every once in a while makes it work fine, so this only affects cpu-bound\nprograms.  In that sense it is not much different from any other cpu-bound goroutine\nstarving the others.  This won't be fixed for Go 1, but at least we understand it.\u003c/pre\u003e\n\n_Labels changed: added **priority-later**, removed **priority-go1**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-02-20T01:04:39Z",
	"updated_at": "2014-12-08T10:09:21Z"
}
