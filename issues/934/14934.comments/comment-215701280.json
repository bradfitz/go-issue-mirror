{
	"id": 215701280,
	"body": "Sparse phi insertion helps.\r\nDoesn't get back all the performance, but lots better than it was.\r\n(Timings on a Macbook Air laptop running on battery)\r\n```\r\nexport GO_SSA_PHI_LOC_CUTOFF=0 # use sparse everywhere\r\ntime go test\r\n...\r\nreal\t0m13.318s\r\nuser\t0m14.309s\r\nsys\t0m0.863s\r\n```\r\n\r\n```\r\nexport GO_SSA_PHI_LOC_CUTOFF=-1 # use sparse nowhere\r\ntime go test\r\n...\r\nreal\t0m33.241s\r\nuser\t0m39.499s\r\nsys\t0m2.954s\r\n```\r\n\r\n```\r\nexport GO_SSA_PHI_LOC_CUTOFF=2500000 # default threshold 2.5million (#vars*#blocks)\r\ntime go test\r\n...\r\nreal\t0m13.448s\r\nuser\t0m14.335s\r\nsys\t0m0.955s\r\n```\r\n\r\nNew profiles from compiling lexer_test.  `locatePotentialPhiFunctions` is still doing a lot of work even when sparse and there might be some upside hiding there, but the big pig is now register allocation and all the memory that it allocates.  I've annotated regalloc (and stack alloc) with R and phi location with P\r\n```\r\n(pprof) top 30\r\n10450ms of 12120ms total (86.22%)\r\nDropped 249 nodes (cum \u003c= 60.60ms)\r\nShowing top 30 nodes out of 109 (cum \u003e= 180ms)\r\n      flat  flat%   sum%        cum   cum%\r\n    4050ms 33.42% 33.42%     4300ms 35.48%  runtime.(*mcentral).grow\r\n    1130ms  9.32% 42.74%     2020ms 16.67%  runtime.scanobject\r\n     510ms  4.21% 46.95%      510ms  4.21%  runtime.memclr\r\n     470ms  3.88% 50.83%      680ms  5.61%  cmd/compile/internal/ssa.(*regAllocState).computeLive R\r\n     470ms  3.88% 54.70%      470ms  3.88%  cmd/compile/internal/ssa.copyelimValue\r\n     430ms  3.55% 58.25%     4420ms 36.47%  cmd/compile/internal/ssa.(*regAllocState).regalloc R\r\n     400ms  3.30% 61.55%      400ms  3.30%  runtime.heapBitsForObject\r\n     300ms  2.48% 64.03%      490ms  4.04%  runtime.greyobject\r\n     280ms  2.31% 66.34%      280ms  2.31%  runtime.usleep\r\n     240ms  1.98% 68.32%      240ms  1.98%  runtime.memmove\r\n     210ms  1.73% 70.05%      210ms  1.73%  cmd/compile/internal/ssa.(*sparseSet).addAll R?\r\n     200ms  1.65% 71.70%      230ms  1.90%  runtime.evacuate\r\n     190ms  1.57% 73.27%      190ms  1.57%  runtime.duffcopy\r\n     180ms  1.49% 74.75%      620ms  5.12%  runtime.mapassign1\r\n     140ms  1.16% 75.91%      190ms  1.57%  cmd/compile/internal/ssa.(*Block).removePred\r\n     120ms  0.99% 76.90%      200ms  1.65%  runtime.(*mheap).allocSpanLocked\r\n     100ms  0.83% 77.72%      100ms  0.83%  cmd/compile/internal/ssa.(*Value).resetArgs\r\n     100ms  0.83% 78.55%      780ms  6.44%  cmd/compile/internal/ssa.(*node32).insert P\r\n      90ms  0.74% 79.29%      140ms  1.16%  cmd/compile/internal/ssa.(*node32).glb P\r\n      90ms  0.74% 80.03%       90ms  0.74%  cmd/compile/internal/ssa.(*regAllocState).addUse R\r\n      90ms  0.74% 80.78%       90ms  0.74%  runtime/internal/atomic.Or8\r\n      80ms  0.66% 81.44%     1470ms 12.13%  cmd/compile/internal/gc.(*state).locatePotentialPhiFunctions P\r\n      80ms  0.66% 82.10%       80ms  0.66%  cmd/compile/internal/ssa.(*Func).freeValue\r\n      80ms  0.66% 82.76%     2720ms 22.44%  cmd/compile/internal/ssa.(*edgeState).setup R\r\n      80ms  0.66% 83.42%      550ms  4.54%  cmd/compile/internal/ssa.deadcode\r\n      80ms  0.66% 84.08%      100ms  0.83%  cmd/compile/internal/ssa.phielimValue\r\n      80ms  0.66% 84.74%      260ms  2.15%  runtime.interhash\r\n      70ms  0.58% 85.31%       70ms  0.58%  runtime.aeshash64\r\n      60ms   0.5% 85.81%      110ms  0.91%  runtime.ifaceeq\r\n      50ms  0.41% 86.22%      180ms  1.49%  cmd/compile/internal/ssa.(*Func).setHome\r\n```\r\n```\r\n(pprof) top 10\r\n7644243 of 7968348 total (95.93%)\r\nDropped 184 nodes (cum \u003c= 39841)\r\nShowing top 10 nodes out of 37 (cum \u003e= 103353)\r\n      flat  flat%   sum%        cum   cum%\r\n   4655276 58.42% 58.42%    4655276 58.42%  cmd/compile/internal/ssa.(*edgeState).set R\r\n   1261053 15.83% 74.25%    1261053 15.83%  cmd/compile/internal/ssa.(*Func).newValue\r\n    573464  7.20% 81.44%    1083992 13.60%  cmd/compile/internal/gc.(*state).locatePotentialPhiFunctions P\r\n    458766  5.76% 87.20%     494125  6.20%  cmd/compile/internal/ssa.(*SparseTreeMapper).Insert P\r\n    327695  4.11% 91.31%     327695  4.11%  cmd/compile/internal/ssa.(*Value).AddArgs\r\n    131077  1.64% 92.96%     131077  1.64%  cmd/compile/internal/gc.Nod\r\n    103957  1.30% 94.26%    4799453 60.23%  cmd/compile/internal/ssa.(*regAllocState).regalloc R\r\n    100187  1.26% 95.52%    1327832 16.66%  cmd/compile/internal/gc.(*state).lookupVarOutgoing P\r\n     16384  0.21% 95.73%     510509  6.41%  cmd/compile/internal/gc.(*phimap).Insert P\r\n     16384  0.21% 95.93%     103353  1.30%  cmd/compile/internal/gc.walkexpr\r\n```\r\n```\r\n1151.23MB of 1239.99MB total (92.84%)\r\nDropped 165 nodes (cum \u003c= 6.20MB)\r\nShowing top 20 nodes out of 56 (cum \u003e= 48.53MB)\r\n      flat  flat%   sum%        cum   cum%\r\n  156.30MB 12.60% 12.60%   498.03MB 40.16%  cmd/compile/internal/ssa.(*regAllocState).regalloc R\r\n  154.71MB 12.48% 25.08%   154.71MB 12.48%  cmd/compile/internal/ssa.(*Func).newValue\r\n  133.28MB 10.75% 35.83%   135.59MB 10.94%  cmd/compile/internal/ssa.(*regAllocState).computeLive R\r\n  106.17MB  8.56% 44.39%   106.17MB  8.56%  cmd/compile/internal/ssa.(*Func).setHome\r\n   93.66MB  7.55% 51.95%   257.41MB 20.76%  cmd/compile/internal/gc.(*state).lookupVarOutgoing P\r\n   56.57MB  4.56% 56.51%    57.12MB  4.61%  cmd/compile/internal/ssa.(*stackAllocState).stackalloc R\r\n   53.74MB  4.33% 60.84%    53.74MB  4.33%  cmd/compile/internal/ssa.(*stackAllocState).buildInterferenceGraph R\r\n   51.98MB  4.19% 65.03%    52.50MB  4.23%  cmd/compile/internal/ssa.(*stackAllocState).computeLive R\r\n   46.57MB  3.76% 68.79%   182.17MB 14.69%  cmd/compile/internal/ssa.(*regAllocState).init R\r\n   45.83MB  3.70% 72.49%    45.83MB  3.70%  cmd/compile/internal/ssa.cse\r\n   42.01MB  3.39% 75.87%    42.01MB  3.39%  cmd/compile/internal/ssa.schedule\r\n   36.20MB  2.92% 78.79%   142.45MB 11.49%  cmd/compile/internal/ssa.(*stackAllocState).init R\r\n      36MB  2.90% 81.70%       36MB  2.90%  cmd/compile/internal/ssa.(*edgeState).set R\r\n   34.03MB  2.74% 84.44%    34.03MB  2.74%  cmd/compile/internal/ssa.(*node32).insert P\r\n   27.16MB  2.19% 86.63%    27.16MB  2.19%  cmd/compile/internal/ssa.(*Func).newSparseSet R?\r\n   18.04MB  1.45% 88.09%    70.21MB  5.66%  cmd/compile/internal/gc.(*state).locatePotentialPhiFunctions P\r\n   15.13MB  1.22% 89.31%    15.13MB  1.22%  cmd/compile/internal/gc.(*state).addNamedValue\r\n      15MB  1.21% 90.52%       15MB  1.21%  cmd/compile/internal/ssa.(*Value).AddArgs\r\n   14.85MB  1.20% 91.71%    14.85MB  1.20%  cmd/compile/internal/ssa.tighten\r\n      14MB  1.13% 92.84%    48.53MB  3.91%  cmd/compile/internal/ssa.(*SparseTreeMapper).Insert P\r\n```\r\n",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-29T12:45:10Z",
	"updated_at": "2016-04-29T12:45:10Z"
}
