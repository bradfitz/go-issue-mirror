{
	"id": 51277128,
	"number": 934,
	"state": "closed",
	"title": "encoding/gob:  another problem with zero values in arrays",
	"body": "by **sonia1427**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n\npackage main\n\nimport (\n    \u0026quot;bytes\u0026quot;\n    \u0026quot;fmt\u0026quot;\n    \u0026quot;gob\u0026quot;\n)\n\nfunc main() {\n    a := [3]int{2, 1, 0}\n    b := new(bytes.Buffer)\n    gob.NewEncoder(b).Encode(a)\n    err := gob.NewDecoder(b).Decode(\u0026amp;a)\n    fmt.Println(err)\n}\n\nWhat is the expected output?\n\u0026lt;nil\u0026gt;\n\nWhat do you see instead?\ngob: length mismatch in decodeArray\n\nWhat is your $GOOS?  $GOARCH?\nlinux amd64\n\nWhich revision are you using?  (hg identify)\n20b5026b3332+ tip\n\nPlease provide any additional information below.\nThis is a little different than \u003ca href=\"https://golang.org/issue/459\"\u003eissue #459\u003c/a\u003e.  That regression test on arrays inside of\nstructs still passes.  This naked array (which wasn't allowed at the time of \u003ca href=\"https://golang.org/issue/459\"\u003eissue #459\u003c/a\u003e)\nfails.  Also, it only seems to fail when a trailing element is zero.  Zeros at the\nbeginning and middle are okay.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2014-12-08T10:06:25Z",
	"created_at": "2010-07-20T06:08:02Z",
	"updated_at": "2016-06-24T19:17:52Z"
}
