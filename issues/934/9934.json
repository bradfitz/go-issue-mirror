{
	"id": 58265900,
	"number": 9934,
	"state": "closed",
	"title": "cmd/ld, runtime: all ELF go binaries contain two symbols called 'runtime.main.f'",
	"body": "On Linux:\r\n\r\n```shellsession\r\nmwhudson@narsil:go-test-cases$ cat trivial.go\r\npackage main\r\n\r\nfunc main() {\r\n\r\n}\r\nmwhudson@narsil:go-test-cases$ go build trivial.go\r\nmwhudson@narsil:go-test-cases$ nm trivial | grep -F runtime.main.f\r\n0000000000470e90 R runtime.main.f\r\n0000000000470e98 R runtime.main.f\r\n```\r\n\r\nThis is because the linker normalizes middle dots to periods.  The source of the two symbols:\r\n\r\n1. The runtime package defines a variable called runtime路main路f (in asm_$GOARCH.s)\r\n2. As with all functions, the compiler creates a symbol called \"\".main路f to support indirect calls to runtime.main, which is read by the linker as runtime.main路f\r\n\r\nThis doesn't really cause problems today because the collision happens so late in the writing process, when you're executing an elf binary nothing really cares about the symbol names.  It's a problem when you want to do dynamic linking stuff though, because the symbol names start mattering again.\r\n\r\nIt feels like these two symbols are actually meant to be the same, but I don't know how to make that happen.  The simplest fix would be to make the names different enough to not collide in the symbol table.",
	"user": {
		"login": "mwhudson",
		"id": 672022,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2015-04-10T03:49:54Z",
	"created_at": "2015-02-19T20:35:12Z",
	"updated_at": "2016-06-25T02:01:19Z"
}
