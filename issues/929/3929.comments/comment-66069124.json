{
	"id": 66069124,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eThank you for the detailed explanation.\n\nIt seems to me that evaluating the append should not change ar in any way. Only once the\nresult of that evaluation is assigned to ar on the left side of the '=' should ar[1] on\nthe right change. But according to spec, that assignment of the result of append() gets\nassigned to ar as the very last step in the entire process.\n\nn, ar = ar[1], append(ar[:1], ar[2:]...)\n\n'append' is described as an function that leaves the underlying array untouched.\n\nTo my mind the spec says for this case:\n\n1.) we have nothing special on the left, so look at the right.\n2.) evaluate append() to 'X' - leaving the ar itself untouched\n3.) assign the values on the right to the variables on the left in left-to-right order,\nso...\n4.) n gets the value of ar[1] (at this point, ar is still untouched)\n5.) ar is assigned the result of append(), namely 'X'\n\nThe 6g version seems to run as follows:\n\n1.) we have nothing special on the left, so look at the right.\n2.) evaluate append() to 'X' - leaving the ar itself untouched\n3.) update ar with the result of the append (this seems wrong)\n3.) assign the values on the right to the variables on the left in left-to-right order\n4.) n gets the value of ar[1] (at this point, ar has been changed during the evaluation\nof append()\n5.) ar has already been changed\u003c/pre\u003e",
	"user": {
		"login": "gpaul",
		"id": 442,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-08-10T08:32:37Z",
	"updated_at": "2014-12-08T10:20:49Z"
}
