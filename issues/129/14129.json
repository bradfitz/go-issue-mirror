{
	"id": 129416876,
	"number": 14129,
	"state": "open",
	"title": "crypto/x509: parsing of certificates with exponent length \u003e 32bit fails on GOARCH=386",
	"body": "1.) What version of Go are you using (go version)?\r\ngo1.6beta2 \r\n2.) What operating system and processor architecture are you using?\r\nArchitecture: 386 OS: windows\r\n3.) What did you do?\r\nTried to parse a valid X.509 certificate using the public key exponent \"4044784889\" (0xf11684f9) with crypto/x509.ParseCertificate()\r\n4.) What did you expect to see?\r\nCertificate parses without error\r\n5.) What did you see instead?\r\nParsing the certificate fails under Windows GOARCH=386 with \"asn1: structure error: integer too large\". It works correctly if compiled with GOARCH=amd64 and running on a 64bit OS.\r\n\r\nMost certificates use 65537 as exponent which works fine, however according to NIST\r\n\"applications should be able to process RSA public keys that have any public exponent\r\nthat is an odd positive integer greater than or equal to 65537 and less than 2^256.\"\r\n\r\n[NIST Cryptographic Algorithms and Key Sizes for Personal Identity Verification](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-78-4.pdf)\r\n\r\nSimple go program containing a test certificate to reproduce the error:\r\n[test_cert_fail.go](https://github.com/golang/go/files/108045/test_cert_fail.go.txt)",
	"user": {
		"login": "nurio",
		"id": 135987,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "agl",
		"id": 21203,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"created_at": "2016-01-28T10:55:07Z",
	"updated_at": "2016-05-18T00:17:20Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
