{
	"id": 153810326,
	"number": 15610,
	"state": "open",
	"title": "reflect: should DeepEqual handle cyclic references?",
	"body": "Hi!\r\n\r\nHere is a [test case](https://play.golang.org/p/JgmP-EzYMl):\r\n\r\n```go\r\npackage main\r\n\r\nimport \"reflect\"\r\n\r\ntype Test *Test\r\n\r\nfunc makeTest() Test {\r\n\tvar t1, t2 Test\r\n\tt1 = new(Test)\r\n\tt2 = \u0026t1\r\n\t*t1 = \u0026t2\r\n\treturn t1\r\n}\r\n\r\nfunc main() {\r\n\ta := makeTest()\r\n\tb := makeTest()\r\n\r\n\treflect.DeepEqual(a, b)\r\n}\r\n```\r\n\r\nI'm using go 1.6.1 on Linux and this test fails with a stack overflow.\r\n\r\nIt seems that `reflect.DeepEqual` could theoretically handle cyclic references, but it [doesn't check](https://github.com/golang/go/blob/master/src/reflect/deepequal.go#L35) `visited` map for pointers.\r\n\r\nIs this a bug (probably regression) of feature? If it's a feature, it will be nice if it would be documented.",
	"user": {
		"login": "gavv",
		"id": 8436629,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"created_at": "2016-05-09T16:00:49Z",
	"updated_at": "2016-05-10T08:28:39Z",
	"milestone": {
		"id": 1748849,
		"number": 42,
		"title": "Go1.8Maybe"
	}
}
