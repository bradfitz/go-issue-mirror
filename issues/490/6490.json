{
	"id": 51285266,
	"number": 6490,
	"state": "closed",
	"title": "reflect: unsafe.Pointer used unsafely in reflect.Value",
	"body": "\u003cpre\u003eAn unsafe pointer typed value is used as both bytes and a pointer in the val member of a\nreflect Value structure.  The code knows how to interpret this value correctly based on\na convention of flags stored elsewhere in the value structure.  In essence the code\ntreats this field as a variant record though the rest of the toolchain has no knowledge\nof this convention.\n\nSince there is no variant record concept in Go, the value storage should not conflate\nthe types of this location.  One possible solution is to split the field storage into\ntwo fields: a uintptr field for non-pointer values and a unsafe.Pointer field for\npointer values.  The same flags can be used to control which field is loaded.\u003c/pre\u003e",
	"user": {
		"login": "lexprfuncall",
		"id": 5360361,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 8,
	"closed_at": "2014-12-08T10:35:51Z",
	"created_at": "2013-09-26T21:44:18Z",
	"updated_at": "2016-06-25T01:19:46Z",
	"milestone": {
		"id": 1067211,
		"number": 17,
		"title": "Go1.3"
	}
}
