{
	"id": 66076282,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003e\u003eWe might say, for example, that an atomic.Store writing a value to a memory location\nhappens before an atomic.Load that reads that value from the memory location. Is that\nsomething we want to say? If not, what do we want to say?\n\nYes, we want to say that.\nRegarding Add/CAS, it should be formulated in in more general terms, along the lines of:\nat atomic operation that stores a value (incl ADD/CAS) happens before atomic operation\nthat reads that value from the memory location (incl ADD/CAS).\n\nHowever, this does not cover the Dekker synchronization pattern:\n\nX = Y = 0\n\n// goroutine 1\nX = 1  // atomic\nr1 = Y  // atomic\n\n// goroutine 2\nY = 1  // atomic\nr2 = X  // atomic\n\nThe rule above allows r1 == r2 == 0, however such outcome is impossible under sequential\nconsistency (total order).\nDekker pattern is used in tricky mutual exclusion algorithms and in safe object\nreclamation schemes. On one hand it's used very infrequently, but on the other hand\nthere will be no way to implement it at all. That's why I am asking about \"as weak as\npossible\".\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-14T06:47:52Z",
	"updated_at": "2014-12-08T10:26:58Z"
}
