{
	"id": 116949322,
	"body": "The test program is erroneous. The issue is that the input contains newlines but the pattern (\"%d\") does not. The documentation clearly states:\r\n  Newlines in the input must match newlines in the format.\r\nUnfortunately, there is a catch that the program tickles. The second number, the one before the newline in the input, is terminated one of two ways in the program: \\n or \\r\\n. The \\r is a red herring; a plain space will trigger the same behavior, which is: if there is only a newline, the newline must be read to terminate the scanning of the number. Scanf then returns, and the newline has been consumed silently. As the documentation says, it scanning may read one byte past the input desired, which in this case consumes the newline.\r\n\r\nIf the number is instead followed by \\r or ' ', that is consumed, the newline remains in the input stream, and the next call to Scanf fails because there is an unexpected newline, as diagnosed.\r\n\r\nIf you use Scan instead of Scanf, the program works just fine regardless. Scanf is fussy about newlines, on purpose (you have Scan if you don't care about them), but is sometimes thwarted by the clean separation between the fmt package and I/O, and the consequences of reading too far.\r\n\r\nI admit this is unsatisfactory but it is working as documented, if not exactly as intended.\r\n\r\nOne possibility is for Scanf to notice this case and complain on the previous call that it is consuming a newline that cannot be matched by the pattern, but I am reluctant to do that this late in the cycle.\r\n\r\nDeferring to 1.6. I will also change the title of the bug.",
	"user": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-30T04:19:37Z",
	"updated_at": "2015-06-30T04:19:37Z"
}
