{
	"id": 51286171,
	"number": 7084,
	"state": "closed",
	"title": "runtime: errorCString can be used to read arbitrary memory",
	"body": "\u003cpre\u003eThis cute little program demonstrates how to use runtime.errorCString to read arbitrary\ncontents of memory.  The key is that errorCString has a public method that does an\nunsafe operation, and that errorCString is a uintptr so once one has a copy of an\nerrorCString value, one can use reflect to produce an errorCString with any value you\nlike.\n\nThis doesn't let you do anything you can't already do by importing unsafe, but it does\nlet you do it without, well, importing unsafe.  We should fix errorCString to prevent\nthis.\n\npackage main\n\nimport (\n\t\u0026quot;fmt\u0026quot;\n\t\u0026quot;reflect\u0026quot;\n)\n\n// Display a hex dump of myself! Without using the unsafe module!\n// All we need is a C-string backed error object...\nfunc memwalk(e error) {\n\tvar addr uint64 = 0x400000 // Or use reflect.ValueOf(e).Uint() to start at e...\n\tmutableValue := reflect.New(reflect.ValueOf(e).Type()).Elem()\n\tfor {\n\t\tfmt.Printf(\u0026quot;%016x: \u0026quot;, addr)\n\t\tvar i uint64\n\t\tfor i = 0; i \u0026lt;= 0xF; i++ {\n\t\t\tmutableValue.SetUint(addr + i)\n\t\t\ts := mutableValue.Interface().(error).Error()\n\t\t\tvar b uint8 = 0\n\t\t\tif len(s) \u0026gt; 15 {\n\t\t\t\tb = s[15]\n\t\t\t}\n\t\t\tfmt.Printf(\u0026quot;%02x \u0026quot;, b)\n\t\t}\n\t\tfmt.Printf(\u0026quot;| \u0026quot;)\n\t\tfor i = 0; i \u0026lt;= 0xF; i++ {\n\t\t\tmutableValue.SetUint(addr + i)\n\t\t\ts := mutableValue.Interface().(error).Error()\n\t\t\tvar b uint8 = 0\n\t\t\tif len(s) \u0026gt; 15 {\n\t\t\t\tb = s[15]\n\t\t\t}\n\t\t\tif b \u0026gt;= ' ' \u0026amp;\u0026amp; b \u0026lt;= '~' {\n\t\t\t\tfmt.Printf(\u0026quot;%c\u0026quot;, b)\n\t\t\t} else {\n\t\t\t\tfmt.Print(\u0026quot;.\u0026quot;)\n\t\t\t}\n\t\t}\n\t\tfmt.Print(\u0026quot;\\n\u0026quot;)\n\t\taddr += 0x10\n\t}\n}\n\n// The main program of the memory dumper.\nfunc main() {\n\tdefer func() {\n\t\tmemwalk(recover().(error))\n\t}()\n\t// Produce a C string backed error somehow...\n\tc := make(chan int)\n\tclose(c)\n\tc \u0026lt;- 42\n}\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 5,
	"closed_at": "2014-12-08T10:39:25Z",
	"created_at": "2014-01-09T02:13:02Z",
	"updated_at": "2016-06-25T01:25:13Z",
	"milestone": {
		"id": 1067211,
		"number": 17,
		"title": "Go1.3"
	}
}
