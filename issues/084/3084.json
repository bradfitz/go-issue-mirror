{
	"id": 51280103,
	"number": 3084,
	"state": "closed",
	"title": "gc: Function argument of an interface type suddenly becomes nil.",
	"body": "\u003cpre\u003eBefore filing a bug, please check whether it has been fixed since\nthe latest release: run \u0026quot;hg pull\u0026quot;, \u0026quot;hg update default\u0026quot;, rebuild, and\nretry\nwhat you did to\nreproduce the problem.  Thanks.\n\nWhat steps will reproduce the problem?\n1.\nUnpack attached y.go.tar.gz to e.g. ~/src/tmp/y.go ($GOPATH=~)\n\n2.\n$ ~/src/tmp$ go run y.go\n\n\nWhat is the expected output?\nyyParse.A: *main.lx (*main.lx)(0xf840012018)\nyyParse.B: *main.lx (*main.lx)(0xf840012018)\nyylex1.A: *main.lx (*main.lx)(0xf840012018)\nNow it works: *main.lx (*main.lx)(0xf840012018)\n$\n\nWhat do you see instead?\nyyParse.A: *main.lx (*main.lx)(0xf840012018)\nyyParse.B: \u0026lt;nil\u0026gt; \u0026lt;nil\u0026gt;\nyylex1.A: \u0026lt;nil\u0026gt; \u0026lt;nil\u0026gt;\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x20 pc=0x400de3]\n\ngoroutine 1 [running]:\nmain.yylex1(0x0, 0x0, 0x0, 0xf840024000, 0x100000001, ...)\n\t/home/jnml/src/tmp/yaccbug/y.go:45 +0x101\nmain.yyParse(0x0, 0x0)\n\t/home/jnml/src/tmp/yaccbug/y.go:62 +0x290\nexit status 2\n$\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g\n\n\nWhich operating system are you using?\nUbunut 10.04 LTS x86-64\n\nWhich revision are you using?  (hg identify)\n52ba9506bd99 weekly/weekly.2012-02-07\n\n\nPlease provide any additional information below.\n* Reproducible with 8ee693ab43d1 tip\n\n* Something really strange is happening here (line 51 up):\nfunc yyParse(yylex yyLexer) int {\n\tvar yyn int\n\tvar yylval yySymType\n\n\tfmt.Printf(\u0026quot;yyParse.A: %T %#v\\n\u0026quot;, yylex, yylex) // \u0026lt;-- non-nil here\n\tvar yyVAL yySymType\n\tfmt.Printf(\u0026quot;yyParse.B: %T %#v\\n\u0026quot;, yylex, yylex) // \u0026lt;-- nil here ???\n\n\n* See also //XXX marked comments in y.go\n\n* Sorry for such a big source (\u0026gt;1000 lines) to reproduce the problem. It is\nunfortunately sensitive to any other attempted reduction I've tried - the\nbehavior disappears. \n\n* The crash execution path goes to at most line 62, so the big code can still be\nlooked at hopefully easy.\n\n* The code is obviously generated by (go)yacc, but I believe I've ruled out a bug\nin that tool wrt the observed behavior.\n\n* Didn't have time to look at the generated assembler code (shame on me), will try later\nhopefully.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/3084/0/y.go.tar.gz\"\u003ey.go.tar.gz\u003c/a\u003e (1992 bytes)",
	"user": {
		"login": "cznic",
		"id": 729580,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 5,
	"closed_at": "2014-12-08T10:16:05Z",
	"created_at": "2012-02-20T19:29:37Z",
	"updated_at": "2016-06-24T21:28:11Z",
	"milestone": {
		"id": 1061233,
		"number": 7,
		"title": "Go1"
	}
}
