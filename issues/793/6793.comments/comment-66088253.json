{
	"id": 66088253,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eI can try.  It's pretty confusing though.  I'll paste the output of \"go test -compiler\ngccgo -x mwhudson/testing\" and explain what I think is going on at each step.  I'm not\ntrying to explain things to you, I'm trying to explain what _I_ think is going on so\nthat you can correct me if I'm wrong :-)\n\nmwhudson@narsil:testing$ go test -compiler gccgo -x mwhudson/testing\nWORK=/tmp/go-build342732787\n\n#### \nmkdir -p $WORK/mwhudson/testing/_test/mwhudson/\n\n### This is the main scratch directory for testing mwhudson/testing\nmkdir -p $WORK/mwhudson/testing/_test/\n\n### Where the source lives\ncd /home/mwhudson/goplay2/src/mwhudson/testing\n\n### mwhudson/testing has both \"internal test files\" i.e. a file _test that says \"package\ntesting\" and \n### \"external test files\" that say package testing_test, so it is necessary to rebuild a\nversion of the\n### package for testing.\n*** The problem here is that the intermediate testing.o is created directly in the main\nscratch directory ***\ngccgo -I $WORK -c -g -m64 -fgo-pkgpath=mwhudson/testing\n-fgo-relative-import-path=_/home/mwhudson/goplay2/src/mwhudson/testing -o\n$WORK/mwhudson/testing/_test/testing.o ./t.go ./t2_test.go\n\n### Make the version of libtesting.a for the compilation of testing.test to link against\nar cru $WORK/mwhudson/testing/_test/mwhudson/libtesting.a\n$WORK/mwhudson/testing/_test/testing.o\n\n### Compile the code that will make up testing.test.\n### This is the command that fails.  Because of the \"-I $WORK/mwhudson/testing/_test\"\nwhen trying to resolve \n### the `import \"testing\"`, gccgo finds the testing.o file created above, and obviously\nthis does not define\n### all of (or indeed any of) the things that the standard testing package provides.\ngccgo -I $WORK/mwhudson/testing/_test -I $WORK -c -g -m64\n-fgo-pkgpath=mwhudson/testing_test\n-fgo-relative-import-path=_/home/mwhudson/goplay2/src/mwhudson/testing -o\n$WORK/mwhudson/testing/_test/testing_test.o ./t_test.go\n# mwhudson/testing_test\n./t_test.go:3:11: error: reference to undefined identifier ‘testing.T’\n func f(t *stdtesting.T) {}\n\nI don't completely understand why gccgo looks for a .o file when looking for a package,\nbut dumping intermediate objects directly into a directory that's passed as an -I option\njust feels risky.  My fix at \u003ca href=\"https://golang.org/cl/27650045/\"\u003ehttps://golang.org/cl/27650045/\u003c/a\u003e puts the testing.o\nfile in a sub-directory of the scratch directory:\n\nmkdir -p $WORK/mwhudson/testing/_test/_obj_test/\ncd /home/mwhudson/goplay2/src/mwhudson/testing\ngccgo -I $WORK -c -g -m64 -fgo-pkgpath=mwhudson/testing\n-fgo-relative-import-path=_/home/mwhudson/goplay2/src/mwhudson/testing -o\n$WORK/mwhudson/testing/_test/_obj_test/testing.o ./t.go ./t2_test.go\n\nThis is analogous to what \"go build\" does:\n\nmwhudson@narsil:testing$ go build -x -compiler gccgo mwhudson/testing \n...\ngccgo -I $WORK -c -g -m64 -fgo-pkgpath=mwhudson/testing\n-fgo-relative-import-path=_/home/mwhudson/goplay2/src/mwhudson/testing -o\n$WORK/mwhudson/testing/_obj/testing.o ./t.go\n...\n\nI hope this helps!\u003c/pre\u003e",
	"user": {
		"login": "mwhudson",
		"id": 672022,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-11-28T01:04:41Z",
	"updated_at": "2014-12-08T10:37:46Z"
}
