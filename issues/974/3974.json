{
	"id": 51281449,
	"number": 3974,
	"state": "closed",
	"title": "Hex formatting (%x) returns a hexidecimal memory address if a custom Integer type implements the Stringer interface",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\n\n\u003ca href=\"http://play.golang.org/p/2RJlF30QTC\"\u003ehttp://play.golang.org/p/2RJlF30QTC\u003c/a\u003e\n\n1. Define a custom integer type\n2. Implement a String() method on the type\n3. Use the custom type with the %x or %X formatter\n\nWhat is the expected output?\n\nI expected %x to print the hexidecimal value, in this example \u0026quot;ab\u0026quot;.\n\nWhat do you see instead?\n\nThe hexidecimal memory address, as though I had passed \u0026amp;x.\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n\n6g\n\nWhich operating system are you using?\n\ndarwin\n\nWhich version are you using?  (run 'go version')\n\n1.0.2, also reproduced on tip (\u0026quot;weekly.2012-03-27 +ac1b735e8753\u0026quot;)\n\nPlease provide any additional information below.\n\nAs per the example:\n\n* the decimal format is still correct\n* other methods on Integer don't cause an issue\n* the same issue occurs whether using Itoa vs. Sprintf in String()\n* it's not possible to dereference *x to get the hex value\n\nOn a related note, if String() returns an empty string, the hex value and hexAddress\nprinted are both empty/nothing.\u003c/pre\u003e",
	"user": {
		"login": "nathany",
		"id": 4566,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:21:03Z",
	"created_at": "2012-08-19T01:54:06Z",
	"updated_at": "2016-06-24T22:23:21Z"
}
