{
	"id": 69293896,
	"body": "Yeah, the ideal goal that Ian just mentioned is worth pursuing.\nI always think internal linking should work whenever the packages\nused don't need any fancy linker features (i.e. plain C without\nconstructors, destructors and the like.)\n\nFor the idea of splitting objects from libgcc out to a separate object\nfile, could we feed ld a linker script that links all objects from libgcc\ninto separate sections, and then use objcopy to split those sections\nout?\n\nOf course, we can parse the output of ld -M to find out which symbols\nare pulled from libgcc, but that will require we link three times (one with\nlibgcc to get linker map, and one without to get _all.o, and then once\nmore to get _gcc.o)\n\nAnother idea: use -shared-libgcc when linking cgo's _cgo_main.o,\nuse -shared-libgcc so that we can discover which parts of libgcc\nare being pulled in, and then we can create _gcc.o using those\nsymbols. This approach needs to link two times (for _all.o and\n_gcc.o), but I think that's as few as we can get. I assume all\ninteresting symbols in libgcc.a are also included in libgcc_s.so,\nno?",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-09T05:08:45Z",
	"updated_at": "2015-01-09T05:08:45Z"
}
