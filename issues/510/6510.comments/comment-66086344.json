{
	"id": 66086344,
	"body": "\u003ca id=\"c16\"\u003e\u003c/a\u003eComment 16:\n\n\u003cpre\u003e\u003e1) What API takes floats as parameters?\n\nA few functions in gdi32 and opengl which is technically a system library.\nWindows 1.0 predated common hardware float on x86 so the api is mostly void of floats.\n\n\u003e2) We need a test we can run during go build, to test this functionality.\n\nI agree, perhaps we create a dll and ship with it?  Since none of the system ones seem\nto be usefull?\n\n\u003e3) I do not understand how you propose to use floats on 386.\n\ntype CallStack []byte // or a struct with a []byte and extra info\nfunc (c *CallStack) AddFloat64(f float64)\nfunc (c *CallStack) AddInt64(i int64)\nfunc (c *CallStack) AddUint64(i uint64)\n// etc...\n\nfunc SyscallRaw(trap uintptr, args CallStack) (r1, r2 uintptr, err Errno)\n\nyou would copy the slice into the stack instead of starting at the first parameter and\ncopying X 32bit vals from the go stack to the new call stack, would be nearly identical\nto the current 32bit asmstdcall and have the same level of type unsafety.\nThis would be for 32bit only since 64bit seems to work, It would allow for 64bit values\nto be passed to DLLs.\u003c/pre\u003e",
	"user": {
		"login": "bryanturley",
		"id": 1634211,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-01T04:31:28Z",
	"updated_at": "2014-12-08T10:36:00Z"
}
