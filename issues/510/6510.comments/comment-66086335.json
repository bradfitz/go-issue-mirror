{
	"id": 66086335,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eloadregs:\n  // Load first 4 args into correspondent registers.            \n  MOVQ  0(SI), CX\n  MOVQ  8(SI), DX\n  MOVQ  16(SI), R8\n  MOVQ  24(SI), R9\n  MOVQ  CX, X0\n  MOVQ  DX, X1\n  MOVQ  R8, X2\n  MOVQ  R9, X3\nShould be slightly faster on \u003e= core 2 intel chips, and about the same on amd ones\naccording to an older copy of \u003ca href=\"http://www.agner.org/optimize/instruction_tables.pdf\"\u003ehttp://www.agner.org/optimize/instruction_tables.pdf\u003c/a\u003e\nWe don't need to care about 32bit only cpus here since they do not pass args in xmm regs.\nCMOV doesn't do xmm stuff.\n\nI think it is going to be hard to top just adding 4 moves.  A new API would involve\nbranching and more memory reads in every scenario I can think of.  \nPerhaps a duplicate set of syscall.SyscallX that also does float?  Perhaps a jump table\nand 16 versions of the mov section?  Or just 4 more movs.\n\nI will test my code with 32bit go in windows today and see if it works or not.\n\u003ca href=\"https://github.com/bryanturley/gl/tree/master/gout/tst_exmpl/00_window\"\u003ehttps://github.com/bryanturley/gl/tree/master/gout/tst_exmpl/00_window\u003c/a\u003e is it, but it is\nnot ready for mass consumption.  It just barely started working in windows due to my\nignorance of the windows api.  Needs some major cleaning now as well.\n\nAlso the summary line for this issue has a double negative, didn't see it till just now.\n Not that I should be correcting any one's english.\u003c/pre\u003e",
	"user": {
		"login": "bryanturley",
		"id": 1634211,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-30T18:14:04Z",
	"updated_at": "2014-12-08T10:35:59Z"
}
