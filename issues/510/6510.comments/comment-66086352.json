{
	"id": 66086352,
	"body": "\u003ca id=\"c24\"\u003e\u003c/a\u003eComment 24:\n\n\u003cpre\u003e\u003eThis fundamentally cannot work with the current API.\n\u003eThe API has no idea what arguments are really floating point values and not.\n\u003eI believe that if you have a function that takes int1, int2, float3, int4,\n\u003efloat5, then the correct assignment of arguments is to put int1, int2, int4\n\u003ein the first three integer registers and float3, float5 in the first two\n\u003efloating point registers. In particular, float3 does not go in the third\n\u003efloating point register.\n\nIn 386 it currently works fine with float32s being passed through as uintptrs.\nOn 386 float64/int64/uint64 are broken because they must be crammed into a 32bit uintptr.\nOn amd64 it is either CX or X0 you cannot passed 8 args in registers only 4 with those 8\nregisters.  MS talks about unprototyped functions and how all 8 are considered volatile\nevery call.\n\n\u003esyscall.Syscall is really for system calls. That concept is a bit tortured\n\u003eon Windows, but even so it is really for talking to system DLLs, which do\n\u003enot use floating point.\n\nI said the same thing on golang-nuts and was attacked but ok...\n\n\u003eI think for wrapping arbitrary libraries the answer really has to be cgo.\n\u003eIt has type information and can do the right thing.\n\nSure, I will drop it.  I think you guys should remove the go wiki page saying otherwise\nthough so as not to confuse anyone else.\nThanks anyways.\u003c/pre\u003e",
	"user": {
		"login": "bryanturley",
		"id": 1634211,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-01T15:40:17Z",
	"updated_at": "2014-12-08T10:36:00Z"
}
