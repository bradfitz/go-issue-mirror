{
	"id": 230759164,
	"body": "@yaxinlx As I think I keep saying, \"atomic\" doesn't mean just one thing.\r\n\r\nKeith is saying that the compiler generates the machine instructions that ensure that if two different processors write a pointer value to the same memory location simultaneously, other processors will see one value or the other value, but not a mixture.  The \"technology\" is simply using whatever instructions the processor supports to make this happen.\r\n\r\nHowever, the compiler does not use instructions that guarantee anything about the visibility of those writes to other processors.  It's quite possible, on some architectures, that if processors 1 and 2 write a pointer value simultaneously then processor 3 will see the value written by processor 1 and processor 4 will see the value written by processor 2.\r\n\r\nThat said, please take further discussion of this off this issue and to a forum.  See https://golang.org/wiki/Questions .  Thanks.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-06T12:38:54Z",
	"updated_at": "2016-07-06T12:38:54Z"
}
