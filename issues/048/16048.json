{
	"id": 159915421,
	"number": 16048,
	"state": "closed",
	"title": "golang documents should make it clear whether or not reading/writing scalar type variables is atomic.",
	"body": "1. What version of Go are you using (`go version`)?\r\n\r\n1.6\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\nDebian 8, Intel amd64 CPU.\r\n\r\n3. What did you do?\r\n\r\nI wrote a small program to test if reading/writing of scalar type variables is atomic.\r\n\r\n\tpackage main\r\n\r\n\timport \"runtime\"\r\n\r\n\tconst A, B = 12345, 67890\r\n\tvar c = A\r\n\r\n\tfunc f() {\r\n\t\tfor {\r\n\t\t\tc = A\r\n\t\t}\r\n\t}\r\n\r\n\tfunc g() {\r\n\t\tfor {\r\n\t\t\tc = B\r\n\t\t}\r\n\t}\r\n\r\n\tfunc main() {\r\n\t\tif runtime.NumCPU() \u003c 3 {\r\n\t\t\truntime.GOMAXPROCS(3)\r\n\t\t}\r\n\t\t\r\n\t\tgo f()\r\n\t\tgo g()\r\n\t\t\r\n\t\tfor {\r\n\t\t\tt := c\r\n\t\t\tif t != A \u0026\u0026 t != B {\r\n\t\t\t\tprintln(\"!!!!!!!!!! c =\", t)\r\n\t\t\t\tpanic(\"c != A \u0026\u0026 c != B\")\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n4. What did you expect to see?\r\n\r\nexpect panic if reading/writing of scalar type variables is not atomic\r\n\r\n5. What did you see instead?\r\n\r\nnever panic.\r\n\r\n=================================\r\n\r\nThe official golang documents don't mention whether or not reading/writing scalar type variables is atomic. There are some pieces of vague info in other pages, such as:\r\n- https://golang.org/pkg/sync/atomic\r\n- https://golang.org/ref/mem\r\n\r\nMany 3rd party articles and group posts say reading/writing scalar type variables is NOT atomic.\r\nAre their statements correct for any processor architecture and OSes? or just for some ones?\r\n\r\nI really hope golang official documents can make clear on this point. \r\n",
	"user": {
		"login": "yaxinlx",
		"id": 15266642,
		"type": "User",
		"site_admin": false
	},
	"comments": 9,
	"closed_at": "2016-06-14T21:34:44Z",
	"created_at": "2016-06-13T10:08:11Z",
	"updated_at": "2016-07-06T12:38:54Z"
}
