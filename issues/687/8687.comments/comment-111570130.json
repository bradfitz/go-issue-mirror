{
	"id": 111570130,
	"body": "I've blogged about this issue in the past (https://randomascii.wordpress.com/2013/07/08/windows-timer-resolution-megawatts-wasted/) and I wanted to share what I have learned:\r\n\r\nAs defia pointed out, having a higher timer frequency wastes CPU time and can make some CPU heavy programs run more slowly. This is because the OS is waking up ~15 times more frequently, consuming CPU time each time it does. It also means that other programs may wake up more frequently and waste CPU time - some software sits in Sleep(1) loops and will wake up ~15 times more frequently when the timer resolution is changed. So, raising the timer frequency can waste performance.\r\n\r\nRaising the timer frequency will almost always waste some power and will harm battery life. This is the kicker. This is why no program should ever raise the timer frequency unless it *needs* the timer frequency raised. The timer frequency is a global setting and raising it without a good reason is poor citizenship.\r\n\r\nIf you have a work loop that relies on Sleep(1) or timeouts from WaitForSingleObject(handle, 1) then raising the timer frequency will  make your loop run faster. Presumably that is why the http test ran faster. Most software should not be relying on timeouts, it should be running based on events. But, it is reasonable for *specific* go programs to raise the timer frequency if needed.\r\n\r\nIt is not reasonable for the go runtime to unilaterally raise timer frequency.\r\n",
	"user": {
		"login": "randomascii",
		"id": 10800041,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-12T17:38:43Z",
	"updated_at": "2015-06-12T17:38:43Z"
}
