{
	"id": 66090525,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003ein general, we can't do much about signals received when executing cgo code.\n\n1. we can't reliably unwind cgo code.\n2. C is not memory safe, so by the time the signal arrives, the memory could have\nalready been\ncorrupted, for example, in this case, the fact that the glibc developers placed an\nassertion in their\ncode probably suggests that if the assertion turns out to be false, it's internal is\ninconsistent, so\neven if we could recover from it, the next DNS lookup might trigger the problem again.\n\nIn other words, we can't do much about this issue (even C/C++ application can't do much\non this\nissue)\n\nIf you can't deploy updates to the glibc bug, and can withstand the limits of the pure\nGo resolver,\nyou can do this to recompile a pure Go version of net package without disabling cgo:\ngo install -tags netgo -a std\n\nand then rebuild your program, so it won't use the buggy glibc resolvers (please be\naware that\nthe pure Go resolver has several limitations, and others probably could explain them\nbetter than\nme).\u003c/pre\u003e",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-01-23T19:06:29Z",
	"updated_at": "2014-12-08T10:39:55Z"
}
