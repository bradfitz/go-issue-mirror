{
	"id": 66100290,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eReproduced on OS X, but it's not a Go problem.\n\nthe *al.Device returned from al.OpenDevice(\"\") is 0x18, which is obviously\nan invalid pointer.\n\nIf al.OpenDevice could return invalid pointers, the value shouldn't use a\nGo pointer type to store.\n\nBecause regardless of the platform, the value returned from al.OpenDevice\nis not a Go pointer (it can be a C pointer, or even an regular integer), so\nGo's GC won't touch it anyway,  you can just use a uintptr to store it.\n\nThis situation is similar to Window's HANDLE.\n\nArguably, this is a bug of OS X OpenAL implementation, but as ALCdevice\nis an opaque struct, whether alcOpenDevice returns a real pointer or not\ndoesn't matter that much to a C programmer.\n\n\nFor Go's new fully precise GC, not only passing Go heap pointer to C poses\nproblem, even storing a C value (pointer or struct) on Go stack/heap is also\npotentially problematic as there might be a field that has a pointer type but\nactually stores an integer. Perhaps we should do something here.\u003c/pre\u003e\n\n\n\n_Status changed to **WorkingAsIntended**._",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-03T04:05:29Z",
	"updated_at": "2014-12-08T10:50:09Z"
}
