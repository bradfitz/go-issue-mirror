{
	"id": 66070944,
	"body": "\u003ca id=\"c30\"\u003e\u003c/a\u003eComment 30:\n\n\u003cpre\u003eWhen it hangs you can see the following stack:\n\ngoroutine 3 [semacquire]:\nsync.runtime_Semacquire(0xc2000bd718, 0xc2000bd718)\n\tsrc/pkg/runtime/zsema_darwin_amd64.c:165 +0x2e\nsync.(*WaitGroup).Wait(0xc200001b20, 0x0)\n\tsrc/pkg/sync/waitgroup.go:102 +0xf2\nnet/http/httptest.(*Server).Close(0xc200001af0, 0x105c2100)\n\tsrc/pkg/net/http/httptest/server.go:157 +0x41\n----- stack segment boundary -----\nbufio.(*Reader).Read(0xc20013b060, 0xc2000dd830, 0x2, 0x2, 0xffffffffffffffff, ...)\n\tsrc/pkg/bufio/bufio.go:151 +0x303\nio.ReadAtLeast(0xc2000ddd80, 0xc20013b060, 0xc2000dd830, 0x2, 0x2, ...)\n\tsrc/pkg/io/io.go:271 +0x102\nio.ReadFull(0xc2000ddd80, 0xc20013b060, 0xc2000dd830, 0x2, 0x2, ...)\n\tsrc/pkg/io/io.go:290 +0x72\nnet/http.(*chunkedReader).Read(0xc2000dd810, 0xc2000c6000, 0x2000, 0x2000, 0x1008, ...)\n\tsrc/pkg/net/http/chunked.go:77 +0x1dd\nnet/http.(*body).Read(0xc2000f3240, 0xc2000c6000, 0x2000, 0x2000, 0x2000, ...)\n\tsrc/pkg/net/http/transfer.go:538 +0x9a\nnet/http.(*bodyEOFSignal).Read(0xc2000dd840, 0xc2000c6000, 0x2000, 0x2000, 0x2000, ...)\n\tsrc/pkg/net/http/transport.go:837 +0x1b8\nio/ioutil.devNull.ReadFrom(0x0, 0xc2000dd720, 0xc2000dd840, 0x1dd6ff8, 0x0, ...)\n\tsrc/pkg/io/ioutil/ioutil.go:137 +0xcf\nio.Copy(0xc20008a2a0, 0x0, 0xc2000dd720, 0xc2000dd840, 0x0, ...)\n\tsrc/pkg/io/io.go:357 +0xa2\nnet/http_test.TestIssue4191_InfiniteGetTimeout(0xc2000bb2d0, 0xc20c021549)\n\tsrc/pkg/net/http/transport_test.go:947 +0x359\ntesting.tRunner(0xc2000bb2d0, 0x4e9fe0, 0x0, 0x0)\n\tsrc/pkg/testing/testing.go:301 +0x6c\ncreated by testing.RunTests\n\tsrc/pkg/testing/testing.go:377 +0x86e\n\nIt says that deferred Server.Close() is called from bufio.Reader.Read(). Initially I\nthought that it's just a bug in unwinder.\nBut on the second thought... consider that bufio.Reader.Read() panics for some reason.\nSo it calls deferred Server.Close() as expected, which hangs as expected, because the\nclient connection Body is not closed in this case.\n\nIndeed, when I replaced defer ts.Close() with normal ts.Close() call, I see:\n\npanic: runtime error: slice bounds out of range [recovered]\n\tpanic: runtime error: slice bounds out of range\ngoroutine 3 [running]:\ntesting.funcÂ·003(0x105c2fa8, 0x105c2100)\n\tsrc/pkg/testing/testing.go:296 +0xc3\n----- stack segment boundary -----\nbufio.(*Reader).Read(0xc2000c4ea0, 0xc200115800, 0x2, 0x2, 0xffffffffffffffff, ...)\n\tsrc/pkg/bufio/bufio.go:151 +0x303\nio.ReadAtLeast(0xc20008af00, 0xc2000c4ea0, 0xc200115800, 0x2, 0x2, ...)\n\tsrc/pkg/io/io.go:271 +0x102\nio.ReadFull(0xc20008af00, 0xc2000c4ea0, 0xc200115800, 0x2, 0x2, ...)\n\tsrc/pkg/io/io.go:290 +0x72\nnet/http.(*chunkedReader).Read(0xc2001157e0, 0xc2000c7000, 0x2000, 0x2000, 0x1008, ...)\n\tsrc/pkg/net/http/chunked.go:77 +0x1dd\nnet/http.(*body).Read(0xc2000f3a40, 0xc2000c7000, 0x2000, 0x2000, 0x2000, ...)\n\tsrc/pkg/net/http/transfer.go:538 +0x9a\nnet/http.(*bodyEOFSignal).Read(0xc200115810, 0xc2000c7000, 0x2000, 0x2000, 0x2000, ...)\n\tsrc/pkg/net/http/transport.go:837 +0x1b8\nio/ioutil.devNull.ReadFrom(0x0, 0xc2000dd360, 0xc200115810, 0x1dceff8, 0x0, ...)\n\tsrc/pkg/io/ioutil/ioutil.go:137 +0xcf\nio.Copy(0xc20008a2a0, 0x0, 0xc2000dd360, 0xc200115810, 0x0, ...)\n\tsrc/pkg/io/io.go:357 +0xa2\nnet/http_test.TestIssue4191_InfiniteGetTimeout(0xc2000bb2d0, 0xc20ad0e6d2)\n\tsrc/pkg/net/http/transport_test.go:947 +0x336\ntesting.tRunner(0xc2000bb2d0, 0x4e9fe0, 0x0, 0x0)\n\tsrc/pkg/testing/testing.go:301 +0x6c\ncreated by testing.RunTests\n\tsrc/pkg/testing/testing.go:377 +0x86e\n\nSo, current test code just inherently deadlocks in presence of panics. The solution\nwould be to close client connection in a defer as well (this may require nested\nfunction), than the connection will be closed before server close.\n\nI've not yet looked at the panic, looks like another bug.\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-11-25T07:45:19Z",
	"updated_at": "2014-12-08T10:22:18Z"
}
