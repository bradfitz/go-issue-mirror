{
	"id": 179573895,
	"body": "The short answer is, no, it should not work.\r\n\r\nA Buffer is essentially an *image.RGBA, but not all *image.RGBAs are valid Buffers. (If they were, the Upload method might as well take an *image.RGBA instead of a Buffer). Drivers may assume that the memory backing a Buffer's pixels are specially allocated, such as shared memory, shared across multiple processes. Arbitrary *image.RGBAs do not satisfy that assumption.\r\n\r\nAs I tried to say on #14026, your Editor shouldn't have an *image.RGBA or be an *image.RGBA. Instead, it should be able to render itself onto a Buffer's *image.RGBA (where the Buffer is provided by Screen.NewBuffer).\r\n\r\nOn a side note, with your original code snippet:\r\n\r\n*buf.RGBA() = *img\r\ntx.Upload(image.ZP, buf, buf.Bounds())\r\nwin.Copy(min, tx, tx.Bounds(), screen.Src, nil)\r\n\r\nyou might not need to explicitly use a Texture. A Window already has an Upload method, which takes a Buffer.",
	"user": {
		"login": "nigeltao",
		"id": 8565232,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-04T02:01:55Z",
	"updated_at": "2016-02-04T02:01:55Z"
}
