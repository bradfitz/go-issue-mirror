{
	"id": 51282019,
	"number": 4360,
	"state": "closed",
	"title": "cmd/gc: inlining vs escape analysis bug",
	"body": "\u003cpre\u003eg's \u0026amp;j most definitely does escape\n\n; go tool 6g -m x.go\nx.go:13: can inline nop\nx.go:22: inlining call to nop\nx.go:13: leaking param: x to result .anon1\nx.go:15: leaking param: p to result .anon1\nx.go:27: g \u0026amp;j does not escape\n; cat x.go\npackage main\n\nvar global interface{}\n\ntype T1 struct {\n\tX *int\n}\n\ntype T2 struct {\n\tY *T1\n}\n\nfunc nop(x *T1) *T1 { return x }\n\nfunc f(p *T1) T2 {\n\tif p == nil {\n\t\treturn T2{}\n\t}\n\n\tglobal = p // should make p leak always\n\n\treturn T2{nop(p)}\n}\n\nfunc g() {\n\tvar j T1\n\tf(\u0026amp;j)\n}\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2014-12-08T10:23:09Z",
	"created_at": "2012-11-07T16:08:38Z",
	"updated_at": "2016-06-24T22:27:52Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
