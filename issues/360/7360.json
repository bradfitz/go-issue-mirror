{
	"id": 51286592,
	"number": 7360,
	"state": "closed",
	"title": "go.tools/go/types: allow suppression of \"soft\" errors ",
	"body": "\u003cpre\u003eWe can distinguish two classes of errors in the type-checker:  (1) \u0026quot;soft\u0026quot;\nerrors, for which we can still give an interpretation to an errant program (e.g.\n\u0026quot;unused variable\u0026quot; or \u0026quot;cross-package reference to unexported\nidentifier\u0026quot;) and (2) \u0026quot;hard\u0026quot; errors, for which we can't, e.g.\n\u0026quot;undefined symbol\u0026quot;, \u0026quot;addition of string + int\u0026quot;.\n\nMany tools will want to type-check arbitrary expressions containing \u0026quot;soft\u0026quot;\nerrors.  For example, a debugger REPL might allow users to inspect the values of\nvariables whose identifiers are unexported.  An Annotalysis-like tool that processes\nthread-safety annotations might permit GUARDED_BY annotations to denote unexported\nmutexes.\n\nThe API should support a mode in which soft errors can be suppressed.\n\n\n\nNB: the interpretation of the selector e.f (where f is unexported) is a challenge since\ne's type might have two fields (or two) methods both named f but qualified by different\npackages.\u003c/pre\u003e",
	"user": {
		"login": "adonovan",
		"id": 5658175,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2014-12-08T10:40:56Z",
	"created_at": "2014-02-19T17:25:33Z",
	"updated_at": "2016-06-25T01:27:54Z"
}
