{
	"id": 212357394,
	"body": "\u003e - posix ttys and ptys\r\n\u003e - serial termios control, like terminals and rs232 devices.\r\n\r\n@davecheney @adg I think this package shouldn't expose a unix-like TTY interface but should rather build something smarter and cleaner on top of it. By separating concerns, it should then be even easier to port this package on non unix-like OSes. TTY and PTY are low-level POSIX/*NIX interfaces that should go to `x/sys/unix` like termios partly is already (the structure only so far)... \r\n\r\nIn my opinion, this package should only provide an abstraction based on the canonical-mode API (line disciplines + terminal capabilities? + readline?). And make the most out of go's beautiful IO stack: this package should see a serial device as nothing more than a stream of bytes (`[]byte`) with hardware or software control-flow management.\r\n\r\nIt is commonly admitted that the TTY API is a messy melting pot of distinct concerns:\r\n- line disciplines.\r\n- serial device management including data transmission, control-flow/handshaking...\r\n- non-canonical/raw mode for blocking/polling/timed reading modes.\r\n\r\nOf course it made sense at the time it was built (the 80's is synonym of high space and time constraints), but only time constraints require special kernel attention nowadays (i.e. save time/be fast by letting a kernel handling special cases like clocking a serial line transmission or handling \u003ckbd\u003eC-z\u003c/kbd\u003e signal asap)...\r\n\r\nI even think the 100% user-land implementation in pure go could be experienced given the CPU/serial device speed ratio. This is for example what GNU readline does.",
	"user": {
		"login": "Julio-Guerra",
		"id": 172303,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-20T09:54:31Z",
	"updated_at": "2016-04-20T11:28:02Z"
}
