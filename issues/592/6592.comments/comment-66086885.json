{
	"id": 66086885,
	"body": "\u003ca id=\"c13\"\u003e\u003c/a\u003eComment 13:\n\n\u003cpre\u003eMergedInto: 6566\n\nruntime.new is only called by code generated by 5g as the compiled form of\nthe Go expression new(T). At a given call site T is fixed - there are no\ntype variables in Go.\n\nI see how the bug can be caused by nomemprof confusion now. All the skips\nyou saw are buggy skips, since the allocation of the buckets themselves\n(which is what we were trying to skip) is no longer done with malloc. If\nyou have a meant-to-be-profiled N-byte pointer p that misses its\nMProf_Malloc, the MProf_Free won't find it, no harm done. But if you have a\nprofiled N-byte pointer p that hits its MProf_Malloc but misses its\nMProf_Free, the hash table entry created by setaddrbucket in MProf_Malloc\nwill not be removed from the hash table. When the pointer is later\nreallocated and also profiled (perhaps as a different size), the next\nMProf_Malloc for that address will create a new bucket, earlier in the hash\nchain, so a matched MProf_Free will find the new bucket, and the math will\nstill be okay. But if the p is later used for a profiled M-byte allocation\nthat misses its MProf_Malloc, the MProf_Free will find the stale bucket\nentry left by the earlier missed MProf_Free. At that point (perhaps much\nlater), it will subtract the new size from the old bucket, causing the\nstrange behavior we saw. It will also subtract one from the bucket count,\nbut that's actually a belated but correct update: the old p really did get\nfreed.\n\nThat is:\n\n(1) p allocated and profiled with size N1 and stack S1\n(2) MProf_Malloc calls setaddrbucket(p, b1 for stack S1)\n(3) MProf_Free spuriously missed\n\n(4) repeat any number of times:\n    either:\n        p reallocated and not profiled\n    or:\n        p reallocated and profiled with size Nx and stack Sx\n        MProf_Malloc calls setaddrbucket(p, bx for stack Sx)\n        MProf_Free calls getaddrbucket, updates counts in bx correctly\n\n(5) p allocated and profiled with size N2 and stack S2\n(6) MProf_Malloc spuriously missed, should have set b2 for stack S2\n(7) MProf_Free calls getaddrbucket, finds b1 for stack S1\n    b1.recent_frees++\n    b1.recent_free_bytes += N2;\n\nThe b1.recent_frees++ is late but correct. It should have happened in step\n(3).\nThe b1.recent_free_bytes += N2 is late and incorrect. The one that should\nhave happened in step (3) should have used N1, not N2.\n\nThis is why the recent_frees numbers always look fine but the\nrecent_free_bytes numbers are incorrect.\u003c/pre\u003e\n\n\n\n_Status changed to **Duplicate**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-17T17:37:49Z",
	"updated_at": "2014-12-08T10:36:31Z"
}
