{
	"id": 137740847,
	"number": 14592,
	"state": "open",
	"title": "runtime: cleanup OS threads during GC?",
	"body": "1. What version of Go are you using (`go version`)?\r\n1.5.3, 1.6\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nx86_64 - OSX and Linux\r\n\r\n3. What did you do?\r\nAny golang program will create a new OS thread when it needs to if things are blocked. But these threads aren't ever destroyed. For example, a program using 7 goroutines might have 40+ OS threads hanging around. The numbers will surely get much higher as traffic fluctuates against a golang server process throughout the day.\r\n\r\n4. What did you expect to see?\r\nOnce an OS thread has been idle long enough, I would have expected it to be destroyed. Being recreated if needed. Expanding and contracting like the relationship between the heap and GC.\r\n\r\n5. What did you see instead?\r\nThe many OS threads that were created hang around even with an idle program and very few goroutines.\r\n\r\n---\r\n\r\nAfter doing some reading into other (closed) issues on this repo dating back to 2012 - including the one where `SetMaxThreads` was introduced - I'm curious, why keep the OS threads around instead of cleaning them up?",
	"user": {
		"login": "brianmario",
		"id": 11571,
		"type": "User",
		"site_admin": true
	},
	"assignee": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"created_at": "2016-03-02T01:09:18Z",
	"updated_at": "2016-05-09T18:14:32Z",
	"milestone": {
		"id": 1748849,
		"number": 42,
		"title": "Go1.8Maybe"
	}
}
