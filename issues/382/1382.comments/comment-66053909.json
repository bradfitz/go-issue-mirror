{
	"id": 66053909,
	"body": "\u003ca id=\"c44\"\u003e\u003c/a\u003eComment 44 by **leimy2k**:\n\n\u003cpre\u003e\u003e\u003e I suppose they could all implement WaiterPlus really (Wait and Add) and it could just\nbe called Waiter.\n\n\u003e is there really a significant advantage to having these three quite different\nsynchronisation primitives implement \n\u003e the same interface? i can't see that that an algorithms written using one would allow\nchanging for another \n\u003e without breaking.\n\nI'm hard pressed to come up with a situation, other than some kind of heavy refactoring\nof an algorithm where one would want to yank out a WaitAll style policy and replace with\na WaitAny style policy.  I suppose the only advantage you get is the potential to avoid\nextra code maintenance by changing all the types used throughout a big stack of API\ncalls.  Maybe that's not enough, and makes the idea of putting these in an interface\nreckless.\n\nIt's not really the same as say implementing Reader, where you don't care if it comes\nfrom a File or the network, as it's really a Wait will behave differently based on the\npolicy implementing object you choose to feed a function requiring a Waiter.\n\nI suppose you're correct that it's not an advantage, and that it's best to be explicit\nabout such policies.  Seems like too much inversion of control being injected\npotentially deeply within a higher order algorithm :-)\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-01-06T17:49:56Z",
	"updated_at": "2014-12-08T10:08:05Z"
}
