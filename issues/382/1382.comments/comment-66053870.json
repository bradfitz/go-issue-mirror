{
	"id": 66053870,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eAFAICS there are two quite different APIs here:\n- A way for one goroutine to wait for others to complete.\n- A way for several goroutines to wait for each other to change computation \"phase\".\n\nThe former is what's being asked for in the initial post in this thread\n\u003ca href=\"http://groups.google.com/group/golang-nuts/browse_thread/thread/b26b7e519ef9308\"\u003ehttp://groups.google.com/group/golang-nuts/browse_thread/thread/b26b7e519ef9308\u003c/a\u003e\nand what Russ proposes above.\n\nThe latter is what's being provided by leimy2k above, and is a more convention\nsemantic for something called a \"Barrier\".\n\nBoth are useful, but for quite different things. I'd suggest that the\nformer is a more common requirement. The semantics for the latter\nneed some thinking about (perhaps taking some notice of X10's Clocks?\n - see \u003ca href=\"http://dist.codehaus.org/x10/documentation/languagespec/x10-latest.pdf)\"\u003ehttp://dist.codehaus.org/x10/documentation/languagespec/x10-latest.pdf)\u003c/a\u003e.\n\nI've attached an implementation, based on some code I wrote some time ago,\nthat implements the former, with slightly more relaxed semantics than Russ suggests\n(neither Add nor Wait need be called in the main goroutine; it allows several goroutines\nto wait for the same collection to complete).\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1382/8/waiter.go\"\u003ewaiter.go\u003c/a\u003e (1260 bytes)",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-01-05T11:53:51Z",
	"updated_at": "2014-12-08T10:08:04Z"
}
