{
	"id": 66053878,
	"body": "\u003ca id=\"c16\"\u003e\u003c/a\u003eComment 16 by **leimy2k**:\n\n\u003cpre\u003eRog, it sounds like an optimization to avoid the defer before one knows if it's really a\nproblem for anyone's code.  I may not have written enough Go yet so I'll just bend to\nyour experience with this.\n\nAlso the example in your version can be implemented pretty easily in my proposed API\n\nbelow is your example:\n\n// e.g. to start a collection of goroutines and wait for them to complete:\n//\tvar w Waiter\n//\tw.Add(10)\n//\tfor i := 0; i \u0026lt; 10; i++ {\n//\t\tgo func() {\n//       \t\tdoSomething()\n//\t\t\tw.Done()\n//\t\t}()\n//\t}\n//\tw.Wait()\n\nI'd do that like this:\n\n    b := NewBarrier(10+1)\n    for i:=0; i\u0026lt; 10; i++ {\n        go func () {\n            doSomething()\n            b.Wait()\n        }\n    }\n    b.Wait()\n\nYes, the Done call means you don't need N+1 items in the barrier group, and that may be\na lot clearer to some people, but I think Done and Wait are the same function\nfundamentally, which is why I ignored the advice to implement them to begin with :-).  \n\nIn the end I don't really care which one gets adopted, (if any are)  because I\nunderstand how both work and can make use of either.  Also I suspect that people may\nunderstand N calls to Done, and 1 call to Wait a little bit better than N+1 Wait calls,\nbut that's not how I learned to use barriers.  I suspect I've a different background\nthan others though.\n\nDave\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-01-05T15:30:10Z",
	"updated_at": "2014-12-22T05:47:38Z"
}
