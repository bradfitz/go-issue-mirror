{
	"id": 232837151,
	"body": "Dup of #16272\nOn Jul 14, 2016 6:14 PM, \"Joe Toscano\" \u003cnotifications@github.com\u003e wrote:\n\n\u003e This wasn't happening on my machine before I installed the macOS beta.\n\u003e Kind of regretting it now! üòÅ\n\u003e\n\u003e    1.\n\u003e\n\u003e    What version of Go are you using?\n\u003e    go version go1.6.2 darwin/amd64\n\u003e    2.\n\u003e\n\u003e    What operating system and processor architecture are you using?\n\u003e    macOS Sierra beta2 (macOS 10.12 16A238m)\n\u003e    on amd64\n\u003e    3.\n\u003e\n\u003e    What did you do?\n\u003e    Compiled and ran the following small program:\n\u003e\n\u003e package main\n\u003e\n\u003e import (\n\u003e     \"fmt\"\n\u003e     \"time\"\n\u003e )\n\u003e\n\u003e func main() {\n\u003e     i := 0\n\u003e     for {\n\u003e         i++\n\u003e         fmt.Printf(\"Sleeping, pass #%d... \", i)\n\u003e         time.Sleep(time.Millisecond * 50)\n\u003e         fmt.Printf(\"done.\\n\")\n\u003e     }\n\u003e }\n\u003e\n\u003e\n\u003e    1.\n\u003e\n\u003e    What did you expect to see?\n\u003e    A practically infinite number of loop iterations.\n\u003e    2.\n\u003e\n\u003e    What did you see instead?\n\u003e    Output for a few seconds, then nothing, because time.Sleep() fails to\n\u003e    return after a few iterations of the loop.\n\u003e    Using a debugger (https://github.com/derekparker/delve), I'm able to\n\u003e    interrupt the program and grab a stack trace when it freezes, and it's\n\u003e    always exactly the same:\n\u003e\n\u003e 0  0x0000000000056c43 in runtime.mach_semaphore_timedwait\n\u003e    at /usr/local/go/src/runtime/sys_darwin_amd64.s:421\n\u003e 1  0x0000000000026d0b in runtime.semasleep1\n\u003e    at /usr/local/go/src/runtime/os1_darwin.go:412\n\u003e 2  0x000000000004b250 in runtime.semasleep.func1\n\u003e    at /usr/local/go/src/runtime/os1_darwin.go:439\n\u003e 3  0x0000000000053597 in runtime.systemstack\n\u003e    at /usr/local/go/src/runtime/asm_amd64.s:291\n\u003e 4  0x000000000002d390 in runtime.startTheWorldWithSema\n\u003e    at /usr/local/go/src/runtime/proc.go:986\n\u003e 5  0x0000000000183600 in (nil)\n\u003e    at ?:-1\n\u003e\n\u003e I get the same result if the for loop is moved into a separate goroutine,\n\u003e or if the sleep duration is varied.\n\u003e\n\u003e ‚Äî\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/16382\u003e, or mute the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AAAKPcJy2TABXENnMPgeDKzC9Xl7o6_Eks5qVt7VgaJpZM4JM_hS\u003e\n\u003e .\n\u003e\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-15T01:23:14Z",
	"updated_at": "2016-07-15T01:23:14Z"
}
