{
	"id": 66049551,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eI just encountered a nice example of when this functionality might be useful. To quote\nfrom a reddit user on why Go \"needs\" pointer arithmetic: \n\"One well-used example is making classes as small as possible for tree nodes or linked\nlist nodes so you can cram as many of them into L1 cache lines as possible. This is done\nby each node having a single pointer to a left sub-node, and the right sub-node being\naccessed by the pointer to the left sub-node + 1. This saves the 8-bytes for the\nright-node pointer. To do this you have to pre-allocate all the nodes in a vector or\narray so they're laid out in memory sequentially, but it's worth it when you need it for\nperformance. (This also has the added benefit of the prefetchers being able to help\nthings along performance-wise - at least in the linked list case).''\n\nYou can *almost* do this in Go with \n\n   type node struct {\n      value int\n      children *[2]node\n   }\n\nexcept that there's no way of getting a *[2]node from the underlying slice.\u003c/pre\u003e",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-05-11T09:16:40Z",
	"updated_at": "2014-12-08T10:04:26Z"
}
