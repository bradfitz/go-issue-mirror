{
	"id": 154383450,
	"number": 15658,
	"state": "open",
	"title": "runtime: FreeBSD memory corruption involving finalizers",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\n`go version go1.6.2 freebsd/amd64`\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\n```bash\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"freebsd\"\r\nGOOS=\"freebsd\"\r\nGOPATH=\"\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/freebsd_amd64\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"cc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0\"\r\nCXX=\"clang++\"\r\n```\r\n\r\n3. What did you do?\r\n\r\n```go\r\npackage main\r\n\r\n/* stdlib includes */\r\nimport (\r\n        \"fmt\"\r\n        \"os/exec\"\r\n)\r\n\r\nfunc run(done chan struct{}) {\r\n        cmd := exec.Command(\"true\")\r\n        if err := cmd.Start(); err != nil {\r\n                goto finished\r\n        }\r\n\r\n        cmd.Wait()\r\n\r\nfinished:\r\n        done \u003c- struct{}{}\r\n        return\r\n}\r\n\r\nfunc main() {\r\n        fmt.Println(\"Starting a bunch of goroutines...\")\r\n\r\n        // 8 \u0026 16 are arbitrary\r\n        done := make(chan struct{}, 16)\r\n\r\n        for i := 0; i \u003c 8; i++ {\r\n                go run(done)\r\n        }\r\n\r\n        for {\r\n                select {\r\n                case \u003c-done:\r\n                        go run(done)\r\n                }\r\n        }\r\n}\r\n```\r\n\r\n4. What did you expect to see?\r\n\r\nI expect this strange program to spawn instances of /bin/true in parallel, until I stop it.\r\n\r\n5. What did you see instead?\r\n\r\nVarious types of panics caused by what looks to be corruption within the finalizer lists, caused by what I am assuming is based on race conditions.  These panics can happen as quickly as 2 minutes, or much longer.  10 minutes seems a good round number.\r\n\r\nOccasionally addspecial gets stuck in an infinite loop holding the lock, and the process wedges.  This is illustrated in log 1462933614, with x.next pointing to x.  This appears to be corruption of that data structure.  I have seen processes in this state run for 22 hours.\r\n\r\nI understand there is some trepidation expressed in issue #11485 around the locking of the data structures involved.\r\n\r\nHere are some sample messages:\r\n* `fatal error: runtime.SetFinalizer: finalizer already set`\r\n* `runtime: nonempty check fails b.log[0]= 0 b.log[1]= 0 b.log[2]= 0 b.log[3]= 0\r\nfatal error: workbuf is empty`\r\n\r\n[1462926841-SetFinalizer-ex1.txt](https://github.com/golang/go/files/260514/1462926841-SetFinalizer-ex1.txt)\r\n[1462926969-SetFinalizer-ex2.txt](https://github.com/golang/go/files/260516/1462926969-SetFinalizer-ex2.txt)\r\n[1462933295-nonempty-check-fails.txt](https://github.com/golang/go/files/260517/1462933295-nonempty-check-fails.txt)\r\n[1462933614-wedged.txt](https://github.com/golang/go/files/260515/1462933614-wedged.txt)\r\n\r\nThis was run on an 8-core processor, and a 4-core 8-thread processor with ECC RAM, similar results.\r\n\r\nAdditionally, while this example is an extreme, it also represents the core functionality of a project I've been working on part-time for many months.  I'm happy to provide any further assistance diagnosing this issue - I'm very invested!\r\n\r\n\r\n",
	"user": {
		"login": "derekmarcotte",
		"id": 12298521,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "OS-FreeBSD"
		}
	],
	"assignee": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"comments": 44,
	"created_at": "2016-05-12T02:24:56Z",
	"updated_at": "2016-09-02T19:46:54Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
