{
	"id": 153573415,
	"number": 15588,
	"state": "open",
	"title": "os: using CommandLineToArgv slows process startup significantly",
	"body": "Windows's `os.init()` calls `syscall.CommandLineToArgv` to split the Windows command line into separate arguments. This in turn loads shell32.dll and calls [CommandLineToArgvW](https://msdn.microsoft.com/en-us/library/windows/desktop/bb776391(v=vs.85).aspx) to do the actual work of splitting the command line. This is different from C programs generated by Microsoft's compiler, which use a nearly identical function in the CRT to do the splitting.\r\n\r\nFor a typical Go program, this is the only thing that causes shell32.dll to be loaded. Loading shell32 is expensive, since it depends on lots of additional DLLs -- on my machine shell32 loads 13 additional DLLs that would not otherwise be loaded.\r\n\r\nBy rewriting the algorithm from `CommandLineToArgvW` directly in go, we can eliminate the need to load all these extra DLLs. This algorithm is documented at https://msdn.microsoft.com/en-us/library/17w5ykft.aspx, although I have found that there is an undocumented special case where a `\"` next to another `\"` that ends a quoted argument should be included verbatim.\r\n\r\nI have prototyped this change (3ae6766b5fb9917c98add93d5222d11bc23bcd71) and found on my machine that it reduces startup time for a simple Go program that pulls in `os` from 22ms to 16ms. The cost for this is about a 10KB increase in binary size.\r\n\r\nIf this approach seems worthwhile then I can send out a code review.",
	"user": {
		"login": "jstarks",
		"id": 9548354,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		},
		{
			"name": "OS-Windows"
		}
	],
	"comments": 18,
	"created_at": "2016-05-07T04:47:08Z",
	"updated_at": "2016-10-21T06:10:53Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
