{
	"id": 105993739,
	"number": 12588,
	"state": "closed",
	"title": "cmd/compile: escape analysis miss",
	"body": "```\r\npackage main\r\n\r\ntype A struct {\r\n        b [3]uint64\r\n}\r\n\r\nfunc f(a A) int {\r\n        for i, x := range \u0026a.b { // \u0026 to avoid making a copy of a.b\r\n                if x != 0 {\r\n                        return 64*i + int(x)\r\n                }\r\n        }\r\n        return 0\r\n}\r\n\r\nfunc main() {\r\n        var a A\r\n        f(a)\r\n}\r\n```\r\n```\r\n% go build -gcflags=-m escape.go\r\n# command-line-arguments\r\n./escape.go:7: moved to heap: a\r\n./escape.go:8: \u0026a.b escapes to heap\r\n```\r\nWhy does taking the address of field of a local value cause the formal parameter to escape ?\r\n\r\n/cc @dr2chase\r\n\r\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2015-10-01T18:49:42Z",
	"created_at": "2015-09-11T11:41:14Z",
	"updated_at": "2016-10-04T17:55:07Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
