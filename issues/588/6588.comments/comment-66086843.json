{
	"id": 66086843,
	"body": "\u003ca id=\"c7\"\u003e\u003c/a\u003eComment 7:\n\n\u003cpre\u003ethe first length = 0 is because we used the wrong pointer.\n\ndiff -r 050f1f96c25c src/pkg/syscall/zsyscall_darwin_amd64.go\n--- a/src/pkg/syscall/zsyscall_darwin_amd64.go\tTue Oct 15 21:35:52 2013 -0400\n+++ b/src/pkg/syscall/zsyscall_darwin_amd64.go\tWed Oct 16 00:41:03 2013 -0400\n@@ -594,8 +594,6 @@\n \tvar _p0 unsafe.Pointer\n \tif len(buf) \u003e 0 {\n \t\t_p0 = unsafe.Pointer(\u0026buf[0])\n-\t} else {\n-\t\t_p0 = unsafe.Pointer(\u0026_zero)\n \t}\n \tr0, _, e1 := Syscall(SYS_GETFSSTAT64, uintptr(_p0), uintptr(len(buf)), uintptr(flags))\n \tn = int(r0)\n\nthe kernel is not checking nr, but whether _p0 is nil or not to determine whether to\nreturn\nthe length. as can be seen from the above code snippet, we're always passing a non-nil\npointer to getfsstat.\n\nI'm still not sure about the 2nd problem of returning all zero struct.\n\n\nThis is not a very big deal though, as the user could workaround by using syscall.Syscall\ndirectly (just make sure to use SYS_GETFSSTAT64). Defer to Go 1.3.\n\nAnother reason is that although I gave a simple patch above, but there is still a long\nway\nto go before I can make a CL (we need to fix the program that generates the zsyscall\nfile,\nand i think we'd need a general mechanism to annotate that certain parameter is allowed\nto be nil, and then double check all syscall wrappers for the same problem; it will be a\nsomewhat big project).\u003c/pre\u003e\n\n_Labels changed: added **priority-later**, **go1.3**, removed **priority-triage**._",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-16T04:48:25Z",
	"updated_at": "2014-12-08T10:36:27Z"
}
