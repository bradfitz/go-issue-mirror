{
	"id": 51283956,
	"number": 5641,
	"state": "closed",
	"title": "linux/amd64 does not work when 0x00c0 address is unavailable",
	"body": "\u003cpre\u003eWe have a program that uses SWIG and AddressSanitizer for the C++ code.\nAddressSanitizer runtime occupies 0x00c0 address very early during initialization, so Go\nruntime fallbacks to 32-bit heap allocation. Be default Linux satisfies mmap's from\n0x7fff address range, so both Go heap and C++ allocations live at 0x7fff. Go requires\nheap to be contiguous. This becomes impossible, because C++ allocations are satisfied\nfrom the same range, so the program quickly crashes with:\nruntime: address space conflict: map(0x7f25ff1e9000) = 0x7f25f70c9000\nfatal error: runtime: address space conflict\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:30:47Z",
	"created_at": "2013-06-05T12:51:12Z",
	"updated_at": "2016-06-24T22:41:55Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
