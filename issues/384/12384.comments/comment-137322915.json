{
	"id": 137322915,
	"body": "As mentioned in the recent named parameter proposal, I think\none solution to your RPC/API library problem is to define inline\n(anonymous) parameter structs as function parameter. e.g.\n\nfunc (r *State) MethodA(args struct { Arg1 int; Arg2 string }) error {\n   // use args.Arg1, args.Arg2, etc.\n}\n\nAnd then reflect should be able to pick up the names easily.\n\nBecause these RPC methods are only intended to be called indirectly\nusing reflect, having anonymous struct as sole argument won't\ncomplicate anything.\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-03T03:49:19Z",
	"updated_at": "2015-09-03T03:49:19Z"
}
