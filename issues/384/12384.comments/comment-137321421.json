{
	"id": 137321421,
	"body": "Reflect provides information about _types_. Function parameter names are not part of the func type. In contrast, struct field names are. That is:\r\n\r\nvar f func(x int)\r\nvar g func(y int)\r\nf = g // perfectly fine, same type\r\n\r\nvar s struct { x int }\r\nvar t struct { y int }\r\ns = t // compiler error, not same type\r\n\r\nReflect provides access to struct field names because they are part of the type. Func parameter names are not. \r\n\r\nI think it would likely be a mistake to expand the scope of package reflect beyond the clearly defined line of \"types\". It's not obvious to me where else to draw a line between func parameter names and the entire source files.\r\n\r\nAlso, because parameter names are not part of type checking and have a history of having literally no semantic meaning outside the function body and documentation, I'd be wary of enabling reflection-based programs that break when you rename a function parameter. People understand that renaming a struct field can break things, because struct fields can be referred to in other places in the source. No one expects that renaming a function parameter (and updating references in the function body) would break anything else.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-03T03:32:14Z",
	"updated_at": "2015-09-03T03:32:14Z"
}
