{
	"id": 103751381,
	"number": 12384,
	"state": "closed",
	"title": "proposal: Add support for retrieving function parameter names with reflect",
	"body": "Currently there is no way to retrieve function/method parameter names with the reflect package. The only introspection available is for the types of the input and output parameters of a function. The seems to be an exception with the reflect package, since it does offer naming information in most other cases.\r\n\r\nWhen building RPC/API libraries it is useful to be able to retrieve these method parameters names for purposes of runtime schema output, input validation on unstructured data, and possibly some API semantics. There are some alternatives right now:\r\n- Parse the source and use code generation to compile this metadata into the running program.\r\n- Use structs for all input/output and then use the field names in the structs, along with their tags, for introspection.\r\n\r\nSome other considerations:\r\n-  I understand that this might lead to binary and/or memory size increase due to the additional metadata that might have to be stored. This change might not be ideal this far into the 1.X cycle, but I think it should at least be considered for 2.0.\r\n- A fairly straightforward way to do this, that would not break backwards compatibility, would be to add two methods to reflect.Type that would retrieve the In/Out parameter names by Index.\r\n\r\nApologies if this is a duplicate issues. I searched the forums (nuts/dev) and this issue tracker and could not find any previous issues filed on this topic.\r\n",
	"user": {
		"login": "nenadl",
		"id": 1445362,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 4,
	"closed_at": "2015-09-03T22:53:44Z",
	"created_at": "2015-08-28T16:29:35Z",
	"updated_at": "2015-09-03T22:53:44Z"
}
