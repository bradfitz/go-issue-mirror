{
	"id": 161861763,
	"number": 16161,
	"state": "closed",
	"title": "reflect: large performance regression in reflect.New",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n\u003e 1. What version of Go are you using (`go version`)?\r\n\r\ngo1.7beta2: go version devel +fca9fc5 Thu Jun 16 19:45:33 2016 +0000 linux/amd64\r\n\r\n\u003e 2. What operating system and processor architecture are you using (`go env`)?\r\n\r\nlinux/amd64\r\n\r\n\u003e 3. What did you do?\r\n\r\nI have a program that spends most of its time marshaling and unmarshaling data that's json- and protobuf-encoded. It's been running on go1.6.x for several months (currently go1.6.2), and I upgraded it to go1.7beta2.\r\n\r\nIt's a closed-source project, and I don't currently have a small reproducer.\r\n\r\n\u003e 4. What did you expect to see?\r\n\r\nI expected no major performance regressions.\r\n\r\n\u003e 5. What did you see instead?\r\n\r\nThe program is significantly slower, with many more cycles spent in calls to `reflect.New`. Over 1/3rd of the program's execution time is spent in calls to reflect.(*rtype).ptrTo, which didn't even show up on profiles of the program under go1.6.2. Most of the time with ptrTo on the stack is in calls to RLock and RUnlock a *sync.RWMutex. The ptrTo cache appears to have been removed in February in 30f93f09944c54147bec9e5c39631f17addd94c7.\r\n\r\nHere's a bit of a go1.6.2 profile:\r\n```\r\n(pprof) peek reflect.New\r\n126.07s of 138.79s total (90.84%)\r\nDropped 526 nodes (cum \u003c= 0.69s)\r\n----------------------------------------------------------+-------------\r\n      flat  flat%   sum%        cum   cum%   calls calls% + context \t \t \r\n----------------------------------------------------------+-------------\r\n                                             2.38s 54.71% |   redacted.path/vendor/github.com/golang/protobuf/proto.(*Buffer).dec_struct_message\r\n                                             1.97s 45.29% |   redacted.path/vendor/github.com/golang/protobuf/proto.(*Buffer).dec_slice_struct\r\n     0.33s  0.24%  0.24%      4.35s  3.13%                | reflect.New\r\n                                             3.90s   100% |   reflect.unsafe_New\r\n----------------------------------------------------------+-------------\r\n```\r\n\r\nAnd here's a bit of the profile with go1.7beta2:\r\n```\r\n(pprof) peek reflect.New\r\n184.09s of 197.76s total (93.09%)\r\nDropped 587 nodes (cum \u003c= 0.99s)\r\n----------------------------------------------------------+-------------\r\n      flat  flat%   sum%        cum   cum%   calls calls% + context \t \t \r\n----------------------------------------------------------+-------------\r\n                                            39.29s 51.75% |   redacted.path/vendor/github.com/golang/protobuf/proto.(*Buffer).dec_struct_message\r\n                                            36.64s 48.25% |   redacted.path/vendor/github.com/golang/protobuf/proto.(*Buffer).dec_slice_struct\r\n     0.35s  0.18%  0.18%     75.93s 38.40%                | reflect.New\r\n                                            67.65s 89.57% |   reflect.(*rtype).ptrTo\r\n                                             7.88s 10.43% |   reflect.unsafe_New\r\n----------------------------------------------------------+-------------\r\n(pprof) peek ptrTo\r\n184.09s of 197.76s total (93.09%)\r\nDropped 587 nodes (cum \u003c= 0.99s)\r\n----------------------------------------------------------+-------------\r\n      flat  flat%   sum%        cum   cum%   calls calls% + context \t \t \r\n----------------------------------------------------------+-------------\r\n                                            67.65s   100% |   reflect.New\r\n     4.87s  2.46%  2.46%     67.65s 34.21%                | reflect.(*rtype).ptrTo\r\n                                            37.70s 60.06% |   sync.(*RWMutex).RLock\r\n                                            23.76s 37.85% |   sync.(*RWMutex).RUnlock\r\n                                             1.31s  2.09% |   runtime.mapaccess1_fast64\r\n----------------------------------------------------------+-------------\r\n```\r\n",
	"user": {
		"login": "rhysh",
		"id": 230685,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "crawshaw",
		"id": 161319,
		"type": "User",
		"site_admin": false
	},
	"comments": 15,
	"closed_at": "2016-06-23T17:40:26Z",
	"created_at": "2016-06-23T07:57:07Z",
	"updated_at": "2016-06-29T11:31:43Z",
	"milestone": {
		"id": 1714149,
		"number": 40,
		"title": "Go1.7Maybe"
	}
}
