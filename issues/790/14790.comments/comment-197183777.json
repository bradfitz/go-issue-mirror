{
	"id": 197183777,
	"body": "@alexbrainman Try the following patch:\r\n```\r\ndiff --git a/src/runtime/proc.go b/src/runtime/proc.go\r\nindex 758a0a8..9db79ed 100644\r\n--- a/src/runtime/proc.go\r\n+++ b/src/runtime/proc.go\r\n@@ -3972,7 +3972,7 @@ func runqgrab(_p_ *p, batch *[256]guintptr, batchHead uint32, stealRunNextG bool\r\n                n := t - h\r\n                n = n - n/2\r\n                if n == 0 {\r\n-                       if stealRunNextG {\r\n+                       //if stealRunNextG {\r\n                                // Try to steal from _p_.runnext.\r\n                                if next := _p_.runnext; next != 0 {\r\n                                        // Sleep to ensure that _p_ isn't about to run the g we\r\n@@ -3982,14 +3982,14 @@ func runqgrab(_p_ *p, batch *[256]guintptr, batchHead uint32, stealRunNextG bool\r\n                                        // Instead of stealing runnext in this window, back off\r\n                                        // to give _p_ a chance to schedule runnext. This will avoid\r\n                                        // thrashing gs between different Ps.\r\n-                                       usleep(100)\r\n+                                       //usleep(100)\r\n                                        if !_p_.runnext.cas(next, 0) {\r\n                                                continue\r\n                                        }\r\n                                        batch[batchHead%uint32(len(batch))] = next\r\n                                        return 1\r\n                                }\r\n-                       }\r\n+                       //}\r\n                        return 0\r\n                }\r\n                if n \u003e uint32(len(_p_.runq)/2) { // read inconsistent h and t\r\n```",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-16T06:52:21Z",
	"updated_at": "2016-03-16T06:52:21Z"
}
