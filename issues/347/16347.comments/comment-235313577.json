{
	"id": 235313577,
	"body": "Interesting - there appears to be a disconnect between the RFC and many examples of x509 Name Constraints (for DNS names).\r\n\r\nI was mistakenly looking at (and quoting) the following paragraph from [section 4.2.1.10 of RFC 5280](https://tools.ietf.org/html/rfc5280#section-4.2.1.10) which says:\r\n\r\n\u003e    For URIs, the constraint applies to the host part of the name.  The\r\n   constraint MUST be specified as a fully qualified domain name and MAY\r\n   specify a host or a domain.  Examples would be \"host.example.com\" and\r\n   \".example.com\".  When the constraint begins with a period, it MAY be\r\n   expanded with one or more labels.  That is, the constraint\r\n   \".example.com\" is satisfied by both host.example.com and\r\n   my.host.example.com.  However, the constraint \".example.com\" is not\r\n   satisfied by \"example.com\".  When the constraint does not begin with\r\n   a period, it specifies a host.\r\n\r\nHowever, this applies *to URIs*.  My CA certificate (and essentially all others using Name Constraints) looks like this:\r\n\r\n```\r\n            X509v3 Name Constraints: critical\r\n                Permitted:\r\n                  DNS:..example.com\r\n```\r\n\r\nBecause this is a *DNS Name* (and not a URI), that paragraph does not apply. Instead, the following paragraph does:\r\n\r\n\u003e    DNS name restrictions are expressed as host.example.com.  Any DNS\r\n   name that can be constructed by simply adding zero or more labels to\r\n   the left-hand side of the name satisfies the name constraint.  For\r\n   example, www.host.example.com would satisfy the constraint but\r\n   host1.example.com would not.\r\n\r\nInterestingly, this never says anything about a leading period. I interpreted a leading period to mean valid certificates MUST have at least one additional leading label. (e.g. the name `example.com` does not satisfy the constraint `.example.com`). The RFC appears to leave the behavior associated with a leading period on a DNS name constraint **undefined**.\r\n\r\nHere are examples that include a leading period:\r\n- [Constraints: what they are and how theyâ€™re used](https://blogs.technet.microsoft.com/pki/2014/03/05/constraints-what-they-are-and-how-theyre-used/) (Windows PKI Blog)\r\n- [Using Name Constraints](https://technet.microsoft.com/en-us/library/cc757755.aspx) (Technet)\r\n- [CAs, Name Constraints, and a Business Opportunity](http://karl.kornel.us/2014/09/cas-name-constraints-and-a-business-opportunity/) (karl.kornel.us blog)\r\n- [Hellenic Academic and Research Institutions Cert. Authority 2011](http://www.harica.gr/trust_generic.php) (An actual CA cert, trusted by Mozilla, Microsoft, and Apple)\r\n\r\nOther examples that don't specify:\r\n- [Name Constraints in x509 Certificates](https://timothy-quinn.com/name-constraints-in-x509-certificates/) \r\n- [x509v3_config](https://www.openssl.org/docs/manmaster/apps/x509v3_config.html) (OpenSSL docs)\r\n\r\nFinally (after hours of digging), an example that never uses a dot, and explicitly implies that `DNS:bad.com` means `*.bad.com`:\r\n- [`test/certs/setup.sh`](https://github.com/openssl/openssl/blob/ba1a1c3783bec68830da3a375b581afc73226ff4/test/certs/setup.sh#L212) (OpenSSL test suite)",
	"user": {
		"login": "JonathonReinhart",
		"id": 1916566,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-26T15:54:09Z",
	"updated_at": "2016-07-26T15:54:09Z"
}
