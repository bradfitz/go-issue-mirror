{
	"id": 158776271,
	"body": "Hans Boehm wrote a POPL paper on some of the problems with compiler\noptimizations and finalizers. If you use finalizers you need to appreciate\nsome of these issues. And yes, non-deterministic asynchronous execution of\nfinalizers can result in subtle hard to resolve errors.  As our GC\nalgorithms get better and our compiler optimizations get better this is\nlikely to become more of an issue, not less.\n\nhttp://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.10.4159\u0026rep=rep1\u0026type=pdf\n\n\nOn Sat, Nov 21, 2015 at 5:53 PM, dr2chase \u003cnotifications@github.com\u003e wrote:\n\n\u003e @cznic \u003chttps://github.com/cznic\u003e You understand that's not the problem\n\u003e that's biting us here, right? What we're worried about is where an\n\u003e important field is loaded from an object (like an OS file or socket\n\u003e descriptor), the object goes unreachable at some point within a function,\n\u003e yet the field value is still in use. If the object has a finalizer, and if\n\u003e the finalizer (say) closes that file while the called function is still\n\u003e using it, that's a problem. It's neither new nor unique to either Go or\n\u003e native code.\n\u003e\n\u003e This becomes more likely the more excited the optimizer is. The optimizer\n\u003e has to be taught some manners in the presence of finalizers.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/13347#issuecomment-158688762\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-22T16:38:26Z",
	"updated_at": "2015-11-22T16:38:26Z"
}
