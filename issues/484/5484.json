{
	"id": 51283701,
	"number": 5484,
	"state": "closed",
	"title": "cmd/gc: escape analysis does not move explicit allocation back onto stack",
	"body": "\u003cpre\u003epackage main\n\nfunc main() {\n\tx := make([]byte, 10)\n\t_ = x\n}\n\nproduces\n\n0000 (x.go:3) TEXT    main+0(SB),$72-0\n0001 (x.go:3) LOCALS  ,$24\n0002 (x.go:3) TYPE    x+-24(SP){[]uint8},$24\n0003 (x.go:4) MOVQ    $type.[]uint8+0(SB),(SP)\n0004 (x.go:4) MOVQ    $10,8(SP)\n0005 (x.go:4) MOVQ    $10,16(SP)\n0006 (x.go:4) CALL    ,runtime.makeslice+0(SB)\n0007 (x.go:4) MOVQ    24(SP),BX\n0008 (x.go:4) MOVQ    BX,x+-24(SP)\n0009 (x.go:4) MOVQ    32(SP),BX\n0010 (x.go:4) MOVQ    BX,x+-16(SP)\n0011 (x.go:4) MOVQ    40(SP),BX\n0012 (x.go:4) MOVQ    BX,x+-8(SP)\n0013 (x.go:6) RET     ,\n\nBut since the allocation is never used outside the function, there's no reason in\nprinciple for x to be allocated on the heap. Could escape analysis turn the make() into\nslicing an on-stack array?\u003c/pre\u003e",
	"user": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "GarbageCollector"
		},
		{
			"name": "Performance"
		}
	],
	"comments": 6,
	"closed_at": "2014-12-08T10:29:45Z",
	"created_at": "2013-05-15T21:58:59Z",
	"updated_at": "2016-06-24T22:40:16Z"
}
