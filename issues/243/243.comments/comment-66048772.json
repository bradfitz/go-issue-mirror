{
	"id": 66048772,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eIn many environments, malloc() will never fail -- you just eventually fault if the\nsystem can't satisfy the memory requirements.  Linux with overcommit (default setup\nfor many (most?) distros) behaves like this.  Go's practice of zero-filling freshly\nallocated objects may or may not end up hitting an immediate fault in new(),\ndepending how exactly the memory is allocated (if the heap sits on top of an\nanonymous mmap'd zero'd region the fault may be deferred quite a ways).\n\nIn nontrivial applications and environments you may need more memory just to have the\nresources to deal with fielding out of memory situations and somehow trying to\nrecover or inform the user -- which even if you reserve memory upfront you may not\nend up with enough.  You quite possibly need to allocate to create the stack trace\nfor your exception or to field your exception, and if unwinding your stack doesn't\nrelease enough memory, hm, throw the exception again?\n\nPerhaps a way to register an observer with the heap/gc subsystem would allow one to\nstart taking corrective action once memory consumption passes a threshold.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-11-17T09:46:36Z",
	"updated_at": "2014-12-08T10:03:49Z"
}
