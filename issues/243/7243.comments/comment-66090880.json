{
	"id": 66090880,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eTwo remarks.\n\nFirst: Currently\n    cookie := http.Cookie{Name: \"n\", Value: \"a,b\"}\n    fmt.Println(cookie.String()) // n=ab\n    cookie.MaxAge = 60\n    fmt.Println(cookie.String()) // n=ab; MaxAge=60\nyields\n  n=ab\n  n=ab; MaxAge=60\n\nWith Nigel's suggestion it would print\n  n=a,b             \u0026lt;-- Cookie header with looser rules\n  n=ab; MaxAge=60   \u0026lt;-- Set-Cookie header with stricter rules\n\nThis is behaviour of the String method of http.Cookie not\nreally intuitive.\nPackage net/http would behave almost \"schizophrenic\": Sometimes\nit acts as a strict server, sometimes as a liberal user agent.\n\n\nSecond: How would you write a proxy sitting between a\nbroken server and a forgiving browser? The server might\nsend malformed Set-Cookie header (which we would accept\non base of looser rules) but we wouldn't be able to\npass them through as the stricter rules apply for generating\nthe Set-Cookie header which has to be sent to the browser.\n\nAdmittedly such a proxy would not work in Go 1.2 without\nmanually and deliberately moving raw HTTP headers. But at least\nit is clear and explicit: We are willing to handle broken stuff.\n\nOn the other hand RFC 6265 requires the behaviour of section\n5.2 as a MUST, but then only for user agents...\n\n\nIs package net/http a server or a user agent (or both)\nif viewed under the light of RFC 6265?\u003c/pre\u003e",
	"user": {
		"login": "vdobler",
		"id": 701382,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-02-11T11:02:55Z",
	"updated_at": "2014-12-22T06:32:17Z"
}
