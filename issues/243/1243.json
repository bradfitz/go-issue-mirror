{
	"id": 51277540,
	"number": 1243,
	"state": "closed",
	"title": "specification: composite literal example invalid after gofmt",
	"body": "\u003cpre\u003eA parsing ambiguity arises when a composite literal using the TypeName form of the\nLiteralType appears between the keyword and the opening brace of the block of an\n\u0026quot;if\u0026quot;, \u0026quot;for\u0026quot;, or \u0026quot;switch\u0026quot; statement, because the braces\nsurrounding the expressions in the literal are confused with those introducing the block\nof statements. To resolve the ambiguity in this rare case, the composite literal must\nappear within parentheses.\n\n   if x == (T{a,b,c}[i]) { ... }\n   if (x == T{a,b,c}[i]) { ... }\n\nComposite literals, The Go Programming Language Specification.\n\u003ca href=\"http://golang.org/doc/go_spec.html#Composite_literals\"\u003ehttp://golang.org/doc/go_spec.html#Composite_literals\u003c/a\u003e\n\nThe second example is invalid because it does not survive gofmt.\n\npackage main\n\ntype T [3]int\n\nfunc main() {\n\tvar a, b, c, i, x int\n\tif (x == T{a, b, c}[i]) {\n\t}\n}\n\nAfter gofmt -w,\n\npackage main\n\ntype T [3]int\n\nfunc main() {\n\tvar a, b, c, i, x int\n\tif x == T{a, b, c}[i] {\n\t}\n}\n\n6g error:\n7: syntax error: unexpected }, expecting := or = or comma\n\nhg id 4c76cc96e113 tip\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2014-12-08T10:07:30Z",
	"created_at": "2010-11-01T16:05:40Z",
	"updated_at": "2016-06-24T19:21:54Z"
}
