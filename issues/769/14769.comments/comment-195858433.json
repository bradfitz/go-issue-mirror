{
	"id": 195858433,
	"body": "What's going on in the example doesn't have to do with \"when\" the deferred function runs. It has to do with \"where\" the return value is being stored.\r\n\r\nFor example, [this code](http://play.golang.org/p/0AkPss0fLo) behaves differently than the prior example:\r\n\r\n```go\r\nfunc c() (i int) {\r\n\tj := 1\r\n\tdefer func() { j++ }()\r\n\treturn j\r\n}\r\n```\r\n\r\n`i` is the name of a slot in the stack that is owned by the caller and `j` is the name of a slot owned by the callee. `return 1` means \"copy the value of 1 into the location of `i`, so the `i++` has an effect on it, but `j++` has no effect because it happens after the copy has already been done.",
	"user": {
		"login": "carlmjohnson",
		"id": 222245,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-13T02:36:59Z",
	"updated_at": "2016-03-13T17:56:14Z"
}
