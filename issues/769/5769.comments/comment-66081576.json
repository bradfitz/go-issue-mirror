{
	"id": 66081576,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eI believe that gc and gccgo are correct, and that if the spec disagrees we\nshould update the spec.\n\nIt's definitely a corner case, and I remember discussing it back in the\nearly days, but it's a corner case no matter what we do.\n\nThe issue is that when you say type P *S, P is defined to have no methods.\nIf p.m() did an auto-deref to get at the S.m method, then it would give the\nincorrect impression that p of type P has an m method. That is, it would be\ninconsistent with var x interface { m() } = p not compiling. It is true\nthat we have such inconsistencies due to the auto-\u0026 rule, but we've so far\navoided having them (at least in the implementation) due to the auto-* rule.\n\nSince we already define the method set on a pointer to include the value\nmethods, I think the simplest spec fix would be to say that only field\nselectors automatically dereference pointers to structs. If you have 'var\nsp *S', then sp.m() is legal not because of ab selector deref but because\nplain sp of type *S really does have an m method (as evidenced by var x\ninterface{ m() } = sp compiling).\n\nRuss\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-06-24T18:17:09Z",
	"updated_at": "2014-12-08T10:31:38Z"
}
