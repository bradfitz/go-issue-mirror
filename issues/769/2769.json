{
	"id": 51279681,
	"number": 2769,
	"state": "closed",
	"title": "regexp supports named capture groups but doesn't allow caller to find out the names or refer to the groups by name",
	"body": "by **jaq@spacepants.org**:\n\n\u003cpre\u003eWhile Go's regexp package supports named capture groups, i.e.\n\n/(?P\u0026lt;foo\u0026gt;[0-9]+).*/\n\nit is presently impossible to ask for the capture group \u0026quot;foo\u0026quot; by name, only by\nits position.\n\nI'm porting some code from Python, using a swigged re2.h regexp library, which supports\nthese three methods:\n\n  // Return the number of capturing subpatterns, or -1 if the\n  // regexp wasn't valid on construction.  The overall match ($0)\n  // does not count: if the regexp is \u0026quot;(a)(b)\u0026quot;, returns 2.\n  int NumberOfCapturingGroups() const;\n\n\n  // Return a map from names to capturing indices.\n  // The map records the index of the leftmost group\n  // with the given name.\n  // Only valid until the re is deleted.\n  const map\u0026lt;string, int\u0026gt;\u0026amp; NamedCapturingGroups() const;\n\n  // Return a map from capturing indices to names.\n  // The map has no entries for unnamed groups.\n  // Only valid until the re is deleted.\n  const map\u0026lt;int, string\u0026gt;\u0026amp; CapturingGroupNames() const;\n\n\nCurrently, Go's regexp package only supports NumSubexps(), which appears to be\nequivalent to the first.\n\nIt would be awesome to be able to have the latter two calls as well.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:14:42Z",
	"created_at": "2012-01-23T23:42:54Z",
	"updated_at": "2016-06-24T21:24:19Z"
}
