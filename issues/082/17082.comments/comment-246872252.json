{
	"id": 246872252,
	"body": "The main goal for this proposal is to bump the minimum ARM requirement to\nARMv6K\nso that we can use native 8-bit/32-bit/64-bit LDREX/STREX instructions and\ninline\nthem in the program. (As explained in the proposal, we currently use\nemulated 64-bit\natomic operations in the runtime.)\n\nOnce we drop the support for v5E and v6 (without K), it will be pretty hard\nto regain\nthe support because it's not a master of re-introduce necessary runtime\nfunctions.\n\nOne difficulty for maintaining ARMv5E and ARMv6 support is that, it's\nreally hard\nto find systems with enough memory to host a Go builder (we need at least\n512MB,\npreferably 1GB)\n\nDropping support for ARMv5E mainly affect various ARM926 systems, and\ndropping\nsupport for ARMv6 mainly affects various ARM1136 and ARM1156 based SoCs\n(one notable example iMX3x series, used in earlier Kindle eReaders.)\n\nThere are only two ARM11-series processors that implements ARMv6K: ARM1176\nand ARM11MPCore. The other two ARM1136 and ARM1156 doesn't implement\nthe required 8/64-bit LDREX/STREX instruction.\n\nWe could consider just dropping ARMv5E support, and then see if we can\nreduce\nthe use of 64-bit atomic operations in the runtime. @aclements, are 64-bit\natomic\noperations critical for runtime performance on 32-bit systems? If not, I\nthink we can\njust drop ARMv5E support for Go 1.8 in order to continue support ARM11\nprocessors.\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-14T00:46:35Z",
	"updated_at": "2016-09-14T00:46:35Z"
}
