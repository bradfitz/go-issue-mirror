{
	"id": 231455895,
	"body": "\u003e I'm not sure this won't break existing programs, though. It's possible that some type assertions which fail now would succeed after this change.\r\n\r\nNot sure how. If the two interfaces have identical methods, then all type assertions between the two should be knowably and provably valid…\r\n\r\nI discussed this on the other bug #16209, in all, the worst thing possible is that two unnamed struct types might become assignable where they were not before, i.e.\r\n\r\n`var a struct { ctx context.Context } = struct { ctx x/net/context.Context }{ ctx: myctx }`\r\n\r\nBut this seems like REALLY weird code…\r\n\r\nOtherwise, you have unnamed function types, which would accept either interface the same way when called, but then that's kind of exactly the desired behavior for context.Context moving from x/net/ into the mainline library.\r\n\r\nFinally, unnamed interfaces assign between identical interface definitions already…",
	"user": {
		"login": "puellanivis",
		"id": 10839126,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-08T19:50:32Z",
	"updated_at": "2016-07-08T19:50:32Z"
}
