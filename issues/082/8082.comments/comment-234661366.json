{
	"id": 234661366,
	"body": "Fine, you've convinced me we can't change this in any Go 1.x release…\r\n\r\nSo, I guess we're stuck being incapable of writing reusable code for gRPC, that allows us to transition from x/net/context.Context to context.Context without breaking everyone's code in one fell swoop… because at some point, it's going to switch to context.Context, and everyone will need to change their code at that time, and all their code before will still be using x/net/context.Context, because it's the most compatible Go code… and it's what the function signatures of the server interfaces for gRPC take, so no one can switch earlier without breaking everything in the first place.\r\n\r\nWe're literally stuck in a Catch 22 with moving context out of the experimental tree. We would like people to switch to using context, but because gRPC uses x/net/context.Context, everyone is going to have to keep x/net/context imports around, just to keep compatible with it. And gRPC can't just change to context, because then everyone using x/net/context won't be able to compile, and if they do, then since 1.6 has no context inbuilt library, you can't write code that compiles both on Go 1.6 and 1.7 unless you use x/net/context.\r\n\r\nAll because we've decided that keeping the uncommon, nearly-impossible brokenly designed code compatible is more important than the common use case. #slowclap \r\n\r\nI know, “you can complain about this when you write your own language”, so yeah, I'm forking Go… because I think this design decision is a bad choice… seems weird to keep a fork that's only going to have like 10s of lines difference from the mainline, but hey, whatever… at least merge conflicts are going to be unlikely…",
	"user": {
		"login": "puellanivis",
		"id": 10839126,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-07-22T21:28:20Z",
	"updated_at": "2016-07-22T21:28:20Z"
}
