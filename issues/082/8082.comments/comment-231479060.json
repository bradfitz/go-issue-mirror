{
	"id": 231479060,
	"body": "I want to add that if this feature was implemented, **it would allow a whole new class of packages/libraries to require no imports**.\r\n\r\nLet's say you follow the paradigm of receiving an interface and returning an implementation when designing your functions and methods.\r\n\r\nNow you are writing package z which should be compatible to the interface A in package x and B in package y. ATM  you would need to reference x.A and y.B directly and therefor need to import packages x and y. Your package becomes dependent of them.\r\n\r\nWith the proposed change you could simply copy the definitions of the interfaces A and B to your library z and use them as parameter types or embed them to structs without having to import x or y. This way your package z has no dependencies and the users of your package z might combine it with x and y and at a later point swap x or y out and replace them with compatible versions without breaking any dependency of z.\r\n\r\n**All in all this could lead to a better and more decoupled library ecosystem based on compatible interfaces. This is the most important argument for the change IMHO.**",
	"user": {
		"login": "metakeule",
		"id": 180603,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	},
	"created_at": "2016-07-08T21:37:35Z",
	"updated_at": "2016-07-08T21:37:35Z"
}
