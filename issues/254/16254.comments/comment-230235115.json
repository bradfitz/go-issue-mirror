{
	"id": 230235115,
	"body": "The above example is a trivial example but in a real life it can save a lot of time.\r\nAnd also allows do not duplicate some code.\r\n\r\nEg.\r\n\r\n```go\r\ntype Expr interface {\r\n  // Some members\r\n String() string\r\n}\r\n\r\ntype UnaryExpr interface {\r\n  Expr\r\n  GetExpr() Expr\r\n}\r\n\r\ntype PrefixExpr interface {\r\n  UnaryExpr\r\n  GetPrefix() string\r\n}\r\n\r\n// Default impl\r\nfunc (r PrefixExpr) String() string {\r\n  retrun Sprintf(%s%s, r.GetPrefix(), r.GetExpr())\r\n}\r\n\r\ntype NotPredicateExpr struct {\r\n}\r\n\r\nabstract func (r *NotPredicateExpr) String() string\r\n\r\nfunc (r *NotPredicateExpr) GetPrefix() string {\r\n  return \"!\"\r\n}\r\n```\r\n\r\nCurrently this is impossible.\r\nEvery implementer of the `type PrefixExpr interface` should implement their own `String()` method which is not very useful.\r\nOr programmer should use the following approach:\r\n\r\n```go\r\n// Somewhere not far from `type PrefixExpr interface`\r\n// Implementation of the `type PrefixExpr intrface { String() } `\r\nfunc PrefixExpr_String(r PrefixExpr) string {\r\n  retrun Sprintf(%s%s, r.GetPrefix(), r.GetExpr())\r\n}\r\n\r\n// Should take into account about the existing `PrefixExpr_String` default implementation\r\nfunc (r *NotPredicateExpr) String() string {\r\n  return PrefixExpr_String(r)\r\n}\r\n\r\n```\r\n\r\nWhich is not a very graceful.\r\nUsing an embedded structs (what I do) also does not works.",
	"user": {
		"login": "mezoni",
		"id": 2311549,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-04T08:32:20Z",
	"updated_at": "2016-07-04T08:32:20Z"
}
