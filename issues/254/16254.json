{
	"id": 163553054,
	"number": 16254,
	"state": "closed",
	"title": "proposal: Default implementation for interface",
	"body": "*Can we support default implementation for interface?*\r\n\r\nHere is an example:\r\n\r\n```go\r\ntype Transaction interface {\r\n\tBegin()\r\n\tExec() error\r\n\tEnd()\r\n}\r\n\r\nfunc (tr Transaction) Process() error {\r\n\ttr.Begin()\r\n\tif err := tr.Exec(); err != nil {\r\n\t\treturn err\r\n\t}\r\n\ttr.End()\r\n\treturn nil\r\n}\r\n```\r\n\r\nNow, if I have a struct `DBTransaction` which implements `Begin()`,`Exec() error` and `End()` methods(i.e. implements interface `Transaction`), then `DBTransaction` automatically owns `Process() error` method while it's used as  `Transaction`.",
	"user": {
		"login": "mkideal",
		"id": 16500461,
		"type": "User",
		"site_admin": false
	},
	"comments": 26,
	"closed_at": "2016-07-05T05:59:05Z",
	"created_at": "2016-07-03T08:38:40Z",
	"updated_at": "2016-07-05T05:59:05Z",
	"reactions": {
		"total_count": 4,
		"+1": 1,
		"-1": 3
	}
}
