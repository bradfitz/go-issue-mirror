{
	"id": 152579535,
	"body": "Thanks for writing this up, and my apologies for not getting a chance to review it sooner.\r\n\r\nThis proposal makes multiple significant changes and additions to the testing package. The overall spirit seems to me to move away from the current minimalist spirit of package testing. I'd like to keep that spirit but still get most of the benefits of this proposal. To that end, I have a few suggestions:\r\n\r\n- The title should be generalized, perhaps to \"testing: programmatic sub-test and sub-benchmark support\".\r\n  - This really isn't about table-driven tests. It's about being able to define subtests programatically. That can be used as an alternative to tables, but it's probably even more useful for addressing long-running tests with multiple pieces, or large tests with variants. \r\n  - The actual simple table-driven tests will, I hope, keep being used as they are today. The a+b example in the doc is a great example of code that should in my opinion _not_ use this new machinery. \r\n  - This matters precisely because I don't want to see everyone going around rewriting trivial table-driven tests.\r\n  - The Benchmark example is a clear motivator. It would be good to have a less trivial Test example. Maybe bufio.TestReader.\r\n\r\n- I propose that the fully-qualified name of a subtest or subbenchmark be \u003cparentname\u003e/\u003cname-passed-to-Run\u003e, with slash as separators, spaces turned into underscores, and no other changes.\r\n  - Slash is a well-understood denotation of hierarchy, comma not so much. Slash may be less common in chosen names, since it doesn't appear in printing of standard types like map or slice.\r\n  - Don't panic if t.Run is invoked twice with the same name. There's nothing in package testing that needs names to be unique, and running the tests anyway is nicer to the user than crashing.\r\n  - Let's replace spaces (unicode.IsSpace) with _ instead of ‚ê£. The latter will not display on some screens and will be harder for people to type and match.\r\n  - Otherwise, let's not mangle names nor try to make name sanitization injective (having dropped the uniqueness requirement above). The results will be more readable.\r\n  - Let's not even replace slashes or underscores (no escaping). If someone puts their own slash in the name passed to Run, so be it.\r\n  - Note that the fully-qualified name is the _real_ name, not just how it is printed.\r\n  \r\n- In the benchmark example, please use named functions, to move the bodies out of allMethods, and then omit the bodies. As written, the composite literal is too complex for an example, and I would argue is too complex for a real program too.\r\n\r\n\t\tvar allMethods = []struct{\r\n\t\t\tname string\r\n\t\t\tf func(Form, []byte) func()\r\n\t\t}{\r\n\t\t\t{\"Transform\", transform},\r\n\t\t\t{\"Iter\", iter},\r\n\t\t}\r\n\r\n\t\tfunc transform(f Form, b []byte) func()\r\n\t\tfunc iter(f Form, b []byte) func()\r\n\r\n  \r\n- The doc is inconsistent about where the `-N` is printed in the benchmark name to show the GOMAXPROCS setting. The BenchmarkMethod example uses names like `BenchmarkMethod-8,Transform,small_change` while the Logging section immediately following uses `BenchmarkForm,from,NFC-8`. I believe the correct one is the latter, with the -N being a true suffix and not inserted in the middle of the fully-qualified name.\r\n\r\n- Let's postpone any changes to -test.run. There are subtleties here that I don't want to place in front of getting the basic subtest and subbenchmark support. \r\n\r\n- Let's drop the new LOG output prefix for benchmarks. Benchmark output is already rare, and it is already possible to tell whether the logging influences timing, by comparing the BENCH header name with the names used on printed benchmark results.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-30T16:32:18Z",
	"updated_at": "2015-10-30T16:32:43Z"
}
