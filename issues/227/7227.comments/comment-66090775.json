{
	"id": 66090775,
	"body": "\u003ca id=\"c39\"\u003e\u003c/a\u003eComment 39:\n\n\u003cpre\u003eStepping through #36 I can see that the value in (%rcx) compared to %rsp is\n0xfffffffffffffade = -1314, which would be the StackPreempt value and backtrace\naccording to lldb is:\n\n  * frame #0: 0x0000000004016cb0 7227`runtime.sighandler\n    frame #1: 0x00007fff87db85aa libsystem_platform.dylib`_sigtramp + 26\n    frame #2: 0x000000000402b6af 7227`syscall.Syscall6 + 47\n\nI'm presuming this means that the signal handler is then incorrectly running on the same\nstack as the syscall as the syscall's stack guard was set to the Preempt value via\nruntime.entersyscall.\n\nCuriously I found an even simpler repro sample: \u003ca href=\"http://play.golang.org/p/__3tlxhdB9\"\u003ehttp://play.golang.org/p/__3tlxhdB9\u003c/a\u003e\n\nThe println prints all structs as having the same value, with sa_flags=67 and on my\nsystem SA_ONSTACK is 0x1 so I don't know what to make of this.\u003c/pre\u003e",
	"user": {
		"login": "quarnster",
		"id": 1230389,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-04-05T16:23:17Z",
	"updated_at": "2014-12-08T10:40:09Z"
}
