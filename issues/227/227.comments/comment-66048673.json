{
	"id": 66048673,
	"body": "\u003ca id=\"c26\"\u003e\u003c/a\u003eComment 26 by **matthias.benkmann**:\n\n\u003cpre\u003eHow about this\n\ntype MainFunc func(...interface{})   \n\n// Forks a child process and executes main(args...) within that process. \n// Returns the process id of the child.\n//\n// Within the child process, a new Go runtime is initialized from scratch, as\n// if the program had started its own binary via os.StartProcess(). However as\n// the last step instead of starting main.main(), the child process will start    \n// the main function passed to Fork(). \n//\n// The parameters args are passed via encoding/gob with the corresponding\n// restrictions.\n//\n// Open file descriptors, os.Args and the environment are inherited from  \n// the parent process, NOT reset to the values they had at the start of     \n// the program.\n//\n// Note: Fork() does not actually re-execute the program's binary.\n// The program's binary need not be executable for purposes of Fork()\n// Fork() will succeed even if the process no longer has the necessary\n// privileges to execute the binary or if it has been (re)moved.\nfunc Fork(main MainFunc, args... interface{}) (int, error) {\n...\n}\n\n\nThis Fork() has well-defined semantics and can be used for daemonizing as well as many\nother uses of fork().\nImplementing the ability to set up a new runtime environment without accessing the\nbinary shouldn't be too tough. The compiler might have to be changed to keep an\nadditional read-only copy of initial values for certain structures around. But that\ndoesn't require changing the language spec.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-09-24T18:18:22Z",
	"updated_at": "2014-12-08T10:03:44Z"
}
