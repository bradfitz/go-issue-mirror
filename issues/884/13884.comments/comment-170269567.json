{
	"id": 170269567,
	"body": "@davecheney, regardless of this issue, sort.Sort is changing in Go 1.6 (it\nalready has). The new code runs significantly (10-20%) faster than the old\ncode, but it also leaves ostensibly equal elements in a different order\nthan Go 1.5's sort.Sort did. We are not including the old sort algorithm as\na user-controlled option in Go 1.6. From what you wrote, it sounds like\nyour colleagues, if they are affected, will be surprised that sort.Sort has\nfewer guarantees that they realized and upset that Go 1.6 has changed a\ndetail they didn't realize could change. If so, I am sorry.\n\nBut that situation is _exactly_ the rationale for making sort.Sort just a\nlittle unpredictable in its handling of equal elements. It keeps people\nfrom getting too comfortable with the new sort.Sort implementation and\nbeing surprised the next time we take a significant optimization\nopportunity. It also keeps people from being surprised if there's ever a\ncompeting Go implementation with a different algorithm.\n",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-09T18:55:31Z",
	"updated_at": "2016-01-09T18:55:31Z"
}
