{
	"id": 170275692,
	"body": "On Sun, Jan 10, 2016 at 5:55 AM, Russ Cox \u003cnotifications@github.com\u003e wrote:\n\n\u003e @davecheney, regardless of this issue, sort.Sort is changing in Go 1.6 (it\n\u003e already has). The new code runs significantly (10-20%) faster than the old\n\u003e code, but it also leaves ostensibly equal elements in a different order\n\u003e than Go 1.5's sort.Sort did. We are not including the old sort algorithm as\n\u003e a user-controlled option in Go 1.6. From what you wrote, it sounds like\n\u003e your colleagues, if they are affected, will be surprised that sort.Sort has\n\u003e fewer guarantees that they realized and upset that Go 1.6 has changed a\n\u003e detail they didn't realize could change. If so, I am sorry.\n\u003e\n\nHi Russ,\n\nThis is fine, sort.Sort is still operating within its contract. I'm sure\npeople will be fine with this change.\n\n\n\u003e\n\u003e But that situation is _exactly_ the rationale for making sort.Sort just a\n\u003e little unpredictable in its handling of equal elements. It keeps people\n\u003e from getting too comfortable with the new sort.Sort implementation and\n\u003e being surprised the next time we take a significant optimization\n\u003e opportunity. It also keeps people from being surprised if there's ever a\n\u003e competing Go implementation with a different algorithm.\n\n\nI just cannot relate this paragraph to the previous one. In the previous\nparagraph sort.Sort's performance has improved, but as a side effect it can\nproduce output that is not identical, but still compliant. This is fine.\nEvery release we tweak the scheduler and the result of programs changes if\npeople haven't been very careful to synchronise them; although arguably\nthey shouldn't have been relying on output from multiple goroutines in the\nfirst place because it is not guaranteed.\n\nBut, what this proposal is suggesting to me is deliberately introducing\n(compliant) instability into sort.Sort -- which is fine, as you and Robert\nhave pointed out, if you need stable sort, you should use sort.Stable -- as\n\"tough love\" to remind people that they are not being studious enough in\nreading the documentation.\n\nHere's how the conversation usually goes on IRC, mailing list, internal\nchat, etc\n\nA: hey, sort.Sort broke in 1.6, it doesn't give me the same results!\nB: sort.Sort got faster in 1.6, as a result the sort ordering is not the\nsame, i know this sounds weird that sorting could return things in a\ndifferent order, but that's how it is. Maybe you want to use sort.Stable\ninstead?\nA: hmm, I never knew about sort.Stable, I guess I'd better go an read the\ndocumentation again, thanks\n\nBut instead I'm worried about the conversation going like this\n\nA: hey, sort.Sort broke in 1.6, it doesn't give me the same results!\nB: yeah, so we found that lots of people where using sort.Sort where they\nreally should have been using sort.Stable. Because they were relying on an\nimplementation detail of how sort.Sort worked; it wasn't ever guarenteed to\ngive a stable sort, it just mostly did.\nA: So Go changed sort.Sort in 1.6 ? How is this not a Go 1 contract\nviolation ? Was it a bug ?\nB: Well, sort.Sort got optimised, it got another 10-20% faster, but then we\nstarted to find code that was relying on the output of the old\nimplementation. So, to make sure people can find all these places in their\ncode sort.Sort now shuffles some elements before sorting to make the sort\ndeliberately unstable.\nA: What ? sort does't sort, it shuffles ?\nB: No, the results are always sorted, but this is the difference between a\nstable sort and an unstable sort.\nA: So why did Go 1.6 change sort.Sort to be unstable ?\nB: It was always unstable, you were just lucky that it looked stable enough\nfor your tests.\nA: And now sort.Sort is always unstable, so now I have to update all my\ncode and check all my tests?\nB: Yes, sorry.\n\nI'd much rather be having the first conversation, not the second.\n\nThanks for your time\n\nDave\n\n\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/13884#issuecomment-170269567\u003e.\n\u003e\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-09T20:09:30Z",
	"updated_at": "2016-01-09T20:09:30Z"
}
