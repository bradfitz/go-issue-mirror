{
	"id": 51287034,
	"number": 7662,
	"state": "closed",
	"title": "runtime: task leak",
	"body": "by **me@iscoelho.com**:\n\n\u003cpre\u003eWhat does 'go version' print?\ngo version go1.2.1 linux/amd64\n\nWhat steps reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n\n1. Build a multithreaded high throughput Golang network application (generic TCP proxy\nwill do just fine)\n2. Run application\n3. ls /proc/\u0026lt;pid\u0026gt;/tasks/ | wc -l\n\nWhat happened?\nruntime.GOMAXPROCS(runtime.NumCPU())\n\nThe output of NumCPU was 8 CPUs. Even so, Go spawns 142 (and rising) tasks, all but 8\nhaving absolutely no CPU usage in \u0026quot;htop\u0026quot;.\n\nThis normally would not have any issues, but in our high throughput application we have\nover 11k fds. Linux believes that each task individually has these 11k fds, and due to\nthis that 1.6M fds are open system-wide.\n\nWhat should have happened instead?\nGo should have only spawned 8 tasks.\n\nPlease provide any additional information below.\n\u003ca href=\"https://github.com/LilyPad/GoLilyPad/blob/master/server/proxy/main/main.go\"\u003ehttps://github.com/LilyPad/GoLilyPad/blob/master/server/proxy/main/main.go\u003c/a\u003e\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:42:33Z",
	"created_at": "2014-03-29T00:52:59Z",
	"updated_at": "2016-06-25T01:31:02Z"
}
