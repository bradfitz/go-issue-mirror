{
	"id": 165883025,
	"body": "I've tried various experiments.  It does appear to be a GC issue with freeing something too early.  I can't get it to fail on gcc6; on gcc5 it passes without optimization, passes at -O2 if I set GOGC=off.  After adding print statements I see that 'F' gets trashed before it gets in the case where it fails.\r\n\r\n    func main() {\r\n        F := []uint64{2, 3, 5}\r\n        var n = len(F)\r\n        OUT := []uint64{\r\n                2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, 36,\r\n                40, 45, 48, 50, 54, 60, 64, 72, 75, 80, 81, 90, 96, 100, 108, 120, 125,\r\n                128, 135, 144, 150, 160, 162, 180, 192, 200, 216, 225, 240, 243, 250,\r\n                256, 270, 288, 300, 320, 324, 360, 375, 384, 400, 405, 432, 450, 480,\r\n                486, 500, 512, 540, 576, 600, 625, 640, 648, 675, 720, 729, 750, 768,\r\n                800, 810, 864, 900, 960, 972, 1000, 1024, 1080, 1125, 1152, 1200, 1215,\r\n                1250, 1280, 1296, 1350, 1440, 1458, 1500, 1536, 1600}\r\n\r\n        x := uint64(1)\r\n        ins := make([]T, n)\r\n        outs := make([]T, n)\r\n        xs := make([]uint64, n)\r\n        fmt.Printf(\"F[0]: %d F[1]: %d F[2]: %d\\n\", F[0], F[1], F[2])\r\n\r\n./235\r\nF[0]: 0 F[1]: 0 F[2]: 0\r\nbad:  0  should be  2\r\n\r\nIf I add a print statement right after F is initialized, then the values are good and the test passes.\r\n\r\nI don't know enough about what GC does or how it decides it shouldn't free something.  Must be something unique about this testcase or else we'd be seeing lots of GC problems?\r\n",
	"user": {
		"login": "laboger",
		"id": 9433228,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-18T19:50:36Z",
	"updated_at": "2015-12-18T19:55:13Z"
}
