{
	"id": 51283989,
	"number": 5662,
	"state": "closed",
	"title": "cmd/go: use of -bench should force -p=1.",
	"body": "by **gconnell@google.com**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n1.  go get code.google.com/p/gopacket\n2.  cd $GOPATH/src/code.google.com/p/gopacket\n3.  go test --bench=.\n4.  pushd layers \u0026amp;\u0026amp; go test --bench=. \u0026amp;\u0026amp; popd\n5.  go test --bench=. ./...\n\nWhat is the expected output?\n\nBenchmarks from steps 3/4 should show up the same as benchmarks from step 5.\n\nWhat do you see instead?\n\nBenchmarks in step 5 are consistently way off from those in steps 3/4... it appears that\nthe mapping from benchmark name to benchmark value is off.\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n\n6g\n\nWhich operating system are you using?\n\nlinux\n\nWhich version are you using?  (run 'go version')\n\ngo version go1.1 linux/amd64\n\nPlease provide any additional information below.\n\nHere's a sample run of steps 3-5:\n\ngconnell@rockyduck:~/go/src/code.google.com/p/gopacket$ go test --bench=. \ntesting: warning: no tests to run\nPASS\nBenchmarkTypeAssertion  500000000                3.46 ns/op\nBenchmarkMapLookup      500000000                4.25 ns/op\nBenchmarkNilMapLookup   1000000000               2.93 ns/op\nBenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op\nBenchmarkArrayLookup    2000000000               0.53 ns/op\nBenchmarkTypeToInterface1       2000000000               0.80 ns/op\nBenchmarkTypeToInterface2       2000000000               0.53 ns/op\nBenchmarkCheckEthernetPrefix    50000000                34.2 ns/op\nBenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op\nBenchmarkPassDecodeOptionsByPointer     2000000000               0.26 ns/op\nBenchmarkLockOSThread   500000000                3.98 ns/op\nBenchmarkUnlockOSThread 500000000                4.53 ns/op\nBenchmarkLockUnlockOSThread     200000000                9.33 ns/op\nBenchmarkLockDeferUnlockOSThread        20000000                84.2 ns/op\nok      code.google.com/p/gopacket      26.154s\n--- Exit code 0 @ Fri Jun  7 09:26:15 MDT 2013 ---\ngconnell@rockyduck:~/go/src/code.google.com/p/gopacket$ pushd layers \u0026amp;\u0026amp; go test\n--bench=. \u0026amp;\u0026amp; popd\n~/go/src/code.google.com/p/gopacket/layers ~/go/src/code.google.com/p/gopacket\nwarning: building out-of-date packages:\n        code.google.com/p/gopacket\ninstalling these packages with 'go test -i' will speed future tests.\n\nPASS\nBenchmarkLayerClassSliceContains        2000000000               1.06 ns/op\nBenchmarkLayerClassMapContains  500000000                4.13 ns/op\nBenchmarkLazyNoCopyEthLayer      2000000               901 ns/op\nBenchmarkLazyNoCopyIPLayer       1000000              1395 ns/op\nBenchmarkLazyNoCopyTCPLayer      1000000              2271 ns/op\nBenchmarkLazyNoCopyAllLayers     1000000              2470 ns/op\nBenchmarkDefault         1000000              3073 ns/op\nBenchmarkLazy    1000000              1243 ns/op\nBenchmarkNoCopy  1000000              2363 ns/op\nBenchmarkLazyNoCopy      5000000               528 ns/op\nBenchmarkAlloc  100000000               20.4 ns/op\nBenchmarkFlow   10000000               202 ns/op\nBenchmarkEndpoints      100000000               27.8 ns/op\nBenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op\nBenchmarkTCPLayerClassFromDecodedPacket 50000000                35.0 ns/op\nBenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.88 ns/op\nBenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op\nBenchmarkDecodeFuncCallOverheadDecoderCall      500000000                5.97 ns/op\nBenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.68 ns/op\nBenchmarkFmtVerboseString          20000             84717 ns/op\nBenchmarkPacketString       5000            786684 ns/op\nBenchmarkPacketDumpString           5000            785868 ns/op\nBenchmarkDecodePacketIPSecESP    1000000              1401 ns/op\nok      code.google.com/p/gopacket/layers       59.880s\n~/go/src/code.google.com/p/gopacket\n--- Exit code 0 @ Fri Jun  7 09:28:24 MDT 2013 ---\ngconnell@rockyduck:~/go/src/code.google.com/p/gopacket$ go test --bench=. ./...\ntesting: warning: no tests to run\nPASS\nBenchmarkTypeAssertion  500000000                3.52 ns/op\nBenchmarkMapLookup      PASS\nBenchmarkLayerClassSliceContains        2000000000               1.12 ns/op\nBenchmarkLayerClassMapContains  500000000                4.47 ns/op\nBenchmarkNilMapLookup   500000000                4.18 ns/op\nBenchmarkLazyNoCopyEthLayer     1000000000               2.96 ns/op\nBenchmarkNilMapLookupWithNilCheck       2000000000               0.81 ns/op\nBenchmarkArrayLookup     2000000               914 ns/op\nBenchmarkLazyNoCopyIPLayer      2000000000               0.54 ns/op\nBenchmarkTypeToInterface1        1000000              1410 ns/op\nBenchmarkLazyNoCopyTCPLayer     2000000000               0.81 ns/op\nBenchmarkTypeToInterface2       2000000000               0.55 ns/op\nBenchmarkCheckEthernetPrefix     1000000              2313 ns/op\nBenchmarkLazyNoCopyAllLayers    50000000                35.1 ns/op\nBenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op\nBenchmarkPassDecodeOptionsByPointer      1000000              2495 ns/op\nBenchmarkDefault        2000000000               0.27 ns/op\nBenchmarkLockOSThread   500000000                4.06 ns/op\nBenchmarkUnlockOSThread  1000000              3122 ns/op\nBenchmarkLazy    1000000              1262 ns/op\nBenchmarkNoCopy 500000000                4.61 ns/op\nBenchmarkLockUnlockOSThread      1000000              2399 ns/op\nBenchmarkLazyNoCopy     200000000                9.48 ns/op\nBenchmarkLockDeferUnlockOSThread        20000000                85.4 ns/op\nok      code.google.com/p/gopacket      26.643s\n?       code.google.com/p/gopacket/dumpcommand  [no test files]\n 5000000               534 ns/op\nBenchmarkAlloc  100000000               20.4 ns/op\nBenchmarkFlow   10000000               203 ns/op\nBenchmarkEndpoints      100000000               27.8 ns/op\nBenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op\nBenchmarkTCPLayerClassFromDecodedPacket 50000000                34.9 ns/op\nBenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.79 ns/op\nBenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op\nBenchmarkDecodeFuncCallOverheadDecoderCall      500000000                5.97 ns/op\nBenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.65 ns/op\nBenchmarkFmtVerboseString          20000             84787 ns/op\nBenchmarkPacketString       5000            779978 ns/op\nBenchmarkPacketDumpString           5000            779441 ns/op\nBenchmarkDecodePacketIPSecESP    1000000              1404 ns/op\nok      code.google.com/p/gopacket/layers       60.152s\nPASS\nok      code.google.com/p/gopacket/pcap 0.485s\n?       code.google.com/p/gopacket/pcap/gopacket_benchmark      [no test files]\n?       code.google.com/p/gopacket/pcap/pcapdump        [no test files]\n?       code.google.com/p/gopacket/pfring       [no test files]\n?       code.google.com/p/gopacket/pfring/pfdump        [no test files]\n--- Exit code 0 @ Fri Jun  7 09:30:02 MDT 2013 ---\n\n\nIn particular, note:\n\nBenchmarkTypeToInterface1, went from .8 ns/op to 1410 ns/op\nBenchmarkCheckEthernetPrefix, went from 34.2 ns/op to 2313 ns/op\nBenchmarkNoCopy, went from 2363 ns/op to 4.61 ns/op\nBenchmarkLazyNoCopy, went from 528 ns/op to 9.48 ns/op\n\nThe initial values are all very believable, given what's being benchmarked.  None of the\nlatter values are.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 6,
	"closed_at": "2014-12-08T10:30:53Z",
	"created_at": "2013-06-07T15:34:10Z",
	"updated_at": "2016-06-24T22:42:11Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
