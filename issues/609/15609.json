{
	"id": 153768328,
	"number": 15609,
	"state": "open",
	"title": "cmd/link: incorrect offset generated for indirect calls on amd64",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\n    ```\r\n    go version go1.5.1 linux/amd64\r\n    ```\r\n\r\n1. What operating system and processor architecture are you using (`go env`)?\r\n    ```\r\n    GOARCH=\"amd64\"\r\n    GOBIN=\"\"\r\n    GOEXE=\"\"\r\n    GOHOSTARCH=\"amd64\"\r\n    GOHOSTOS=\"linux\"\r\n    GOOS=\"linux\"\r\n    GOPATH=\"/home/wedsonaf/go\"\r\n    GORACE=\"\"\r\n    GOROOT=\"/usr/local/go\"\r\n    GOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\n    GO15VENDOREXPERIMENT=\"\"\r\n    CC=\"gcc\"\r\n    GOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0\"\r\n    CXX=\"g++\"\r\n    CGO_ENABLED=\"1\"\r\n    ```\r\n\r\n1. What did you do?\r\n    I compiled a program that included an indirect call. Repro steps are below:\r\n\r\n    ```\r\n    $ cat call.s\r\n    #include \"textflag.h\"\r\n    DATA ·pointer(SB)/8, $·target(SB)\r\n    GLOBL ·pointer(SB),RODATA,$8\r\n    TEXT ·jump(SB),NOSPLIT,$0-28\r\n            CALL *·pointer(SB)\r\n            RET\r\n\r\n    $ cat test.go\r\n    package main\r\n    func jump()\r\n    func target() {}\r\n    func main() {\r\n            jump()\r\n    }\r\n    $ go build\r\n    $ ./badoffset \r\n    unexpected fault address 0x889ae6\r\n    fatal error: fault\r\n    [signal 0xb code=0x1 addr=0x889ae6 pc=0x401080]\r\n\r\n    goroutine 1 [running]:\r\n    runtime.throw(0x46f9e8, 0x5)\r\n            /usr/local/go/src/runtime/panic.go:527 +0x90 fp=0xc820041ef0 sp=0xc820041ed8\r\n    runtime.sigpanic()\r\n            /usr/local/go/src/runtime/sigpanic_unix.go:27 +0x2ab fp=0xc820041f40 sp=0xc820041ef0\r\n    main.jump(0x4234e0, 0xc820020060, 0x0)\r\n            /home/wedsonaf/repro/badoffset/call.s:7 fp=0xc820041f48 sp=0xc820041f40\r\n    main.main()\r\n            /home/wedsonaf/repro/badoffset/test.go:8 +0x14 fp=0xc820041f50 sp=0xc820041f48\r\n    runtime.main()\r\n            /usr/local/go/src/runtime/proc.go:111 +0x2b0 fp=0xc820041fa0 sp=0xc820041f50\r\n    runtime.goexit()\r\n            /usr/local/go/src/runtime/asm_amd64.s:1696 +0x1 fp=0xc820041fa8 sp=0xc820041fa0\r\n    ```\r\n4. What did you expect to see?\r\n\r\n    I expected the program above to run.\r\n\r\n5. What did you see instead?\r\n\r\n    It crashed.\r\n\r\nUpon closer inspection, I noticed that the offset in the call instruction is wrong. In particular, it's an absolute value instead of being relative to PC. Here's the generated code for main.jump:\r\n\r\n```\r\n0000000000401080 \u003cmain.jump\u003e:\r\n  401080:       ff 15 60 8a 48 00       callq  *0x488a60(%rip)        # 889ae6 \u003cruntime.end+0x3afda6\u003e\r\n  401086:       c3                      retq\r\n````\r\n\r\nNote that `0x488a60` is actually the address of main.pointer:\r\n\r\n```\r\n0000000000488a60 g     O .rodata        0000000000000008 main.pointer\r\n```\r\n\r\nSo instead of reading from `0x488a60` we're trying to read from `0x889ae6` instead, which is `0x488a60 + 0x401086` (offset + rip).",
	"user": {
		"login": "wedsonaf",
		"id": 7494395,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"created_at": "2016-05-09T12:47:17Z",
	"updated_at": "2016-05-09T20:24:26Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
