{
	"id": 51287519,
	"number": 8001,
	"state": "closed",
	"title": "time: stop time.Ticker when it is garbage collected",
	"body": "by **awawfumin**:\n\n\u003cpre\u003eGo version:\n\n\u0026gt; go version\ngo version go1.2.2 darwin/amd64\n\nAfter reading the source code \u003ca href=\"http://golang.org/src/pkg/runtime/time.goc\"\u003ehttp://golang.org/src/pkg/runtime/time.goc\u003c/a\u003e , and later\nconfirmed by Ian Lance Taylor\n\u003ca href=\"https://groups.google.com/d/msg/golang-nuts/Chx1tCs2QGg/EbEOnm18NF0J\"\u003ehttps://groups.google.com/d/msg/golang-nuts/Chx1tCs2QGg/EbEOnm18NF0J\u003c/a\u003e , the current\nimplementation of time.Ticker would leak memory in the global structure\n\u0026quot;timers\u0026quot; if the Ticker is no longer referenced.\n\nWe should preferably Stop() a Ticker when it is garbage collected, or if that is\ntechnically not feasible at the moment, at least document in\n\u003ca href=\"http://golang.org/pkg/time/#Ticker\"\u003ehttp://golang.org/pkg/time/#Ticker\u003c/a\u003e much like how it is emphasized to call Close() after\nreading from resp.Body \u003ca href=\"http://golang.org/pkg/net/http/#Client.Get\"\u003ehttp://golang.org/pkg/net/http/#Client.Get\u003c/a\u003e .\n\nMore info about the problem, plus several possible implementation proposals (to date\nnone are satisfactory) can be found in\n\u003ca href=\"https://groups.google.com/forum/#\"\u003ehttps://groups.google.com/forum/#\u003c/a\u003e!topic/golang-nuts/Chx1tCs2QGg\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Unfortunate"
		}
	],
	"comments": 6,
	"closed_at": "2014-12-08T10:44:18Z",
	"created_at": "2014-05-15T07:03:04Z",
	"updated_at": "2016-06-25T01:34:19Z"
}
