{
	"id": 222745024,
	"body": "For type switches, the spec says (`x` is from `x.(type)`):\r\n\r\nCases then match actual types T against the dynamic type of the expression x. As with type assertions, x must be of interface type, and each non-interface type T listed in a case must implement the type of x.\r\n\r\nThat is, the spec already disallows using `int` as T if `x` is of type `error` per the example above (and `int` doesn't implement `error`).\r\n\r\nFurthermore, given that the semantics of the type switch is essentially an if-else-if sequence, a duplicate entry is never reached. But all, gc, gccgo, and go/types complain about duplicate entries, so we should probably document that by disallowing them in the spec.\r\n\r\nFinally, I've tried to disallow certain duplicate entries for expression switches before, several years back, and it met with some resistance. We most likely cannot change something here if the compiler allowed it until now otherwise we are violating the Go 1.0 guarantee.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-31T16:33:42Z",
	"updated_at": "2016-05-31T16:33:42Z"
}
