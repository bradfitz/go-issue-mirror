{
	"id": 165665756,
	"body": "A similar implemnetation for writev by coroutine:\r\n```\r\nssize_t st_writev(_st_netfd_t *fd, const struct iovec *iov, int iov_size, st_utime_t timeout)\r\n{\r\n    ssize_t n, rv;\r\n    size_t nleft, nbyte;\r\n    int index, iov_cnt;\r\n    struct iovec *tmp_iov;\r\n    struct iovec local_iov[_LOCAL_MAXIOV];\r\n\r\n    /* Calculate the total number of bytes to be sent */\r\n    nbyte = 0;\r\n    for (index = 0; index \u003c iov_size; index++) {\r\n        nbyte += iov[index].iov_len;\r\n    }\r\n\r\n    rv = (ssize_t)nbyte;\r\n    nleft = nbyte;\r\n    tmp_iov = (struct iovec *) iov;\t/* we promise not to modify iov */\r\n    iov_cnt = iov_size;\r\n\r\n    while (nleft \u003e 0) {\r\n        if (iov_cnt == 1) {\r\n            if (st_write(fd, tmp_iov[0].iov_base, nleft, timeout) != (ssize_t) nleft) {\r\n                rv = -1;\r\n            }\r\n            break;\r\n        }\r\n\r\n        if ((n = writev(fd-\u003eosfd, tmp_iov, iov_cnt)) \u003c 0) {\r\n            if (errno == EINTR) {\r\n                continue;\r\n            }\r\n            if (!_IO_NOT_READY_ERROR) {\r\n                rv = -1;\r\n                break;\r\n            }\r\n        } else {\r\n            if ((size_t) n == nleft) {\r\n                break;\r\n            }\r\n            nleft -= n;\r\n            /* Find the next unwritten vector */\r\n            n = (ssize_t)(nbyte - nleft);\r\n            for (index = 0; (size_t) n \u003e= iov[index].iov_len; index++) {\r\n                n -= iov[index].iov_len;\r\n            }\r\n\r\n            if (tmp_iov == iov) {\r\n                /* Must copy iov's around */\r\n                if (iov_size - index \u003c= _LOCAL_MAXIOV) {\r\n                    tmp_iov = local_iov;\r\n                } else {\r\n                    tmp_iov = calloc(1, (iov_size - index) * sizeof(struct iovec));\r\n                    if (tmp_iov == NULL) {\r\n                        return -1;\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* Fill in the first partial read */\r\n            tmp_iov[0].iov_base = \u0026(((char *)iov[index].iov_base)[n]);\r\n            tmp_iov[0].iov_len = iov[index].iov_len - n;\r\n            index++;\r\n            /* Copy the remaining vectors */\r\n            for (iov_cnt = 1; index \u003c iov_size; iov_cnt++, index++) {\r\n                tmp_iov[iov_cnt].iov_base = iov[index].iov_base;\r\n                tmp_iov[iov_cnt].iov_len = iov[index].iov_len;\r\n            }\r\n        }\r\n\r\n        /* Wait until the socket becomes writable */\r\n        if (st_netfd_poll(fd, POLLOUT, timeout) \u003c 0) {\r\n            rv = -1;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (tmp_iov != iov \u0026\u0026 tmp_iov != local_iov) {\r\n        free(tmp_iov);\r\n    }\r\n\r\n    return rv;\r\n}\r\n```",
	"user": {
		"login": "winlinvip",
		"id": 2777660,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-18T04:05:09Z",
	"updated_at": "2015-12-18T04:05:09Z"
}
