{
	"id": 164164355,
	"body": "@ianlancetaylor \r\nAs a network proxy, many network protocol has TWO parts HEADER \u0026 DATA part.\r\nif netFD has writev and also support by bufio, it's no need do like:\r\n\r\n```golang\r\n// reader \u0026 writer goroutine call write concurrency, must lock.\r\nlock.Lock()\r\nw.Write(head)\r\nw.Write(data)\r\nlock.Unlock()\r\n```\r\n\r\nbut the inner netFD has fd.writeLock(), so caller must do a wasting lock.Lock().\r\nsomething like this is very nice:\r\n```golang\r\n// Write is atomic, and goroutine safe\r\nw.Write(head, data)\r\n\r\nfunc (w *Writer) Write(data ...[]byte) (n int, err error)\r\n```",
	"user": {
		"login": "Terry-Mao",
		"id": 1627804,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2015-12-12T16:15:01Z",
	"updated_at": "2015-12-12T16:15:01Z"
}
