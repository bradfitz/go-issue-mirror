{
	"id": 234473713,
	"body": "I've assumed a built-in unordered set type could be more performant and readable than the second-class implementations possible with Go 1. Not caring about the index or unnecessary key or value is a mildly nicer experience when writing for loops.\r\n\r\n```\r\ntype NameBox set(string)\r\n\r\ntype NameBoxes set(NameBox)\r\n\r\nfunc (the NameBoxes) AllNames() set(string) {\r\n    rs := make(set(string)) // have this hinted? how to in this arbitrary embedded case?\r\n    for box := range the {\r\n        for n := range box {\r\n            rs = append(rs, n)\r\n        }\r\n    }\r\n    return rs\r\n}\r\n```\r\n\r\nThis set would just be an array of strings is my guess. But maybe there is an optimization tradeoff in picking the backing store layout and interaction depending on type and runtime information?\r\n\r\nI'm guess the same comparable rules would apply here as with map keys, and a lot more effort could be put into making an elegant language element.\r\n\r\nPersonally a first class set type is definitely just a nice to have, slices and maps are fine and get this exact job done plenty. This is from solo projects, not team work.",
	"user": {
		"login": "pciet",
		"id": 7949131,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-22T07:27:30Z",
	"updated_at": "2016-07-22T07:27:30Z"
}
