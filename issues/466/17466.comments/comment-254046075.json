{
	"id": 254046075,
	"body": "Futures are a step back for go. They are added to other languages, which are lacking proper concurrency support, to make code look more sequential, so they replace callbacks and event loops. In go, the propper way to make your code look sequential, is to write it sequentially in the first place.\r\n\r\nSo, I don't think this is a good addition. I believe there are very view proper use cases for them (like, \"to do a thing, I first need to kick of thing A, then do lots of other stuff and then wait for A to finish to use the result\" is relatively rare).\r\n\r\nFor the rare cases where futures *are* useful, I'd rather suggest something like this:\r\n\r\n    func ThingA() func() string {\r\n        ch := make(chan string)\r\n        go func() {\r\n            ch \u003c- doThing()\r\n            close(ch)\r\n        }\r\n        return func() { return \u003c-ch }\r\n    }\r\n\r\nwhich seems wordy; but that's fine as it shouldn't be necessary that often anyway. And `ThingA` can then be used like returning a proper future, with very little syntactic overhead.",
	"user": {
		"login": "Merovius",
		"id": 720787,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-16T13:13:04Z",
	"updated_at": "2016-10-16T13:13:04Z"
}
