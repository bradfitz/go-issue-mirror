{
	"id": 254195296,
	"body": "@DmitriyMV semantic of `:=\u003c-` and `\u003c-` will not change much with this proposal.`future` mechanics is quite close to `chan` (though, is not equal).\r\nDifference: receive from future will not pop value from buffer, and send to future will awake all waiters as `close` on chan does.\r\n\r\n@DmitriyMV @djadala\r\n`sync.Once + done chan` doesn't solve all problems that could be solved with future. See example for kv-storage: task is passed to \"writting\" goroutine, future is stored in a hash, and \"reading goroutine\" fills future. So there is no place for \"sync.Once\". It is not \"callback\".\r\n\r\n@djadala There could be a lot of ways to reimplement future. But my point, that 99% of functionality is already in `chan`. Instead of reimplementing wheel in many different way, it is better to have one \"blessed\" implementation.\r\n\r\nDo you like \"chan\"? I like it, cause it well tested, optimally implemented, and typesafe. I believe that \"chan\" is reliable. Sometimes someone wants something faster than \"chan\", or unlimited buffer, then he reimplements \"chan\". But 99% of us are satisfied with \"chan\" as a message queue.\r\n\r\nI wish there will be same \"strong and reliable\" \"future\": without redundant \"interface{}\", without redundant mutexes (`sync.Once` uses mutexes, but hey, \"chan\" also uses mutexes, so why use another one?), with type-safety provided by compiler.\r\nI wish 99% of a people, who need \"future\", will have it reliable.",
	"user": {
		"login": "funny-falcon",
		"id": 249427,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-17T12:37:11Z",
	"updated_at": "2016-10-17T12:37:11Z"
}
