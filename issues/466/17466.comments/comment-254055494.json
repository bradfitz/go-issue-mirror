{
	"id": 254055494,
	"body": "@bradfitz this code has race-condition between fetching value and re-sending it : other goroutine may send other value to channel. And it is not \"typesafe\", cause it still uses interface{}, so compiler will not complaint on type error (ok, it is \"runtime typesafe\", but not \"compile-time typesafe\").\r\n\r\nInstead of separate internal type it could be just a flag inside of channel.\r\nFor example, \"make\" may accept some magic constant (probably, of non-integer type) to indicate value is a future (it will be translated by compiler to different function call).\r\n````go\r\n    var f chan string\r\n    f = make(chan string, runtime.ChanIsFuture)\r\n````\r\nBut it will hide differences in \"send\" semantic from a compiler (\"send\" to future inside of \"select\" is restricted to non-blocking single case with default), and the fact \"close\" on future is meaningless.",
	"user": {
		"login": "funny-falcon",
		"id": 249427,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-16T16:02:18Z",
	"updated_at": "2016-10-16T16:03:07Z"
}
