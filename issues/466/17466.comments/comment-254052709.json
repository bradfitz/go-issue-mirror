{
	"id": 254052709,
	"body": "@Merovius your code looks like a simplest wrapper code for making future :-) But still you not convince me.\r\n\r\nConverting \"synchronous code\" to \"asynchronous\" usually means running goroutine for every \"synchronous-\u003easynchronous conversion\". It is really expensive and scales bad.\r\n\r\nPractice shows that \"asynchronous first\" API is more scalable.\r\nProviding useful primitive for will lead to more scalable api, and it is good, IMHO.\r\n\r\nFor example, one kv storage has asynchronous network protocol and allows to send asynchronous requests.\r\nIf one need to send bunch of independent queries (for example, batch insert, or batch fetch for meany ids), then he should send asynchronous requests to maximize throughput and reduce total time of computation.\r\n\r\nBut if library provides only synchronous API, then one should wrap every request with goroutine.\r\nOther option is \"batch api\", which will be very different from \"regular api\", and will duplicate functionality.\r\n \r\nBut if library provides \"asynchronous first\" api with futures, then it is only api every user need to use.",
	"user": {
		"login": "funny-falcon",
		"id": 249427,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-16T15:14:03Z",
	"updated_at": "2016-10-16T15:14:03Z"
}
