{
	"id": 66100007,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eSo for slices a list o values is used (#2)\n\n        px := new([]int, 1, 2, 3)\n\nBut for map types it uses a composite literal (#4)\n\n        pmap := new(map[string]int, map[string]int{\n        \t\"A\": 1,\n\t        \"B\": 2,\n        })\n\nWhich case is the norm and which is the exception? Why not in the slice case write\nanalogically\n\n        px := new([]int, {1, 2, 3}) // ?\n\nIt also supports the existing key: val thing\n\n        px := new([]int, {1, 42: 2, 3})\n\nIOW, we're back to the \"why the ... \"?\n\nIf the proposal would be accepted, which I hope is not going to happen, I think that it\nwould have to be\n\n        new(T, optExpr) // 1 is a literal as is {1, 2, 3}, etc.\n\nWhere optExpr is optional, similarly to\n\n        make(T, optExpr1, optExpr2) // [0]\n\nBTW, please let's not forget - the best feature of Go is its lack of \"features\".\n\n\n  [0]: \u003ca href=\"http://golang.org/ref/spec#Making_slices_maps_and_channels\"\u003ehttp://golang.org/ref/spec#Making_slices_maps_and_channels\u003c/a\u003e\u003c/pre\u003e",
	"user": {
		"login": "cznic",
		"id": 729580,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-11-13T09:09:08Z",
	"updated_at": "2014-12-08T10:49:50Z"
}
