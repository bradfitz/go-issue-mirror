{
	"id": 66066309,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eAnswering Dmitry's question from \u003ca href=\"https://golang.org/issue/5160?c=4\"\u003ehttps://golang.org/issue/5160?c=4\u003c/a\u003e\nhere:\n\nConsider:\n\nm := make(map[string]T)\nvar b []byte = slice of some buffer\ngo someFunc(b)\nt, ok := m[string(b)] \n\nI would like:\n\n1) string(b) to not make a copy. It should instead make a non-escaping fake String\nheader to pass to the map lookup function, using the same byte data \u0026 length as the\n[]byte b.\n\n2) the map lookup to be guaranteed to not crash, even if b is concurrently mutated.\n\n3) t to be valid, iff ok == true.\n\nI don't think that would violate any  of the current Go semantics, since any ordering\nbetween mutations from \"go someFunc\" and string(b) are already not specified by the\nmemory model.\n\nCorrect?\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-31T18:57:57Z",
	"updated_at": "2014-12-08T10:18:24Z"
}
