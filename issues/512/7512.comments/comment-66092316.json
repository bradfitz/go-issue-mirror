{
	"id": 66092316,
	"body": "\u003ca id=\"c14\"\u003e\u003c/a\u003eComment 14 by **justin@fathomdb.com**:\n\n\u003cpre\u003eremyoudompheng: Definitely!  But it seems that right now iant is telling me that it just\ncan't work, so I'd love to figure out whether I'm barking up the wrong tree before\nspending the time to write up a document, if the response is just going to be \"that\nwon't work because of X\".\n\niant: The thunk would be inserted at runtime, as part of the itable creation process. \nIf runtime code generation isn't allowed, then we would have to share a single\npre-generated thunk.  This requires that (1) we know the method return types, (2) we can\nconvert between arbitrary types and (3) we change the invocation for an interface method\nto pass any extra required parameters.   reflect.Method includes Type, so I think #1 is\nOK.  I think #2 is OK now that we have #4047.  I believe #3 is doable as well, ideally\nby putting those extra parameters in specific registers so we don't have to thunk\nmethods that don't require type conversion.  The complexity of #3 would really depend on\nthe code generator (which I'm not that familiar with).\n\nIt seems to me there are different questions:\n\n1) Can this be done at all, even theoretically?\n2) Can this be done with a stub/thunk which we substitute in to methods that need\ntype-conversion as part of building the itable?\n3) Can this still be done if runtime code generation is not allowed?\n4) Do we want to do this? (What is the benefit?  What is the cost?)\n\nI'm having difficulty keeping track of where we are in the discussion!  I think that the\nquestions can only be answered in order, because each depends on the previous one. \nWhere do you think we are?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-11T22:31:33Z",
	"updated_at": "2014-12-08T10:41:45Z"
}
