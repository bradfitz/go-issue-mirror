{
	"id": 66092313,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11 by **justin@fathomdb.com**:\n\n\u003cpre\u003eThank you for the example.\n\nI'm not sure I see where this example causes problems for the shim approach, though.  My\nmental model for an interface pointer is that it is an (itable,  data) pair.  (My model\ncomes from here: \u003ca href=\"http://research.swtch.com/interfaces)\"\u003ehttp://research.swtch.com/interfaces)\u003c/a\u003e\n\nThroughout, data will point to s, our instance of S.  You will have two itables:\nitable(S, interface{}) and itable(S, Iterator).\n\n[ I know that itable(S, interface{}) will actually be optimized out, but I think we can\nignore that... ]\n\nWhen you call Next() on S you invoke S::Next, which returns *S.\n\nYou can't call Next() through interface{}\n\nWhen you call Next() on (itable(S, Iterator), s), you go through the type-casting stub /\nthunk (that's my suggestion, anyway).  It calls the real method (S::Next) and then\nconverts the return value to the target type as stored in the itable(S, Iterator), in\nthis case interface{}.\n\nThe only change is that we must build the itable(S, Iterator) to generate that thunk and\nbuild the table of required target types.\n\nI believe it doesn't matter that we are building itable(S, Iterator) from\n(itable(S,iterator{}), s), because building the itable uses S, not interface{}.\n\nSo I'm sorry, but I don't see what you're saying...  Where have I gone wrong here?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-11T21:18:03Z",
	"updated_at": "2014-12-08T10:41:45Z"
}
