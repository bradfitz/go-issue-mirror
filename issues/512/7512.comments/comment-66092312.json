{
	"id": 66092312,
	"body": "\u003ca id=\"c10\"\u003e\u003c/a\u003eComment 10:\n\n\u003cpre\u003etype Iterator interface {\n    Next() interface{}\n}\n\nfunc F(e interface{}) interface{} {\n    if i, ok := e.(Iterator); ok {\n        return i\n    }\n    return nil\n}\n\ntype S struct {}\nfunc (s S) Next() *S {\n    return nil\n}\n\nfunc main() {\n    F(S{})\n}\n\nNow in F we have a type that supports Iterator, using covariant returns.  So the\ninterface conversion needs to somehow add code that will convert between *S and\ninterface{}, so that calls to the method will return interface{} as they must.\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-11T20:49:42Z",
	"updated_at": "2014-12-08T10:41:45Z"
}
