{
	"id": 217947511,
	"body": "Personally I feel that, architecturally, `fmt` would probably have more logically been broken into the scan and formatting functions. When I import `fmt`, am I not also importing the entire Scan tooling? At least in GopherJS this appears to be the case?\r\n\r\nAs it happens, making \"lite\" versions for my GopherJS projects is [exactly what I'm doing right now](https://github.com/cathalgarvey/fmtless). I'm making a `fmt` clone for just the most common 99% of `fmt` usecases in the wild: `fmt.Errorf` for simple errors, and `fmt.Println`/`fmt.Sprintf` for simple datatypes and format strings. Most of the extra 'goodies' in `fmt` are unnecessary for these cases.\r\n\r\nPerhaps the most valuable change would be to make `errors` just a little bit richer, to entice people away from `fmt.Errorf` for things that don't really call for it. If `errors.New` had been a variadic that accepts and default-formats inputs (a la \"%v\"), joining without spaces, then perhaps people wouldn't be using `fmt.Errorf` so much. :)",
	"user": {
		"login": "cathalgarvey",
		"id": 1167837,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-09T18:26:33Z",
	"updated_at": "2016-05-09T18:26:33Z"
}
