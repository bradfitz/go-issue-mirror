{
	"id": 218016711,
	"body": "\u003e even with reflect, you still can't use a type that has not been created statically somewhere in the program.\r\n\r\nI think that's true for types, but I don't think it is for methods. Sorry, I should've been more precise in my post above (instead of saying \"types, etc.\").\r\n\r\nSee https://godoc.org/reflect#Value.MethodByName. An arbitrary program can get user input from keyboard or over network as a string and use `MethodByName` and `Call` a method that is not statically mentioned anywhere.\r\n\r\nNot being able to eliminate methods causes a chain reaction, since those methods will mention other funcs, types and their methods, and usually pull in large parts of Go packages that are not statically used.\r\n\r\n\u003e See also recent @crawshaw's changes on linker DCE and reflect.\r\n\r\nThose are helpful, thanks for pointing them out! For reference, what I found is what's mentioned at bottom of https://github.com/golang/go/issues/6853 and https://github.com/golang/go/commits/master?author=crawshaw.",
	"user": {
		"login": "shurcooL",
		"id": 1924134,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-09T23:12:35Z",
	"updated_at": "2016-05-09T23:44:48Z"
}
