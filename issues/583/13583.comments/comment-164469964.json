{
	"id": 164469964,
	"body": "Comment from @rsc in https://golang.org/cl/14826:\r\n\r\n\r\n\u003e There are two fundamental problems that make the design here tricky.\r\n\u003e\r\n\u003e The first is that I tried to avoid required alternation of flags and arguments, based on bad experience with the pedantry of Mercurial, where you have to remember to write things like \"hg -V log -l2\" and not \"hg log -V -l2\". I think that turned out well in general, but the other commands established a precedent of flags before the package arguments, and we had to also allow unrecognized flags to pass to the test binary after the package list. Following the last version of gotest, we sniffed the beginning of the flags after the package list to apply the same conversions as before the package list. Otherwise it is difficult to explain why only the 4th of these is disallowed:\r\n\r\n    go test -test.short math\r\n    go test -short math\r\n    go test math -test.short\r\n    go test math -short\r\n\r\n\u003e It can be explained of course, but the explanation is something users don't typically care about, the same way Mercurial users don't want to play Simon says trying to figure out \"hg -V log -l2\".\r\n\u003e\r\n\u003e The second problem is that the package list is optional. If it gets overloaded as a signal changing the meaning of command-line flag parsing, then now flags and the presence of the package list are conflated in ways they were not before, which leads to more confusion.\r\n\u003e\r\n\u003e As a demonstration, this CL broke \"go test -unrecognizedflag x\". That used to mean test the current directory with \"-unrecognizedflag x\" passed to the test. Now the command is rejected. (Roger Peppe pointed this out on #13583 over the weekend.) This CL also changed the meaning of \"go test -unrecognizedflag=1 arg1 arg2\". Before, the test processing stopped before the first unrecognized flag (as documented), so that \"-unrecognizedflag=1 arg1 arg2\" would be passed to the test as its arguments. Now, -unrecognizedflag=1 is taken and given to the test but arg1 arg2 are used as the package list! While there may be ambiguity in the 1-line usage message, it can't explain that. The parsing is actually more muddled now than it was before the CL. The new comments claim that this is for \"backwards compatibility with a poor design\", but it's not backwards compatible and even harder to explain than before.\r\n\r\n\u003e The counter-proposal is this. Put in a flag -args that consumes the remainder of the command line, to be passed verbatim to the test. (This is by loose analogy with gdb --args, although there it includes the name of the binary to run, and here it does not.)\r\n\r\n\u003e Then to test glog's -v flag you can do either of:\r\n\r\n    go test .../glog -args -v\r\n    cd glog; go test -args -v\r\n\r\n\u003e Similarly, if you want to run a test with non-flag arguments passed on the command line (impossible both before and after this CL), you can do that with -args:\r\n\r\n    go test -args X Y Z\r\n\r\n\u003e I'll send a CL for this and try to make sure the docs are clear.\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-14T15:38:41Z",
	"updated_at": "2015-12-14T15:38:41Z"
}
