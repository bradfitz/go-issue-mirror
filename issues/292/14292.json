{
	"id": 132800663,
	"number": 14292,
	"state": "open",
	"title": "x/net/context: Documentation for Context.Err doesn't explicitly state what values to expect before Done() is closed",
	"body": "In https://godoc.org/golang.org/x/net/context#Context, there are two possible readings for the documentation of Err:\r\n  1. Err() must return nil before Done() isn't closed, and atomically switch to returning some non-nil error when Done() IS closed\r\n  1. Err() is undefined before Done() is closed, and the only valid use for Err() is after blocking on Done()\r\n\r\nLooking at the implementation, I suspect that 1 is the correct interpretation. I would propose that the documentation on this function be amended to read:\r\n\r\n```go\r\n    // Err returns a non-nil error value after Done is closed.  Err returns\r\n    // Canceled if the context was canceled or DeadlineExceeded if the\r\n    // context's deadline passed.  If Done is not yet closed, Err must return nil.\r\n    // No other values for Err are defined. After Done is closed, successive\r\n    // calls to Err return the same value.\r\n    Err() error\r\n```\r\n\r\nNote the added \"If Done is not yet closed, Err must return nil.\" sentence.",
	"user": {
		"login": "riannucci",
		"id": 133821,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		}
	],
	"comments": 1,
	"created_at": "2016-02-10T19:55:24Z",
	"updated_at": "2016-02-10T20:36:36Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
