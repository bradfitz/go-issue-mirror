{
	"id": 215540504,
	"body": "Since literal initializations are pervasive in Go, I had to wonder what a function literal would look like. I suspect that the code to handle this largely exists in Go generate, fix, and rename.Maybe it will inspire someone :-)\r\n\r\n// the (generic) func type definition\r\ntype Sum64 func (X, Y) float64 {\r\n\treturn float64(X) + float64(Y)\r\n}\r\n\r\n// instantiate one, positionally\r\ni := 42\r\nvar j uint = 86\r\nsum := \u0026Sum64{i, j}\r\n\r\n// instantiate one, by named parameter types\r\nsum := \u0026Sum64{ X: int, Y: uint}\r\n\r\n// now use it...\r\nresult := sum(i, j) // result is 128\r\n",
	"user": {
		"login": "mandolyte",
		"id": 1289437,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-28T19:43:50Z",
	"updated_at": "2016-04-28T19:43:50Z"
}
