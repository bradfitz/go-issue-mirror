{
	"id": 210085246,
	"body": "@tamird It is an essential feature of Go's interface types that you can define a non-interface type T and later define an interface type I such that T implements I.  See https://golang.org/doc/faq#implements_interface .  It would be inconsistent if Go implemented a form of generics for which a generic type G could only be used with a type T that explicitly said \"I can be used to implement G.\"\r\n\r\nI'm not familiar with Rust, but I don't know of any language that requires T to explicitly state that it can be used to implement G.  The two requirements you mention do not mean that G can not impose requirements on T, just as I imposes requirements on T.  The requirements just mean that G and T can be written independently.  That is a highly desirable feature for generics, and I can not imagine abandoning it.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-14T18:18:38Z",
	"updated_at": "2016-04-14T18:18:38Z"
}
