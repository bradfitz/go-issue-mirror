{
	"id": 210960543,
	"body": "I just went through the whole [Summary of Go Generics](https://docs.google.com/document/d/1vrAy9gMpMoS3uaVphB32uVXX4pi-HnNjkMEgyAHX4N4/edit) document, which was a helpful summary of previous discussions. The generics mechanism in Genus does not, to my mind, suffer from the problems identified for C++, Java, or C#. Genus generics are reified, unlike in Java, so you can find out types at run time. You can also instantiate on primitive types, and you don't get implicit boxing in the places you really don't want it: arrays of T where T is a primitive. The type system is closest to Haskell and Rust -- actually a bit more powerful, but I think also intuitive. Primitive specialization ala C# is not currently supported in Genus but it could be. In most cases, specialization can be determined at link time, so true run-time code generation would not be required.",
	"user": {
		"login": "andrewcmyers",
		"id": 4623813,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 9,
		"+1": 9
	},
	"created_at": "2016-04-17T05:44:10Z",
	"updated_at": "2016-04-17T13:23:36Z"
}
