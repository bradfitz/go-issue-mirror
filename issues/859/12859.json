{
	"id": 110152216,
	"number": 12859,
	"state": "closed",
	"title": "x/mobile/bind: static variables in iOS/Swift aren't reference counted correctly",
	"body": "When I declare a variable statically like this:\r\n```\r\nclass SwiftClass {\r\n  // Shared static instance singleton\r\n  static let sharedInstance = SwiftClass();\r\n\r\n  // Member variable that is a go struct pointer\r\n  var someGoStruct: GoStruct?\r\n\r\n  init() {\r\n    // Create go struct\r\n    someGoStruct = NewGoStruct()\r\n  }\r\n\r\n  func doSomething() {\r\n    someGoStruct.SomeMethod();\r\n  }\r\n}\r\n```\r\n\r\nI can call SwiftClass.sharedInstance.doSomething();\r\nIt works the first time, but if I call it at some later time, it crashes in the reference counting area of the go library. I think this must be because go doesn't understand that the member of the static variable shouldn't be garbage collected. I was able to get around the issue by not declaring my singleton as static, and instead just declaring it as a global variable.",
	"user": {
		"login": "scisci",
		"id": 1807438,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "hyangah",
		"id": 4999471,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"closed_at": "2015-10-09T02:59:40Z",
	"created_at": "2015-10-07T04:56:37Z",
	"updated_at": "2016-10-09T20:20:58Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
