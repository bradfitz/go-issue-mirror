{
	"id": 51286132,
	"number": 7060,
	"state": "closed",
	"title": "go.tools/go/types: inferred type for value,ok-mode expressions includes assignability conversions",
	"body": "\u003cpre\u003eBoth of these functions contain expressions (m[1] and \u0026lt;-ch) that appear in a\n\u0026quot;value,ok\u0026quot; context.\n\nfunc f() (i interface{}, ok bool) {\n       m := map[int]string{1: \u0026quot;hi\u0026quot;}\n       i, ok = m[1]\n       return\n}\n\nfunc g() (i interface{}, ok bool) {\n       ch := make(chan string, 1)\n       ch \u0026lt;- \u0026quot;hi\u0026quot;\n       i, ok = \u0026lt;- ch\n       return\n}\n\nI would expect the inferred types for both to be (string, bool), but in fact both are\n(interface{}, bool).  i.e. the type checker has incorporated the type conversion to the\nassignment's LHS into the type that is inferred.  This is not ideal because a compiler\n(for example) would assume that no conversion is necessary since the LHS and RHS types\nare identical.\u003c/pre\u003e",
	"user": {
		"login": "adonovan",
		"id": 5658175,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2014-12-08T10:39:18Z",
	"created_at": "2014-01-03T23:23:01Z",
	"updated_at": "2016-06-25T01:24:57Z",
	"milestone": {
		"id": 1067211,
		"number": 17,
		"title": "Go1.3"
	}
}
