{
	"id": 51285424,
	"number": 6599,
	"state": "open",
	"title": "gdb: not showing Go strings values as initialized",
	"body": "by **newton688**:\n\n\u003cpre\u003eBefore filing a bug, please check whether it has been fixed since the\nlatest release. Search the issue tracker and check that you're running the\nlatest version of Go:\n\nRun \u0026quot;go version\u0026quot; and compare against\n\u003ca href=\"http://golang.org/doc/devel/release.html\"\u003ehttp://golang.org/doc/devel/release.html\u003c/a\u003e  If a newer version of Go exists,\ninstall it and retry what you did to reproduce the problem.\n\nThanks.\n\nWhat steps will reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n1. Apply the patch from \u003ca href=\"https://golang.org/issue/6598\"\u003eissue #6598\u003c/a\u003e to avoid gdb freezes\n2. Compile a relatively large Go program (e.g. github.com/sirnewton01/godev) with the go\nbuild/install -gcflags \u0026quot;-N -l\u0026quot; option recommended here:\n\u003ca href=\"http://golang.org/doc/gdb\"\u003ehttp://golang.org/doc/gdb\u003c/a\u003e\n3. Launch gdb providing the path to the program binary\n4. Set a breakpoint in a section where there are plenty of complex local variables (e.g.\nfile.go:173 in the godev project)\n5. Run the program and make it hit the breakpoint (e.g. navigate to\n\u003ca href=\"http://127.0.0.1:2022/navigate/table.html#\"\u003ehttp://127.0.0.1:2022/navigate/table.html#\u003c/a\u003e and expand different folders)\n6. Step over a few lines that initialize some of the string variables\n7. Issue an \u0026quot;info locals\u0026quot; command to look at the string variables that have\nbeen initialized\n\nWhat is the expected output?\nIt is expected that the string values should have a reasonable length (ie. less than\n6MB) given that the strings are known to be small.\n\nWhat do you see instead?\nInstead, the runtime-gdb.py patch reveals that the strings have incredible length (ie.\nlarger than 6M) even though they have been initialized to a small string. Running\n\u0026quot;p $len(string)\u0026quot; is showing a large size for the strings as well. Undoing the\nruntime-gdb.py patch and using the standard version causes gdb to consume tremendous CPU\ntrying to xfer large chunks of memory from the target process.\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\ngc\n\nWhich operating system are you using?\nUbuntu 12.04 amd64\n\nWhich version are you using?  (run 'go version')\ngo version devel +f4d1cb8d9a91 Thu Sep 19 22:34:33 2013 +1000 linux/amd64\n-The godeb distribution indicates that this is 1.2RC1\n\nPlease provide any additional information below.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"created_at": "2013-10-16T13:19:04Z",
	"updated_at": "2015-04-14T19:45:20Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
