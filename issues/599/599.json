{
	"id": 51276694,
	"number": 599,
	"state": "open",
	"title": "cmd/compile: make 64-bit fields 64-bit aligned on 32-bit systems",
	"body": "\u003cpre\u003eEven though the 386 has a 4-byte word size, some instructions move \ndata in larger chunks.  In particular float64 loads move 8 bytes and\nsome SSE2 operations (as yet unused) move even larger amounts.\nA float64 load from an only-4-byte-aligned address is significantly\nmore expensive than one from a 8-byte-aligned address.  The same\nis probably true of SSE2 too.\n\nWe should make sure that data symbols \u0026gt;32 bits (e.g., float64 constants)\nare aligned on 8-byte boundaries in the data segment.  (Fairly easy.)\n\nWe should also make sure that the stack pointer can be relied upon to be\n8-byte aligned (harder), by making stack frame sizes = -4 mod 8 \n(the caller PC will add 4 more) and starting new goroutines with a\nproperly aligned stack pointer.\n\nIt might be worth using 16 bytes for the stack alignment.  OS X requires\nthat for their own ABI, presumably because it matters for SSE2.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 18,
	"created_at": "2010-02-12T20:58:34Z",
	"updated_at": "2015-08-07T11:36:39Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
