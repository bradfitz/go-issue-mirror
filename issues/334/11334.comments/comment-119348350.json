{
	"id": 119348350,
	"body": "FYI, I have been bypassing this bug using this specification replacement method:\r\n\r\n```go\r\nfunc bypassTimeParseBug(s string) string {\r\n        // NB: Looks like there is a bug in Golang's time.Parse when handing format strings\r\n        // with _2 in the format string. Here is a snippet that exhibits this issue:\r\n        //     t, e := time.Parse(\"15:04_20060102\", \"14:38_20150618\")\r\n        // We replace underscores with space to bypass this bug.\r\n        return strings.Replace(s, \"_\", \" \", -1)\r\n}\r\n```\r\n\r\nI would posit that the format I specified is not exotic at all. At least, I didn't invent it. It's the format used by [Graphite](https://github.com/graphite-project/graphite-web) to specify [absolute timestamps](http://graphite.readthedocs.org/en/latest/render_api.html#from-until).",
	"user": {
		"login": "jayp",
		"id": 59250,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-07T21:31:47Z",
	"updated_at": "2015-07-07T21:31:47Z"
}
