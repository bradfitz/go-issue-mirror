{
	"id": 66091896,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eI took a pass at this but struggled to find improvements, so I'd like a bit more input.\n\nHere's are some slightly tweaked RunParallel docs:\n\n// RunParallel runs a benchmark in parallel.\n// Use RunParallel to measure how a benchmark scales with increased\n// concurrency. It is usually used with the go test -cpu flag.\n//\n// RunParallel creates multiple goroutines and distributes b.N iterations among them.\n// The number of goroutines defaults to GOMAXPROCS. To increase parallelism for\n// non-CPU-bound benchmarks, call SetParallelism before RunParallel.\n//\n// The body function will be run in each goroutine. It should set up any\n// goroutine-local state and then iterate until pb.Next returns false.\n// It should not use the StartTimer, StopTimer, or ResetTimer functions,\n// because they have global effect.\n\nBrendan, would that clear things up sufficiently? What is still missing?\n\nI'm really unsure what else to add to SetParallelism. It doesn't seem obviously valuable\nto list the non-CPU ways a benchmark could be bound.\n\nDmitry, can you think of a short, simple benchmark that is obviously not CPU-bound that\nI could add as example code for SetParallelism?\u003c/pre\u003e",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-04-26T15:31:11Z",
	"updated_at": "2014-12-08T10:41:18Z"
}
