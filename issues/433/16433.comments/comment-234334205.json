{
	"id": 234334205,
	"body": "\u003e If you do that at top level you will just get the top level offset. \r\n\r\nWhen unmarshalling to a `Node`, its children (if any) are also `Node`s (either via a `map[string]Node` or `[]Node`). Thus every node in the tree is a `Node` and has offsets; you don't get just the top level offset.\r\n\r\nI think I understand your idea better now. It would only save relative offsets for each element and leave computing absolute offsets to the user. Correct? I'm still of the opinion this would need a lot of boilerplate code and would force the user to either embed the offset information in their types or use a global to record the offsets.\r\n\r\n\u003e Over in #16426 minux suggested a Validator interface that could accept offset information, which might also help here.\r\n\r\nI like the `Validator` idea, but because it needs to validated while being unmarshalled, it cannot check for conflicts if two sections of the json depend on each other (i.e. one references the other). Because `json.Unmarshal` only returns one error[], it would be impossible to allow multiple validation errors to be returned. This also means you can't return warnings, since json parsing could stop after hitting the first error. Finally, it doesn't allow for the possibility of detecting extra keys. Providing an interface to get offset information from unmarshalling gives users more flexibility.",
	"user": {
		"login": "ajeddeloh",
		"id": 2753421,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-21T18:02:11Z",
	"updated_at": "2016-07-21T18:02:11Z"
}
