{
	"id": 51282937,
	"number": 4981,
	"state": "closed",
	"title": "runtime: segfault with large heap",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\n\n\u003ca href=\"https://groups.google.com/d/topic/golang-dev/sScWVM31lm0/discussion\"\u003ehttps://groups.google.com/d/topic/golang-dev/sScWVM31lm0/discussion\u003c/a\u003e\n\nready to do further debugging with some guidance\n\nWhat do you see instead?\n\na crash\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n\n6g\n\nWhich operating system are you using?\n\nlinux\n\nWhich version are you using?  (run 'go version')\n\ntip\n\nPlease provide any additional information below.\n\nthere are runs that don't crash. in those cases, the heap never seems to go much above\n400 MB.\n\nin the cases where it crashes, the heap seems to quickly ramp up from about 400 MB to 14\nGB. the underlying text being processed by the process that crashes shouldn't be\ndramatically different, so this is surprising.\n\nthe crash definitely seems heap size related.\n\ngc35(8): 3+0+0 ms, 14911 -\u0026gt; 14911 MB 9510 -\u0026gt; 9510 (68456-58946) objects, 110(5695)\nhandoff, 25(592) steal, 925/483/94 yields\nunexpected fault address 0xc627430000\n\ngc31(8): 2+0+0 ms, 14796 -\u0026gt; 14796 MB 9763 -\u0026gt; 9763 (68394-58631) objects, 117(6009)\nhandoff, 34(678) steal, 946/417/88 yields\nunexpected fault address 0xc624db0000\n\ngc32(8): 2+0+0 ms, 14815 -\u0026gt; 14815 MB 9867 -\u0026gt; 9867 (68315-58448) objects, 96(5065)\nhandoff, 32(699) steal, 876/432/86 yields\nunexpected fault address 0xc6176b0000\n\ngc31(8): 3+0+0 ms, 14917 -\u0026gt; 14917 MB 9997 -\u0026gt; 9997 (68312-58315) objects, 120(5185)\nhandoff, 34(626) steal, 863/516/121 yields\nunexpected fault address 0xc6198f0000\n\ngc33(8): 2+0+0 ms, 14643 -\u0026gt; 14643 MB 10156 -\u0026gt; 10156 (68451-58295) objects,\n115(5795) handoff, 42(653) steal, 968/385/84 yields\nunexpected fault address 0xc622790000\n\ngc32(8): 2+0+0 ms, 14760 -\u0026gt; 14760 MB 9964 -\u0026gt; 9964 (68466-58502) objects, 78(3768)\nhandoff, 45(789) steal, 662/378/90 yields\nunexpected fault address 0xc62b0f0000\u003c/pre\u003e",
	"user": {
		"login": "alberts",
		"id": 409689,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 17,
	"closed_at": "2014-12-08T10:26:36Z",
	"created_at": "2013-03-05T03:18:54Z",
	"updated_at": "2016-06-24T22:34:55Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
