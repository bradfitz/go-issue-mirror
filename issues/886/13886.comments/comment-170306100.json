{
	"id": 170306100,
	"body": "Since the optimised code stitches together the decryption and authentication for performance, it needs to write the plaintext before it can check whether the authentication tag is correct. Thus, unlike the generic code, it _cannot_ leave the destination buffer untouched in all failure cases.\r\n\r\nSince it has written plaintext that it knows is dangerous, zeroing out is, I think, I fair behaviour.\r\n\r\nHowever, it does still leave the destination buffer untouched in other failure cases so it's not the case that it'll always zero it out. BoringSSL does always zero it out but Go is different because it returns a slice and so I'm not immediately convinced that it needs to be the same.\r\n\r\nGiven that, I think I would like to keep the AESNI behaviour to save a copy, and thus update the generic code to act the same. I'll write some changes to do this.",
	"user": {
		"login": "agl",
		"id": 21203,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-10T03:15:40Z",
	"updated_at": "2016-01-10T03:15:40Z"
}
