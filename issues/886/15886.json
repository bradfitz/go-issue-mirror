{
	"id": 157415000,
	"number": 15886,
	"state": "closed",
	"title": "cmd/compile: wrapper methods are not PIC-safe on ppc64le",
	"body": "If you try to build a package into a shared library on ppc64le and that package defines a type that embeds a type from another package that's in another shared library, you get errors like:\r\n\r\n```\r\n/usr/lib/gcc-cross/powerpc64le-linux-gnu/5/../../../../powerpc64le-linux-gnu/bin/ld: /tmp/go-link-803871634/go.o: In function `local.github.com/godbus/dbus.(*unixTransport).CloseRead':\r\ngo.go:(.text+0x32690): call to `net.(*UnixConn).CloseRead' lacks nop, can't restore toc; recompile with -fPIC\r\n/usr/lib/gcc-cross/powerpc64le-linux-gnu/5/../../../../powerpc64le-linux-gnu/bin/ld: go.go:(.text+0x32690): unresolvable R_PPC64_REL24 against `net.(*UnixConn).CloseRead'\r\n```\r\n\r\nThis is because the tail call in the generated method is not PIC according to the platform rules. The fix is easy -- do not generate tail calls in dynlink code on ppc64le -- so I'm going to add this issue to the Go 1.7 milestone for a decision. (I can keep it Ubuntu-specific if the decision is not to accept it for 1.7).",
	"user": {
		"login": "mwhudson",
		"id": 672022,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-06-07T01:53:00Z",
	"created_at": "2016-05-30T00:49:25Z",
	"updated_at": "2016-06-07T01:53:00Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
