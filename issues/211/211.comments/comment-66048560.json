{
	"id": 66048560,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003e\u003e I would expect the compiler or linker to complain \n\u003e that the BaseObject.String() method was not \n\u003e implemented. Instead, the compiler compiles,\n\u003e the linker links, the executable crashes as follows:\n\nSaying\n\ntype BaseObject struct {\n    Stringer;\n}\n\ndoes not assert that BaseObject implements Stringer.\nIt embeds a Stringer interface value field in BaseObject.\nUnless BaseObject supplies its own methods,\ncalls to String and WhoAmI on BaseObject will \nautomatically call the methods on the Stringer field\nin the BaseObject.\n\nSince the Stringer is never initialized in your program,\ncalling the methods on it causes a crash, as it should.\n\nIf you want to assert that *BaseObject implements Stringer,\nthe thing to write is\n\ntype BaseObject struct {\n    ... whatever fields you need\n}\n\nvar _ Stringer = (*BaseObject)(nil)\n\nwhich declares a variable of type Stringer and\ninitializes it with a pointer of type BaseObject.\nIf *BaseObject does not implement Stringer, the\ncompiler will complain.\n\nBut note that in Go, such assertions are just helpful,\nnot required like in Java.\u003c/pre\u003e\n\n\n_Owner changed to **r...@golang.org**._\n\n_Status changed to **WontFix**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-11-15T21:57:50Z",
	"updated_at": "2014-12-08T10:03:39Z"
}
