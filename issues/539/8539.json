{
	"id": 51288344,
	"number": 8539,
	"state": "closed",
	"title": "YAPFGS: Yet Another Proposal For Generics Support",
	"body": "\u003cpre\u003eAdd a new type, let's call it `generic`, variables of that type can't be accessed or\nused and trying to access it before assignment should be a compile-time error.\n\nOnce it gets assigned, the compiler marks that generic as the type of the assignment,\ntrying to assign it to a different type results in a compile time error.\n\nfor struct variables, the compiler creates a unique type for that struct at compile\ntime, like how `var x = ...`.\n\nFor example:\n\ntype Something struct {\n\ta, b generic\n}\nfunc Add(a, b generic) (c generic) { // error if a and b aren't the same type\n        return a + b\n}\nfunc main() {\n\ts1 := Something{1,1.5}\n\ts2 := Something{\u0026quot;test\u0026quot;, uint64(10)}\n        s2 = s1 //compiler error\n        Add(10, 10.5) //error, can't add int and float\n        Add(\u0026quot;s\u0026quot;, \u0026quot;x\u0026quot;) // now internally Add is called AddS\n        Add(10, 10) // Add = ADDI32\n\n}\n\n\ncalling reflect.TypeOf(s1).Name() would return SI32F64, reflect.TypeOf(s2).Name() would\nreturn something like SSU64.\n\nAdvantages:\n\n1. The type will always be known at compile type, no need to worry about runtime\noverhead, unlike interface{}.\n2. It should be fairly easy to implement.\n3. Nothing changes in current code at all (unless someone had type generic SomeType in\ntheir code).\u003c/pre\u003e",
	"user": {
		"login": "OneOfOne",
		"id": 1080443,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:47:25Z",
	"created_at": "2014-08-16T16:16:43Z",
	"updated_at": "2016-06-25T01:39:41Z"
}
