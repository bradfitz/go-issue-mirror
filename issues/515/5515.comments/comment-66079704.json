{
	"id": 66079704,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003esmaller reproducer (\u003ca href=\"http://play.golang.org/p/6n8GBitnPl)\"\u003ehttp://play.golang.org/p/6n8GBitnPl)\u003c/a\u003e:\n\n$ cat bug.go\n// \u003ca href=\"https://golang.org/issue/5515\"\u003eissue #5515\u003c/a\u003e\npackage main\n\ntype T uint32\n\nfunc main() {\n        b := make([]T, 8)\n        b[0] = 0xdeadbeef\n        rs := Slice(b)\n        sort(rs)\n}\n\ntype Slice []T\n\nfunc (s Slice) Swap(i, j int) {\n        //println(\"don't panic\")\n        tmp := s[i]\n        s[i] = s[j]\n        s[j] = tmp\n}\n\ntype Interface interface {\n        Swap(i, j int)\n}\n\nfunc sort(data Interface) {\n        data.Swap(0, 4)\n}\n\n$ GOARCH=386 go run bug.go\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x1 pc=0xdeadbeef]  // please note that the pc is smashed!\n\ngoroutine 1 [running]:\n\ngoroutine 2 [runnable]:\nexit status 2\n\ninitial analysis:\ninlined version of main.(*runeSlice).Swap is smashing return address on stack.\nThis is a security problem, as the word that is saved to return address slot\nis external controllable (remote code execution is possible if the attacker can\nmap executable memory or use existing code in the program and ROP).\n\nFortunately, this only affects 386.\n\nwe can temporarily revert rev 55e75a96c9c0 to workaround the bug.\u003c/pre\u003e\n\n_Labels changed: added **priority-asap**, **go1.1.1**, **security**, removed **priority-triage**._\n\n\n_Status changed to **Accepted**._",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-05-19T17:04:28Z",
	"updated_at": "2014-12-08T10:29:56Z"
}
