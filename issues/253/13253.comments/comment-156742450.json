{
	"id": 156742450,
	"body": "This is an interesting proposal. Some initial questions and comments (I can't spell out \"strided slice\" each time, so I call them \"strice\" here - my apologies...):\r\n\r\n1) Is there a difference between `[*][*]T` and `[*]([*]T)`? If I understand correctly, the former is a strice with arity 2 which is implemented as a strice descriptor containing 2 strides and pointing to a single contiguous underlying backing array. The latter would be a strice with arity 1 holding elements that are arity-1 strice descriptors. Is there a way to differentiate the two? The latter I could produce as follows: `var a [][*]T; x = a*[s]`. Am I missing something? (I think an arity 2 strice is really a 2-dimensional thing laid out flat in memory, so it needs some notation `[\u003csomething\u003e , \u003csomething\u003e]T` to differentiate from `[\u003csomething\u003e][\u003csomething\u003e]T`).\r\n\r\n2) A strice expression can be used to go from an array or slice to a strice. Is there a way to go from strice back to a slice such that multiple strice elements are \"combined\" into a slice? I think this would make it possible to reshape such multidimensional structures which might be useful.\r\n\r\n3) Notation: I am worried about syntactic problems with strice expressions. For one `a * [s]` looks like a multiplication of sorts (while it really __divides__ an array or slice into strice elements). Also, there may be syntactic ambiguities as in `a * [s]T` (which way does a strice expression bind). Not to mention that we already use `*` for both multiplication, indirection, and to denote pointer types. Instead of `*`, `/` comes to mind, except that we divide into sub-elements of length s rather than into s sub-elements. Maybe `a/[s]`? Or even introduce a new operator `\\`: `a * [s]` could be written as `a\\s` (as in split a into elements of length s), which would look very clean on the page.\r\n",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-14T19:56:50Z",
	"updated_at": "2015-11-14T19:57:42Z"
}
