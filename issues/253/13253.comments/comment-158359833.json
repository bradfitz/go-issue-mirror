{
	"id": 158359833,
	"body": "@yiyus You proposed this implementation:\r\nstruct {\r\n    array *T\r\n    dim [N]int\r\n    stride [N-1]int\r\n}\r\n\r\nI suppose that you are assuming that the last stride is 1. I think it would be fine for this to be true in the first version, but I think that the representation needs to be future-proof, so I think it should store N strides.\r\n\r\nBy building the N into the representation, you are assuming that [,]T is a different type to [,,]T, and so on. I'm not sure that this is essential or desirable. When working with torch tensors or numpy ndarrays, I don't think of tensors of different dimensions as belonging to different types. Indeed, the objects can be mutated in ways that change the number of dimensions. (Of course, those are both within dynamic languages, but the point stands.)\r\n",
	"user": {
		"login": "somadivad",
		"id": 8932697,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-20T11:03:23Z",
	"updated_at": "2015-11-20T11:03:23Z"
}
