{
	"id": 66077855,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eI think this is reasonably fixable.  We just need to change the handling of unnamed\ndwarf.StructType's to directly return a struct definition rather than indirectly via a\ndummy identifier and typedef.  E.g., with a minor change on top of my patch for issue\n8441 (mostly to make sure assigning to t.Go after the recursive call to c.Struct() is\nsafe), I get:\n\n$ go tool cgo -godefs issue5253.go\n// Created by cgo -godefs - DO NOT EDIT\n// cgo -godefs issue5253.go\n\npackage test\n\ntype A struct {\n        Count   uint64\n        Data    [15]struct {\n                Value int64\n        }\n}\n\nThere's a possible issue if C code does something silly like \"typedef struct { ... } X,\nY;\" then C.X and C.Y would now become distinct types, whereas previously they would be\ntreated as aliases of type __1.  I don't think that's an issue in practice, but it's\nprobably solvable if needed.\n\nThere's also an exponential code size blow up from pathological inputs like:\n\n/*\ntypedef struct foo {\n        struct {\n                struct {\n                        struct {\n                                int x;\n                        } a, b;\n                } a, b;\n        } a, b;\n} A, B;\n*/\nimport \"C\"\n\nbut that could be fixed by making (*typeConv).Struct() smarter when consecutive fields\nreference the same DWARF type.  Though again, I don't expect it to be an issue in\npractice.\u003c/pre\u003e",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-08-05T18:24:00Z",
	"updated_at": "2014-12-08T10:28:18Z"
}
