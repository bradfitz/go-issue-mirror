{
	"id": 171446980,
	"body": "\u003e The fact that it is happening for you on FreeBSD but not on GNU/Linux suggests a FreeBSD specific problem\r\n\r\nI agree. But, I haven't been able to 100% reproduce the input these freebsd boxes are getting on linux. So the fact that I haven't seen it on linux is not entirely conclusive. I'm planning to add a linux box to the set of boxes that have been demonstrating this behavior to see if it will occur there as well.\r\n\r\n\u003e Is that the behaviour you see? An initial set of collisions that resolve, followed by normal behaviour?\r\n\r\nNot entirely. I think we can agree on the fact that there's some contention _somewhere_, resulting in the 300 threads listed above. However, once the load begins to rise, the application doesn't recover. Even when we wait 20 minutes before killing it, no cgo callback is processed since the beginning of the outage. Other goroutines, including ones that invoke os/exec.Command().Run() continue running as should. \r\n\r\nI think this last bit must be related somehow, given that I run the application on 10 machines. 3 of these machines run the os/exec.Command().Run() code path, and somehow these are the only instances exhibiting any problems.\r\n\r\n\u003e Does your truss listing show any calls to nanosleep?\r\n\r\nThe truss output that we captured is only a 100 lines long. Because 90 lines of these were showing the exact same line we didn't bother capturing anything more. However, of these 100 lines there's no nanosleep() calls.",
	"user": {
		"login": "Freeaqingme",
		"id": 33034,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-13T21:47:28Z",
	"updated_at": "2016-01-13T21:47:28Z"
}
