{
	"id": 66067233,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eFor reference, here some timings after augmenting the search handler so it prints lookup\ntimes (running locally on my machine):\n\n2012/05/16 16:46:13 [::1]:49736\t/search?q=FILE\n2012/05/16 16:46:13 query = \"FILE\": 3.343ms\n2012/05/16 16:46:13 [::1]:49736\t/doc/style.css\n2012/05/16 16:46:13 [::1]:49736\t/doc/godocs.js\n2012/05/16 16:46:32 [::1]:49736\t/search?q=FILE\n2012/05/16 16:46:32 query = \"FILE\": 3.297ms\n2012/05/16 16:46:32 [::1]:49736\t/doc/style.css\n2012/05/16 16:46:32 [::1]:49736\t/doc/godocs.js\n2012/05/16 16:46:56 [::1]:49736\t/search?q=io.File\n2012/05/16 16:46:56 query = \"io.File\": 39.313ms\n2012/05/16 16:47:06 [::1]:49736\t/search?q=io.Foo\n2012/05/16 16:47:06 query = \"io.Foo\": 41.541ms\n2012/05/16 16:47:15 [::1]:49736\t/search?q=foo.bar\n2012/05/16 16:47:15 query = \"foo.bar\": 2.142ms\n2012/05/16 16:47:22 [::1]:49736\t/search?q=x.y\n2012/05/16 16:47:24 query = \"x.y\": 1.708431s\n\nio.Foo is both handled via package.identifier lookup and also via regular expression\n(fulltext) search. The regular expression search is likely contributing to the slowdown\n(~10x slower than a simple identifier lookup). Don't know where the cutoff is in terms\nof latency. Fulltext regexp search is expensive.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-05-16T23:53:56Z",
	"updated_at": "2014-12-08T10:19:10Z"
}
