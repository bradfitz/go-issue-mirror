{
	"id": 51279489,
	"number": 2631,
	"state": "closed",
	"title": "net: DialTimeout does not clean up fd immediately",
	"body": "by **emilliken**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\nI was making many connections via net.DialTimeout and descriptors were not getting\nclosed immediately after timeout, but rather after the OS-defined connect() timeout was\nreached. This was causing my code to run out of descriptors, according to\nnet.DialTimeout. To demo, run lsof 5 seconds after running this code and see that the\ndial descriptor has not been freed.\n\npackage main\n\nimport (\n        \u0026quot;fmt\u0026quot;\n        \u0026quot;net\u0026quot;\n        \u0026quot;os\u0026quot;\n        \u0026quot;time\u0026quot;\n)\n\nconst ( \n        NORESP = \u0026quot;10.0.0.5:11\u0026quot;\n)\n\nfunc main() {\n        fmt.Printf(\u0026quot;begin.\\n\u0026quot;)\n        c, err := net.DialTimeout(\u0026quot;tcp4\u0026quot;, NORESP, 5*time.Second)\n        if err != nil {\n                fmt.Printf(\u0026quot;%v\\n\u0026quot;, err)\n        } else {\n                fmt.Printf(\u0026quot;did not timeout.\\n\u0026quot;)\n                c.Close()\n                os.Exit(1)\n        }\n        fmt.Printf(\u0026quot;selecting.\\n\u0026quot;)\n        select {}\n}\n\nWhat is the expected output?\n\n\nWhat do you see instead?\n\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g\n\nWhich operating system are you using?\nfreebsd amd64\n\nWhich revision are you using?  (hg identify)\nweekly.2011-12-22\n\nPlease provide any additional information below.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"closed_at": "2014-12-08T10:14:00Z",
	"created_at": "2011-12-29T03:28:32Z",
	"updated_at": "2016-06-24T21:22:36Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
