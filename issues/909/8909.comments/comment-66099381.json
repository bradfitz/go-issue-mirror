{
	"id": 66099381,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eG. W. Stewart in \"Matrix Algorithms: Volume 1\", SIAM 1998, pages 139 and 144, cited by\nB. Einarsson \nin \"Accuracy and Reliability in Scientific Computing\", SIAM 2005, page 48, suggest using\n\ns = p + q\nhypot(p, q) = s * math.Sqrt((p/s)*(p/s) + (q/s)*(q/s))\n\nso, scaling with p+q instead of max{|p|, |q|}, because (I cite from the former)\n\n\"If the scale factor s in the algorithm [..] is replaced by max{|a|, |b|}, the results\nmay be less accurate on a hexadecimal machine. The reason is that the number\n\nsqrt((a/s)^2 + (b/s)^2) [equivalent to our q = q / p;  return p * math.Sqrt(1+q*q); ndr]\n\nis a little bit greater than one [iff min{a,b} is small? I think, ndr] so that the\nleading three bits \nin its representation are zero.\"\n\nScaling with s = a + b returns the correct number in this case:\n\n\u003ca href=\"http://play.golang.org/p/P0GduYlgQ-\"\u003ehttp://play.golang.org/p/P0GduYlgQ-\u003c/a\u003e\n\nand also provides protection against [over|under]flow.\n\nIf we don't want to port the (rather complicated) libc hypot(), maybe the suggested\nalternative \nexpression would be a better \"simple but good enough\" implementation than the current\none.\n\nThis claim should be tested, though.\u003c/pre\u003e",
	"user": {
		"login": "ALTree",
		"id": 3586803,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-07T13:15:09Z",
	"updated_at": "2014-12-08T10:49:06Z"
}
