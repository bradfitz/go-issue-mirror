{
	"id": 51284371,
	"number": 5909,
	"state": "closed",
	"title": "time: On Windows, zone name returned by Zone() method sometimes cannot be used in time.LoadLocation",
	"body": "by **diogomfranco**:\n\n\u003cpre\u003eFound when running \u003ca href=\"http://play.golang.org/p/La5gHqlGU-\"\u003ehttp://play.golang.org/p/La5gHqlGU-\u003c/a\u003e on a Windows system\nset to the (UTC -03:00) Brasilia timezone (with or without DST).\nOutput:\n\n\u0026gt; ESAST -10800\n\u0026gt; unknown time zone ESAST\n\nThis also affects time.Parse: time.Parse(\u0026quot;MST\u0026quot;,\ntime.Now().Format(\u0026quot;MST\u0026quot;)),\nor time.UnixDate or any template including a timezone results in a parsing\nerror. With the \u0026quot;MST\u0026quot; template, the error is `cannot parse \u0026quot;ESAST\u0026quot;\nas \u0026quot;MST\u0026quot;`,\nbut with time.UnixDate the error is the odd `cannot parse \u0026quot;ESAST 2013\u0026quot; as\n\u0026quot;MST\u0026quot;`.\n\nApparently Windows exports the timezone name as \u0026quot;E. South America Standard\nTime\u0026quot;, while the name given in the zoneinfo database included with Go, it's\nnamed BRT. Go uses the OS to get the timezone name (and abbreviation?), but\nit doesn't use the OS to do the reverse mapping, and we get that.\n\nOn other OSes, Go (IIRC) uses the zoneinfo database, so this bug probably\ndoesn't exist there.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 12,
	"closed_at": "2014-12-08T10:32:28Z",
	"created_at": "2013-07-18T05:21:46Z",
	"updated_at": "2016-06-24T22:52:09Z"
}
