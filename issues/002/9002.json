{
	"id": 51288971,
	"number": 9002,
	"state": "closed",
	"title": "go.tools/go/pointer: panic when executing oracle peer mode.",
	"body": "\u003cpre\u003eThe following program causes the pointer analysis to fail:\n\npackage main\n\nfunc main() {\n\tch := make(chan *int)\n\t\u0026lt;-ch\n\tfor range ch {\n\t}\n}\n\nQuerying for peers at \u0026lt;-ch causes a panic.\n\nPanic and pointer analysis log:\n\n==== Starting analysis\n==== Generating constraints\n\tcreate n0 invalid type for (zero)\n\tcreate n1 interface{} for panic\n\tcreate n2 func() for root.targets\n\troot call to main.init:\n\tcreate n3 func() for main.init\n\t---- makeFunctionObject main.init\n\tcreate n4 func() for func.cgnode\n\t----\n\tglobalobj[main.init] = n4\n\taddr n3 \u0026lt;- {\u0026amp;n4}\n\tval[init] = n3  (*ssa.Function)\n\tcopy n2 \u0026lt;- n3\n\troot call to main.main:\n\tcreate n5 func() for main.main\n\t---- makeFunctionObject main.main\n\tcreate n6 func() for func.cgnode\n\t----\n\tglobalobj[main.main] = n6\n\taddr n5 \u0026lt;- {\u0026amp;n6}\n\tval[main] = n5  (*ssa.Function)\n\tcopy n2 \u0026lt;- n5\n\n\n==== Generating constraints for cg4:main.init, shared contour\n# Name: main.init\n# Package: main\n# Synthetic: package initializer\nfunc init():\n0:                                                                entry P:0 S:2\n\tt0 = *init$guard                                                   bool\n\tif t0 goto 2 else 1\n1:                                                           init.start P:1 S:1\n\t*init$guard = true:bool\n\tjump 2\n2:          ao: exit 2\n                                                  init.done P:2 S:0\n\treturn\n\n; Creating nodes for local values\n\tcreate n7 bool for t0\n\tval[t0] = n7  (*ssa.UnOp)\n; t0 = *init$guard\n\tcreate n8 bool for global\n\tglobalobj[main.init$guard] = n8\n\tcopy n7 \u0026lt;- n8\n; if t0 goto 2 else 1\n; *init$guard = true:bool\n\tcreate n9 bool for true:bool\n\tglobalobj[true:bool] = n0\n\tval[true:bool] = n9  (*ssa.Const)\n\tcopy n8 \u0026lt;- n9\n; jump 2\n; return\n\n\n==== Generating constraints for cg6:main.main, shared contour\n# Name: main.main\n# Package: main\n# Location: /home/daniel/src/test/te.go:3:6\nfunc main():\n0:                                                                entry P:0 S:1\n\tt0 = make chan *int 0:int                                     chan *int\n\t; *ast.CallExpr @ 4:8 is t0\n\t; var ch chan *int @ 4:2 is t0\n\t; var ch chan *int @ 5:4 is t0\n\tt1 = \u0026lt;-t0                                                          *int\n\t; *ast.UnaryExpr @ 5:2 is t1\n\t; var ch chan *int @ 6:12 is t0\n\tjump 1\n1:                                                       rangechan.loop P:2 S:2\n\tt2 = \u0026lt;-t0,ok                                          (k *int, ok bool)\n\tt3 = extract t2 #1                                                 bool\n\tif t3 goto 1 else 2\n2:                                                       rangechan.done P:1 S:0\n\treturn\n\n; Creating nodes for local values\n\tcreate n10 chan *int for t0\n\tval[t0] = n10  (*ssa.MakeChan)\n\tcreate n11 chan *int for query\n\tcopy n11 \u0026lt;- n10\n\tcreate n12 *int for t1\n\tval[t1] = n12  (*ssa.UnOp)\n\tcreate n13 *int for t2#0\n\tcreate n14 bool for t2#1\n\tval[t2] = n13  (*ssa.UnOp)\n\tcreate n15 bool for t3\n\tval[t3] = n15  (*ssa.Extract)\n; t0 = make chan *int 0:int\n\tcreate n16 *int for makechan\n\tlocalobj[t0] = n16\n\taddr n10 \u0026lt;- {\u0026amp;n16}\n; ; *ast.CallExpr @ 4:8 is t0\n; ; var ch chan *int @ 4:2 is t0\n; ; var ch chan *int @ 5:4 is t0\n; t1 = \u0026lt;-t0\n\tcopy n12 \u0026lt;- n16\n; ; *ast.UnaryExpr @ 5:2 is t1\n; ; var ch chan *int @ 6:12 is t0\n; jump 1\n; t2 = \u0026lt;-t0,ok\n\tcopy n13 \u0026lt;- n16\n\tcopy n14 \u0026lt;- n17\n; t3 = extract t2 #1\n\tcopy n15 \u0026lt;- n14\n; if t3 goto 1 else 2\n; return\n# constraints:\t12\n\t      9  (75%)\t*pointer.copyConstraint\n\t      3  (25%)\t*pointer.addrConstraint\n# nodes:\t17\n# ptsets:\t17\n\n\n==== Renumbering\n\nRenumbering nodes to improve density:\n(5 object nodes of 17 total)\n\tn0 -\u0026gt; n0\n\tn1 -\u0026gt; n5\n\tn2 -\u0026gt; n6\n\tn3 -\u0026gt; n7\n\tn4 -\u0026gt; n1\n\tn5 -\u0026gt; n8\n\tn6 -\u0026gt; n2\n\tn7 -\u0026gt; n9\n\tn8 -\u0026gt; n3\n\tn9 -\u0026gt; n10\n\tn10 -\u0026gt; n11\n\tn11 -\u0026gt; n12\n\tn12 -\u0026gt; n13\n\tn13 -\u0026gt; n14\n\tn14 -\u0026gt; n15\n\tn15 -\u0026gt; n16\n\tn16 -\u0026gt; n4\nInternal panic in pointer analysis:\n/home/daniel/src/goprj/src/code.google.com/p/go.tools/go/pointer/analysis.go:222\n(0x6ca1bc)\n\tfunc.001: debug.PrintStack()\n/home/daniel/src/godev/src/runtime/asm_amd64.s:401 (0x43dff5)\n\tcall16: CALLFN(·call16, 16)\n/home/daniel/src/godev/src/runtime/panic.go:387 (0x416768)\n\tgopanic: reflectcall(unsafe.Pointer(d.fn), deferArgs(d), uint32(d.siz), uint32(d.siz))\n/home/daniel/src/godev/src/runtime/panic.go:12 (0x4158fe)\n\tpanicindex: panic(indexError)\n/home/daniel/src/goprj/src/code.google.com/p/go.tools/go/pointer/constraint.go:56\n(0x698fd5)\n\t(*copyConstraint).renumber: c.src = mapping[c.src]\n/home/daniel/src/goprj/src/code.google.com/p/go.tools/go/pointer/opt.go:113 (0x6b1aba)\n\t(*analysis).renumber: c.renumber(renumbering)\n/home/daniel/src/goprj/src/code.google.com/p/go.tools/go/pointer/analysis.go:291\n(0x694bb5)\n\tAnalyze: a.renumber()\n/home/daniel/src/goprj/src/code.google.com/p/go.tools/oracle/oracle.go:477 (0x4adfb4)\n\tptrAnalysis: result, err := pointer.Analyze(\u0026amp;o.ptaConfig)\n/home/daniel/src/goprj/src/code.google.com/p/go.tools/oracle/peers.go:73 (0x4af2ab)\n\tpeers: ptares := ptrAnalysis(o)\n/home/daniel/src/goprj/src/code.google.com/p/go.tools/oracle/oracle.go:419 (0x4ad5fb)\n\t(*Oracle).query: res.q, err = minfo.impl(o, qpos)\n/home/daniel/src/goprj/src/code.google.com/p/go.tools/oracle/oracle.go:406 (0x4ad4b3)\n\t(*Oracle).Query: return o.query(minfo, qpos)\n/home/daniel/src/goprj/src/github.com/DanielMorsing/ao/main.go:84 (0x401a0d)\n\tmain: res, err := oracl.Query(mode, qp)\n/home/daniel/src/godev/src/runtime/proc.go:63 (0x4182b3)\n\tmain: main_main()\n/home/daniel/src/godev/src/runtime/proc.c:1651 (0x435d00)\n\tgoexit: runtime·goexit(void)\npanic: internal error in pointer analysis: runtime error: index out of range (please\nreport this bug)\n\ngoroutine 1 [running]:\ncode.google.com/p/go.tools/oracle.ptrAnalysis(0xc20805cd20, 0x0)\n\t/home/daniel/src/goprj/src/code.google.com/p/go.tools/oracle/oracle.go:479 +0x79\ncode.google.com/p/go.tools/oracle.peers(0xc20805cd20, 0xc20802a940, 0x0, 0x0, 0x0, 0x0)\n\t/home/daniel/src/goprj/src/code.google.com/p/go.tools/oracle/peers.go:73 +0x90b\ncode.google.com/p/go.tools/oracle.(*Oracle).query(0xc20805cd20, 0xa6eca0, 0xc20802a940,\n0x0, 0x0, 0x0)\n\t/home/daniel/src/goprj/src/code.google.com/p/go.tools/oracle/oracle.go:419 +0x10b\ncode.google.com/p/go.tools/oracle.(*Oracle).Query(0xc20805cd20, 0xc20800afe0, 0x5,\n0xc20802a940, 0xc20802a940, 0x0, 0x0)\n\t/home/daniel/src/goprj/src/code.google.com/p/go.tools/oracle/oracle.go:406 +0x193\nmain.main()\n\t/home/daniel/src/goprj/src/github.com/DanielMorsing/ao/main.go:84 +0xd5d\n\n\nLooks like n17 is used without it being created, causing a panic during renumbering.\u003c/pre\u003e",
	"user": {
		"login": "DanielMorsing",
		"id": 545573,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:49:29Z",
	"created_at": "2014-10-26T20:29:21Z",
	"updated_at": "2016-06-25T01:43:38Z"
}
