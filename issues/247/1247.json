{
	"id": 51277545,
	"number": 1247,
	"state": "closed",
	"title": "'for range' with := differs in behaviour to regular :=",
	"body": "by **czapkofan**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n1. Try to compile the following code (\u0026quot;test01-forrange.go\u0026quot;):\npackage main\n\nvar tab = []int{55, 44, 33}\n\nfunc main() {\n\tvar i int\n\tfor i, v := range tab {\n\t\tif v == 44 {\n\t\t\tbreak\n\t\t}\n\t}\n\tprint(i)\n}\n\nWhat is the expected output?\n(compilation succeeds)\n\nWhat do you see instead?\ntest01-forrange.go:7: i declared and not used\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n8g\n\nWhich operating system are you using?\nLinux\n\nWhich revision are you using?  (hg identify)\n409c37909d73 tip\n\nPlease provide any additional information below.\nCurrent behaviour in the code example is different to one employed in regular :=\nvariables assignment statement - the latter allows mixing pre-declared variables with\nnewly created ones. I believe that the difference is against the \u0026quot;principle of\nleast surprise\u0026quot;.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:07:30Z",
	"created_at": "2010-11-02T13:25:55Z",
	"updated_at": "2016-06-24T19:21:57Z"
}
