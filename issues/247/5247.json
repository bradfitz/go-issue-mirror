{
	"id": 51283348,
	"number": 5247,
	"state": "closed",
	"title": "go/doc: confused by //line comments",
	"body": "by **santucco**:\n\n\u003cpre\u003eBefore filing a bug, please check whether it has been fixed since the\nlatest release. Search the issue tracker and check that you're running the\nlatest version of Go:\n\nRun \u0026quot;go version\u0026quot; and compare against\n\u003ca href=\"http://golang.org/doc/devel/release.html\"\u003ehttp://golang.org/doc/devel/release.html\u003c/a\u003e  If a newer version of Go exists,\ninstall it and retry what you did to reproduce the problem.\n\nThanks.\n\nWhat steps will reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n1. go get bitbucket.org/santucco/goplumb\n2. go doc bitbucket.org/santucco/goplumb\n\nWhat is the expected output?\n\u0026lt;---------------------------------------------------------\u0026gt;\nPACKAGE DOCUMENTATION\n\npackage goplumb\n    import \u0026quot;bitbucket.org/santucco/goplumb\u0026quot;\n\n    Package goplumb provides interface to plumber - interprocess messaging\n    from Plan 9.\n\n\nVARIABLES\n\nvar (\n\n    //PlumberDir is a default mount point of plumber.\n    PlumberDir string = \u0026quot;/mnt/plumb/\u0026quot;\n)\n\n\nFUNCTIONS\n\nfunc Pack(message *Message) []byte\n    Pack packs a message to []byte.\n\nfunc PackAttr(attr []Attr) string\n    PackAttr packs attr to string. If an attribute value\n    contains a white space, a quote or an equal sign the value will be\n    quoted.\n\nfunc UnpackAttr(s string) []Attr\n    UnpackAttr unpack the attributes from s\n\n\nTYPES\n\ntype Attr struct {\n    Name  string\n    Value string\n}\n    Attr is a description of an attribute of a plumber\n    message.\n\n\n\ntype Message struct {\n    Src  string\n    Dst  string\n    Wdir string\n    Type string\n    Attr []Attr\n    Data []byte\n}\n    Message desribes a plumber message.\n\n\nfunc Unpack(b []byte) *Message\n    Unpack return unpacked message.\n\nfunc UnpackPartial(b []byte) (m *Message, r int)\n    UnpackPartial helps to unpack messages splited in\n    peaces. The first call to UnpackPartial for a given message must be\n    sufficient to unpack the header; subsequent calls permit unpacking\n    messages with long data sections. For each call, b contans the complete\n    message received so far. If the message is complete, a pointer to the\n    resulting message m will be returned, and a number of remainings bytes r\n    will be set to 0. Otherwise m will be nil and r will be set to the\n    number of bytes remaining to be read for this message to be complete\n    (recall that the byte count is in the header). Those bytes should be\n    read by the caller, placed at location b[r:], and the message unpacked\n    again. If an error is encountered, m will be nil and r will be zero.\n\n\n\ntype Plumb struct {\n    // contains filtered or unexported fields\n}\n\n\nfunc Open(port string, omode int) (*Plumb, error)\n    Open opens a specified port with a specified omode. If the port begin\n    with a slash, it is taken as a literal file name, otherwise it is a file\n    name in the plumber file system at PlumberDir.\n\n\nfunc (this *Plumb) Close()\n    Close closes a plumbing connection.\n\nfunc (this *Plumb) Recv() (*Message, error)\n    Recv returns a received message or an error.\n\nfunc (this *Plumb) Send(message *Message) error\n    Send sends a message.\n\nfunc (this *Plumb) SendText(src string, dst string, wdir string, data string) error\n    SendText sends a text-only message; it assumes Type\n    is text and Attr is empty.\n\u0026lt;---------------------------------------------------------\u0026gt;\n\nWhat do you see instead?\n\n\u0026lt;---------------------------------------------------------\u0026gt;\nPACKAGE DOCUMENTATION\n\npackage goplumb\n    import \u0026quot;bitbucket.org/santucco/goplumb\u0026quot;\n\n    Package goplumb provides interface to plumber - interprocess messaging\n    from Plan 9.\n\n\nVARIABLES\n\nvar (\n\n    //PlumberDir is a default mount point of plumber.\n    PlumberDir string = \u0026quot;/mnt/plumb/\u0026quot;\n)\n\n\nFUNCTIONS\n\nfunc Pack(message *Message) []byte\n    line goplumb.w:255 Pack packs a message to []byte.\n\nfunc PackAttr(attr []Attr) string\n    line goplumb.w:269 PackAttr packs attr to string. If an attribute value\n    contains a white space, a quote or an equal sign the value will be\n    quoted.\n\nfunc UnpackAttr(s string) []Attr\n    UnpackAttr unpack the attributes from s\n\n\nTYPES\n\ntype Attr struct {\n    Name  string\n    Value string\n}\n    line goplumb.w:176 Attr is a description of an attribute of a plumber\n    message.\n\n\n\ntype Message struct {\n    Src  string\n    Dst  string\n    Wdir string\n    Type string\n    Attr []Attr\n    Data []byte\n}\n    Message desribes a plumber message.\n\n\nfunc Unpack(b []byte) *Message\n    Unpack return unpacked message.\n\nfunc UnpackPartial(b []byte) (m *Message, r int)\n    line goplumb.w:399 UnpackPartial helps to unpack messages splited in\n    peaces. The first call to UnpackPartial for a given message must be\n    sufficient to unpack the header; subsequent calls permit unpacking\n    messages with long data sections. For each call, b contans the complete\n    message received so far. If the message is complete, a pointer to the\n    resulting message m will be returned, and a number of remainings bytes r\n    will be set to 0. Otherwise m will be nil and r will be set to the\n    number of bytes remaining to be read for this message to be complete\n    (recall that the byte count is in the header). Those bytes should be\n    read by the caller, placed at location b[r:], and the message unpacked\n    again. If an error is encountered, m will be nil and r will be zero.\n\n\n\ntype Plumb struct {\n    // contains filtered or unexported fields\n}\n\n\nfunc Open(port string, omode int) (*Plumb, error)\n    Open opens a specified port with a specified omode. If the port begin\n    with a slash, it is taken as a literal file name, otherwise it is a file\n    name in the plumber file system at PlumberDir.\n\n\nfunc (this *Plumb) Close()\n    line goplumb.w:520 Close closes a plumbing connection.\n\nfunc (this *Plumb) Recv() (*Message, error)\n    line goplumb.w:309 Recv returns a received message or an error.\n\nfunc (this *Plumb) Send(message *Message) error\n    Send sends a message.\n\nfunc (this *Plumb) SendText(src string, dst string, wdir string, data string) error\n    line goplumb.w:288 SendText sends a text-only message; it assumes Type\n    is text and Attr is empty.\n\u0026lt;---------------------------------------------------------\u0026gt;\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g\n\nWhich operating system are you using?\nLinux x86_64\n\nWhich version are you using?  (run 'go version')\ngo version devel +1a196137ed09 Tue Apr 09 18:17:55 2013 +1000 linux/amd64\n\nPlease provide any additional information below.\nThe project bitbucket.org/santucco/goplumb is \u0026quot;literate programmed\u0026quot; and the\nfile goplumb.go is generated from goplumb.w.\nThe line marks  (//line goplumb.w:xxx) are added in goplumb.go when it is being\ngenerated. They are separated from comments of description by newline, but for some\nreason sometimes they are added to the descriptions.\nI tried to process goplumb.go by gofmt, the result was changed a bit, but the most of\nline marks were left.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 13,
	"closed_at": "2014-12-08T10:28:16Z",
	"created_at": "2013-04-09T09:44:00Z",
	"updated_at": "2016-06-24T22:37:40Z",
	"milestone": {
		"id": 1067211,
		"number": 17,
		"title": "Go1.3"
	}
}
