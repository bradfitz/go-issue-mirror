{
	"id": 187746375,
	"body": "`omitempty` only applies to JSON encoding, not decoding.  (That appears to also be the case with `encoding/asn1` and `encoding/xml`)\r\n\r\nGo's encoding of that zero-value struct with `omitempty` is `{}`.  If the `Id` field still had `string` set but not `omitempty`, it encodes as `{\"id\": \"0\"}`.  It properly decodes both of those cases.\r\n\r\nI'm not sure it's the correct thing to interpret `\"\"` as `\"0\"` for string-encoded integer fields.  I know Go allows for this kind of encoding for 64-bit integers for safety (because JS only has 53-bit integer precision, IIRC), but is it a reasonably well specified practice?  It looks like it was introduced in https://golang.org/cl/4918051",
	"user": {
		"login": "joeshaw",
		"id": 39916,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-23T15:32:57Z",
	"updated_at": "2016-02-23T15:37:03Z"
}
