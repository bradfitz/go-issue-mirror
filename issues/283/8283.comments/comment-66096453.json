{
	"id": 66096453,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8 by **Zachary.Drew**:\n\n\u003cpre\u003eChanging the comment does not fix the issue. Your statement \"It doesn't matter here that\nStat might have failed with an I/O error.\" is wrong. The user does care what the error\nis. The caller deserves to know the actually reason the call failed.\n\nWe have these two errors, occurring in this order:\n\nstat /failed-file-system-mount-point/subdirectory-to-create: input/output error\nmkdir /failed-file-system-mount-point: file exists\n\nThe important one, the first one, the one the user wants to know about, the one I want\nto know about, the reason the call is actually failing--is being discarded. Yes, an\nerror is being returned, but it is the wrong error to return.\n\nIt would be more accurate to mark this issue \"not going to fix\" than to changing\ncomments and claim it's fixed.\n\nAs a general design principal, a routine should return the error that caused the routine\nto fail. Do you agree? Yes, technically, \"file exists\" is the error that caused the\nlogic to fail. But the IO Error is what caused the routine to fail and claiming\notherwise is disingenuous.\n\nFurther, recursion is beautiful computer science and all, but is it really appropriate\nhere? Looks to me like it's recursion for the sake of recursion. We're not descending a\ntree here. A filesystem may be a tree, but a file path is a sequence.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-10-06T20:34:54Z",
	"updated_at": "2014-12-08T10:46:02Z"
}
