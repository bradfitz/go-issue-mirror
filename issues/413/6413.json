{
	"id": 51285148,
	"number": 6413,
	"state": "closed",
	"title": "go/types: types are not collected for go or defer statement call expressions.",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\n\n    fset := token.NewFileSet()\n    src := `\npackage p\n\nfunc f() int {\n    return 1\n}\n\nfunc g() {\n    defer f()\n    go f()\n}\n`\n    f, err := parser.ParseFile(fset, \u0026quot;\u0026quot;, src, 0)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    var conf Config\n    types := make(map[ast.Expr]Type)\n    _, err = conf.Check(f.Name.Name, fset, []*ast.File{f}, \u0026amp;Info{Types: types})\n    if err != nil {\n        t.Error(err)\n    }\n\n    for x, typ := range types {\n        if exp, ok := x.(*ast.CallExpr); ok {\n            fmt.Printf(\u0026quot;%+v, %v\\n\u0026quot;, exp, typ)\n        }\n    }\n\nWhat is the expected output?\nTwo lines of output, one for the call expression corresponding to `defer f()` and one\nfor `go f()`.\n\nWhat do you see instead?\nNo output.\n\nWhich version are you using?  (run 'go version')\ngo version devel +2e735aa41d4a Tue Sep 17 13:30:36 2013 -0400 darwin/amd64\n\nI'm trying to use this functionality for my program errcheck\n(github.com/kisielk/errcheck) to check if someone ignored an error return by calling `go\nf()` or `defer f()` where f() is a function that returns an error type.\u003c/pre\u003e",
	"user": {
		"login": "kisielk",
		"id": 58618,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2014-12-08T10:35:20Z",
	"created_at": "2013-09-17T18:27:25Z",
	"updated_at": "2016-06-25T01:18:58Z"
}
