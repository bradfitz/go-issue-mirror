{
	"id": 225464835,
	"body": "#16043 got me thinking about this again, and I think I can better present my earlier thoughts:\r\n\r\nExported v. unexported is an important distinction, but unexported elements can legally be part of the API of a package, directly or indirectly. \r\n\r\nI think there needs to be a notion of \"accessible\" elements in a package.\r\n\r\nThis includes all exported elements as well as the subset of the unexported such that: \r\n- it's the type of an exported var or const\r\n- it's the type of an accessible field\r\n- it's the type of a parameter or return of an accessible func or method\r\n- they're embedded in an accessible type and have accessible methods and fields\r\n- it's any of the exported methods and fields of an accessible type\r\n\r\nI've created a repo containing these cases: https://github.com/jimmyfrasche/inaccessible2godoc\r\n\r\nYou can see these with ?m=all but you also see everything unexported that is not accessible by the above definition, which adds noise when all you wanted to know was the public API not the internals. \r\n\r\nI don't know if this concept needs to be in the language spec (unless it adds clarity, of course).\r\n\r\nBut a general mechanism for computing the set of accessible items could be added to go/types or a package in x/. \r\n\r\ngodoc could use that to filter instead of ast.IsExported to get the complete API for a package. There wouldn't need to be any special handling of fields and methods from embedded but unexported types, just a link to the unexported but accessible type as there would be were the type exported. \r\n\r\ngolint likewise could chastise \"unexported X is accessible and should be documented\".\r\n\r\nI'm sure there are other uses.",
	"user": {
		"login": "jimmyfrasche",
		"id": 375553,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-12T22:40:29Z",
	"updated_at": "2016-06-12T22:40:29Z"
}
