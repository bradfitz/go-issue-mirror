{
	"id": 66065526,
	"body": "\u003ca id=\"c23\"\u003e\u003c/a\u003eComment 23:\n\n\u003cpre\u003eConceptually, you are right: the number of threads used by a Go program is purely an\nimplementation detail, and it should be possible in principle to write a Go\nimplementation that uses a fixed number of threads.\n\nThis can even be done in practice.  When a Go program is about to enter a system call,\nor call a C/C++ function, we can check whether there are more threads available to run\ngoroutines.  If there are not, we can suspend the goroutine until there are threads\navailable.\n\nThat approach would work for most programs.  The problem is that there are valid Go\nprograms that would work normally, but would fail if this policy were adopted, simply\nbecause the other suspended threads might be unblocked by the C function that would have\nbeen called by the goroutine that the runtime suspended.  The Go programmer has to\nchange from a model in which goroutines can be created casually and can run any\noperation to a different model in which all potentially blocking calls have to be\ncounted, with semaphores or other mechanisms to prevent a deadlock of blocking calls. \nPerhaps this is acceptable for people who use seccomp, but it hardly seems desirable. \nAnd this is not something that can be implemented only in the seccomp support code.  It\ngoes against the grain to modify the Go runtime to support a more complex programming\nmodel.\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-09T20:45:57Z",
	"updated_at": "2014-12-08T10:17:46Z"
}
