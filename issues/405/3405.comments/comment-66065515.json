{
	"id": 66065515,
	"body": "\u003ca id=\"c13\"\u003e\u003c/a\u003eComment 13:\n\n\u003cpre\u003eAnd, finally, Linux 3.5 is released: \u003ca href=\"http://kernelnewbies.org/Linux_3.5\"\u003ehttp://kernelnewbies.org/Linux_3.5\u003c/a\u003e\n\nFrom the Release Notes:\n\n1.3. Seccomp-based system call filtering\nSeccomp (alias for \"secure computing\") is a simple sandboxing mechanism added back in\n2.6.12 that allows to transition to a state where it cannot make any system calls except\na very restricted set (exit, sigreturn, read and write to already open file\ndescriptors). Seccomp has now been extended: instead of a fixed and very limited set of\nsystem calls, seccomp has evolved into a filtering mechanism that allows processes to\nspecify an arbitrary filter of system calls (expressed as a Berkeley Packet Filter\nprogram) that should be forbidden. This can be used to implement different types of\nsecurity mechanisms; for example, the Linux port of the Chromium web browser supports\nthis feature to run plugins in a sandbox.\n\nThe systemd init daemon has added support for this feature. A Unit file can use the\nSystemCallFilter to specify a list with the syscalls that will be allowed to run, any\nother syscall will not be allowed:\n\n [Service]  ExecStart=/bin/echo \"I am in a sandbox\" SystemCallFilter=brk mmap access open fstat close read fstat mprotect arch_prctl munmap write\nRecommended links: Documentation and Samples).\n\nRecommended LWN article: Yet another new approach to seccomp\n\nCode: (commit 1, 2, 3, 4, 5)\u003c/pre\u003e",
	"user": {
		"login": "krasin",
		"id": 21159,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-07-22T03:28:06Z",
	"updated_at": "2014-12-08T10:17:46Z"
}
