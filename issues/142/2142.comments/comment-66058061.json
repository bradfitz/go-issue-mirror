{
	"id": 66058061,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11:\n\n\u003cpre\u003eFurther experimentation on this.\n\nThis change allows allocation and addressing of data beyond 16GB (in this case 64GB):\n\ndiff -r 920e9d1ffd1f src/pkg/runtime/malloc.goc\n--- a/src/pkg/runtime/malloc.goc\tWed Mar 28 23:41:59 2012 +1100\n+++ b/src/pkg/runtime/malloc.goc\tSun Jun 10 09:39:58 2012 +0930\n@@ -305,7 +305,7 @@\n \t\t// allocate 15 GB before we get that far.\n \t\t//\n \t\t// If this fails we fall back to the 32 bit memory mechanism\n-\t\tarena_size = 16LL\u0026lt;\u0026lt;30;\n+\t\tarena_size = 16LL\u0026lt;\u0026lt;32;\n \t\tbitmap_size = arena_size / (sizeof(void*)*8/4);\n \t\tp = runtimeÂ·SysReserve((void*)(0x00f8ULL\u0026lt;\u0026lt;32), bitmap_size + arena_size);\n \t}\ndiff -r 920e9d1ffd1f src/pkg/runtime/malloc.h\n--- a/src/pkg/runtime/malloc.h\tWed Mar 28 23:41:59 2012 +1100\n+++ b/src/pkg/runtime/malloc.h\tSun Jun 10 09:39:58 2012 +0930\n@@ -116,7 +116,7 @@\n \t// On 64-bit, we limit the arena to 16G, so 22 bits suffices.\n \t// On 32-bit, we don't bother limiting anything: 20 bits for 4G.\n #ifdef _64BIT\n-\tMHeapMap_Bits = 22,\n+\tMHeapMap_Bits = 24,\n #else\n \tMHeapMap_Bits = 20,\n #endif\n\nIt may well have bad interactions with garbage collection, but could be a work around in\nthe short term if that is not an issue.\u003c/pre\u003e",
	"user": {
		"login": "kortschak",
		"id": 275221,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-06-10T00:13:07Z",
	"updated_at": "2014-12-22T06:02:24Z"
}
