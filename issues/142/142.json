{
	"id": 51276101,
	"number": 142,
	"state": "closed",
	"title": "proposal: More Type-Safe File Handling",
	"body": "by **vomjom**:\n\n\u003cpre\u003eI propose that Go implements a Reader interface for files that are read-\nonly and a Writer interface for files that are write-only.\n\nThe motivation is this type of program:\n\npackage main\n\nimport \u0026quot;os\u0026quot;\n\nfunc main() {\n    f, _ := os.Open(\u0026quot;test.out\u0026quot;, os.O_CREATE | os.O_RDONLY, 0644);\n    defer f.Close();\n\n    f.WriteString(\u0026quot;foobar\u0026quot;);\n}\n\n\nIt succeeds in running, but doesn't output anything.  This kind of error \ncan be caught safely at compile-time if WriteString() only belonged to a \nWriter interface.\n\nSpecifically, here's my proposal:\n\n1. Get rid of os.O_RDONLY and os.O_WRONLY.\n\n2. Keep os.Open.  os.Open would mean that you are opening a file for both \nreading and writing.\n\n3. Make an os.OpenRead() and os.OpenWrite().  These would return read only \nand write only interfaces to files.\n\nThese Reader and Writer interfaces should be generic enough that they can \nbe used in other settings (sockets and pipes, for example).\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:03:25Z",
	"created_at": "2009-11-13T13:28:21Z",
	"updated_at": "2015-08-31T04:28:04Z"
}
