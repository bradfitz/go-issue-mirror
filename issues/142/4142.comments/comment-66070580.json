{
	"id": 66070580,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eI am the person (or at least one of the people) who proposed to the\nANSI C standards committee to make memcpy work right in the case of\noverlap. Even though we got memmove instead, it's at least possible to\nuse memmove everywhere and know your program won't break. I haven't\nused memcpy since.\n\nIn that spirit, I vote strongly for option 2.\n\n-rob\n\nP.S. I also proposed making malloc(0) perfectly fine, since zero is a\nperfectly fine value. I also, in the same letter, proposed making\nzero-sized arrays legal, mostly so you could do the extend-the-struct\ntrick for a variable-sized array as the last field of the struct. I\ngot two letters back as answer to my one. #1: Malloc(0) shouldn't work\nbecause zero-sized arrays don't work. #2: Zero-sized arrays shouldn't\nwork because malloc(0) doesn't work. Well played, ANSI C committee,\nand may your lives be a living hell.\n\nP.P.S. Once ANSI C came out, memmove was required to work but memcpy\nwasn't, so we just used memmove everywhere (and so should you). We\nnoticed though that some of our code was extremely slow when compiled\non IRIX. We dug in, and found that, rather than using an if statement\nto solve the overlap problem, the implementers of memmove fixed the\nproblem by implementing memmove with a correct but remarkable\ntechnique, regardless of actual overlap: 1. malloc a buffer. 2. memcpy\nsource to buffer. 3. memcpy buffer to destination. 4 free buffer. The\nbest-laid plans and all that.\u003c/pre\u003e",
	"user": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-09-26T22:05:07Z",
	"updated_at": "2014-12-08T10:22:00Z"
}
