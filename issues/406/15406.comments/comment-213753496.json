{
	"id": 213753496,
	"body": "@ppknap Thanks for your insights and for your work on notify. \r\n\r\nnotify is much further along than fsnotify in this regard, as fsnotify still doesn't support recursive watches.\r\n\r\nWhat I am trying to think through is how to build *usable* file system notifications library in **layers**. \r\n\r\nUltimately I want a common API with common behaviour across the selected notification systems. As a user, I want a library where I don't even need to know what inotify is, and can just get on with building whatever it is I'm building.\r\n\r\n### At the top: common behaviour by filling in the gaps\r\n\r\nThis provides an easy to API where the user doesn't need to know or care about the underlying file notifications systems on different platforms. The library makes the experience as consistent as possible across every platform that is supported.\r\n\r\nThis top layer comes with more opinions on how notifications should work and which features of the low-level APIs are exposed. For example, one opinion may be to use polling on BSD as with Plan 9 and NFS shares -- rather than trying to emulate both directory and recursive watching on top of kqueue's file-handle limited watcher. Another could be which underlying flags to expose and how to expose them, such as inotify's `InCloseWrite` which fsnotify doesn't currently offer or use (but probably should).\r\n\r\nPart of the idea behind my original proposal is to enable multiple experiments at this layer, but without having to rewrite the lower layers each time. The internals of fsnotify v1.x could also be gutted,  pulling in the low-level parts from a dependency, while maintaining its current API and set of behaviours.\r\n\r\n### A driver model: common API but not common behaviour\r\n\r\nAt a layer below that, contributors to fsnotify and the fsevents package have been discussing a \"driver\" like model for sometime. By the sounds of it, notify already has one.\r\n\r\nMy thinking here is to provide a common API but not common behaviour.\r\n\r\n* A single platform may have multiple drivers (FSEvents \u0026 kqueue, inotify \u0026 fanotify, etc.)\r\n* Not all drivers are available on all platforms, but a polling driver always is.\r\n* The user selects which driver to use. This helps align expectations with reality -- each system behaves a little differently, like choosing between MySQL and PostgreSQL.\r\n* Additional drivers could be added over time, such as FEN on Solaris, USN Journals on Windows, and fanotify on Linux.\r\n\r\nAt this layer, a kqueue driver should be accessible from a generalized API, but behave just like kqueue. No extras or emulations of other platforms. But it's important to think about how higher level abstractions could be built above the drivers.\r\n\r\nWhen I first started on fsnotify, I was working on a pipeline for processing events, a bit like a middleware stack for adding user-space functionality like recursive watching and filtering. That project was discarded, but it's an approach I would consider trying again for fsnotify v2. I was also considering a capabilities API of sorts, so that the underlying file notification systems could be utilized for various features when available. \r\n\r\nI was originally going to propose a driver model here, but I'm not sure how a common API should expose differences in flags and features that are available. How would you do it?\r\n\r\nIf the common API is already squeezing out some features and choosing which flags are available, it would seem that there is still another level down to go.\r\n\r\n### At the bottom\r\n\r\nThis comes back to my original proposal for \"fsn\" or whatever it's called. Really it is just a collection of packages for each notification system using cgo or syscall, along with cross-architecture testing.\r\n\r\nIt shouldn't take much to wrap these up in a driver interface. \r\n\r\nBut I don't know, maybe this layer isn't needed. I'm very curious how others imagine building a stack for _useable_ file notifications. Cheers.\r\n",
	"user": {
		"login": "nathany",
		"id": 4566,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-23T14:59:31Z",
	"updated_at": "2016-04-23T15:56:43Z"
}
