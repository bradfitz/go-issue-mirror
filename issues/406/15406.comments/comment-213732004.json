{
	"id": 213732004,
	"body": "I'm the author of windows and linux part of @rjeczalik's notify package, so I think that my comment may be helpful: \r\n\r\n\u003e Not a common API. Each notification system would have a slightly different API.\r\n\r\nActually, they can and should have a common API. All file notification systems uses one(or more) watching strategies(according to my knowledge):\r\n\r\n|   | file watcher  | directory watcher  | recursive watcher  |\r\n|---:|:---:|:---:|:---:|\r\n|  Inotify | x  | x  |   |\r\n|  FSEvents |   |   | x  |\r\n|  ReadDirectoryChangesW |   | x  | x |\r\n|  kqueue | x  |   |   |\r\n\r\nOne can use `file watcher` to mimic `directory watcher` and `recursive watcher` and `directory watcher` to mimic `recursive watcher` and `file watcher` etc. That's what @rjeczalik notify package tries to do.\r\n\r\nNow, we have three interfaces. Each notification system can implement some of them and we can create generic package that can mimic missing interfaces using common strategies.\r\n\r\nOf course, each notification system package can expose its own methods. Then, we may end up with a \"driver\" like structure where we have independent low-level notification systems, maybe `agnostic` driver that selects the proper driver based on underlying operating system, and, of top of that, fsnotify package that registers a driver and tries to mimic missing interfaces. \r\n\r\nI think this may be the right approach for *usable* file system notification library.\r\n\r\nAll in all, I'm not sure if `x/sys` is the right place for this(higher level) stuff. Nothing that can be build with methods from `x/sys` should be present in `x/sys`...\r\n",
	"user": {
		"login": "ppknap",
		"id": 5021246,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-23T12:22:54Z",
	"updated_at": "2016-04-23T12:22:54Z"
}
