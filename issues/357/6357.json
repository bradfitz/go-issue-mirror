{
	"id": 51285065,
	"number": 6357,
	"state": "open",
	"title": "cmd/compile: unsafe.Pointer not treated as a pointer for embedding",
	"body": "\u003cpre\u003e\u003ca href=\"http://play.golang.org/p/YhdG1ZoVzp\"\u003ehttp://play.golang.org/p/YhdG1ZoVzp\u003c/a\u003e\n\nPer the spec: \u0026quot;An embedded type must be specified as a type name T or as a pointer\nto a non-interface type name *T, and T itself may not be a pointer type.\u0026quot;  (\n\u003ca href=\"http://tip.golang.org/ref/spec#Struct_types\"\u003ehttp://tip.golang.org/ref/spec#Struct_types\u003c/a\u003e )\n\ngc issues an error for line 9 (as expected), but not for line 10. Arguably, an\nunsafe.Pointer is a pointer and thus line 10 should not be legal.\n\nThe spec is not very clear about whether an unsafe.Pointer should act like a pointer in\nthese situations, but:\n\n1. The documentation (by pseudo code) defines unsafe.Pointer as *ArbitraryType (\n\u003ca href=\"http://tip.golang.org/ref/spec#Package_unsafe\"\u003ehttp://tip.golang.org/ref/spec#Package_unsafe\u003c/a\u003e )\n\n2. For the purposes of method receivers, they are treated as pointers (see \u003ca href=\"https://golang.org/issue/6116\"\u003eissue #6116\u003c/a\u003e)\n\n3. It's ok to assign nil to it (see line 15 of the above code).\n\n4. It's called a \u0026quot;Pointer\u0026quot;.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"created_at": "2013-09-10T23:22:11Z",
	"updated_at": "2015-06-08T06:24:12Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
