{
	"id": 67789730,
	"body": "Thank you for taking the time to look at it (again). Sorry, my initial report could have been organized/worded better, and it included too much low-level technical details with little background explanation. I've thought about it a bit more and hopefully managed to summarize the issue(s) better.\r\n\r\n\r\nTL;DR version:\r\n\r\n1. The documentation about acceptable import paths should be made clearer.\r\n1. `go get $PRJDOMAIN/...` should work with a \"flat\" package structure (import paths like `\"$PRJDOMAIN/$PKG\"`).\r\n1. Disallowing `import \"$PRJDOMAIN\"` (or perhaps `import \"$PRJDOMAIN/\"`) seems odd, unnecessary, and hard to implement consistently.\r\n\r\n\r\nDetailed version:\r\n\r\nI was thinking in the context of a domain specifically for a single project (as opposed to github or user domains that host multiple projects/repos, thus implying a hierarchy in the package path). I wanted to enumerate the potential layouts I should/could consider, and started playing with this because it wasn't obvious from the docs (`go help importpath`) whether hosting a \"primary\" package at the domain top was (intended to be) supported. So an important part of the issue probably is that documentation regarding acceptable import paths should be made clearer. (Actually even if `import \"$PRJDOMAIN\"` was supported, for the current project I'm inclined to use a \"flat\" collection of packages like `\"$PRJDOMAIN/$PKG\"`.)\r\n\r\n@adg 's example `go get $PRJDOMAIN/...` is great because it covers both the top level and subdirectories in a single command. So if the top level is prohibited as an import path, it seems somewhat ambiguous what the \"correct\" semantics should be for this command. But as a pragmatic consideration, at least if a project only uses packages in subdirectories like \"$PRJDOMAIN/$PKG\", it seems useful and reasonable to expect that users can run `go get $PRJDOMAIN/...` to get and build all of them -- which it currently doesn't:\r\n\r\n    user@host:~$ GOPATH=`mktemp -d` go get -x goget9357topellipsisflat.github.io/...\r\n    package goget9357topellipsisflat.github.io/...: unrecognized import path \"goget9357topellipsisflat.github.io/...\"\r\n    user@host:~$ \r\n\r\nThe same works when the prefix is a subdirectory:\r\n\r\n    user@host:~$ GOPATH=`mktemp -d` go get -x goget9357direllipsisflat.github.io/dir/...                  \r\n    cd .\r\n    git clone https://github.com/goget9357direllipsisflat/goget9357direllipsisflat.github.io /tmp/tmp.YFSP4w7RLp/src/goget9357direllipsisflat.github.io/dir\r\n    cd /tmp/tmp.YFSP4w7RLp/src/goget9357direllipsisflat.github.io/dir\r\n    git show-ref\r\n    cd /tmp/tmp.YFSP4w7RLp/src/goget9357direllipsisflat.github.io/dir\r\n    git checkout master\r\n    WORK=/tmp/go-build057321063\r\n    mkdir -p $WORK/goget9357direllipsisflat.github.io/dir/a/_obj/\r\n    mkdir -p $WORK/goget9357direllipsisflat.github.io/dir/\r\n    cd /tmp/tmp.YFSP4w7RLp/src/goget9357direllipsisflat.github.io/dir/a\r\n    /opt/pkg/go/pkg/tool/linux_amd64/6g -o $WORK/goget9357direllipsisflat.github.io/dir/a.a -trimpath $WORK -p goget9357direllipsisflat.github.io/dir/a -complete -D _/tmp/tmp.YFSP4w7RLp/src/goget9357direllipsisflat.github.io/dir/a -I $WORK -pack ./a.go\r\n    mkdir -p $WORK/goget9357direllipsisflat.github.io/dir/b/_obj/\r\n    cd /tmp/tmp.YFSP4w7RLp/src/goget9357direllipsisflat.github.io/dir/b\r\n    /opt/pkg/go/pkg/tool/linux_amd64/6g -o $WORK/goget9357direllipsisflat.github.io/dir/b.a -trimpath $WORK -p goget9357direllipsisflat.github.io/dir/b -complete -D _/tmp/tmp.YFSP4w7RLp/src/goget9357direllipsisflat.github.io/dir/b -I $WORK -pack ./b.go\r\n    mkdir -p /tmp/tmp.YFSP4w7RLp/pkg/linux_amd64/goget9357direllipsisflat.github.io/dir/\r\n    mv $WORK/goget9357direllipsisflat.github.io/dir/a.a /tmp/tmp.YFSP4w7RLp/pkg/linux_amd64/goget9357direllipsisflat.github.io/dir/a.a\r\n    mv $WORK/goget9357direllipsisflat.github.io/dir/b.a /tmp/tmp.YFSP4w7RLp/pkg/linux_amd64/goget9357direllipsisflat.github.io/dir/b.a\r\n    user@host:~$ \r\n\r\n\r\n\r\nThen, for both the transitive import example in the initial report, and in case we want to allow `go get $PRJDOMAIN/...`, it seems quite hard to me to consistently disallow using \"$PRJDOMAIN\" as an import path. I also don't see any compelling technical or conceptual reason for disallowing it. (If not having a slash in remote import paths is deemed technologically problematic or confusing, \"$PRJDOMAIN/\" can be another option for indicating the top level.) To be honest, I was quite surprised by the initial negative response just based on having mentioned the idea of using the top level of a domain as an import path. Internet infrastructure has evolved greatly so that instead of URLs like `http://www2.companyname.com.cctld/companyname/pcweb/products/$THETHINGYOUARELOOKINGFOR/$THETHINGYOUARELOOKINGFOR.htm` we can often just have `http://$THETHINGYOUARELOOKINGFOR/` or at least something much-much closer. Given this trend in URLs, it could even be argued that disallowing the top level is contrary to the spirit of Go's choice to embrace URLs as import paths.\r\n\r\nConsider for example if a package like fsnotify was called \"fileevents\", and hosted at, say, `https://file.events/`. Which of `import \"file.events\"` and `import \"file.events/fileevents\"` would you consider more idiomatic? To me the former seems better, both based on the evolution of URL schemes, as well as the preference to avoid stutter with naming things in Go. (Ultimately I believe both aim at the same thing; enhancing signal-to-noise ratio.)\r\n\r\nEven just thinking about how such a limitation could be documented (in a way that is useful for package publishers) makes it sound very odd to me: \"You can put packages in any directory of your repo, except if you want to host it at the top level of your domain, in which case you cannot have a package in the repo root.\" Or, \"You can host your repository at any level of your domain, except if it has a package in the root directory, in which case you must use a subdirectory of your domain.\"\r\n",
	"user": {
		"login": "speter",
		"id": 450945,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-21T23:26:51Z",
	"updated_at": "2014-12-21T23:26:51Z"
}
