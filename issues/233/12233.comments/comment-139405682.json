{
	"id": 139405682,
	"body": "[EDIT]\r\n\r\nWe found my bug related to the 64mb allocations. (I mistakenly wrote 64k). Nothing to do with this issue. Sorry for the noise. Basically we had a  sync.Pool with references to CGO resources. That didn't play well with pool draining. If someone wants to delete this comment I wouldn't feel bad.\r\n\r\n[Original] \r\n@rsc This may not be related so I hope I'm not confusing the issue. We're seeing memory usage of our go process grow very quickly since go1.5. It hasn't crashed, but it's gone from 15gb heap to over 100gb on our linux/amd64 server. The only odd thing I've noticed so far is that /proc/$(pidof godaemon)/smaps contains literally hundreds of 65k allocations. Just to give you an example:\r\n\r\n```\r\n7fe6b0000000-7fe6b4000000 rw-p 00000000 00:00 0 \r\nSize:              65536 kB\r\nRss:               65536 kB\r\nPss:               65536 kB\r\nShared_Clean:          0 kB\r\nShared_Dirty:          0 kB\r\nPrivate_Clean:         0 kB\r\nPrivate_Dirty:     65536 kB\r\nReferenced:        57344 kB\r\nAnonymous:         65536 kB\r\nAnonHugePages:     65536 kB\r\nSwap:                  0 kB\r\nKernelPageSize:        4 kB\r\nMMUPageSize:           4 kB\r\n```\r\n\r\nCould someone with a crashing process on linux see if they see similar behaviour?\r\n",
	"user": {
		"login": "shanemhansen",
		"id": 366801,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-10T22:58:41Z",
	"updated_at": "2015-09-25T16:47:05Z"
}
