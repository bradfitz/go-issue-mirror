{
	"id": 72114407,
	"number": 10632,
	"state": "closed",
	"title": "doc/progs: flake on openbsd/amd64",
	"body": "http://build.golang.org/log/0d5151c40a81428dbf8cf559d31cbcc431ce5f8e\r\n\r\n    ##### ../doc/progs\r\n    go1.go:\r\n    \"Christmas is a holiday: true Sleeping for 0.122s . cgo1.go cgo2.go cgo3.go cgo4.go defer.go defer2.go eff_bytesize.go eff_qr.go eff_sequence.go eff_unused1.go eff_unused2.go error.go error2.go error3.go error4.go go1.go gobs1.go gobs2.go image_draw.go image_package1.go image_package2.go image_package3.go image_package4.go image_package5.go image_package6.go interface.go interface2.go json1.go json2.go json3.go json4.go json5.go run.go slices.go timeout1.go timeout2.go go1.go already exists\"\r\n    does not match ^Christmas is a holiday: true Sleeping for 0.123s.*go1.go already exists$\r\n    exit status 1\r\n           24.94 real        26.34 user        17.03 sys\r\n\r\nThis test seems inherently flaky: it's basically evaluating `time.Now().Add(123*time.Millisecond).Sub(time.Now())` and expecting it to always equal `123*time.Millisecond`.  But it's entirely possible that the two calls to time.Now() will return distinct values.\r\n\r\n**Edit:** More specifically, it's evaluating `fmt.Sprintf(\"%.3f\", time.Now().Add(123*time.Millisecond).Sub(time.Now()).Seconds())` and expecting it to always equal `\"0.123\"`.",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2015-04-30T21:45:14Z",
	"created_at": "2015-04-30T09:48:29Z",
	"updated_at": "2016-06-25T02:06:57Z"
}
