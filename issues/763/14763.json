{
	"id": 140058256,
	"number": 14763,
	"state": "closed",
	"title": "path.Base() does not split path properly on Windows 10",
	"body": "* What version of Go are you using (`go version`)?\r\n\r\n```\r\n\u003ego version\r\ngo version go1.6 windows/amd64\r\n```\r\n\r\n* What operating system and processor architecture are you using (`go env`)?\r\n\r\n```\r\n\u003ego env\r\nset GOARCH=amd64\r\nset GOBIN=C:\\Users\\\u003cuser\u003e\\Development\\GoSource\\bin\r\nset GOEXE=.exe\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\\u003cuser\u003e\\Development\\GoSource\r\nset GORACE=\r\nset GOROOT=C:\\Go\r\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_amd64\r\nset GO15VENDOREXPERIMENT=1\r\nset CC=gcc\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\n```\r\n\r\n* What did you do?\r\n\r\nThe [documentation](https://golang.org/pkg/path/#Base) gives an example on the expected behaviour of `path.Base()`, however, it does not actually split the trailing path element. Also, `path.Base()` duplicates the `\\` in the path.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"path\"\r\n\t\"strings\"\r\n)\r\n\r\nfunc main() {\r\n\tbase := `c:\\users\\username`\r\n\tfmt.Println(path.Base(base))\r\n\tfmt.Println(fmt.Sprintf(\"%q\\n\", strings.SplitAfter(base, `\\`)))\r\n\tlines := strings.SplitAfter(base, `\\`)\r\n\tfmt.Println(lines[len(lines)-1])\r\n}\r\n```\r\n\r\n\r\n* What did you expect to see?\r\n\r\nThe expected behaviour should be consistent with the [documentation examples](https://golang.org/pkg/path/#Base); `path.Base()` should return the trailing path element.\r\n\r\n* What did you see instead?\r\n\r\n`path.Base()` returns the full path instead of the final path element.\r\n\r\n",
	"user": {
		"login": "mynameismevin",
		"id": 7537841,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2016-03-11T01:37:10Z",
	"created_at": "2016-03-11T01:23:48Z",
	"updated_at": "2016-03-11T01:59:19Z"
}
