{
	"id": 245828791,
	"body": "Many says non-English words are rarely used in practical coding even among people whose native language are not English. That's mainly right. However, please let me give a special \"rare\" case, for your information.\r\n\r\nI work in the online game industry in China, and just like other industries our code are mainly written by programmers. but when it comes to the whole product, it contains resources besides the code. One important portion of online game resources consists of numerical and string values, which plays a vital role within the whole experience of gameplay. One product could contain thousands of such values, and they are provided, with their STRUCTURE, by game designers, not programmers. The programmers should follow the provided structure to use the values. When loaded these data from a file or database, the code could access a certain value by a static (Avatar.HP) or dynamic (Avatar[\"HP\"]) manner. For the purpose of performance and static check, the static way is often preferred, and here comes the problem: the type names and field names, as part of the data structure, are created by the game designers, and they are often not systematically trained and adapted to the programmers' convention. They just compose the values in a spreadsheet editor and tools alike, define type names and field names by sheet names and header of the table, and of course they prefer using native words to describe the logic for clarity, especially for fancied concepts that are often difficult to translate, which are not rare at all in games. Their works are then converted by scripts into a form capable for loading by the program, but the identifiers they defined should anyway be preserved, i.e. when a static manner is adopted, it must involve code generation, and nobody wish to involve manual translation in this step, or to keep a translation dictionary up to date with the revisions of the designers' works . And ... now you will understand what I want to express. With initial characters of unicode category \"Lo\" not treated as exported, The Go language makes this working process impossible, and forces us either to sacrafice the performance and type safety by uisng the dynamic manner, or to force the designers to use English that they are not accustomed to, or to lose the clarity of logic encapsulation provided by the package system. There's no such obstacle in other programming languages.",
	"user": {
		"login": "lych77",
		"id": 3362775,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-09T06:17:39Z",
	"updated_at": "2016-09-09T06:17:39Z"
}
