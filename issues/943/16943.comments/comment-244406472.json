{
	"id": 244406472,
	"body": "I was also thinking about ways to do a more concise job of recording line\nnumber information.  SSA gives line numbers to all instructions and they\nget recorded faithfully in runtime data structures.  In reality, many of\nthose line numbers don't really correspond to a source operation, like\nspills and restores.  We could choose line numbers for those within some\nacceptable range (anywhere between def and use, say).  That flexibility\nlets us choose the line numbers so that the runtime data structure encodes\nmore compactly.\nMaybe a simple first step is to not specify line numbers for some SSA ops\nthat don't have an obvious correspondence to source ops.  Then do a pass at\nthe end that assigns those ops a line numbers equal to the line number of\nthe nearest line-number-specified instruction.\n\nOn Fri, Sep 2, 2016 at 7:55 AM, dr2chase \u003cnotifications@github.com\u003e wrote:\n\n\u003e Something to consider in optimizer-land might be to notice which\n\u003e instruction \"commits\" a line, and then arrange that all the preceding\n\u003e instructions match it, up to the previous commit. This fails for lines with\n\u003e more than one store, but such is life -- plenty of lines become visible\n\u003e with a single store. Single-stepping in a debugger will be slightly less\n\u003e confusing.\n\u003e\n\u003e â€”\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/16943#issuecomment-244397914\u003e, or mute\n\u003e the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AGkgIMPbjo8vBaF473p4FPBeNpaacPIKks5qmDjbgaJpZM4JyJl9\u003e\n\u003e .\n\u003e\n",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-02T15:24:31Z",
	"updated_at": "2016-09-02T15:24:31Z"
}
