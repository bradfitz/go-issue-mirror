{
	"id": 72532645,
	"body": "I'm not sure the gain is as large as you imply with your 25% number. If the\r\nwrite barrier is off then the compiler will eventually emit a normal path\r\nof a load of gcphase, a compare, and a branch.  Since the branch is\r\npredictable any reasonable OOO machine will do a pretty good job hiding the\r\nsequence. It will be great when we get to a point where these types of\r\nperformance optimizations are at the top of our list for increasing\r\nperformance.\r\n\r\nOn Mon, Feb 2, 2015 at 12:23 PM, Dmitry Vyukov \u003cnotifications@github.com\u003e\r\nwrote:\r\n\r\n\u003e I've calculated an optimistic approximation of the potential win by\r\n\u003e counting runtime.writebarrier calls right after runtime.newobject calls w/o\r\n\u003e any intervening calls in godoc binary.\r\n\u003e Total number of writebarrier calls = 9732\r\n\u003e writebarrier calls right after newobject = 2495\r\n\u003e = ~25%\r\n\u003e\r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub\r\n\u003e \u003chttps://github.com/golang/go/issues/9755#issuecomment-72497783\u003e.\r\n\u003e",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-02T20:37:02Z",
	"updated_at": "2015-02-02T20:37:02Z"
}
