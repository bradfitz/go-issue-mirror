{
	"id": 251853985,
	"body": "@ianlancetaylor I had thought about something like that.  It's better than nothing, but still makes maps second-class compared to slices and `append`: the reflective version of `Insert` that you wrote is much less type-safe than `append` (and requires a type-assertion), and an equivalent type-safe builtin would have an effective \"type\" that can't be described using the Go type system (alternating varargs).\r\n\r\nI suppose the compiler could optimize calls to it, but to do that in the near future with a fairly simple compiler like `gc` it seems like we would need a well-known `Insert` implementation that it could special-case.\r\n\r\nPerhaps a builtin `merge` function along the lines of the function @jimmyfrasche provided would provide a better balance of spec complexity, efficiency, and type-safety.\r\n\r\nThe change to the spec would be smaller than my initial proposal; something along the lines of:\r\n\r\n----\r\n\r\n**Merging maps**\r\n\r\nThe built-in variadic function `merge` combines the keys and elements of zero or more maps `x` to `m` of type `M`, which must be a map type, and returns the resulting map, also of type `M`.  The values `x` are passed to a parameter of type `...M` and the respective parameter passing rules apply.\r\n\r\n```go\r\nmerge(m M, x ...M) M\r\n```\r\n\r\nIf `m` is nil, `merge` allocates a new map to merge into. Otherwise, `merge` re-uses the passed-in map `m`.  For each `x` in order, `merge` append inserts the keys and values of `x` into `m`, replacing any existing element value for the key.\r\n\r\n```go\r\nm0 := map[int]int{0: 0}\r\nm1 := merge(m0, map[int]int{1: 2})                // add new elements     m1 == map[int]int{0: 0, 1: 2}\r\nm2 := merge(m1, map[int]int{0: 3, 4: 5})          // add and replace multiple elements    m2 == []int{0: 3, 1: 2, 4: 5}\r\nm3 := merge(nil, m2)                              // make a copy of m2 as a new map value\r\n```\r\n",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-06T02:44:51Z",
	"updated_at": "2016-10-06T02:44:51Z"
}
