{
	"id": 251819956,
	"body": "What value would this have outside of using `append` on maps? \r\n\r\nThe only things I can think of looking at the proposed semantics would be:\r\n\r\nRewriting a map[K]V to a []struct{K; V}, or vice versa, as an append one-liner. \r\n\r\nMaking it easier to use a function that takes a ...struct{K; V} with K hashable.\r\n\r\nIt can kind of be annoying to update a map that may be nil,  but I don't find any of these cases particularly compelling.\r\n\r\nI'm willing to accept that I'm missing something.\r\n\r\nOtherwise, a merge built in would seem more sensible, but, unlike append, it's easy to write for a fixed pair of key, value types: https://play.golang.org/p/t3HotPePo9",
	"user": {
		"login": "jimmyfrasche",
		"id": 375553,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-05T22:38:10Z",
	"updated_at": "2016-10-05T22:38:10Z"
}
