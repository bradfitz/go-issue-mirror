{
	"id": 164650404,
	"number": 16309,
	"state": "open",
	"title": "cmd/cgo: C.malloc does not support comma error return values",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n```\r\n$ go version\r\ngo version go1.6.2 windows/amd64\r\n```\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n```\r\n$ go env\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOEXE=.exe\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\Administrator\\Go\r\nset GORACE=\r\nset GOROOT=C:\\go\r\nset GOTOOLDIR=C:\\go\\pkg\\tool\\windows_amd64\r\nset GO15VENDOREXPERIMENT=1\r\nset CC=gcc\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\n```\r\n\r\n3. What did you do?\r\n\r\nI ran `cgom.go` whose source is at https://play.golang.org/p/lFkVjkjn5W\r\n\r\n4. What did you expect to see?\r\n\r\nIn cgo manual (https://golang.org/cmd/cgo/), the manual states that\r\n\r\n\u003e Any C function (even void functions) may be called in a multiple assignment context to retrieve both the return value (if any) and the C errno variable as an error (use _ to skip the result value if the function returns void). For example:\r\n\r\nI think C.malloc is C function. And Any C function may be called in a multiple assignemt context. Therefore, C.malloc should be called in a multiple assignment.\r\n\r\nThe idea was correct only if compilation would be successful.\r\n\r\n5. What did you see instead?\r\n\r\n```\r\n$ go run cgom.go\r\n# command-line-arguments\r\n.\\cgom.go:22:12: no two-result form for C.malloc\r\n```\r\n\r\nUnfortunately, reality is not. C.malloc cannot be used in that way, even though free function can be used in that way.\r\n\r\nC.malloc function seems not to be part of a set of C functions, because contraposition of \"Any C function may be called in a multiple assignment context\" is \"if a function may not be called in a multiple context, then the function is not C function\".\r\n\r\nThis contradicts usual idea that malloc should be C function. Go override some of special functions as malloc, etc. But these functions do not act like C functions.\r\n",
	"user": {
		"login": "catalase",
		"id": 13768284,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"created_at": "2016-07-09T05:12:28Z",
	"updated_at": "2016-08-16T22:40:45Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
