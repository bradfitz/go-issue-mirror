{
	"id": 244564571,
	"body": "Please explain the rationale for excepting C.malloc from the documented CGO multi-valued return behavior. `errno`==`ENOMEM` is part of how `malloc(3)` is documented to signal failure. The multi-valued return makes the Go idiom of checking for `err != nil` possible:\r\n\r\n\u003e cptr, err := C.malloc(C.sizeof_struct_foo)\r\n\u003e if err != nil {\r\n\u003e\u003ereturn nil, fmt.Errorf(\"allocating memory exempt from GC: %v\", err)\r\n\r\n\u003e }\r\n\u003e // ... use cptr\r\n\r\nIf there is an overriding concern, I don't yet understand it. If possible, please explain it.",
	"user": {
		"login": "sh4m1l65",
		"id": 16505305,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-03T19:11:23Z",
	"updated_at": "2016-09-03T19:14:59Z"
}
