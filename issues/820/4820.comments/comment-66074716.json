{
	"id": 66074716,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eGosched has 2 \"useful\" applications:\n\nThe first is \"waiting with Gosched\":\nvar x int32\ngo func() {\n  //...\n  atomic.StoreInt32(\u0026x, 1)\n}()\nfor atomic.LoadInt32(\u0026x) == 0 {\n  runtime.Gosched()\n}\n\nAnd the second is:\ngo func() {\n  for { // calculate loop\n    //...\n    runtime.Gosched()\n  }\n}()\ngo func() {\n  for { // display loop\n    //...\n    runtime.Gosched()\n  }\n}()\n\nBoth can be more complex in real life. And both are broken if Gosched() does not provide\nforward progress guarantees (schedules the same goroutine again and again).\n\nIf we do not want to support such patterns, then we should make Gosched() no-op in the\nscheduler. It will simplify things considerably.\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-02-15T17:54:36Z",
	"updated_at": "2014-12-08T10:25:36Z"
}
