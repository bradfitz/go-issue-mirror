{
	"id": 97540507,
	"body": "Here is my version:\r\n\r\n    // tSpecialTagEnd is the context transition function for raw text and RCDATA\r\n    // element states.\r\n    func tSpecialTagEnd(c context, s []byte) (context, int) {\r\n        if c.element != elementNone {\r\n    \t\tif i := indexTagEnd(s, specialTagEndMarkers[c.element]); i != -1 {\r\n\t\t\t    return context{}, i\r\n\t\t    }\r\n\t    }\r\n\t    return c, len(s)\r\n    }\r\n\r\n    // indexTagEnd finds the index of a special tag end in a case insensitive way, or returns -1\r\n    func indexTagEnd(s []byte, tag []byte) int {\r\n    \tpfx := tag[:2]\r\n\t    res := 0\r\n\t    for len(s) \u003e 0 {\r\n\t\t    // Try to find the tag end prefix first\r\n\t\t    i := bytes.Index(s, pfx)\r\n\t\t    if i == -1 {\r\n    \t\t\treturn i\r\n    \t\t}\r\n    \t\t// Try to match the actual tag if there is still space for it\r\n    \t\tif i+len(tag) \u003c= len(s) \u0026\u0026 bytes.EqualFold(tag, s[i:i+len(tag)]) {\r\n    \t\t\treturn res + i\r\n    \t\t}\r\n    \t\ts = s[i+2:]\r\n    \t\tres += i + 2\r\n    \t}\r\n    \treturn -1\r\n    }\r\n\r\nI'm preparing a CL.\r\n",
	"user": {
		"login": "dspezia",
		"id": 652458,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-29T18:57:32Z",
	"updated_at": "2015-04-29T18:57:32Z"
}
