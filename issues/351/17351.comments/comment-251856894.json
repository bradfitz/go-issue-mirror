{
	"id": 251856894,
	"body": "Well, the logic wouldn't be \"unroll only if all are valid\", the logic would be \"always unroll grouped cases\". Then the compile can fail/succeed as it would have if the author had written the cases individually.\r\n\r\nI can see how the use cases may be pretty limited, but it would make writing functions that take \"slices of any type that satisfies an interface\" (disguised as interface{}) much nicer.\r\n\r\nI stumbled across the behavior when writing some code that takes slices of one of several types and stores each of those into a database. But each type has a slightly different way of being stored, and objects that are not one of those types should not get stored at all.\r\n\r\nEDIT: And it's okay if making a case body valid for 100 different types is difficult. Then you don't have a situation where every type gets handled the same way. You can even have groups:\r\n```switch {  \r\n    case Type1, Type2, Type3:  \r\n        DoStuff(v)  \r\n    case Type4, Type5, Type6:  \r\n        DoOtherStuff(v)  \r\n}```",
	"user": {
		"login": "ragnese",
		"id": 7927565,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-06T03:10:43Z",
	"updated_at": "2016-10-06T03:14:12Z"
}
