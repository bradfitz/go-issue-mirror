{
	"id": 251850756,
	"body": "No, of course not! Because it's also invalid Go if you split the case up: https://play.golang.org/p/JIntQ3pis3\r\n\r\nMy point is that in my example, splitting the case works when they have identical bodies and logically that implies that it should work when the cases are lumped together. I can't think of a case (pun intended) where unrolling the grouped case would somehow be worse, unless we're talking about some low level optimization trick that the compiler can do. If one of your cases wouldn't work on the body, then of course it shouldn't compile. If all of your cases *would* work on the body, then it should compile!\r\n\r\nWhat I'm arguing for is that the compiler should automatically unroll/copy+paste the grouped cases for us and then compile *that*. \r\n\r\nThe compiler doing something like that is not unheard of, either. Take, for example, automatic pointer dereferencing- that's basically the compiler inserting a (\\*) for us.",
	"user": {
		"login": "ragnese",
		"id": 7927565,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-06T02:17:46Z",
	"updated_at": "2016-10-06T02:34:42Z"
}
