{
	"id": 66090248,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eHere's another (simpler) example of diverging initialization order:\n\n\u003ca href=\"http://play.golang.org/p/aYAWMqmJZU\"\u003ehttp://play.golang.org/p/aYAWMqmJZU\u003c/a\u003e\n\nThe f() calls are simply to illustrate the initialization order - they do not (should\nnot) affect the order in this case. All three front-ends produce different (!) results:\n\n1) gc produces: cbda\n2) gccgo produces: abcd\n3) go/types produces: bcda\n\nd depends on b and c so d comes after b, c. b and c are independent, so they appear in\nsource order, leading to the subsequence bcd for 2) and 3). For 1) the ordering of b and\nc is as they appear \"in the source\" of the expression, while for 2) and 3) the ordering\nis as b and c appear \"in the source\" of their declarations. Arguably, the interpretation\nchosen by 2), 3) is more sensible (e.g. independent of different orderings of the same\nvariables in different expressions); and 1) is incorrect.\n\nd appears before a in the source, leading to interpretation 3), but a appears before b\nand c in the source, leading to interpretation 2) (and a is independent of b, c, d).\nBoth 2) and 3) seem valid interpretations of the spec.\n\nSee also \u003ca href=\"https://golang.org/issue/7137\"\u003eissue #7137\u003c/a\u003e (related, but not the same).\u003c/pre\u003e\n\n\n\n_Status changed to **Accepted**._",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-11T23:37:35Z",
	"updated_at": "2014-12-08T10:39:40Z"
}
