{
	"id": 134462019,
	"body": "What if support was provided for both `vendor/` and `_vendor/`? \r\n\r\nSince there seems to be use cases for both could support be built for both?  This way anyone can choose how they would like to treat testing vendored dependencies for a specific project.  This might mean that the future `GO15VENDOREXPERIMENT` functionality would work with both `_vendor/` and `vendor/`.\r\n\r\nIf `vendor/` is present `go test ./...` will test vendored packages and if `_vendor/` is present `go test ./...` will skip over third party vendored packages.   If both `_vendor/` and `vendor/` is present then an error is thrown.  Perhaps a command could also be included that makes a go project's vendored packages testable by renaming `_vendor/` to `vendor/` (not that renaming it by hand is difficult, just a thought for automation purposes). \r\n\r\nI think allowing both `vendor/` and `_vendor/` would be a simple solution that leverages established go conventions.  Giving options to different projects might be useful if the value gained from testing third party vendored packages varies from project to project.\r\n\r\nWhile I say \"simple\" above, I do understand giving this kind of flexibility to users may have unintended consequences.  Go, being known as very opinionated, usually seems to have one way of solving a particular problem.  Maybe allowing `vendor/` and `_vendor/` is too much flexibility, or maybe it is just the right amount?",
	"user": {
		"login": "jackspirou",
		"id": 5687406,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-25T03:14:31Z",
	"updated_at": "2015-08-25T03:56:22Z"
}
