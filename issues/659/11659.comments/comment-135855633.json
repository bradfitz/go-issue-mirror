{
	"id": 135855633,
	"body": "This isn't **just** about testing. Here are my thoughts to date....\r\n\r\nWhen `vendor/` is the name of the vendoring directory and a package spec of `./...` matches everything in that directory as well...\r\n\r\nThe issues I have with this are:\r\n\r\n1. Most people I've talked to don't expect the package spec `./...` to match stuff in `vendor/`. This indicates to me that it's counter intuitive. I will likely have to do a lot more education about packages / paths / etc. This isn't really a bad thing, but most people I talk to are already confused and/or frustrated by the way `$GOPATH` works. I don't want to add to that confusion.\r\n1. It's impossible to test **only** the packages that **I'm** writing with a repo level `./...`. I care about testing the packages I'm writing more regularly than testing the stuff I've vendored. I'll test the stuff I vendor when I originally vendor it and/or when I upgrade the vendored deps. IMO/E more people follow this workflow than the test everything all the time workflow. I'm worried that this will end up leading people to encode `test` Makefile or similar targets to avoid having to remember / type the `go test $(go list ./... | grep -v vendor/)` stuff. I thought we wanted to avoid that?\r\n1. Additionally some package's tests require additional setup which I may not have on my local machine / environment. \r\n1. I will require additional meta data about what to install when someone pushes code to me. Right now I can assume that `go install ./...` will install all of the packages in the pushed repo. Godeps handles this case just fine by recording the package spec(s) used during `godep save`, but I can tell you most people just use `./...`\r\n1. Similarly for projects with multiple main packages for commands, it will require additional documentation where it's now possible to simply say `go get github.com/my/proj/...`. This is probably pretty minor though.\r\n1. As per @davecheney's comment: Not everyone is using Go 1.5. `vendor/` will cause issues for users of Go versions \u003c 1.5.\r\n\r\nSome, but not all of the above stuff can be handled by vendoring tools. IMO if we're going to cause this much disruption then Go itself should provide a vendoring tool such as govendor/godeps/something new/whatever as part of the **standard** tooling (i.e. `go vendor`).",
	"user": {
		"login": "freeformz",
		"id": 103,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-28T18:34:43Z",
	"updated_at": "2015-08-28T18:39:05Z"
}
