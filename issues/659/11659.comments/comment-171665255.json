{
	"id": 171665255,
	"body": "I think there are two cases:\n\n1. A package in a vendor tree that is actually used (directly or\nindirectly) by the code outside the vendor tree. In this case I think you\nwould want to test the package, just as you test all your other\ndependencies. If code you depend on is broken, you want to find out in the\nmost precise test possible, not wait until a test of the main program fails\nmysteriously.\n\n2. A package in a vendor tree that is not actually used (directly or\nindirectly) by the code outside the vendor tree. In this case, obviously no\none cares and the test need not run. But in this case I don't understand\nwhy tools are bringing that package into the vendor tree in the first\nplace. I would argue that, for many reasons, dead (unused) code should not\nbe copied into a vendor tree. Code that is in your vendor tree has to be\nmaintained, updated, and so on. If it's not needed, it should just be\nomitted.\n\nI think it's a mistake to skip the test in (1). And I think (2) indicates a\nproblem in the vendoring process.\n\nThe counter-argument to this is that you can't omit individual packages\nwhen you're using git submodules. But when you're using git submodules I\nthink you're tying yourself to the target repository quite a bit more and\nso it may still be appropriate to test the entire thing.\n",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-14T15:00:49Z",
	"updated_at": "2016-01-14T15:00:49Z"
}
