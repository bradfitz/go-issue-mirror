{
	"id": 239870777,
	"body": "I see.  While developing the loader package, I tried a similar approach, modifying go/types to accept source files in the cgo dialect, but gri convinced me that it was feature creep and that cgo should be treated as a black box.  Here are some of the problems that came up:\r\n\r\n1. The type checker rejects qualified identifiers `C.f` where f is unexported.  It would have to make an exception for package \"C\".\r\n2. Package \"C\" appears different to every package that imports it.  This breaks an invariant of the importer interface.  (Though vendoring may have since forged a path here.)\r\n3. In cgo, you can call a function `C.f` as if it was overloaded with two different types, for example, `x := C.f()` and `x, err := C.f()`.  This requires a hack to the type checking rule for function calls, and results in ast.AssignStmts whose types break the spec's assignability rules, confusing clients.\r\n\r\nAlso, we should consider that future extensions to cgo might not be possible to support at all in go/types.",
	"user": {
		"login": "alandonovan",
		"id": 8433140,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-15T17:37:45Z",
	"updated_at": "2016-08-15T17:37:45Z"
}
