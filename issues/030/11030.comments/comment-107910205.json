{
	"id": 107910205,
	"body": "Thanks for the analysis, which looks correct to me. @dsnet, can you say how you generated the input for that test? I think it'd be a stronger test case if the decompressed string isn't empty but is instead something like \"IJK\".\r\n\r\nI can't remember exactly how flate works, but @mdempsky also recently fixed an infinite loop bug in https://go-review.googlesource.com/#/c/8893/\r\nI don't think that skipping the max == 0 check for the HDIST tree will re-open that particular bug, but does skipping that open us up to another infinite loop bug, or will we then panic on other garbage input somehow?\r\n\r\nAlso, I think that skipping the max ==0 check means that the HDIST table doesn't pass the sanity check (change the \"const sanity = false\" line to enable sanity checks).\r\n\r\nWhat does the C zlib library do? Is it obvious in its source code that it special cases the HDIST tree?\r\n\r\n@dsnet, @mdempsky: I'm happy to poke around some more at this, but I'll have to remember once again how flate's Huffman tables work. If you're already up to speed and are happy to poke around yourself, that will save me some time. Thanks.\r\n\r\nNote to myself (or whoever wants to propose a patch): any change to inflate.go's huffmanDecoder.init method should probably also make the same change to gen.go's copy, and the re-run \"go generate\" to check that its output doesn't change. Strictly speaking, I don't expect patching gen.go to be necessary, but it'd be nice to keep the two implementations in sync.",
	"user": {
		"login": "nigeltao",
		"id": 8565232,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-02T10:23:29Z",
	"updated_at": "2015-06-02T10:23:29Z"
}
