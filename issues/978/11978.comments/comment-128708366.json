{
	"id": 128708366,
	"body": "\u003e Right; you need to return it to get a bad connection to be discarded from the pool.\r\n\r\nOkay, I wish it didn't work this way, but I understand the now.\r\n\r\n\u003e Fine, maybe, but how would you discard bad connections from the pool in whatever it is you're suggesting?\r\n\r\nThe bad connection would have been caused by a previous query. The connection is marked as bad then. I would suggest checking for connection health on releasing the connection back to the pool instead of on next attempted use. This is what pgx's native connection pool does (when not using database/sql). Though I suppose that would require changing the database/sql driver interface, so that is not possible for Go 1.x.\r\n\r\n\u003e Last time this came up on pq's issue tracker, I argued that pq's current behavior is broken, but lost that argument.\r\n\r\nI've re-examined my test app and pgx, and determined I was incorrect in my assertion that it was vulnerable to this issue. However, pq definitely is. Perhaps this test [app](https://github.com/jackc/go_database_sql_retry_bug) could be useful in persuading pq's maintainers.",
	"user": {
		"login": "jackc",
		"id": 94130,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-07T14:02:19Z",
	"updated_at": "2015-08-07T14:02:19Z"
}
