{
	"id": 172425823,
	"body": "I think I've found the cause of our issues. The G that runs the GC background mark worker is sometimes running without an M. When that goroutine calls `runtime.acquirem`, it's unable to [dereference `_g_.m`](https://github.com/golang/go/blob/go1.6beta2/src/runtime/runtime1.go#L460), which leads to a SIGSEGV at address 0xd8 when running the following instructions:\r\n\r\n```\r\nFS MOVQ FS:0xfffffff8, AX\r\nMOVQ 0x30(AX), CX\r\nMOVL 0xd8(CX), R8\r\n```\r\n\r\nThe `ctx` argument to sigtrampgo doesn't point right to a `*runtime.sigcontext` - it points to 40 bytes before a `*runtime.sigcontext`, so all of the field names were wrong. Adding 0x28 to the pointer results in much more believable register contents, such as 1) an instruction pointer that points to an instruction in the text segment, and 2) a stack pointer that points to an address between stack.lo and stack.hi:\r\n\r\n#### Crash 1452891329, built on darwin/amd64 to run on linux/amd64 at go version `devel +505fa7b Tue Jan 12 17:31:01 2016 +0000`\r\n```\r\n$ gdb {program,core}-1452891329\r\n[snip]\r\n(gdb) p/x (('runtime.g'*)$rax).stack.lo\r\n$1 = 0xc82024c000\r\n(gdb) p/x (('runtime.g'*)$rax).stack.hi\r\n$2 = 0xc82024c7e0\r\n(gdb) p/x (('runtime.sigcontext'*)(ctx+0x28)).rsp\r\n$3 = 0xc82024c740\r\n(gdb) p/x (('runtime.sigcontext'*)(ctx+0x28)).rip\r\n$4 = 0x41f9f8\r\n(gdb) info symbol (('runtime.sigcontext'*)(ctx+0x28)).rip\r\nruntime.gcBgMarkWorker + 376 in section .text of /path/to/program-1452891329\r\n(gdb) p/x (('runtime.sigcontext'*)(ctx+0x28)).rcx\r\n$5 = 0x0\r\n\r\n$ go tool objdump /path/to/program-1452891329 | grep -C 3 '0x41f9f8'\r\n\tmgc.go:1469\t0x41f9ea\tc3\t\t\tRET\r\n\tmgc.go:1390\t0x41f9eb\t64488b0425f8ffffff\tFS MOVQ FS:0xfffffff8, AX\r\n\tmgc.go:1390\t0x41f9f4\t488b4830\t\tMOVQ 0x30(AX), CX\r\n\tmgc.go:1390\t0x41f9f8\t448b81d8000000\t\tMOVL 0xd8(CX), R8\r\n\tmgc.go:1390\t0x41f9ff\t41ffc0\t\t\tINCL R8\r\n\tmgc.go:1390\t0x41fa02\t448981d8000000\t\tMOVL R8, 0xd8(CX)\r\n\tmgc.go:1390\t0x41fa09\t4c8b4030\t\tMOVQ 0x30(AX), R8\r\n```\r\n\r\n#### Crash 1453060415, built on linux/amd64 to run on linux/amd64 at go version `go1.6beta2`\r\n```\r\n$ gdb {canal,core}-1453060415\r\n[snip]\r\n(gdb) p/x (('runtime.g'*)$rax).stack.lo\r\n$1 = 0xc8202a7800\r\n(gdb) p/x (('runtime.g'*)$rax).stack.hi\r\n$2 = 0xc8202a7fe0\r\n(gdb) p/x (('runtime.sigcontext'*)(ctx+0x28)).rsp\r\n$3 = 0xc8202a7f20\r\n(gdb) p/x (('runtime.sigcontext'*)(ctx+0x28)).rip\r\n$4 = 0x434514\r\n(gdb) info symbol (('runtime.sigcontext'*)(ctx+0x28)).rip\r\nruntime.gopark + 36 in section .text of /path/to/program-1453060415\r\n(gdb) p/x (('runtime.sigcontext'*)(ctx+0x28)).rax\r\n$5 = 0x0\r\n\r\n$ go tool objdump /path/to/program-1453060415 | grep -C 3 '0x434514'\r\n\tproc.go:248\t0x434503\t4883ec20\t\tSUBQ $0x20, SP\r\n\tproc.go:249\t0x434507\t64488b0c25f8ffffff\tFS MOVQ FS:0xfffffff8, CX\r\n\tproc.go:249\t0x434510\t488b4130\t\tMOVQ 0x30(CX), AX\r\n\tproc.go:249\t0x434514\t8ba8d8000000\t\tMOVL 0xd8(AX), BP\r\n\tproc.go:249\t0x43451a\tffc5\t\t\tINCL BP\r\n\tproc.go:249\t0x43451c\t89a8d8000000\t\tMOVL BP, 0xd8(AX)\r\n\tproc.go:249\t0x434522\t488b6930\t\tMOVQ 0x30(CX), BP\r\n```\r\n\r\nSo to summarize, our program is crashing because a GC background mark worker is running with `g.m` set to nil. This causes a segfault, which causes the signal handler to run, which in turn encounters a segfault when it tries to dereference `g.m`, resulting in an immediate and unceremonious crash of the program.\r\n",
	"user": {
		"login": "rhysh",
		"id": 230685,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-18T04:56:41Z",
	"updated_at": "2016-01-18T04:56:41Z"
}
