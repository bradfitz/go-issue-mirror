{
	"id": 66053553,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eHere's a slightly modified case (removed *'s):\n\npackage main\n\ntype T int\nfunc (t T) Meth()\nvar t T\n\ntype P T\nvar p P\n\nfunc main() {\n       t.Meth()\n       p.Meth()\n}\n\n6g issue1324.go \nissue1324.go:12: p.Meth undefined (type P has no field or method Meth)\ngccgo issue1324.go \nissue1324.go:12:9: error: reference to undefined field or method ‘Meth’\n\nThis is consistent with the spec: \u003ca href=\"http://golang.org/doc/go_spec.html#Type_declarations\"\u003ehttp://golang.org/doc/go_spec.html#Type_declarations\u003c/a\u003e\n\na) \"The declared type does not inherit any methods bound to the existing type, but the\nmethod set of an interface type or of elements of a composite type remains unchanged\"\n\nWe don't have an interface type nor a composite type in this case.\n\nIn the original example we have\n\ntype P *T\n\nand P is a composite type according to \u003ca href=\"http://golang.org/doc/go_spec.html#Types\"\u003ehttp://golang.org/doc/go_spec.html#Types\u003c/a\u003e .\n\nb) \"The method set of the corresponding pointer type *T is the set of all methods with\nreceiver *T or T\" according to the spec (same section).\n\nThus in this case, the method set of *T is the method Meth, and it remains unchanged\naccording to a).\n\nSo I am led to believe that the method set of P contains the method Meth. That said, one\nmight argue that a) is not correct (and perhaps shouldn't allow pointer types).\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-12-09T19:36:30Z",
	"updated_at": "2014-12-08T10:07:48Z"
}
