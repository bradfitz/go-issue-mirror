{
	"id": 66078364,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11:\n\n\u003cpre\u003eI agree that Go 1.1 is within spec, but the sad part is that he could previously write a\nCPU-consuming loop with a periodic timer interrupt using higher-level Go constructs (a\ntimer.Ticker + its channel + select), whereas now he has to write his loop as checking\ntime.Now() and doing his own time math.  Or cheating and using somewhat-gross\nruntime.Gosched.\n\nI doubt many people realize that a time.Ticker is implemented with a goroutine being\nscheduled in the future.\n\nThat's why I proposed our implementation (still within spec) could cause a Gosched in\nthe nbselect every N iterations and/or having had so much time elapsed since the last\n\"default\" case, thus at least allowing a pending timer send to schedule and future\nselects to not hit the default case.\n\nI'm not saying this is a Go 1.1 issue, but it's an issue.  I'm not sure it's \"Working as\nIntended\" as much as it is a dup of some other existing scheduler issue (if one is\nalready filed).\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-04-22T06:35:44Z",
	"updated_at": "2014-12-08T10:28:44Z"
}
