{
	"id": 66078359,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003eActually I don't agree that blocking is the key issue here. The key issues is what\nguarantees, if any, does Go provide when GOMAXPROCS=1, that forward progress will be\nmade on all Goroutines.\n\nHaving said that, responding to you comment above:\n\n\"select\" is certainly a blocking statement most of the time. From the spec. \"if there is\nno default case, the statement blocks until one of the communications can complete\". The\nword \"blocks\" is used in two other places.\n\nDo you agree that if there was no \"default\" case \"select\" is a blocking statement?\n\nIf so, then the question is does adding a \"default\" turn a blocking \"select\" into a non\nblocking \"select\"? The spec really doesn't answer that question clearly. My belief is\nthat would be very inconsistent and confusing to be blocking sometimes and non-blocking\nother times. Even if it was the spec would have so say select is blocking since it would\nblock sometimes.\n\nI understand that the current scheduler is not preemptive and therefore context\nswitching has to be arranged at certain points in the code flow. I also understand that\nat some point the goal might be to eliminate GOMAXPROCS.\u003c/pre\u003e",
	"user": {
		"login": "tildeleb",
		"id": 834628,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-04-21T19:19:11Z",
	"updated_at": "2014-12-08T10:28:44Z"
}
