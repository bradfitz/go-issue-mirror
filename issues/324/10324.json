{
	"id": 66039854,
	"number": 10324,
	"state": "open",
	"title": "cmd/compile: make \"byte offset on line\" error position info available",
	"body": "When a Go source file has an error,  only the line number is reported by the go compiler. So for example, with:\r\n```\r\npackage other\r\nimport \"fmt\"\r\nfunc OtherHello2() {\r\n\tfmtxxx.Printf(\"hello, world from other\\n\")\r\n}\r\n```\r\nthe Go compiler error message:\r\n`other\\blah.go:4: undefined: fmtxxx`\r\nThis is okay for command line usage, but when Go is invoked by editors and IDEs, it would be an improvement if a full source range was reported - that is, the start offset (line+column) of the error, and the end offset (line+column).\r\n\r\nAs an example, here's the error output from the Rust compiler for a similar error:\r\n```\r\nsrc\\main.rs:8:5: 8:15 error: macro undefined: 'printlnxxx!'\r\nsrc\\main.rs:8     printlnxxx!(\"Hello world\");\r\n                  ^~~~~~~~~~\r\n```\r\nThe Rust compiler goes even further and prints the range in the command-line UI too. That's not required though, what I'm asking is just the extra offset info reported in the first line. \"8:5\" is the start of the error range and \"8:15\" the end of the range. Reporting the error location as an absolute character offset (as opposed to line+column), would also work fine.\r\n\r\nWith this, IDE's can reported errors as squiggly lines in a source editor. Example, see how \"xxx\" is underlined:\r\n\r\n![sample_basic thumb](https://cloud.githubusercontent.com/assets/4324232/6976292/8f01c25c-d99f-11e4-9b35-db9d380d2bd3.png)\r\nAs a sidenote, https://github.com/GoClipse/goclipse in particular already supports this functionality, but it needs the compiler to report the full source ranges.",
	"user": {
		"login": "bruno-medeiros",
		"id": 4324232,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "LongTerm"
		}
	],
	"comments": 19,
	"created_at": "2015-04-03T00:27:29Z",
	"updated_at": "2016-05-04T14:56:42Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
