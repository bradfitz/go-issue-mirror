{
	"id": 66078440,
	"body": "\u003ca id=\"c20\"\u003e\u003c/a\u003eComment 20 by **hb@hannobraun.de**:\n\n\u003cpre\u003eWe have new information:\nFor fear that our production setup could somehow swallow the error messages, my\ncolleague ran the process in a terminal and managed to reproduce a crash.\n\nIn the terminal, it looks like the process just exits:\n- The usual process output just stops. There is no output that indicates a crash.\n- The process return code is 0.\n\nHowever, a core dump is produced. It clearly states that the reason is a segmentation\nfault.\nMy colleague also told me that he saw \"Out of socket memory\" errors in dmesg which we\ndidn't see for the previous crash (the pprof/nil pointer one which I don't believe has\nanything to do with the originally reported bug).\n\nIt seems really odd to me that the process crashes with a segmentation fault, but the\nreturn code is 0. However, I don't know a lot about signal handling or the specifics of\nhow Go handles signals. Can anyone make sense of this?\n\nTo summarize what has become a long comment thread:\n- We're seeing frequent crashes of our Go process due to segmentation fault.\n- No error output is produced (neither when piping output to log files nor when running\nthe process in a terminal)\n- The process exits with return code 0\n- The stack trace I posted in comment #7 seems completely unrelated to this\n\nNext we're going to deploy a version that has all profiling disabled to see, if this\nchanges the situation.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-05-03T09:21:02Z",
	"updated_at": "2014-12-08T10:28:49Z"
}
