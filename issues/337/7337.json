{
	"id": 51286557,
	"number": 7337,
	"state": "closed",
	"title": "encoding/json: make \"json\" tag user-settable",
	"body": "by **beatgammit**:\n\n\u003cpre\u003eI have a working example of what I'd like to achieve here:\n\u003ca href=\"https://github.com/beatgammit/freddy\"\u003ehttps://github.com/beatgammit/freddy\u003c/a\u003e. TL;DR: I added UnmarshalTag(b []byte, v\ninterface{}, tags ...string) and MarshalTag(v interface{}, tags ...string).\n\nThe problem I'm trying to solve is using the same struct for multiple interfaces. I'm\nusing JSON in my database and I want all fields stored there, but I don't want to expose\nall fields via my API. For example:\n\n    type User struct {\n        Username string `json:\u0026quot;username\u0026quot;`\n        // never exposed to users, but needs to be stored in the db\n        Password string `db:\u0026quot;password\u0026quot; json:\u0026quot;-\u0026quot;`\n        Logins int `admin:\u0026quot;logins\u0026quot; db:\u0026quot;logins\u0026quot; json:\u0026quot;-\u0026quot;`\n    }\n\nThen, when I marshal data for the API, I just do:\n\n    tags := []string{\u0026quot;json\u0026quot;} // or have \u0026quot;json\u0026quot; always work\n    if isAdmin {\n        tags = append(tags, \u0026quot;admin\u0026quot;)\n    }\n    json.MarshalTag(user, tags...)\n\nFor the database:\n\n    json.MarshalTag(user, \u0026quot;db\u0026quot;, \u0026quot;json\u0026quot;)\n\nEt cetera. My current implementation picks the first match.\n\nI don't think there's a huge performance penalty to this, it's a backwards compatible\nchange and I've found it to be very useful.\n\nI can submit a patch-set for tip if this feature is accepted. If the general idea is\naccepted but the API isn't, I can bring it up on the ML for bikeshedding.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2014-12-08T10:40:50Z",
	"created_at": "2014-02-16T05:24:00Z",
	"updated_at": "2016-06-25T01:27:41Z"
}
