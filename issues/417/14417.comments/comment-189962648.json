{
	"id": 189962648,
	"body": "In my project I'm using git submodules to manage the contents of my vendor subdirectory. I know you guys don't necessarily care about / explicitly consider git submodules when you design stuff, but I've found it's a convenient way to manage my vendored packages, and smoothly update them to new levels if I need to. Modifying all the vendored packages' tests with the build flag doesn't seem to fit smoothly with git submodules. Say I want to update the level of one of my dependencies... I would have to manage my own build flag patch over each repository, unapply my patch, merge in the new changes, re-apply my patch on top, and then commit this state of the vendored submodule. This isn't really practical for me and I probably won't use this workaround.\r\n\r\nI already have the `go test -race $(go list ./... | grep -v /vendor/)` trick scripted everywhere. I personally like the approach of the CL initially given here. I have some vendored dependencies that work well in my projects but have busted tests (namely their test dependencies). You could make the argument that I shouldn't use such packages, but it's hard to find good alternatives, it works well, and I don't have time to roll my own right now on account of their tests, or to fix their tests.",
	"user": {
		"login": "ereyes01",
		"id": 1884883,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-28T22:52:55Z",
	"updated_at": "2016-02-28T22:52:55Z"
}
