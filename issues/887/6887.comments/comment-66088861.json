{
	"id": 66088861,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5 by **xunfin**:\n\n\u003cpre\u003eIt seems that this and \u003ca href=\"https://golang.org/issue/6401\"\u003eissue #6401\u003c/a\u003e could be case checked using something like : \n\nimport (\n\t\"errors\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc Rename2(oldname, newname string) error {\n\tolddir, _ := filepath.Split(oldname)\n\tnewdir, newfile := filepath.Split(newname)\n\n\t// 1. arguments supplied in form (\"oldname_fullpath\",\"newname_filename\"\")\n\tif newdir == \"\" {\n\t\treturn os.Rename(oldname, filepath.Join(filepath.Dir(olddir), newfile))\n\t}\n\n\t// 2. otherwise assume both are full paths\n\tif olddir == newdir {\n\t\treturn os.Rename(oldname, newname)\n\t} else {\n\t\treturn \u0026os.PathError{\"rename\", newname, errors.New(\"path for new name must match path given for old name\")}\n\t}\n}\n\nI don't think it is go practice to second guess the user's intentions so maybe the\ndouble-use of the second parameter may not be acceptable  - depending on what is the\nintended form of the path string supplied to \"newname\" either the parts marked 1. or 2.\nin the comments could be deleted..\n\n(pkg filepath is used above because the equivalent pkg path function fail to work\nproperly using windows type paths..)\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-12-04T01:52:36Z",
	"updated_at": "2014-12-08T10:38:20Z"
}
