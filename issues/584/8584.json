{
	"id": 51288400,
	"number": 8584,
	"state": "closed",
	"title": "go/types: LookupFieldOrMethod(T, \"f\") may return (*T).f",
	"body": "\u003cpre\u003eAppend this code to go/types/api_test.go and run it.\n\nLookupFieldOrMethod, contra its spec, returns pointer-receiver methods even when invoked\nwith a non-pointer named type.  (This is something like the \u0026quot;implicit \u0026amp;\u0026quot;\nrule, but this is not the right place for that logic since that rule only applies to\naddressable values of type T.)\n\nfunc TestLookupFieldOrMethod(t *testing.T) {\n\tconst src = `package P; type T int; func (*T) f() {}`\n\tpkg, err := pkgFor(\u0026quot;test\u0026quot;, src, nil)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tT := pkg.Scope().Lookup(\u0026quot;T\u0026quot;).Type()\n\tobj, index, indirect := LookupFieldOrMethod(T, pkg, \u0026quot;f\u0026quot;)\n\tfmt.Println(T, obj, index, indirect) // P.T func (*P.T).f() [0] false\n\tt.Fail()\n}\u003c/pre\u003e",
	"user": {
		"login": "adonovan",
		"id": 5658175,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 10,
	"closed_at": "2014-12-08T10:47:39Z",
	"created_at": "2014-08-25T19:14:49Z",
	"updated_at": "2016-06-25T01:40:07Z",
	"milestone": {
		"id": 1067218,
		"number": 21,
		"title": "Go1.4"
	}
}
