{
	"id": 66098052,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eActually, there's some better factoring that could be done, and which might go into the\nright direction: Right now all callers of LookupFieldOrMethod need to check if a method\nis actually in the type's method set. That is, they all do something along the lines of:\n\n\tobj, index, indirect = LookupFieldOrMethod(T, ...)\n\t...\n\tif obj != nil {\n\t\tif f, _ := obj.(*Func); f != nil \u0026\u0026 !indirect \u0026\u0026 ptrRecv(f) {\n\t\t\t// error: not f in method set of T\n\t\t}\n\t}\n\nThis functionality could be moved into LookupFieldOrMethod (actually the internal\nversion lookupFieldOrMethod). The main drawback of factoring this out is that right now\na caller can give a more specific error message if a method is found (but is not in the\nmethodset) then if the result of the lookup is just a nil object. The solution might be\na more information returned by LookupFieldOrMethod regarding the actual failure.\n\nTo be considered.\n\nFinally, fixing this issue should also address \u003ca href=\"https://golang.org/issue/8353\"\u003eissue #8353\u003c/a\u003e which is closely related.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-08-26T20:11:20Z",
	"updated_at": "2014-12-08T10:47:39Z"
}
