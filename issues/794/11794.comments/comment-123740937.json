{
	"id": 123740937,
	"body": "I'm sorry, when I wrote the issue I hadn't read up as much on signal handling as I have now.\r\n\r\nSo there are two cases I tested. The first one is when there is a custom signal handler set, the second case is when there is no custom handler set (as in the example in this issue).\r\n\r\nIt looks like the CL fixes the second case; SIGINT now causes the program to stop. It's not ignored anymore.\r\n\r\nI don't have a good example for the first case. \r\nIn the Aerospike database there is a custom signal handler that starts the database shutdown on SIGINT. (it's implemented in their [signal.c](https://github.com/aerospike/aerospike-server/blob/master/as/src/base/signal.c)) After loading a Go1.5beta2 c-shared .so into the database server, using dlopen, the signal is completely ignored. I assume because the signal handler is overwritten by go. When a c-shared .so built with your CL is loaded, the program does not ignore the SIGINT (jay!), but it also doesn't fire the custom signal handler that was set by Aerospike. Instead the program exits directly, without proper shutdown, with the message `received signal interrupt`.",
	"user": {
		"login": "GeertJohan",
		"id": 564501,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-22T14:29:15Z",
	"updated_at": "2015-07-22T14:34:41Z"
}
