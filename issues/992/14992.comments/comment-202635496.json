{
	"id": 202635496,
	"body": "As you've noticed, the template package was not designed to be a programming language in its own right. In fact, that is a non-goal of the package.\r\n\r\nIf we were to go down this road, where would it end? Once you give people the essential primitives for implementing algorithms in the template language, they will thirst for more. At some point you end up implementing a new language or re-implementing a weird version of Go. I hope you can appreciate that this is not a minor issue, but rather a fundamental design decision.\r\n\r\nI know this is an unsatisfying answer for you.\r\n\r\n\u003e However, this is completely unrealistic and impractical because in the real world, usually the person writing a template is an end-user of the application and not a developer that would fork it and modify the application internals just to do such a simple task.\r\n\r\nIf the author of the program expects their users to write template code then they should provide a set of useful template functions and methods on their data types to make these common tasks possible. Or they may choose a different template package that permits this kind of programming.\r\n\r\nDo you have a specific use case in mind? What is the application you are writing templates for?",
	"user": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-29T00:10:38Z",
	"updated_at": "2016-03-29T00:10:38Z"
}
