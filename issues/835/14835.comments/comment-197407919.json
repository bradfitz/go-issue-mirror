{
	"id": 197407919,
	"body": "But the runtime does not have a way to limit new thread creation even if it\nknows the actual limit.\n\nThe runtime only creates new os threads to host goroutines when there are\nno other available threads. And if that happens, there are no way to\ncontinue to execute Go code  without deadlock. So limiting the total number\nof threads won't work.\n\nFor example, t suppose there are a bunch of goroutines that all blocked by\nreading from a pipe, and then another goroutine wakes up to write to the\npipe. In such a scenario, it's possible to use unbounded number of threads,\nand limiting the number of os threads will just deadlock the program.\n\nThat's the reason why using getrlimit will only replace pthread_create\nfailure with another failure (reached max. thread limit). If the program\nrequires more threads to run it will crash regardless.\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-16T16:22:42Z",
	"updated_at": "2016-03-16T16:22:42Z"
}
