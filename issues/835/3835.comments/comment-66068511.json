{
	"id": 66068511,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eHere's another program:\n\npackage main\nvar a, b, c, d, e int\nfunc foo() int {\n    return a + b + 1 + c + 2 + d + 3 + e + 4\n}\n\n6g is happy with this, 8g gives \"out of fixed registers\". If you delete the \"+ 4\" from\nthe program, both 6g and 8g are happy. If you comment out the regopt(ptxt) call in\npgen.c, 6g produces:\n\n--- prog list \"foo\" ---\n0000 (main.go:3) TEXT    foo+0(SB),$0-8\n0001 (main.go:4) MOVL    a+0(SB),BX\n0002 (main.go:4) MOVL    b+0(SB),BP\n0003 (main.go:4) ADDL    BP,BX\n0004 (main.go:4) ADDL    $1,BX\n0005 (main.go:4) MOVL    c+0(SB),BP\n0006 (main.go:4) ADDL    BP,BX\n0007 (main.go:4) ADDL    $2,BX\n0008 (main.go:4) MOVL    d+0(SB),BP\n0009 (main.go:4) ADDL    BP,BX\n0010 (main.go:4) ADDL    $3,BX\n0011 (main.go:4) MOVL    e+0(SB),BP\n0012 (main.go:4) ADDL    BP,BX\n0013 (main.go:4) MOVL    BX,.noname+0(FP)\n0014 (main.go:4) RET     ,\n0015 (main.go:5) CALL    ,runtime.throwreturn+0(SB)\n0016 (main.go:5) RET     ,\n\nand 8g produces:\n\n--- prog list \"foo\" ---\n0000 (main.go:3) TEXT    foo+0(SB),$16-4\n0001 (main.go:4) MOVL    a+0(SB),DI\n0002 (main.go:4) MOVL    DI,autotmp_0003+-4(SP)\n0003 (main.go:4) MOVL    autotmp_0003+-4(SP),SI\n0004 (main.go:4) ADDL    b+0(SB),SI\n0005 (main.go:4) ADDL    $1,SI\n0006 (main.go:4) MOVL    SI,autotmp_0002+-12(SP)\n0007 (main.go:4) MOVL    autotmp_0002+-12(SP),BP\n0008 (main.go:4) ADDL    c+0(SB),BP\n0009 (main.go:4) ADDL    $2,BP\n0010 (main.go:4) MOVL    BP,autotmp_0001+-8(SP)\n0011 (main.go:4) MOVL    autotmp_0001+-8(SP),BX\n0012 (main.go:4) ADDL    d+0(SB),BX\n0013 (main.go:4) ADDL    $3,BX\n0014 (main.go:4) MOVL    BX,autotmp_0000+-16(SP)\n0015 (main.go:4) MOVL    autotmp_0000+-16(SP),BX\n0016 (main.go:4) ADDL    e+0(SB),BX\n0017 (main.go:4) MOVL    BX,.noname+0(FP)\n0018 (main.go:4) RET     ,\n0019 (main.go:5) CALL    ,runtime.throwreturn+0(SB)\n0020 (main.go:5) RET     ,\n\nNote that 6g is happy to use just BX and BP, but 8g wants to use DI, SI, BP, BX (and the\nfatal one more, if the \"+ 4\" is part of the program). 8g also needs autotmp_000?\nvariables.\n\nWith the \"+ 4\", the AST in both cases is:\n\n.   ADD u(2) l(4) tc(1) int\n.   .   ADD u(2) l(4) tc(1) int\n.   .   .   ADD u(2) l(4) tc(1) int\n.   .   .   .   ADD u(2) l(4) tc(1) int\n.   .   .   .   .   ADD u(2) l(4) tc(1) int\n.   .   .   .   .   .   ADD u(2) l(4) tc(1) int\n.   .   .   .   .   .   .   ADD u(2) l(4) tc(1) int\n.   .   .   .   .   .   .   .   ADD u(2) l(4) tc(1) int\n.   .   .   .   .   .   .   .   .   NAME-main.a u(1) a(1) l(2) x(0+0) class(PEXTERN)\ntc(1) used(1) int\n.   .   .   .   .   .   .   .   .   NAME-main.b u(1) a(1) l(2) x(0+0) class(PEXTERN)\ntc(1) used(1) int\n.   .   .   .   .   .   .   .   LITERAL-1 u(1) a(1) l(4) tc(1) int\n.   .   .   .   .   .   .   NAME-main.c u(1) a(1) l(2) x(0+0) class(PEXTERN) tc(1)\nused(1) int\n.   .   .   .   .   .   LITERAL-2 u(1) a(1) l(4) tc(1) int\n.   .   .   .   .   NAME-main.d u(1) a(1) l(2) x(0+0) class(PEXTERN) tc(1) used(1) int\n.   .   .   .   LITERAL-3 u(1) a(1) l(4) tc(1) int\n.   .   .   NAME-main.e u(1) a(1) l(2) x(0+0) class(PEXTERN) tc(1) used(1) int\n.   .   LITERAL-4 u(1) a(1) l(4) tc(1) int\n\nFor the curious, the resultant 6g/8g programs *with* regopt but without the \"+ 4\" are:\n\n--- prog list \"foo\" ---\n0000 (main.go:3) TEXT    foo+0(SB),$0-8\n0001 (main.go:4) MOVL    a+0(SB),BX\n0002 (main.go:4) MOVL    b+0(SB),BP\n0003 (main.go:4) ADDL    BP,BX\n0004 (main.go:4) INCL    ,BX\n0005 (main.go:4) MOVL    c+0(SB),BP\n0006 (main.go:4) ADDL    BP,BX\n0007 (main.go:4) MOVL    d+0(SB),BP\n0008 (main.go:4) ADDL    $2,BX\n0009 (main.go:4) ADDL    BP,BX\n0010 (main.go:4) MOVL    e+0(SB),BP\n0011 (main.go:4) ADDL    $3,BX\n0012 (main.go:4) ADDL    BP,BX\n0013 (main.go:4) MOVL    BX,.noname+0(FP)\n0014 (main.go:4) RET     ,\n\nand\n\n--- prog list \"foo\" ---\n0000 (main.go:3) TEXT    foo+0(SB),$0-4\n0001 (main.go:4) MOVL    a+0(SB),AX\n0002 (main.go:4) ADDL    b+0(SB),AX\n0003 (main.go:4) INCL    ,AX\n0004 (main.go:4) ADDL    c+0(SB),AX\n0005 (main.go:4) ADDL    $2,AX\n0006 (main.go:4) ADDL    d+0(SB),AX\n0007 (main.go:4) ADDL    $3,AX\n0008 (main.go:4) MOVL    AX,BX\n0009 (main.go:4) ADDL    e+0(SB),BX\n0010 (main.go:4) MOVL    BX,.noname+0(FP)\n0011 (main.go:4) RET     ,\u003c/pre\u003e",
	"user": {
		"login": "nigeltao",
		"id": 8565232,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-08-16T08:46:15Z",
	"updated_at": "2014-12-08T10:20:16Z"
}
