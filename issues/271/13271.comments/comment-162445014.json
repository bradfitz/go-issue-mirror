{
	"id": 162445014,
	"body": "That's OK, it took me a few minutes to remember that restriction. I'm so\nused to things just working (tm)\n\nWrt. var m map[string]T\nx := m[string(key)]\n\nHas an optimisation to avoid the copy for the purposes of hashing. I forget\nthe exact version it went in, I'm going to guess 1.4, but I'm probably\nwrong - check the release notes for 1.3-1.5\n\nNote: the optimisation is very specific\n\ns := string(key)\nx := m[s]\n\nWill incur a copy as expected.\n\nThanks\n\nDave\n\nOn Mon, 7 Dec 2015, 19:06 Lawrence E. Bakst \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e Yep, sorry about that. I didn't remember that slices weren't Key Types. I\n\u003e just came back to delete the comment but it's already too late, you guys\n\u003e are fast.\n\u003e\n\u003e It's too bad though. I have a bunch of hash values I want to store in a\n\u003e map. I guess for now I will cast []byte to string as it's prototype code. I\n\u003e assume that cast has to copy the bytes of the slice to the string so there\n\u003e is an allocation and a copy?\n\u003e\n\u003e Is there any optimization for struct{} as a value take no memory? In my\n\u003e case I just need to test if the hash is in the map and don't care about the\n\u003e value. I have lots of hashes to store in the map.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/13271#issuecomment-162443422\u003e.\n\u003e\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-07T08:13:54Z",
	"updated_at": "2015-12-07T08:13:54Z"
}
