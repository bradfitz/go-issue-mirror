{
	"id": 128716774,
	"number": 14094,
	"state": "closed",
	"title": "Padding issues a bug or something expected?",
	"body": "I have a structure with the following variables with go version go1.5.1 linux/amd64\r\n```go\r\ntype Foo struct {\r\n    VarA uint64\r\n    VarB uint32\r\n}\r\n```\r\nand I created the `f` variable of `Foo` type with some values:\r\n```go\r\nf := Foo{\r\n    VarA: 9720496, \r\n    VarB: 3,\r\n}\r\n```\r\nwhen I printed that variable with gdb I saw something that I was not expecting:\r\n```gdb\r\n(gdb) x/4w \u0026f \r\n0xc82008cc18:   0x009452b0      0x00000000      0x00000003      0x000000c8\r\n```\r\nwhere did the 'c8' came frome?\r\nthe `unsafe.Sizeof(f)` have a result of 16. Should I assume that golang doesn't set the padding bytes with zero as well?\r\n\r\nAs a workaround I had to add a variable `unused` so it would be clean.\r\n```go\r\ntype Foo struct {\r\n    VarA   uint64\r\n    VarB   uint32\r\n    unused uint32\r\n}\r\n```\r\n```gdb\r\n(gdb) x/4w \u0026f \r\n0xc82008cc18:   0x009452b0      0x00000000      0x00000003      0x00000000\r\n```\r\nIs this normal?\r\nThanks",
	"user": {
		"login": "aanm",
		"id": 5714066,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2016-01-26T04:22:04Z",
	"created_at": "2016-01-26T03:55:00Z",
	"updated_at": "2016-01-26T04:44:41Z"
}
