{
	"id": 118421387,
	"body": "\u003e Another possibility would be to do like (say) Google maps and drop\r\ndetail when zoomed out. It'd make zooming expensive where it is now\r\ncheap, but then in theory you should be able to hand arbitrary traces.\r\n\r\nThe problem isn't in performance. It performs quite well. The main problem is memory usage and the way that trace events are stored in memory.\r\n\r\nLOD would be nice, but it adds a lot of machinery. Even if we implement this in trace-viewer, I'm not sure that such wide-scale change would be accepted.\r\n\r\nI'll look into whether creating a custom importer would give some improvement - but I feel it still will need to unpack into separate JavaScript objects to make it usable with trace-viewer, which essentially takes us back to the beginning.\r\n\r\n\u003e Since you're versed in the guts of the trace-viewer, maybe it's worth adding a simple check in the trace viewer to replace the current crash with a \"trace too big\" alert? (We should also fix 'go tool trace', of course, but redundant error checking is ok.)\r\n\r\nI'm not sure how well it can be detected or on what basis it should be done. From Go side we create a limited subset of possible traces - the conditions that hold in Go may not necessarily translate to other traces e.g. Chrome, Android. Generic detection for crash would be problematic, if doable at all - hence it's not a good solution for trace-viewer.\r\n\r\nI need to inspect why exactly is it crashing at the moment and maybe it can be mitigated instead. Although with long traces we might still hit a memory limit.",
	"user": {
		"login": "egonelbre",
		"id": 192964,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-03T20:28:38Z",
	"updated_at": "2015-07-03T20:30:19Z"
}
