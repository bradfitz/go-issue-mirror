{
	"id": 51280742,
	"number": 3520,
	"state": "closed",
	"title": "cmd/gc: do not allocate closures that do not escape",
	"body": "\u003cpre\u003e---------- Forwarded message ----------\nFrom: Russ Cox \u0026lt;rsc@golang.org\u0026gt;\nDate: Fri, Apr 13, 2012 at 11:49\nSubject: Re: [go-nuts] performance problem with sort.Search?\nTo: Dan Adkins \u0026lt;dadkins@gmail.com\u0026gt;\nCc: golang-nuts \u0026lt;golang-nuts@googlegroups.com\u0026gt;\n\n\nThe behavior of sort.Search is unfortunate.\nYou can't use it in a tight loop because of the closure\nallocation. Â I had hoped that we would have better\nanalysis in the compiler for Go 1 so that a case like\n\nsort.Search(len(data), func(i int) bool { return data[i] \u0026gt;= x })\n\nwould recognize that sort.Search did not retain the\nclosure, so the closure did not need to be allocated\n(and thus not garbage collected), but there was not\nenough time to do everything I had hoped for.\nThis is still something we can do for Go 1.1.\n\nRuss\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2014-12-08T10:18:29Z",
	"created_at": "2012-04-13T15:50:58Z",
	"updated_at": "2016-06-24T22:17:45Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
