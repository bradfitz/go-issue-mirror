{
	"id": 162706179,
	"body": "\u003e It looks like all trailing spaces are preserved, not just a single newline.\r\n\r\nYou're right. In that case, I'll need to change my code to be quite non-trivial in order to be able to use the result of `json.Indent` in a predictable manner (i.e., always having a single trailing newline), and do so in an efficient manner (i.e., avoiding copying memory ala `strings.TrimSpace(out.String())`):\r\n\r\n```Go\r\n\t...\r\n\r\n\tvar out bytes.Buffer\r\n\terr = json.Indent(\u0026out, in, \"\", \"\\t\")\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\t// TODO: Maybe not here; see https://github.com/golang/go/issues/13520.\r\n\t// Trim all whitespace at the end. Then add a single newline.\r\n\ti := trimRightSpace(out.Bytes())\r\n\tout.Truncate(i)\r\n\terr = out.WriteByte('\\n')\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\t...\r\n}\r\n\r\n// trimRightSpace returns index i, such that s[0:i] is a subslice of s\r\n// by slicing off all trailing white space, as defined by Unicode.\r\nfunc trimRightSpace(s []byte) int {\r\n\ti := lastIndexFunc(s, unicode.IsSpace, false)\r\n\tif i \u003e= 0 \u0026\u0026 s[i] \u003e= utf8.RuneSelf {\r\n\t\t_, wid := utf8.DecodeRune(s[i:])\r\n\t\ti += wid\r\n\t} else {\r\n\t\ti++\r\n\t}\r\n\treturn i\r\n}\r\n\r\n// lastIndexFunc is the same as bytes.LastIndexFunc except that if\r\n// truth==false, the sense of the predicate function is inverted.\r\nfunc lastIndexFunc(s []byte, f func(r rune) bool, truth bool) int {\r\n\tfor i := len(s); i \u003e 0; {\r\n\t\tr, size := rune(s[i-1]), 1\r\n\t\tif r \u003e= utf8.RuneSelf {\r\n\t\t\tr, size = utf8.DecodeLastRune(s[0:i])\r\n\t\t}\r\n\t\ti -= size\r\n\t\tif f(r) == truth {\r\n\t\t\treturn i\r\n\t\t}\r\n\t}\r\n\treturn -1\r\n}\r\n```\r\n\r\nHere's an updated playground link:\r\n\r\nhttps://play.golang.org/p/pJpGqNhgz7",
	"user": {
		"login": "shurcooL",
		"id": 1924134,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-07T23:39:14Z",
	"updated_at": "2015-12-07T23:49:53Z"
}
