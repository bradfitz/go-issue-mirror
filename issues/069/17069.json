{
	"id": 176299281,
	"number": 17069,
	"state": "open",
	"title": "cmd/compile: intrinsify some math functions",
	"body": "Currently math.sqrt (OSQRT) is lowered to OpSqrt and in case of constants precomputed and otherwise a hardware opcode may be generated (SQRTSD on amd64).\r\nhttps://github.com/golang/go/issues/15543\r\n\r\nOther math functions like NaN,Inf,... are \"only\" inlined. \r\n\r\nI started experimenting with a CL to intrinsify NaN, Inf, ... due to the idea in https://github.com/golang/go/issues/17063.\r\n\r\nAt a first quick glance it seems the compiler is able to optimize code better if we would lower the precomputeable values to constants (NaN,...) or in some cases just directly emit efficient code in the backend if the function can be replaced by 1-2 opcodes.\r\n\r\nMore simplifications and general constant folding can then be handled and infrastructure for it extended in later stages of the backend.\r\n\r\nPossible functions that look (at first glance) easy or useful to be lowered or have hardware opcodes (on Amd64):\r\n\r\nAbs\r\nCeil\r\nCopysign\r\nCos\r\nExp\r\nExp2\r\nFloat32bits\r\nFloat32frombits\r\nFloat64bits\r\nFloat64frombits\r\nFloor\r\nIsInf\r\nIsNaN\r\nLog\r\nLog10\r\nLog2\r\nMax\r\nMin\r\nMod\r\nModf\r\nNaN\r\nPow\r\nPow10\r\nRemainder\r\nSignbit\r\nSin\r\nSqrt (OSQRT opcode could possibly be removed from frontend when handled as intrinsic)\r\n\r\nIf this finds support i would like to assign myself to start investigate this further and start CL's that would intrinsify some of the above functions (depending on popularity, usefulness, ease of integration into the backend,...).",
	"user": {
		"login": "martisch",
		"id": 184995,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"comments": 8,
	"created_at": "2016-09-12T05:50:58Z",
	"updated_at": "2016-09-13T14:51:03Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
