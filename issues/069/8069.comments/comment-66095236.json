{
	"id": 66095236,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003ethe actual problem is not about runtime.Stack at all.\nthe program #7 will exit without endless loop is simply because there is race\nbetween the start of the new goroutine and fmt.Println/exit of the main\ngoroutine: when the main goroutine exits, the whole process will exit.\n\nIf you add some synchronization so that fmt.Println execute after the newly\nstarted goroutine starts executing, you will find the same behavior as it does\nwhen fmt.Println is replaced with runtime.Stack.\n(e.g. \u003ca href=\"http://play.golang.org/p/B71JIK0KQS)\"\u003ehttp://play.golang.org/p/B71JIK0KQS)\u003c/a\u003e\n\nAs I said in #5, it's not possible to do this kind of thing with bounded\nconcurrency (in any language).\u003c/pre\u003e",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-05-22T07:13:19Z",
	"updated_at": "2014-12-08T10:44:46Z"
}
