{
	"id": 101010374,
	"body": "remapCoordinateSystem is a utility function if you work with a rotation matrix. You may prefer to interpret these values by yourself. See my simple example below.\r\n\r\n```\r\nvar acc float64\r\n\r\ngo func() {\r\n  var events = make([]sensor.Event, 1)\r\n  for {\r\n    _, err := sensorManager.Read(events)\r\n    if err == nil {\r\n      acc = events[0].Data[1]\r\n    }\r\n  }\r\n}()\r\n\r\n// ...\r\n\r\nfunc draw() {\r\n\tdx = float32(-acc) // normalize dx depending on the screen width and accelerometer range optionally.\r\n\tdrawAt(f32.Affine{\r\n\t\t\t{width, 0, x+dx},\r\n\t\t\t{0, height, y},\r\n\t}\r\n}\r\n```\r\n\r\nThe sample above will move the object to the left or the right of the screen depending on the acceleration in the Y-axis.\r\n\r\nRetrieving the screen orientation is critical, because it alters which axis you need to read. See my comment at https://github.com/golang/go/issues/10327#issuecomment-100573820\r\n\r\nI can send you a full sample app, if it's going to help.",
	"user": {
		"login": "rakyll",
		"id": 108380,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-05-11T18:30:39Z",
	"updated_at": "2015-05-11T18:30:39Z"
}
