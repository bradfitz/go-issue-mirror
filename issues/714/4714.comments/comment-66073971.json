{
	"id": 66073971,
	"body": "\u003ca id=\"c7\"\u003e\u003c/a\u003eComment 7:\n\n\u003cpre\u003eWhat's needed to resolve this? FWIW I'm successfully cross compiling from darwin amd64\nto linux 386 via 'CC=$(CC) CGO_ENABLED=1 GOOS=linux GOARCH=386 go build -x\n-ldflags=\"-extld=$(CC)\"' (where $(CC) is \"i686-nptl-linux-gnu-gcc\" in this instance) and\ndisabling the \"cannot use cgo\" error in src/cmd/go/build.go:\n\n\ndiff -r 3d177aef8dd3 src/cmd/go/build.go\n--- a/src/cmd/go/build.go\tMon Jul 22 23:02:27 2013 +0400\n+++ b/src/cmd/go/build.go\tThu Aug 01 13:34:13 2013 +0200\n@@ -1854,9 +1854,9 @@\n )\n\n func (b *builder) cgo(p *Package, cgoExe, obj string, gccfiles []string, gxxfiles []string) (outGo, outObj []string, err error) {\n-\tif goos != toolGOOS {\n-\t\treturn nil, nil, errors.New(\"cannot use cgo when compiling for a different operating\nsystem\")\n-\t}\n+\t// if goos != toolGOOS {\n+\t// \treturn nil, nil, errors.New(\"cannot use cgo when compiling for a different\noperating system\")\n+\t// }\n\n \tcgoCPPFLAGS := stringList(envList(\"CGO_CPPFLAGS\"), p.CgoCPPFLAGS)\n \tcgoCFLAGS := stringList(envList(\"CGO_CFLAGS\"), p.CgoCFLAGS)\u003c/pre\u003e",
	"user": {
		"login": "quarnster",
		"id": 1230389,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-01T11:39:37Z",
	"updated_at": "2014-12-08T10:24:58Z"
}
