{
	"id": 51286944,
	"number": 7600,
	"state": "open",
	"title": "unicode: decrease binary size",
	"body": "\u003cpre\u003eCurrently, the generated unicode tables.go sets up a separate slice for each R16/R32 in\neach RangeTable, each with its own backing array.\n\nRearranging the code generated by maketables.go (in a way that is invisible to the\nexported API) so that the RangeTable slices point into a big, shared R16/R32 array\nreduces the contribution of the unicode tables to binary size by ~35k. If \u003ca href=\"https://golang.org/issue/7599\"\u003eissue #7599\u003c/a\u003e\nwere fixed as well, the space savings would be ~45k to ~60k. Details on the savings\nbelow.\n\n\nQuestions:\n\n(1) Are these space savings significant enough to warrant possible inclusion in Go 1.3,\nor should I wait to polish + mail the CL until Go 1.4?\n(2) Is there a reason not to do this rearrangement?\n(3) Is there a fix to the toolchain that achieves these reductions in a better / cleaner\n/ deeper way? (For example, instead of creating a separate backing array symbol and\nslice header symbol for staticly initialized slices, one could just create a single\nslice symbol containing the slice header followed by the array. That would prove some\nspace savings.)\n\n\nDetails on the size changes:\n\n$ cat radical.go\npackage main\n\nimport \u0026quot;unicode\u0026quot;\n\nfunc main() {\n\t_ = unicode.Radical\n}\n\n\nBuild with 6g.\n\nBinary size before: 733664 bytes. Binary size after: 699296 bytes.\n\n\nLargest symbols before:\n\n$ go tool nm -size -sort size radical | head -n 50\n   4e0c0     101365 R _esymtab\n   4e0c0     101365 R _pclntab\n   4e0c0     101365 R _etypelink\n   4e0c0     101365 R _symtab\n   87200      56984 B runtime.mheap\n   3d340      49024 R _gcbss\n   319f8      47372 R go.string.*\n   265a0      46168 R _rodata\n   265a0      46168 R type.*\n   81fc0      21056 B _bufferList\n   492c0      18192 R _gcdata\n   492c0      18192 R _egcbss\n   7e100      16064 B _semtable\n   22920      15088 T unicode.init\n\n\nLargest symbols after:\n\n$ go tool nm -size -sort size radical | head -n 50\n   4efa0     102141 R _pclntab\n   878c0      56984 B runtime.mheap\n   3e420      52360 R _gcbss\n   33c18      42956 R go.string.*\n   2a5c0      38488 R type.*\n   2a5c0      38488 R _rodata\n   22920      31504 T unicode.init\n   82680      21056 B _bufferList\n   6a740      20904 D unicode.allRange16\n   7e7c0      16064 B _semtable\n   4b0c0      14856 R _gcdata\n   68020      10016 D unicode.allRange32\n   7c7a0       8192 B _pdesc\n   7a800       8096 B _hash\n\n\nThe main size savings here come from a reduction in the number of small symbols\ngenerated to hold staticly initialized autotmp values, each with their own overhead\n(name, padding, etc.).\n\nThe increase in the size of unicode.init is addressable via \u003ca href=\"https://golang.org/issue/7599\"\u003eissue #7599\u003c/a\u003e.\u003c/pre\u003e",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"created_at": "2014-03-20T20:07:01Z",
	"updated_at": "2015-04-14T19:45:22Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
