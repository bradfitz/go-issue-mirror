{
	"id": 156471652,
	"body": "I have now proven both by hand and using an automated theorem prover* that either:\r\n1) this index out of bounds is impossible,\r\n2) the traceback is lying about the npage argument to mHeap_Grow,\r\n3) there was some horrible memory corruption, or\r\n4) there are bugs in both of my proofs.\r\n\r\nThe automated proof did, however, uncover a wrap-around bug where a very large allocation could cause an out of bounds index rather than rejecting the allocation. That would suggest case 2. Assuming I can reproduce this in real code, the fix is trivial.\r\n\r\n@fjl, @karalabe, is it possible your code attempted a particularly large allocation (like over 3GB)? Also, could you run \"getconf PAGESIZE\" on the system that generated the traceback? I assumed it was 4096 because that's what the runtime uses on 32-bit non-NACL ARM, but if it isn't that could be important.\r\n\r\n\\* I used concolic execution of a model of the memory system, which doesn't lend itself to infinite code paths, so specifically I proved that no sequence of four allocations ending in an allocation of 8 pages can cause an index out of bounds on the last allocation. I chose four to exercise all combinations of code paths within the same final program state and because running four already took a really long time. :)",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-13T15:55:32Z",
	"updated_at": "2015-11-13T15:55:45Z"
}
