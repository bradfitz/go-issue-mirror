{
	"id": 251802105,
	"body": "2cents,\r\n\r\nI just found this discussion when googling for any references on nested transactions in Go.\r\n\r\nI believe a valid and obvious case for nested transactions is testing. When you test the code which already uses transactions (because operations being tested need transaction semantics), you want to wrap such code in a bigger transaction which will rollback after running test(s). You also want the whole machinery to be transparent - ie. to not introduce any additional concepts like savepoints just because for some cases you want your transactions to be part of a bigger one.\r\n\r\nI was using this approach over years in testing  with Postgres (8.x, 9.x) and application-level drivers (SQLAlchemy, recently Ecto, IIRC it was also possible with ActiveRecord as long ago as in its 2.x times). Looks like the effort of implementing nested transactions with savepoints was done in these drivers.\r\n\r\nSo the approach @amoghe proposes is used \"in the wild\" and I believe there's a value in it.",
	"user": {
		"login": "herenowcoder",
		"id": 32460,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-05T21:16:28Z",
	"updated_at": "2016-10-05T21:33:42Z"
}
