{
	"id": 251910743,
	"body": "@kardianos \r\n\r\n* A1: dunno about MySql and MS SQL, Postgres is supporting savepoints. That's what I said, impl. of nested transactions with savepoints is done in the drivers (with a clarification in A3 below)\r\n\r\n* A2: Yes, I want to emulate nested transactions, because they are composable, or a better word: embeddable. They enable modularity of your code. if you have only savepoints, you need to know up front that your transaction wlll be inside another transaction. The thing is - you don't know it up front. If you have nested transactions API you just code transactions. One can surround another or not.\r\nThis is useful regardless of whether RDMBS implementor decides of support nested transactions directly or not.\r\n\r\n* A3: Yes I did kind of shortcut - SQLAlchemy, Ecto And ActiveRecord are more less ORM-like libraries over low-level drivers, namely Psycopg, Postgrex, and whatever Ruby folks are using for Postgres. As the consumer of these APIs I haven't checked where exactly nested transactions are emulated - in the lib or the driver. I would bet it varies.\r\n\r\nI also believe pointing to a distinction between sql driver and sql \"framework\" (a word lacking a proper definition btw) is not so much applicable here. In Golang ecosystem ORMs don't seem so popular and there must be a reason for this. I already have cases where I would want nested transaction without ORM \"framework\" thing.",
	"user": {
		"login": "herenowcoder",
		"id": 32460,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-06T09:23:15Z",
	"updated_at": "2016-10-07T11:28:55Z"
}
