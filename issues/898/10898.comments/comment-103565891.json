{
	"id": 103565891,
	"body": "I think we are on the same page but just to make sure. A stack barrier\nnotes a location on the stack where all frames older\nthan the current frame has been scanned.\n1) Mark Termination needs to scan any stack frames created since the last\ntime the stack was scanned.\n2) The write barrier is responsible for greying any objects written into a\nslot older than the stack frame barrier.\n3) Greying objects written into slots younger than the stack barrier is not\nneeded for correctness but may help performance/scalability.\nJust checking....\n\nOn Tue, May 19, 2015 at 11:39 AM, Austin Clements \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e Actually, the fact that we generate write barriers for writes to\n\u003e up-pointers is incredibly useful. I was wrong that we ignore these write\n\u003e barriers: the slot may be in the stack, but if it's a write barrier we care\n\u003e about, the pointer will point to the heap and we'll grey the object. This\n\u003e is exactly what we need to handle up-pointers. Hence, we can put stack\n\u003e barriers between any two frames on the stack without worrying about\n\u003e up-pointers.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/10898#issuecomment-103557352\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-05-19T16:02:19Z",
	"updated_at": "2015-05-19T16:02:19Z"
}
