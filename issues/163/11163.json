{
	"id": 87371362,
	"number": 11163,
	"state": "closed",
	"title": "fmt: '%#v' verb does not print adequate dynamic type information for numerics",
	"body": "## Steps to reproduce\r\n\r\n    package main\r\n\r\n    import \"fmt\"\r\n\r\n    func main() {\r\n\t    n1 := float32(1.3167616e+07)\r\n\t    fmt.Printf(\"%#v\\n\", n1)\r\n    }\r\n\r\n## Expected output\r\n\r\n    float32(1.3167616e+07)\r\n\r\n## Actual output\r\n\r\n    1.3167616e+07\r\n\r\n## Notes\r\n\r\nAn important property implied by the documentation for `%#v` is that I can copy-paste the output into a Go program to recreate that value (at least for serializable values, e.g. not functions). At least, the function should be injective.\r\n\r\nThis is not true for numerics, since the output drops the dynamic type information. When I take the actual output above and put it in a new Go program, it gets assigned a different dynamic type:\r\n\r\n    package main\r\n\r\n    import \"fmt\"\r\n    import \"reflect\"\r\n\r\n    func main() {\r\n\t    n := 1.3167616e+07  // the output of `%#v`\r\n\t    fmt.Printf(\"%s\\n\", reflect.TypeOf(n).String())\r\n    }\r\n\r\nwhich prints:\r\n\r\n    float64\r\n\r\nThis has cost me significant debugging time. The `%#v` verb should print out everything about the value that I need to know.",
	"user": {
		"login": "jhftrifork",
		"id": 10739058,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2015-06-11T14:51:57Z",
	"created_at": "2015-06-11T14:46:39Z",
	"updated_at": "2016-06-25T02:10:56Z"
}
