{
	"id": 130134043,
	"body": "\u003e Under normal circumstances you would place test code into a file matching the `test` build constraint/tag, e.g. `my_test.go`. The naming convention of the file has led me to believe that this is a build constraint/tag.\r\n\r\nIt's not a build constrant/tag named `test`, but rather a filename suffix of `_test`. Note that `my_test.go` will be used in tests only, but `mytest.go` will be included in normal builds too because the filename does not have the underscore of `_test`. Also, you can't use `// +build test` or `// +build _test`, it has to be a `_test` suffix in the filename.\r\n\r\n\u003e However, it is not possible to _exclude_ some code from being built into tests ran by `go test` [via a build tag]\r\n\r\nI want to share an opinion related to that. I consider that a feature. I think it's great you (or anyone) can't exclude some .go files from tests. That makes test code purely additive and easier to reason about.\r\n\r\n\u003e there are some situations that do warrant different behavior for testing,\r\n\r\nI think those situations are very rare, and they're best handled as special cases. For example, they can check the binary name for \".test\" or \".test.exe\" suffix to find out if it's a test running, since Go names the test binaries with a \".test(.exe)\" suffix.\r\n\r\nFrom `go help test` docs:\r\n\r\n\u003e The test binary, called pkg.test where pkg is the name of the\r\n\u003e directory containing the package sources",
	"user": {
		"login": "shurcooL",
		"id": 1924134,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-12T01:52:42Z",
	"updated_at": "2015-08-12T01:52:42Z"
}
