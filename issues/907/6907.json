{
	"id": 51285906,
	"number": 6907,
	"state": "open",
	"title": "cmd/cgo: provide a way to pass a Go string directly to C code",
	"body": "by **james@jamesh.id.au**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n\nI'm writing a wrapper for a C++ API that takes with std::string arguments.  In order to\ninterface with it via CGo, I call it through a shim API.\n\nIdeally, I would like to build the std::string instances directly from the Go string in\nthe shim layer, but there doesn't seem to be a way to declare the shim function such\nthat it can take the Go string directly.\n\nI can't use the GoString declaration in _cgo_export.h, and declaring the GoString struct\ntype myself generates an error (for good reason).\n\nWhat is the expected output?\n\nA way to declare my function so that it can accept a Go string directly.\n\nWhat do you see instead?\n\nThere is no way to do the above, and I need to convert the string to a *C.char (which\ncauses an unneeded allocation and two extra Go-\u0026gt;C transitions for the allocation and\nrelease of the memory).\n\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n\n6g\n\nWhich operating system are you using?\n\nLinux (amd64)\n\nWhich version are you using?  (run 'go version')\n\n1.2\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"created_at": "2013-12-06T16:33:40Z",
	"updated_at": "2016-05-17T20:39:17Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
