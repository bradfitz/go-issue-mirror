{
	"id": 66066481,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eOn Mon, Apr 16, 2012 at 00:04, Robert Millan \u0026lt;rmh@d.o\u0026gt; wrote:\n\u0026gt; I gave the source a look, and it seems that on GNU/kFreeBSD golang is\n\u0026gt; playing with thread primitives, bypassing libc.  For example it\nYes.\n\u0026gt; invokes thr_new() kernel call directly, and also calls sigprocmask()\n\u0026gt; to reset the signal mask in code that is clearly multithreaded [1].\n\u0026gt;\n\u0026gt; This means that either golang intends to completely replace\n\u0026gt; libpthread, or it intends to play along with existing libpthread.  I'm\nYes, when cgo isn't used, the go runtime intentionally bypasses libc and\nlibpthread, as we manage threads and memory ourselves.\n\u0026gt; not sure which one applies here, but in both cases there is a problem\n\u0026gt; that needs to be fixed in golang.\nIn a word, we tie libc/kernel combination to the OS, so AFAIK, we don't\nsupport GNU/kFreeBSD now.\u003c/pre\u003e",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-04-17T18:32:02Z",
	"updated_at": "2014-12-22T06:13:49Z"
}
