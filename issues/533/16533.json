{
	"id": 168225621,
	"number": 16533,
	"state": "open",
	"title": "proposal: x/tools/cmd/guru: Add option -allowerrors to perform analysis ignoring errors in packages in scope",
	"body": "## Context and problem to solve \r\n\r\nCurrently `guru` will abort if any package in the scope has some I/O, parser or type error. There is no way to disable this behaviour. \r\n\r\n`guru` is used for multiple plugins in different editors and IDEs (e.g. [vim-go](https://github.com/fatih/vim-go), [vscode-go](https://github.com/Microsoft/vscode-go), [go-plus for atom](https://atom.io/packages/go-plus)). In development environments it is common to be used in code trees where there might be files which some errors, missing dependencies, etc.\r\n\r\nIt is quite inconvenient not be able to use `guru` for code analysis simply because some `.go` fails. It would be desirable if `guru` had some option to ignore such error, ignoring the package during analysis. \r\n\r\n## Proposal\r\n\r\nI propose  add an option `-allowerrors` which would enable the [flag `loader.Config.AllowErrors`](https://github.com/golang/tools/blob/master/go/loader/loader.go#L80-L84):\r\n\r\n\u003e  If AllowErrors is true, Load will return a Program even\r\n\u003e if some of the its packages contained I/O, parser or type\r\n\u003e errors; such errors are accessible via PackageInfo.Errors.  If\r\n\u003e false, Load will fail if any package had an error.\r\n\r\nWith this option `guru` will still print the errors in stderr, but ignore the packages with errors and perform the analysis.",
	"user": {
		"login": "keymon",
		"id": 280032,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"assignee": {
		"login": "alandonovan",
		"id": 8433140,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"created_at": "2016-07-29T00:20:29Z",
	"updated_at": "2016-09-12T23:35:13Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
