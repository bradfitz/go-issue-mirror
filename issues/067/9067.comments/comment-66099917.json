{
	"id": 66099917,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eJust to be very clear about what this issue is about.\nThis is the first two blocks I get from fibo -bench:\n\nwordsize = 64, half = true, opt = false\n        n  alloc count  alloc bytes        ns/op        time/op\n        1            1            8           47           47ns\n       10           10          440         1866        1.866µs\n      100          100         4856        19352       19.352µs\n     1000         1000        90928       266349      266.349µs\n    10000        10000      5009072     13658233    13.658233ms\n   100000       100000    464595504    796448601   796.448601ms\n  1000000      1000000  46473013296  45115693932  45.115693932s\n\nwordsize = 64, half = true, opt = true\n        n  alloc count  alloc bytes        ns/op        time/op\n        1            1            8           50           50ns\n       10            4          152          879          879ns\n      100            4          152         3116        3.116µs\n     1000           10          808        48775       48.775µs\n    10000           67        32041      2496247     2.496247ms\n   100000          653      3020720    189547157   189.547157ms\n  1000000         6511    302471600  19298381666  19.298381666s\n\nIf I add a single line to the top of the program allocating a 1M-entry int slice:\n\n    var x = make([]int, 1e6)\n\nThen that makes the live data much larger which reduces the frequency of GC, which\namortizes the constant overheads of the GC across more allocations, making them less\ndominant. The output changes to:\n\nwordsize = 64, half = true, opt = false\n        n  alloc count  alloc bytes        ns/op        time/op\n        1            1            8           27           27ns\n       10           10          440          852          852ns\n      100          100         4856         8876        8.876µs\n     1000         1000        90920       110815      110.815µs\n    10000        10000      5009065      3566628     3.566628ms\n   100000       100000    464595504    284322957   284.322957ms\n  1000000      1000000  46473013296  26231074326  26.231074326s\n\nwordsize = 64, half = true, opt = true\n        n  alloc count  alloc bytes        ns/op        time/op\n        1            1            8           27           27ns\n       10            4          152          423          423ns\n      100            4          152         2150         2.15µs\n     1000           10          808        36378       36.378µs\n    10000           67        32040      2081211     2.081211ms\n   100000          653      3020715    188221970    188.22197ms\n  1000000         6511    302471600  19495001468  19.495001468s\n\nThis issue is about making that the output even without the 'var x' line, so that\ncollecting tiny heaps is not worse than collecting heaps of a few MB.\n\nI am not sure what #2 means by 'almost identical', but this issue is not about bringing\nthe opt=false and opt=true cases any closer than that.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-11-12T19:46:24Z",
	"updated_at": "2014-12-08T10:49:43Z"
}
