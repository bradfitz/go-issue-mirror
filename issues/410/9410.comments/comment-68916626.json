{
	"id": 68916626,
	"body": "The cgo approach would allow package maintainers to utilize swig from a\r\n`//go:generate` comment as well, would it not?\r\n\r\nThat would be neat.\r\n\r\nOn Tue, Jan 6, 2015 at 7:41 AM, Ian Lance Taylor \u003cnotifications@github.com\u003e\r\nwrote:\r\n\r\n\u003e Generating both files sounds like an interesting stopgap solution.\r\n\u003e\r\n\u003e Having SWIG generate cgo code can work with the Go tool by having the Go\r\n\u003e tool check the SWIG version, as indeed it already does. If SWIG is\r\n\u003e sufficiently new, the go tool can pass an option selecting cgo mode. (If\r\n\u003e SWIG is not sufficiently new, it won't work anyhow.) This is far less than\r\n\u003e ideal but I don't see another way to do it. The main advantage of the cgo\r\n\u003e approach is future proofing, as otherwise we are going to wind up doing\r\n\u003e this dance with every foreseeable Go release. It was a mistake of mine to\r\n\u003e not do this in the first place.\r\n\u003e\r\n\u003e Are you running the SWIG testsuite as well as the examples? (make\r\n\u003e check-go-test-suite).\r\n\u003e\r\n\u003e Instead of using an init function, you can use a real function that\r\n\u003e initializes everything once, and have every generated function call it.\r\n\u003e\r\n\u003e But in the long run we're going to want to do the cgo approach anyhow.\r\n\u003e\r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub\r\n\u003e \u003chttps://github.com/golang/go/issues/9410#issuecomment-68872949\u003e.\r\n\u003e\r\n\r\n\r\n\r\n-- \r\nFollow me on twitter @slimsag \u003chttps://twitter.com/slimsag\u003e.",
	"user": {
		"login": "slimsag",
		"id": 3173176,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-06T19:16:10Z",
	"updated_at": "2015-01-06T19:16:10Z"
}
