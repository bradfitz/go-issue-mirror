{
	"id": 68787327,
	"body": "Hmm....\r\n\r\nThe second approach doesn't really sound like a viable solution to me. Letting the go tool parse the '\u003cmodule\u003e_gc.c' file just to generate a Go source file does sound wrong to me as SWIG should generate working wrapper source out of the box.\r\n\r\nThe third approach might be a viable solution but I'm not sold on the idea. I'm sure that SWIG could be changed to support pre-1.4 and post-1.3 simultaneously. In the worst case a SWIG command line switch like -py3 for Python 3 could switch between the versions. It looks relatively straight-forward to generate a Go source file similarly to the '\u003cmodule\u003e_gc.c' file as 'runtime.h' and 'cgocall.h' have been replaced with / converted to Go equivalents. Maintaining two code paths in SWIG doesn't sound like a good idea though.\r\n\r\nThe first approach does sound good to me and relatively straight-forward. If I'm not mistaken then SWIG has to generate a header file for cgo instead of a '\u003cmodule\u003e_gc.c' file and the '\u003cmodule\u003e.go' source file needs to make cgo calls (C.\u003cfunction\u003e calls) instead of using _cgo_runtime_cgocall.\r\n\r\nIn any case the go tool will need to be changed though.\r\nIan, did I miss anything? Which Go versions would be covered with the first approach?",
	"user": {
		"login": "michael-schaller",
		"id": 1525237,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-05T21:44:33Z",
	"updated_at": "2015-01-05T21:44:33Z"
}
