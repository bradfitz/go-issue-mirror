{
	"id": 68872949,
	"body": "Generating both files sounds like an interesting stopgap solution.\r\n\r\nHaving SWIG generate cgo code can work with the Go tool by having the Go tool check the SWIG version, as indeed it already does.  If SWIG is sufficiently new, the go tool can pass an option selecting cgo mode.  (If SWIG is not sufficiently new, it won't work anyhow.)  This is far less than ideal but I don't see another way to do it.  The main advantage of the cgo approach is future proofing, as otherwise we are going to wind up doing this dance with every foreseeable Go release.  It was a mistake of mine to not do this in the first place.\r\n\r\nAre you running the SWIG testsuite as well as the examples?  (make check-go-test-suite).\r\n\r\nInstead of using an init function, you can use a real function that initializes everything once, and have every generated function call it.\r\n\r\nBut in the long run we're going to want to do the cgo approach anyhow.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-06T14:41:32Z",
	"updated_at": "2015-01-06T14:41:32Z"
}
