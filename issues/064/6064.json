{
	"id": 51284623,
	"number": 6064,
	"state": "closed",
	"title": "spec: elide types in struct composite literals",
	"body": "\u003cpre\u003eIn struct composite literals it would be nice to be able to elide nested type names.\n\ntype Point struct {\n\ti, j int\n}\ntype Line struct {\n\ta, b Point\n}\nvar x = Line{Point{0,0},Point{0,0}}\nvar y = Line{{0,0},{0,0}}\n\nthe declaration of x is fine, but the declaration of y gives the error\n\n    missing type in composite literal\n\nThe spec says:\n\nWithin a composite literal of array, slice, or map type T, elements that are themselves\ncomposite literals may elide the respective literal type if it is identical to the\nelement type of T. Similarly, elements that are addresses of composite literals may\nelide the \u0026amp;T when the element type is *T.\n\nThere is no mention of what happens in a composite literal of struct type.  It should do\nthe obvious thing, allow eliding the literal type if it is identical to the type of the\ncorresponding field that it is initializing.\u003c/pre\u003e",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:33:21Z",
	"created_at": "2013-08-07T03:43:51Z",
	"updated_at": "2016-06-24T22:53:54Z"
}
