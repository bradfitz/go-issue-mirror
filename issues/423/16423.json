{
	"id": 166264011,
	"number": 16423,
	"state": "open",
	"title": "testing: Logf's documentation is not precise",
	"body": "1. What version of Go are you using (`go version`)?\r\n\r\n```\r\ngo version go1.6.2 linux/amd64\r\n```\r\n\r\nLogf's documentation says:\r\n\r\n\u003e Logf formats its arguments according to the format, analogous to\r\n\u003e Printf, and records the text in the error log. For tests, the text\r\n\u003e will be printed only if the test fails or the -test.v flag is set.\r\n\u003e For benchmarks, the text is always printed to avoid having\r\n\u003e performance depend on the value of the -test.v flag.\r\n\r\nConsider this code:\r\n\r\n```\r\npackage test\r\n\r\nimport (\r\n\t\"testing\"\r\n)\r\n\r\nfunc TestLog(t *testing.T) {\r\n\tt.Logf(\"text\")\r\n\tt.Logf(\"text\\n\")\r\n}\r\n```\r\n\r\nRunning the tet case with \"go test -v -run TestLog\" produces::\r\n\r\n```\r\n=== RUN   TestLog\r\n--- PASS: TestLog (0.00s)\r\n\tlog_test.go:8: text\r\n\tlog_test.go:9: text\r\nPASS\r\nok  \tgithub.com/yaojingguo/test\t0.001s\r\n```\r\n\r\n`t.Logf(\"text\")` and `t.Logf(\"text\\n\")` produces the same result. So it\r\ncan be concluded that `Logf` appends a new line to a string without \r\na ending new line. I think that it is better to mention this behavior \r\nin `Logf`'s documentation.\r\n\r\n\r\n\r\n",
	"user": {
		"login": "yaojingguo",
		"id": 516386,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		}
	],
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2016-07-19T07:18:59Z",
	"updated_at": "2016-07-20T13:36:24Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
