{
	"id": 66089291,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003efor the interested, the diff is:\n--- pkg/unicode/utf16/utf16.go\t2013-08-18 14:53:21.000000000 -0400\n+++ ~/Downloads/utf16.go\t2013-12-15 16:57:24.000000000 -0500\n@@ -36,7 +36,7 @@\n // the Unicode replacement code point U+FFFD.\n func DecodeRune(r1, r2 rune) rune {\n \tif surr1 \u0026lt;= r1 \u0026\u0026 r1 \u0026lt; surr2 \u0026\u0026 surr2 \u0026lt;= r2 \u0026\u0026 r2 \u0026lt; surr3 {\n-\t\treturn (rune(r1)-surr1)\u0026lt;\u0026lt;10 | (rune(r2) - surr2) + 0x10000\n+\t\treturn (r1-surr1)\u0026lt;\u0026lt;10 | (r2 - surr2) + surrSelf\n \t}\n \treturn replacementChar\n }\n@@ -45,11 +45,11 @@\n // If the rune is not a valid Unicode code point or does not need encoding,\n // EncodeRune returns U+FFFD, U+FFFD.\n func EncodeRune(r rune) (r1, r2 rune) {\n-\tif r \u0026lt; surrSelf || r \u0026gt; maxRune || IsSurrogate(r) {\n+\tif r \u0026lt; surrSelf || r \u0026gt; maxRune {\n \t\treturn replacementChar, replacementChar\n \t}\n \tr -= surrSelf\n-\treturn surr1 + (r\u0026gt;\u0026gt;10)\u00260x3ff, surr2 + r\u00260x3ff\n+\treturn surr1 + r\u0026gt;\u0026gt;10, surr2 + r\u00260x3ff\n }\n \n // Encode returns the UTF-16 encoding of the Unicode code point sequence s.\n@@ -63,46 +63,49 @@\n \n \ta := make([]uint16, n)\n \tn = 0\n+\tvar r1, r2 rune\n \tfor _, v := range s {\n \t\tswitch {\n-\t\tcase v \u0026lt; 0, surr1 \u0026lt;= v \u0026\u0026 v \u0026lt; surr3, v \u0026gt; maxRune:\n-\t\t\tv = replacementChar\n-\t\t\tfallthrough\n-\t\tcase v \u0026lt; surrSelf:\n+\t\tcase 0 \u0026lt;= v \u0026\u0026 v \u0026lt; surr1, surr3 \u0026lt;= v \u0026\u0026 v \u0026lt; surrSelf:\n \t\t\ta[n] = uint16(v)\n \t\t\tn++\n-\t\tdefault:\n-\t\t\tr1, r2 := EncodeRune(v)\n+\t\tcase surrSelf \u0026lt;= v \u0026\u0026 v \u0026lt;= maxRune:\n+\t\t\tr1, r2 = EncodeRune(v)\n \t\t\ta[n] = uint16(r1)\n \t\t\ta[n+1] = uint16(r2)\n \t\t\tn += 2\n+\t\tdefault:\n+\t\t\ta[n] = uint16(replacementChar)\n+\t\t\tn++\n \t\t}\n \t}\n-\treturn a[0:n]\n+\treturn a[:n]\n }\n \n // Decode returns the Unicode code point sequence represented\n // by the UTF-16 encoding s.\n func Decode(s []uint16) []rune {\n-\ta := make([]rune, len(s))\n+\tsLen := len(s)\n+\ta := make([]rune, sLen)\n \tn := 0\n-\tfor i := 0; i \u0026lt; len(s); i++ {\n-\t\tswitch r := s[i]; {\n-\t\tcase surr1 \u0026lt;= r \u0026\u0026 r \u0026lt; surr2 \u0026\u0026 i+1 \u0026lt; len(s) \u0026\u0026\n+\tvar r uint16\n+\tfor i := 0; i \u0026lt; sLen; i++ {\n+\t\tswitch r = s[i]; {\n+\t\tcase r \u0026lt; surr1, surr3 \u0026lt;= r:\n+\t\t\t// normal rune\n+\t\t\ta[n] = rune(r)\n+\t\t\tn++\n+\t\tcase surr1 \u0026lt;= r \u0026\u0026 r \u0026lt; surr2 \u0026\u0026 i+1 \u0026lt; sLen \u0026\u0026\n \t\t\tsurr2 \u0026lt;= s[i+1] \u0026\u0026 s[i+1] \u0026lt; surr3:\n \t\t\t// valid surrogate sequence\n \t\t\ta[n] = DecodeRune(rune(r), rune(s[i+1]))\n \t\t\ti++\n \t\t\tn++\n-\t\tcase surr1 \u0026lt;= r \u0026\u0026 r \u0026lt; surr3:\n+\t\tdefault:\n \t\t\t// invalid surrogate sequence\n \t\t\ta[n] = replacementChar\n \t\t\tn++\n-\t\tdefault:\n-\t\t\t// normal rune\n-\t\t\ta[n] = rune(r)\n-\t\t\tn++\n \t\t}\n \t}\n-\treturn a[0:n]\n+\treturn a[:n]\n }\u003c/pre\u003e",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-12-15T21:59:19Z",
	"updated_at": "2014-12-22T06:30:49Z"
}
