{
	"id": 66089289,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1 by **chanxuehong**:\n\n\u003cpre\u003e// Copyright 2010 The Go Authors.  All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package utf16 implements encoding and decoding of UTF-16 sequences.\npackage utf16\n\n// The conditions replacementChar==unicode.ReplacementChar and\n// maxRune==unicode.MaxRune are verified in the tests.\n// Defining them locally avoids this package depending on package unicode.\n\nconst (\n    replacementChar = '\\uFFFD'     // Unicode replacement character\n    maxRune         = '\\U0010FFFF' // Maximum valid Unicode code point.\n)\n\nconst (\n    // 0xd800-0xdc00 encodes the high 10 bits of a pair.\n    // 0xdc00-0xe000 encodes the low 10 bits of a pair.\n    // the value is those 20 bits plus 0x10000.\n    surr1 = 0xd800\n    surr2 = 0xdc00\n    surr3 = 0xe000\n\n    surrSelf = 0x10000\n)\n\n// IsSurrogate returns true if the specified Unicode code point\n// can appear in a surrogate pair.\nfunc IsSurrogate(r rune) bool {\n    return surr1 \u0026lt;= r \u0026\u0026 r \u0026lt; surr3\n}\n\n// DecodeRune returns the UTF-16 decoding of a surrogate pair.\n// If the pair is not a valid UTF-16 surrogate pair, DecodeRune returns\n// the Unicode replacement code point U+FFFD.\nfunc DecodeRune(r1, r2 rune) rune {\n    if surr1 \u0026lt;= r1 \u0026\u0026 r1 \u0026lt; surr2 \u0026\u0026 surr2 \u0026lt;= r2 \u0026\u0026 r2 \u0026lt; surr3 {\n        return (r1-surr1)\u0026lt;\u0026lt;10 | (r2 - surr2) + surrSelf\n    }\n    return replacementChar\n}\n\n// EncodeRune returns the UTF-16 surrogate pair r1, r2 for the given rune.\n// If the rune is not a valid Unicode code point or does not need encoding,\n// EncodeRune returns U+FFFD, U+FFFD.\nfunc EncodeRune(r rune) (r1, r2 rune) {\n    if r \u0026lt; surrSelf || r \u0026gt; maxRune {\n        return replacementChar, replacementChar\n    }\n    r -= surrSelf\n    return surr1 + r\u0026gt;\u0026gt;10, surr2 + r\u00260x3ff\n}\n\n// Encode returns the UTF-16 encoding of the Unicode code point sequence s.\nfunc Encode(s []rune) []uint16 {\n    n := len(s)\n    for _, v := range s {\n        if v \u0026gt;= surrSelf {\n            n++\n        }\n    }\n\n    a := make([]uint16, n)\n    n = 0\n    var r1, r2 rune\n    for _, v := range s {\n        switch {\n        case 0 \u0026lt;= v \u0026\u0026 v \u0026lt; surr1, surr3 \u0026lt;= v \u0026\u0026 v \u0026lt; surrSelf:\n            a[n] = uint16(v)\n            n++\n        case surrSelf \u0026lt;= v \u0026\u0026 v \u0026lt;= maxRune:\n            r1, r2 = EncodeRune(v)\n            a[n] = uint16(r1)\n            a[n+1] = uint16(r2)\n            n += 2\n        default:\n            a[n] = uint16(replacementChar)\n            n++\n        }\n    }\n    return a[:n]\n}\n\n// Decode returns the Unicode code point sequence represented\n// by the UTF-16 encoding s.\nfunc Decode(s []uint16) []rune {\n    sLen := len(s)\n    a := make([]rune, sLen)\n    n := 0\n    var r uint16\n    for i := 0; i \u0026lt; sLen; i++ {\n        switch r = s[i]; {\n        case r \u0026lt; surr1, surr3 \u0026lt;= r:\n            // normal rune\n            a[n] = rune(r)\n            n++\n        case surr1 \u0026lt;= r \u0026\u0026 r \u0026lt; surr2 \u0026\u0026 i+1 \u0026lt; sLen \u0026\u0026\n            surr2 \u0026lt;= s[i+1] \u0026\u0026 s[i+1] \u0026lt; surr3:\n            // valid surrogate sequence\n            a[n] = DecodeRune(rune(r), rune(s[i+1]))\n            i++\n            n++\n        default:\n            // invalid surrogate sequence\n            a[n] = replacementChar\n            n++\n        }\n    }\n    return a[:n]\n}\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/6957/1/utf16.go\"\u003eutf16.go\u003c/a\u003e (2832 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-12-15T15:15:23Z",
	"updated_at": "2014-12-22T06:30:48Z"
}
