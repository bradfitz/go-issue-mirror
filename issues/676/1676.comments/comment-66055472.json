{
	"id": 66055472,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eInsert a runtime.GC in your fast loop.\n\nIf all the allocated blocks have finalizers, the system gets\ninto a state where it GC's and doesn't find anything to free\n(everything gets moved to the finalizer queue instead).\nSo it doubles the heap size since nothing got freed.\nOn the next GC, the finalized chans get freed but now\nthere is 2x as much that gets moved to the finalized queue\nso the heap gets grown again.  And so on and so on.\n\nThis is just a fundamental problem with finalizers as far\nas I can tell.  Running the GC during down time would\nhelp hide this but in the current \"GC only during malloc\"\nit seems quite fundamental.\n\nSo I think your test program is just flawed.\n\nRuss\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-04-08T03:34:34Z",
	"updated_at": "2014-12-08T10:09:22Z"
}
