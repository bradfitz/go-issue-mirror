{
	"id": 51283379,
	"number": 5268,
	"state": "closed",
	"title": "bufio: Scanner and zero length reads",
	"body": "\u003cpre\u003erunning go1.1beta2.linux-amd64\n\n Just a few issues regarding bufio Scanner and zero length reads of the underlying io.Reader.\n\n1. It is not documented that the scanner also stops on a zero length read.\n\n2. If the underlying reader returns a zero length read with an error that is \n   not io.EOF the error is masked and Err() returns nil.\n    Eg, this program will not print out the error.\n\npackage main\n\nimport (\n\t\u0026quot;bufio\u0026quot;\n\t\u0026quot;errors\u0026quot;\n\t\u0026quot;fmt\u0026quot;\n)\n\ntype errReader struct{}\n\nfunc (t *errReader) Read(p []byte) (int, error) {\n\treturn 0, errors.New(\u0026quot;Random Err\u0026quot;)\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(new(errReader))\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\tfmt.Println(err)\n\t}\n}\n\n\n3. I don't see in any of the other standard library readers documentation\n   that they guarantee no zero length reads. If I am being paranoid, can\n   I safely use them without the scan prematurely terminating before EOF?\u003c/pre\u003e",
	"user": {
		"login": "nwaples",
		"id": 746663,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2014-12-08T10:28:23Z",
	"created_at": "2013-04-11T01:41:21Z",
	"updated_at": "2016-06-24T22:37:53Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
