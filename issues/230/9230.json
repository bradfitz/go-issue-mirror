{
	"id": 51498087,
	"number": 9230,
	"state": "closed",
	"title": "cmd/dist: Consider using \"git describe\" for \"go version\" string",
	"body": "The current code for VERSION.cache results in output like\r\n\r\n```\r\n$ go version\r\ngo version devel +2937d88 2014-12-09 22:08:45 +0000 linux/amd64\r\n```\r\nMany git projects use `git describe` for this. For example, Git itself has https://github.com/git/git/blob/master/GIT-VERSION-GEN#L15 which, adjusted to lightweight tags and a different naming convention, would lead to:\r\n\r\n```\r\n$ git describe --tags --match \"go[0-9]*\" --abbrev=7 HEAD 2\u003e/dev/null\r\ngo1.4beta1-394-g2937d88\r\n```\r\n\r\nOr even noting uncommitted changes:\r\n\r\n```\r\n$ git describe --tags --match \"go[0-9]*\" --abbrev=7 --dirty=+ 2\u003e/dev/null\r\ngo1.4beta1-394-g2937d88+\r\n```\r\n\r\nAs part of cmd/dist, it could look something like this:\r\n\r\n```\r\n$ go version \r\ngo version devel go1.4beta1-394-g2937d88+ linux/amd64\r\n```\r\n\r\nand this would also seem to make the explicit branch logic in src/cmd/dist/build.c unnecessary, as \"git describe\" can already look for tags.\r\n\r\nThis is useful (to me, at least) because it immediately communicates more than just that sha1 in the original; it tells me what tag I'm near, how far away from it I am, it *includes* the sha1 from earlier, and then can even mark dirty working trees so I know to suspect my build to be tainted.",
	"user": {
		"login": "tv42",
		"id": 419909,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2015-04-10T03:10:24Z",
	"created_at": "2014-12-09T23:36:01Z",
	"updated_at": "2016-06-25T01:55:45Z"
}
