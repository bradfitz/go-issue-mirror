{
	"id": 147335273,
	"number": 15230,
	"state": "open",
	"title": "proposal: add a json struct tag option that would (un)marshal a struct into an array",
	"body": "Consider the following scenario:\r\n\r\nYou want to handle a jsonrpc (or similar) styled json and now you have to deal with the arguments field. However, since that field is more often than not a json array of various things, you'll have to do it manually if you want to avoid casting all of its members later.\r\n\r\nSo you'd go with the following route:\r\nhttp://play.golang.org/p/mDSjNsa3P9\r\n\r\nIt would be nice if the json package did that for you. It might be handled similarly to how the \"string\" option works now.\r\n\r\nIf you have an inner struct, it might have a tag `json:\",array\"` which would single that it should be treated as an array with a length that's governed by its keys. And \"omitempty\" would be ignored, since it makes no sense in that context.\r\n\r\nUnfortunately, go doesn't support tags on the outer struct (I'm curious as to why that is), so maybe a set of functions could be added that emulate the process for the outer struct only:\r\n\r\n```\r\njson.MarshalArray\r\njson.UnmarshalArray\r\n```",
	"user": {
		"login": "urandom",
		"id": 7908,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 2,
	"created_at": "2016-04-11T07:10:46Z",
	"updated_at": "2016-04-21T07:15:17Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
