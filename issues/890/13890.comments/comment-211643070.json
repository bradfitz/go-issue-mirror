{
	"id": 211643070,
	"body": "@mdempsky I believe it is difficult to separate type inference from constant evaluations - they are necessarily coupled: the length of an array type can be any constant expression, that value of which becomes part of that type. And a constant expression may depend on the result of a compile-time evaluated call of len(x), where the result of len(x) depends on the type of x.\r\n\r\nI agree that some type checkers (gc, go/types, even) use a somewhat ad-hoc approach at the moment to resolve cycles - in the sense that we don't necessarily have proof that we caught all cases correctly. Determining explicit dependencies first, and evaluating types (and constants) afterwards, in a controlled manner, might be the way to go.\r\n\r\nThe spec doesn't say much if anything about cycles in constant expressions.\r\n\r\nFor what it's worth, I don't think this is for 1.7. These are esoteric corner cases, and hardly showstoppers.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-19T00:12:48Z",
	"updated_at": "2016-04-19T00:12:48Z"
}
