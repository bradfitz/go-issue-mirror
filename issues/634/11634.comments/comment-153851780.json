{
	"id": 153851780,
	"body": "This is unrelated to vendoring. This happens if you just have two packages x/y and z/y that define different y.T's.\n\nHere is a shorter example:\n\n\tpackage main\n\t\n\timport (\n\t\tt1 \"html/template\"\n\t\tt2 \"text/template\"\n\t)\n\t\n\tfunc main() {\n\t\tvar x interface{}\n\t\tx = new(t1.Template)\n\t\tprintln(x.(*t2.Template))\n\t}\n\n\t$ go run x.go\n\tpanic: interface conversion: interface {} is *template.Template, not *template.Template\n\t\n\tgoroutine 1 [running]:\n\tmain.main()\n\t\t/tmp/x.go:11 +0x97\n\texit status 2\n\n99% of the time you do want to see the shortened name. And in general reconstructing an expanded name may be difficult. For example the type involved might actually be `func(chan *template.Template)`. Rebuilding that entire string with the expanded package name, from within the runtime, is non-trivial.\n\nThat's not to say we shouldn't do it, just that it's actually hard.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-04T20:22:52Z",
	"updated_at": "2015-11-04T20:22:52Z"
}
