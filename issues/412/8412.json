{
	"id": 51288153,
	"number": 8412,
	"state": "closed",
	"title": "runtime: O(n^2) performance using map 'pop' pattern",
	"body": "\u003cpre\u003eThe idiom of using an iterator to get a single element, then deleting the single\nelement, then repeating leads to O(n^2) performance.  We should fix this, perhaps by\nremembering the first nonempty bucket.\n\nfunc benchmarkMap(b *testing.B, doPop bool, n int) {\n\tvar m map[int]bool\n\tpop := func() (int, bool) {\n\t\tfor k := range m {\n\t\t\tdelete(m, k)\n\t\t\treturn k, true\n\t\t}\n\t\treturn 0, false\n\t}\n\n\tfor i := 0; i \u0026lt; b.N; i++ {\n\t\tm = make(map[int]bool)\n\t\tfor k := 0; k \u0026lt; n; k++ {\n\t\t\tm[5*k+3] = true\n\t\t}\n\t\tif !doPop {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor {\n\t\t\t_, ok := pop()\n\t\t\tif !ok {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc BenchmarkPop10(b *testing.B)     { benchmarkMap(b, true, 10) }\nfunc BenchmarkPop100(b *testing.B)    { benchmarkMap(b, true, 100) }\nfunc BenchmarkPop1000(b *testing.B)   { benchmarkMap(b, true, 1000) }\nfunc BenchmarkPop10000(b *testing.B)  { benchmarkMap(b, true, 10000) }\nfunc BenchmarkPop100000(b *testing.B) { benchmarkMap(b, true, 100000) }\u003c/pre\u003e",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 14,
	"closed_at": "2014-12-08T10:46:45Z",
	"created_at": "2014-07-23T06:21:33Z",
	"updated_at": "2016-06-25T01:38:28Z",
	"milestone": {
		"id": 1067218,
		"number": 21,
		"title": "Go1.4"
	}
}
