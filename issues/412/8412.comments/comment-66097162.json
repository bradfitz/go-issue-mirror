{
	"id": 66097162,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9:\n\n\u003cpre\u003eI think Ian's idea of just recording the last bucket deleted from works, at least for\nthe pop idiom.  Just start each iterator at the last delete bucket.  I can't shake the\nfeeling that it is too specific to the pop idiom, though.  It seems counterintuitive\nthat you should start iterating at a bucket you might have just emptied.\n\nThere is a problem with storing the lowest non-empty bucket.  You can have a repeated\npattern of insert/delete that costs O(n) per insert/delete pair.  (Bucket 0 and bucket\nn-1 have an element.  Delete the one in bucket 0, then reinsert it.)\n\nYou could store a conservative approximation to the lowest non-empty bucket, though\n(invariant = all buckets below the remembered bucket are empty).  At first I thought\nthat would just get you back to where you have to update such a field on iteration.  But\nmaybe just bumping it up one bucket every delete would be enough?  On insert take min of\ninsert bucket and remembered bucket.  On delete check remembered bucket.  If it is\nempty, increase remembered bucket # by 1.\n\nI suspect there would still be patterns of insert, delete, and iteration that would show\nbad behavior.  But maybe they wouldn't be common in practice.\n\nOr maybe we're overthinking this.  Just starting at a random bucket gets us O(n lg n)\nwhich might be good enough.  It's certainly the easiest to implement.\u003c/pre\u003e",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-07-26T04:05:04Z",
	"updated_at": "2014-12-08T10:46:45Z"
}
