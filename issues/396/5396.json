{
	"id": 51283570,
	"number": 5396,
	"state": "closed",
	"title": "cmd/go: document \"go install\" and \"go get\" can only be run on packages inside a valid root",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\n1. install go1.1rc1\n2. setup GOPATH nicely\n3. create directory of code outside GOPATH (ie, GOPATH=/home/user/go and directory is\n/home/user/some-project) -- make sure it contains some remote dependencies\n4. enter directory and type \u0026quot;go get\u0026quot; to download dependencies prior to\n\u0026quot;go build\u0026quot;\n\n\nWhat is the expected output?\nWith go1.0.3, the behavior was as described by \u0026quot;go help gopath\u0026quot;, in that\n\u0026quot;go get\u0026quot; downloaded all dependencies of the project in the current directory\nto the first directory in $GOPATH.\n\n\nWhat do you see instead?\nWith go1.1rc1, \u0026quot;go get\u0026quot; now errors out with \u0026quot;go install: no install\nlocation for directory /home/user/some-project outside GOPATH\u0026quot;.\n\n\nTo be clear, I am not necessarily taking issue with the new behavior, but do believe it\nshould be noted in the go1.1 migration document and with more clear language in one of\n\u0026quot;go help gopath\u0026quot; and/or \u0026quot;go help get\u0026quot;.\n\nAlso, the previous behavior was very convenient, so if there is an easy workaround for\ngo1.1 (assuming this new behavior is intended) short of moving the code into some part\nof GOPATH (which would require more strict structure), I'd love to hear about it.\n\nOf course, as always and should be expected, I am happy to provide any further\nclarification or information necessary or possible.\u003c/pre\u003e",
	"user": {
		"login": "tianon",
		"id": 161631,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 6,
	"closed_at": "2014-12-08T10:29:11Z",
	"created_at": "2013-05-02T23:19:21Z",
	"updated_at": "2016-06-24T22:39:15Z"
}
