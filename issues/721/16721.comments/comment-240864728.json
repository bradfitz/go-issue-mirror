{
	"id": 240864728,
	"body": "@twotwotwo those are all excellent points, and thank you for the additional examples.\r\n\r\nMy major concern is that all these mountains are being moved to avoid\r\n```\r\ntype sorter []T\r\nfunc (s sorter) Len() int { return len(s) }\r\nfunc (s sorter) Swap(i, j int) { s[j], s[i] = s[i], s[j] }\r\n```\r\nwhich would allow everything you listed without having to use the reflect package at all. \r\n\r\nSure, it's inaesthetic and a bit of chore but it's not the worst thing. The proposal is nicer, but, while nicer is nicer, it seems like an awfully complicated solution for such a small problem.\r\n\r\nIf we're going to do this, then I'm all for exposing the magic so others can use it and the sort package itself remains unmagical. \r\n\r\nMy concerns with NewSwapper are/were:\r\n1.  are we exposing the right magic? (Could something else even more general be exposed that would allow the definition of NewSwapper by anyone?)\r\n2. NewSwapper would be odd one out in reflect. It's the only thing that takes a reflect.Value and builds a machine for efficient performing a task. \r\n\r\nLooking at the CL, the alternative would be exposing runtime memmove operations (presumably to unsafe) which is probably more evil than it's worth.\r\n\r\nImplementation-wise, at least, NewSwapper has to be in reflect and certainly in the stdlib (barring exposing memmove or adding a new package just for this under reflect and factoring some private helpers in reflect to a shared internal package). \r\n\r\nSo, still a little uneasy about it on principle, but it seems to be the best solution so far, if we're going to do this.",
	"user": {
		"login": "jimmyfrasche",
		"id": 375553,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-18T21:36:03Z",
	"updated_at": "2016-08-18T21:36:03Z"
}
