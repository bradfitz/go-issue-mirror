{
	"id": 242588391,
	"body": "I'm not sure I see the \"simplicity\" benefit of \"ThenBy\"; why not simply\nwrite the cascading comparisons into the one callback function?\n\nBTW, in a scalar field, !(a[i] \u003c a[j]) \u0026\u0026 !(a[j] \u003c a[i]) is equivalent\nto (a[i] == a[j]) or !(a[i] != a[j]).\n\n\nOn 26 August 2016 at 02:04, Joe \u003cnotifications@github.com\u003e wrote:\n\n\u003e This might be a little off-topic, but one readability improvement might be\n\u003e to add one more type and method to the sort package to make it easier to\n\u003e compose a sort hierarchy:\n\u003e\n\u003e package sort\n\u003e type By func(i, j int) bool\n\u003e // assumes !(a[i] \u003c a[j]) \u0026\u0026 !(a[j] \u003c a[i]) is equivalent to (a[i] != a[j])func (a By) ThenBy(b By) By {\n\u003e     return func(i, j int) bool {\n\u003e         return a(i,j) || !a(j,i) \u0026\u0026 b(i,j)\n\u003e     }\n\u003e }\n\u003e\n\u003e It could be used like this:\n\u003e\n\u003e sort.With(len(s), reflect.Swapper(s),\n\u003e     sort.By(func(i, j int) bool { return s[i].Foo \u003c s[j].Foo })\n\u003e     .ThenBy(func(i, j int) bool { return s[i].Bar \u003c s[j].Bar })\n\u003e )\n\u003e\n\u003e\n",
	"user": {
		"login": "praetergeek",
		"id": 21099397,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-26T00:37:26Z",
	"updated_at": "2016-08-26T00:37:26Z"
}
