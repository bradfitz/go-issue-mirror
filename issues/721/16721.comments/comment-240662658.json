{
	"id": 240662658,
	"body": "Do we have any sort of proposal for generic-but-homogenous slices?\r\nThat would solve the problem of having to copy a slice of (non-interface) type T to make a generic slice-of-type-interface, because the generic array would simply be referenced by a fat pointer, the same way that generic scalars are. (Or maybe we have an invisible proxy object to carry those.)\r\n\r\nMaking up a type notation for the purpose, where `[]...` is the type of a homogenous generic slice, I would imagine then `sort` could be defined with a function signature something like:\r\n```lang=go\r\nfunc sort(sslice []..., less func (interface{},interface{}) bool) (rslice []...)\r\n```\r\n\r\n",
	"user": {
		"login": "praetergeek",
		"id": 21099397,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-18T08:50:44Z",
	"updated_at": "2016-08-18T08:50:44Z"
}
