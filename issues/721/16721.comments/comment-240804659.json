{
	"id": 240804659,
	"body": "To add to @nsf initial idea and after some discussion on r/golang ... if we could add an orderable refinement in go/types on primitive types, that would allow to define multiple relations of order on composite types.\r\n\r\nThe example that was given there that I found interesting is : \r\n``` go \r\nsort.Slice(people, func(p Person) string { return p.Name })\r\nsort.Slice(people, func(p Person) (int,string) { return p.Age, p.Name })\r\n```\r\n\r\nIt could probably be simplified further but that would allow to sort composite types by field.\r\nHere, for instance, the second example would sort twice, by age first and then by name.\r\n\r\nI haven't thought about what difficulties one may encounter in implementing this but I find the idea quite appealing.\r\n\r\nYou'll note that:  `people` is of type `[]Person`\r\n\r\nJust another idea that could be easier to use and explain than an indice based solution, if implementable without risks.",
	"user": {
		"login": "atdiar",
		"id": 12191458,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-18T17:59:11Z",
	"updated_at": "2016-08-18T18:02:28Z"
}
