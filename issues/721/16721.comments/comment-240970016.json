{
	"id": 240970016,
	"body": "@jimmyfrasche \r\n\r\n\u003e Optimizations is an interesting point, but I don't want to add that unless it actually happens\r\n\r\nConsider https://github.com/myitcv/sort_inlining_example\r\n\r\n[`main.go`](https://github.com/myitcv/sort_inlining_example/blob/master/main.go) is largely a copy and paste of un-exported parts of [`sort/sort.go`](https://github.com/golang/go/blob/master/src/sort/sort.go). Notice I've replaced use of `sort.Interface` with `[]string` directly. \r\n\r\n[`main_test.go`](https://github.com/myitcv/sort_inlining_example/blob/master/main_test.go) is a copy of `BenchmarkSortString1K` from [`sort/sort_test.go`](https://github.com/golang/go/blob/master/src/sort/sort_test.go)\r\n\r\n[`run.sh`](https://github.com/myitcv/sort_inlining_example/blob/master/run.sh) shows the setup.\r\n\r\n[`README.md`](https://github.com/myitcv/sort_inlining_example/blob/master/README.md) shows the output from `run.sh` (on my machine)\r\n\r\nNotice the inlining that can happen when the use `sort.Interface` is dropped.\r\n\r\nThis leads to a ~33% speedup in this benchmark.\r\n\r\n\u003e Separating go generate from an editor macro is just editorializing for go generate, imo: everything that applies to one applies to the other. I mean yes it is great and good, but I am trying to keep that as neutral as it is possible for me in the interest of discussion.\r\n\r\ngo generate exists and is universally available to everyone via the go tool. The usage of the command is uniform and well documented.  \r\n\r\nWhilst some editors may have support for macros of this sort, these macros are not universally available (i.e. in all editors) and almost by definition usage of these macros is not uniform (i.e. it's different in each editor)\r\n\r\nHence why these should be considered very separately in my opinion. ",
	"user": {
		"login": "myitcv",
		"id": 3374574,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-19T09:19:35Z",
	"updated_at": "2016-08-19T09:19:35Z"
}
