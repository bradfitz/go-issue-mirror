{
	"id": 251168706,
	"body": "@extemporalgenome It's trivial to write a converter from function triple to interface if someone needs that. That's true already today.\r\n\r\n    type funcs struct { n int; swap func(i, j int); less func(i, j int) bool }\r\n    func (x funcs) Len() int { return x.n }\r\n    func (x funcs) Swap(i, j int) { x.swap(i, j) }\r\n    func (x funcs) Less(i, j int) bool { return x.less(i, j) }\r\n    func FuncInterface(n int, swap func(i, j int), less func(i, j int) bool) Interface {\r\n        return \u0026funcs{n, swap, less}\r\n    }\r\n\r\nIf there is evidence that this comes up often in real programs, we can easily add it later. But we'd need to see that evidence first.\r\n\r\n@suyash I assume that by sort.Search-like syntax you mean code like \r\n\r\n    sort.With(len(s), func(i, j int) { s[i], s[j] = s[j], s[i] }, func(i, j int) bool {\r\n        if s[i].Foo != s[j].Foo {\r\n            return s[i].Foo \u003c s[j].Foo\r\n        }\r\n        return s[i].Bar \u003c s[j].Bar\r\n    })\r\n\r\nas in the comment above (Aug 21). The reason not to prefer this is that this entire proposal is about making sort easier to use. The above is not substantially less code than you have to write today. It does avoid the new type, but it is still full of boilerplate. \r\n\r\nCompare to:\r\n\r\n    sort.Slice(s, func(i, j int) bool {\r\n        if s[i].Foo != s[j].Foo {\r\n            return s[i].Foo \u003c s[j].Foo\r\n        }\r\n        return s[i].Bar \u003c s[j].Bar\r\n    })\r\n\r\nThe new API is meant to be a helper, so it should be as helpful as possible - with as little boilerplate as possible - without restricting the scope of its help. My guess is that \u003e99% of sorting happens on slices, in which case the generality added by the boilerplate serves no useful purpose. If someone has evidence otherwise, I'd be happy to see it.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-03T17:24:26Z",
	"updated_at": "2016-10-03T17:24:37Z"
}
