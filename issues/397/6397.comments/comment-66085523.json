{
	"id": 66085523,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5 by **valyala**:\n\n\u003cpre\u003e\u003e The calls to initKey, cache.ctx(), and item.ctx() are all simple enough to be inlined,\nso the next call after the allocation of k is C.go_get_item_and_value, which ends up in\nC code and behaves as if none of its arguments contain pointers (because you cannot in\ngeneral pass Go pointers to C anyway)\n\nA thought \u0026k is more like a C pointer than go pointer, because it has explicit C type -\nC.struct_ybc_key.\n\nI'd prefer go compiler putting k on stack rather than allocating it on heap, because:\n- stack allocations are cheaper than heap allocations.\n- C.ybc_* functions don't remember pointer to k.\n\nAre there technical limits preventing from such a behavior?\n\nHow to force go compiler putting C.struct_* variables on stack? The following trick\ndoesn't help.\n\nvar k [1]C.struct_foo\nC.func(\u0026k[0])\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-18T12:28:55Z",
	"updated_at": "2014-12-08T10:35:13Z"
}
