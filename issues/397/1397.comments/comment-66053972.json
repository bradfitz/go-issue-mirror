{
	"id": 66053972,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eOkay, I added a little wrapper:\n\n\n/*\n#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;infiniband/verbs.h\u0026gt;\nstruct ibv_device **my_ibv_get_device_list(int *num_devices) {\n  struct ibv_device** devs = ibv_get_device_list(num_devices);\n  printf(\"devs=%p\\n\", devs);\n  printf(\"devs[0]-\u0026gt;node_type=%d\\n\", devs[0]-\u0026gt;node_type);\n  return devs;\n}\n*/\n\nIt prints:\n\ndevs=0x2223040\ndevs[0]-\u0026gt;node_type=1\ndeviceList=0x2223040\n\nso the pointer makes it through fine and the struct is intact.\n\nBut with the new cgo:\n\ndevs=0x8e70f8\ndevs[0]-\u0026gt;node_type=9303872\ndeviceList=0x8e70f8\n\nSo the pointers are fine, but the struct is already corrupted before Go gets it.\n\nAs a last resort, I ran valgrind 3.5.0 on the binary. It almost works! Things run for a\nwhile and then something segfaults. There's some interesting warnings that might warrant\nyour attention. Output attached.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1397/8/ib.go\"\u003eib.go\u003c/a\u003e (1099 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1397/8/valgrind.txt\"\u003evalgrind.txt\u003c/a\u003e (13040 bytes)",
	"user": {
		"login": "alberts",
		"id": 409689,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-01-12T06:14:43Z",
	"updated_at": "2014-12-22T05:53:45Z"
}
