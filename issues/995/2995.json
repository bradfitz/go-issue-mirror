{
	"id": 51279982,
	"number": 2995,
	"state": "closed",
	"title": "encoding/gob: \"wrong type for received field\" when decoding slices of pointers",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\n1. Try to encode, then decode a []*Object where Object.Children = []*Object\n\n\nWhat is the expected output?\nNo error\n\n\nWhat do you see instead? In Decoder.Decode: \u0026quot;gob: wrong type ([]*main.Object) for\nreceived field .Children\u0026quot;\n(because Object.Children[0].Children is nil?)\n\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)? 6g\n\n\nWhich operating system are you using? Linux\n\n\nWhich revision are you using? 7e665c5da059 tip\n\n\nExample:\n\nThis only seems to happen when you haven't first set a precedent by encoding a []Object\n(regardless if it's a different encoder). Running gob.Register on an []Object does not\nhave the same effect.\n\npackage main\n\nimport (\n\t\u0026quot;bytes\u0026quot;\n\t\u0026quot;encoding/gob\u0026quot;\n\t\u0026quot;testing\u0026quot;\n)\n\ntype Object struct {\n\tNum      int\n\tChildren []*Object\n}\n\nfunc TestGobPtrSlices(t *testing.T) {\n\tvar err error\n\tb := \u0026amp;bytes.Buffer{}\n\n\t// Works if you uncomment this\n\t// fos := []Object{\n\t// \tObject{1, nil},\n\t// \tObject{2, nil},\n\t// }\n\t// err = gob.NewEncoder(b).Encode(\u0026amp;fos)\n\t// if err != nil {\n\t// \tt.Fatal(\u0026quot;Couldn't encode:\u0026quot;, err)\n\t// }\n\t// var nfos []Object\n\t// err = gob.NewDecoder(b).Decode(\u0026amp;nfos)\n\t// if err != nil {\n\t// \tt.Fatal(\u0026quot;Couldn't decode:\u0026quot;, err)\n\t// }\n\n\tos := []*Object{\n\t\t\u0026amp;Object{1, nil},\n\t\t\u0026amp;Object{2, nil},\n\t}\n\terr = gob.NewEncoder(b).Encode(\u0026amp;os)\n\tif err != nil {\n\t\tt.Fatal(\u0026quot;Couldn't encode:\u0026quot;, err)\n\t}\n\n\tvar nos []*Object\n\terr = gob.NewDecoder(b).Decode(\u0026amp;nos)\n\tif err != nil {\n\t\tt.Fatal(\u0026quot;Couldn't decode:\u0026quot;, err)\n\t}\n\tfor _, v := range nos {\n\t\tassert(t, v)\n\t}\n}\n\nfunc assert(t *testing.T, o *Object) {\n\tif o.Num != 1 \u0026amp;\u0026amp; o.Num != 2 {\n\t\tt.Error(\u0026quot;o.Num not 1 or 2, but\u0026quot;, o.Num)\n\t}\n\tfor _, v := range o.Children {\n\t\tassert(t, v)\n\t}\n}\u003c/pre\u003e",
	"user": {
		"login": "patrickmn",
		"id": 72885,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2014-12-08T10:15:37Z",
	"created_at": "2012-02-12T01:47:25Z",
	"updated_at": "2016-06-24T21:27:06Z",
	"milestone": {
		"id": 1061233,
		"number": 7,
		"title": "Go1"
	}
}
