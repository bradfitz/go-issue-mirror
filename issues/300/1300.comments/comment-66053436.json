{
	"id": 66053436,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4 by **fazzi.andrea**:\n\n\u003cpre\u003e$ GOARM=5 ./all.bash\n\n[snip]\ncd image/png \u0026\u0026 gomake install\nmake[1]: Entering directory `/home/andrea/src/go/src/pkg/image/png'\n5g -o _go_.5 reader.go writer.go \ncas_mutex: not defined\nmake[1]: *** [goyacc] Error 1\nmake[1]: Leaving directory `/home/andrea/src/go/src/cmd/goyacc'\nmake: *** [../cmd/goyacc.install] Error 2\nmake: *** Waiting for unfinished jobs....\n\nThe scratchbox shipped with the maemo5 SDK targets ARMv7. Anyway, after further\ninvestigations I discovered that the problem resides in the qemu version 0.11.50\nincluded in that scratchbox distribution. In fact, cgo and gotest do run fine on both\nthe real N900 and on a newer version of qemu (0.13.0). To confirm that and in order to\nhave a development environment for ARM as-close-to-reality-as-possible, I decided to\nbuild a minimal, debian-based system running on a 2.6.32-versatile kernel compiled for\nARMv7 and to run it with a newer version of qemu. Fortunately, golang compiles fine on\nit. Honestely, I didn't run all the tests because it was too slow. I'll post a brief\nreport on the golang-nuts ML about the whole process.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-11-27T10:12:28Z",
	"updated_at": "2014-12-08T10:07:43Z"
}
