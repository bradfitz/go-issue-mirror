{
	"id": 51283432,
	"number": 5300,
	"state": "closed",
	"title": "crypto/tls: connection read no data without error from server side",
	"body": "by **xofyarg**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n1. start a tls server[1] writing in go with tls pkg\n2. connect the server using a client built with openssl\n3. send something to server\n\nWhat is the expected output?\nclient's data is received or error occured.\n\nWhat do you see instead?\nServer got two read event. The former returns no data or error. The latter gets the data\nthat client sent before.\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g\n\nWhich operating system are you using?\nOSX Lion/Linux-2.6.32/Linux-3.0\n\nWhich version are you using?  (run 'go version')\ngo1.0.3 and go1.1beta2\n\nPlease provide any additional information below.\n[1] go server: \u003ca href=\"http://play.golang.org/p/N_d4hjcRft\"\u003ehttp://play.golang.org/p/N_d4hjcRft\u003c/a\u003e\n\n[2] commands to generate server key pair:\n  openssl genrsa 1024 \u0026gt; srv.key\n  openssl req -new -x509 -nodes -sha1 -days 365 -key srv.key \u0026gt; srv.cer\n\n[3] client:\n  openssl: $ echo -n \u0026quot;hello\u0026quot; | openssl s_client -connect 127.0.0.1:8080 -tls1\n  python: \n    import socket\n    import ssl\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect(('localhost', 8080))\n    ss = ssl.wrap_socket(s, ssl_version=ssl.PROTOCOL_TLSv1)\n    ss.write('hello')\n    ss.close()\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:28:35Z",
	"created_at": "2013-04-17T03:23:49Z",
	"updated_at": "2016-06-24T22:38:14Z"
}
