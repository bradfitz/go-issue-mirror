{
	"id": 154491128,
	"body": "We have an application written in go who's main responsibility is to run\r\nanother program that's written in c++.\r\n\r\nThe c++ program needs to to be executed without signals blocked.\r\n\r\nSometimes the go program executes the c++ program with it's signals blocked.\r\n\r\nWe have tests for our go program, and some of them execute the c++ program.\r\n\r\nIf we execute one of those tests over and over, via a bash while loop, we\r\neventually see the c++ program get executed with signals blocked.\r\n\r\nWe need to send and receive SIGUSR2\r\n\r\nOur attempts to create a small reproduction case have failed.\r\n\r\nThanks.\r\n\r\nOn Thu, Nov 5, 2015 at 5:29 PM, Ian Lance Taylor \u003cnotifications@github.com\u003e\r\nwrote:\r\n\r\n\u003e I'm sorry, I don't grasp the details here, and the details matter. I see\r\n\u003e now that your original issue title refers to exec.Start, implying that you\r\n\u003e are using the os/exec package. You say that you have a shell script running\r\n\u003e \"go test\" in a loop.\r\n\u003e\r\n\u003e Is that Go program using os/exec?\r\n\u003e\r\n\u003e How exactly are you starting the program whose signals are blocked?\r\n\u003e\r\n\u003e What does the C++ daemonizing application have to do with this? Is that\r\n\u003e the test, or is that the production system?\r\n\u003e\r\n\u003e Which signal(s) exactly are you using?\r\n\u003e\r\n\u003e Do you have a small reproduction case that you could share?\r\n\u003e\r\n\u003e Thanks.\r\n\u003e\r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub\r\n\u003e \u003chttps://github.com/golang/go/issues/13164#issuecomment-154215099\u003e.\r\n\u003e\r\n",
	"user": {
		"login": "gabrielrussell",
		"id": 145985,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-06T18:18:56Z",
	"updated_at": "2015-11-06T18:21:47Z"
}
