{
	"id": 157075902,
	"body": "Hi @ianlancetaylor \r\n\r\nSorry for the lack of context :smile:. I have a program that allows the user to specify an arbitrary command to be run when data from an external system changes. In short, it does this:\r\n\r\n```go\r\n// Create an invoke the command\r\ncmd := exec.Command(shell, flag, command)\r\ncmd.Stdout = r.outStream\r\ncmd.Stderr = r.errStream\r\ncmd.Env = cmdEnv\r\nif err := cmd.Start(); err != nil {\r\n  return err\r\n}\r\n\r\ndone := make(chan error, 1)\r\ngo func() {\r\n  done \u003c- cmd.Wait()\r\n}()\r\n\r\n// ...\r\n```\r\n\r\nhttps://github.com/hashicorp/consul-template/blob/8a8a9301631244754792e5bf979d28ec6e3a9900/runner.go#L600-L612\r\n\r\nIn this case, the user is calling `haproxy`. This worked fine in Go 1.4, but is broken in Go 1.5. I'm just wondering if there's something I can change in my code to work around this behavior instead of telling users to refactor the arbitrary scripts they run.",
	"user": {
		"login": "sethvargo",
		"id": 408570,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-16T15:51:11Z",
	"updated_at": "2015-11-16T15:51:11Z"
}
