{
	"id": 228490709,
	"body": "\u003e As for format, one of my takeaways from @aclements' presentation about github.com/aclements/go-gg was that the benchmark format may be sufficient as long as we adequately structure the benchmark names. E.g., see the examples with names like BenchmarkDecode/text:digits/level:speed/size:1e4/gomaxprocs:8.\r\n\u003e \r\n\u003e /cc @aclements for thoughts on data format\r\n\r\nI don't know exactly what data you want to represent, but the [\"extended\" benchmark format](https://github.com/golang/proposal/blob/master/design/14313-benchmark-format.md) is pretty flexible. It's not great at hierarchical things, but it's not clear you really want that. And, of course, you'll be able to use all of the tools that know how to speak it (which isn't much yet, but the format is young). You could have a benchmark line for each (file, phase) where the phase is a property, and results for time, allocations, etc. You might just want to name each benchmark after each phase. Something like\r\n\r\n```\r\nBenchmarkPhielem/file:step_hide.go/gomaxprocs:4 1   9458 ns/op   100 bytes-allocated    2 allocations\r\n```\r\n\r\nMaybe you want the function in there. That may be too detailed, but it would be easy to write a tool that aggregated it in various ways after the fact, e.g., using https://godoc.org/github.com/aclements/go-misc/bench.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-24T23:45:59Z",
	"updated_at": "2016-06-24T23:45:59Z"
}
