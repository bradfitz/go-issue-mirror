{
	"id": 66070283,
	"body": "\u003ca id=\"c12\"\u003e\u003c/a\u003eComment 12:\n\n\u003cpre\u003eyeah. i agree it's improving.\nfor gccgo, as it can issue warnings, i think it's reasonable to issue a warning\nfor code that can be statically determined to cause runtime panics, so we only\nneed to consider this problem for the gc compiler.\n\ni agree the spec is to define valid Go program, and shouldn't hardwire which\ntype of errors must be diagnosed in it. \n\nhowever, as every go compiler must calculate the value of constant numbers,\ni think reject clearly out-of-range cases like make([]int, 1\u0026lt;\u0026lt;100) makes sense.\n\ni know if we do this, code snippet like this is no longer possible to compile for\na target where int is 32-bit:\nvar s []int\nif ^uint64(0) \u0026gt; 0xffffffff {\n  s = make([]int, 1\u0026lt;\u0026lt;34)\n} else {\n  s = make([]int, 1\u0026lt;\u0026lt;20)\n}\n\nbut we can always rewrite it into this:\nvar s []int\nsshift := 20\nif ^uint64(0) \u0026gt; 0xffffffff {\n  sshift := 34\n}\ns = make([]int, 1\u0026lt;\u0026lt;sshift)\n\nso this is no big deal imo.\u003c/pre\u003e",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-10-22T17:41:55Z",
	"updated_at": "2014-12-22T06:18:26Z"
}
