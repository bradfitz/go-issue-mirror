{
	"id": 167975084,
	"body": "Thanks for your comment!\r\n\r\nI trust your solution so I won't argue too much, but can you explain why your approach is simpler?\r\n\r\nAs far as I understand it exposes more types (involves users with token types while my representation encapsulates them), and requires type-checks in code that uses it. How is that making things easier for users?\r\n\r\nTo demonstrate, here is what traversal looks like using my library:\r\n```\r\n// Only one type involved - Node - encapsulates the rest of the XML package.\r\nfunc traverse(n Node) {\r\n  doTextSearch(n.Text())\r\n  for _, child := n.Children() {\r\n    traverse(child)\r\n  }\r\n}\r\n```\r\n\r\nAnd with your solution I guess it would look something like (correct me if I am wrong):\r\n```\r\nfunc traverse(c Child) {\r\n  // Need to understand the different types and their structure.\r\n  switch c := c.(type) {\r\n  case CharData:\r\n    doTextSearch([]byte(c))\r\n  case *Element:\r\n    for _, child := range c.Child {\r\n      traverse(child)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nCan you specify use cases that would be simpler to solve using your approach?\r\n\r\nMy library is always available so I won't argue :) but I am happy to learn from your insights.",
	"user": {
		"login": "fluhus",
		"id": 5978130,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-30T10:38:52Z",
	"updated_at": "2015-12-30T10:38:52Z"
}
