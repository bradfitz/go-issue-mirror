{
	"id": 66054772,
	"body": "\u003ca id=\"c7\"\u003e\u003c/a\u003eComment 7 by **wwaites**:\n\n\u003cpre\u003eNiemeyer: here is before and after - before, problematic, after non-problematic.\n\u003ca href=\"https://bitbucket.org/ww/gograph/changeset/851524fabf09\"\u003ehttps://bitbucket.org/ww/gograph/changeset/851524fabf09\u003c/a\u003e\n\nThe implementation of DiGraph itself is supposed to be for random access so is a good\nfit for maps or hash-tables. However testing its performance characteristics sometimes\nmeans some use of range. I actually think the benchmark result is a lie and that the\nDelEdge function is a good deal faster than it is reported. This because of the way\nrange is implemented and memory is allocated and freed despite the fact that the code\nappears reasonable on the surface which is making the benchmark measure primarily\n\"range\" instead of \"DelEdge\". No matter, it is possible to restructure that benchmark to\nreally measure what it is supposed to be doing.\n\nAgree this is getting slightly off-topic. My main point in writing these follow-ups was\nto point out that the initial examples were of course synthetic but that they were\ndistilled to isolate a problem encountered whilst doing something quite reasonable.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-02-22T11:12:10Z",
	"updated_at": "2014-12-08T10:08:48Z"
}
