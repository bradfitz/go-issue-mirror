{
	"id": 51277958,
	"number": 1541,
	"state": "closed",
	"title": "Memory or register leak preventing garbage collection in some circumstances",
	"body": "by **wwaites**:\n\n\u003cpre\u003eThe test:\n\n    * make a map\n    * populate it with many entries\n    * remove those entries\n    * lose the reference to the map (and explicitly call runtime.GC() even)\n    * make a new map\n    * populate it with many entries\n\nTwo versions:\n\n    \u003ca href=\"https://gist.github.com/837287\"\u003ehttps://gist.github.com/837287\u003c/a\u003e\n    \u003ca href=\"https://gist.github.com/837322\"\u003ehttps://gist.github.com/837322\u003c/a\u003e\n\nThe first does all this in one function. The second allocates and populates in an\nauxilliary function.\n\nThe first allocation and population uses up ~600Mb of RAM. This is never freed\nor released back to the OS (is this intentional?)\n\nIn the first version of the program, the second allocation uses up an additional\n~600Mb of RAM. The second version re-uses the memory that has already \nbeen allocated.\n\nSo the bug is that the first version of the program does not properly free memory.\n\nA possible additional bug is that garbage collection, when it happens, doesn't\nrelease allocated memory back to the OS.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Unfortunate"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 8,
	"closed_at": "2014-12-08T10:08:48Z",
	"created_at": "2011-02-21T16:46:01Z",
	"updated_at": "2016-06-24T19:25:40Z"
}
