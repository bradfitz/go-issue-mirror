{
	"id": 179979721,
	"number": 17275,
	"state": "open",
	"title": "cmd/compile: constant propagation into make() function",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\ngo1.7\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\namd64\r\n### What did you do?\r\n//  example1.go\r\npackage main\r\n\r\nfunc main() {\r\n    s := make([]byte, 1024, 1024)\r\n   _ = s\r\n}\r\ns will be allocated in stack and lookup assemble code not call runtime.makeslice\r\n\r\n// example2.go\r\npackage main\r\n\r\nfunc main() {\r\n    cap := 1024\r\n    s := make([]byte, 1024, cap)\r\n    _ = s\r\n}\r\ns will be allocated in heap and lookup assemble code there is runtime.makeslice why this ??\r\n\r\n// example3.go\r\npackage main\r\n\r\nfunc main() {\r\n    a := 100\r\n    if a\u003e1 {\r\n        a = 1000\r\n    }\r\n    b := interface{}(a)\r\n    _ = b\r\n}\r\nlookup the assemble code and see the compiler is very clever to opt that but in example2.go why don't do this\r\n",
	"user": {
		"login": "Garfiled",
		"id": 7149036,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		}
	],
	"comments": 2,
	"created_at": "2016-09-29T08:10:05Z",
	"updated_at": "2016-10-03T15:53:38Z",
	"milestone": {
		"id": 1748849,
		"number": 42,
		"title": "Go1.8Maybe"
	}
}
