{
	"id": 250418130,
	"body": "I asked the OP to log this bug. I wondered if it were possible for the\ncompiler, knowing that the cap var was effectively a single assignment\ncould the make function that operates on a constant bound be used.\n\nI don't think example 3.go is relevant to this discussion.\n\nOn Thu, 29 Sep 2016, 18:10 Garfiled \u003cnotifications@github.com\u003e wrote:\n\n\u003e Please answer these questions before submitting your issue. Thanks!\n\u003e What version of Go are you using (go version)?\n\u003e\n\u003e go1.7\n\u003e What operating system and processor architecture are you using (go env)?\n\u003e\n\u003e amd64\n\u003e What did you do?\n\u003e\n\u003e // example1.go\n\u003e package main\n\u003e\n\u003e func main() {\n\u003e s := make([]byte, 1024, 1024)\n\u003e _ = s\n\u003e }\n\u003e s will be allocated in stack and lookup assemble code not call\n\u003e runtime.makeslice\n\u003e\n\u003e // example2.go\n\u003e package main\n\u003e\n\u003e func main() {\n\u003e cap := 1024\n\u003e s := make([]byte, 1024, cap)\n\u003e _ = s\n\u003e }\n\u003e s will be allocated in heap and lookup assemble code there is\n\u003e runtime.makeslice why this ??\n\u003e\n\u003e // example3.go\n\u003e package main\n\u003e\n\u003e func main() {\n\u003e a := 100\n\u003e if a\u003e1 {\n\u003e a = 1000\n\u003e }\n\u003e b := interface{}(a)\n\u003e _ = b\n\u003e }\n\u003e lookup the assemble code and see the compiler is very clever to opt that\n\u003e but in example2.go why don't do this\n\u003e\n\u003e â€”\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/17275\u003e, or mute the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AAAcA2PdzEMeBqS-HPjEmBqP1Z-RQ0mVks5qu3JegaJpZM4KJsdG\u003e\n\u003e .\n\u003e\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-29T09:36:36Z",
	"updated_at": "2016-09-29T09:36:36Z"
}
