{
	"id": 82456921,
	"body": "On Tue, Mar 17, 2015 at 8:57 AM, sabroad \u003cnotifications@github.com\u003e wrote:\r\n\u003e If the Reader know that it only has len(p) bytes left, why forbid it to\r\n\u003e return EOF when it could potentially save another call to Read?\r\n\u003e\r\n\u003e You yourself do so with in the CL. Consider the case of len(p)==0.\r\n\u003e\r\n\u003e Further, where the following case was once covered by the docs, it is now\r\n\u003e undefined:\r\n\u003e\r\n\u003e r.Read(make([]byte, len(text)+1))  // len(text), EOF\r\n\u003e r.Read(r.Read([]byte{}))           // 0, EOF\r\n\r\nI don't understand. My CL clarifies that it's always valid to return 0,\r\nnil for len(p) == 0.\r\n\r\nIn your example, the first line can still return len(text), EOF, and that\r\nhaven't been changed. (Note \"can\", not \"must\")\r\n\r\nthe change is that the 2nd call is allowed to return 0, EOF or 0, nil.\r\nDepending how the Reader handles len(p) == 0 case.\r\n\r\nIdeally, you should never pass a zero-length []byte to Read. It's all.",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-03-17T16:35:44Z",
	"updated_at": "2015-03-17T16:39:13Z"
}
