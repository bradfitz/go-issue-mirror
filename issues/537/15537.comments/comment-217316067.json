{
	"id": 217316067,
	"body": "With Josh's fix, and sparse layered on top of that, the big memory pigs seem to be in register and stack allocation:\r\n\r\nregalloc:\r\n```\r\n   1280     448.16MB   448.16MB \t\t\ts.spillLive[b.ID] = append(s.spillLive[b.ID], spill.ID) \r\n   2170     345.39MB   345.39MB \t\t\t\t\tl = make([]liveInfo, 0, t.size()) \r\n```\r\n\r\nThis is a typical memory profile from one of the fattest compilations.\r\n```\r\n2530.22MB of 2766.97MB total (91.44%)\r\nDropped 356 nodes (cum \u003c= 13.83MB)\r\nShowing top 30 nodes out of 123 (cum \u003e= 17.13MB)\r\n      flat  flat%   sum%        cum   cum%\r\n  497.29MB 17.97% 17.97%   951.42MB 34.38%  cmd/compile/internal/ssa.(*regAllocState).regalloc\r\n  389.79MB 14.09% 32.06%   401.64MB 14.52%  cmd/compile/internal/ssa.(*regAllocState).computeLive\r\n  216.63MB  7.83% 39.89%   216.63MB  7.83%  cmd/compile/internal/ssa.(*Func).newValue\r\n  124.35MB  4.49% 44.38%   130.05MB  4.70%  cmd/compile/internal/ssa.(*stackAllocState).computeLive\r\n  114.73MB  4.15% 48.53%   311.30MB 11.25%  cmd/compile/internal/gc.(*state).lookupVarOutgoing\r\n  104.51MB  3.78% 52.31%   104.51MB  3.78%  cmd/compile/internal/gc.Nod\r\n   97.95MB  3.54% 55.85%   499.59MB 18.06%  cmd/compile/internal/ssa.(*regAllocState).init\r\n   90.50MB  3.27% 59.12%    90.50MB  3.27%  cmd/compile/internal/ssa.(*edgeState).set\r\n   86.55MB  3.13% 62.24%    87.05MB  3.15%  cmd/compile/internal/ssa.cse\r\n   86.08MB  3.11% 65.36%    86.08MB  3.11%  cmd/compile/internal/ssa.(*node32).insert\r\n   81.10MB  2.93% 68.29%    81.10MB  2.93%  cmd/compile/internal/ssa.schedule\r\n   78.81MB  2.85% 71.14%    82.37MB  2.98%  cmd/compile/internal/ssa.(*stackAllocState).stackalloc\r\n   70.90MB  2.56% 73.70%    70.90MB  2.56%  cmd/compile/internal/ssa.(*stackAllocState).buildInterferenceGraph\r\n   51.51MB  1.86% 75.56%    51.51MB  1.86%  cmd/compile/internal/gc.newliveness\r\n   49.70MB  1.80% 77.36%   250.65MB  9.06%  cmd/compile/internal/ssa.(*stackAllocState).init\r\n   48.81MB  1.76% 79.12%    48.81MB  1.76%  cmd/internal/obj.(*LSym).Grow\r\n   37.29MB  1.35% 80.47%    37.29MB  1.35%  cmd/compile/internal/ssa.(*Func).newSparseSet\r\n   37.01MB  1.34% 81.80%   169.70MB  6.13%  cmd/compile/internal/gc.(*state).locatePotentialPhiFunctions\r\n   30.10MB  1.09% 82.89%    30.10MB  1.09%  cmd/compile/internal/ssa.(*Func).setHome\r\n   29.32MB  1.06% 83.95%    29.32MB  1.06%  cmd/compile/internal/ssa.tighten\r\n   26.01MB  0.94% 84.89%    26.01MB  0.94%  cmd/compile/internal/gc.Prog\r\n   25.44MB  0.92% 85.81%    25.44MB  0.92%  cmd/compile/internal/ssa.liveValues\r\n      24MB  0.87% 86.68%       24MB  0.87%  cmd/compile/internal/gc.typ\r\n   20.51MB  0.74% 87.42%   115.10MB  4.16%  cmd/compile/internal/ssa.(*SparseTreeMapper).Insert\r\n   20.50MB  0.74% 88.16%    20.50MB  0.74%  cmd/compile/internal/ssa.critical\r\n   19.92MB  0.72% 88.88%    19.92MB  0.72%  cmd/compile/internal/gc.livenessepilogue\r\n      18MB  0.65% 89.53%       18MB  0.65%  cmd/compile/internal/gc.newblock\r\n   17.95MB  0.65% 90.18%    17.95MB  0.65%  cmd/compile/internal/gc.Naddr\r\n```\r\n\r\nThe `(*Func).newValue` consumption is still driven by `lookupVarOutgoing`:\r\n```\r\n   4057            .   196.58MB \tv := b.NewValue0A(line, ssa.OpFwdRef, t, name) \r\n   4058            .          . \ts.fwdRefs = append(s.fwdRefs, v) \r\n   4059     114.73MB   114.73MB \ts.defvars[b.ID][name] = v \r\n```",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-06T00:16:41Z",
	"updated_at": "2016-05-06T00:16:41Z"
}
