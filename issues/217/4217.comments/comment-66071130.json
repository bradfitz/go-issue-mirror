{
	"id": 66071130,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eThis looks like a dup of \u003ca href=\"https://golang.org/issue/353\"\u003eissue #353\u003c/a\u003e. Calling foo(b) stores b in a temporary variable that\nwon't be cleared until the function returns, and it until it does, the reference is\nfindable on the stack. Inlining definitly exacerbates this, because without inlining\nthere wouldn't be a separate slot for the copy of the variable, so calling the channel\nruntime would smash the pointers on the stack from the call to foo. The only sure-fire\nway to drop the references to pointers on the stack is to let the goroutine exit.\n\nI'll try to think of some way to help this case.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-10-09T01:11:59Z",
	"updated_at": "2014-12-08T10:22:28Z"
}
