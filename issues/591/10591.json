{
	"id": 71449642,
	"number": 10591,
	"state": "closed",
	"title": "runtime: reenable bad pointer check in GC",
	"body": "runtime/mbitmap.go says:\n\n\t\t// The following ensures that we are rigorous about what data\n\t\t// structures hold valid pointers.\n\t\t// TODO(rsc): Check if this still happens.\n\t\tif false {\n\t\t\t// Still happens sometimes. We don't know why.\n\t\t\tprintlock()\n\t\t\tprint(\"runtime:objectstart Span weird: p=\", hex(p), \" k=\", hex(k))\n\t\t\tif s == nil {\n\t\t\t\tprint(\" s=nil\\n\")\n\t\t\t} else {\n\t\t\t\tprint(\" s.start=\", hex(s.start\u003c\u003c_PageShift), \" s.limit=\", hex(s.limit), \" s.state=\", s.state, \"\\n\")\n\t\t\t}\n\t\t\tprintunlock()\n\t\t\tthrow(\"objectstart: bad pointer in unexpected span\")\n\t\t}\n\nThis needs to happen for Go 1.5. \nWe broke a lot of programs in Go 1.4 by insisting on this\n(for good reasons), and we don't want relapses during Go 1.5.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2015-06-24T22:31:18Z",
	"created_at": "2015-04-28T01:41:30Z",
	"updated_at": "2016-06-25T02:06:38Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
