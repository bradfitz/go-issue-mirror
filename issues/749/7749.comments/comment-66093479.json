{
	"id": 66093479,
	"body": "\u003ca id=\"c10\"\u003e\u003c/a\u003eComment 10:\n\n\u003cpre\u003e$ gdb -q jujud.test\nReading symbols from jujud.test...done.\n(gdb) r\nStarting program: /home/ubuntu/go/jujud.test \n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n[New Thread 0x7ffff77f5700 (LWP 15782)]\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000000000 in ?? ()\n(gdb) up\n#1  0x00000000004acd13 in strconv.init () at\n/home/ubuntu/src/launchpad.net/juju-core/cmd/jujud/machine.go:542\n542\t\tst, err := state.Open(info, state.DialOpts{}, environs.NewStatePolicy())\n(gdb) disas\nDump of assembler code for function strconv.init:\n   0x00000000004accd0 \u0026lt;+0\u0026gt;:\tmov    %fs:0xfffffffffffffff0,%rcx\n   0x00000000004accd9 \u0026lt;+9\u0026gt;:\tcmp    (%rcx),%rsp\n   0x00000000004accdc \u0026lt;+12\u0026gt;:\tja     0x4acce5 \u0026lt;strconv.init+21\u0026gt;\n   0x00000000004accde \u0026lt;+14\u0026gt;:\tcallq  0x42c950 \u0026lt;runtime.morestack00_noctxt\u0026gt;\n   0x00000000004acce3 \u0026lt;+19\u0026gt;:\tjmp    0x4accd0 \u0026lt;strconv.init\u0026gt;\n   0x00000000004acce5 \u0026lt;+21\u0026gt;:\tsub    $0x20,%rsp\n   0x00000000004acce9 \u0026lt;+25\u0026gt;:\tmovzbq 0xe015c0,%rax\n   0x00000000004accf2 \u0026lt;+34\u0026gt;:\tcmp    $0x0,%al\n   0x00000000004accf4 \u0026lt;+36\u0026gt;:\tje     0x4acd06 \u0026lt;strconv.init+54\u0026gt;\n   0x00000000004accf6 \u0026lt;+38\u0026gt;:\tcmp    $0x2,%al\n   0x00000000004accf8 \u0026lt;+40\u0026gt;:\tjne    0x4accff \u0026lt;strconv.init+47\u0026gt;\n   0x00000000004accfa \u0026lt;+42\u0026gt;:\tadd    $0x20,%rsp\n   0x00000000004accfe \u0026lt;+46\u0026gt;:\tretq   \n   0x00000000004accff \u0026lt;+47\u0026gt;:\tcallq  0x40f5f0 \u0026lt;runtime.throwinit\u0026gt;\n   0x00000000004acd04 \u0026lt;+52\u0026gt;:\tud2    \n   0x00000000004acd06 \u0026lt;+54\u0026gt;:\tmovb   $0x1,0xe015c0\n   0x00000000004acd0e \u0026lt;+62\u0026gt;:\tcallq  0x0\n=\u0026gt; 0x00000000004acd13 \u0026lt;+67\u0026gt;:\tlea    0xb10780,%rbx\n   0x00000000004acd1b \u0026lt;+75\u0026gt;:\tlea    (%rsp),%rbp\n   0x00000000004acd1f \u0026lt;+79\u0026gt;:\tmov    %rbp,%rdi\n   0x00000000004acd22 \u0026lt;+82\u0026gt;:\tmov    %rbx,%rsi\n...\n(gdb) x/5xb 0x00000000004acd0e\n0x4acd0e \u0026lt;strconv.init+62\u0026gt;:\t0xe8\t 0xed\t0x32 \t0xb5 \t0xff\n(gdb)\n\nEmitting a call 0x0 is clearly wrong, and the linker tried really hard to get the zero.\nIt clearly is emitting a reference to a symbol with address 0, presumably because it's\nnot in the binary. There's another later in the function but let's focus on the first\none. On my Mac I get:\n\n(gdb) disas 'strconv.init'\nDump of assembler code for function strconv.init:\n0x00000000000eda80 \u0026lt;strconv.init+0\u0026gt;:\tmov    %gs:0x8a0,%rcx\n0x00000000000eda89 \u0026lt;strconv.init+9\u0026gt;:\tcmp    (%rcx),%rsp\n0x00000000000eda8c \u0026lt;strconv.init+12\u0026gt;:\tja     0xeda95 \u0026lt;strconv.init+21\u0026gt;\n0x00000000000eda8e \u0026lt;strconv.init+14\u0026gt;:\tcallq  0x88610\n\u0026lt;runtime.morestack00_noctxt\u0026gt;\n0x00000000000eda93 \u0026lt;strconv.init+19\u0026gt;:\tjmp    0xeda80 \u0026lt;strconv.init\u0026gt;\n0x00000000000eda95 \u0026lt;strconv.init+21\u0026gt;:\tsub    $0x20,%rsp\n0x00000000000eda99 \u0026lt;strconv.init+25\u0026gt;:\tmovzbq 0x68711c,%rax\n0x00000000000edaa2 \u0026lt;strconv.init+34\u0026gt;:\tcmp    $0x0,%al\n0x00000000000edaa4 \u0026lt;strconv.init+36\u0026gt;:\tje     0xedab6 \u0026lt;strconv.init+54\u0026gt;\n0x00000000000edaa6 \u0026lt;strconv.init+38\u0026gt;:\tcmp    $0x2,%al\n0x00000000000edaa8 \u0026lt;strconv.init+40\u0026gt;:\tjne    0xedaaf \u0026lt;strconv.init+47\u0026gt;\n0x00000000000edaaa \u0026lt;strconv.init+42\u0026gt;:\tadd    $0x20,%rsp\n0x00000000000edaae \u0026lt;strconv.init+46\u0026gt;:\tretq   \n0x00000000000edaaf \u0026lt;strconv.init+47\u0026gt;:\tcallq  0x6d2e0 \u0026lt;runtime.throwinit\u0026gt;\n0x00000000000edab4 \u0026lt;strconv.init+52\u0026gt;:\tud2a   \n0x00000000000edab6 \u0026lt;strconv.init+54\u0026gt;:\tmovb   $0x1,0x68711c\n0x00000000000edabe \u0026lt;strconv.init+62\u0026gt;:\tcallq  0x1dcd80 \u0026lt;math.init\u0026gt;\n0x00000000000edac3 \u0026lt;strconv.init+67\u0026gt;:\tlea    0x491460,%rbx\n\nSo it's strconv.init calling math.init, but somehow math.init is gone. Back to the jujud\nbinary:\n\n$ gdb -q jujud.test\nReading symbols from jujud.test...done.\n(gdb) disas 'strconv.init'\nDump of assembler code for function strconv.init:\n   0x00000000004accd0 \u0026lt;+0\u0026gt;:\tmov    %fs:0xfffffffffffffff0,%rcx\n   0x00000000004accd9 \u0026lt;+9\u0026gt;:\tcmp    (%rcx),%rsp\n   0x00000000004accdc \u0026lt;+12\u0026gt;:\tja     0x4acce5 \u0026lt;strconv.init+21\u0026gt;\n   0x00000000004accde \u0026lt;+14\u0026gt;:\tcallq  0x42c950 \u0026lt;runtime.morestack00_noctxt\u0026gt;\n   0x00000000004acce3 \u0026lt;+19\u0026gt;:\tjmp    0x4accd0 \u0026lt;strconv.init\u0026gt;\n   0x00000000004acce5 \u0026lt;+21\u0026gt;:\tsub    $0x20,%rsp\n   0x00000000004acce9 \u0026lt;+25\u0026gt;:\tmovzbq 0xe015c0,%rax\n   0x00000000004accf2 \u0026lt;+34\u0026gt;:\tcmp    $0x0,%al\n   0x00000000004accf4 \u0026lt;+36\u0026gt;:\tje     0x4acd06 \u0026lt;strconv.init+54\u0026gt;\n   0x00000000004accf6 \u0026lt;+38\u0026gt;:\tcmp    $0x2,%al\n   0x00000000004accf8 \u0026lt;+40\u0026gt;:\tjne    0x4accff \u0026lt;strconv.init+47\u0026gt;\n   0x00000000004accfa \u0026lt;+42\u0026gt;:\tadd    $0x20,%rsp\n   0x00000000004accfe \u0026lt;+46\u0026gt;:\tretq   \n   0x00000000004accff \u0026lt;+47\u0026gt;:\tcallq  0x40f5f0 \u0026lt;runtime.throwinit\u0026gt;\n   0x00000000004acd04 \u0026lt;+52\u0026gt;:\tud2    \n   0x00000000004acd06 \u0026lt;+54\u0026gt;:\tmovb   $0x1,0xe015c0\n   0x00000000004acd0e \u0026lt;+62\u0026gt;:\tcallq  0x0\n   0x00000000004acd13 \u0026lt;+67\u0026gt;:\tlea    0xb10780,%rbx\n   0x00000000004acd1b \u0026lt;+75\u0026gt;:\tlea    (%rsp),%rbp\n   0x00000000004acd1f \u0026lt;+79\u0026gt;:\tmov    %rbp,%rdi\n   0x00000000004acd22 \u0026lt;+82\u0026gt;:\tmov    %rbx,%rsi\n   0x00000000004acd25 \u0026lt;+85\u0026gt;:\tmovsq  %ds:(%rsi),%es:(%rdi)\n   0x00000000004acd27 \u0026lt;+87\u0026gt;:\tmovsq  %ds:(%rsi),%es:(%rdi)\n   0x00000000004acd29 \u0026lt;+89\u0026gt;:\tcallq  0x0\n   0x00000000004acd2e \u0026lt;+94\u0026gt;:\tmov    0x10(%rsp),%rcx\n   0x00000000004acd33 \u0026lt;+99\u0026gt;:\tmov    0x18(%rsp),%rax\n   0x00000000004acd38 \u0026lt;+104\u0026gt;:\tmov    %rcx,0xdf8960\n   0x00000000004acd40 \u0026lt;+112\u0026gt;:\tmov    %rax,0xdf8968\n   0x00000000004acd48 \u0026lt;+120\u0026gt;:\tlea    0xa8e820,%rbx\n   0x00000000004acd50 \u0026lt;+128\u0026gt;:\tlea    (%rsp),%rbp\n   0x00000000004acd54 \u0026lt;+132\u0026gt;:\tmov    %rbp,%rdi\n   0x00000000004acd57 \u0026lt;+135\u0026gt;:\tmov    %rbx,%rsi\n   0x00000000004acd5a \u0026lt;+138\u0026gt;:\tmovsq  %ds:(%rsi),%es:(%rdi)\n   0x00000000004acd5c \u0026lt;+140\u0026gt;:\tmovsq  %ds:(%rsi),%es:(%rdi)\n   0x00000000004acd5e \u0026lt;+142\u0026gt;:\tcallq  0x0\n   0x00000000004acd63 \u0026lt;+147\u0026gt;:\tmov    0x10(%rsp),%rcx\n   0x00000000004acd68 \u0026lt;+152\u0026gt;:\tmov    0x18(%rsp),%rax\n   0x00000000004acd6d \u0026lt;+157\u0026gt;:\tmov    %rcx,0xdf8970\n   0x00000000004acd75 \u0026lt;+165\u0026gt;:\tmov    %rax,0xdf8978\n   0x00000000004acd7d \u0026lt;+173\u0026gt;:\tmovb   $0x2,0xe015c0\n   0x00000000004acd85 \u0026lt;+181\u0026gt;:\tadd    $0x20,%rsp\n   0x00000000004acd89 \u0026lt;+185\u0026gt;:\tretq   \n   0x00000000004acd8a \u0026lt;+186\u0026gt;:\tadd    %al,(%rax)\n   0x00000000004acd8c \u0026lt;+188\u0026gt;:\tadd    %al,(%rax)\n   0x00000000004acd8e \u0026lt;+190\u0026gt;:\tadd    %al,(%rax)\nEnd of assembler dump.\n(gdb) disas 'math.init'\nNo symbol \"math.init\" in current context.\n(gdb) quit\n$ nm jujud.test|grep math.init\n0000000000e015a1 B math.initdone.\n$ \n\nmath.init is well and truly missing from the binary, despite being called. That's not\ngood. You'd think the linker's dead code walk was broken, but:\n\n$ go test -ldflags '-v -v' -c launchpad.net/juju-core/cmd/jujud 2\u0026gt;log\n$ grep strconv.init log\nmarktext strconv.init\n$ grep math.init log\nmarktext math.init\nmarktext math.init·1\n$ nm jujud.test|grep math.ini\n0000000000e015a1 B math.initdone.\n$ \n\n$ go test -ldflags '-a -v -v' -c launchpad.net/juju-core/cmd/jujud 2\u0026gt;log\n$ grep strconv.init log\nmarktext strconv.init\n4accd0\tstrconv.init        \n$ grep math.init log\nmarktext math.init\nmarktext math.init·1\n$\n\nmath.init is supposed to be there - it was marked - it's just not in the output.\nRunning 6l under valgrind did not turn anything up.\n\nOkay, so it got marked but it is not in the ctxt-\u0026gt;textp walk. The usual reason you\nmiss something in a linked list is that you inserted the same thing twice, which\nshort-circuited a whole swath of list. I put some checking in to make sure we aren't\ninserting duplicates, and lo and behold! we are. And the symbol is named '.dup' which is\na nice touch.\n\nCL on its way.\u003c/pre\u003e\n\n\n\n_Status changed to **Started**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-04-16T03:24:08Z",
	"updated_at": "2014-12-22T06:33:52Z"
}
