{
	"id": 171526687,
	"number": 16749,
	"state": "open",
	"title": "compress/zlib: Writer appears to ignore underlying writer errors at times.",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\ngo version go1.7 darwin/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/simon.fell/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -gno-record-gcc-switches -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\n\r\n3. What did you do?\r\nIt seems like there's a condition where the zlib Writer doesn't notice that the Writer its writing to returned an error, the test below fails for me on go 1.7 on OSX, passes on go 1.6 linux and go 1.6.3 on osx. The number of writes to zlib seems to be significant in reproducing the error.\r\n\r\nThe test has a writer that returns an error for the 4th write to the writer, however neither the call the zlib.Writer.Write or to zlib.Writer.Close surface the error.\r\n\r\nWhen running the test, it'll fail with\r\n--- FAIL: Test_WriteErrorCheck (0.00s)\r\n\tcompress_test.go:54: Write count=1, len=2\r\n\tcompress_test.go:54: Write count=2, len=240\r\n\tcompress_test.go:54: Write count=3, len=240\r\n\tcompress_test.go:54: Write count=4, len=240\r\n\tcompress_test.go:54: Write count=5, len=240\r\n\tcompress_test.go:54: Write count=6, len=240\r\n\tcompress_test.go:54: Write count=7, len=240\r\n\tcompress_test.go:54: Write count=8, len=240\r\n\tcompress_test.go:54: Write count=9, len=240\r\n\tcompress_test.go:54: Write count=10, len=240\r\n\tcompress_test.go:54: Write count=11, len=240\r\n\tcompress_test.go:54: Write count=12, len=240\r\n\tcompress_test.go:54: Write count=13, len=240\r\n\tcompress_test.go:54: Write count=14, len=240\r\n\tcompress_test.go:54: Write count=15, len=240\r\n\tcompress_test.go:54: Write count=16, len=240\r\n\tcompress_test.go:54: Write count=17, len=149\r\n\tcompress_test.go:54: Write count=18, len=4\r\n\tcompress_test.go:54: Write count=19, len=4\r\n\tcompress_test.go:38: Underlying writer returned error, that wasn't surfaced to zlib caller [total num writes=2000]\r\n\tcompress_test.go:54: Write count=1, len=2\r\n\tcompress_test.go:54: Write count=2, len=240\r\n\tcompress_test.go:54: Write count=3, len=240\r\n\tcompress_test.go:54: Write count=4, len=240\r\n\tcompress_test.go:54: Write count=5, len=240\r\n\tcompress_test.go:54: Write count=6, len=240\r\n\tcompress_test.go:54: Write count=7, len=240\r\n\tcompress_test.go:54: Write count=8, len=134\r\n\tcompress_test.go:54: Write count=9, len=4\r\n\tcompress_test.go:54: Write count=10, len=4\r\n\tcompress_test.go:38: Underlying writer returned error, that wasn't surfaced to zlib caller [total num writes=2000]\r\nFAIL\r\nFAIL\t_/Users/simon.fell/code/zlibtest\t0.008s\r\n\r\nI thought this may of been related to the compression algo for zlib.BestSpeed, but also seem same issue with DefaultCompression as well.\r\n\r\n\r\n4. What did you expect to see?\r\nExpect to see the test pass [as it does on go 1.6]\r\n\r\n5. What did you see instead?\r\ntest fails, no error is surfaces from the zlib Writer.\r\n\r\n\r\n\r\npackage main\r\n\r\nimport (\r\n\t\"compress/zlib\"\r\n\tcrand \"crypto/rand\"\r\n\t\"errors\"\r\n\t\"testing\"\r\n)\r\n\r\nvar errWriteFailed = errors.New(\"I/O Error\")\r\n\r\nfunc Test_WriteErrorCheck(t *testing.T) {\r\n\tsrc := make([]byte, 2000)\r\n\tcrand.Read(src)\r\n\twrites := make([][]byte, 2000)\r\n\tfor i := range writes {\r\n\t\twrites[i] = src[i/2 : i/2+10]\r\n\t}\r\n\tcheckWriteErrorSurfaced(t, zlib.BestSpeed, writes)\r\n\tcheckWriteErrorSurfaced(t, zlib.DefaultCompression, writes)\r\n}\r\n\r\nfunc checkWriteErrorSurfaced(t *testing.T, compLevel int, writes [][]byte) bool {\r\n\tw := \u0026errorWriter{t: t}\r\n\tc, err := zlib.NewWriterLevel(w, compLevel)\r\n\tif err != nil {\r\n\t\tt.Fatalf(\"Unable to construct zlib.Writer: %v\", err)\r\n\t}\r\n\tvar errw error\r\n\tfor _, w := range writes {\r\n\t\t_, errw = c.Write(w)\r\n\t\tif errw != nil {\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\terrc := c.Close()\r\n\tif errc == nil \u0026\u0026 errw == nil {\r\n\t\tt.Errorf(\"Underlying writer returned error, that wasn't surfaced to zlib caller [total num writes=%d]\", len(writes))\r\n\t\treturn false\r\n\t}\r\n\tt.Logf(\"%v\", errw)\r\n\tt.Logf(\"%v\", errc)\r\n\treturn true\r\n}\r\n\r\n// errorWriter is an io.Writer that returns an error for the 4th write\r\ntype errorWriter struct {\r\n\tt          *testing.T\r\n\twriteCount int\r\n}\r\n\r\nfunc (w *errorWriter) Write(d []byte) (int, error) {\r\n\tw.writeCount++\r\n\tw.t.Logf(\"Write count=%d, len=%d\", w.writeCount, len(d))\r\n\tif w.writeCount == 4 {\r\n\t\treturn 0, errWriteFailed\r\n\t}\r\n\treturn len(d), nil\r\n}\r\n",
	"user": {
		"login": "superfell",
		"id": 399098,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2016-08-16T21:50:40Z",
	"updated_at": "2016-08-17T00:00:29Z",
	"milestone": {
		"id": 1944056,
		"number": 44,
		"title": "Go1.7.1"
	}
}
