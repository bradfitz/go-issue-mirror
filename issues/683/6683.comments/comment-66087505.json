{
	"id": 66087505,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eArguably, this is _not_ a compiler error as in general such cases cannot be detected\nwithout more sophisticated data flow analysis. For instance, the same situation appears\nin:\n\npackage p\n\ntype T struct{}\n\nfunc (T) m() int { return y }\n\nvar y = f()\n\nfunc f() int {\n\tvar x interface {\n\t\tm() int\n\t} = T{}\n\treturn x.m()\n}\n\nwhere we have a cycle but the compiler doesn't detect it. Again, in this specific case\nit could, but in general, the (conservative set of) dynamic type of x inside f may not\nbe computable w/o some form of data flow analysis, which we are explicitly not requiring.\n\nThus, perhaps simply the spec needs to be clarified here (what to do when methods are\ninvoked).\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-29T20:35:10Z",
	"updated_at": "2014-12-08T10:37:05Z"
}
