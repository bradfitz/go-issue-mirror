{
	"id": 51276762,
	"number": 654,
	"state": "closed",
	"title": "Using function calls within slice expressions fails",
	"body": "by **peterbourgon**:\n\n\u003cpre\u003eGiven the program:\n\n  package main\n\n  import \u0026quot;fmt\u0026quot;\n\n  func f() int { return 2 }\n\n  func main() {\n      y := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n      a, b := f(), 2*f()\n      fmt.Printf(\u0026quot;%v\\n\u0026quot;, y[a:b]) // ok\n      fmt.Printf(\u0026quot;%v\\n\u0026quot;, y[a:2*f()]) // ok\n      fmt.Printf(\u0026quot;%v\\n\u0026quot;, y[f():b]) // ok\n      fmt.Printf(\u0026quot;%v\\n\u0026quot;, y[f():2*f()]) // wrong\n  }\n\nThe line that specifies both slice boundaries as function calls produces unexpected\nresults. The \nfull output of that program is:\n\n  [2 3]\n  [2 3]\n  [2 3]\n  [0 1 2 3]\n\nGOARCH=amd64\nGOOS=darwin\nCompiler: 6g/6l\nhg identify: b149459ad2ff+ tip\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2014-12-08T10:05:24Z",
	"created_at": "2010-03-07T19:37:39Z",
	"updated_at": "2016-06-24T19:14:22Z"
}
