{
	"id": 66081436,
	"body": "\u003ca id=\"c16\"\u003e\u003c/a\u003eComment 16:\n\n\u003cpre\u003eI see Carl did some additional work here:\n\u003ca href=\"https://code.google.com/r/carlchatfield-go-arrayof-structof/source/list\"\u003ehttps://code.google.com/r/carlchatfield-go-arrayof-structof/source/list\u003c/a\u003e\n\nCould I ask: Carl, where does this stand? Is it done?\n\nI tried the above patch from Mar 2, made it work with a little adaptation. I think I'm\nseeing the string-comparison issue that Ian pointed out. For example this test fails\n(below). I'm not sure why it fails or how to fix it (any insight Ian--what was your\nobservation?)\n\nJust wanted to ask where things stood with Carls' work and get everyone else's input on\nwhere things stand. Is development on this going on elsewhere?\n\nThanks.\nJason\n\n\n// failing test:\npackage main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"testing\"\n)\n\nfunc TestStructOfTwoStrings(t *testing.T) {\n=\u003e  st := reflect.StructOf([]reflect.StructField{{Name: \"a\", Type: reflect.TypeOf(\"\")},\n{Name: \"b\", Type: reflect.TypeOf(\"\")}})\n    v1 := reflect.New(st).Elem()\n    v2 := reflect.New(st).Elem()\n    i1 := v1.Interface()\n    i2 := v2.Interface()\n\n    if i1 != i2 {\n        fmt.Printf(\"constructed struct %v not equal to itself\", v1.Interface())\n        panic(\"but it should be!\")\n    }\n    v1.FieldByName(\"a\").Set(reflect.ValueOf(\"hello\"))\n    if i1, i2 := v1.Interface(), v2.Interface(); i1 == i2 {\n        fmt.Printf(\"constructed structs %v and %v should not be equal\", i1, i2)\n        panic(\"but they were!\")\n    }\n\n    v2.FieldByName(\"a\").Set(reflect.ValueOf(\"hello\"))\n    if v1 != v2 {\n        fmt.Printf(\"v1 = %#v\\n\", v1)\n        fmt.Printf(\"v2 = %#v\\n\", v2)\n        panic(\"v1 and v2 should be value equal now! Shouldn't they?\") // currently failing here.                                                                                         \n    }\n\n    st = reflect.StructOf([]reflect.StructField{{Name: \"X\", Tag: \"x\", Type: reflect.TypeOf([]int(nil))}})\n    v1 = reflect.New(st).Elem()\n    shouldPanic(func() { _ = v1.Interface() == v1.Interface() })\n}\u003c/pre\u003e",
	"user": {
		"login": "glycerine",
		"id": 445247,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-06-09T14:38:11Z",
	"updated_at": "2014-12-08T10:31:31Z"
}
