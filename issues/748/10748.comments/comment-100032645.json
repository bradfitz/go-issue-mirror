{
	"id": 100032645,
	"body": "Let me introduce an use case:\r\n\r\nThe [Gin Framework](https://github.com/gin-gonic/gin) provides some facilities for error management during a http request. Basically it provides a tool to collect any error or several ones. Each error is defined internally as:\r\n\r\n```go\r\ntype errorMsg struct {\r\n\tError error       `json:\"error\"`\r\n\tType  int         `json:\"-\"`\r\n\tMeta  interface{} `json:\"meta\"`\r\n}\r\n```\r\n\r\nThen, by using a middleware you can read the list of `errors`, and do whatever you want: write the errors is a log, send to sentry, write in the http response...\r\n\r\nSimple error handler middleware:\r\n\r\n```go\r\nfunc errorHandler(c *gin.Context) {\r\n    c.Next()\r\n\r\n    if len(c.Errors) \u003e 0 {\r\n        c.JSON(-1, c.Errors) // this does not work as expected\r\n    }\r\n}\r\n```\r\n\r\nAs you can see, if the canonical value of the `Error` field is an instance of `*errorString` it will not work as expected since the error message is not marshalled.\r\n",
	"user": {
		"login": "manucorporat",
		"id": 127379,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-05-07T21:57:36Z",
	"updated_at": "2015-05-07T22:03:59Z"
}
