{
	"id": 66055975,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eHere's a concrete example:\n\nfunc genericSwap(x []reflect.Value) []reflect.Value {\n    return []reflect.Value{x[1], x[0]}\n}\n\nfunc MakeSwap(v interface{}) {   // v is a *func(t1, t2)(t2, t1)\n    vv := reflect.ValueOf(v).Elem()\n    vv.Set(reflect.MakeFunc(v.Type(), genericSwap))\n}\n\nand then a caller can write\n\nvar f func(int, int) (int, int)\notherpkg.MakeSwap(\u0026f)\nprintln(f(1,2))  // 2, 1\n\nvar g func(string, int) (int, string)\notherpkg.MakeSwap(\u0026g)\nprintln(g(\"hello\", 42)) // 42, \"hello\"\n\nThis is a dumb but I hope illustrative example.\nThe point is that MakeFunc turns a function with a\nreflecty type signature into one with a specific\nconcrete signature, so that you can use it with things\nthat don't know/care about reflect.\n\nIt's for creating Func Values where there wasn't\npreviously a function.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-07-26T14:46:33Z",
	"updated_at": "2014-12-08T10:09:47Z"
}
