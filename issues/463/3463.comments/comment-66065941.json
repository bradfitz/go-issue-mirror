{
	"id": 66065941,
	"body": "\u003ca id=\"c14\"\u003e\u003c/a\u003eComment 14:\n\n\u003cpre\u003eAfter the most recent CL listed, I compared these two programs. They avoid buffering\nissues and other unnecessary overheads so are equivalent; it is a fair comparison.\n\nC:\n#include \u0026lt;stdio.h\u0026gt;\n\nint main(void) {\nint i;\nchar buf[256];\n  for (i = 0; i \u0026lt; 1 \u0026lt;\u0026lt; 25; i++) {\n    sprintf(buf, \"%d\\n\", i);\n  }\n} \n\nGo:\n\npackage main\n\nimport \"bytes\"\nimport \"fmt\"\n\nfunc main() {\n\tvar b bytes.Buffer\n\tfor i := 0; i \u0026lt; 1\u0026lt;\u0026lt;25; i++ {\n\t\tfmt.Fprintln(\u0026b, i)\n\t\tb.Reset()\n\t}\n}\n\nTimes:\n\n% go build x.go \u0026\u0026 time x\n\nreal\t0m12.041s\nuser\t0m12.315s\nsys\t0m1.018s\n% gcc -O2 x.c \u0026\u0026 time a.out\n\nreal\t0m6.829s\nuser\t0m6.819s\nsys\t0m0.006s\n% \n\nThat's well within a factor of two, which is reasonable considering the unavoidable\noverheads of Go (reflection, interfaces, type safety).\n\nAccording to an earlier report by me, it used to be 3X, so we've gained somewhat. More\ncould be done, of course.\u003c/pre\u003e",
	"user": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-22T20:27:14Z",
	"updated_at": "2014-12-22T06:13:14Z"
}
