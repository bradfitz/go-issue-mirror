{
	"id": 234735344,
	"body": "I've been thinking about this more in response to an internal bug. I think there are several confusions around the heap profile, but underpinning many of them is the subtle but crucial difference between a *heap* profile and a *memory* profile. People are confused because they're trying to account for their process' RSS, but the memory reported by the OS and the memory reported by the heap profile are off by, well, about a factor of 2. If you don't understand how the Go memory manager works, it's natural to think that that memory must be going somewhere else, or that the heap profile is wrong.\r\n\r\nI proposed in #15848 that the heap profile should also report totals for non-GC'd runtime allocation pools (stack memory, etc), mainly for debugging. But we could take that a step further and also report the amount of \"unused heap\" memory (there's probably a clearer term), so that the total reported by the heap profile actually matches the amount of memory the OS is reporting. I believe this information is already in the raw heap profile, it just isn't shown in any way. This wouldn't allay all confusion or solve all problems with the heap profile, but it would at least point people at why the allocation total doesn't match the process' RSS.\r\n\r\n(For another common situation, figuring out why your process OOM'ed, I think switching to core files for the heap dump would put us on a path to being able to write a separate tool for answering this question.)",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-23T19:20:42Z",
	"updated_at": "2016-07-23T19:20:42Z"
}
