{
	"id": 235048896,
	"body": "I'm warming to Dmitry's original proposal, though I believe I think about it somewhat differently: rather than having several new modes (people already don't know about/are confused by the existing modes), the heap profiler should understand not just the \"live\" allocations as of the last GC, but also the allocations that became \"dead\", and it should show both simultaneously (in a visually distinguishable way). I'm also assuming the new profile information should represent the heap at the beginning of mark termination, not the beginning of GC (maybe that's really what Dmitry meant).\r\n\r\nUnlike a \"current heap profile\", this \"dead\" heap profile is reasonably stable, since it captures the last heap peak, just like the existing profile captures the last heap trough. It's not as stable as the existing profile, since invoking runtime.GC() is idempotent against the existing profile, but not against the peak profile; however, it is stable in the steady state. I think it's also reasonably easy to explain.\r\n\r\nIf we can have pprof show a unified profile indicating both live and dead allocation samples as of the last GC, it would be significantly easier to profile transient garbage. I think this would be generally more useful than --alloc_* for two reasons: 1) it shows instantaneous garbage rather than cumulative garbage, which is more useful in multi-phase or long-running applications and in tracking down transient heap growth, and 2) it extends the current default in-use view, so people could get a lot more information from the default view without having to know about or dive in to the other modes.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-25T18:54:17Z",
	"updated_at": "2016-07-25T18:54:17Z"
}
