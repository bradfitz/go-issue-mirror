{
	"id": 168734047,
	"body": "I'm increasingly of the opinion that it's more important to have a mode that reports the current state of the heap than it is to have the \"stable\" mode that we have now (that is, I'm not necessarily opposed to having both, but the current state should be the default and if we only have one, it should be the current state).\r\n\r\nMost often, people want to answer the question \"what is consuming my process's memory\"? The \"stable\" view does not answer that, but a \"current\" view would. This question comes in many related flavors, such as \"why is my RSS *x*?\" and \"why was my process OOM-killed?\" People try to answer this question using the \"stable\" heap profile and get confused and unhappy (rightfully so) when the answer doesn't make sense (and doesn't match MemStats) and they blame it on the Go memory manager.\r\n\r\nThe \"stable\" view is interesting and certainly well-defined, but I'm having trouble formulating exactly what question it answers, and that's a problem. It's something like \"where is my retained memory going?\", but that seems like clearly a secondary question to \"where is my memory going?\" (\"*Why* is my memory being retained?\" is a very useful question, but we don't have any tool that can answer that right now.)\r\n\r\nThe \"stable\" view can also be actively misleading. For example, if there are large allocations that quickly become garbage, they will almost never show up in the \"stable\" view, but they would be likely to show up in a \"current\" view. This makes the \"current\" view more useful for answering the question \"why is my process garbage collecting as often as it is?\" Strictly speaking, this does show up in the raw data exported by the runtime as large values of both allocated and freed memory at a site, but most analysis tools reveal only the difference between allocated and freed and I do not believe complicating the presentation of the data is the answer to this (even members of the Go team at Google I've spoken with who have dealt with this problem didn't realize this raw data was there).\r\n\r\nThe \"stable\" view is also currently slightly wrong, I think. I haven't checked this in detail, but I think it currently counts floating garbage; it would have to delay by yet one more GC cycle to eliminate this. This is only tangentially related to this issue, but it is related in that it seems clear to me we don't want to delay the data even more than we currently do, and that suggests that delaying the data by any significant amount is a mistake.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-04T16:59:11Z",
	"updated_at": "2016-01-04T16:59:11Z"
}
