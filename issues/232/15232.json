{
	"id": 147369453,
	"number": 15232,
	"state": "closed",
	"title": "encoding/json: Unmarshal ignore the exact case and match the case-intensitive one and throw an error",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\u003ego version go1.4.2 darwin/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\u003eGOARCH=\"amd64\"\r\nGOBIN=\"/usr/local/go/bin\"\r\nGOCHAR=\"6\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/myName/Projects/test/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\n\r\n3. What did you do?\r\nI want to get the property of an object from neo4j and there is two properties with the same name but one is upper case and the other is lower case. And their type is different. The code is like\r\n\r\n\u003epackage main\r\nimport (\r\n\t\"myProject/config\"\r\n\t\"myProject/log\"\r\n\t\"myProject/service/neo4j\"\r\n)\r\ntype MetaData struct {\r\n\tID   int64  `json:\"ID\"`\r\n\tName string `json:\"name\"`\r\n}\r\nfunc main() {\r\n\tconfig.Init()\r\n\tcompID := int64(3)\r\n\tpreData := MetaData{}\r\n\terr := neo4j.REST.GetNodeProperty(compID, \u0026preData)\r\n\tlog.Info.Println(\"result is\", preData.Name)\r\n\tlog.Info.Println(\"error is\", err)\r\n}\r\n\r\nThe Get function called \r\n`func Unmarshal(data []byte, v interface{}) error `\r\nin https://golang.org/src/encoding/json/decode.go\r\nneo4j data is like \r\n`\r\n{\r\n    id: 3,\r\n    Name: [1,2,3],\r\n    name: \"test\"\r\n}\r\n`\r\n\r\nwhich Name is an array and name is a string\r\n\r\n4. What did you expect to see?\r\nit should get the lower case name property and ignore the upper case Name property\r\n\r\n5. What did you see instead?\r\nerror is json: cannot unmarshal array into Go value of type string\r\n\r\n",
	"user": {
		"login": "iCoolchar",
		"id": 18082563,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-04-11T14:57:06Z",
	"created_at": "2016-04-11T09:36:10Z",
	"updated_at": "2016-04-11T14:57:06Z"
}
