{
	"id": 51286391,
	"number": 7232,
	"state": "open",
	"title": "x/net/html: ParseFragment fails to parse sub-table elements in the root position",
	"body": "by **algorithmicimperative**:\n\n\u003cpre\u003e1. Use `html.ParseFragment` to parse a fragment of HTML where the root elements are\n`\u0026lt;tbody\u0026gt;`, `\u0026lt;tr\u0026gt;` or `\u0026lt;td\u0026gt;` (and probably other table sub-elements)\n\nFor example:\n\ns := `\u0026lt;td\u0026gt;first\u0026lt;/td\u0026gt;\n    \u0026lt;td\u0026gt;second\u0026lt;/td\u0026gt;\n    \u0026lt;td\u0026gt;third\u0026lt;/td\u0026gt;\n`\ndoc, err := html.ParseFragment(strings.NewReader(s), \u0026amp;html.Node{\n    Type: html.ElementNode,\n    Data: \u0026quot;body\u0026quot;,\n    DataAtom: atom.Body,\n})\n\n\n2. Check the result `fmt.Printf(\u0026quot;%#v\\n\u0026quot;, doc)`\n\n\nWhat is the expected output?\n\n`[]*html.Node` of 3 `td` elements\n\n\nWhat do you see instead?\n\n`[]*html.Node` of a single text node containing the `first second third` text.\n\n\nWhich operating system are you using? Linux\n\n\nWhich version are you using?  1.2\n\n\n\nParseFragment works fine with other semantically incorrect structures, like\n`\u0026lt;option\u0026gt;` elements. Has trouble with table sub-elements though.\n\nIf this isn't a bug and is failing by design, perhaps we need something like\n`atom.DocumentFragment` that will receive any arbitrary HTML.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2014-01-29T04:15:09Z",
	"updated_at": "2015-04-14T19:16:58Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
