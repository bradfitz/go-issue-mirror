{
	"id": 66071552,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5 by **jlmoiron**:\n\n\u003cpre\u003eI was running into this from another direction, downloading over https, and wrote a\nprogram that demonstrates the issue, not through lower footprint but increased CPU\nutilization.  The program is on the playground here:\n\n\u003ca href=\"http://play.golang.org/p/chCbgqS_ls\"\u003ehttp://play.golang.org/p/chCbgqS_ls\u003c/a\u003e\n\nIt is almost certainly possible to create a more straightforward example that passes\ndata straight through the crypto functions without relying on the network, but I was\ntrying to see if the issue was related to fetching multiple ssl streams at once or not\nand wanted to isolate this anyway.\n\nA sample pprof topN output on a linux-64bit machine:\n\nTotal: 953 samples\n     472  49.5%  49.5%      472  49.5% crypto/aes.decryptBlockGo\n     302  31.7%  81.2%      785  82.4% crypto/cipher.(*cbcDecrypter).CryptBlocks\n      85   8.9%  90.1%       85   8.9% crypto/sha1.block\n      36   3.8%  93.9%       36   3.8% runtime.memmove\n       9   0.9%  94.9%      479  50.3% crypto/aes.decryptBlock\n       5   0.5%  95.4%      483  50.7% crypto/aes.(*aesCipher).Decrypt\n       4   0.4%  95.8%        4   0.4% runtime.futex\n       3   0.3%  96.1%        3   0.3% ifaceeq1\n       3   0.3%  96.4%        9   0.9% syscall.read\n       2   0.2%  96.6%        2   0.2% crypto/hmac.(*hmac).tmpPad\n       2   0.2%  96.9%        5   0.5% crypto/sha1.(*digest).Sum\n       2   0.2%  97.1%        2   0.2% netpollblock\n\nThis doesn't appear to be limited to aes, as downloading from a different source\n(unfortunately an internal server) gave me this pprof output:\n\nTotal: 1210 samples\n     813  67.2%  67.2%      813  67.2% crypto/des.permuteBlock\n     280  23.1%  90.3%     1016  84.0% crypto/des.feistel\n      31   2.6%  92.9%       67   5.5% compress/flate.(*compressor).deflate\n      21   1.7%  94.6%     1118  92.4% crypto/des.cryptBlock\n       8   0.7%  95.3%     1125  93.0% crypto/cipher.(*cbcDecrypter).CryptBlocks\n       6   0.5%  95.8%        6   0.5% compress/flate.(*compressor).findMatch\n       6   0.5%  96.3%        6   0.5% encoding/binary.bigEndian.PutUint64\n       5   0.4%  96.7%       19   1.6% compress/flate.(*huffmanEncoder).bitCounts\n       5   0.4%  97.1%       10   0.8% runtime.mallocgc\n       5   0.4%  97.5%        5   0.4% runtime.settype_flush\n\nThis was with `go version devel +98b396da54db Sun Apr 28 00:18:11 2013 +1000 linux/amd64`\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-04-30T02:44:36Z",
	"updated_at": "2014-12-08T10:22:50Z"
}
