{
	"id": 163161995,
	"number": 16225,
	"state": "closed",
	"title": "proposal: add functionality to remove repetitive if err != nil return",
	"body": "Great language but kind of tired of writing:\r\n\r\n```go\r\nif( err != nil ){\r\nreturn PrimaryData{}, err\r\n}\r\n```\r\n\r\nProposing something similar to 'defer' except with a condition where you declare the statement after the variable is defined.  Using 'try' in the example but feel free to replace 'try' with your favorite exception handler like 'rescue' et al.  If the condition in the 'try' is true the block executes.  Currently, thinking the block should always have a return so it only executes once.  Thinking the statement should be treated as if the compiler inserted it after every assignment of the variable(s) in the condition\r\n\r\n```go\r\nfunc repeatErrReturn() (out User, err error) {\r\ntry( err != nil ){\r\n   return User{}, err\r\n}\r\n... // real code\r\nyeahRight , err = otherPkg.unreliable()\r\n.. // more code\r\n}\r\n```\r\n\r\nor \r\n\r\n```go\r\nfunc repeatErrReturn2() (interface{},  error) {\r\nvar err\r\ntry( err != nil ){\r\n   return User{}, err\r\n}\r\n... // real code\r\n_ , err = otherPkg.buggy()\r\n.. // more code and other 'err' assignments\r\n}\r\n```\r\n\r\n",
	"user": {
		"login": "losjr",
		"id": 4596712,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "LanguageChange"
		},
		{
			"name": "Proposal"
		},
		{
			"name": "Proposal-Declined"
		}
	],
	"comments": 5,
	"closed_at": "2016-08-29T23:35:17Z",
	"created_at": "2016-06-30T13:12:37Z",
	"updated_at": "2016-08-29T23:35:21Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
