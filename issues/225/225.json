{
	"id": 51276202,
	"number": 225,
	"state": "closed",
	"title": "Inconsistent comments in misc/cgo/gmp/gmp.go",
	"body": "by **hugo.vincent**:\n\n\u003cpre\u003emisc/cgo/gmp/gmp.go contains the following comment:\n\u0026quot;Garbage collection is the big problem.  It is fine for the Go world to\nhave pointers into the C world and to free those pointers when they\nare no longer needed.  To help, the garbage collector calls an\nobject's destroy() method prior to collecting it.  C pointers can be\nwrapped by Go objects with appropriate destroy methods.\u0026quot;\n\nWhat is the expected output? What do you see instead?\n\nThis doesn't seem to apply to normal types in Go, or indeed even work in\nthis GMP case? I think this should become standard: the GC should use\nreflection to determine if a type marked for collection has a destroy()\nmethod, and if so, call it before freeing the memory.\n\nWhat is your $GOOS?  $GOARCH?\ndarwin-amd64\n\nWhich revision are you sync'ed to?  (hg log -l 1)\n4067:3b60c65a4eda\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2014-12-08T10:03:43Z",
	"created_at": "2009-11-16T13:28:30Z",
	"updated_at": "2016-06-24T19:05:11Z"
}
