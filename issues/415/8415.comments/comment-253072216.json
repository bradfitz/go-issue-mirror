{
	"id": 253072216,
	"body": "We use the Valuer and Scanner interfaces frequently for JSON data from the internet that we insert/retrieve to a json or jsonb column in Postgres but where we want to decode the JSON representation to a Go type first (ie. not use a []byte).  We may want to decode the JSON to Go types to do something with the data or just validate that the specific JSON representation sent to the dbase has the properties we need.  For any such type, there may be instances where the data is optional (database column accepts NULL) and other instances where the data is required (database column has a not null constraint).  \r\n\r\nIn a non-trivial application, the most elegant and robust client implementation using those types is to use pointers for optional data and values for required data, this corresponds logically to the dbase structure and ensures the output to the internet corresponds to the data stored in the dbase.  However, doing so requires implementing the Value() method on a value, which currently breaks when the Value() method is called on a nil pointer.\r\n\r\nIf my client has to enforce that the driver.Valuer interface is not nil then the client would have to invent an entirely new scheme to send null out to the internet on output, since I'm now working with not-nil variables where my underlying data in the dbase is actually NULL.\r\n\r\nThe attached is an abbreviated example of a large-ish project around building codes for HVAC systems.  We need to have design conditions (climate data) for each home in our dbase but there are optional design conditions for each HVAC system that would locally overwrite the project's design conditions (say you wanted your inlaw apartment heated to 75F instead of 70F for the rest of the house).\r\n\r\nLet me know if any questions or issues.\r\n\r\n[8514.zip](https://github.com/golang/go/files/523105/8514.zip)\r\n\r\nThe issue is exactly as @ianlancetaylor stated previously:\r\n\r\n\u003e The only interesting case is a pointer that is nil for which the Value method is implemented on a value. In that case we can't call the method, so we should just stick the nil. \r\n",
	"user": {
		"login": "220kts",
		"id": 11798252,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-11T23:00:36Z",
	"updated_at": "2016-10-11T23:00:36Z"
}
