{
	"id": 127293601,
	"number": 14004,
	"state": "closed",
	"title": "go/doc: group constructors with types",
	"body": "The godoc tool groups constructors with the types they construct in the package index. This is incredibly useful for organizing documentation and quickly understanding the relationships between package symbols.\r\n\r\nIn contrast, while the go doc tool does this grouping when you ask for a particular type's documentation, for package documentation it prints all functions before it prints types. It would be nice if the package documentation was grouped similarly to what godoc does.\r\n\r\nFor example, the current go doc output for \"go doc reflect\" looks like:\r\n\r\n```\r\n$ go doc reflect\r\n...\r\nfunc Copy(dst, src Value) int\r\nfunc DeepEqual(x, y interface{}) bool\r\nfunc Select(cases []SelectCase) (chosen int, recv Value, recvOK bool)\r\nfunc ArrayOf(count int, elem Type) Type\r\nfunc ChanOf(dir ChanDir, t Type) Type\r\nfunc FuncOf(in, out []Type, variadic bool) Type\r\nfunc MapOf(key, elem Type) Type\r\nfunc PtrTo(t Type) Type\r\nfunc SliceOf(t Type) Type\r\nfunc TypeOf(i interface{}) Type\r\nfunc Append(s Value, x ...Value) Value\r\nfunc AppendSlice(s, t Value) Value\r\nfunc Indirect(v Value) Value\r\nfunc MakeChan(typ Type, buffer int) Value\r\nfunc MakeFunc(typ Type, fn func(args []Value) (results []Value)) Value\r\nfunc MakeMap(typ Type) Value\r\nfunc MakeSlice(typ Type, len, cap int) Value\r\nfunc New(typ Type) Value\r\nfunc NewAt(typ Type, p unsafe.Pointer) Value\r\nfunc ValueOf(i interface{}) Value\r\nfunc Zero(typ Type) Value\r\ntype ChanDir int\r\ntype Kind uint\r\ntype Method struct { ... }\r\ntype SelectCase struct { ... }\r\ntype SelectDir int\r\ntype SliceHeader struct { ... }\r\ntype StringHeader struct { ... }\r\ntype StructField struct { ... }\r\ntype StructTag string\r\ntype Type interface { ... }\r\ntype Value struct { ... }\r\ntype ValueError struct { ... }\r\n...\r\n```\r\n\r\nSomething is clearly putting constructor functions together, but they're printed separately from the type they construct. This would be much clearer if it were something like the following:\r\n\r\n```\r\n$ go doc reflect\r\n...\r\nfunc Copy(dst, src Value) int\r\nfunc DeepEqual(x, y interface{}) bool\r\nfunc Select(cases []SelectCase) (chosen int, recv Value, recvOK bool)\r\ntype ChanDir int\r\ntype Kind uint\r\ntype Method struct { ... }\r\ntype SelectCase struct { ... }\r\ntype SelectDir int\r\ntype SliceHeader struct { ... }\r\ntype StringHeader struct { ... }\r\ntype StructField struct { ... }\r\ntype StructTag string\r\ntype Type interface { ... }\r\n    func ArrayOf(count int, elem Type) Type\r\n    func ChanOf(dir ChanDir, t Type) Type\r\n    func FuncOf(in, out []Type, variadic bool) Type\r\n    func MapOf(key, elem Type) Type\r\n    func PtrTo(t Type) Type\r\n    func SliceOf(t Type) Type\r\n    func TypeOf(i interface{}) Type\r\ntype Value struct { ... }\r\n    func Append(s Value, x ...Value) Value\r\n    func AppendSlice(s, t Value) Value\r\n    func Indirect(v Value) Value\r\n    func MakeChan(typ Type, buffer int) Value\r\n    func MakeFunc(typ Type, fn func(args []Value) (results []Value)) Value\r\n    func MakeMap(typ Type) Value\r\n    func MakeSlice(typ Type, len, cap int) Value\r\n    func New(typ Type) Value\r\n    func NewAt(typ Type, p unsafe.Pointer) Value\r\n    func ValueOf(i interface{}) Value\r\n    func Zero(typ Type) Value\r\ntype ValueError struct { ... }\r\n...\r\n```\r\n\r\n/cc @robpike @griesemer ",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2016-04-21T21:45:29Z",
	"created_at": "2016-01-18T19:17:57Z",
	"updated_at": "2016-04-21T21:45:29Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
