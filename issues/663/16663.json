{
	"id": 170507061,
	"number": 16663,
	"state": "open",
	"title": "runtime: procyield doesn't use yield instruction on ARM, unlike ARM64",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\nMaster\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nARM\r\n\r\n3. What did you do?\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n\r\ncode inspection: https://github.com/golang/go/blob/690de51ffac1473820212c88a11685b40f7bde3b/src/runtime/asm_arm.s#L971\r\n\r\nI have not had a problem with this myself, just happened to notice it.\r\n\r\n4. What did you expect to see?\r\n\r\nUse of the `YIELD` instruction, which exists on ARMv6K and newer per http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0204j/Cjafcggi.html Presumably, this would need some kind of architecture gating, because Go supports ARMv5 and ARMv6: https://github.com/golang/go/wiki/GoArm\r\n\r\n5. What did you see instead?\r\n\r\nBusy-wait with no `YIELD`, unlike the ARM64 version: https://github.com/golang/go/blob/690de51ffac1473820212c88a11685b40f7bde3b/src/runtime/asm_arm64.s#L473\r\n\r\nNote that it could be the case that the ARM64 version is in error, since `runtime.procyield` takes a loop count and (according to the linked ARM documentation) `YIELD` may cause the thread to be suspended.\r\n\r\n",
	"user": {
		"login": "swolchok",
		"id": 34168,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"created_at": "2016-08-10T20:09:54Z",
	"updated_at": "2016-08-26T16:44:28Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
