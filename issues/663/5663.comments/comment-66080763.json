{
	"id": 66080763,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eThey would have needed such privileges in the first place.\n\nMy concern is this:\n\n$ cd /usr/local\n$ sudo tar xzf go.tar.gz\n$ export GOPATH=$HOME\n$ sudo go get code.google.com/p/go.tools/cmd/{cover,godoc,vet}\n\nThis installs the tools to /usr/local/bin, but now $GOPATH/{src,pkg} contain a bunch of\nsource and object files that are owned by root. :-/\n\nWe could potentially fix this by forcing it to be a two part process. Where \"go get\"\ndetects refuses to download source and write package objects as the superuser. For\ninstance:\n\n$ sudo go get code.google.com/p/go.tools/cmd/{cover,godoc,vet}\nCannot \"go get\" as root.\n\nSo then the user would try:\n\n$ go get code.google.com/p/go.tools/cmd/{cover,godoc,vet}\nCan't write to /usr/local/go/bin.\n$ sudo go get code.google.com/p/go.tools/cmd/{cover,godoc,vet}\nSuccess, because all this does is build the binaries and cp them to /usr/local/go/bin.\nThe source has been fetched and the dependent packages have been compiled by the\nprevious invocation. \n\nMaybe there's a bigger picture here involving the standard library and the -a flag, too.\nThe main question is: do we want to make the go tool behave differently when executed by\na superuser?\u003c/pre\u003e",
	"user": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-23T07:11:53Z",
	"updated_at": "2014-12-08T10:30:54Z"
}
