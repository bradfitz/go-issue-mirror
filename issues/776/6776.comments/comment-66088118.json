{
	"id": 66088118,
	"body": "\u003ca id=\"c12\"\u003e\u003c/a\u003eComment 12:\n\n\u003cpre\u003eContinuing the study of the minimal program from comments #10 and #11, I instrumented\ngdb to see where it is trying to set the failing breakpoint that is getting ignored\nduring runaway.  The disassembly for the sub() subroutine is shown here, and gdb upon\n'n' is trying to set a breakpoint at  0x0400c13, but this is never hit.\n\n(gdb) disas\nDump of assembler code for function main.sub:\n=\u0026gt; 0x0000000000400c00 \u0026lt;+0\u0026gt;: mov    %fs:0xfffffffffffffff0,%rcx\n   0x0000000000400c09 \u0026lt;+9\u0026gt;: cmp    (%rcx),%rsp\n   0x0000000000400c0c \u0026lt;+12\u0026gt;:    ja     0x400c15 \u0026lt;main.sub+21\u0026gt;\n   0x0000000000400c0e \u0026lt;+14\u0026gt;:    callq  0x420be0 \u0026lt;runtime.morestack00\u0026gt;\n   0x0000000000400c13 \u0026lt;+19\u0026gt;:    jmp    0x400c00 \u0026lt;main.sub\u0026gt;   ///*** gdb sets breakpoint here that is never hit. \n   0x0000000000400c15 \u0026lt;+21\u0026gt;:    sub    $0x40,%rsp\n   0x0000000000400c19 \u0026lt;+25\u0026gt;:    lea    0x4bad40,%rbx\n   0x0000000000400c21 \u0026lt;+33\u0026gt;:    lea    (%rsp),%rbp\n   0x0000000000400c25 \u0026lt;+37\u0026gt;:    mov    %rbp,%rdi\n   0x0000000000400c28 \u0026lt;+40\u0026gt;:    mov    %rbx,%rsi\n   0x0000000000400c2b \u0026lt;+43\u0026gt;:    movsq  %ds:(%rsi),%es:(%rdi)\n   0x0000000000400c2d \u0026lt;+45\u0026gt;:    movsq  %ds:(%rsi),%es:(%rdi)\n   0x0000000000400c2f \u0026lt;+47\u0026gt;:    lea    0x10(%rsp),%rdi\n   0x0000000000400c34 \u0026lt;+52\u0026gt;:    xor    %rax,%rax\n   0x0000000000400c37 \u0026lt;+55\u0026gt;:    stos   %rax,%es:(%rdi)\n   0x0000000000400c39 \u0026lt;+57\u0026gt;:    stos   %rax,%es:(%rdi)\n   0x0000000000400c3b \u0026lt;+59\u0026gt;:    stos   %rax,%es:(%rdi)\n   0x0000000000400c3d \u0026lt;+61\u0026gt;:    callq  0x425130 \u0026lt;fmt.Printf\u0026gt;\n   0x0000000000400c42 \u0026lt;+66\u0026gt;:    add    $0x40,%rsp\n   0x0000000000400c46 \u0026lt;+70\u0026gt;:    retq\nEnd of assembler dump.\n(gdb) n\n\ninternal gdb trace: target_insert_breakpoint called: 0x400c13.\nsubroutine sub called.\ndone.\n[Inferior 1 (process 10943) exited normally]\n(gdb) \n\n\n\ntranscript of full session:\n\nCurrent directory is /home/jaten/go/gdbproblem/\nGNU gdb (GDB) 7.6.2\nCopyright (C) 2013 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later \u0026lt;\u003ca href=\"http://gnu.org/licenses/gpl.html\u0026gt\"\u003ehttp://gnu.org/licenses/gpl.html\u0026gt\u003c/a\u003e;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-unknown-linux-gnu\".\nFor bug reporting instructions, please see:\n\u0026lt;\u003ca href=\"http://www.gnu.org/software/gdb/bugs/\u0026gt\"\u003ehttp://www.gnu.org/software/gdb/bugs/\u0026gt\u003c/a\u003e;...\nReading symbols from /home/jaten/go/gdbproblem/gdbprob...done.\nLoading Go Runtime support.\n(gdb) break 9\nBreakpoint 1 at 0x400c69: file /home/jaten/go/gdbproblem/gdbprob.go, line 9.\n(gdb) run\nStarting program: /home/jaten/go/gdbproblem/gdbprob\nwarning: no loadable sections found in added symbol-file system-supplied DSO at\n0x7ffff7ffd000\n\ntarget_insert_breakpoint called: 0x400c69.\n\ntarget_remove_breakpoint called: 0x400c69.\n\nBreakpoint 1, main.main () at /home/jaten/go/gdbproblem/gdbprob.go:9\n(gdb) del\nDelete all breakpoints? (y or n) y\n(gdb) display/i $pc\n1: x/i $pc\n=\u0026gt; 0x400c69 \u0026lt;main.main+25\u0026gt;: callq  0x400c00 \u0026lt;main.sub\u0026gt;\n(gdb) disas\nDump of assembler code for function main.main:\n   0x0000000000400c50 \u0026lt;+0\u0026gt;: mov    %fs:0xfffffffffffffff0,%rcx\n   0x0000000000400c59 \u0026lt;+9\u0026gt;: cmp    (%rcx),%rsp\n   0x0000000000400c5c \u0026lt;+12\u0026gt;:    ja     0x400c65 \u0026lt;main.main+21\u0026gt;\n   0x0000000000400c5e \u0026lt;+14\u0026gt;:    callq  0x420be0 \u0026lt;runtime.morestack00\u0026gt;\n   0x0000000000400c63 \u0026lt;+19\u0026gt;:    jmp    0x400c50 \u0026lt;main.main\u0026gt;\n   0x0000000000400c65 \u0026lt;+21\u0026gt;:    sub    $0x40,%rsp\n=\u0026gt; 0x0000000000400c69 \u0026lt;+25\u0026gt;:    callq  0x400c00 \u0026lt;main.sub\u0026gt;\n   0x0000000000400c6e \u0026lt;+30\u0026gt;:    lea    0x4adfd0,%rbx\n   0x0000000000400c76 \u0026lt;+38\u0026gt;:    lea    (%rsp),%rbp\n   0x0000000000400c7a \u0026lt;+42\u0026gt;:    mov    %rbp,%rdi\n   0x0000000000400c7d \u0026lt;+45\u0026gt;:    mov    %rbx,%rsi\n   0x0000000000400c80 \u0026lt;+48\u0026gt;:    movsq  %ds:(%rsi),%es:(%rdi)\n   0x0000000000400c82 \u0026lt;+50\u0026gt;:    movsq  %ds:(%rsi),%es:(%rdi)\n   0x0000000000400c84 \u0026lt;+52\u0026gt;:    lea    0x10(%rsp),%rdi\n   0x0000000000400c89 \u0026lt;+57\u0026gt;:    xor    %rax,%rax\n   0x0000000000400c8c \u0026lt;+60\u0026gt;:    stos   %rax,%es:(%rdi)\n   0x0000000000400c8e \u0026lt;+62\u0026gt;:    stos   %rax,%es:(%rdi)\n   0x0000000000400c90 \u0026lt;+64\u0026gt;:    stos   %rax,%es:(%rdi)\n   0x0000000000400c92 \u0026lt;+66\u0026gt;:    callq  0x425130 \u0026lt;fmt.Printf\u0026gt;\n   0x0000000000400c97 \u0026lt;+71\u0026gt;:    add    $0x40,%rsp\n   0x0000000000400c9b \u0026lt;+75\u0026gt;:    retq\nEnd of assembler dump.\n(gdb) s\nmain.sub () at /home/jaten/go/gdbproblem/gdbprob.go:5\n1: x/i $pc\n=\u0026gt; 0x400c00 \u0026lt;main.sub\u0026gt;: mov    %fs:0xfffffffffffffff0,%rcx\n(gdb) disas\nDump of assembler code for function main.sub:\n=\u0026gt; 0x0000000000400c00 \u0026lt;+0\u0026gt;: mov    %fs:0xfffffffffffffff0,%rcx\n   0x0000000000400c09 \u0026lt;+9\u0026gt;: cmp    (%rcx),%rsp\n   0x0000000000400c0c \u0026lt;+12\u0026gt;:    ja     0x400c15 \u0026lt;main.sub+21\u0026gt;\n   0x0000000000400c0e \u0026lt;+14\u0026gt;:    callq  0x420be0 \u0026lt;runtime.morestack00\u0026gt;\n   0x0000000000400c13 \u0026lt;+19\u0026gt;:    jmp    0x400c00 \u0026lt;main.sub\u0026gt;\n   0x0000000000400c15 \u0026lt;+21\u0026gt;:    sub    $0x40,%rsp\n   0x0000000000400c19 \u0026lt;+25\u0026gt;:    lea    0x4bad40,%rbx\n   0x0000000000400c21 \u0026lt;+33\u0026gt;:    lea    (%rsp),%rbp\n   0x0000000000400c25 \u0026lt;+37\u0026gt;:    mov    %rbp,%rdi\n   0x0000000000400c28 \u0026lt;+40\u0026gt;:    mov    %rbx,%rsi\n   0x0000000000400c2b \u0026lt;+43\u0026gt;:    movsq  %ds:(%rsi),%es:(%rdi)\n   0x0000000000400c2d \u0026lt;+45\u0026gt;:    movsq  %ds:(%rsi),%es:(%rdi)\n   0x0000000000400c2f \u0026lt;+47\u0026gt;:    lea    0x10(%rsp),%rdi\n   0x0000000000400c34 \u0026lt;+52\u0026gt;:    xor    %rax,%rax\n   0x0000000000400c37 \u0026lt;+55\u0026gt;:    stos   %rax,%es:(%rdi)\n   0x0000000000400c39 \u0026lt;+57\u0026gt;:    stos   %rax,%es:(%rdi)\n   0x0000000000400c3b \u0026lt;+59\u0026gt;:    stos   %rax,%es:(%rdi)\n   0x0000000000400c3d \u0026lt;+61\u0026gt;:    callq  0x425130 \u0026lt;fmt.Printf\u0026gt;\n   0x0000000000400c42 \u0026lt;+66\u0026gt;:    add    $0x40,%rsp\n   0x0000000000400c46 \u0026lt;+70\u0026gt;:    retq\nEnd of assembler dump.\n(gdb) n\n\ninternal gdb trace: target_insert_breakpoint called: 0x400c13.\nsubroutine sub called.\ndone.\n[Inferior 1 (process 10943) exited normally]\n(gdb)\u003c/pre\u003e",
	"user": {
		"login": "glycerine",
		"id": 445247,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-01-07T10:00:16Z",
	"updated_at": "2014-12-22T06:30:06Z"
}
