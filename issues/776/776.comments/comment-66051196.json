{
	"id": 66051196,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eThe issue is that we want to permit Go programs to catch SIGTSTP.  However, if the\nprogram does not catch SIGTSTP, then we want it to have its default effect.  So a\npartial answer would be that if sigsend returns false for SIGTSTP, we should remove the\nhandler and reraise the signal.  Then we should reinstall the signal handler, so that\nthe obscure case of a later call to runtime.Siginit will work correctly.\n\nHowever, I don't know a natural way to make this work for a program that calls\nruntime.Siginit (typically via importing os/signal).  Most programs that catch signals\ndo not actually want to catch SIGTSTP, but some do.  The best idea I can think of right\nnow is that we could require a program which handles SIGTSTP to call a function in the\nos/signal package to enable it.\n\nWe should probably handle SIGTTIN and SIGTTOU the same way we handle SIGTSTP.\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-06-25T14:47:21Z",
	"updated_at": "2014-12-08T10:05:49Z"
}
