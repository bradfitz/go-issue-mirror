{
	"id": 252728486,
	"body": "I think we all agree that\r\n\r\n    func f(int64)\r\n    f(1.0\u003c\u003cs)\r\n\r\nis OK and that\r\n\r\n    func g(interface{})\r\n    g(1.0\u003c\u003cs)\r\n\r\nis NOT OK. (And the playground agrees too: https://play.golang.org/p/WS65K_B_hd).\r\n\r\nThe problem is:\r\n\r\n    var h []int\r\n    _ = h[1.0\u003c\u003cs]\r\n\r\nSlice index is halfway between these: there's no one type dictated by context, but there are some types excluded, unlike interface{}. \r\n\r\nI believe that the slice index here is disallowed by the spec. Ian agrees too (above), and Robert agreed in 2013 when I wrote these lines in test/shift1.go (https://golang.org/cl/7861045):\r\n\r\n        // For now, the spec disallows these. We may revisit past Go 1.1.\r\n        _ = a[1.\u003c\u003cs]  // ERROR \"integer|shift of type float64\"\r\n        _ = a[1.1\u003c\u003cs] // ERROR \"integer|shift of type float64\"\r\n\r\nIt seems fine to revisit the spec, of course. It's not a big deal if we change this.\r\n\r\nAt this point, not for Go 1.8 though.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-10T19:49:33Z",
	"updated_at": "2016-10-10T19:49:33Z"
}
