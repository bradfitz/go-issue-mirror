{
	"id": 156897407,
	"number": 15844,
	"state": "closed",
	"title": "cmd/compile: recognize and optimize \"in range\" booleans",
	"body": "```go\r\npackage p\r\n\r\nfunc inrange(x int) bool {\r\n\treturn 5 \u003c= x \u0026\u0026 x \u003c 10\r\n}\r\n\r\nfunc inrange2(x int) bool {\r\n\treturn uint(x-5) \u003c 5\r\n}\r\n```\r\n\r\nThese two functions are equivalent, but the second is more efficient (it trades a subtraction for a compare-and-branch). We do this already for index-in-bounds checks. We should generally recognize integer-in-range patterns and convert them.\r\n\r\nWe should probably do this in the SSA backend, since it'll be more general and powerful there than a limited front-end rewrite like rotation recognition. (I'm open to being convinced otherwise, though.)\r\n\r\nThis will be helpful for #15780. It'll also help a bit with a hot line in scanobject (`arena_start \u003c= obj \u0026\u0026 obj \u003c arena_used`).\r\n\r\n/cc @brtzsnr @randall77 \r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"assignee": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-08-25T03:51:00Z",
	"created_at": "2016-05-26T03:43:39Z",
	"updated_at": "2016-08-25T03:51:00Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
