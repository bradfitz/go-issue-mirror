{
	"id": 128450162,
	"body": "@netbrain This is working as intended.\r\n\r\ngo/types type-checks a _single_ package, the one for which the source (== AST) is provided. Any imports are delegated to the importer which looks at compiled packages (which must be installed).\r\n\r\nIt is possible to provide an importer that looks at the source: such an importer would have to first parse and type-check the imported package from source, and possibly do the same with its own imports, recursively so. There are also questions about how much to cache (we don't want to re-parse and re-type-check the same package over and over) and when to invalidate the cache, which files to consider, etc. It's not entirely trivial to get this right on all platforms and taking into account build flags etc. which is why importing is separated out from go/types as an independent mechanism.\r\n\r\nThe x/tools/go/loader package provides much of the functionality but it's not in the std lib yet, exactly because it's complicated and the API is not yet fixed.\r\n\r\nIf you need this working for you _now_, you can implement your own importer and provide it to go/types. You could look at (and copy from) src/cmd/api/goapi.go:421 for an outline of an importer that does about what you might want, and then customize it as needed.\r\n\r\nEventually go/importer may provide a source importer.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-06T17:23:56Z",
	"updated_at": "2015-08-06T17:23:56Z"
}
