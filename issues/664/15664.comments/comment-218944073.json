{
	"id": 218944073,
	"body": "@sdicker8 I improved your code to produce a working sample that could be used for others to reproduce your bug run in the form of a client and server at https://github.com/odeke-em/bugs/tree/master/golang/15664 or in one place https://gist.github.com/odeke-em/46a8deba3ded6bb4f2169e2e80928442, or inlined below.\r\nTo run the server, just run\r\n```shell\r\n$ go run server.go\r\n``` \r\nThen for the client\r\n```shell\r\n$ go run client.go \u003cpaths....\u003e\r\n```\r\nHowever, I get `filename` to be contain the proper slashes when run on *NIX since I don't have access to Windows machines.\r\n\u003cimg width=\"571\" alt=\"screen shot 2016-05-12 at 8 29 07 pm\" src=\"https://cloud.githubusercontent.com/assets/4898263/15237132/3bec2f00-1880-11e6-88a7-fbd9d73f9b32.png\"\u003e\r\n\r\n\r\nMaybe that's a Windows thing?\r\n\r\n## Code inlined\r\n- client.go\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"bytes\"\r\n\t\"fmt\"\r\n\t\"io\"\r\n\t\"mime/multipart\"\r\n\t\"net/http\"\r\n\t\"os\"\r\n)\r\n\r\nfunc exitIfErr(err error) {\r\n\tif err == nil {\r\n\t\treturn\r\n\t}\r\n\tfmt.Fprintf(os.Stderr, \"%v\\n\", err)\r\n\tos.Exit(-1)\r\n}\r\n\r\nfunc main() {\r\n\tif len(os.Args) \u003c 2 {\r\n\t\texitIfErr(fmt.Errorf(\"expecting atleast one arg\"))\r\n\t}\r\n\r\n\trest := os.Args[1:]\r\n\tfor _, filename := range rest {\r\n\t\tf, err := os.Open(filename)\r\n\t\texitIfErr(err)\r\n\r\n\t\tfields := map[string]string{\r\n\t\t\t\"filename\": filename,\r\n\t\t}\r\n\t\tres, err := multipartUpload(\"http://localhost:8090/validate\", f, fields)\r\n\t\t_ = f.Close()\r\n\t\texitIfErr(err)\r\n\r\n\t\tio.Copy(os.Stdout, res.Body)\r\n\t\t_ = res.Body.Close()\r\n\t}\r\n}\r\n\r\nfunc createFormFile(mw *multipart.Writer, filename string) (io.Writer, error) {\r\n\treturn mw.CreateFormFile(\"file\", filename)\r\n}\r\n\r\nfunc multipartUpload(destURL string, f io.Reader, fields map[string]string) (*http.Response, error) {\r\n\tif f == nil {\r\n\t\treturn nil, fmt.Errorf(\"bodySource cannot be nil\")\r\n\t}\r\n\tbody := \u0026bytes.Buffer{}\r\n\twriter := multipart.NewWriter(body)\r\n\tfw, err := createFormFile(writer, fields[\"filename\"])\r\n\tif err != nil {\r\n\t\treturn nil, fmt.Errorf(\"createFormFile %v\", err)\r\n\t}\r\n\r\n\tn, err := io.Copy(fw, f)\r\n\tif err != nil \u0026\u0026 n \u003c 1 {\r\n\t\treturn nil, fmt.Errorf(\"copying fileWriter %v\", err)\r\n\t}\r\n\r\n\tfor k, v := range fields {\r\n\t\t_ = writer.WriteField(k, v)\r\n\t}\r\n\r\n\terr = writer.Close()\r\n\tif err != nil {\r\n\t\treturn nil, fmt.Errorf(\"writerClose: %v\", err)\r\n\t}\r\n\r\n\treq, err := http.NewRequest(\"POST\", destURL, body)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\r\n\r\n\tif req.Close \u0026\u0026 req.Body != nil {\r\n\t\tdefer req.Body.Close()\r\n\t}\r\n\r\n\treturn http.DefaultClient.Do(req)\r\n}\r\n```\r\n- server.go\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"log\"\r\n\t\"net/http\"\r\n\t\"os/exec\"\r\n)\r\n\r\nconst html = `\r\n\u003chtml\u003e\r\n  Validation\r\n  \u003cform method=\"POST\" action=\"/validate\" enctype=\"multipart/form-data\"\u003e\r\n    \u003cinput type=\"file\" name=\"file\" /\u003e\r\n    \u003cbr /\u003e\r\n    \u003cinput type=\"submit\" value=\"Send\" /\u003e\r\n  \u003c/form\u003e\r\n\u003c/html\u003e\r\n`\r\n\r\nfunc validate(w http.ResponseWriter, r *http.Request) {\r\n\tif err := r.ParseMultipartForm(1 \u003c\u003c 20); err != nil {\r\n\t\tfmt.Fprintf(w, \"parseForm: %v\\n\", err)\r\n\t\treturn\r\n\t}\r\n\tfile, header, err := r.FormFile(\"file\")\r\n\tif err != nil {\r\n\t\tfmt.Fprintf(w, \"formFile retrieval %s\\n\", err)\r\n\t\tfmt.Println(err)\r\n\t\treturn\r\n\t}\r\n\tdefer file.Close()\r\n\tfmt.Fprintf(w, \"%s\\n\", header.Header)\r\n\tfmt.Fprintf(w, \"%s\\n\", header.Filename)\r\n\tfmt.Println(header.Header)\r\n\tfmt.Println(header.Filename)\r\n}\r\n\r\nfunc index(w http.ResponseWriter, r *http.Request) {\r\n\tfmt.Fprintf(w, html)\r\n}\r\n\r\nfunc main() {\r\n\taddr := \":8090\"\r\n\thttp.HandleFunc(\"/\", index)\r\n\thttp.HandleFunc(\"/validate\", validate)\r\n\tif false { // This is your specific command, not present on *NIX\r\n\t\tgo exec.Command(\"rundll32\", \"url.dll,FileProtocolHandler\",\r\n\t\t\tfmt.Sprintf(\"http://localhost%s\", addr)).Start()\r\n\t}\r\n\tif err := http.ListenAndServe(addr, nil); err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n}\r\n```",
	"user": {
		"login": "odeke-em",
		"id": 4898263,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-13T03:30:37Z",
	"updated_at": "2016-05-13T03:30:37Z"
}
