{
	"id": 70339094,
	"body": "If we provide two functions to do roughly the same thing, which should the\nuser choose?\n\nIf I say os.Remove(file), I really want file to be removed, so if we provide\ntwo functions, I will have to change all my os.Remove to os.RemoveForce.\nThen what's the point of providing two?\n\nI really don't understand why someone would say os.Remove and expect\nthe OS to prevent it. If you want to preserve read-only files on Windows,\nyou should do that yourselves, just as you would have to do on other OSes.\n\nI think most of uses of os.Remove is to remove temporary files. And we\nhave got at least one example where external application not under our\ncontrol marks its files as read-only. Why should the programmer care about\nthat when trying to delete temporary files created by such applications?\n(you might argue that those applications are using the readonly flag wrong,\nbut that's beyond the scope of this issue, and I see no clear alternatives\nthat they can change to.)\n\nAnyway, we control the definition of os.Remove, and it doesn't say it will\nconform to what the OS-specific remove file API would do, so I believe\nwe can fix this issue.",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-16T23:24:42Z",
	"updated_at": "2015-01-16T23:24:42Z"
}
