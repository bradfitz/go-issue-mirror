{
	"id": 51288438,
	"number": 8606,
	"state": "open",
	"title": "spec: ambiguity in comparing array/structs with interface fields/elements",
	"body": "\u003cpre\u003egc handles struct/array comparisons by short-circuiting if it finds any unequal\nfields/elements, and this behavior is noticeable because the Go spec requires\ncomparisons to panic in some cases; e.g., see \u003ca href=\"http://play.golang.org/p/5jqSUAT1xC\"\u003ehttp://play.golang.org/p/5jqSUAT1xC\u003c/a\u003e\n\nHowever, unlike short-circuiting for evaluating \u0026quot;a \u0026amp;\u0026amp; b\u0026quot;, it doesn't\nseem that short-circuiting of field/element comparisons is specified by the spec. \nArguably, the spec currently requires that instead both comparisons in the above program\nshould panic.\n\nNot a major issue, but thought I'd file an issue to note it.  A couple possible ways to\naddress it:\n\n1. Ignore it since it probably doesn't matter in practice.\n2. Specify gc's behavior since it's intuitive and easy to explain.\n3. Specify a set of allowable behaviors (e.g., allow short-circuiting or not; and/or\nallow any particular ordering for element/field comparisons).\n4. Change gc to not (visibly) short-circuit comparisons that involve comparing interface\ntypes; e.g., comparing two [512]int arrays can still short-circuit, but comparing two\nstruct{a int; b, c interface{}; d int} structs would need to always compare the b and c\nfields, and a and d could be compared conditionally.\u003c/pre\u003e",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2014-08-28T05:36:14Z",
	"updated_at": "2015-04-14T19:45:24Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
