{
	"id": 51283900,
	"number": 5606,
	"state": "open",
	"title": "database/sql: provide a way for a driver to get its own driver.Rows struct from sql.Row and sql.Rows",
	"body": "by **arnehormann**:\n\n\u003cpre\u003eWhat is the expected output?\n\nThere should be a way to access the full information a driver has for result columns.\nWorkarounds are brittle and slow. They depend on the struct layout, require reflect or\nunsafe and involve some duplication.\n\nWhat do you see instead?\n\nI can only get the names by calling Columns(). The rest of the result metadata can not\nbe retrieved.\n\nPlease provide any additional information below.\n\nI posted a proposal on go-nuts:\n\u003ca href=\"https://groups.google.com/forum/#\"\u003ehttps://groups.google.com/forum/#\u003c/a\u003e!topic/golang-nuts/2aLctcVyp6Q\n\nIn short, I propose to add a new interface to database/sql/driver that passes a callback\nfunction to the driver.\nThe callback is returned after a type assertion in database/sql.Register.\nIt can be used to get the driver.Rows implementation given database/sql/Row[s].\nThe native Rows implementation by the driver is returned as interface{}.\n\nGiven this function, a driver can decide to expose more detailed metadata for the result\ncolumns by implementing the interface and providing an exported function that retrieves\nthe metadata from *Row or *Rows.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"comments": 26,
	"created_at": "2013-05-31T17:02:29Z",
	"updated_at": "2015-04-22T12:02:34Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
