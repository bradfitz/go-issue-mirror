{
	"id": 66080365,
	"body": "\u003ca id=\"c20\"\u003e\u003c/a\u003eComment 20 by **arnehormann**:\n\n\u003cpre\u003eNo, I'm not. The Column one gets close, but I think that's too limiting, too.\n\nWhat I want is to move the whole column metadata access to the drivers.\nThen, anyone can import a driver for the specific database he/she uses (no longer as _\nbut with a named import).\n\nTo support this, the driver could provide a\n  DriverColumn\ntype with access to all available column information and a function\n  Columns(*sql.Rows) ([]DriverColumn, error)\n\nIn that function, it must get its own database/sql/driver.Rows implementation back to\naccess the available data as it cannot access rowsi.\nThat's my actual problem, this is impossible as is without unsafe.\n\nBut it would be easy in database/sql - if there were a function to extract (unwrap) the\nrowsi field from *Rows or *Row.\n\nTo avoid a maintenance hassle, I don't want this function (henceforth \"unwrapper\") or\naccess to rowsi to be exported, I want to restrict it to the driver.\nThe best way to do so is to return it on Registration; then, it's available on the first\nquery.\nThe Go compatibility promise forbids making it a return value of Register. So we\nintroduce a new interface in driver with a SetUnwrapper(unwrapper) method and call that\non all drivers implementing it. In that function, the driver stores the unwrapper in a\nvariable and can use it in the Columns() function I described above.\n\nThe interactions / responsibilities in my proposal:\n\n- Roles -\nsql: database/sql\ndriver: database/sql/driver\ndbx: implementation of database/sql/driver (for me, github.com/go-sql-driver/mysql)\n\ndriver.CanUnwrap: an interface with SetUnwrapper(unwrapper)\n\n- The registration process -\n\u0026lt;dbx\u0026gt; calls sql.Register in its init() function\n\u0026lt;sql\u0026gt; checks if \u0026lt;dbx\u0026gt; implements driver.CanUnwrap and calls\nSetUnwrapper(unwrapper), where unwrapper is an unexported function in \u0026lt;sql\u0026gt; that\nreturns rowsi\n\u0026lt;dbx\u0026gt;.SetUnwrapper receives the unwrapper and stores it in a var\n\n- Query -\ndb, _ := sql.Open(\"dbx\", \"user@tcp(localhost:3306)/\")\nrows, _ := sql.Query(\"SELECT col1, col2 FROM whatever\")\ncols, _ := dbx.Columns(rows) // \u0026lt;- everything in the driver - as long as it can get\nits native data structures back!\n// cols is []dbx.Column - and provides access to all available data for dbx\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-01-16T21:28:38Z",
	"updated_at": "2014-12-22T06:25:37Z"
}
