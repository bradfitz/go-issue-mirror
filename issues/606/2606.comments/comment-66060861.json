{
	"id": 66060861,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11 by **mt4swm**:\n\n\u003cpre\u003eIt may be the case that there are different projects that contain Go\nprograms with identical names. For instance, three projects\n\n\tDIR/src/github.com/project1/foo/bar/x.go  (go code in package main)\n\tDIR/src/github.com/project2/bar/y.go  (go code in package main)\n\tDIR/src/bar/z.go  (go code in package main)\n\n(with DIR being part of GOPATH)\n\nRunning \"go install\" on any of the three program directories\nwill create binaries named DIR/bin/bar, i.e. all program\nbinaries will install to the same location.\n\n1) A current workaround is to use a separate source hierarchy for\neach project, i.e. DIR1, DIR2, DIR3 for the projects above,\nlisted in GOPATH.\n\n2) Another way to cope with this situation would be to\nreplicate the structure of the DIR/src directory within\nDIR/bin. The binary bar from project2 would be installed to\nDIR/bin/github.com/project2/bar.\nIn a shell like Plan 9's rc it could be run at the prompt\ndirectly as github.com/project2/bar, provided DIR/bin is in\nthe $PATH. With bash this is not possible as far as I know.\nSo perhaps that's not an option. It would require a modification\nof the go tool resp. go/build.\n\n3) Similarly, the binaries' names could be extended to contain a\ntranslation of the project path, leading to the following names:\n\tDIR/bin/github.com-project1.com-foo-bar,\n\tDIR/bin/github.com-project2-bar,\n\tDIR/bin/bar.\n\n4) Also, each project could try to create unique program names:\n\tDIR/src/github.com/project1/foo/foo-bar/x.go\n\tDIR/src/github.com/project2/y-bar/y.go\n\tDIR/src/z-bar/z.go\n\nI would vote for 2), as it leaves no doubt about which binary\nis to be run (and I'm mostly using rc), or 3).\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-01-12T18:32:18Z",
	"updated_at": "2014-12-08T10:13:51Z"
}
