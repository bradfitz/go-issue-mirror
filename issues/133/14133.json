{
	"id": 129500360,
	"number": 14133,
	"state": "open",
	"title": "x/text/encoding/unicode: add examples",
	"body": "golang.org/x/text/encoding/unicode's documentation is a bit unclear to the newbie like myself that just wants to read files that Windows folks send them without having to become an expert in UTF-16.  I think the docs make sense to someone that already understands transforms, unicode, etc, but not everyone should need to know such plumbing.  All I wanted was something like ioutil.ReadFile() that automagically read MS-Windows UTF-16 files and gave me UTF-8.\r\n\r\nAn example like this would have helped:\r\n\r\n```\r\nfunc NewReader(rd io.Reader) io.Reader {\r\n\t// Make an tranformer that decodes MS-Windows (16LE) UTF files:\r\n\twinutf := unicode.UTF16(unicode.LittleEndian, unicode.IgnoreBOM)\r\n\t// Make a transformer that is like winutf, but abides by BOM if found:\r\n\tdecoder := winutf.NewDecoder()\r\n\t// Make a Reader that uses decoder:\r\n\treturn transform.NewReader(rd, unicode.BOMOverride(decoder))\r\n}\r\n\r\nfd, _ := os.Open(filename)\r\nr := NewReader(fd)  // Read from \"r\" to get UTF-8.\r\nutf8, _ := ioutil.ReadAll(r)\r\ntext := string(utf8)\r\n```\r\n\r\nIt would be awesome if that example (or one like it) was added to the documentation.  I'd be glad to submit a PR.\r\n\r\nFurthermore, it would be useful to have a library similar to ioutil but automagically detects UTF-16 is found.  I've made an example here: https://github.com/TomOnTime/utfutil",
	"user": {
		"login": "TomOnTime",
		"id": 1389289,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "mpvl",
		"id": 6445383,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"created_at": "2016-01-28T16:26:41Z",
	"updated_at": "2016-01-29T16:43:32Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
