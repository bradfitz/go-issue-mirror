{
	"id": 146039509,
	"number": 15133,
	"state": "open",
	"title": "runtime: timer doesn't scale on multi-CPU systems with a lot of timers",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n### What version of Go are you using (`go version`)?\r\n```\r\ngo version devel +dfad3f8 Tue Apr 5 16:10:33 2016 +0300 linux/amd64\r\n```\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGORACE=\"\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build040466407=/tmp/go-build -gno-record-gcc-switches\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n### What did you do?\r\n\r\nI run an http server serving more than a million concurrent TCP keep-alive connections on a system with 32 CPU cores. Each connection has read and write deadlines set via `net.Conn.SetReadDeadline` and `net.Conn.SetWriteDeadline`.\r\n\r\n### What did you expect to see?\r\n\r\nServer performance should scale with `GOMAXPROCS` up to the number of CPU cores.\r\n\r\n### What did you see instead?\r\n\r\n* `addtimer` and `deltimer` functions from `runtime/time.go` are at the top of CPU profile.\r\n* `iowait` reaches 20% due to memory ping-pong across CPU cores inside `siftupTimer` and `siftdownTimer` functions in `runtime/time.go`.\r\n\r\n@dvyukov , could you look into this?\r\n\r\n\r\n",
	"user": {
		"login": "valyala",
		"id": 283442,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"comments": 5,
	"created_at": "2016-04-05T16:21:41Z",
	"updated_at": "2016-04-07T15:54:20Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
