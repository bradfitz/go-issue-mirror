{
	"id": 191592026,
	"body": "I'll add computing Mandelbrot fractals with big.Float as motivation. Ideally a whole new big.Complex type, :-) or at least big.Float.Sqrt, and possibly big.Float.Exp too. See for instance exercise 3.8, page 63, of [The Go Programming Language](https://github.com/adonovan/gopl.io/blob/master/ch3/mandelbrot/main.go#L37) book:\r\n\r\n\"Rendering fractals at high zoom levels demands great arithmetic precision. Implement the same fractal using four different representations of numbers: complex64, complex128, big.Float, and big.Rat. How do they compare in performance and memory usage? At what zoom levels do rendering artifacts become visible?\"\r\n\r\n(Disregard big.Rat, it's way too slow for this kind of use anyway.)\r\n\r\nAlso, see this go-nuts discussion: [math/big pow() and floor() help](https://groups.google.com/d/topic/golang-nuts/kfv93RZSap4/discussion).",
	"user": {
		"login": "teknico",
		"id": 172521,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-03T05:37:58Z",
	"updated_at": "2016-03-03T05:37:58Z"
}
