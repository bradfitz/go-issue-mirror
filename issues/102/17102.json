{
	"id": 176941979,
	"number": 17102,
	"state": "open",
	"title": "proposal: expose ObjC API to gomobile bind programs",
	"body": "## Abstract\r\nToday, gomobile bind can take a set og Go packages and expose their public API to Java or ObjC apps. The proposal is to support the reverse, exposing ObjC API to the bound Go packages.\r\n\r\nThis is the twin proposal to #16876, describing how ObjC API is accessed from Go.\r\n\r\n## Motivation\r\nThe motivation for this functionality is the same as for Java: to allow more of a mobile app to be written in Go in a convenient way that reduces boiler plate.\r\n\r\n## Proposed features\r\n### Importing ObjC classes and protocols from Go\r\nThe Go wrappers for the ObjC API references by the bound packages are generated each time gomobile bind is called. To access a ObjC type, use import statements on the form:\r\n\r\n````\r\n    import \"ObjC/Module\"\r\n````\r\n\r\nWhich is the Go equivalent to `@import Module` in ObjC.\r\n\r\nTo access the static methods on a ObjC class, use\r\n\r\n````\r\n    import \"ObjC/Module/NSSomeClass\"\r\n````\r\n\r\n### Static methods\r\nAfter importing, the resulting packages NSSomeClass will contain the static methods of its ObjC counterpart. For example\r\n\r\n    import \"ObjC/Foundation/NSDate\"\r\n\r\nwill allow Go code to use call `NSDate.Date()`, which is equivalent to `[NSDate date]` in ObjC\r\n\r\n### ObjC classes and protocols\r\nThe package `\"ObjC/Module\"` contains Go interfaces wrapping every referenced ObjC type in the module. The wrapper types represent their wrapped ObjC types across the language barrier and can be used to call methods on wrapped instances. For example, the following Go function takes an ObjC NSDate instance and returns its description:\r\n\r\n````\r\nimport \"ObjC/Foundation\"\r\n\r\nfunc F(d Foundation.NSDate) string {\r\n    return d.Description()\r\n}\r\n````\r\n\r\n### Creating new ObjCinstances\r\nTo create a new instance of a Java class, use the `New` functions defined in the class package. There is a constructor function for every ObjC instance method whose name starts with `init`. For example the following function performs the equivalent of `[[NSObject alloc] init]`:\r\n\r\n````\r\nimport (\r\n    \"ObjC/Foundation/NSObject\"\r\n)\r\n\r\nfunc NewNSObject() Foundation.NSObject {\r\n    return NSObject.New()\r\n}\r\n````\r\n\r\n### Errors\r\nObjC methods that return errors are automatically converted to return a Go `error` result.\r\n\r\n### Inheriting from ObjC classes or conform to ObjC protocols in Go\r\nGomobile already exposes exported Go structs to ObjC; this proposal adds support for constructing Go structs directly from ObjC. In addition, Go structs will be able to extend ObjC classes and implement ObjC protocols.\r\n\r\nTo declare a Go struct that extends or implements ObjC types, use the form:\r\n\r\n````\r\nimport \"ObjC/UIKit\"\r\nimport \"ObjC/Foundation/NSCopying\"\r\n\r\ntype S struct {\r\n    UIKit.UIResponder// extends UIResponder\r\n    Foundation.NSCopying // implements NSCopying\r\n}\r\n````\r\n\r\nNew instances of S are created in ObjC with `[[GoPkgS alloc] init]`. The default `init` initializer results in the ObjC instance referring to a new(S) from Go.\r\n\r\n\r\n### Overriding ObjC methods\r\nTo override a method from a super class or implement a method from a protocol, declare a Go method with the same name and its first letter capitalized. For example, to override the description method in GoObject:\r\n\r\n````\r\nfunc (o *GoObject) Description() string {\r\n    ...\r\n}\r\n````\r\n\r\n### Exposing `this`\r\nWhenever an foreign object is passed across the language barrier, a proxy is created to represent it. In the example above, there is a GoObject ObjC instance created in ObjC, and it contains a reference to its counterpart GoObject Go instance in Go. That means that when a Go method is called from ObjC, its method receiver contains the Go instance, while the ObjC instance is only accessible to Java.\r\nTo access the Java instance (for passing back to other ObjC APIs), any Go overriding method can declare a `this` argument with one of the Java types the enclosing class extends or implements. For example, to access the `this` from the description method, use:\r\n\r\n````\r\nfunc (o *GoObject) Description(this Foundation.NSObject) string {\r\n    ...\r\n}\r\n````\r\n\r\nThe `this` variable will behave just as if it were a pure ObjC NSObject, and if passed or returned to ObjC, will have the same identity as the ObjC reference.\r\n\r\n### Calling `super`\r\nIn Go, delegation is achieved through delegation, but in ObjC, the keyword `super` is needed to access overridden methods. To call a super method from Go, use the Super() method on the `this` variable: \r\n\r\n````\r\nfunc (o *GoObject) Descriptionthis Foundation.NSObject) string {\r\n    return this.Super().Description()\r\n}\r\n````\r\n\r\n### Type name mangling\r\nIn ObjC, classes and protocols have difference namespaces. For example, there is both a `NSObject` class and a `NSObject` protocol. In such cases, the Go names for the class has \"C\" appendded and the protocol has \"P\" appended. Thus, `Foundation.NSObjectC` is the name for the Go `NSObject` class, while `Foundation.NSObjectP` is the name for the protocol.\r\n\r\n### Method names\r\nIn ObjC, the parameters are named and part of the function signature. The Go name for a method is the upper case first part of the method signature. If that is ambiguous, the full signature is used with colons removed and parameter names upper-cased. The final fallback is the ObjC signature with colons replaced with underscores, resulting in guaranteed unique, albeit ugly, names. For example, the ObjC methods\r\n\r\n````\r\nsomeMethod\r\nsomeMethod:\r\nanotherMethod:\r\nanotherMethod:withArgument:\r\nthirdMethod:withArgument\r\n````\r\n\r\nare translated to the following Go method names:\r\n\r\n````\r\nSomeMethod\r\nSomeMethod_\r\nAnotherMethod\r\nAnotherMethodWithArgument\r\nThirdMethod\r\n````",
	"user": {
		"login": "eliasnaur",
		"id": 524812,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"created_at": "2016-09-14T15:38:51Z",
	"updated_at": "2016-09-14T16:01:19Z"
}
