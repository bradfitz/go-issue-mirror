{
	"id": 66083705,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\r\n\r\n\u003cpre\u003eI'm not sure how I feel about this.\r\n\r\nSome examples of _= range from the standard library, with commentary from me.\r\n\r\n\r\npkg/os/exec/exec.go:\r\n\r\n        var copyError error\r\n        for _ = range c.goroutine {\r\n                if err := \u0026lt;-c.errch; err != nil \u0026\u0026 copyError == nil {\r\n                        copyError = err\r\n                }\r\n        }\r\n\r\nThis is pretty good code, although it is certainly weird (c.goroutine is a slice of\r\nfunctions that were launched at process startup).\r\n\r\n\r\ncmd/cgo/out.go:\r\n\r\n// Call a function for each entry in an ast.FieldList, passing the\r\n// index into the list and the type.\r\nfunc forFieldList(fl *ast.FieldList, fn func(int, ast.Expr)) {\r\n        if fl == nil {\r\n                return\r\n        }\r\n        i := 0\r\n        for _, r := range fl.List {\r\n                if r.Names == nil {\r\n                        fn(i, r.Type)\r\n                        i++\r\n                } else {\r\n                        for _ = range r.Names {\r\n                                fn(i, r.Type)\r\n                                i++\r\n                        }\r\n                }\r\n        }\r\n}\r\n\r\nThis could be written more clearly this way, IMO:\r\n\r\n        for _, r := range fl.List {\r\n                n := 1\r\n                if r.Names != nil {\r\n                        n = len(r.Names)\r\n                }\r\n                for j := 0; j \u0026lt; n; j++ {\r\n                        fn(i, r.Type)\r\n                        i++\r\n                }\r\n        }\r\n\r\nBut now that I look at it again, I'm not sure it's better at all.\r\n\r\n\r\nunicode/utf8/utf8.go:\r\n\r\n// RuneCountInString is like RuneCount but its input is a string.\r\nfunc RuneCountInString(s string) (n int) {\r\n        for _ = range s {\r\n                n++\r\n        }\r\n        return\r\n}\r\n\r\nThis is an interesting one, because it's actually using the property of range that it\r\nbreaks a string into runes. Good code.\r\n\r\n\r\nTwo of these three examples use \"_ = range v\" to do something len(v) times. Most of the\r\nother instances in the standard library are in tests that do the same.\r\n\r\nI'm not against \"for range v\" as a substitute for \"for _ = range v\", but I would be very\r\ninterested in being able to write \"for range n\" to do something n times, with the\r\nexpression n evaluated only once. (I think Nigel also expressed interest in this, cc'd.)\u003c/pre\u003e",
	"user": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-12T01:48:44Z",
	"updated_at": "2014-12-19T23:50:33Z"
}
