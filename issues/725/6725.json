{
	"id": 51285630,
	"number": 6725,
	"state": "closed",
	"title": "cmd/go: go test -coverprofile produces no profile if there are no test files.",
	"body": "\u003cpre\u003eTo reproduce, run in the GOPATH root:\n    mkdir z/\n    echo -e 'package z\\nfunc x() { println(\u0026quot;x\u0026quot;) }' \u0026gt; z/z.go\n    go test -coverprofile=c.out z\n\nExpected behavior:\n  c.out created indicating 0% test coverage (no statements of z.go are covered)\n\nActual behavior:\n  No c.out created.\n\nHowever, if a test file exists:\n    echo \u0026quot;package z\u0026quot; \u0026gt; z/z_test.go\n    go test -coverprofile=c.out z\n    # c.out created showing no statements covered\n\nThen c.out is created as expected.\n\n\nThe current behavior is problematic in my script that automatically generates coverage\nfor a directory tree -- there is no indication in the output for packages that have no\ntests.\n\n\nGo: go version go1.2rc3 darwin/amd64\nOS: OS X 10.8.5\u003c/pre\u003e",
	"user": {
		"login": "augustoroman",
		"id": 676565,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"closed_at": "2014-12-08T10:37:20Z",
	"created_at": "2013-11-06T19:34:14Z",
	"updated_at": "2016-06-25T01:21:57Z"
}
