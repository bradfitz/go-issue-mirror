{
	"id": 171347800,
	"number": 16725,
	"state": "closed",
	"title": "cmd/vet: check unkeyed fields only when pkg is built",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\ngo version go1.7 linux/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/ymmt/t\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build329948438=/tmp/go-build -gno-record-gcc-switches\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n\r\n3. What did you do?\r\n\r\n* Create a.go and b.go as follows:\r\n\r\n```\r\ncd $GOPATH\r\nmkdir -p src/a src/b\r\ncat \u003esrc/a/a.go \u003c\u003cEOF\r\npackage a\r\n\r\ntype A struct {\r\n    Key string\r\n}\r\nEOF\r\ncat \u003esrc/b/b.go \u003c\u003cEOF\r\npackage b\r\n\r\nimport \"a\"\r\n\r\nvar B = []a.A{\r\n    {\"abc\"},\r\n}\r\nEOF\r\n```\r\n\r\n* Run `go vet` without built binaries will not produce warnings.\r\n\r\n```\r\ncd $GOPATH\r\nrm -rf pkg\r\ngo vet a b\r\n```\r\n\r\n* After built a, `go vet` produce warnings.\r\n\r\n```\r\ncd $GOPATH\r\ngo install a\r\ngo vet a b\r\n```\r\n\r\n4. What did you expect to see?\r\n\r\n    src/b/b.go:6: a.A composite literal uses unkeyed fields\r\n    exit status 1\r\n\r\n5. What did you see instead?\r\n\r\nNothing, if no a binary.",
	"user": {
		"login": "ymmt2005",
		"id": 1461515,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-08-16T21:29:43Z",
	"created_at": "2016-08-16T08:00:52Z",
	"updated_at": "2016-08-16T21:49:03Z"
}
