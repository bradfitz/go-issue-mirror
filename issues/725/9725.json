{
	"id": 55893528,
	"number": 9725,
	"state": "closed",
	"title": "runtime: cputicks has low precision on arm",
	"body": "runtime/os_linux_arm.go:\r\n\r\nfunc cputicks() int64 {\r\n\t// Currently cputicks() is used in blocking profiler and to seed fastrand1().\r\n\t// nanotime() is a poor approximation of CPU ticks that is enough for the profiler.\r\n\t// randomNumber provides better seeding of fastrand1.\r\n\treturn nanotime() + int64(randomNumber)\r\n}\r\n\r\nThis causes runtime/pprof trace tests failures:\r\n\r\n--- FAIL: TestTrace (0.00s)\r\n\ttrace_test.go:56: failed to parse trace: g 3 is not runnable before traceEvGoWaiting (offset 48, time 30528)\r\n--- FAIL: TestTraceStress (1.32s)\r\n\ttrace_test.go:151: failed to parse trace: g 3 is not runnable before traceEvGoWaiting (offset 75185, time 30528)\r\n--- FAIL: TestTraceSymbolize (0.04s)\r\n\ttrace_test.go:199: failed to parse trace: g 3 is not runnable before traceEvGoWaiting (offset 48, time 30481)\r\n\r\nhttp://build.golang.org/log/413c7741597ae53221e88070d1b5a70c3a365b03\r\nhttp://build.golang.org/log/46208c3a96add5a5e5b15ed36ca1d5aa09f7173b\r\n\r\nTracer expects that cputicks are globally monotonic and has cycle precision (subsequent events has different timestamps). The former is probably true for this impl, but the latter is not true.\r\n",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"comments": 16,
	"closed_at": "2015-11-23T20:01:22Z",
	"created_at": "2015-01-29T12:35:12Z",
	"updated_at": "2015-11-23T20:01:22Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
