{
	"id": 183304059,
	"number": 17473,
	"state": "closed",
	"title": "runtime: scan missed a g",
	"body": "### What version of Go are you using (`go version`)?\r\nCurrent master (42f5ee4c).\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n```sh\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/austin/r/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/home/austin/go.dev\"\r\nGOTOOLDIR=\"/home/austin/go.dev/pkg/tool/linux_amd64\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build843179543=/tmp/go-build -gno-record-gcc-switches\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n### What did you do?\r\n```sh\r\ncd misc/cgo/test\r\nwhile GOGC=10 GODEBUG=gccheckmark=1 GOTRACEBACK=2 go test -ldflags -linkmode=auto; do date; done\r\n```\r\n\r\n### What did you expect to see?\r\nEndless PASSes.\r\n\r\n### What did you see instead?\r\nAfter ~20 iterations:\r\n```\r\ngp 0xc4200de820 goid 86 status 3 gcscandone false gcscanvalid true\r\nfatal error: scan missed a g\r\n\r\nruntime stack:\r\nruntime.throw(0x5ae8b3, 0xf)\r\n\t/home/austin/go.dev/src/runtime/panic.go:587 +0x95 fp=0x7f0caf7fddd0 sp=0x7f0caf7fddb0\r\nruntime.gcMarkRootCheck()\r\n\t/home/austin/go.dev/src/runtime/mgcmark.go:126 +0x20c fp=0x7f0caf7fde20 sp=0x7f0caf7fddd0\r\nruntime.gcMark(0xb987937f9bef)\r\n\t/home/austin/go.dev/src/runtime/mgc.go:1599 +0x4e3 fp=0x7f0caf7fde68 sp=0x7f0caf7fde20\r\nruntime.gcMarkTermination.func1()\r\n\t/home/austin/go.dev/src/runtime/mgc.go:1194 +0x2d fp=0x7f0caf7fde80 sp=0x7f0caf7fde68\r\nruntime.systemstack(0xc420028600)\r\n\t/home/austin/go.dev/src/runtime/asm_amd64.s:298 +0x79 fp=0x7f0caf7fde88 sp=0x7f0caf7fde80\r\nruntime.mstart()\r\n\t/home/austin/go.dev/src/runtime/proc.go:1081 fp=0x7f0caf7fde90 sp=0x7f0caf7fde88\r\n\r\ngoroutine 20 [garbage collection]:\r\nruntime.systemstack_switch()\r\n\t/home/austin/go.dev/src/runtime/asm_amd64.s:252 fp=0xc42002d540 sp=0xc42002d538\r\nruntime.gcMarkTermination()\r\n\t/home/austin/go.dev/src/runtime/mgc.go:1202 +0x141 fp=0xc42002d728 sp=0xc42002d540\r\nruntime.gcMarkDone()\r\n\t/home/austin/go.dev/src/runtime/mgc.go:1166 +0x1db fp=0xc42002d748 sp=0xc42002d728\r\nruntime.gcBgMarkWorker(0xc420026000)\r\n\t/home/austin/go.dev/src/runtime/mgc.go:1513 +0x2c6 fp=0xc42002d7b8 sp=0xc42002d748\r\nruntime.goexit()\r\n\t/home/austin/go.dev/src/runtime/asm_amd64.s:2158 +0x1 fp=0xc42002d7c0 sp=0xc42002d7b8\r\ncreated by runtime.gcBgMarkStartWorkers\r\n\t/home/austin/go.dev/src/runtime/mgc.go:1357 +0x98\r\n*** Test killed: ran too long (10m0s).\r\n```\r\n\r\nNote that the \"scan missed a g\" check is *only* done in gccheckmark mode, which means this bug could be manifesting as a dangling pointer in normal usage. Also, I found this while stress-testing all.bash and it only affected the misc/cgo tests.\r\n\r\n/cc @RLH ",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-10-19T21:37:48Z",
	"created_at": "2016-10-17T00:40:00Z",
	"updated_at": "2016-10-19T21:37:48Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
