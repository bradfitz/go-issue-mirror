{
	"id": 51286177,
	"number": 7090,
	"state": "closed",
	"title": "testing: ease writing parallel benchmarks",
	"body": "\u003cpre\u003eWriting contention benchmarks involves some boilerplate:\n\n\u003ca href=\"https://golang.org/cl/46010043/diff/60001/src/pkg/sync/pool_test.go\"\u003ehttps://golang.org/cl/46010043/diff/60001/src/pkg/sync/pool_test.go\u003c/a\u003e\n\u003ca href=\"https://golang.org/cl/49910043/\"\u003ehttps://golang.org/cl/49910043/\u003c/a\u003e\n\netc\n\nThe general form is:\n\n        const CallsPerSched = 1000\n\tprocs := runtime.GOMAXPROCS(-1)\n        N := int32(b.N / CallsPerSched)\n        c := make(chan bool, procs)\n\tfor p := 0; p \u0026lt; procs; p++ {\n                go func() {\n\t                var buf bytes.Buffer\n                        for atomic.AddInt32(\u0026amp;N, -1) \u0026gt;= 0 {\n                                for g := 0; g \u0026lt; CallsPerSched; g++ {\n\t\t\t\t\tf(\u0026amp;buf)\n                                }\n\t                }\n                        c \u0026lt;- true\n\t        }()\n        }\n        for p := 0; p \u0026lt; procs; p++ {\n                \u0026lt;-c\n\t}\n\n\nBut sometimes:\n\n    n0 := uintptr(b.N)\n    atomic.AddUintptr(\u0026amp;n, ^uintptr(0)) \u0026lt; n0 {\n\nThe testing package seems to cap b.N at 2*1e9, but that's not publicly documented as a\nguarantee.\n\nCan/should we say that b.N will always fit in an int32, even if it's of type int?\n\nI once even defensively wrote,\n\nfunc BenchmarkPool(b *testing.B) {\n        procs := runtime.GOMAXPROCS(-1)\n\tvar dec func() bool\n\tif unsafe.Sizeof(b.N) == 8 {\n\t\tn := int64(b.N)\n\t\tdec = func() bool {\n\t\t\treturn atomic.AddInt64(\u0026amp;n, -1) \u0026gt;= 0\n\t\t}\n\t} else {\n                n := int32(b.N)\n\t\tdec = func() bool {\n\t\t\treturn atomic.AddInt32(\u0026amp;n, -1) \u0026gt;= 0\n\t\t}\n\t}\n        var p Pool\n\tvar wg WaitGroup\n\tfor i := 0; i \u0026lt; procs; i++ {\n\t\twg.Add(1)\n\t\tgo func() {\n                        defer wg.Done()\n\t\t\tfor dec() {\n                                p.Put(1)\n\t\t\t\tp.Get()\n\t\t\t}\n\t\t}()\n\t}\n        wg.Wait()\n}\n\n... but felt gross about it.\n\nWe should either document this, or provide a means in the testing package to ease\nwriting benchmarks for contention.\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 6,
	"closed_at": "2014-12-08T10:39:27Z",
	"created_at": "2014-01-09T21:33:57Z",
	"updated_at": "2016-06-25T01:25:16Z",
	"milestone": {
		"id": 1067211,
		"number": 17,
		"title": "Go1.3"
	}
}
