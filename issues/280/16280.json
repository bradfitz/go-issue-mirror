{
	"id": 164179397,
	"number": 16280,
	"state": "open",
	"title": "path/filepath: SkipDir does not work as expected for non-directory files",
	"body": "1. What version of Go are you using (`go version`)?\r\ngo version go1.6.1 darwin/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nGOARCH=\"amd64\"\r\nGOOS=\"darwin\"\r\n\r\n3. What did you do?\r\nReturned `filepath.SkipDir` in a `filepath.WalkFunc` when the file was not a directory.\r\n\r\n4. What did you expect to see?\r\n`filepath.Walk` would return `nil`\r\n\r\n5. What did you see instead?\r\n`filepath.Walk` returned `filepath.SkipDir`\r\n\r\nI don't know whether this is an issue with the documentation or implementation, but the behavior seems to contradict the [documentation for `filepath.WalkFunc`](https://golang.org/pkg/path/filepath/#WalkFunc).\r\n\u003e If an error is returned, processing stops. The sole exception is when the function returns the special value SkipDir. If the function returns SkipDir when invoked on a directory, Walk skips the directory's contents entirely. If the function returns SkipDir when invoked on a non-directory file, Walk skips the remaining files in the containing directory.",
	"user": {
		"login": "Fugiman",
		"id": 545785,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"created_at": "2016-07-06T21:32:11Z",
	"updated_at": "2016-07-07T00:05:28Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
