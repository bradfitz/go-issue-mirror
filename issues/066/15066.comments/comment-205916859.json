{
	"id": 205916859,
	"body": "Just keep running the tests. This generally fails faster in resource constrained environments such such as a container or a VM. On my personal laptop it can take anywhere from 50-10000 runs in order to see this failure occur. Also you can see this issue reported in public builds of golang, for example [here](https://build.golang.org/log/05673c245319a0dcca87d23159025c32936b8fe3).\r\n\r\n[RFC 4253 Section 9](https://tools.ietf.org/html/rfc4253#section-9) states that either the client or server may re-initiate a key exchange at any point, and the other side must be able to handle this key exchange. This would imply that a key exchange during authentication is theoretically possible, and should not result in a `handshake failed: ssh: unexpected message type 21 (expected 6)`.\r\n\r\nI believe that this is failing intermittently because of timing changes introduced in go 1.6. If you look at the test setup for the above test [here](https://github.com/golang/crypto/blob/master/ssh/session_test.go#L31-L65), you will see that both the `NewClientConn` and `NewServerConn` happen in separate goroutines. Also, both the [client transport](https://github.com/golang/crypto/blob/master/ssh/handshake.go#L113) and the [server transport](https://github.com/golang/crypto/blob/master/ssh/handshake.go#L120) begin reading packets asynchronously in a goroutine using the [`readOnePacket` method](https://github.com/golang/crypto/blob/master/ssh/handshake.go#L166-L212). `readOnePacket` handles key exchanges internally, so there is no guarantee that both the [client](https://github.com/golang/crypto/blob/master/ssh/handshake.go#L120) and the [server](https://github.com/golang/crypto/blob/master/ssh/client.go#L100) have requested key exchanges with the expected timing. Resulting in a failure on the subsequent `readPacket` in client authentication.\r\n\r\nGranted this could fail on any calls to `readPacket` that are not used for key exchange as both sides may initiate a key exchange at any point in time, as noted above. Hence why in the [this commit](https://github.com/jfmyers9/crypto/commit/24edb00c618df80c93dd46d895e1dcf4eb50c635) we ignore key exchange packets in previous locations where `readPacket` was used, as these key exchange packets are handled internally by `readOnePacket`.  Please note, that we cannot have `readPacket` always ignore key exchange packets, as we use this method to validate that we have in fact  performed a key exchange [here](https://github.com/golang/crypto/blob/master/ssh/server.go#L195).\r\n\r\nBest,\r\n\r\nJim",
	"user": {
		"login": "jfmyers9",
		"id": 1035246,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-05T17:47:29Z",
	"updated_at": "2016-04-06T19:42:12Z"
}
