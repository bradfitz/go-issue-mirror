{
	"id": 51287731,
	"number": 8138,
	"state": "closed",
	"title": "crypto/tls: handshake failure",
	"body": "by **zhuoyikang@nibirutech.com**:\n\n\u003cpre\u003ei believe it's a bug on crypto/tls.\n\nmy client is Erlang-R15B02, and Server is  crypto/tls , always handshark error, there is\nssldump below:\n\nNew TCP connection #1: ip-10-0-1-169.us-west-2.compute.internal(36804) \u0026lt;-\u0026gt;\n115.29.228.221(60056)\n1 1  1.2367 (1.2367)  C\u0026gt;S  Handshake\n      ClientHello\n        Version 3.1\n        cipher suites\n        Unknown value 0xff\n        TLS_DHE_RSA_WITH_AES_256_CBC_SHA\n        TLS_DHE_DSS_WITH_AES_256_CBC_SHA\n        TLS_RSA_WITH_AES_256_CBC_SHA\n        TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA\n        TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA\n        TLS_RSA_WITH_3DES_EDE_CBC_SHA\n        TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n        TLS_DHE_DSS_WITH_AES_128_CBC_SHA\n        TLS_RSA_WITH_AES_128_CBC_SHA\n        TLS_RSA_WITH_RC4_128_SHA\n        TLS_RSA_WITH_RC4_128_MD5\n        TLS_DHE_RSA_WITH_DES_CBC_SHA\n        TLS_RSA_WITH_DES_CBC_SHA\n        compression methods\n                  NULL\n1 2  1.4580 (0.2213)  S\u0026gt;C  Alert\n    level           fatal\n    value           handshake_failure\n1    1.4580 (0.0000)  S\u0026gt;C  TCP FIN\n1    1.4590 (0.0010)  C\u0026gt;S  TCP FIN\n\nso ,these cipher suites are support by Erlang:\n        TLS_DHE_RSA_WITH_AES_256_CBC_SHA\n        TLS_DHE_DSS_WITH_AES_256_CBC_SHA\n        TLS_RSA_WITH_AES_256_CBC_SHA\n        TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA\n        TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA\n        TLS_RSA_WITH_3DES_EDE_CBC_SHA\n        TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n        TLS_DHE_DSS_WITH_AES_128_CBC_SHA\n        TLS_RSA_WITH_AES_128_CBC_SHA\n        TLS_RSA_WITH_RC4_128_SHA\n        TLS_RSA_WITH_RC4_128_MD5\n        TLS_DHE_RSA_WITH_DES_CBC_SHA\n        TLS_RSA_WITH_DES_CBC_SHA\n\n\nand these cipher suites is supported by golang/tls\n TLS_RSA_WITH_RC4_128_SHA                uint16 = 0x0005\nTLS_RSA_WITH_3DES_EDE_CBC_SHA           uint16 = 0x000a\nTLS_RSA_WITH_AES_128_CBC_SHA            uint16 = 0x002f\nTLS_RSA_WITH_AES_256_CBC_SHA            uint16 = 0x0035\nTLS_ECDHE_ECDSA_WITH_RC4_128_SHA        uint16 = 0xc007\nTLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA    uint16 = 0xc009\nTLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA    uint16 = 0xc00a\nTLS_ECDHE_RSA_WITH_RC4_128_SHA          uint16 = 0xc011\nTLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA     uint16 = 0xc012\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA      uint16 = 0xc013\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA      uint16 = 0xc014\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256   uint16 = 0xc02f\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 uint16 = 0xc02b\n\nand, they both suport:\n\n\n```\nTLS_RSA_WITH_AES_256_CBC_SHA\nTLS_RSA_WITH_3DES_EDE_CBC_SHA\nTLS_RSA_WITH_AES_128_CBC_SHA\nTLS_RSA_WITH_RC4_128_SHA\n```\n\n\nbut go/tls inject and fatal error \n\n1 2  1.4580 (0.2213)  S\u0026gt;C  Alert\n    level           fatal\n    value           handshake_failure\n\ndoes it a bug ???\n\nmeanwhile, i test golang/tls in my computer where erlang client, it work as excepted.\nbut it does work on the remote server where i am not convenienced to give the host/port,\n\nany body can help?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 5,
	"closed_at": "2014-12-08T10:45:07Z",
	"created_at": "2014-06-02T15:34:07Z",
	"updated_at": "2016-06-25T01:35:46Z",
	"milestone": {
		"id": 1067218,
		"number": 21,
		"title": "Go1.4"
	}
}
