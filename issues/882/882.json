{
	"id": 51277057,
	"number": 882,
	"state": "closed",
	"title": "Field shadowing with embedded types",
	"body": "by **jnwhiteh**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n1. Create the following program:\n\npackage main\n\nimport \u0026quot;fmt\u0026quot;\n\ntype A struct {\n\tX int\n}\n\ntype B struct {\n\t*A\n\tX int\n}\n\nfunc main() {\n\tobj := \u0026amp;A{1}\n\tobj2 := \u0026amp;B{obj, 2}\n\tfmt.Printf(\u0026quot;X: %d\\n\u0026quot;, obj2.X)\n}\n\n2. Compile the program\n\nWhat is the expected output?\n\nA warning or error indicating that A.X will not be accessible through B, or an ambiguous\nfield reference at obj2.X.\n\nWhat do you see instead?\n\nNo errors or warnings\n\nWhat is your $GOOS?  $GOARCH?\n\ndarwin amd64\n\nWhich revision are you using?  (hg identify)\n\n8ef4a430e2e8+ tip\n\nPlease provide any additional information below.\n\nAs a statically typed language, Go should be able to warn the developer of likely\nbehaviour, but I might even argue that using embedded types like this should produce an\nerror during compilation. I have not had a chance to look at the compiler and see is\nthis change is feasible, but I think implicit 'errors' like this should be caught as\noften as possible.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 5,
	"closed_at": "2014-12-08T10:06:12Z",
	"created_at": "2010-06-22T11:17:14Z",
	"updated_at": "2016-06-24T19:17:14Z"
}
