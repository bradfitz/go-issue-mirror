{
	"id": 124364670,
	"body": "\u003e One possibility would be \"given a pointer p, any read or write of *p happens before p's finalizer is run.\" But that is too strong, as it prohibits the compiler from reordering any operation across the use of a pointer.\r\n\r\nIndeed. Also if you have ```p.f.foo()```, you generally don't know whether you access ```*p``` or ```**p``` and that can change over time. So a guarantee only for ```*p``` becomes too subtle to be used reliably. I also suspect there are more optimizations it prohibits as it effectively makes almost any store a synchronization operation. Also, if I just load from an object, but they result is eventually unused, does it order finalizer?\r\n\r\nFWIW Java makes exactly the guarantee I described.\r\n\r\n\u003e I feel like what we want here is an inverse relationship. Given a pointer p, there is no possible ordering such that the finalizer happens-before any read or write of *p. But I don't know if that makes any sense.\r\n\r\nIt makes sense, but it states effectively what I proposed :)\r\nIf a finalizer can't happen-before, then it happens either after or concurrently. But if it potentially can happen concurrently, then you need to synchronize accesses to prevent data races.\r\n",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-24T06:51:24Z",
	"updated_at": "2015-07-24T06:51:55Z"
}
