{
	"id": 214983458,
	"body": "On 27 April 2016 at 07:14, Dave Cheney \u003cnotifications@github.com\u003e wrote:\n\n\u003e Using an empty select has other side effects.\n\u003e\n\u003e What other side effects ?\n\u003e\n Caveat: knowledge state go 1.6\n\n\u003e for same reason Banks still use COBOL heap sorts for some tasks;\n\u003e predictability.\n\u003e\nselect{}, correctly, reads the channel list on entry. Then, correctly,\nchecks the senders/receivers for the state of its cases. Unfortunate time\nspent reading the channel list ist undefined. The channel list is protected\nby mutexes . If the rate of channel creation is proportional to load and\nthe time spent waiting to read exceeds a gc cycle then pseudo random\ndetermines the read list complete. Every time select{} is woken it can\nblock for an undefined period to time. We had a similar discussion last\nyear. The consensus was \"do not use defaults in select\". One real reason\nwas the read message in the select case was being held until the select\nexited. However, time spent reentering the select in a for{} under load was\nthe main cause of our performance loss.\n\nrgds, Nigel Vickers\n\n\n\n\n\n\n\n\u003e â€”\n\u003e You are receiving this because you commented.\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/15442#issuecomment-214971729\u003e\n\u003e\n",
	"user": {
		"login": "rhedile",
		"id": 4202476,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-27T06:30:55Z",
	"updated_at": "2016-04-27T06:30:55Z"
}
