{
	"id": 214971385,
	"body": " Using an empty select has other side effects. Being very old and just a\nuser I am very uncomfortable with the thought that \"tick,tock\" constructs\naccepted by the compiler and vet lead to a program that initially works as\nintended then enters a undefined condition without panic.\nNaturally this doesn't spin the runtime.\npackage main\n\nimport (\n//      \"fmt\"\n)\n\nfunc main() {\n        ch := make(chan int)\n        exit := make(chan bool)\n\n        go func() {\n                for {\n                        ch \u003c- 1\n                        //                      fmt.Println(\"sent i is \", i)\n\n                }\n        }()\n\n        go func() {\n                var i int = 0\n                for {\n                        i += \u003c-ch\n                        //                      fmt.Println(\"received i\nis\", i)\n                        if i \u003e 1000000 {\n                                exit \u003c- true\n                        }\n                }\n\n        }()\n\n        \u003c-exit\n\n}\n\n\nOn 27 April 2016 at 06:33, Josh Bleecher Snyder \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e Hmm. The original report doesn't match the later one. Those who can\n\u003e reproduce this: Does it reproduce without any for {} loops?\n\u003e\n\u003e â€”\n\u003e You are receiving this because you commented.\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/15442#issuecomment-214967402\u003e\n\u003e\n",
	"user": {
		"login": "rhedile",
		"id": 4202476,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-27T05:10:44Z",
	"updated_at": "2016-04-27T05:10:44Z"
}
