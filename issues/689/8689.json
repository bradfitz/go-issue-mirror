{
	"id": 51288557,
	"number": 8689,
	"state": "closed",
	"title": "Initialization loop checking is too aggressive.",
	"body": "by **brady**:\n\n\u003cpre\u003eI was building out a simple subcommand type interface where I defined a static list of\ncommands and the functions called when referencing them and ran into an issue with a\ndetected loop that I don't believe should be valid. For me it was the map of\n\u0026quot;name\u0026quot; -\u0026gt; function that included \u0026quot;help\u0026quot; as a call to usage(),\nwhere usage() displayed the keys from the map.\n\n\u003ca href=\"http://play.golang.org/p/tA_FHTGeFZ\"\u003ehttp://play.golang.org/p/tA_FHTGeFZ\u003c/a\u003e\n\nSince the reference is to the function pointer for test it should be populated long\nbefore the go initialization code starts and therefor should be treated more like an\ninteger rather than a call which requires ordering. Or at least that is how I understand\nit. Is there any reason that this should be considered a loop?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:48:12Z",
	"created_at": "2014-09-09T21:48:29Z",
	"updated_at": "2016-06-25T01:41:05Z"
}
