{
	"id": 111530913,
	"number": 12947,
	"state": "open",
	"title": "spec: ambiguity in definition of alignment",
	"body": "The spec (September 24, 2015) says:\r\n\r\n\u003e The following minimal alignment properties are guaranteed:\r\n\u003e\r\n\u003e 1. For a variable x of any type: unsafe.Alignof(x) is at least 1.\r\n\u003e 2. For a variable x of struct type: unsafe.Alignof(x) is the largest of all the values unsafe.Alignof(x.f) for each field f of x, but at least 1.\r\n\u003e 3. For a variable x of array type: unsafe.Alignof(x) is the same as unsafe.Alignof(x[0]), but at least 1.\r\n\r\nWhile intuitive, this definition doesn't address structs with blank fields (because there's no valid x.f expression to access those fields) or zero-element arrays (because x[0] is an illegal expression, as 0 is a constant that's out of the array's bounds).\r\n\r\nIt seems like these can be addressed by changing the wording to something like:\r\n\r\n  1. The alignment of any type is at least 1.\r\n  2. The alignment of a struct type is at least as large as the alignment of each of its fields.\r\n  3. The alignment of an array type is the same as the alignment of its element type.\r\n\r\n(The original definition repeats the \"but at least 1\" wording each time, but that seems redundant since nothing else indicates that rule 1 is mutually exclusive with rules 2 and 3.)",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"created_at": "2015-10-15T02:10:59Z",
	"updated_at": "2015-10-16T23:02:22Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
