{
	"id": 66073662,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eThat's a bit unfortunate, in that you can then never safely unmarshal into a struct\ncontaining unexported fields if you can't be certain the input will never contain those\nfield names in the future.\n\nI just had a split a type into two because of this.\n\nOh well.  At least this works:\n\ntype TInner struct {\n        Name string\n}\n\ntype T struct {\n        TInner\n        m    map[string]interface{}\n        m2   map[string]interface{}\n}\n\nfunc main() {\n        input := `{\"Name\": \"Bob\", \"m\": {\"x\": 123}, \"m2\": {\"y\": 456}}`\n        var t T\n        err := json.Unmarshal([]byte(input), \u0026t.TInner)\n        log.Printf(\"Name %q; err: %v\", t.Name, err)\n}\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-01-15T03:41:00Z",
	"updated_at": "2014-12-08T10:24:41Z"
}
