{
	"id": 192758917,
	"body": "Traditionally, context objects should carry configuration. The x/net/context package extends context objects' responsibilities by providing constructs for timeout and cancellation signals. In the scope of stamp coupling of request handlers, it is a valuable addition. But I am not sure how it will scale to the rest of the standard library and furthermore whether the context may end up being abused for signaling purposes. The two cases you mention above (exec.Cmd and sql.DB.Query) does this by solely using a context object for handling signals even though there is no necessity for storage. Are you trying to solve the issue of how data is passed among functions or also trying to have primitives around how the entire execution could be signaled from outside?\r\n\r\nOne of the concerns I would add to the list is that the context should be scoped to a function call.\r\n\r\n\"Do not store Contexts inside a struct type; instead, pass a Context explicitly to each function that needs it. The Context should be the first parameter, typically named ctx\" ([link)](https://godoc.org/golang.org/x/net/context)\r\n\r\nIf the standard library won't be agreeing with this due to compatibility reasons, don't you think it will create confusion?",
	"user": {
		"login": "rakyll",
		"id": 108380,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-05T23:30:09Z",
	"updated_at": "2016-03-05T23:30:09Z"
}
