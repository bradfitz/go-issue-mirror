{
	"id": 51287854,
	"number": 8214,
	"state": "closed",
	"title": "cmd/compile: registerization of large functions worse than in Go 1.2",
	"body": "\u003cpre\u003e\u003ca href=\"http://github.com/dchest/blake2b\"\u003ehttp://github.com/dchest/blake2b\u003c/a\u003e (and \u003ca href=\"http://github.com/dchest/blake2s)\"\u003ehttp://github.com/dchest/blake2s)\u003c/a\u003e are a lot slower\nwhen compiled with Go 1.3RC2 than with 1.2.\n\nBenchmark for blake2b on Linux amd64 (Atom CPU) comparing 1.2 and 1.3:\n\nbenchmark            old ns/op     new ns/op     delta        \nBenchmarkWrite1K     15711         67947         +332.48%     \nBenchmarkWrite8K     122868        528719        +330.31%     \nBenchmarkHash64      3923          15419         +293.04%     \nBenchmarkHash128     3551          14642         +312.33%     \nBenchmarkHash1K      17192         73758         +329.03%     \n\nbenchmark            old MB/s     new MB/s     speedup     \nBenchmarkWrite1K     65.17        15.07        0.23x       \nBenchmarkWrite8K     66.67        15.49        0.23x       \nBenchmarkHash64      16.31        4.15         0.25x       \nBenchmarkHash128     36.04        8.74         0.24x       \nBenchmarkHash1K      59.56        13.88        0.23x       \n\n\nThe meat is in block.go, which tries to put state into registers by using variables v0 -\nv15:\n\n\u003ca href=\"https://github.com/dchest/blake2b/blob/master/block.go#L41\"\u003ehttps://github.com/dchest/blake2b/blob/master/block.go#L41\u003c/a\u003e\n\nI looked at the listing generated by go build -gcflags \u0026quot;-S\u0026quot; and see the main\ndifference in temporary variables:\n\noriginal code:\n\n\t\tv0 += m[9]\n\t\tv0 += v5\n\t\tv15 ^= v0\n\t\tv15 = v15\u0026lt;\u0026lt;(64-16) | v15\u0026gt;\u0026gt;16\n\t\tv10 += v15\n\t\tv5 ^= v10\n\t\tv5 = v5\u0026lt;\u0026lt;(64-63) | v5\u0026gt;\u0026gt;63\n\ngo1.2:\n\n1995 (../block.go:146) ADDQ    BX,R11\n1996 (../block.go:147) MOVQ    v5+-200(SP),BX\n1997 (../block.go:147) ADDQ    BX,R11\n1998 (../block.go:148) XORQ    R11,AX\n1999 (../block.go:149) ROLQ    $48,AX\n2000 (../block.go:150) ADDQ    AX,R13\n2001 (../block.go:151) XORQ    R13,v5+-200(SP)\n2002 (../block.go:152) MOVQ    v5+-200(SP),BX\n2003 (../block.go:152) ROLQ    $1,BX\n2004 (../block.go:152) MOVQ    BX,v5+-200(SP)\n\ngo1.3:\n\n0x07bd 01981 (../block.go:146)\tMOVQ\t\u0026quot;\u0026quot;.v0+120(SP),BX\n0x07c2 01986 (../block.go:146)\tMOVQ\tBX,\u0026quot;\u0026quot;.autotmp_0264+176(SP)\n0x07ca 01994 (../block.go:146)\tMOVQ\t\u0026quot;\u0026quot;.m+264(SP),BX\n0x07d2 02002 (../block.go:146)\tMOVQ\t\u0026quot;\u0026quot;.autotmp_0264+176(SP),BP\n0x07da 02010 (../block.go:146)\tADDQ\tBP,BX\n0x07dd 02013 (../block.go:147)\tMOVQ\t\u0026quot;\u0026quot;.v5+32(SP),BP\n0x07e2 02018 (../block.go:147)\tADDQ\tBP,BX\n0x07e5 02021 (../block.go:147)\tMOVQ\tBX,\u0026quot;\u0026quot;.v0+120(SP)\n0x07ea 02026 (../block.go:148)\tMOVQ\t\u0026quot;\u0026quot;.v0+120(SP),BP\n0x07ef 02031 (../block.go:148)\tXORQ\tBP,AX\n0x07f2 02034 (../block.go:150)\tMOVQ\t\u0026quot;\u0026quot;.v10+104(SP),BX\n0x07f7 02039 (../block.go:149)\tROLQ\t$48,AX\n0x07fb 02043 (../block.go:150)\tADDQ\tAX,BX\n0x07fe 02046 (../block.go:150)\tMOVQ\tBX,\u0026quot;\u0026quot;.v10+104(SP)\n0x0803 02051 (../block.go:151)\tMOVQ\t\u0026quot;\u0026quot;.v5+32(SP),BX\n0x0808 02056 (../block.go:151)\tMOVQ\t\u0026quot;\u0026quot;.v10+104(SP),BP\n0x080d 02061 (../block.go:151)\tXORQ\tBP,BX\n0x0810 02064 (../block.go:152)\tROLQ\t$1,BX\n0x0813 02067 (../block.go:152)\tMOVQ\tBX,\u0026quot;\u0026quot;.v5+32(SP)\n\nIf I combine addition like this:\n\n-               v2 += m[9]\n-               v2 += v6\n+               v2 += m[9] + v6\n\n\nBenchmark improves from being ~300% slower to ~100% slower:\n\nbenchmark            old ns/op     new ns/op     delta        \nBenchmarkWrite1K     15711         33286         +111.86%     \nBenchmarkWrite8K     122868        254970        +107.52%     \nBenchmarkHash64      3923          9868          +151.54%     \nBenchmarkHash128     3551          9268          +161.00%     \nBenchmarkHash1K      17192         38254         +122.51%     \n\nbenchmark            old MB/s     new MB/s     speedup     \nBenchmarkWrite1K     65.17        30.76        0.47x       \nBenchmarkWrite8K     66.67        32.13        0.48x       \nBenchmarkHash64      16.31        6.49         0.40x       \nBenchmarkHash128     36.04        13.81        0.38x       \nBenchmarkHash1K      59.56        26.77        0.45x       \n\n\n\nWhat does 'go version' print?\n\ngo version devel +6146799f32ed Tue Jun 10 20:20:49 2014 -0400 linux/amd64\u003c/pre\u003e",
	"user": {
		"login": "dchest",
		"id": 52677,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2016-08-16T08:09:17Z",
	"created_at": "2014-06-15T21:21:35Z",
	"updated_at": "2016-08-16T08:10:28Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
