{
	"id": 51287129,
	"number": 7731,
	"state": "closed",
	"title": "code.google.com/p/go.tools/imports: too much concurrency",
	"body": "\u003cpre\u003eBefore filing a bug, please check whether it has been fixed since the\nlatest release. Search the issue tracker and check that you're running the\nlatest version of Go:\n\nRun \u0026quot;go version\u0026quot; and compare against\n\u003ca href=\"http://golang.org/doc/devel/release.html\"\u003ehttp://golang.org/doc/devel/release.html\u003c/a\u003e  If a newer version of Go exists,\ninstall it and retry what you did to reproduce the problem.\n\nThanks.\n\nWhat does 'go version' print?\n\ngo version go1.2.1 linux/amd64\n\nWhat steps reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n\n1. work with a small, sluggish, underpowered netbook with a big and slow HDD\n2. use goimports, i.e. with vim-go\n3. save a file with non-std-lib import error\n\nWhat happened?\n\nWhen goimports kicks in, load starts to grow even higher than 80 - as this is unbearable\n(nothing reacts), usually I \u0026quot;killall goimports\u0026quot;. \u0026quot;nice -n19 ionice\n-c3\u0026quot; does not help.\n\nWhat should have happened instead?\n\ngoimports finish in 1-2 seconds.\n\n\nPlease provide any additional information below.\n\nLimiting concurrency helps A LOT: load stays below 2 and goimports finishes in 30s.\n\ntgulacsi@nb-tgulacsi-nell:~/src/code.google.com/p/go.tools/imports$ hg diff\ndiff -r 46efb838ccfd imports/fix.go\n--- a/imports/fix.go    Mon Mar 31 08:54:14 2014 +1100\n+++ b/imports/fix.go    Tue Apr 08 09:26:42 2014 +0200\n@@ -206,6 +206,9 @@\n }\n \n func loadPkg(wg *sync.WaitGroup, root, pkgrelpath string) {\n+       \u0026lt;-conc\n+       defer func() { conc \u0026lt;- struct{}{} }()\n+\n        importpath := filepath.ToSlash(pkgrelpath)\n        shortName := importPathToName(importpath)\n \n@@ -273,6 +276,14 @@\n        return exports\n }\n \n+var conc = make(chan struct{}, 1000)\n+\n+func init() {\n+       for i := 0; i \u0026lt; 8; i++ {\n+               conc \u0026lt;- struct{}{}\n+       }\n+}\n+\n // findImport searches for a package with the given symbols.\n // If no package is found, findImport returns \u0026quot;\u0026quot;.\n // Declared as a variable rather than a function so goimports can be easily\n@@ -303,6 +314,8 @@\n        pkgIndex.Lock()\n        for _, pkg := range pkgIndex.m[pkgName] {\n                wg.Add(1)\n+               \u0026lt;-conc\n+               defer func() { conc \u0026lt;- struct{}{} }()\n                go func(importpath, dir string) {\n                        defer wg.Done()\n                        exports := loadExports(dir)\u003c/pre\u003e",
	"user": {
		"login": "tgulacsi",
		"id": 256074,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"closed_at": "2014-12-08T10:42:53Z",
	"created_at": "2014-04-08T07:28:05Z",
	"updated_at": "2016-06-25T01:31:44Z"
}
