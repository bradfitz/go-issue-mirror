{
	"id": 66081292,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eHere is a simpler example that illustrates the problem in individual steps:\n\u003ca href=\"http://play.golang.org/p/7C5Tf3xTO3\"\u003ehttp://play.golang.org/p/7C5Tf3xTO3\u003c/a\u003e\n\nThe real issue is that the list is used incorrectly. You cannot create a list on the\nheap (using New), and then make a memory copy of that data structure: The data structure\non the heap contains pointers into itself, and now you've got a copy that you are using\nwhere those internal data structures still point to the one in the heap. When you now\nuse it, you are party updating your copy, and party updating the heap copy. It's a\nwonder it doesn't crash...\n\nThe example above is simple enough such that it is possible to follow each individual\nassignment in the List implementation and make a drawing with all the pointers involved.\nWhen you call Back(), it returns l.root.prev where l.root is your copy of the original\ndata structure, and that prev happens to still point to the original prev which is the\ninternal sentinal (root) element and which has a nil value. Hence the result. It's a\ngood exercise to learn about pointers...\n\nHere's a simple version of the code that works: \u003ca href=\"http://play.golang.org/p/qgo7QoWUrR\"\u003ehttp://play.golang.org/p/qgo7QoWUrR\u003c/a\u003e\n\nNote that there's no need to heap-allocate the list, and it lazily initializes itself\ntoo.\u003c/pre\u003e\n\n\n\n_Status changed to **WorkingAsIntended**._",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-06-21T00:39:49Z",
	"updated_at": "2014-12-08T10:31:24Z"
}
