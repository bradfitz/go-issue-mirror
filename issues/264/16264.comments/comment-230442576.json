{
	"id": 230442576,
	"body": "Translation: \r\n\r\n\u003e http client POST io.ReadCloser流，如果不显示指定Request.TransferEncoding为chunked，这时io.ReadCloser数据将被分成多个chunked，并且第一个chunked的大小总是为1.下面是一个例子：\r\n\r\nIf you do `http.Post()` **without** setting `req.TransferEncoding = []string{\"chunked\"}` the data will be sent in chunks, but the length of the first chunk is always 1. For example:\r\n\r\n---\r\n\u003e 从上面的抓包数据可以看到，\"teststring\"被分成两个chunked，第一个chunked长度为1，chunked为\"t\"，第二个chunked长度为9,chunked为\"eststring\"\r\n\r\nAs we can see in the output of tcpdump, `teststring` is divided into two chunks, the first contains only `t`, the second contains `eststring`\r\n\r\n---\r\n\r\n\u003e 可以看出，request请求包中有Content-Length header，数据并不是以chunked方式传输的。\r\n\r\nThe `Content-Length` is in the request packet, data are not sent chunked.\r\n\r\n---\r\n\u003e 如果POST io.ReadCloser流，并显示指定Request.TransferEncoding为chunked，POST的数据并不会被分为两个chunked。如下面例子：\r\nIf you set `Request.TransferEncoding` to \"chunked\", the data posted are not sent chunked, for example:\r\n",
	"user": {
		"login": "tevino",
		"id": 1027300,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-05T10:26:02Z",
	"updated_at": "2016-07-05T10:42:02Z"
}
