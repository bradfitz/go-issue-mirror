{
	"id": 66091012,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eIn the general case, I agree that the wg.Add(1) could be earlier in httptest, and I\ncould imagine scenarios that would exploit that, but you wrote that the test\n(TestTransportResponseHeaderTimeout) is at fault and I kinda disagree.\n\nThe test makes three synchronous HTTP requests. They're not in goroutines.\n\nHow can I reproduce the data race you saw? Did you have local modifications?\n\nNormally it's very easy to repro races, but I can't make this one trigger, and an\neyeball analysis of all the relevant code seems fine too.\n\nI totally understand what you're talking about with wg.Add(1) being done in a goroutine\n(and I'll send a CL for httptest to do the wg.Add(1) earlier), but I don't see how this\ncan happen here, at least in the success paths, unless the test is already failing for\nother reasons.\n\nMaybe I could imagine a scenario where the second HTTP request actually connects, but\nthe machine is so loaded, the Go scheduler doesn't run the http Handler goroutine for\nseconds, meanwhile the client code goroutine does run and passes, the func exits, and\nthen the Handler runs.  Was the builder very overloaded?  I guess I'm never surprised by\nhow slow the build machines can be.\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-03T20:34:36Z",
	"updated_at": "2014-12-08T10:40:23Z"
}
