{
	"id": 136405493,
	"body": "I suspect that the most popular sql drivers have worked around this issue or are blissfully unaffected because `Tx.Begin` notices the bad connection.\r\n\r\ngithub.com/lib/pq indirectly mentions the issue in a comment in it's [`driver.Conn.Commit` implementation](https://github.com/lib/pq/blob/master/conn.go#L453).\r\n\r\ngithub.com/go-sql-driver/mysql [actively initiates a transaction](https://github.com/go-sql-driver/mysql/blob/master/connection.go#L106) and will likely catch the bad connection at that point.\r\n\r\ngithub.com/mattn/go-sqlite3 doesn't appear to ever return `driver.ErrBadConn`, which probably makes sense for local DBs.\r\n\r\nMeanwhile, github.com/alexbrainman/odbc just added the ability to handle bad connections [recently.](https://github.com/alexbrainman/odbc/commit/fa269410321af45f3b3f05c6de4dcbfb6d7593bc) Prior to that commit a bad connection required the application to close its `*sql.DB` to make sure no bad connections were in the pool. Now it works correctly sometimes, but not when using transactions.\r\n\r\nThe work around at the driver level seems to be that the driver must store additional state in the connection to allow returning `driver.ErrBadConn` from the next call to `driver.Conn.Prepare`, `driver.Conn.Begin`, or any of the optional interface methods it may implement.\r\n\r\nThe work around at the application level is much worse. As mentioned above, the application must call `sql.DB.Close` and get a new connection pool with `sql.Open`, which of course goes against the design intentions of database/sql.\r\n\r\nSince this bug has been around for a long time it does not seem to fit the criteria that Russ [recently laid out](https://groups.google.com/d/msg/golang-dev/adzJ_XJLLSI/zMH9jDXBDQAJ) for inclusion in a point release.\r\n\r\nPerhaps the issue has been around for so long that drivers are essentially required to handle it on their own. In that case the fix for this issue would be documenting the required behavior in the `database/sql/driver` package.\r\n\r\nAnother possibility is that returning `driver.ErrBadConn` from `Tx.Commit` or `Tx.Rollback` is a broken idea all together. The documentation for `ErrBadConn` states:\r\n\r\n\u003eTo prevent duplicate operations, ErrBadConn should NOT be returned if there's a possibility that the database server might have performed the operation. Even if the server sends back an error, you shouldn't return ErrBadConn.\r\n\r\nBut of course `database/sql` doesn't retry commits or rollbacks anyway, so it's not clear if these instructions apply in this case.",
	"user": {
		"login": "ChrisHines",
		"id": 1060711,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-31T15:25:57Z",
	"updated_at": "2015-08-31T16:16:57Z"
}
