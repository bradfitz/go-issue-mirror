{
	"id": 153376559,
	"number": 15569,
	"state": "closed",
	"title": "cmd/compile:  optimize compile speed by checking public symbol",
	"body": "cmd/compile:  optimize compile speed by checking public symbol\r\n\r\nPlease answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\n```\r\n➜  server git:(master) ✗ go version\r\ngo version go1.6.2 darwin/amd64\r\n```\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\n```\r\n➜  server git:(master) ✗ go env\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/fish/Project/fishgo/\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n3. What did you do?\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n\r\n```\r\n//$GOPATH/gotest/main.go\r\npackage main\r\n\r\nimport (\r\n\t\"gotest/util\"\r\n)\r\n\r\nfunc main() {\r\n\tutil.Do()\r\n}\r\n\r\n```\r\n\r\nI write a main.go\r\n\r\n```\r\n//$GOPATH/gotest/util/util.go\r\npackage util\r\n\r\nimport (\r\n\t\"gotest/util2\"\r\n)\r\n\r\nfunc Do() {\r\n\ta := util2.GetMM()\r\n\ta.Do()\r\n}\r\n```\r\n\r\nI write a util/util.go\r\n\r\n```\r\n//$GOPATH/gotest/util2/util2.go\r\npackage util2\r\n\r\nimport (\r\n\t\"fmt\"\r\n)\r\n\r\ntype MM interface {\r\n\tDo()\r\n}\r\n\r\ntype mmInpement struct {\r\n}\r\n\r\nfunc (this *mmInpement) Do() {\r\n\tfmt.Println(\"uu4\")\r\n}\r\n\r\nfunc GetMM() MM {\r\n\treturn \u0026mmInpement{}\r\n}\r\n```\r\n\r\nI write a util2/util2.go\r\n\r\n```\r\n//$GOPATH/gotest/util2/util2.go\r\npackage util2\r\n\r\nimport (\r\n\t\"fmt\"\r\n)\r\n\r\ntype MM interface {\r\n\tDo()\r\n}\r\n\r\ntype mmInpement struct {\r\n}\r\n\r\nfunc (this *mmInpement) Do() {\r\n\t//i only change this code\r\n\tfmt.Println(\"dd\")\r\n}\r\n\r\nfunc GetMM() MM {\r\n\treturn \u0026mmInpement{}\r\n}\r\n```\r\n\r\nAnd Now, I just modify mmInpement code\r\n\r\n```\r\n➜  gotest git:(compile) go install -v gotest\r\ngotest/util2\r\ngotest/util\r\ngotest\r\n```\r\n\r\nutil2.go never modify it's public symbol and interface, it just modify implement,but all file which depend on util2.go will recompile\r\n\r\n4. What did you expect to see?\r\n\r\n```\r\n➜  gotest git:(compile) go install -v gotest\r\ngotest/util2\r\ngotest\r\n```\r\n\r\n5. What did you see instead?\r\n\r\n```\r\n➜  gotest git:(compile) go install -v gotest\r\ngotest/util2\r\ngotest/util\r\ngotest\r\n```\r\n\r\nI think the compiler should improve the compilation speed by checking whether the depend interface is changed.If the depend package is only changed implement, without changing the interface, then the package should not be re compiled.\r\n\r\nWe now have a relatively large project, when we modify the bottom module（just modify implement,no interface）, all of the file depend on this module will be re compiled, resulting in a very very slow compile time\r\n\r\n\r\n",
	"user": {
		"login": "fishedee",
		"id": 4318347,
		"type": "User",
		"site_admin": false
	},
	"comments": 9,
	"closed_at": "2016-05-16T15:38:30Z",
	"created_at": "2016-05-06T04:34:04Z",
	"updated_at": "2016-06-02T15:28:29Z"
}
