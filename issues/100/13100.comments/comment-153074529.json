{
	"id": 153074529,
	"body": "Here are the current failures on the dashboard:\r\n\r\n[2015-10-26T23:36:22-53d43cb/windows-amd64-gce](http://build.golang.org/log/0793cfa0a066d651c1bdab5c3f89235461c56432)\r\n[2015-10-27T03:48:21-00f4243/solaris-amd64-smartos](http://build.golang.org/log/e7bf79834cc17d3952ee35d2422c8d3fabdd442e)\r\n[2015-10-28T19:51:05-72180c3/windows-amd64-gce](http://build.golang.org/log/34340d3911c30230e5823ec9bf07918e262a113b)\r\n[2015-10-29T21:12:08-a59a275/windows-amd64-gce](http://build.golang.org/log/1a2e106640beae06227ade2c6cef55bc7d0cf611)\r\n[2015-11-01T04:45:37-3d5163c/windows-amd64-gce](http://build.golang.org/log/c8d9424ea0456a91bb4207af8ab6bb983c2c850f)\r\n\r\nNote that it has happened once on a non-Windows OS.\r\n\r\nLooking at the commits before this started, d18167f \"runtime: fix tiny allocator\" seems like the likely culprit. However, this commit fixed the previously broken tiny allocator so that it actually reused tiny blocks rather than creating a new one for each allocation, so it most likely just revealed an existing bug.\r\n\r\nAll of these failures are exactly \"25 out of 100 finalizer are not called,\" though note that 25 is the smallest number of not-run finalizers that this test will fail at. It's necessary to accept a few not-run finalizers because of combined tiny allocations, but I'm not sure where the 25 threshold came from. It may just be arbitrary. In the theoretical worst case, every allocation by the test could be combined with some other tiny allocation that's still live, and none of the finalizers will run.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-02T16:30:33Z",
	"updated_at": "2015-11-02T16:30:33Z"
}
