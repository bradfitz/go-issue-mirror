{
	"id": 109814641,
	"body": "It's possible if the user can be certain it doesn't hold onto\nany Go objects and all resources allocated by Go code\nhas been freed (esp. no background goroutines).\n\nHowever, as there is no way to kill a goroutine, I think all\nsufficiently sophisticated Go shared library will not be unloadable.\n\nFor example, the os/signal package contains a background\ngoroutine to check for newly arrived signals. Any use of\nos/signal.Handle will leave the Go shared library un-unloadable.\nI'm sure there are other cases.\n\nWhat's more, the runtime can't reliably detect whether it's\nsafe to unload the Go shared library, so rather than make\ndlclose potentially trigger segmentation fault later, I'd rather\nmake dlclose always fail and document that.\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-07T23:50:30Z",
	"updated_at": "2015-06-07T23:50:30Z"
}
