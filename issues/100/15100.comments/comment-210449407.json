{
	"id": 210449407,
	"body": "did a bit of print-foo debugging.\r\nhere are the print-outs:\r\n\r\n```\r\n$ ./main\r\n-- render.Init --\r\n--- case 1: err=\u003cnil\u003e seq=1\r\n----\u003e cookies... (seq=1 err=\u003cnil\u003e)\r\n-- shm.Init --\r\n--- case 1: err=\u003cnil\u003e seq=2\r\n----\u003e cookies... (seq=2 err=\u003cnil\u003e)\r\n-- newScreenImpl --\r\nxsi...\r\ninitAtoms...\r\n--- case 1: err=\u003cnil\u003e seq=3\r\n----\u003e cookies... (seq=3 err=\u003cnil\u003e)\r\n--- case 1: err=\u003cnil\u003e seq=4\r\n----\u003e cookies... (seq=4 err=\u003cnil\u003e)\r\n--- case 1: err=\u003cnil\u003e seq=5\r\n----\u003e cookies... (seq=5 err=\u003cnil\u003e)\r\ninitKeyboardMapping...\r\n--- case 1: err=\u003cnil\u003e seq=6\r\n----\u003e cookies... (seq=6 err=\u003cnil\u003e)\r\ninitPictformats...\r\n--- case 1: err=\u003cnil\u003e seq=7\r\n----\u003e cookies... (seq=7 err=\u003cnil\u003e)\r\ninitWindow32...\r\n--- case 1: err=\u003cnil\u003e seq=9\r\n----\u003e cookies... (seq=9 err=\u003cnil\u003e)\r\ns.xsi.Root-Depth = 24 (24)\r\n--- case 1: err=\u003cnil\u003e seq=11\r\n----\u003e cookies... (seq=11 err=\u003cnil\u003e)\r\n--- case 1: err=\u003cnil\u003e seq=13\r\n----\u003e cookies... (seq=13 err=\u003cnil\u003e)\r\ngo run()...\r\n... wait for event...\r\n--- case 1: err=\u003cnil\u003e seq=15\r\n----\u003e cookies... (seq=15 err=\u003cnil\u003e)\r\n--- case 1: err=\u003cnil\u003e seq=17\r\n----\u003e cookies... (seq=17 err=\u003cnil\u003e)\r\n--- case 1: err=\u003cnil\u003e seq=19\r\n----\u003e cookies... (seq=19 err=\u003cnil\u003e)\r\n--- case 1: err=\u003cnil\u003e seq=21\r\n----\u003e cookies... (seq=21 err=\u003cnil\u003e)\r\n--- case 1: err=\u003cnil\u003e seq=23\r\n----\u003e cookies... (seq=23 err=\u003cnil\u003e)\r\n--- case default: err=\u003cnil\u003e evtnum=21\r\n--- case 0: err=BadAccess {NiceName: Access, Sequence: 24, BadValue: 111149060, MinorOpcode: 1, MajorOpcode: 130} seq=24\r\nbuf=[0 10 24 0 4 0 160 6 1 0 130 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\r\n----\u003e cookies... (seq=24 err=BadAccess {NiceName: Access, Sequence: 24, BadValue: 111149060, MinorOpcode: 1, MajorOpcode: 130})\r\n****cookie err: BadAccess {NiceName: Access, Sequence: 24, BadValue: 111149060, MinorOpcode: 1, MajorOpcode: 130}\r\n... wait for event...\r\n2016/04/15 12:33:55 x11driver: xproto.WaitForEvent: BadAccess {NiceName: Access, Sequence: 24, BadValue: 111149060, MinorOpcode: 1, MajorOpcode: 130}\r\n... wait for event...\r\n--- case default: err=\u003cnil\u003e evtnum=22\r\n... wait for event...\r\n--- case 1: err=\u003cnil\u003e seq=26\r\n----\u003e cookies... (seq=26 err=\u003cnil\u003e)\r\n--- case 1: err=\u003cnil\u003e seq=28\r\n----\u003e cookies... (seq=28 err=\u003cnil\u003e)\r\n--- case default: err=\u003cnil\u003e evtnum=22\r\n... wait for event...\r\n--- case 1: err=\u003cnil\u003e seq=30\r\n----\u003e cookies... (seq=30 err=\u003cnil\u003e)\r\n--- case 0: err=BadBadSeg {NiceName: BadSeg, Sequence: 31, BadValue: 111149059, MinorOpcode: 3, MajorOpcode: 130} seq=31\r\nbuf=[0 128 31 0 3 0 160 6 3 0 130 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\r\n----\u003e cookies... (seq=31 err=BadBadSeg {NiceName: BadSeg, Sequence: 31, BadValue: 111149059, MinorOpcode: 3, MajorOpcode: 130})\r\n****cookie err: BadBadSeg {NiceName: BadSeg, Sequence: 31, BadValue: 111149059, MinorOpcode: 3, MajorOpcode: 130}\r\n2016/04/15 12:33:55 x11driver: xproto.WaitForEvent: BadBadSeg {NiceName: BadSeg, Sequence: 31, BadValue: 111149059, MinorOpcode: 3, MajorOpcode: 130}\r\n```\r\n\r\nwhich correspond to:\r\nhttps://github.com/golang/exp/blob/master/shiny/vendor/github.com/BurntSushi/xgb/xgb.go#L400\r\n```go\r\n\t\tbuf := make([]byte, 32)\r\n\t\terr, seq = nil, 0\r\n\t\tif _, err := io.ReadFull(c.conn, buf); err != nil {\r\n\t\t\tLogger.Printf(\"A read error is unrecoverable: %s\", err)\r\n\t\t\tfmt.Printf(\"**** read error: %v\\n\", err)\r\n\t\t\tc.eventChan \u003c- err\r\n\t\t\tc.Close()\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tswitch buf[0] {\r\n\t\tcase 0: // This is an error\r\n\t\t\t// Use the constructor function for this error (that is auto\r\n\t\t\t// generated) by looking it up by the error number.\r\n\t\t\tnewErrFun, ok := NewErrorFuncs[int(buf[1])]\r\n\t\t\tif !ok {\r\n\t\t\t\tLogger.Printf(\"BUG: Could not find error constructor function \"+\r\n\t\t\t\t\t\"for error with number %d.\", buf[1])\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\terr = newErrFun(buf)\r\n\t\t\tseq = err.SequenceId()\r\n\t\t\tfmt.Printf(\"--- case 0: err=%v seq=%v\\nbuf=%v\\n\", err, seq, buf)\r\n\t\t\t// This error is either sent to the event channel or a specific\r\n\t\t\t// cookie's error channel below.\r\n\t\tcase 1: // This is a reply\r\n\t\t\tseq = Get16(buf[2:])\r\n\r\n\t\t\t// check to see if this reply has more bytes to be read\r\n\t\t\tsize := Get32(buf[4:])\r\n\t\t\tif size \u003e 0 {\r\n\t\t\t\tbyteCount := 32 + size*4\r\n\t\t\t\tbiggerBuf := make([]byte, byteCount)\r\n\t\t\t\tcopy(biggerBuf[:32], buf)\r\n\t\t\t\tif _, err := io.ReadFull(c.conn, biggerBuf[32:]); err != nil {\r\n\t\t\t\t\tLogger.Printf(\"A read error is unrecoverable: %s\", err)\r\n\t\t\t\t\tfmt.Printf(\"**** read-error: %v\\n\", err)\r\n\t\t\t\t\tc.eventChan \u003c- err\r\n\t\t\t\t\tc.Close()\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\t\t\t\treplyBytes = biggerBuf\r\n\t\t\t} else {\r\n\t\t\t\treplyBytes = buf\r\n\t\t\t}\r\n\t\t\tfmt.Printf(\"--- case 1: err=%v seq=%v\\n\", err, seq)\r\n\r\n\t\t\t// This reply is sent to its corresponding cookie below.\r\n\t\tdefault: // This is an event\r\n\t\t\t// Use the constructor function for this event (like for errors,\r\n\t\t\t// and is also auto generated) by looking it up by the event number.\r\n\t\t\t// Note that we AND the event number with 127 so that we ignore\r\n\t\t\t// the most significant bit (which is set when it was sent from\r\n\t\t\t// a SendEvent request).\r\n\t\t\tevNum := int(buf[0] \u0026 127)\r\n\t\t\tnewEventFun, ok := NewEventFuncs[evNum]\r\n\t\t\tif !ok {\r\n\t\t\t\tLogger.Printf(\"BUG: Could not find event construct function \"+\r\n\t\t\t\t\t\"for event with number %d.\", evNum)\r\n\t\t\t\tfmt.Printf(\"*** could not find event construct[%d]\\n\", evNum)\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tfmt.Printf(\"--- case default: err=%v evtnum=%v\\n\", err, evNum)\r\n\t\t\tc.eventChan \u003c- newEventFun(buf)\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tfmt.Printf(\"----\u003e cookies... (seq=%v err=%v)\\n\", seq, err)\r\n\t\t// At this point, we have a sequence number and we're either\r\n\t\t// processing an error or a reply, which are both responses to\r\n\t\t// requests. So all we have to do is find the cookie corresponding\r\n\t\t// to this error/reply, and send the appropriate data to it.\r\n\t\t// In doing so, we make sure that any cookies that came before it\r\n\t\t// are marked as successful if they are void and checked.\r\n\t\t// If there's a cookie that requires a reply that is before this\r\n\t\t// reply, then something is wrong.\r\n\t\tfor cookie := range c.cookieChan {\r\n\t\t\t// This is the cookie we're looking for. Process and break.\r\n\t\t\tif cookie.Sequence == seq {\r\n\t\t\t\tif err != nil { // this is an error to a request\r\n\t\t\t\t\t// synchronous processing\r\n\t\t\t\t\tif cookie.errorChan != nil {\r\n\t\t\t\t\t\tfmt.Printf(\"**** sync-cookie error: %v\\n\", err)\r\n\t\t\t\t\t\tcookie.errorChan \u003c- err\r\n\t\t\t\t\t} else { // asynchronous processing\r\n\t\t\t\t\t\tfmt.Printf(\"****cookie err: %v\\n\", err)\r\n\t\t\t\t\t\tc.eventChan \u003c- err\r\n\t\t\t\t\t\t// if this is an unchecked reply, ping the cookie too\r\n\t\t\t\t\t\tif cookie.pingChan != nil {\r\n\t\t\t\t\t\t\tcookie.pingChan \u003c- true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else { // this is a reply\r\n\t\t\t\t\tif cookie.replyChan == nil {\r\n\t\t\t\t\t\tLogger.Printf(\"Reply with sequence id %d does not \"+\r\n\t\t\t\t\t\t\t\"have a cookie with a valid reply channel.\", seq)\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcookie.replyChan \u003c- replyBytes\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\r\n```\r\n\r\nhth,\r\n-s",
	"user": {
		"login": "sbinet",
		"id": 1070920,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-15T12:43:27Z",
	"updated_at": "2016-04-15T12:43:27Z"
}
