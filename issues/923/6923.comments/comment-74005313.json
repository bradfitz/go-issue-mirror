{
	"id": 74005313,
	"body": "Right now T(c) where T is a type and c is a constant means to treat c as having type T rather than one of the default types.  It gives an error if c can not be represented in T, except that for float and complex constants we quietly round to T as long as the value is not too large (I'm not sure that last bit is in the spec).\r\n\r\nI think you are suggesting that T(c) is always permitted, but that implies that we do a type conversion, and a type conversion only makes sense if we know the type we are starting from.  What type would that be?  In particular, if the int type is 32 bits, what does uint64(-0x100000000) mean?  That value can not be represented in a 32-bit int, and it can not be represented as a uint64.  So what value do we start from when converting to uint64?\r\n\r\nMy point is of course not that we can not answer that question, but that this is not an area where it is trivial to make everyone happy.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-12T02:10:36Z",
	"updated_at": "2015-02-12T02:10:36Z"
}
