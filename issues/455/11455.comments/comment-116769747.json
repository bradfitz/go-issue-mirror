{
	"id": 116769747,
	"body": "On 28 June 2015 at 23:23, Josh Bleecher Snyder \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e I attempted\n\u003e \u003chttps://github.com/golang/lint/commit/b55059174c9f0cda51e7a12038ba79644d158bf3\u003e\n\u003e and ultimately failed\n\u003e \u003chttps://github.com/golang/lint/commit/4946cea8b6efd778dc31dc2dbeb919535e1b7529\u003e\n\u003e to write a lint check \u003chttps://github.com/golang/lint/issues/130\u003e that\n\u003e analyzed time.Duration constants, to ensure that they were defined using\n\u003e a unit (that is, like 3 * time.Second, not like 3e9).\n\u003e\n\u003e The crux of the issue was being able to identify, for a constant\n\u003e expression, where/how its components were defined.\n\u003e\n\u003e For example, given:\n\u003e\n\u003e const (\n\u003e   a = iota\n\u003e   b\n\u003e   c = b * 2\n\u003e   d = c * time.Second\n\u003e   e = d - 1\n\u003e )\n\u003e\n\u003e I'd like to be able to trace from e all the way back to the other\n\u003e expressions from which e's value is derived. This might extend across\n\u003e files and packages. As far as I can tell, there's no reasonable way to get\n\u003e this information now. But this information must be available during\n\u003e typechecking.\n\u003e\n\u003e This is not a high priority, and there are obviously API questions. Just\n\u003e putting this on the wishlist. :)\n\u003e\n\nI responded on the 'ultimately failed' bug ticket, but I think the general\nanswer here is: the type checker API provides you with all the building\nblocks you need, and it cannot provide more without (a) redundancy and (b)\nsacrificing the ability to load packages without source code.\n\nIf you're still stuck next week, we can work on it together at GopherCon if\nyou like.\n",
	"user": {
		"login": "alandonovan",
		"id": 8433140,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-29T17:32:37Z",
	"updated_at": "2015-06-29T17:32:37Z"
}
