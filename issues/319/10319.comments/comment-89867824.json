{
	"id": 89867824,
	"body": "I think these are separate issues.\r\n\r\nWhen porting the backtracking code, I made the assumption that len(m.matchcap) is always \u003e= 2. Then b.cap would be initialized (via the call to b.reset) to have at least length len(m.matchcap), so accesses to b.cap[0] and b.cap[1] would always be valid. And that assumption is true whenever a machine only runs the backtracker because when a machine is initalized in progMachine, its minimum length is set to 2. However, when the standard matcher is used, m.matchcap is resliced (in m.init) to ncap which may have length less than 2. So if the backtracker is run after the standard matcher on the same machine and no captures are requested the assumption won't hold.\r\n\r\nSo the backtracking code can either check for reqcap when setting b.cap[0] or b.cap[1], or initalize b.cap to have length at least 2.",
	"user": {
		"login": "michaelmatloob",
		"id": 1313720,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-05T22:59:24Z",
	"updated_at": "2015-04-05T22:59:24Z"
}
