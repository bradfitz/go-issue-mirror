{
	"id": 66055277,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11:\n\n\u003cpre\u003eThe examples here are all cases where we allocate a large buffer, return a slice of that\nbuffer, and want to restrict the returned slice so that it can not be resliced to become\nlarger.  We want to ensure that the user of the slice can not interfere with other\nportions of the large buffer.  A slice already prevents you from expanding toward the\nstart of the buffer, so this is the symmetric operation: prevent you from expanding\ntoward the end of the buffer.\n\nAn intermediate position rather than making a language change would be to add a function\nreflect.SetCap.\n\nfunc (v Value) SetCap(n int) {\n\tv.mustBeAssignable()\n\tv.mustBe(Slice)\n\ts := (*SliceHeader)(v.val)\n\tif n \u0026lt; 0 || n \u0026gt; s.Cap || n \u0026gt; s.Len {\n\t\tpanic(\"reflect: slice length out of range in SetLen\")\n\t}\n\ts.Cap = n\n}\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-30T00:24:57Z",
	"updated_at": "2014-12-22T05:54:37Z"
}
