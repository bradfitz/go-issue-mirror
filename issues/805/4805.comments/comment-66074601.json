{
	"id": 66074601,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eFor max-open-conns, that could be solved by drivers themselves I think.  In,\n\n\u003ca href=\"http://golang.org/pkg/database/sql/driver/#Driver\"\u003ehttp://golang.org/pkg/database/sql/driver/#Driver\u003c/a\u003e\n\n... drivers can block if it's at its limit, waiting until a connection is closed.\n\nI don't agree with your proposed fix of having N *sql.DB instances and only using 1 at a\ntime.  It'd be better to have 1 *sql.DB and make sure in your own code that it's only\nbeing used by N clients at a time.  Then more resources can be shared.\n\nI'll also note that other APIs in Go don't prevent you from hurting yourself: the\nnet/http client, for instance, will keep opening TCP connections to remote hosts, as\nfast as you ask it to.  It will let you run yourself out of file descriptors, if that's\nwhat you tell it to do.\n\nI had a program which made tens of thousands of HTTP requests and I had to limit myself\nto only doing N HTTP requests at once.  Similarly, if your database can't deal with the\nload you're sending it, you can rate-limit yourself.\n\nThat said, I'm sure we could add some knob here.\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-11T14:34:02Z",
	"updated_at": "2014-12-08T10:25:31Z"
}
