{
	"id": 66074602,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003e\u003e ... drivers can block if it's at its limit, waiting until a connection is closed.\n\nWhat if you don't want the connections to close at all, but just reuse the open\nconnections from the pool? What I'd like to achieve is having a pool of exactly N\nconnections  to the database server. This way I can avoid going above the database\nconnection limits and also avoid having to reconnect to the database all the time.\n\n\u003e I don't agree with your proposed fix of having N *sql.DB instances and only using 1 at\na time.  It'd be better to have 1 *sql.DB and make sure in your own code that it's only\nbeing used by N clients at a time.  Then more resources can be shared.\n\nI didn't really intend that as a fix for the database package, that's just the\nworkaround I was using. The reason I didn't use just one *sql.DB is for the reason\nabove, I wanted to avoid reconnections. Now with control over maxIdleConns I suppose I\ncan set it to N and then also limit the number of concurrent clients to N as well, then\nI only need a single *sql.DB.\n\nI agree that the situation is similar to running out of file descriptors, and it's never\npossible to cover all cases in the API, so maybe this is enough?\u003c/pre\u003e",
	"user": {
		"login": "kisielk",
		"id": 58618,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-11T17:04:41Z",
	"updated_at": "2014-12-08T10:25:31Z"
}
