{
	"id": 183837808,
	"body": "I looked into this and believe it has to do with the way values are escaped during assignments where the source is a dottype expression. Consider the following source:\r\n\r\nhttps://gist.github.com/tshprecher/208b160a6dd9732d5510\r\n\r\nRunning `go tool compile -m` on the file returns the following:\r\n\r\n\u003e set_interface.go:14: can inline setOneLine\r\nset_interface.go:18: can inline setTwoLines\r\nset_interface.go:59: inlining call to setOneLine\r\nset_interface.go:60: inlining call to setTwoLines\r\nset_interface.go:14: leaking param: v\r\nset_interface.go:14: setOneLine p does not escape\r\nset_interface.go:18: setTwoLines p does not escape\r\nset_interface.go:18: setTwoLines v does not escape\r\nset_interface.go:23: leaking param: v\r\nset_interface.go:23: setOneLineNoInline p does not escape\r\nset_interface.go:34: setTwoLinesNoInline p does not escape\r\nset_interface.go:34: setTwoLinesNoInline v does not escape\r\nset_interface.go:51: err escapes to heap\r\nset_interface.go:53: f escapes to heap\r\nset_interface.go:59: 1 escapes to heap\r\nset_interface.go:61: 3 escapes to heap\r\nset_interface.go:51: main ... argument does not escape\r\nset_interface.go:59: main \u0026i does not escape\r\nset_interface.go:60: main \u0026i does not escape\r\nset_interface.go:60: main 2 does not escape\r\nset_interface.go:61: main \u0026i does not escape\r\nset_interface.go:62: main \u0026i does not escape\r\nset_interface.go:62: main 4 does not escape\r\n\r\nNotice on lines 59 and 61 the constant values 1 and 3 escape to the heap for the calls that set on one line. It turns out inlining is not a factor. The parameter 'v' leaks.\r\n\r\nI created the following patch with test: https://go-review.googlesource.com/#/c/19489/\r\n\r\nRunning `go tool compile -m` with the patch:\r\n\r\n\u003e set_interface.go:14: can inline setOneLine\r\nset_interface.go:18: can inline setTwoLines\r\nset_interface.go:59: inlining call to setOneLine\r\nset_interface.go:60: inlining call to setTwoLines\r\nset_interface.go:14: setOneLine p does not escape\r\nset_interface.go:14: setOneLine v does not escape\r\nset_interface.go:18: setTwoLines p does not escape\r\nset_interface.go:18: setTwoLines v does not escape\r\nset_interface.go:23: setOneLineNoInline p does not escape\r\nset_interface.go:23: setOneLineNoInline v does not escape\r\nset_interface.go:34: setTwoLinesNoInline p does not escape\r\nset_interface.go:34: setTwoLinesNoInline v does not escape\r\nset_interface.go:51: err escapes to heap\r\nset_interface.go:53: f escapes to heap\r\nset_interface.go:51: main ... argument does not escape\r\nset_interface.go:59: main \u0026i does not escape\r\nset_interface.go:59: main 1 does not escape\r\nset_interface.go:60: main \u0026i does not escape\r\nset_interface.go:60: main 2 does not escape\r\nset_interface.go:61: main \u0026i does not escape\r\nset_interface.go:61: main 3 does not escape\r\nset_interface.go:62: main \u0026i does not escape\r\nset_interface.go:62: main 4 does not escape\r\n\r\nThe parameter 'v' no longer leaks and the literal values 1 and 3 do not escape to the heap.",
	"user": {
		"login": "tshprecher",
		"id": 1313797,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-14T06:49:54Z",
	"updated_at": "2016-02-14T06:49:54Z"
}
