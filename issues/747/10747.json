{
	"id": 74086144,
	"number": 10747,
	"state": "closed",
	"title": "cmd/link, runtime: Invalid symbol table for cgo function",
	"body": "While running cgo tests for https://go-review.googlesource.com/#/c/9506/, I encountered a problem where the symbol table will return an invalid entry if queried for a cgo function. Even though we don't seem to lookup cgo functions in the symbol table right now, I'd expect it to return nil instead of an invalid entry. Reproducing is a case of applying the testing patch on top of 9506 and running `GOTRACEBACK=3 go test -ldflags '-linkmode=internal'` in misc/cgo/test. Fails about 50% of the time.\r\n\r\nThe Error\r\n```\r\nruntime: invalid pc-encoded table f=encoding/binary.(*bigEndian).GoString pc=0x5814b0 targetpc=0x582ef6 tab=[0/0]0x0\r\n\tvalue=0 until pc=0x58140a\r\n\tvalue=48 until pc=0x581499\r\n\tvalue=0 until pc=0x58149a\r\n\tvalue=48 until pc=0x5814b0\r\nfatal error: invalid runtime symbol table\r\n```\r\nWhile the function for the PC 0x582ef6 is:\r\n```\r\n0000000000582ed0 \u003c_cgo_4f27153e4087_Cfunc_issue7978c\u003e:\r\n  582ed0:       53                      push   %rbx\r\n  582ed1:       48 8b 1f                mov    (%rdi),%rbx\r\n  582ed4:       0f 1f 40 00             nopl   0x0(%rax)\r\n  582ed8:       31 c0                   xor    %eax,%eax\r\n  582eda:       f0 0f c1 03             lock xadd %eax,(%rbx)\r\n  582ede:       85 c0                   test   %eax,%eax\r\n  582ee0:       75 f6                   jne    582ed8 \u003c_cgo_4f27153e4087_Cfunc_issue7978c+0x8\u003e\r\n  582ee2:       f0 83 03 01             lock addl $0x1,(%rbx)\r\n  582ee6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\r\n  582eed:       00 00 00 \r\n  582ef0:       31 c0                   xor    %eax,%eax\r\n  582ef2:       f0 0f c1 03             lock xadd %eax,(%rbx)\r\n  582ef6:       83 f8 02                cmp    $0x2,%eax\r\n  582ef9:       75 f5                   jne    582ef0 \u003c_cgo_4f27153e4087_Cfunc_issue7978c+0x20\u003e\r\n  582efb:       e8 d0 ed ff ff          callq  581cd0 \u003cissue7978cb\u003e\r\n  582f00:       f0 83 03 01             lock addl $0x1,(%rbx)\r\n  582f04:       0f 1f 40 00             nopl   0x0(%rax)\r\n  582f08:       31 c0                   xor    %eax,%eax\r\n  582f0a:       f0 0f c1 03             lock xadd %eax,(%rbx)\r\n  582f0e:       83 f8 06                cmp    $0x6,%eax\r\n  582f11:       75 f5                   jne    582f08 \u003c_cgo_4f27153e4087_Cfunc_issue7978c+0x38\u003e\r\n  582f13:       5b                      pop    %rbx\r\n  582f14:       c3                      retq   \r\n  582f15:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\r\n  582f1c:       00 00 00 \r\n  582f1f:       90                      nop\r\n\r\n```\r\nThis is the testing patch applied on top of CL9506:\r\n```\r\ndiff --git a/misc/cgo/test/issue7978.go b/misc/cgo/test/issue7978.go\r\nindex 613f28e..45d0cfd 100644\r\n--- a/misc/cgo/test/issue7978.go\r\n+++ b/misc/cgo/test/issue7978.go\r\n@@ -103,7 +103,7 @@ func test7978(t *testing.T) {\r\n \tif C.HAS_SYNC_FETCH_AND_ADD == 0 {\r\n \t\tt.Skip(\"clang required for __sync_fetch_and_add support on darwin/arm\")\r\n \t}\r\n-\tif os.Getenv(\"GOTRACEBACK\") != \"2\" {\r\n+\tif os.Getenv(\"GOTRACEBACK\") != \"3\" {\r\n \t\tt.Fatalf(\"GOTRACEBACK must be 2\")\r\n \t}\r\n \tissue7978sync = 0\r\ndiff --git a/src/cmd/dist/test.go b/src/cmd/dist/test.go\r\nindex 1ed0995..c4bf486 100644\r\n--- a/src/cmd/dist/test.go\r\n+++ b/src/cmd/dist/test.go\r\n@@ -442,7 +442,7 @@ func (t *tester) supportedBuildmode(mode string) bool {\r\n }\r\n \r\n func (t *tester) cgoTest() error {\r\n-\tenv := mergeEnvLists([]string{\"GOTRACEBACK=2\"}, os.Environ())\r\n+\tenv := mergeEnvLists([]string{\"GOTRACEBACK=3\"}, os.Environ())\r\n \r\n \tif t.goos == \"android\" || t.iOS() {\r\n \t\tcmd := t.dirCmd(\"misc/cgo/test\", \"go\", \"test\")\r\n@@ -450,6 +450,7 @@ func (t *tester) cgoTest() error {\r\n \t\treturn cmd.Run()\r\n \t}\r\n \r\n+\tfmt.Println(\"misc/cgo/test\", \"go\", \"test\", \"-ldflags\", \"-linkmode=auto\")\r\n \tcmd := t.dirCmd(\"misc/cgo/test\", \"go\", \"test\", \"-ldflags\", \"-linkmode=auto\")\r\n \tcmd.Env = env\r\n \tif err := cmd.Run(); err != nil {\r\n@@ -458,6 +459,7 @@ func (t *tester) cgoTest() error {\r\n \r\n \tif t.gohostos != \"dragonfly\" {\r\n \t\t// linkmode=internal fails on dragonfly since errno is a TLS relocation.\r\n+\t\tfmt.Println(\"misc/cgo/test\", \"go\", \"test\", \"-ldflags\", \"-linkmode=internal\")\r\n \t\tcmd := t.dirCmd(\"misc/cgo/test\", \"go\", \"test\", \"-ldflags\", \"-linkmode=internal\")\r\n \t\tcmd.Env = env\r\n \t\tif err := cmd.Run(); err != nil {\r\n@@ -489,16 +491,19 @@ func (t *tester) cgoTest() error {\r\n \t\t\"linux-386\", \"linux-amd64\", \"linux-arm\",\r\n \t\t\"netbsd-386\", \"netbsd-amd64\":\r\n \r\n+\t\tfmt.Println(\"misc/cgo/test\", \"go\", \"test\", \"-ldflags\", \"-linkmode=external\")\r\n \t\tcmd := t.dirCmd(\"misc/cgo/test\", \"go\", \"test\", \"-ldflags\", \"-linkmode=external\")\r\n \t\tcmd.Env = env\r\n \t\tif err := cmd.Run(); err != nil {\r\n \t\t\treturn err\r\n \t\t}\r\n+\t\tfmt.Println(\"misc/cgo/testtls\", \"go\", \"test\", \"-ldflags\", \"-linkmode=auto\")\r\n \t\tcmd = t.dirCmd(\"misc/cgo/testtls\", \"go\", \"test\", \"-ldflags\", \"-linkmode=auto\")\r\n \t\tcmd.Env = env\r\n \t\tif err := cmd.Run(); err != nil {\r\n \t\t\treturn err\r\n \t\t}\r\n+\t\tfmt.Println(\"misc/cgo/testtls\", \"go\", \"test\", \"-ldflags\", \"-linkmode=external\")\r\n \t\tcmd = t.dirCmd(\"misc/cgo/testtls\", \"go\", \"test\", \"-ldflags\", \"-linkmode=external\")\r\n \t\tcmd.Env = env\r\n \t\tif err := cmd.Run(); err != nil {\r\ndiff --git a/src/runtime/proc.go b/src/runtime/proc.go\r\nindex f725fc8..242b1c7 100644\r\n--- a/src/runtime/proc.go\r\n+++ b/src/runtime/proc.go\r\n@@ -108,6 +108,7 @@ func main() {\r\n \t\t// has a main, but it is not executed.\r\n \t\treturn\r\n \t}\r\n+\tSetCPUProfileRate(100)\r\n \tmain_main()\r\n \tif raceenabled {\r\n \t\tracefini()\r\ndiff --git a/src/runtime/proc1.go b/src/runtime/proc1.go\r\nindex d15c3b9..bb3e747 100644\r\n--- a/src/runtime/proc1.go\r\n+++ b/src/runtime/proc1.go\r\n@@ -2623,6 +2623,10 @@ func setsSP(pc uintptr) bool {\r\n \t\t// so assume the worst and stop traceback\r\n \t\treturn true\r\n \t}\r\n+\tif s := gotraceback(nil); s == 3 {\r\n+\t\tprintln(hex(pc))\r\n+\t\tprintln(\"foo\", funcname(f))\r\n+\t}\r\n \tswitch f.entry {\r\n \tcase gogoPC, systemstackPC, mcallPC, morestackPC, asmcgocallPC,\r\n \t\tcgocallback_gofuncPC:\r\n```",
	"user": {
		"login": "DanielMorsing",
		"id": 545573,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 6,
	"closed_at": "2015-06-29T02:54:27Z",
	"created_at": "2015-05-07T18:39:38Z",
	"updated_at": "2016-06-28T21:53:36Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
