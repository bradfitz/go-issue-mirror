{
	"id": 66087921,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eI don't believe this report is valid, but I cannot find the broader context. Was it a\nprivate email, Alex? I'd like to find out more about the bug that was observed on\nSolaris. \n\nAt tip, lock_sema.c says:\n\n// same as runtime·notetsleep, but called on user g (not g0)\n// calls only nosplit functions between entersyscallblock/exitsyscall\nbool\nruntime·notetsleepg(Note *n, int64 ns)\n{\n\tbool res;\n\n\tif(g == m-\u003eg0)\n\t\truntime·throw(\"notetsleepg on g0\");\n\n\tif(m-\u003ewaitsema == 0)\n\t\tm-\u003ewaitsema = runtime·semacreate();\n\n\truntime·entersyscallblock();\n\tres = notetsleep(n, ns, 0, nil);\n\truntime·exitsyscall();\n\treturn res;\n}\n\nThe comment explains the restrictions: between entersyscallblock and exitsyscall, we\nmust not do anything that might cause allocation or really perturb memory too badly,\nbecause the code might be running concurrently with the garbage collector. (The\ncollector assumes \"in syscall\" counts as stopped.) The most important restriction is\nthat the calls must not visit any non-NOSPLIT function, because it might split the stack.\n\nTo ensure this constraint about only using NOSPLIT functions, entersyscallblock actually\nsets the stack guard value to StackPreempt, which means that any split check will fail\nand enter the splitting code, which will see what is going on and throw the error\n\"runtime: stack split during syscall\". The only way a bug might be lurking is if there\nis a call to a splitting function in some little-used code path.\n\nnotetsleep is itself marked NOSPLIT, and it calls runtime.casp, runtime.semasleep,\nruntime.nanotime, and runtime.atomicloadp. All of these are themselves marked NOSPLIT.\nSpecifically, os_windows.c says:\n\n#pragma textflag NOSPLIT\nint32\nruntime·semasleep(int64 ns)\n\n#pragma textflag NOSPLIT\nint64\nruntime·nanotime(void)\n\nThose functions call runtime.stdcall and runtime.timediv, both of which are NOSPLIT.\nStdcall calls asmcgocall, which moves over to the g0 stack and doesn't need paranoia\nanymore. Timediv is a leaf.\n\nSo I think everything is marked NOSPLIT appropriately. The original mail claimed that\nsemasleep is not marked NOSPLIT, but it is.\n\nPerhaps the author of the original mail was looking at the code on golang.org, which is\nshowing the Go 1.1 code, not the current code at tip. The code I am looking at looks\nfine.\n\nMarking \"Invalid\" because as far as I can tell. notetsleep and all called by it _are_\nmarked NOSPLIT.\u003c/pre\u003e\n\n\n\n_Status changed to **Invalid**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-11-13T03:20:49Z",
	"updated_at": "2014-12-08T10:37:27Z"
}
