{
	"id": 68331103,
	"body": "Hi @minux,\r\n\r\n\u003e package documentation is reserved for documenting commands,\r\n\r\nThat's not true as far as I can tell, it can be used to document any Go package (command or library). Can you show where it says otherwise, because I don't see that documented and in practice, it works on non-main packages too (**Edit:** I am wrong about this, sorry. It didn't [look](https://github.com/golang/go/blob/4b96409aacfb569ac2564240d8aadd668b7c25fa/src/go/build/build.go#L675-L678) like it was for commands only, but the docs it contains seem to be ignored for non-main packages.).\r\n\r\n\u003e To what extend should godoc try to verify the package/command? Should it\r\ntry compiling it to be sure that it's a valid package/command?\r\n\r\n`cmd/godoc` currently respects builds tags, right? It looks at the given folder, finds all `.go` files but only considers ones that are not ignored due to (business logic taken from http://godoc.org/go/build#Context.Import):\r\n\r\n- .go files in package documentation\r\n- files starting with _ or . (likely editor temporary files)\r\n- files with build constraints not satisfied by the context\r\n\r\nIf it finds that there are 0 .go files (either because there are really no .go files, or because the ones that were there were all ignored due to above rules), it should not try to display any docs (what docs can be displayed if there are 0 .go files?).",
	"user": {
		"login": "shurcooL",
		"id": 1924134,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-30T05:18:22Z",
	"updated_at": "2014-12-30T05:37:47Z"
}
