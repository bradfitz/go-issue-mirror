{
	"id": 66083799,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003e---------- Forwarded message ----------\nFrom: Dmitry Vyukov \u0026lt;dvyukov@google.com\u0026gt;\nDate: Mon, Aug 12, 2013 at 9:16 PM\nSubject: GC vs hashmaps\nTo: Carl Shapiro \u0026lt;cshapiro@google.com\u0026gt;, Keith Randall \u0026lt;khr@google.com\u0026gt;\nCc: Carlos Castillo \u0026lt;cookieo9@gmail.com\u0026gt;, golang-nuts\n\u0026lt;golang-nuts@googlegroups.com\u0026gt;, Jakob Borg \u0026lt;jakob@nym.se\u0026gt;\n\n\nOn Mon, Aug 12, 2013 at 6:06 PM, Jakob Borg \u0026lt;jakob@nym.se\u0026gt; wrote:\nRight, indeed. It seems the map access is necessary to cause the\nissue; I slightly reduced the problem program to\n\n\u003ca href=\"http://play.golang.org/p/Tkdqs0lWoc\"\u003ehttp://play.golang.org/p/Tkdqs0lWoc\u003c/a\u003e\n\nRemoving the \"_ = m[0]\" removes the issue.\n\n\nHere is what happens here:\n\n_ = m[0]\nis turned into runtime.mapaccess1_fast64 call which returns a pointer into the huge\nhashmap buffer. This pointer is left on stack in 0x18(rsp).\n\np := make([]int, N_ELEMS)\nis turned into makeslice1 call. 0x18(rsp) refers to makeslice1 return value, which is a\npointer but not initialized until function returns. GC is triggered inside of makeslice1\nand it scans 0x18(rsp) completely conservatively.\n\nAs the result 160MB hashmap buffer with all the hashes is scanned conservatively.\n\nQuestions:\n1. We are going to zero function return values and local in C code as well, right?\n2. We will need to do the same for assembly functions manually, right?\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-13T07:50:20Z",
	"updated_at": "2014-12-22T06:27:46Z"
}
