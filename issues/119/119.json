{
	"id": 51276072,
	"number": 119,
	"state": "closed",
	"title": "variadic return results",
	"body": "by **hugo.vincent**:\n\n\u003cpre\u003eFrom the docs:\n\u0026quot;That ... represents the variadic argument list that in C would be handled\nusing the stdarg.h macros but in Go is passed using an empty interface\nvariable (interface {}) and then unpacked using the reflection library\u0026quot;\n\n-- I think this concept should extend to return results, that is, there\nshould be a way a function can use reflection to see how many and what type\nof arguments are expected by the caller. \n\nPerhaps, reflect could have functions like:\nfunc (t *FuncType) NumOutExpectedByCaller() int\nsimilar to:\nfunc (t *FuncType) NumOut() int\nand so forth.\n\nThis would be useful for solving the inconsistency with how error codes are\npassed back as pseudo-optional return values and what happens when these\nvalues are ignored. See mailing list thread \u0026quot;Re: [go-nuts] Re: Go needs\nExceptions\u0026quot;, for example:\ny = x.(Y) /* can panic the program */\ny, _ = x.(Y) /* will never panic the program */\n\nAt the moment, the spec appears ambiguous or wrong. For example, the spec\nand compiler allows code like this:\nimport (\n    \u0026quot;fmt\u0026quot;;\n    \u0026quot;reflect\u0026quot;\n)\n\nfunc test(in ...) (out ...)\n{\n    out = in;\n    return\n}\n\nfunc main()\n{\n    a := test(42);\n    fmt.Print(reflect.Typeof(a), \u0026quot;\\n\u0026quot;);\n\n    a = test(\u0026quot;hello world\u0026quot;, 123, 456, []int{1,2,3});\n    fmt.Print(reflect.Typeof(a), \u0026quot;\\n\u0026quot;);\n\n    // for comparison\n    fmt.Print(reflect.Typeof(42), \u0026quot;\\n\u0026quot;);\n}\n\nWhich gives (seemingly?) meaningless output:\nmain.dsigddd_1·1\nmain.dsigddd_3·3\nint\n\nWhich revision are you sync'ed to? 4010:91c471680dc9\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "LanguageChange"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:03:20Z",
	"created_at": "2009-11-12T21:29:46Z",
	"updated_at": "2016-06-24T19:00:51Z"
}
