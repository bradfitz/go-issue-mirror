{
	"id": 66048182,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eThis program actually does something, although nothing very useful:\n\n====\npackage main\n\nimport (\n\t\"reflect\";\n\t\"fmt\";\n)\n\nfunc f(a ...) (b ...) { return a }\n\nfunc main() {\n\tx := f(23, 45, 67);\n\ts := reflect.Indirect(reflect.NewValue(x)).(*reflect.StructValue);\n\tfor i := 0; i \u0026lt; s.NumField(); i++ {\n\t\tfmt.Printf(\"%d %d\\n\", i, s.Field(i).Interface().(int));\n\t}\n}\n===\n\nAt the moment, the only way to assign to a ... variable (such as the return from f()) is\ndirectly from another ... variable, more typically as an \nargument to a function call (consider fmt.Printf(\"%s\\n\", fmt.Sprintf(\"%d\", 3))).\n\nThe pattern in your program and mine is an atypical consequence of the handling of ...\nand does not imply a larger design goal. Allowing more \ngeneral semantics to permit returning variant types from a function seems better handled\nby providing an actual implementation of variant types, \nwhich is in our plans.\n\nRegarding the result of printing reflect.Types, the result is always just a name.  For\ncompile-time generated anonymous types, those names may \nbe unhelpful. If you were to look inside using reflection further, you'd see that it's\nonly the name that appears (but isn't) meaningless, as my \nprogram shows.\u003c/pre\u003e\n\n\n\n_Status changed to **WontFix**._",
	"user": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-12-03T03:41:25Z",
	"updated_at": "2014-12-22T05:49:31Z"
}
