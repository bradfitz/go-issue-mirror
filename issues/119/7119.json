{
	"id": 51286215,
	"number": 7119,
	"state": "open",
	"title": "x/tools/cmd/godoc: inconsistent reporting of synopsis vs command documentation",
	"body": "\u003cpre\u003e1) In a $GOROOT/cmd/foo directory, create two files doc.go, main.go:\n\n$ cat doc.go\n// +build ignore\n\n// Package foo is a foo bar.\npackage main\n\n$ cat main.go\npackage main\n\n2) godoc cmd/foo won't show any documentation, only the title:\nCOMMAND DOCUMENTATION\n\n3) run godoc -http=:9000\n\n4) Navigate to: \u003ca href=\"http://localhost:9000/cmd/\"\u003ehttp://localhost:9000/cmd/\u003c/a\u003e\nThe synopsis for command foo is there:\nfoo\t    \tPackage foo is a foo bar.\n\n5) Click on command foo: The documentation only shows the title (not even the synopsis\nanymore):\nCommand foo\n\nProblem (suspicion, haven't analyzed in detail): The reason is that the synopsis is\ncollected in a separate pass, by traversing all directories and extracting documentation\nfrom any .go file available. But when the documentation for the package is shown, the\ngo/build package is used to determine which files to include, and in this case the\ndocumentation file is ignored from the build.\n\nThe solution is to remove the build tag and it will work consistently.  However, it is\nconfusing that a) the synopsis shows up anyway, and b) that for C commands documentation\nis shown even though the build tag is (must be!) present. If one simply copies a C\ncommand doc.go file and adjusts it for a command written in Go one is somewhat surprised\nthat it doesn't work.\n\nNot sure what the proper solution is - perhaps godoc should say that files were excluded\nvia build tags? Then the (user) error would be at least not silent.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"created_at": "2014-01-13T23:21:47Z",
	"updated_at": "2015-04-14T19:39:53Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
