{
	"id": 198774879,
	"body": "On Saturday, March 19, 2016, Minux Ma \u003cnotifications@github.com\u003e wrote:\n\n\u003e I want to ask the same question. When a new feature breaks old code, there\n\u003e seems like enough reason to redesign the new feature to not break existing\n\u003e code (esp. when the standard library code is also broken.) Why\n\u003e subbenchmarks have to be registered with a regular benchmark function?\n\nPlease see\nhttps://github.com/golang/proposal/blob/master/design/12166-subtests.md\n\nThe feature can easily be made to not break these tests. The breaking\nversion is a bit nicer so this is just to see if we can make things nicer\nwithout much effort. If not, no problem.\nNote that the breakage is very rare (but easy to identify) and occurs only\nin quite unconventional uses of the benchmark functionality that are in\naddition making use of an undocumented and not guaranteed property of B.\n\n\n\u003e â€”\n\u003e You are receiving this because you were assigned.\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/14863#issuecomment-198760928\u003e\n\u003e\n",
	"user": {
		"login": "mpvl",
		"id": 6445383,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-19T19:34:04Z",
	"updated_at": "2016-03-19T19:34:04Z"
}
