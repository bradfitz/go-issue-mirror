{
	"id": 173561102,
	"number": 16894,
	"state": "open",
	"title": "runtime: profile goroutine creation",
	"body": "Most unbounded Go memory leaks I've encountered have been due to goroutine leaks. When diagnosing these leaks, it would be helpful to know what function call stack led to the creation of the goroutines so we can link the goroutines back to the non-stdlib code that created themâ€”_why_ the goroutine exists, in addition to its start PC. This is the same vein in which the current heap profiles include the stack that allocated the memory rather than just the PC and type of the allocation.\r\n\r\nRelated proposal for file descriptor profiling: #16379\r\n\r\n---\r\n\r\nA popular way to leak goroutines is by making http requests and not closing the response body. That problem could be targeted more specifically with a good static analysis tool, similar to vet's new -lostcancel check. Both approaches would be helpful.",
	"user": {
		"login": "rhysh",
		"id": 230685,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2016-08-26T23:15:57Z",
	"updated_at": "2016-09-06T19:31:35Z",
	"milestone": {
		"id": 1748849,
		"number": 42,
		"title": "Go1.8Maybe"
	}
}
