{
	"id": 66075048,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eThere really is a zero on the stack as the argument to divWW (it's not a divide by -1,\nfor example), but that word is the most significant word of the divisor, which is never\nzero. If the divisor itself were zero it would have len(v) == 0, so that v[len(v)-1]\nwould have panicked. Worse, in the context of the called code the divisor is the modulus\npassed to expNN, which remains constant throughout the execution of expNNWindowed. And\nyet the code died in the div at line 1358:\n\n  1339\t\tfor i := len(y) - 1; i \u0026gt;= 0; i-- {\n  1340\t\t\tyi := y[i]\n  1341\t\t\tfor j := 0; j \u0026lt; _W; j += n {\n  1342\t\t\t\tif i != len(y)-1 || j != 0 {\n  1343\t\t\t\t\t// Unrolled loop for significant performance\n  1344\t\t\t\t\t// gain.  Use go test -bench=\".*\" in crypto/rsa\n  1345\t\t\t\t\t// to check performance before making changes.\n  1346\t\t\t\t\tzz = zz.mul(z, z)\n  1347\t\t\t\t\tzz, z = z, zz\n  1348\t\t\t\t\tzz, r = zz.div(r, z, m)\n  1349\t\t\t\t\tz, r = r, z\n  1350\t\n  1351\t\t\t\t\tzz = zz.mul(z, z)\n  1352\t\t\t\t\tzz, z = z, zz\n  1353\t\t\t\t\tzz, r = zz.div(r, z, m)\n  1354\t\t\t\t\tz, r = r, z\n  1355\t\n  1356\t\t\t\t\tzz = zz.mul(z, z)\n  1357\t\t\t\t\tzz, z = z, zz\n  1358\t\t\t\t\tzz, r = zz.div(r, z, m)\n  1359\t\t\t\t\tz, r = r, z\n  1360\t\n  1361\t\t\t\t\tzz = zz.mul(z, z)\n  1362\t\t\t\t\tzz, z = z, zz\n  1363\t\t\t\t\tzz, r = zz.div(r, z, m)\n  1364\t\t\t\t\tz, r = r, z\n  1365\t\t\t\t}\n  1366\t\n  1367\t\t\t\tzz = zz.mul(z, powers[yi\u0026gt;\u0026gt;(_W-n)])\n  1368\t\t\t\tzz, z = z, zz\n  1369\t\t\t\tzz, r = zz.div(r, z, m)\n  1370\t\t\t\tz, r = r, z\n  1371\t\n  1372\t\t\t\tyi \u0026lt;\u0026lt;= n\n  1373\t\t\t}\n  1374\t\t}\n\nIf m is a denormalized zero at 1358, why is not a denormalized zero at 1353 or 1348?\n\nMy hypothesis is that this is a garbage collection bug, that the underlying array\nbacking m has been collected and zeroed prematurely. That would resolve all the\nmysteries.\n\nIt's easy to believe there are garbage collection bugs at tip, sadly. The garbage\ncollector has been having some work done recently and I've seen a couple strange crashes\nI haven't tracked down yet. If you need stability my suggestion would be to stay at the\nrelease version.\n\nHow many times have you seen this crash? How long does it typically take to happen?\u003c/pre\u003e\n\n_Labels changed: added **priority-later**, **go1.1**, removed **priority-triage**, **go1.1maybe**._\n\n\n_Status changed to **Accepted**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-02-22T23:43:37Z",
	"updated_at": "2014-12-22T06:22:17Z"
}
