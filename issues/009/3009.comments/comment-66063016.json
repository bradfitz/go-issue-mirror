{
	"id": 66063016,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5 by **yiyu.jgl**:\n\n\u003cpre\u003eAbout how import paths could be resolved, I think all the binary files could be stored\ninside GOPATH, in a known location related to the local path.\n\nA new option would be needed:\n\n    -l localpath   act like if localpath were $GOPATH/src/localpath\n\nSo, for example, I have the directories /home/user/project1/{app1,app2,pkg1,pkg1/pkg2}.\nThen, running:\n\n    $ cd /home/user/project1\n    $ go install -p . ./...\n\nwould install the files:\n\n    $GOPATH/\n      bin/\n        app1\n        app2\n      pkg/\n        linux_amd64/\n          local/\n            home/user/project1/\n              pkg1.a\n              pkg1/\n                pkg2.a\n\nWhen the go tool runs the compiler, the directory\n$GOPATH/pkg/linux_amd64/local/home/user/project1 is added to the import path, so\npackages imported with base in localpath are found without problems.\n\nCertain details could be different, for example packages could go to\n$GOPATH/pkg/local/$GOOS_$GOARCH, so that they don't get mixed with goinstalled packages,\nbut I think is cool knowing that I can import local packages with \"local/path/to/pkg\".\nAn alternative to storing binaries in GOPATH would be to leave them in place, or in\nlocalpath/pkg. What is the problem with these solutions?\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-02-16T03:58:53Z",
	"updated_at": "2014-12-08T10:15:42Z"
}
