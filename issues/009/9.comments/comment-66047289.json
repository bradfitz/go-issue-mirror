{
	"id": 66047289,
	"body": "\u003ca id=\"c918\"\u003e\u003c/a\u003eComment 918 by **charles.chmj**:\n\n\u003cpre\u003e+2 for \u003ca href=\"https://golang.org/issue/9\"\u003eissue #9\u003c/a\u003e\n\n\u003csnip from go for c++, replace (go,go statement) with (\u003ca href=\"https://golang.org/issue/9\"\u003eissue #9\u003c/a\u003e,issue statement)\u003e\n\n\u003ca href=\"https://golang.org/issue/9\"\u003eissue #9\u003c/a\u003e permits starting a new thread of execution (a issueroutine) using the issue \nstatement. The issue statement runs a function in a different, newly created, \nissueroutine. All issueroutines in a single program share the same address space.\n\nInternally, issueroutines act like coroutines that are multiplexed among multiple \noperating system threads. You do not have to worry about these details.\n\nfunc server(i int) {\n    for {\n        print(i);\n        sys.sleep(10)\n    }\n}\nissue server(1);\nissue server(2);\n(Note that the for statement in the server function is equivalent to a C++ while (true) \nloop.)\n\n\u003csnip\u003e\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-11-16T15:40:24Z",
	"updated_at": "2014-12-08T10:02:45Z"
}
