{
	"id": 113678091,
	"number": 13070,
	"state": "closed",
	"title": "cmd/link: statically compiling windows/amd64 binary on linux fails on 1.5",
	"body": "Previously on go 1.4.3 this used to work:\r\n\r\n```\r\nexport CC=x86_64-w64-mingw32-gcc\r\nexport CGO_ENABLED=1\r\nexport GOOS=windows\r\nexport GOARCH=amd64\r\n\r\ngo build -o bundles/1.9.0-dev/cross/windows/amd64/docker-1.9.0-dev.exe -a -tags 'netgo static_build sqlite_omit_load_extension apparmor selinux daemon journald btrfs_noversion libdm_no_deferred_remove' -installsuffix netgo -ldflags '-w -extldflags \"-static\" -extld=x86_64-w64-mingw32-gcc' ./docker\r\n```\r\n\r\nNow when trying to run the same thing I get: \r\n```\r\n# github.com/docker/docker/docker\r\n/usr/local/go/pkg/tool/linux_amd64/link: running x86_64-w64-mingw32-gcc failed: exit status 1\r\n/usr/bin/x86_64-w64-mingw32-ld: i386 architecture of input file `/tmp/go-link-623415307/000000.o' is incompatible with i386:x86-64 output\r\ncollect2: error: ld returned 1 exit status\r\n```\r\n\r\nThat's a super gross command I know, but I can make a small go program and try to compile statically for windows on linux and see the same thing.",
	"user": {
		"login": "jfrazelle",
		"id": 1445228,
		"type": "User",
		"site_admin": false
	},
	"comments": 41,
	"closed_at": "2015-10-27T21:27:58Z",
	"created_at": "2015-10-27T20:16:55Z",
	"updated_at": "2015-11-02T21:45:19Z"
}
