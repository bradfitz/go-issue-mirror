{
	"id": 66076445,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eThe visibility rules are well defined (quoted below). Note that visibility at top level\nis different from visibility inside a function. It makes no difference for these\nexamples, though. The issue here really is about recursive types.\n\nHow could 'type int int' possibly work? What would it mean? The same goes for (at top\nlevel)\n\ntype A B\ntype B C\ntype C D\ntype D Z\ntype Z A\n\nThe compiler rejects types that do not bottom out in a well-defined manner. Saying that\nin the spec will probably be a little tricky. We can leave this for after Go 1.1\n\nCurrent spec:\n`\nGo is lexically scoped using blocks:\n\nThe scope of a predeclared identifier is the universe block.\nThe scope of an identifier denoting a constant, type, variable, or function (but not\nmethod) declared at top level (outside any function) is the package block.\nThe scope of an imported package identifier is the file block of the file containing the\nimport declaration.\nThe scope of an identifier denoting a function parameter or result variable is the\nfunction body.\nThe scope of a constant or variable identifier declared inside a function begins at the\nend of the ConstSpec or VarSpec (ShortVarDecl for short variable declarations) and ends\nat the end of the innermost containing block.\nThe scope of a type identifier declared inside a function begins at the identifier in\nthe TypeSpec and ends at the end of the innermost containing block.\n`\u003c/pre\u003e\n\n_Labels changed: added **priority-later**, removed **priority-triage**._\n\n\n_Status changed to **Accepted**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-18T13:36:36Z",
	"updated_at": "2014-12-08T10:27:05Z"
}
