{
	"id": 66076446,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003e@2: Re: \"How could 'type int int' possibly work? What would it mean?\"\n\nI think the first 'int' would have a meaning of e.g. 'pkg.int' while the later would\nhave the meaning of 'universe.int'. Which is analogous semantics as for eg. 'type Int\nint'. IOW, I don't see 'type int int' as being recursive. In the current package 'int'\nis now a named type with underlying type 'int' defined in the universe scope (assuming\nno other definition of 'int' is visible).\n\nRe: \"The same goes for (at top level)\"\n\ntype A B\ntype B C\ntype C D\ntype D Z\ntype Z A\n\nThis is IMO different, as it is a genuine recursion and there is no way how to implement\nit.\n\n----\n\nAs the preferred concept of Go is, AFAIK, less exceptional rules is better, I suggest to\naccept 'type int int' as described above.\u003c/pre\u003e",
	"user": {
		"login": "cznic",
		"id": 729580,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-18T13:57:32Z",
	"updated_at": "2014-12-08T10:27:05Z"
}
