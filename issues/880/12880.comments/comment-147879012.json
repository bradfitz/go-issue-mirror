{
	"id": 147879012,
	"body": "There isn't a problem with the exercise,  just my ignorance, but basically\nI did a guard pattern, to prevent doing extra work.\nSorry about the syntax, I'm doing this off the top of my head and I'm still\na 'go' novice\nI did something like:\n\n\n\n\n*if count, err := otherReader.read(myByteBuffer); err{    return 0, err*\n\n*}*\n*//do rot13 code here*\n\n\nBut when I did that, none of the data was returned. I should have processed\nthe data as well, since the original reader returned both all the data AND\nan EOF\n\nThe reference docs, that clued me in can be found at:\n\nhttps://golang.org/pkg/io/#Reader\n\nSpecifically: \"*Callers should always process the n \u003e 0 bytes returned\nbefore considering the error err.* \"\n\nThe bold text above would have prevented me from my original error. I don't\nthink guard conditions are an unusual pattern, but including one here\ncaused the program to silently fail.\nAnyhow, no big deal, thought it would improve the exercise, but I\nunderstand the desired for brevity, so I wouldn't argue if you think the\ninclusion is too verbose.\n\nHave a good one, and thanks for looking into it!\nJon\n\nOn Tue, Oct 13, 2015 at 4:34 PM, rakyll \u003cnotifications@github.com\u003e wrote:\n\n\u003e it would have helped me to be told that all characters in a reader should\n\u003e be processed even if there is an error.\n\u003e\n\u003e Is it? func (r rot13Reader) Read can return an error anytime and you can\n\u003e don't have to consume all the characters from s if an error happens -- even\n\u003e though I don't see where an error can happen in this particular exercise\n\u003e during Read. Could you provide a snippet from your solution to make it a\n\u003e bit clear?\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/12880#issuecomment-147860680\u003e.\n\u003e\n",
	"user": {
		"login": "jonburgin",
		"id": 307958,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-13T23:08:37Z",
	"updated_at": "2015-10-13T23:08:37Z"
}
