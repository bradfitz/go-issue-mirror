{
	"id": 178900987,
	"body": "@bradfitz:\r\n\r\n\u003e the error is sent over a channel. It's unclear which stack(s) at which time you want. There is no automatic answer here short of recording a full trace of the program and inspecting it later, probably.\r\n\r\nHmm...I may be oversimplifying the problem. These kinds of things happen for a distributed system as well: we keep track of callstacks for different microservices by carrying over a request id: https://brandur.org/request-ids. Can we do something similar for Goroutines? A unique \"Goroutine ID\" is generated before a piece of code is executed (the ID could come from an argument, as long as it's unique); The \"Goroutine ID\" is carried over for different goroutines; Stacks are correlated and aggregated by the \"Goroutine ID\". Maybe a deeper thought is needed though.\r\n\r\n@davecheney:\r\n\r\n\u003e I think this is not as complicated as you make out. As I understand it the\r\nproblem is a generic error with the same text is returned from several\r\nplaces. If the error is made more specific, won't this solve the problem ?\r\n\r\nYup, it would solve the problem. But I couldn't get away of waiting for the next Go release or making a custom build for Go if I want to use it right away as mentioned in https://github.com/golang/go/issues/14203#issuecomment-178881150. I literally want to know what caused the errors now.\r\n",
	"user": {
		"login": "jingweno",
		"id": 169064,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-03T00:09:42Z",
	"updated_at": "2016-02-03T00:13:06Z"
}
