{
	"id": 66058896,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eI don't believe this is common.  It never comes up in the\nGo standard library.  In what code is this common?\n\nThis scenario is incomplete.  It does not show any way for a caller\nto create an unexported.  Without that, there is no point to showing\nit in godoc.\n\nIf the scenario did have a way, like:\n\nfunc NewUnexported() unexported\n\nthen I would suggest making it instead\n\nfunc NewUnexported() Exported\n\nIf you are not willing to let others use the name (\"unexported\"), then\nyou shouldn't force it on them in the public API.  Among other\nproblems, you can't declare a variable that will process the result.\nYou can write\n\nx := p.NewUnexported()\n\nbut not\n\nvar x p.unexported = p.NewUnexported()\n\nThat's not good API design.\n\nThe various 32-bit hash functions are a good\nexample of this in practice: hash/adler32's New returns\na hash.Hash, not a *digest.  There's no need to expose\nthe internal name in the external API.\n\nWhether it's internals can be accessed depends on\nwhether the field names are upper or lower case.\nIt does not depend on the struct name.\n\nRuss\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-09-19T14:58:50Z",
	"updated_at": "2014-12-08T10:12:15Z"
}
