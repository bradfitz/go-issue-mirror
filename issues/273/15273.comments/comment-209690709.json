{
	"id": 209690709,
	"body": "Well , I was about to ask : \"so what if I implement more than one anonymous member , and the answer \"solved\" my problem , watch this simple code , I only added a new type \"Mes1\" :\r\n\r\n\r\npackage main\r\n\r\nimport(\r\n\t\"fmt\"\r\n\t\"encoding/json\"\r\n)\r\n\r\ntype me struct{\r\n\tName\tstring\r\n\tFee int64\r\n}\r\n\r\ntype Mes []me\r\ntype Mes1 []me\r\n\r\ntype base struct{\r\n\tId int64\t`json:\"id\"`\r\n\tMes `json:\"mes\"`\r\n\tMes1 `json:\"mes1\"`\r\n\t\r\n}\r\n\r\nfunc main(){\r\n\tb := []base{{Id:1},{Id:2}}\r\n\tb[0].Mes = append(b[0].Mes , me{Name : \"n1\", Fee :63}, me{Name : \"n2\", Fee :88})\r\n\tb[1].Mes = append(b[1].Mes , me{Name : \"m1\", Fee :63})\r\n\tif bt , err := json.Marshal(b);err !=nil{\r\n\t\tfmt.Println(err)\r\n\t} else {\r\n\t\tfmt.Println(string(bt))\r\n\t}\r\n}\r\n\r\nfunc (m Mes) MarshalJSON() ([]byte, error) {\r\n\t\treturn []byte(fmt.Sprint(len(m))), nil\r\n}\r\n\r\nfunc (m Mes1) MarshalJSON() ([]byte, error) {\r\n\t\treturn []byte(fmt.Sprint(len(m)+5)), nil\r\n} \r\n\r\nnow this amazingly returns :\r\n\r\n\r\n[{\"id\":1,\"mes\":2,\"mes1\":5},{\"id\":2,\"mes\":1,\"mes1\":5}]\r\n\r\n\r\nwhich is what I wanted in the beginning with \"a little extra\" , I was already \"ready to leave with a little junk in my json\" , but tried this `json:\"-\"`\r\n\r\n\r\ntype base struct{\r\n\tId int64\t`json:\"id\"`\r\n\tMes `json:\"mes\"`\r\n\tMes1 `json:\"-\"`\r\n\t\r\n}\r\n\r\nand abracadabra :\r\n\r\n[{\"id\":1,\"mes\":2},{\"id\":2,\"mes\":1}]\r\n\r\nso , this IS inconsistent , not really anticipate-able and a little awkward . ",
	"user": {
		"login": "GuyBrand",
		"id": 5917810,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-13T23:38:18Z",
	"updated_at": "2016-04-13T23:38:18Z"
}
