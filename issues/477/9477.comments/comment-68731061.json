{
	"id": 68731061,
	"body": "Is the problem about how long a call to runtime.GC() takes or is it really\r\nabout GC latency, how much CPU time the application code (mutator) is\r\nallotted over the course of some time delta, and how much HW needs to be\r\nprovisioned to achieved the goal? The 1.5 GC addresses the later. There are\r\nno plans to address how long a call to runtime.GC() takes.\r\n\r\n\r\n\r\nOn Fri, Jan 2, 2015 at 2:46 PM, Josh Bleecher Snyder \u003c\r\nnotifications@github.com\u003e wrote:\r\n\r\n\u003e @randall77 \u003chttps://github.com/randall77\u003e on pain of going into a rat\r\n\u003e hole, I ran @cespare \u003chttps://github.com/cespare\u003e's tests with a few\r\n\u003e different values of loadFactor.\r\n\u003e   6.5 6.0 5.5   map[int32]*int32 3070ms 2872ms 2790ms  map[int32]int32\r\n\u003e 659ms 414ms 403ms  map shards 385ms 386ms 380ms\r\n\u003e\r\n\u003e It's possible that in loadFactor will be worth revisiting, once the\r\n\u003e concurrent gc has stabilized.\r\n\u003e\r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub\r\n\u003e \u003chttps://github.com/golang/go/issues/9477#issuecomment-68555866\u003e.\r\n\u003e",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-05T16:17:27Z",
	"updated_at": "2015-01-05T16:17:27Z"
}
