{
	"id": 68789587,
	"body": "A goroutine that is allocating or creating other GC work such as writing\r\npointers at a rate faster than the GC can deal with will need to be\r\nthrottled. This will allow the GC to complete in a timely fashion. What you\r\ndon't want is a goroutine that is not creating additional work for the GC\r\nto also be throttled.\r\n\r\nOn Mon, Jan 5, 2015 at 4:41 PM, siritinga \u003cnotifications@github.com\u003e wrote:\r\n\r\n\u003e I suppose that the total GC time would be the same or maybe slower if the\r\n\u003e start/stop takes some time, but if GC runs 20% of the time, instead of 600\r\n\u003e ms pause, it would be 3 seconds at 80% your code, 20% the GC. Maybe it is a\r\n\u003e solution to avoid long pauses in interactive programs but the loss of\r\n\u003e performance is there in any case.\r\n\u003e\r\n\u003e I wonder if it would be possible to produce garbage faster than it is\r\n\u003e collected...\r\n\u003e\r\n\u003e â€”\r\n\u003e Reply to this email directly or view it on GitHub\r\n\u003e \u003chttps://github.com/golang/go/issues/9477#issuecomment-68786857\u003e.\r\n\u003e",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-05T21:59:15Z",
	"updated_at": "2015-01-05T21:59:15Z"
}
