{
	"id": 66086067,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eHaving to redeclare types is very messy, especially when I have many structs that need\nto be defined this way. I also have to incur the cost of having twice the reflection.\n\nWould something like this work?\n\n\ntype printer struct {\n\t*bufio.Writer\n\tencoder    *Encoder\n\tseq        int\n\tindent     string\n\tprefix     string\n\tdepth      int\n\tindentedIn bool\n\tputNewline bool\n\tattrNS     map[string]string // map prefix -\u003e name space\n\tattrPrefix map[string]string // map name space -\u003e prefix\n\tprefixes   []string\n\ttags       []Name\n\tlastValue  reflect.Value\n}\n\nif p.lastValue != val {\n\t// Ensure MarshalXML isn't called a second time\n\tp.lastValue = val\n\n\t// Check for marshaler.\n\tif val.CanInterface() \u0026\u0026 typ.Implements(marshalerType) {\n\t\treturn p.marshalInterface(val.Interface().(Marshaler), defaultStart(typ, finfo, startTemplate))\n\t}\n\tif val.CanAddr() {\n\t\tpv := val.Addr()\n\t\tif pv.CanInterface() \u0026\u0026 pv.Type().Implements(marshalerType) {\n\t\t\treturn p.marshalInterface(pv.Interface().(Marshaler), defaultStart(pv.Type(), finfo, startTemplate))\n\t\t}\n\t}\t\n}\n\n\nIf if it did it would allow me to call EncodeElement inside MarhsalXML and prevent the\nrecursion.\u003c/pre\u003e",
	"user": {
		"login": "lukescott",
		"id": 486224,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-10-02T16:29:35Z",
	"updated_at": "2014-12-08T10:35:45Z"
}
