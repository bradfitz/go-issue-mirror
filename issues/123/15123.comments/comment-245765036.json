{
	"id": 245765036,
	"body": "Current design adds the following methods to the `database/sql` package.\r\n```\r\nfunc (*DB) BeginLevel(ctx context.Context, level IsoLevel) (*Tx, error)\r\nfunc (*DB) ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)\r\nfunc (*DB) QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)\r\nfunc (*DB) QueryRowContext(ctx context.Context, query string, args ...inerface{}) *Row\r\n\r\nfunc (*Stmt) ExecContext(ctx context.Context, args ...interface{}) (Result, error)\r\nfunc (*Stmt) QueryContext(ctx context.Context, args ...interface{}) (*Rows, error)\r\nfunc (*Stmt) QueryRow(ctx context.Context, args ...interface{}) (*Row)\r\n\r\nfunc (*Tx) ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)\r\nfunc (*Tx) QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)\r\nfunc (*Tx) QueryRowContext(ctx context.Context, query string, args ...interface{}) *Row\r\nfunc (*Tx) StmtContext(ctx context.Context, stmt *Stmt) *Stmt\r\n```\r\n\r\nThe goal is to drive a middle ground between having a context on every Rows method, but not on what is designed to be globals such as *DB or *Stmt nor store context in what looks like a *DB. The context parameter is designed to signal the driver to close the connection (cancelling the query if the driver supports it) and return the connection to the database pool at the end of the request.\r\n\r\nThe `database/sql/driver` package will also get modified to add optional interfaces drivers can implement. Most database systems support cancelling in-flight queries, use context to signal cancellation. If a driver doesn't support the new interfaces the new `sql` Context methods can still be used, however in-flight queries may continue to process until it sees the connection is closed.\r\n```\r\ntype ExecerContext interface {\r\n    ExecContext(ctx context.Context, query string, args []Value) (Result, error)\r\n}\r\ntype QueryerContext interface {\r\n    QueryContext(ctx context.Context, query, args []Value) (Rows, error)\r\n}\r\ntype RowsContext interface {\r\n    ColumnInfo() []ColumnInfo // Probably not this exactly, but may have something like this, see #16652\r\n    Close() error\r\n    NextContext(ctx context.Context, dest []Value) error\r\n}\r\ntype StmtContext interface {\r\n    Close() error\r\n    NumInput() int\r\n    ExecContext(ctx context.Context, args []Value) (Result, error)\r\n    QueryContext(ctx context.Context, args []Value) (Rows, error)\r\n}\r\ntype TxContext interface {\r\n    CommitContext(context.Context) error\r\n    RollbackContext(context.Context) error\r\n}\r\n```\r\n",
	"user": {
		"login": "kardianos",
		"id": 755121,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-08T22:44:28Z",
	"updated_at": "2016-09-08T22:56:06Z"
}
