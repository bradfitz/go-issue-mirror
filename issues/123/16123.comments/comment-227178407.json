{
	"id": 227178407,
	"body": "Go is not Java, and different garbage collection techniques are appropriate.\r\n\r\nAlthough the paper describes the GC as pauseless, if you read it you will see that that is not the case.  I quote:\r\n\r\n    While the Azul C4 algorithm actually requires zero\r\n    pauses in applications, the JVM implementation\r\n    does include brief pauses at phase transitions for\r\n    simplicity and implementation expedience. These\r\n    pauses are well below the threshold that would\r\n    be noticeable to users and are not affected by\r\n    application scale or data set size. The C4 algorithm\r\n    completely decouples pause time from memory heap\r\n    size, allowing applications to scale and use large\r\n    amounts of heap memory without impacting performance\r\n    or user response time. The result is a\r\n    highly scalable environment that offers predictable\r\n    performance for large Java applications.\r\n\r\nThese same statements are already true of the current Go garbage collection algorithm.  Go GC pause times are very short and are independent of heap size.\r\n\r\nI also note that the Azul algorithm, unlike the current Go algorithm, requires read barriers, which impose a performance cost on the entire application.\r\n\r\nThe Go runtime team is continuing to work to improve the Go garbage collector.  We welcome specific suggestions and specific problem reports.  However, I'm going to close this general issue as not actionable.\r\n\r\nIt would be better to discuss general GC issues, like this, in a forum, rather than on the issue tracker.  See https://golang.org/wiki/Questions .",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-20T15:33:51Z",
	"updated_at": "2016-06-20T15:33:51Z"
}
