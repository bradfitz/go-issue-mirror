{
	"id": 66100323,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eThe profile format has not changed, so it should all work. And it does with profiles\nwritten to disk:\n\ng% go1.3 test -c hash/crc32\ng% ./crc32.test -test.bench=. -test.cpuprofile=x.prof\nPASS\nBenchmarkCrc32KB\t  500000\t      3438 ns/op\t 297.80 MB/s\ng% go tool pprof crc32.test x.prof\nEntering interactive mode (type \"help\" for commands)\n(pprof) top\n1.62s of 1.62s total (  100%)\n      flat  flat%   sum%        cum   cum%\n     1.44s 88.89% 88.89%      1.44s 88.89%  hash/crc32.update\n     0.15s  9.26% 98.15%      0.15s  9.26%  runtime.usleep\n     0.02s  1.23% 99.38%      0.02s  1.23%  hash/crc32.(*digest).Sum\n     0.01s  0.62%   100%      1.47s 90.74%  hash/crc32.BenchmarkCrc32KB\n         0     0%   100%      0.15s  9.26%  System\n         0     0%   100%      1.44s 88.89%  hash/crc32.(*digest).Write\n         0     0%   100%      1.44s 88.89%  hash/crc32.Update\n         0     0%   100%      1.47s 90.74%  runtime.gosched0\n         0     0%   100%      1.47s 90.74%  testing.(*B).launch\n         0     0%   100%      1.47s 90.74%  testing.(*B).runN\n(pprof) \n\nHeap profiles also work:\n\ng% go1.3 test -c encoding/json\ng% (cd ~/go1.3/src/pkg/encoding/json; ~/json.test -test.bench=.\n-test.memprofile=$HOME/x.prof)\nPASS\nBenchmarkCodeEncoder\t      50\t  24843046 ns/op\t  78.11 MB/s\nBenchmarkCodeMarshal\t      50\t  28137133 ns/op\t  68.96 MB/s\nBenchmarkCodeDecoder\t      10\t 117676221 ns/op\t  16.49 MB/s\nBenchmarkCodeUnmarshal\t      20\t 109212665 ns/op\t  17.77 MB/s\nBenchmarkCodeUnmarshalReuse\t      20\t 111197678 ns/op\nBenchmarkUnmarshalString\t 2000000\t       897 ns/op\nBenchmarkUnmarshalFloat64\t 5000000\t       698 ns/op\nBenchmarkUnmarshalInt64\t 5000000\t       639 ns/op\nBenchmarkSkipValue\t      50\t  23336935 ns/op\t  83.33 MB/s\nBenchmarkEncoderEncode\t 1000000\t      1042 ns/op\t     219 B/op\t       2 allocs/op\ng% go tool pprof json.test x.prof\nEntering interactive mode (type \"help\" for commands)\n(pprof) top10\n9070.36kB of 9070.36kB total (  100%)\nDropped 51 nodes (cum \u0026lt;= 45.35kB)\nShowing top 10 nodes out of 36 (cum \u0026gt;= 1536.11kB)\n      flat  flat%   sum%        cum   cum%\n 6508.99kB 71.76% 71.76%  6508.99kB 71.76%  bytes.makeSlice\n 1025.27kB 11.30% 83.06%  1025.27kB 11.30%  _rt0_go\n 1024.08kB 11.29% 94.35%  1024.08kB 11.29%  reflect.unsafe_New\n  512.03kB  5.65%   100%   512.03kB  5.65%  encoding/json.(*decodeState).literalStore\n         0     0%   100%  2086.21kB 23.00%  bytes.(*Buffer).ReadFrom\n         0     0%   100%  2260.91kB 24.93%  bytes.(*Buffer).Write\n         0     0%   100%  2161.87kB 23.83%  bytes.(*Buffer).WriteByte\n         0     0%   100%  4422.78kB 48.76%  bytes.(*Buffer).grow\n         0     0%   100%  4422.78kB 48.76%  encoding/json.(*arrayEncoder).encode\n         0     0%   100%  1536.11kB 16.94%  encoding/json.(*decodeState).array\n(pprof)\n\nHowever, I can confirm that the network handlers don't work:\n\ng% godoc -http=:6060\u0026\n[1] 33130\ng% go tool pprof \u003ca href=\"http://localhost:6060/debug/pprof/heap\"\u003ehttp://localhost:6060/debug/pprof/heap\u003c/a\u003e \nFetching profile from \u003ca href=\"http://localhost:6060/debug/pprof/heap\"\u003ehttp://localhost:6060/debug/pprof/heap\u003c/a\u003e\nSaved profile in\n/Users/rsc/pprof/pprof.localhost:6060.inuse_objects.inuse_space.003.pb.gz\nEntering interactive mode (type \"help\" for commands)\n(pprof) top10\n2.14MB of 2.14MB total (  100%)\n      flat  flat%   sum%        cum   cum%\n    2.14MB   100%   100%     2.14MB   100%  \n\nBut if you do the fetch yourself, they do:\n\ng% hget \u003ca href=\"http://localhost:6060/debug/pprof/heap\"\u003ehttp://localhost:6060/debug/pprof/heap\u003c/a\u003e \u0026gt;x.prof\ng% go tool pprof $(which godoc) x.prof\nEntering interactive mode (type \"help\" for commands)\n(pprof) top10\n2186.87kB of 2186.87kB total (  100%)\nDropped 68 nodes (cum \u0026lt;= 10.93kB)\nShowing top 10 nodes out of 16 (cum \u0026gt;= 650.62kB)\n      flat  flat%   sum%        cum   cum%\n 1024.11kB 46.83% 46.83%  1024.11kB 46.83%  go/doc.clean\n  650.62kB 29.75% 76.58%   650.62kB 29.75%  bytes.makeSlice\n  512.14kB 23.42%   100%   512.14kB 23.42%  mcommoninit\n         0     0%   100%   650.62kB 29.75%  bytes.(*Buffer).ReadFrom\n         0     0%   100%  1024.11kB 46.83%  go/doc.Synopsis\n         0     0%   100%   650.62kB 29.75%  golang.org/x/tools/godoc.(*Corpus).refreshMetadataLoop\n         0     0%   100%   650.62kB 29.75%  golang.org/x/tools/godoc.(*Corpus).updateMetadata\n         0     0%   100%  1024.11kB 46.83%  golang.org/x/tools/godoc.(*treeBuilder).newDirTree\n         0     0%   100%  1024.11kB 46.83%  golang.org/x/tools/godoc.func·002\n         0     0%   100%   650.62kB 29.75%  golang.org/x/tools/godoc.func·024\n(pprof) \n\nWorse, that was with Go 1.4 godoc, not Go 1.3 godoc. The problem is Go 1.4 pprof is\nclearly not able to fetch symbols remotely, from anyone. Will fix.\u003c/pre\u003e\n\n_Labels changed: added **release-go1.4**, removed **release-go1.4maybe**._\n\n\n_Status changed to **Accepted**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-03T18:40:10Z",
	"updated_at": "2014-12-22T06:38:16Z"
}
