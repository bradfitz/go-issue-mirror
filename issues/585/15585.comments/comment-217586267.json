{
	"id": 217586267,
	"body": "@randall77 - have you started on this?\r\nSeems to be failure to guard some sparse set ops, though there may be a root cause we need to look at:\r\n```\r\ndiff --git a/src/cmd/compile/internal/ssa/sparsemap.go b/src/cmd/compile/internal/ssa/sparsemap.go\r\nindex 0211a70..e22ed1e 100644\r\n--- a/src/cmd/compile/internal/ssa/sparsemap.go\r\n+++ b/src/cmd/compile/internal/ssa/sparsemap.go\r\n@@ -67,6 +67,9 @@ func (s *sparseMap) setBit(k ID, v uint) {\r\n }\r\n \r\n func (s *sparseMap) remove(k ID) {\r\n+       if k \u003e= ID(len(s.sparse)) {\r\n+               return\r\n+       }\r\n        i := s.sparse[k]\r\n        if i \u003c len(s.dense) \u0026\u0026 s.dense[i].key == k {\r\n                y := s.dense[len(s.dense)-1]\r\ndiff --git a/src/cmd/compile/internal/ssa/sparseset.go b/src/cmd/compile/internal/ssa/sparseset.go\r\nindex 66bebf1..f018563 100644\r\n--- a/src/cmd/compile/internal/ssa/sparseset.go\r\n+++ b/src/cmd/compile/internal/ssa/sparseset.go\r\n@@ -53,6 +53,9 @@ func (s *sparseSet) addAllValues(a []*Value) {\r\n }\r\n \r\n func (s *sparseSet) remove(x ID) {\r\n+       if x \u003e= ID(len(s.sparse)) {\r\n+               return\r\n+       }\r\n        i := s.sparse[x]\r\n        if i \u003c len(s.dense) \u0026\u0026 s.dense[i] == x {\r\n                y := s.dense[len(s.dense)-1]\r\n```",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-06T23:25:01Z",
	"updated_at": "2016-05-06T23:25:01Z"
}
