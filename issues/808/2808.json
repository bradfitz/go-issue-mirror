{
	"id": 51279734,
	"number": 2808,
	"state": "closed",
	"title": "cmd/go install: how to cope with equally named commands from different projects in a single GOPATH hierarchy",
	"body": "by **mt4swm**:\n\n\u003cpre\u003eI'm filing this issue as suggested by Russ Cox in comment\n#30 of closed \u003ca href=\"https://golang.org/issue/2606\"\u003eissue #2606\u003c/a\u003e, the former `cmd/go suggestion bin',\nas I found no issue or recent Go revision that seems related\nto that problem.\n\nThe description is in comment #11 of \u003ca href=\"https://golang.org/issue/2606\"\u003eissue #2606\u003c/a\u003e:\n\u003ca href=\"https://golang.org/issue/2606?c=11\"\u003ehttps://golang.org/issue/2606?c=11\u003c/a\u003e\n\nIn short, at present each command (i.e. a package named\n\u0026quot;main\u0026quot; containing a func main()) within a single GOPATH\nuniverse (i.e. one hierarchy whose root is named among others\nin GOPATH) has to have a unique name, else a \u0026quot;go install\n[importpath]\u0026quot; might overwrite an identically named program\ninstalled previously into the hierarchy's bin directory.\nThis might especially be the case if a GOPATH universe\ncontains many git or Mercurial projects from e.g. github or\nbitbucket, each containing some packages and commands. As\ncommand names tend to be rather short, a name clash could\noccur quite easily. Perhaps \u0026quot;go install\u0026quot; could just warn when\nit is overwriting a binary from a different package source,\nbut I fear a compiled binary doesn't contain such information.\n\nThis could probably be avoided if a separate GOPATH hierarchy\nwas used for each project, so each project would\nhave its own bin directory.  But, citing Roger\nPeppe from a cmd/go related thread on golang-nuts:\n\u003ca href=\"http://groups.google.com/group/golang-nuts/msg/db890e1d7ad65474\"\u003ehttp://groups.google.com/group/golang-nuts/msg/db890e1d7ad65474\u003c/a\u003e\n\t\u0026quot;[...] then GOPATH will need an  entry for each \n\tproject [that does], which isn't really in the spirit of the go\n\tcommand.\u0026quot;\n\nIn that comment #11 I suggested a solution similar to that\nsupported by Plan9's rc: This shell is able to start programs\nlike e.g. venti/sync and venti/buildindex, which live in their own\ndirectory `/bin/venti', thus there is no name clash with \u0026quot;sync\u0026quot;,\na unix system command. It would be the question how to tell\nbash to find the program (an entry in PATH for each\nsubdirectory?).\nExample: A binary \u0026quot;foo\u0026quot; built from Go source files located in\n  src/package1/cmd/foo\ncould be installed as\n  bin/package1/foo\n\nI'm not sure that I haven't missed something obvious, as this\nissue doesn't seem to present itself to other people so far ...\n\nMichael\n\n\nPS: An option not unrelated to this topic could be, if go/build\nsupported a BuildTag \u0026quot;noinstall\u0026quot;, so that a command source\nfile could specify \u0026quot;// +build noinstall\u0026quot;, allowing a project\nto provide short named utilities or example programs that\nwont pollute the bin directory, but just be stored beside the\nsource files.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Unfortunate"
		}
	],
	"comments": 7,
	"closed_at": "2014-12-08T10:14:53Z",
	"created_at": "2012-01-29T00:41:50Z",
	"updated_at": "2016-06-24T21:24:46Z"
}
