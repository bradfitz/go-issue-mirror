{
	"id": 66072148,
	"body": "\u003ca id=\"c7\"\u003e\u003c/a\u003eComment 7:\n\n\u003cpre\u003eSorry for lack of updates. The SIGTTIN strace in the above is caused by the app in\nquestion having goroutines trying to still read from the tty. Every read attempt gets a\nSIGTTIN, and it keeps spinning there. While the app *could* be careful and stop the\nreading goroutines (which isn't trivial in the first place; they're blocking on .Read()\ncurrently), very few apps will have custom code to handle SIGTSTP in the first place, so\nI expect C-z'ing miscellaneous Go applications will have messy results. A goroutine\nblocking on os.Stdin.Read() oughta behave better, with no extra logic.\n\nAlso, I'm not convinced the syscall.Gettid and .Tgkill hack is guaranteed to work in\ngeneral; I don't think I saw anything in the ref saying goroutines can't reschedule\nwhenever they want. The OS thread id might change, unless we do runtime.LockOSThread(),\nand that's really only useful for new goroutines (because we don't want to leave things\nlocked).\n\nNot sure what would be a clean way out of this mess.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-12-19T22:53:13Z",
	"updated_at": "2014-12-08T10:23:20Z"
}
