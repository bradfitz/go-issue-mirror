{
	"id": 66065420,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eThe problem is that because the async.Call interface has an unexported method, the\ncompiler thinks that it doesn't have to create an interface method table for the type \nbar.BarCall, as it is defined in a different package and therefore could not implement\nthe async.Call method.  I didn't consider the case of inheriting the unexported method.\n\nHere is a slightly simpler test case.\n\np1.go:\n\n\npackage p1\n\ntype I1 interface {\n\tf()\n}\n\ntype S1 struct {\n}\n\nfunc (s S1) f() {\n}\n\nfunc F1(i1 I1) {\n}\n\n\np2.go:\n\n\npackage p2\n\nimport \"./p1\"\n\ntype S2 struct {\n\tp1.S1\n}\n\n\np3.go:\n\n\npackage main\n\nimport (\n\t\"./p1\"\n\t\"./p2\"\n)\n\nfunc F(i1 p1.I1) {\n\tswitch v := i1.(type) {\n\tcase p2.S2:\n\t\tp1.F1(v)\n\t}\n}\n\nfunc main() {\n\tF(nil)\n}\u003c/pre\u003e\n\n_Labels changed: added **priority-soon**, removed **priority-later**._",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-05-03T05:34:30Z",
	"updated_at": "2014-12-08T10:17:43Z"
}
