{
	"id": 126050947,
	"body": "Code such as\r\n```\r\nf, err := os.Open(\"file\")\r\nerr.(nil)\r\n```\r\nwould still not be possible, because compilers don't permit stand-alone type assertions where the result is not used (gc: \"x.(T) evaluated but not used\"; go/types: \"x.(T) (comma, ok expression of type T) is not used\").\r\n\r\n(I think this current restriction is not specified in the spec, but I need to double-check. Arguably, having a stand-alone type assertion does make sense, because it can have a panic as side-effect. This would be an independent change).\r\n\r\nRegarding the proposal per se: I appreciate the greater symmetry between type assertions and type checks; especially because already now the spec explains a type-switch in terms of an if-else-if chain of type assertions. The very first case in the respective spec example is nil and requires special handling - with this change it would be fully symmetric. On the other hand, one might argue that the nil case is a special case in type-switches, for pragmatic convenience, and not part of the \"symmetric design\" between type assertions and type switches (in fact, nil handling was added later to type switches). Go has several such carefully chosen exceptional rules which are extremely useful in practice, but superficially detract from it's regularity.\r\n\r\nI'm not feeling very strongly for or against the proposal. There may be use cases which we haven't anticipated yet, so I don't want to dismiss it right away. But at the moment it appears of limited benefit but cause additional implementation work. Postpone for now?\r\n",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-29T18:31:02Z",
	"updated_at": "2015-07-29T18:31:02Z"
}
