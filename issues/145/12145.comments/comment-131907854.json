{
	"id": 131907854,
	"body": "Regarding your first point: You are correct, the first version is shorter (it's also not the best example of how this convention could be used). Most of the time, common setup can be arranged into a table-driven test. Where there are more complex setup interactions, which may vary slightly for different test cases, the table-driven approach breaks down. In a struct-based scenario, common setup can be included in a `Setup` method, and then any additional setup can be performed by the individual test cases before performing the actions under test and asserting the correct results.\r\n\r\nRegarding your second point: The beauty of the `go test` convention is that any test that is defined correctly is found automatically by the tool and executed. This proposal allows setup actions to be likewise discovered and executed for any related test cases without the need to explicitly call the setup/teardown functions from each test case. I suppose you could say that this doesn't introduce anything new, but it does introduce a much more reliable way to achieve common Setup/Teardown for related test cases.\r\n\r\nRegarding the third point: Yes, this does introduce an additional convention. If someone wanted to make use of it in their tests, they would have to learn the convention. Any contributors would also have to learn the convention. Such is also true of every package in the standard library. But, this isn't a difficult convention to learn--a single example like the one I provided is enough to get the point across. Compared with learning the [go concurrency model](http://golang.org/doc/effective_go.html#concurrency), or the mechanics of [defer, panic, and recover](http://blog.golang.org/defer-panic-and-recover) this isn't too bad. It's also a convention that's already well-established in testing tools from other languages.\r\n\r\n_Again, no changes are necessary in the \"testing\" package as it already supports what I am proposing. (This is totally backward-compatible.) All that is required is to extend the current behavior of the `go test` command, a task I am confident I could implement correctly._\r\n\r\nI'm happy to compose a formal design document if that would help clarify the proposal.",
	"user": {
		"login": "mdwhatcott",
		"id": 202910,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-17T17:50:51Z",
	"updated_at": "2015-08-17T17:50:51Z"
}
