{
	"id": 92990346,
	"number": 11587,
	"state": "closed",
	"title": "runtime: Two dimensional array access in go vs C",
	"body": "I have the following code in C where I attempt to access elements of a two D int array\r\n\r\n#include \u003cstdio.h\u003e\r\n#include \u003ctime.h\u003e\r\nvoid main ()\r\n{\r\n   \r\n  int tr_nextstate[8][2] = {{0, 4}, {4, 0}, {5, 1}, {1, 5}, {2, 6}, {6, 2}, {7, 3}, {3, 7}};\r\n   int i, j,next_state=0;\r\n \r\n   clock_t start, end;\r\n   double cpu_time_used;\r\n   start = clock();\r\n   \r\n   for (i = 0; i \u003c 100000000; i++)\r\n    {\r\n\t\tj = i % 2;\r\n\t\tnext_state = tr_nextstate[next_state][j];\r\n\t\t\r\n\t}\r\n\tend = clock();\r\n   cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC*1000;\r\n    printf(\"fun() took %f milliseconds to execute \\n\", cpu_time_used);\r\n   \r\n}\r\n\r\nI have the same code in go :\r\n\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"time\"\r\n)\r\n\r\nfunc main() {\r\n\ttr_nextstate := [][]int{{0, 4}, {4, 0}, {5, 1}, {1, 5}, {2, 6}, {6, 2}, {7, 3}, {3, 7}}\r\n\r\n\tnext_state := 0\r\n\tvar j int\r\n\tstartTime := time.Now()\r\n\tfor i := 0; i \u003c 100000000; i++ {\r\n\t\tj:= i % 2\r\n\t\tnext_state = tr_nextstate[next_state][j]\r\n\t\t\r\n\t}\r\n\tfmt.Printf(\"\\nTime Elapsed : %v\", time.Since(startTime))\r\n}\r\n\r\nWhen I run both the codes in my machine.\r\n C - code gives a runtime of roughly **400 milliseconds**\r\nGo-code gives a runtime of roughtly **550 milliseconds**\r\n\r\nCan anyone throw light on why so? \r\n\r\nMy machine runs kubuntu 15.04 with i5 @2.4GHz with 16GB RAM",
	"user": {
		"login": "oldmonkABA",
		"id": 7950812,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2015-07-04T08:52:35Z",
	"created_at": "2015-07-04T08:38:35Z",
	"updated_at": "2016-07-11T22:38:26Z"
}
