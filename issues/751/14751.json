{
	"id": 139895882,
	"number": 14751,
	"state": "closed",
	"title": "text/template: index should return nil instead of index out of range error",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\n```\r\ngo version go1.6 darwin/amd64\r\n```\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/bep/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n3. What did you do?\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"bytes\"\r\n\t\"fmt\"\r\n\t\"html/template\"\r\n)\r\n\r\nfunc main() {\r\n\tvar data struct {\r\n\t\tA map[string]interface{}\r\n\t\tB []interface{}\r\n\t}\r\n\r\n\tt, err := template.New(\"a\").Parse(`{{ with index .A \"a\" }}{{ else }}Not Found{{ end }}`)\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t\treturn\r\n\t}\r\n\tvar b bytes.Buffer\r\n\terr = t.Execute(\u0026b, data)\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t\treturn\r\n\t}\r\n\r\n\tfmt.Println(\"A:\", b.String())\r\n\tb.Reset()\r\n\r\n\tt, err = template.New(\"b\").Parse(`{{ with index .B 0}}{{ else }}Not Found{{ end }}`)\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t\treturn\r\n\t}\r\n\r\n\terr = t.Execute(\u0026b, data)\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t\treturn\r\n\t}\r\n\r\n\tfmt.Println(\"B:\", b.String())\r\n\r\n}\r\n```\r\n\r\n\r\n4. What did you expect to see?\r\n\r\n```\r\nA: Not Found\r\nB: Not Found\r\n```\r\n\r\n5. What did you see instead?\r\n\r\n```\r\nA: Not Found\r\ntemplate: b:1:8: executing \"b\" at \u003cindex .B 0\u003e: error calling index: index out of range: 0\r\n```\r\n\r\nI understand why I get this error and I expect arguments ala \"you can fix this by doing proper length checking of the slice. Or you can provide  your own implementation of the index template func\".\r\n\r\nSure. But it isn't always obvious in a template if I interact with a `map` or a `slice`, and with DRY in mind, I would say that range checking should be done in one place: Inside the `index` template func. \r\n\r\nAnd the answer to the question \"is this really a problem?\":\r\n\r\nI'm one of the maintainers in Hugo, probably the project with the largest amount of end-user-provided Go templates, and the number one most frequent support question by a large margin, is: \"How do I access that parameter/argument/data in a safe way?\"\r\n\r\nhttps://github.com/spf13/hugo/issues/1949\r\n",
	"user": {
		"login": "bep",
		"id": 394382,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsDecision"
		}
	],
	"comments": 8,
	"closed_at": "2016-10-17T20:10:08Z",
	"created_at": "2016-03-10T14:05:43Z",
	"updated_at": "2016-10-18T06:41:54Z",
	"milestone": {
		"id": 1748849,
		"number": 42,
		"title": "Go1.8Maybe"
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	}
}
