{
	"id": 66094747,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9 by **JonKerridge60**:\n\n\u003cpre\u003eObviously there is something fundamental that I am missing here\nnumber makes 5 nested calls to go routines\ndelay is just a single call to a go routine\nconvert is just a single go routine call\nIn total that make 8 concurrent calls to go routines so I cannot see how this creates so\nmany threads, especially as each routine has a channel receive followed by a channel\nsend. so I would assume that the go routines become idle as soon as they try to\ncommunicate.  Each of the go routines does have a forever loop in it.\n\nIs that the cause?\n\nYou perhaps need to understand that I come from the occam style of parallel processing\nwhere we try to create as many fine grain processes as possible but know that once a\nprocess communicates it consumes no processor resource until the synchronised\ncommunication takes place.  Because I had used buffer-less channels I assumed the\nbehaviour would be similar.\n\nI presume this is not the case! but fail to see why and can find no documented reason\nfor why so many threads are created.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-05-16T14:15:48Z",
	"updated_at": "2014-12-08T10:44:16Z"
}
