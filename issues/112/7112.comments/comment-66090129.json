{
	"id": 66090129,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2 by **rasmus@mindplay.dk**:\n\n\u003cpre\u003e\u003e Any of these options would make Go a far more dynamic language\n\nI can't be sure what precisely \"dynamic\" means to a language expert, but I don't see the\nsecond option making the language more or less dynamic than it is already?\n\nYou can already obtain both types and fields \"by name\", as follows:\n\n\ttype MyType struct {\n\t\tMyField string\n\t}\n\n\tt := reflect.TypeOf((*MyType)(nil)).Elem() // 'MyType\n\t\n\tf, _ := t.FieldByName(\"MyField\") // 'MyType.MyField\n\nIt \"works\" - it's just cumbersome and error-prone.\n\nBut in a nutshell, that is all I'm proposing - syntactic sugar for the same thing, and\nsome lightweight, built-in types to represent those.\n\nI'm not asking for something that supports every type and every expression - in other\nwords, not asking for C# or LINQ, just for a type-safe way to reference what can only be\nreferenced as strings right now.\n\n\u003e you need to consider how they behave for every type and every expression\n\nFields really are the only problem - because structs are sets, and the current\nfacilities only provide (type safe) direct access to the root of those sets, not to\ntheir elements; that is really the only shortcoming I'm trying to address.\n\nThis can all be statically checked and resolved at compile-time - I'm not asking you to\nindex all types in-memory by name, I realize that would change the dynamic of the\nlanguage entirely.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-01-13T20:47:26Z",
	"updated_at": "2014-12-08T10:39:34Z"
}
