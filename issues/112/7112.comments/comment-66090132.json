{
	"id": 66090132,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003e\u003e I guess I don't understand how else this feature would be useful or applicable to\nanything else\n\nAll of your examples add new syntax.  There is no obvious reason why that syntax should\nnot work on types that are not structs.  To me the argument that the syntax is not\nuseful on other types is a reason to not adopt the syntax, since it is not orthogonal. \nBut if we do adopt the syntax, it has to do something.  It would make no sense to me to\nsay that 'Foo is an error if Foo is not a struct type; what would be the basis for that?\n\n\u003e In one sense, if MyType is a type of the kind struct, then MyType.MyField is a type of\nthe kind field\n\nOK, sure.  But the language supports naming types, and it does so for a good reason: you\ncan declare variables with the named type.  The language does not support naming fields\n(in the sense that you mean).  That's because there isn't much you can do with a named\nfield.  For example, you can not declare a variable as having the type \"field\".\n\nAs far as I can tell, you have a very specific use case: you want to obtain a value of\ntype reflect.StructField from something other than the existing mechanisms.  In order to\ndo this you are proposing quite broad ranging modifications to the language, but you\naren't following through on your proposal, you are just saying \"there is this new way to\nname dynamic language constructs, it's built into the language instead of calling the\nreflect package, but you can only use it for struct fields.\"\n\nA struct field fundamentally requires two concepts: a struct and a field.  You could\nwrite a function that does what you want today by taking two arguments, a struct and a\nfield (p := \u0026S{}; f := Field(p, \u0026p.F)).  Or you could do it using the existing language\nfeature unsafe.Offsetof (f := Field(S{}, unsafe.Offsetof(S{}.F)).  I agree that these\nare not especially pretty, but if you want pretty it needs to be orthogonal and clean,\nnot just specific for struct fields.\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-01-14T01:54:28Z",
	"updated_at": "2014-12-08T10:39:34Z"
}
