{
	"id": 66095429,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eIgnoring the typically-boring-and-ugly stuff, the additions are:\n\nba12:api bradfitz$ grep -v \"pkg syscall \" next.txt | grep -v \"pkg debug\"\npkg archive/tar, const TypeGNUSparse = 83\npkg archive/tar, const TypeGNUSparse ideal-char\npkg archive/tar, type Header struct, Xattrs map[string]string\npkg compress/gzip, method (*Reader) Reset(io.Reader) error\npkg crypto/tls, const CurveP256 = 23\npkg crypto/tls, const CurveP256 CurveID\npkg crypto/tls, const CurveP384 = 24\npkg crypto/tls, const CurveP384 CurveID\npkg crypto/tls, const CurveP521 = 25\npkg crypto/tls, const CurveP521 CurveID\npkg crypto/tls, func DialWithDialer(*net.Dialer, string, string, *Config) (*Conn, error)\npkg crypto/tls, func NewLRUClientSessionCache(int) ClientSessionCache\npkg crypto/tls, type ClientSessionCache interface { Get, Put }\npkg crypto/tls, type ClientSessionCache interface, Get(string) (*ClientSessionState,\nbool)\npkg crypto/tls, type ClientSessionCache interface, Put(string, *ClientSessionState)\npkg crypto/tls, type ClientSessionState struct\npkg crypto/tls, type Config struct, ClientSessionCache ClientSessionCache\npkg crypto/tls, type Config struct, CurvePreferences []CurveID\npkg crypto/tls, type ConnectionState struct, Version uint16\npkg crypto/tls, type CurveID uint16\npkg crypto/x509, func CreateCertificateRequest(io.Reader, *CertificateRequest,\ninterface{}) ([]uint8, error)\npkg crypto/x509, func ParseCertificateRequest([]uint8) (*CertificateRequest, error)\npkg crypto/x509, type CertificateRequest struct\npkg crypto/x509, type CertificateRequest struct, Attributes\n[]pkix.AttributeTypeAndValueSET\npkg crypto/x509, type CertificateRequest struct, DNSNames []string\npkg crypto/x509, type CertificateRequest struct, EmailAddresses []string\npkg crypto/x509, type CertificateRequest struct, Extensions []pkix.Extension\npkg crypto/x509, type CertificateRequest struct, ExtraExtensions []pkix.Extension\npkg crypto/x509, type CertificateRequest struct, IPAddresses []net.IP\npkg crypto/x509, type CertificateRequest struct, PublicKey interface{}\npkg crypto/x509, type CertificateRequest struct, PublicKeyAlgorithm PublicKeyAlgorithm\npkg crypto/x509, type CertificateRequest struct, Raw []uint8\npkg crypto/x509, type CertificateRequest struct, RawSubject []uint8\npkg crypto/x509, type CertificateRequest struct, RawSubjectPublicKeyInfo []uint8\npkg crypto/x509, type CertificateRequest struct, RawTBSCertificateRequest []uint8\npkg crypto/x509, type CertificateRequest struct, Signature []uint8\npkg crypto/x509, type CertificateRequest struct, SignatureAlgorithm SignatureAlgorithm\npkg crypto/x509, type CertificateRequest struct, Subject pkix.Name\npkg crypto/x509, type CertificateRequest struct, Version int\npkg crypto/x509/pkix, type AttributeTypeAndValueSET struct\npkg crypto/x509/pkix, type AttributeTypeAndValueSET struct, Type asn1.ObjectIdentifier\npkg crypto/x509/pkix, type AttributeTypeAndValueSET struct, Value\n[][]AttributeTypeAndValue\npkg encoding/asn1, method (ObjectIdentifier) String() string\npkg go/build, type Package struct, MFiles []string\npkg math/big, method (*Int) MarshalText() ([]uint8, error)\npkg math/big, method (*Int) UnmarshalText([]uint8) error\npkg math/big, method (*Rat) MarshalText() ([]uint8, error)\npkg math/big, method (*Rat) UnmarshalText([]uint8) error\npkg net, type Dialer struct, KeepAlive time.Duration\npkg net/http, const StateActive = 1\npkg net/http, const StateActive ConnState\npkg net/http, const StateClosed = 4\npkg net/http, const StateClosed ConnState\npkg net/http, const StateHijacked = 3\npkg net/http, const StateHijacked ConnState\npkg net/http, const StateIdle = 2\npkg net/http, const StateIdle ConnState\npkg net/http, const StateNew = 0\npkg net/http, const StateNew ConnState\npkg net/http, method (*Server) SetKeepAlivesEnabled(bool)\npkg net/http, method (ConnState) String() string\npkg net/http, type Client struct, Timeout time.Duration\npkg net/http, type ConnState int\npkg net/http, type Response struct, TLS *tls.ConnectionState\npkg net/http, type Server struct, ConnState func(net.Conn, ConnState)\npkg net/http, type Server struct, ErrorLog *log.Logger\npkg net/http, type Transport struct, TLSHandshakeTimeout time.Duration\npkg regexp/syntax, method (*Inst) MatchRunePos(int32) int\npkg regexp/syntax, method (*Inst) OnePassNext(int32) uint32\npkg regexp/syntax, method (*Prog) CompileOnePass() *Prog\npkg regexp/syntax, method (*Prog) OnePassPrefix() (string, bool, uint32)\npkg regexp/syntax, method (InstOp) String() string\npkg regexp/syntax, type Inst struct, Next []uint32\npkg regexp/syntax, var NotOnePass *Prog\npkg runtime/debug, func SetPanicOnFault(bool) bool\npkg runtime/debug, func WriteHeapDump(uintptr)\npkg sync, method (*Pool) Get() interface{}\npkg sync, method (*Pool) Put(interface{})\npkg sync, type Pool struct\npkg sync, type Pool struct, New func() interface{}\npkg testing, method (*B) RunParallel(func(*PB))\npkg testing, method (*B) SetParallelism(int)\npkg testing, method (*PB) Next() bool\npkg testing, type PB struct\npkg unicode, const Version = \"6.3.0\"\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-05-28T05:13:27Z",
	"updated_at": "2014-12-08T10:44:59Z"
}
