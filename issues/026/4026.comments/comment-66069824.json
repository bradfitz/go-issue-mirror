{
	"id": 66069824,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eI see it as less of a performance issue and more of a correctness\nissue. I feel I have a reasonable grasp of using sync.RWMutex\ncorrectly, but I was writing the code that rsc is referring to and I\ngot it wrong. I'd wager I'm better than the average Go programmer, so\nthat means the majority of programmers have a good chance of getting\nit wrong.\n\nI agree it's not a common use case. I don't know how to evaluate that.\nBut if you're using a RWMutex, it seems like converting a read lock to\na write lock (or vice versa) is not particularly strange, and so\nproviding a way to do it correctly seems like a worthwhile extension\nto the API.\n\nI don't feel particularly strongly either way, and am happy to defer\nto Russ and Dmitry.\n\n(I do think it's still possible to promote a read lock to a write lock\nand have sensible semantics: calling Promote would exclude future\n(read and write) locks, relinquish their existing read lock, and would\ngrab a write lock when the remaining read locks are released. Anyone\nelse doing a concurrent Promote would also relinquish their existing\nread lock, and would join a queue to get the write lock after the\nfirst guy releases his write lock. It just requires a bit of extra\naccounting.)\u003c/pre\u003e",
	"user": {
		"login": "dsymonds",
		"id": 31506,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-09-01T14:58:32Z",
	"updated_at": "2014-12-08T10:21:22Z"
}
