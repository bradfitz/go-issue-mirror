{
	"id": 51281529,
	"number": 4026,
	"state": "closed",
	"title": "sync: add atomic UnlockAndRLock to RWMutex",
	"body": "\u003cpre\u003eA couple of times I've run into a situation where I have RLocked an RWMutex and then\nneed to Lock it to modify the thing it is protecting, and then want to go back to an\nRLock to use it. A typical example is grabbing the RLock to examine cached data, then\nnoting it is stale and then needing to Lock to update it.\n\nUnfortunately the obvious approach (RUnlock + Lock, then modify, then Unlock + RLock) is\nracy because the condition that caused you to promote to a write lock may have changed\nbetween the Unlock and the RLock. This necessitates a loop structure.\n\nIf there were Promote and Demote methods then that shuffle could be avoided. The\nsemantics are:\n  - Promote is equivalent to mu.Lock() with a concurrent mu.RUnlock(), where the Lock happens-before the RUnlock.\n  - Demote is equivalent to mu.RLock() with a concurrent mu.Unlock(), where the RLock happens-before the Unlock.\u003c/pre\u003e",
	"user": {
		"login": "dsymonds",
		"id": 31506,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 22,
	"closed_at": "2014-12-08T10:21:20Z",
	"created_at": "2012-09-01T02:10:32Z",
	"updated_at": "2016-06-24T22:23:58Z"
}
