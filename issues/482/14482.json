{
	"id": 135871363,
	"number": 14482,
	"state": "open",
	"title": "cmd/compile: investigate more robust builtin.go mechanism",
	"body": "The package runtime export data embedded into the compiler via builtin.go intentionally differs from package runtime's actual export data.  This works because builtin.go's and runtime.a's export data do not overlap, so cmd/compile never notices that builtin.go does not actually match package runtime.\r\n\r\nCommit f28bbb776a050cc3edca was reverted (9877900c8c9c21704c0052c65e39216c6f400706) because it increased the amount of differing export data provided by builtin.go.  In isolation, this isn't problematic.  But @aclements discovered that adding a `sel *hselect` field to `runtime.sudog` caused runtime.a to start exporting a type definition for `runtime.scase`, which the compiler then *did* complain about not matching the `scase` type definition from builtin.go.\r\n\r\nMaking builtin.go match runtime.a 100% is one possible option, but it's non-trivial because it involves pulling in a lot more types.  It would also require builtin.go's package runtime to start using package unsafe (for unsafe.Pointer), which leads to its own problems because it's supposed to be a \"safe\" package.\r\n\r\nThis CL is about investigating ways to make cmd/compile more robust against conflicts between builtin.go and runtime.a.",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"created_at": "2016-02-23T21:27:58Z",
	"updated_at": "2016-02-24T00:00:15Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
