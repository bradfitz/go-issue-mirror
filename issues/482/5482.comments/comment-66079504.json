{
	"id": 66079504,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3 by **KevinCathcart**:\n\n\u003cpre\u003eDaniel:\n\n\"A field or method f of an anonymous field in a struct x is called promoted if x.f is a\nlegal selector that denotes that field or method f.\"\n\nThat defines promotion, but it does not say anything about whether a field gets promoted\nor not. It only says if the selector lookup rules result in choosing the same same field\nor method as in the nested struct, then we call that field/method  promoted. It is a\npassive definition.\n\nThe rest of that section states the additional rules for determining the method set of\nthe outer struct. It relies on the selector lookup rules working in conjunction with the\npassive promotion definition to ensure method in the method set has a unique name.\n\nOne can reach two consistent states from this. One is assuming that \"x.f\" is an illegal\nselector if f is non-exported, and is from a different package.\n\nThat conclusion is problematic, because the spec never actually says that. Indeed, the\nonly prohibitions in the spec on using non-exported identifiers from another package,\nare that:\na) they cannot be referenced as a qualified identifier, and\nb) that struct literals cannot initialize the value of non-exported fields. \n\nThe other option is for \"x.f\" to be interpreted abstractly. In that case, the f could be\nan non-exported method from some other package without any issue. One cannot refer to\nsuch a method in the concrete syntax, due to the identifier uniqueness rules, but that\nwould permit the method being promoted. As far as I can tell, that is exactly the\ninterpretation used by the compiler.\n\nI spent a long time thinking through these things prior to reporting this.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-05-27T16:06:05Z",
	"updated_at": "2014-12-08T10:29:45Z"
}
