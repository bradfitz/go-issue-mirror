{
	"id": 66091332,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eI think the spec on this point is actually complete and unambiguous, if a little hard to\nread.\n\n\"Within a package, package-level variables are initialized, and constant values are\ndetermined, according to order of reference: if the initializer of A depends on B, A\nwill be set after B. Dependency analysis does not depend on the actual values of the\nitems being initialized, only on their appearance in the source. A depends on B if the\nvalue of A contains a mention of B, contains a value whose initializer mentions B, or\nmentions a function that mentions B, recursively. It is an error if such dependencies\nform a cycle. If two items are not interdependent, they will be initialized in the order\nthey appear in the source, possibly in multiple files, as presented to the compiler.\"\n\n(The word \"mention\" needs a proper definition, but its meaning is clear enough as it\nrelates to this issue.)\n\nI think the compiler is correct to treat var x, y = f(), g() as equivalent to var x =\nf(); var y = g(), i.e. all 1:1 initializations of top-level vars should be treated as if\ndeclared separately.  (NB: var x, y = z() is quite different.)\n\nIn your example, the init graph contains these edges:\n  a-\u003ef-\u003eb-\u003eg\nwhich already gives us a total order.  This is a degenerate case since there are no\nincomparable pairs, so we don't even need to look at the lexical order of declaration. \nDoes anyone really think this should be an error?\u003c/pre\u003e",
	"user": {
		"login": "adonovan",
		"id": 5658175,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-02-13T15:21:40Z",
	"updated_at": "2014-12-08T10:40:43Z"
}
