{
	"id": 126350652,
	"body": "I think the argument is that it has been proven that appearance of predictability is not effective. For examples, search Github code with keywords like \"math/rand\" and \"password\", \"key\", or \"token\".\r\n\r\nIn terms of best-to-worst, what a person could do in a security/cryptographic context:\r\n\r\n1. Use crypto/rand. (Best by a big margin since it has an ongoing source of entropy unlike math/rand)\r\n2. Use math/rand but seed it with crypto/rand—unlikely anyone would do this because if they think to use crypto/rand then they probably wouldn't be using math/rand in this context to begin with.\r\n3. Use math/rand but seed it *once* with the current time—this bad because if you can guess when the app was launched (or force a restart), you can significantly reduce the brute forcing space. Anecdotally, most examples using math/rand where they should be using crypto/rand are doing this.\r\n4. Use math/rand but seed it with the current time every time a random number is needed—this is bad because you often have control of when the request is made so you can force a limit on the brute forcing space. Anecdotally, a moderate number of examples that were written without reference are doing this.\r\n5. Use math/rand without seeding it at all. Not extremely common but I found at least half a dozen examples on Github with some casual searching.\r\n\r\nPlease correct me if my ordering of these scenarios is wrong.\r\n\r\nWhat kind of information would help us make an informed decision here? Would a big dump of brutally-vulnerable codebases be helpful? Would a comparative analysis of what other languages are doing regarding seeding be helpful?\r\n\r\nI understand that renaming the package is not a viable solution for Go 1.x. Changing the default output of math/rand seems more of a blurry line regarding compatibility but I respect if this proposal is deemed too incompatible regardless of benefits.",
	"user": {
		"login": "shazow",
		"id": 6292,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-30T14:38:07Z",
	"updated_at": "2015-07-30T14:38:07Z"
}
