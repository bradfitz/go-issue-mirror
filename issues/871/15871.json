{
	"id": 157359915,
	"number": 15871,
	"state": "closed",
	"title": "proposal: add another argument to make and use it for concurrent maps",
	"body": "I'm unsure how to do this, as it said, all proposals must be submitted as a Go issue. First, a bit of background about my goals for this project.\r\n\r\nI am apart of an REU (Research Experience for Undergraduates), and for my research mentor and I decided on improving the Go language. For now, to start off (as it is the first, going on the second week), I am tasked with researching and extending the Go programming language, with my first task being to \"find a way to implement a new type\". Now, of course, after researching, I know now that adding a new type would break the Go specifications for compatibility (as a new keyword can break existing applications using those words as identifiers). First being is a concurrent map, which after more research (and asking around) I figured out how `make(...)` works, and how it transforms something like `make(map[string]int)` into `makemap(...)`.\r\n\r\nNow that the background is out of the way, on to what I wish to implement...\r\n\r\nI know (or rather think I do) that the compiler parses `make([]int, 5)` into a slice with a length of 5. I also know that `make([]int, 5, 5)` is as valid as the former. Hence, using some reasoning, I think that if I added another argument to `make` so that a second argument, or even third, it can be done without breaking compatibility. \r\n\r\nFor example:...\r\n\r\nNormal Map:\r\n\r\n`make(map[string]int)`\r\n\r\nConcurrent Map:\r\n\r\n`make(map[string]int, CONCURRENT) // CONCURRENT being some flag`\r\n\r\nThe above should not break any compatibility, no? \r\n\r\nThen, perhaps you can add even more things, such as...\r\n\r\nTree Map:\r\n\r\n`make(map[string]int, TREE)`\r\n\r\nEtc.\r\n\r\nNow, these solutions should not break compatibility, and can be used to implement and add more data structures to the built-in system. I.E, a Concurrent Map, Tree Map, and a normal Map can all be used with it's current interface, of course assuming that all of it's functions are implemented accordingly.\r\n\r\nI have read hashmap.go, and I definitely see a TON of low-level compiler optimizations, it's REALLY hard to read and has a lot of abstractions, but of course given a proof of concept for the concurrent map (and once again, the whole \"normal users normally don't need locks\" shouldn't apply since the extra flags are optional), then further optimizations can be implemented for them.\r\n\r\nMy particular role as a researcher is to determine if this is possible, and part of that is establishing a proof of concept. If I do end up implementing this proof of concept, would this proposal potentially be approved when finished?",
	"user": {
		"login": "theif519",
		"id": 4269990,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 12,
	"closed_at": "2016-05-29T23:00:12Z",
	"created_at": "2016-05-28T22:41:03Z",
	"updated_at": "2016-05-30T00:11:39Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	}
}
