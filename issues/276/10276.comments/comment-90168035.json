{
	"id": 90168035,
	"body": "Hi Josh.  I agree that go/loader is far from satisfactory.  There are a number of separate issues here.\r\n\r\n\r\n\u003e @randall77's frustrations with stringer in #10249.\r\n\r\nThe stringer tool has its own logic for loading a type-checked package from an import path.  For consistency with other tools it should probably use go/loader.  I don't know why it doesn't; most likely its author didn't know about go/loader.\r\n\r\nA second question is whether stringer should load the program from source or from export data.  I think source is the right answer, since it's the ground truth; the extra cost is small and infrequently paid.  Loading export data assumes that the user did a 'go install' recently (unlikely) and that the tool author guessed correct the right compiler.\r\n\r\n\r\n\u003e The author of a tool picks an importer, but it is the user of a tool that needs to do the dependency resolution. What happens when the author picks gcimporter but the user uses gccgo?\r\n\r\nI agree that each tool should not make the choice of which kind of import data to use; it should be deduced from the workspace state, or offered to the user as a standard flag.  Using source where possible finesses the problem.\r\n\r\n\r\n\u003e While working on CL 7360, I had to use cmd/internal/gc but ./cmd/?g.\r\n\r\nI'm not sure what you meant by this.  Could you clarify?\r\n\r\n\r\n\u003e perhaps go/loader could do something like: automatically start with gcimporter (if the object files aren't stale), then fall back to a source importer, and then fall back to other importers (gccgo, llgo, etc.)?\r\n\r\nThis would mean duplicating yet more of the go/build logic (computeStale et al) in go/loader, but perhaps it would be worthwhile if it would simplify the configuration API.  Ideally you would simply tell the loader which packages must be loaded from source and it would take care of the rest.\r\n\r\nTo date, most of go/loader's clients want source position information for dependencies, which is not recorded in the export data, so there's been little demand for the export data use case.\r\n\r\n\r\n\u003e And provide hooks so that advanced users can insert their own importers (as I presume Google does internally).\r\n\r\nWe already have such a hook, but users shouldn't have to think that hard to get sensible behavior.  There are too many moving parts involved in correctly loading a program.\r\n",
	"user": {
		"login": "alandonovan",
		"id": 8433140,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-06T17:42:19Z",
	"updated_at": "2015-04-06T17:42:19Z"
}
