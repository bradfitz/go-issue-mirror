{
	"id": 64819280,
	"number": 10276,
	"state": "closed",
	"title": "x/tools/go/loader: importers should just work",
	"body": "Apologies in advance that this is vague.\r\n\r\nSymptoms of the problem:\r\n\r\n* @randall77's frustrations with stringer in #10249.\r\n* While working on CL 7360, I had to use `cmd/internal/gc` but `./cmd/?g`.\r\n* The author of a tool picks an importer, but it is the user of a tool that needs to do the dependency resolution. What happens when the author picks `gcimporter` but the user uses gccgo?\r\n* I personally use go/build instead of go/loader in my little one-off tools because go/loader doesn't ever seem to do what I mean but go/build always does. (And I haven't invested the time to dig into why.)\r\n\r\nI'm not familiar enough with go/loader to make a concrete detailed suggestion, but perhaps go/loader could do something like: automatically start with gcimporter (if the object files aren't stale), then fall back to a source importer, and then fall back to other importers (gccgo, llgo, etc.)? And provide hooks so that advanced users can insert their own importers (as I presume Google does internally).\r\n\r\n/cc @randall77 @alandonovan \r\n\r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 7,
	"closed_at": "2015-04-17T18:57:41Z",
	"created_at": "2015-03-27T18:05:59Z",
	"updated_at": "2016-06-25T02:04:12Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
