{
	"id": 160498786,
	"number": 16072,
	"state": "closed",
	"title": "crypto/tls: server should send empty server_name extension when using SNI",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\n```\r\ngo version go1.6.2 darwin/amd64\r\n```\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/frschroeder/gopath\"\r\nGORACE=\"\"\r\nGOROOT=\"/Users/frschroeder/go1.6.2\"\r\nGOTOOLDIR=\"/Users/frschroeder/go1.6.2/pkg/tool/darwin_amd64\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n3. What did you do?\r\n\r\nSample app: https://play.golang.org/p/Tk9CR4BUyU\r\n\r\na) Save `certPEM` from the sample app into a file, e.g. `cert.pem`\r\nb) Start WireShark and capture traffic on `lo` or `lo0`\r\nc) Set a filter `tcp.port == 4433`\r\nd) Goto `Preferences -\u003e Protocols -\u003e SSL` and add the `cert.pem` to the RSA key list for `127.0.0.1:4433` protocol `tcp`\r\n\r\nRun the sample program from  as follows:\r\n\r\n1st terminal: `go run main.go -server`\r\n2nd terminal: `go run main.go`\r\n\r\nThis will start a server in the first terminal and a client in the second terminal which executes a SNI handshake.\r\n\r\nWireShark will capture and decrypt the traffic\r\n\r\n4. What did you expect to see?\r\n\r\nA Server Hello with an empty `server_name` extension, e.g.\r\n\r\n```\r\nSecure Sockets Layer\r\n    TLSv1.2 Record Layer: Handshake Protocol: Server Hello\r\n        Content Type: Handshake (22)\r\n        Version: TLS 1.2 (0x0303)\r\n        Length: 53\r\n        Handshake Protocol: Server Hello\r\n            Handshake Type: Server Hello (2)\r\n            Length: 49\r\n            Version: TLS 1.2 (0x0303)\r\n            Random\r\n            Session ID Length: 0\r\n            Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)\r\n            Compression Method: null (0)\r\n            Extensions Length: 9\r\n            Extension: server_name\r\n                Type: server_name (0x0000)\r\n                Length: 0\r\n            Extension: renegotiation_info\r\n                Type: renegotiation_info (0xff01)\r\n                Length: 1\r\n                Renegotiation Info extension\r\n                    Renegotiation info extension length: 0\r\n```\r\n\r\n5. What did you see instead?\r\n\r\n```\r\nSecure Sockets Layer\r\n    TLSv1.2 Record Layer: Handshake Protocol: Server Hello\r\n        Content Type: Handshake (22)\r\n        Version: TLS 1.2 (0x0303)\r\n        Length: 49\r\n        Handshake Protocol: Server Hello\r\n            Handshake Type: Server Hello (2)\r\n            Length: 45\r\n            Version: TLS 1.2 (0x0303)\r\n            Random\r\n            Session ID Length: 0\r\n            Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)\r\n            Compression Method: null (0)\r\n            Extensions Length: 5\r\n            Extension: renegotiation_info\r\n                Type: renegotiation_info (0xff01)\r\n                Length: 1\r\n                Renegotiation Info extension\r\n                    Renegotiation info extension length: 0\r\n```\r\n\r\nThe extension section of the ServerHello does not contain a `server_name` extension.\r\n\r\nWhen you make a request with an SNI header the client sends a client hello with a server name extension. [RFC 6606 Section 3](https://tools.ietf.org/html/rfc6066#section-3) states:\r\n\r\n```\r\n   A server that receives a client hello containing the \"server_name\"\r\n   extension MAY use the information contained in the extension to guide\r\n   its selection of an appropriate certificate to return to the client,\r\n   and/or other aspects of security policy.  In this event, the server\r\n   SHALL include an extension of type \"server_name\" in the (extended)\r\n   server hello.  The \"extension_data\" field of this extension SHALL be\r\n   empty.\r\n```\r\n\r\nWe found this when debugging a TLS connection from the AWS API GW to a go server instance.\r\n\r\nI am not sure whether this is a real issue or something that can be ignored. In any case it seems to be mentioned in the RFC and I couldn't find any mention in the issues. So even if it doesn't get addressed people can still find out why. \r\n\r\nI realize that you prefer discussion first over code but the following patch added the `server_name` extension:\r\n\r\n```patch\r\ndiff --git a/src/crypto/tls/handshake_messages.go b/src/crypto/tls/handshake_messages.go\r\nindex 111ce53..34f8eaa 100644\r\n--- a/src/crypto/tls/handshake_messages.go\r\n+++ b/src/crypto/tls/handshake_messages.go\r\n@@ -490,6 +490,7 @@ type serverHelloMsg struct {\r\n \tcipherSuite         uint16\r\n \tcompressionMethod   uint8\r\n \tnextProtoNeg        bool\r\n+\tserverName          bool\r\n \tnextProtos          []string\r\n \tocspStapling        bool\r\n \tscts                [][]byte\r\n@@ -545,6 +546,9 @@ func (m *serverHelloMsg) marshal() []byte {\r\n \t\tnextProtoLen += len(m.nextProtos)\r\n \t\textensionsLength += nextProtoLen\r\n \t}\r\n+\tif m.serverName {\r\n+\t\tnumExtensions++\r\n+\t}\r\n \tif m.ocspStapling {\r\n \t\tnumExtensions++\r\n \t}\r\n@@ -614,6 +618,11 @@ func (m *serverHelloMsg) marshal() []byte {\r\n \t\t\tz = z[1+l:]\r\n \t\t}\r\n \t}\r\n+\tif m.serverName {\r\n+\t\tz[0] = byte(extensionServerName \u003e\u003e 8)\r\n+\t\tz[1] = byte(extensionServerName \u0026 0xff)\r\n+\t\tz = z[4:]\r\n+\t}\r\n \tif m.ocspStapling {\r\n \t\tz[0] = byte(extensionStatusRequest \u003e\u003e 8)\r\n \t\tz[1] = byte(extensionStatusRequest)\r\ndiff --git a/src/crypto/tls/handshake_server.go b/src/crypto/tls/handshake_server.go\r\nindex e16cddc..66a9c02 100644\r\n--- a/src/crypto/tls/handshake_server.go\r\n+++ b/src/crypto/tls/handshake_server.go\r\n@@ -122,6 +122,7 @@ func (hs *serverHandshakeState) readClientHello() (isResume bool, err error) {\r\n \tc.haveVers = true\r\n\r\n \ths.hello = new(serverHelloMsg)\r\n+\ths.hello.serverName = len(hs.clientHello.serverName) \u003e 0\r\n\r\n \tsupportedCurve := false\r\n \tpreferredCurves := config.curvePreferences()\r\n```\r\n",
	"user": {
		"login": "magiconair",
		"id": 229005,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "agl",
		"id": 21203,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2016-08-17T23:22:42Z",
	"created_at": "2016-06-15T19:03:32Z",
	"updated_at": "2016-08-17T23:22:43Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
