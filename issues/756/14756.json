{
	"id": 139979973,
	"number": 14756,
	"state": "closed",
	"title": "encoding/json: JSON Tags with Profile Support",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n### 1. What version of Go are you using (`go version`)?\r\n```\r\ngo version go1.6 darwin/amd64\r\n```\r\n\r\n### 2. What operating system and processor architecture are you using (`go env`)?\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/akutz/Projects/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/Users/akutz/.go/1.6\"\r\nGOTOOLDIR=\"/Users/akutz/.go/1.6/pkg/tool/darwin_amd64\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n### 3. What do you want to do?\r\nCurrently there's no way to influence how a type's JSON tags are utilized during the marshal process beyond the standard omit, name, and omitempty characteristics. I've run into at least one instance where it would be ideal to omit certain data sometimes and not others depending upon the nature of how the data will be transported or stored. \r\n\r\nWhile there are options available such as a terminating `struct` inheriting from multiple `struct`s, whereby the parent types are categorized by the nature of the data they include, this is not a scalable or even elegant solution.\r\n\r\nI propose the notion of profile support for JSON tags. Much like [Spring Profiles](https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html), this feature will enable a more dynamic, but still declarative, means of influencing a runtime process. And it will do so in a very succinct and elegant manner.\r\n\r\nTake the following type:\r\n\r\n```\r\ntype Person struct {\r\n\tFirstName      string `json:\"firstName\"`\r\n\tLastName       string `json:\"lastName\"`\r\n\tPassphraseHash string `json:\"passphraseHash\"`\r\n}\r\n```\r\n\r\nThere may be cases for the above data type where the passphrase hash *should* be included in the marshaled JSON, and there may be cases where it should not. A simple solution is to add support for profiles at the JSON tag scope. For example:\r\n\r\n```\r\ntype Person struct {\r\n\tFirstName string `json:\"firstName\"`\r\n\tLastName  string `json:\"lastName\"`\r\n\r\n\t// PassphraseHash should only be marshaled to JSON if the\r\n\t// \"secure\" profile is used.\r\n\tPassphraseHash string `json:\"-\" json.secure:\"passphraseHash\"`\r\n}\r\n```\r\n\r\nAs you can see, now the default behavior is to omit the `PassphraseHash` field when marshaling this type to JSON unless the `secure` profile is explicitly activated. \r\n\r\nI've provided a complete example on the [Go playground](https://play.golang.org/p/t5shkJvfWj).`\r\n\r\nI hope you'll agree that the implementation of the described feature has a value-to-cost ratio which makes it an ideal candidate for inclusion in the \"encoding/json\" package. \r\n\r\nPlease let me know if you have any questions or concerns. I'm more than happy to go ahead and submit a patch to go along with this proposed feature in order to progress the discussion to the next phase. Thank you! \r\n",
	"user": {
		"login": "akutz",
		"id": 101085,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 5,
	"closed_at": "2016-03-10T23:52:17Z",
	"created_at": "2016-03-10T19:00:58Z",
	"updated_at": "2016-03-10T23:52:17Z"
}
