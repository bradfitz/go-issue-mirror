{
	"id": 108418561,
	"number": 12756,
	"state": "closed",
	"title": "cmd/doc: output can be hard to read",
	"body": "This is obviously subjective. Kindly close it if people disagree.\r\n\r\nUsing [59129c6a9356af5831b3f0a4bc581ba6abf26c8a](https://github.com/golang/go/tree/59129c6a9356af5831b3f0a4bc581ba6abf26c8a).\r\n\r\n---\r\n\r\nWhat I see:\r\n```\r\n$ go doc io.read\r\nfunc (l *LimitedReader) Read(p []byte) (n int, err error)\r\nfunc (r *PipeReader) Read(data []byte) (n int, err error)\r\n\r\n    Read implements the standard Read interface: it reads data from the pipe,\r\n    blocking until a writer arrives or the write end is closed. If the write end\r\n    is closed with an error, that error is returned as err; otherwise err is\r\n    EOF.\r\nfunc (s *SectionReader) Read(p []byte) (n int, err error)\r\n```\r\n\r\nWhat I expect:\r\n```\r\n$ go doc io.read\r\nfunc (l *LimitedReader) Read(p []byte) (n int, err error)\r\nfunc (r *PipeReader) Read(data []byte) (n int, err error)\r\n    Read implements the standard Read interface: it reads data from the pipe,\r\n    blocking until a writer arrives or the write end is closed. If the write end\r\n    is closed with an error, that error is returned as err; otherwise err is\r\n    EOF.\r\n\r\nfunc (s *SectionReader) Read(p []byte) (n int, err error)\r\n```\r\n\r\nIn this situation, it looks like the function description applies to SectionReader.Read, when it actually applies to PipeReader.Read\r\n\r\n---\r\n\r\nWhat I see:\r\n```\r\n$ go doc io\r\npackage io // import \"io\"\r\n\r\nPackage io provides basic interfaces to I/O primitives. Its primary job is\r\nto wrap existing implementations of such primitives, such as those in\r\npackage os, into shared public interfaces that abstract the functionality,\r\nplus some other related primitives.\r\n\r\nBecause these interfaces and primitives wrap lower-level operations with\r\nvarious implementations, unless otherwise informed clients should not assume\r\nthey are safe for parallel execution.\r\nvar EOF = errors.New(\"EOF\")\r\nvar ErrClosedPipe = errors.New(\"io: read/write on closed pipe\")\r\nvar ErrNoProgress = errors.New(\"multiple Read calls return no data or error\")\r\n...\r\n```\r\n\r\nWhat I expect:\r\n```\r\n$ go doc io\r\npackage io // import \"io\"\r\n\r\nPackage io provides basic interfaces to I/O primitives. Its primary job is\r\nto wrap existing implementations of such primitives, such as those in\r\npackage os, into shared public interfaces that abstract the functionality,\r\nplus some other related primitives.\r\n\r\nBecause these interfaces and primitives wrap lower-level operations with\r\nvarious implementations, unless otherwise informed clients should not assume\r\nthey are safe for parallel execution.\r\n\r\nvar EOF = errors.New(\"EOF\")\r\nvar ErrClosedPipe = errors.New(\"io: read/write on closed pipe\")\r\nvar ErrNoProgress = errors.New(\"multiple Read calls return no data or error\")\r\n...\r\n```\r\n\r\nIn this situation, there is no newline between the package description and the package contents. Thus, it is hard for the human reader to quickly identify what components exist in the package.\r\n",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2015-09-28T16:27:53Z",
	"created_at": "2015-09-25T22:36:27Z",
	"updated_at": "2015-09-28T16:27:53Z"
}
