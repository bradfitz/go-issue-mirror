{
	"id": 171546184,
	"number": 16756,
	"state": "open",
	"title": "x/tools/cmd/guru: go-guru-build-tags in go-guru.el does not work",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\n```\r\ngo version go1.7 darwin/amd64\r\n```\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/niels/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/bb/xxdvfvm103n8p4vktz66d7d40000gn/T/go-build040892158=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\nI'm using `go-guru` with Emacs 24.5.1 from [emacsformacosx.com](https://emacsformacosx.com/), here's my `M-x version RET` output:\r\n\r\n```\r\nGNU Emacs 24.5.1 (x86_64-apple-darwin13.4.0, NS apple-appkit-1265.21) of 2015-04-10 on builder10-9.porkrind.org\r\n```\r\n\r\n3. What did you do?\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n\r\n- Open Emacs with `go-guru.el` from [this commit](https://github.com/golang/tools/blob/92480e476063dbeb161fff66c62da6e55c10310a/cmd/guru/go-guru.el) loaded\r\n- Type `M-x customize-group RET go-guru RET`\r\n- Type `M-x eval-expression RET (setq go-guru-build-tags \"one\") RET`\r\n- Type `M-x toggle-debug-on-error RET`\r\n- Run any go-guru command that calls `go-guru--command`\r\n\r\n4. What did you expect to see?\r\n\r\nNormal `guru` output.\r\n\r\n5. What did you see instead?\r\n\r\nThe following stacktrace is produced:\r\n\r\n```\r\nDebugger entered--Lisp error: (wrong-type-argument sequencep 111)\r\n  mapconcat(identity \"one\" \",\")\r\n  (format \"-tags=%s\" (mapconcat (quote identity) go-guru-build-tags \",\"))\r\n  eval((format \"-tags=%s\" (mapconcat (quote identity) go-guru-build-tags \",\")) nil)\r\n  eval-expression((format \"-tags=%s\" (mapconcat (quote identity) go-guru-build-tags \",\")) nil)\r\n  call-interactively(eval-expression nil nil)\r\n  command-execute(eval-expression)\r\n```\r\n\r\nThis seems to have been broken by [this commit](https://github.com/golang/tools/commit/9ae7e1769c8df0883c58182c2a555089bed55e31#diff-676c3e607c54e9f2a2a5b566eafcc730).  Note that the stacktrace is only produced if `go-guru-build-tags` is a non-empty string, which explains why this bug was not immediately noticed.\r\n\r\nI see a few possible solutions.\r\n\r\n1. Change the following line in `go-guru--command` from\r\n\r\n```\r\n(format \"-tags=%s\" (mapconcat 'identity go-guru-build-tags \",\"))\r\n```\r\n\r\nback to just\r\n\r\n```\r\n\"-tags\" go-guru-build-tags\r\n```\r\n\r\nIf choosing this solution it would probably be good to expand the docstring for `go-guru-build-tags` to indicate that the value must be comma-separated when including multiple build tags.\r\n\r\n2. Change the declaration for `go-guru-build-tags` to a list of strings\r\n\r\n```\r\n(defcustom go-guru-build-tags '()\r\n  \"Build tags passed to guru.\"\r\n  :type '(repeat string)\r\n  :group 'go-guru)\r\n```\r\n\r\nand leave `go-guru--command` as it currently is.  This solution seems better except that it would break anyone currently setting `go-guru-build-tags` as a string.  Therefore, I'm not sure which one should be preferred.\r\n\r\n/cc @alandonovan, @dominikh",
	"user": {
		"login": "nwidger",
		"id": 486290,
		"type": "User",
		"site_admin": false
	},
	"comments": 0,
	"created_at": "2016-08-17T00:04:35Z",
	"updated_at": "2016-09-06T15:34:14Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
