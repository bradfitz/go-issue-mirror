{
	"id": 51281108,
	"number": 3756,
	"state": "closed",
	"title": "language: support explicit conversion from []A to []B if A is assignable to B",
	"body": "\u003cpre\u003eA slice []A is not assignable to []B, even if A is assignable to B, for reasons\ndiscussed here:\n  \u003ca href=\"https://groups.google.com/forum/#\"\u003ehttps://groups.google.com/forum/#\u003c/a\u003e!searchin/golang-nuts/slice$20assign|sort:relevance/golang-nuts/Il-tO1xtAyE/jw0-loqeAdEJ\n\nIt's easy enough to convert []A to []B with a few lines of code, of course.  But this\nfriction gets in the way of writing functions that operate on slices of types that\nimplement common interfaces.\n\nI propose Go support the syntax ([]B)([]A) (or []B([]A), if possible) to automate this\nconversion.  This conversion is explicit, not implicit, so it's clear in the program\nthat this expansion is happening.\n\nFor example, consider this function:\n// Join joins the elements of a using sep, formatting each element of a as %v would.\nfunc Join(sep string, a ...interface{}) string\n\nIf the caller has []time.Time, he or she must first convert this to []interface{} to\ncall this function.  With this conversion syntax, the caller can write:\n  times := []time.Time{ t1, t2, t3 }\n  s := Join(\u0026quot;,\u0026quot;, ([]interface{})(times)...)\u003c/pre\u003e",
	"user": {
		"login": "Sajmani",
		"id": 9734877,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "LanguageChange"
		}
	],
	"comments": 5,
	"closed_at": "2014-12-08T10:19:51Z",
	"created_at": "2012-06-19T00:36:44Z",
	"updated_at": "2016-06-24T22:20:38Z"
}
