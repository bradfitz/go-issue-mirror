{
	"id": 73777861,
	"body": "goimports is a tool to turn almost-valid programs into more-valid programs, so I think this is in scope. See also: https://github.com/sqs/goreturns\r\n\r\nI actually had a conversation with @sqs about whether we should make goimports pluggable so people could add their own passes. But then do we link them all in? And then does it have a config file so people can enable/disable certain passes? Or is the bar only that non-annoying/usually-mostly-correct ones go in?\r\n\r\nThis is what I wanted to discuss today in our weekly meeting, but we didn't get to it in time.\r\n\r\nI don't know where the line is, but I think this composite literal-fleshing-out thing isn't crossing the line.\r\n\r\nI agree with @crawshaw that this is the best of both worlds: it lets the author write a program where they know what they meant, but it transforms it into one that's more readable (with the types included), which is why in the Go 1 release meeting when @rsc had prototyped more type elision, we looked at before \u0026 after code samples for a bunch of composite literals and pretty much everybody agreed that the version including more types was more readable, which is why the language requires you to write them in all but some of the most obvious cases.  But if the programmer knows what they're doing, a program can make it more explicit.",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-10T20:31:58Z",
	"updated_at": "2015-02-10T20:31:58Z"
}
