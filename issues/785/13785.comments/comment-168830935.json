{
	"id": 168830935,
	"body": "@minux I think there is a CSPRNG - see `src/crypto/rand/rand_unix.go:85`.\r\n\r\nHowever, `altGetRandom` sources such as Linux's `getrandom(2)` are used directly rather than fed through the CSPRNG. This may not be the best choice from a performance and reliability perspective. I'd be interested to hear more about the tradeoffs to consider in Go specifically. Most C crypto guides I've read suggest that mature applications use userland CSPRNGs that are seeded with OS-supplied entropy sources rather than using data directly from the OS sources.\r\n\r\nI've drafted a patch that uses OpenBSD's `getentropy(2)` through the CSPRNG rather than querying it directly. I'll share once I've verified this with [`ktrace(1)`](http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man1/ktrace.1) and [`kdump(1)`](http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man1/kdump.1).",
	"user": {
		"login": "mmcco",
		"id": 1668979,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-04T22:28:27Z",
	"updated_at": "2016-01-04T22:28:27Z"
}
