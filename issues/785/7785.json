{
	"id": 51287199,
	"number": 7785,
	"state": "closed",
	"title": "spec: closed channel behaviour clarifications",
	"body": "by **glyn.normington**:\n\n\u003cpre\u003eThere are some places in the Go specification where the behaviour of closed channels\ncould be described more clearly.\n\nThe Channel types section says:\n\n    A channel may be closed with the built-in function close; the multi-valued assignment form of the\n    receive operator tests whether a channel has been closed.\n\nThe last statement isn't true until the channel becomes empty. If you use a multi-valued\nassignment to receive from a non-empty, closed channel, you won't be able to tell the\nchannel has been closed (as you'll successfully receive the next value in the channel).\n\nThe Receive operator section says: \n\n    A receive operation on a closed channel can always proceed immediately, yielding the element\n    type's zero value.\n\nAgain, this is only true of a closed, empty channel. A closed, non-empty channel will\nyield the next value in the channel.\n\nA little later, the \u0026quot;comma ok\u0026quot; form of receive is described:\n\n    The value of ok is true if the value received was delivered by a successful send operation to\n    the channel, or false if it is a zero value generated because the channel is closed and empty. \n\nThis could perhaps mention that ok will be true in the case of a non-empty, closed\nchannel.\n\nThat said, the section on Close is unambiguous:\n\n    For a channel c, the built-in function close(c) records that no more values will be sent on the\n    channel. It is an error if c is a receive-only channel. Sending to or closing a closed channel\n    causes a run-time panic. Closing the nil channel also causes a run-time panic. After calling\n    close, and after any previously sent values have been received, receive operations will return\n    the zero value for the channel's type without blocking. The multi-valued receive operation\n    returns a received value along with an indication of whether the channel is closed.\n\nSo when the specification is read as whole, there isn't a problem. But perhaps the\nwording of the \u0026quot;Channel types\u0026quot; and \u0026quot;Receive operator\u0026quot; sections could\nbe improved so as not to give the wrong impression.\n\n(This issue was aired first here:\n\u003ca href=\"https://groups.google.com/forum/#\"\u003ehttps://groups.google.com/forum/#\u003c/a\u003e!searchin/Golang-nuts/normington/golang-nuts/QjBhvNsia4I/YDDaAzNEHC4J)\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2014-12-08T10:43:08Z",
	"created_at": "2014-04-15T09:35:53Z",
	"updated_at": "2016-06-25T01:32:18Z",
	"milestone": {
		"id": 1067211,
		"number": 17,
		"title": "Go1.3"
	}
}
