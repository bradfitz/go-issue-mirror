{
	"id": 123607628,
	"body": "I just hit this issue as well. Does \"Unplanned\" mean this is unlikely to get worked on?\r\n\r\nI'm also including some information on my use-case, in case that helps.\r\n\r\nI'm trying to transformed loglines containing key-value pairs, to redact any string values. So for example:\r\n```\r\nname: \"Joe\", last_name: \"Bloggs\", age: 5, nickname: \"Jogs\" }\r\n```\r\nmight become:\r\n```\r\nname: \"SOME_HASH\", last_name: \"SOME_HASH\", age: 5, $comment: \"do not redact me\", nickname: \"SOME_HASH\" }\r\n```\r\nI only want to target quoted strings that are followed by either `,` (comma) or ` }` (closing curly-braces), and I also want to ignore any `$comment` fields.\r\n\r\nI know that Go's regexp doesn't have lookahead/lookbehinds, which means I can't check for the above. using those. That restricts me somewhat. However, I figured I'd just capture everything using a regex like this:\r\n\r\n```\r\nquoted_string_regex, _ := regex.Compile(`(\\$comment: )?\"([^\"]*)\"[,| }]`)\r\n```\r\nand then check the actual subgroups to see if $comment was there, and also grab out the comma or curly-brace, and put that back on at the end.\r\n\r\nHowever, I'm using `ReplaceAllStringFunc` which only gives you the entire match - so it seem like I either need to do a second regex inside my callback function, or I need to do a bunch of contains/splits/ends-with etc.\r\n\r\n(Obviously, if I've missed something obvious that is available in Go, please feel free to correct the above).",
	"user": {
		"login": "victorhooi",
		"id": 243499,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-22T08:01:41Z",
	"updated_at": "2015-07-22T08:01:51Z"
}
