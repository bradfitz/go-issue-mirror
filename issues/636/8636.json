{
	"id": 51288475,
	"number": 8636,
	"state": "closed",
	"title": "runtime/cgo: scheduler blocked with goroutines",
	"body": "\u003cpre\u003eHi there,\n\nI have a quite big app, while my code works and is very fast in production, when I ran\nmy benchmark suite results 1000x worse. So I'm not sure if I'm doing something wrong or\nis a know problem.\n\nThere is a thread on google groups:\n\u003ca href=\"https://groups.google.com/forum/#\"\u003ehttps://groups.google.com/forum/#\u003c/a\u003e!topic/golang-nuts/9RqGvk-b3Ow\n\nTested on:\n\ngo version go1.3.1 darwin/amd64\ngo version go1.3.1 linux/amd64\n\nHere a simplified version of the code:\n\nfunc main() {\n        runtime.GOMAXPROCS(0)\n\n        // prepare communication protocol\n        urls := make(chan string)\n        wg := new(sync.WaitGroup)\n\n        // fire a bunch of workers\n        for i := 0; i \u0026lt; env.MaxProcs; i++ {\n                wg.Add(1)\n                go func(i int) {\n                        fmt.Printf(\u0026quot;starting worker %d...\\n\u0026quot;, i)\n                        defer wg.Done()\n                        for url := range urls {\n                                C.resize_image(url) // takes around 30ms\n                        }\n                }(i)\n        }\n\n        // db connection (native go)....\n\n        var url string\n        for i := 0; iter.Scan(\u0026amp;url) \u0026amp;\u0026amp; i \u0026lt; 1e4; i++ { // Scan takes around 8ms\n                // with a time.Sleep(10 * time.Millisecond) results are 1000x better!\n                urls \u0026lt;- url\n        }\n        err = iter.Close()\n\n        // wait\n        close(urls)\n        wg.Wait()\n}\n\nWhen I run pprof (darwin):\n\n3512  76.4%  76.4%     3512  76.4% runtime.mach_semaphore_wait\n     968  21.1%  97.5%      968  21.1% runtime.cgocall\n     107   2.3%  99.8%      107   2.3% runtime.kevent\n       3   0.1%  99.9%        3   0.1% runtime.usleep\n       2   0.0%  99.9%        2   0.0% syscall.Syscall\n       1   0.0%  99.9%        1   0.0% math/rand.Float64\n       1   0.0% 100.0%        1   0.0% runtime.MHeap_LookupMaybe\n       1   0.0% 100.0%        1   0.0% runtime.MSpan_Sweep\n       1   0.0% 100.0%        1   0.0% runtime.memclr\n       0   0.0% 100.0%        6   0.1% GC\n       0   0.0% 100.0%     3618  78.7% System\n       0   0.0% 100.0%      968  21.1% github.com/daddye/vips.Resize\n       0   0.0% 100.0%       28   0.6% github.com/daddye/vips._Cfunc_im_close\n       0   0.0% 100.0%      278   6.0% github.com/daddye/vips._Cfunc_vips_affine_interpolator\n       0   0.0% 100.0%       18   0.4% github.com/daddye/vips._Cfunc_vips_colourspace_0\n       0   0.0% 100.0%       43   0.9% github.com/daddye/vips._Cfunc_vips_copy_0\n       0   0.0% 100.0%      258   5.6% github.com/daddye/vips._Cfunc_vips_embed_extend\n       0   0.0% 100.0%       35   0.8% github.com/daddye/vips._Cfunc_vips_image_new\n       0   0.0% 100.0%       16   0.3% github.com/daddye/vips._Cfunc_vips_jpegload_buffer_seq\n       0   0.0% 100.0%       15   0.3% github.com/daddye/vips._Cfunc_vips_jpegload_buffer_shrink\n\nWhen I run pprof (linux):\n\nTotal: 6250 samples\n    6188  99.0%  99.0%     6191  99.1% runtime.cgocall\n      21   0.3%  99.3%       21   0.3% runtime.usleep\n       7   0.1%  99.5%        7   0.1% retake\n       7   0.1%  99.6%        7   0.1% runtime.rtsigprocmask\n       4   0.1%  99.6%        4   0.1% syscall.Syscall\n       3   0.0%  99.7%        3   0.0% runtime.epollwait\n       3   0.0%  99.7%        3   0.0% runtime.futex\n       2   0.0%  99.8%        2   0.0% ExternalCode\n       2   0.0%  99.8%        2   0.0% runtime.memclr\n       1   0.0%  99.8%        2   0.0% exitsyscallfast\n       1   0.0%  99.8%     6192  99.1% github.com/daddye/vips.Resize\n       1   0.0%  99.8%        1   0.0% github.com/gocql/gocql.(*frame).readBytes\n       1   0.0%  99.9%        1   0.0% runqgrab\n       1   0.0%  99.9%        1   0.0% runtime.atomicload64\n       1   0.0%  99.9%        1   0.0% runtime.cas\n       1   0.0%  99.9%        1   0.0% runtime.entersyscall\n       1   0.0%  99.9%        1   0.0% runtime.fastrand1\n       1   0.0%  99.9%        1   0.0% runtime.noteclear\n       1   0.0% 100.0%        1   0.0% runtime.purgecachedstats\n       1   0.0% 100.0%        1   0.0% runtime.unlock\n\n\nThings I tried:\n\n1. Use another CGO binding: image magick - Same results - Both libraries are thread safe.\n2. Use runtime.Gosched() (tried to put it in different places) - Same\n3. Use runtime.LockOSThread() (tried to put it in different places) - Same\n4. Add a time.Sleep(10*time.Milliseconds) - the commented line\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; I get back good results!\n5. Test on linux (ubuntu lts 12) - Same and pretty much same pprof\n6. Remove CGO and use a native call - Very fast. \n7. Avoid channels just `go func()` - Very fast!\n8. Set GOMAXPROCS 1 - Very fast!\n9. Remove the db connection just use a slice - Same\n10. Use buffered channels - Worse\n\n\nTo explain more about point 4. it seems that if we add few milliseconds between each\nrequest\n\n        for i := 0; iter.Scan(\u0026amp;url) \u0026amp;\u0026amp; i \u0026lt; 1e4; i++ { // Scan takes around 8ms\n                time.Sleep(10 * time.Millisecond)\n                urls \u0026lt;- url\n        }\n\n the scheduler can handle everything better, that's why in production I wasn't able to see the issue, so here a benchmark with timings:\n\nWithout Sleep:\n\nresize speed mean: 327.630885ms, min: 100.150452ms, max: 462.495835ms, 99%: 429.954171ms\nTotal: 6250 samples\n    6188  99.0%  99.0%     6191  99.1% runtime.cgocall\n      21   0.3%  99.3%       21   0.3% runtime.usleep\n       7   0.1%  99.5%        7   0.1% retake\n       7   0.1%  99.6%        7   0.1% runtime.rtsigprocmask\n       4   0.1%  99.6%        4   0.1% syscall.Syscall\n       3   0.0%  99.7%        3   0.0% runtime.epollwait\n       3   0.0%  99.7%        3   0.0% runtime.futex\n       2   0.0%  99.8%        2   0.0% ExternalCode\n       2   0.0%  99.8%        2   0.0% runtime.memclr\n       1   0.0%  99.8%        2   0.0% exitsyscallfast\n       1   0.0%  99.8%     6192  99.1% github.com/daddye/vips.Resize\n       1   0.0%  99.8%        1   0.0% github.com/gocql/gocql.(*frame).readBytes\n       1   0.0%  99.9%        1   0.0% runqgrab\n       1   0.0%  99.9%        1   0.0% runtime.atomicload64\n       1   0.0%  99.9%        1   0.0% runtime.cas\n       1   0.0%  99.9%        1   0.0% runtime.entersyscall\n       1   0.0%  99.9%        1   0.0% runtime.fastrand1\n       1   0.0%  99.9%        1   0.0% runtime.noteclear\n       1   0.0% 100.0%        1   0.0% runtime.purgecachedstats\n       1   0.0% 100.0%        1   0.0% runtime.unlock\n\nWith a Sleep of 10ms:\n\nresize speed mean: 28.551381ms, min: 4.666236ms, max: 61.589934ms, 99%: 52.274779ms\nTotal: 1265 samples\n    1101  87.0%  87.0%     1105  87.4% runtime.cgocall\n      40   3.2%  90.2%       40   3.2% runtime.usleep\n      40   3.2%  93.4%       41   3.2% syscall.Syscall\n      23   1.8%  95.2%       23   1.8% runtime.futex\n       7   0.6%  95.7%        7   0.6% runtime.epollwait\n       4   0.3%  96.0%        4   0.3% runtime.MSpan_Sweep\n       3   0.2%  96.3%        3   0.2% ExternalCode\n       3   0.2%  96.5%        3   0.2% findrunnable\n       3   0.2%  96.8%        3   0.2% runtime.markscan\n       3   0.2%  97.0%        3   0.2% runtime.rtsigprocmask\n       2   0.2%  97.2%        2   0.2% pidleget\n       2   0.2%  97.3%        2   0.2% runtime.atomicload\n       2   0.2%  97.5%        3   0.2% runtime.entersyscall\n       2   0.2%  97.6%        2   0.2% runtime.fastrand1\n       2   0.2%  97.8%        2   0.2% runtime.gogo\n       2   0.2%  97.9%        2   0.2% runtime.memmove\n       2   0.2%  98.1%        2   0.2% sysmon\n       1   0.1%  98.2%        1   0.1% MHeap_AllocLocked\n       1   0.1%  98.3%        1   0.1% addstackroots\n       1   0.1%  98.3%       16   1.3% bufio.(*Reader).Read\n\nAdding a cumulative with the sleep version:\n\nTotal: 1279 samples\n       0   0.0%   0.0%     1190  93.0% runtime.gosched0\n       1   0.1%   0.1%     1149  89.8% main.funcÂ·003\n       0   0.0%   0.1%     1116  87.3% github.com/triggit/feeds/processor.ResizeVips\n       1   0.1%   0.2%     1114  87.1% github.com/daddye/vips.Resize\n    1111  86.9%  87.0%     1111  86.9% runtime.cgocall\n       0   0.0%  87.0%      488  38.2% github.com/daddye/vips._Cfunc_vips_jpegsave_custom\n       0   0.0%  87.0%      267  20.9% github.com/daddye/vips._Cfunc_vips_affine_interpolator\n       0   0.0%  87.0%      233  18.2% github.com/daddye/vips._Cfunc_vips_embed_extend\n       0   0.0%  87.0%       82   6.4% System\n      38   3.0%  90.0%       40   3.1% syscall.Syscall\n      34   2.7%  92.7%       34   2.7% runtime.usleep\n      27   2.1%  94.8%       27   2.1% runtime.futex\n       0   0.0%  94.8%       26   2.0% io/ioutil.WriteFile\n       0   0.0%  94.8%       25   2.0% github.com/daddye/vips._Cfunc_im_close\n       0   0.0%  94.8%       25   2.0% github.com/daddye/vips._Cfunc_vips_image_new\n       0   0.0%  94.8%       21   1.6% github.com/daddye/vips._Cfunc_vips_jpegload_buffer_seq\n       0   0.0%  94.8%       21   1.6% github.com/gocql/gocql.(*Conn).recv\n       0   0.0%  94.8%       21   1.6% github.com/gocql/gocql.(*Conn).serve\n       1   0.1%  94.8%       19   1.5% bufio.(*Reader).Read\n       0   0.0%  94.8%       19   1.5% github.com/daddye/vips._Cfunc_vips_copy_0\n\nWe can see that:\n\nWith a sleep:\n\n1   0.1%   0.2%     1114  87.1% github.com/daddye/vips.Resize\n\nWithout a sleep:\n\n1   0.0%  99.8%     6192  99.1% github.com/daddye/vips.Resize\n\nSo finally:\n\nThe version without sleep took (just for the C function call): 327.630885ms\nWith a sleep: 28.551381ms\n\nThanks so much\nDavide\u003c/pre\u003e",
	"user": {
		"login": "DAddYE",
		"id": 6537,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"comments": 14,
	"closed_at": "2015-04-13T08:25:37Z",
	"created_at": "2014-09-03T18:01:42Z",
	"updated_at": "2016-06-25T01:40:35Z",
	"milestone": {
		"id": 905114,
		"number": 2,
		"title": "Go1.5Maybe"
	}
}
