{
	"id": 66078716,
	"body": "\u003ca id=\"c15\"\u003e\u003c/a\u003eComment 15 by **lobais**:\n\n\u003cpre\u003eReally, a way to zero any type, would be ideal.\nIf \n\n    for i := range b {\n        b[i] = MyStruct{}\n    }\n\nwere recognized as a way to zero a slice of `MyStruct`, then\n\n    s := MyStruct{...}\n    s = MyStruct{}\n\nshould probably also do no allocations (in line 2).\nBut then, for a struct like\n\n    type MyStruct struct {\n        slice []int\n    }\n\nthere would suddenly be a no-loop way to zero an int-slice.\n\nI don't know what to make of this, other than that zeroing types seems like a natural\nthing to do, given Go's great idiom of zeroed types being (transitively) useful.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-07-09T14:57:12Z",
	"updated_at": "2014-12-08T10:29:03Z"
}
