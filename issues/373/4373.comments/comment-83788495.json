{
	"id": 83788495,
	"body": "What if instead of returning errClosing we fixed the concurrent close\nbehaviour to return io.EOF ?\nOn 20 Mar 2015 09:34, \"smithwinston\" \u003cnotifications@github.com\u003e wrote:\n\n\u003e The error philosophy for Go is that errors should be opaque to the caller\n\u003e and from what I am hearing you can already do this.\n\u003e\n\u003e It just seems that the errClosing is an oddity; Close()ing the\n\u003e io.ReadWriteCloser seems to be a common use case as it's the only way to\n\u003e \"break\" a goroutine out of a blocking Read().\n\u003e\n\u003e BTW: I'm going from this blog posting\n\u003e \u003chttp://blog.golang.org/error-handling-and-go\u003e as \"best practices\" for\n\u003e error handling. I typically define my own errors as follows:\n\u003e\n\u003e var ErrMessageResponseTimeout = errors.New(“Message Response Timeout”)\n\u003e\n\u003e So I can take action on particular errors.\n\u003e\n\u003e Are there cases currently that you consider an error cause to be temporary\n\u003e that you are not able to identify?\n\u003e\n\u003e I don't think so, I don't know what a temporary network error would even\n\u003e be? (I assume the runtime handles things like EBUSY or EINTR).\n\u003e\n\u003e The case of closing the socket concurrently in the shutdown situation\n\u003e should probably be handled with a flag on the retry loop of your program,\n\u003e\n\u003e Yes, in m design that's how I do it; in response to the error, the\n\u003e reader/writers exit. If a shutdown is in progress, this has already been\n\u003e signaled and the retry loop ends. If there's no shutdown flag, the retry\n\u003e loop will create a new connection and restart the reader/writers.\n\u003e\n\u003e I guess you can argue that there's always a case when an ErrClosing is\n\u003e intentional and thus should be indicated by some kind of shutdown flag. But\n\u003e it sure would be nice to be able not to clutter the error log on errClosing\n\u003e without having to do a string match!\n\u003e\n\u003e —\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/4373#issuecomment-83787777\u003e.\n\u003e\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-03-19T22:39:44Z",
	"updated_at": "2015-03-19T22:39:44Z"
}
