{
	"id": 129515533,
	"body": "I disagree that deadlocking the system is a worse solution than providing random numbers that are not actually random.\r\n\r\nOne of the failure cases of getrandom(2) mentioned [here](https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c6e9d6f38894798696f23c8084ca7edbf16ee895) is there not being enough entropy available. Currently, Go's response to this is to fallback to /dev/urandom (the type of behaviour mentioned in the getrandom(2) commit message which the introduction of getrandom(2) is designed to avoid), knowing that the bytes it receives are not going to be unpredictable.\r\n\r\ncrypto/rand returning predictable bytes is a bug, has always been a bug and does not follow the principle of least surprise. Nowhere can I see specified that it does not block. Nowhere can I see it specified that it returns predictable bytes instead of an error when random bytes are no longer available.\r\n\r\nIn my opinion, either returning an error when random bytes are not available or blocking till they are are both acceptable solutions with my preference slightly leaning towards returning an error. You can consider Read not returning an error in that case previously as a bug.",
	"user": {
		"login": "takeyourhatoff",
		"id": 4885368,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-10T16:18:24Z",
	"updated_at": "2015-08-10T16:18:24Z"
}
