{
	"id": 122870428,
	"body": "This is certainly worth looking into but stating that \"GC must not ever let\nheap grow above the GOGC goal\" is promising something that Go can only\npromise in an operational sense based on the current implementation. That\ndefinition seems like a rat hole. Keeping GOGC a goal met by quality of\nservice setting makes more sense.\n\nOn Sun, Jul 19, 2015 at 5:15 PM, Dmitry Vyukov \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e That's concurrent GC issue.\n\u003e\n\u003e I've run:\n\u003e $ GODEBUG=gctrace=1 ./pprof.test -test.run=TestTraceStress$\n\u003e -test.cpu=1,1,1,1,.......,1\n\u003e\n\u003e If I sprinkle runtime.GC calls in the test, in particular inside of the\n\u003e following loop:\n\u003e\n\u003e     for i := 0; i \u003c 1e3; i++ {\n\u003e         _ = make([]byte, 1\u003c\u003c20)\n\u003e     }\n\u003e\n\u003e Memory usage stabilizes at ~68MB.\n\u003e\n\u003e But if I remove the calls, and let the concurrent GC do its work, memory\n\u003e steadily grows to 240MB, then to 300MB, then to 340MB.\n\u003e\n\u003e If I enable gctracing, then I see lines like this:\n\u003e\n\u003e gc #1095 \u003chttps://github.com/golang/go/issues/1095\u003e @60.193s 9%:\n\u003e 0.35+0.59+0.66+7.4+0.61 ms clock, 1.4+0.59+0+0/1.3/0.16+2.4 ms cpu,\n\u003e 4-\u003e125-\u003e2 MB, 4 MB goal, 10 P\n\u003e\n\u003e GC is basically 30x off of the goal.\n\u003e\n\u003e GC must not ever let heap grow above the GOGC goal. If it needs some\n\u003e reserve room, it should aim at 0.9 GOGC or so, but then cap the heap at\n\u003e GOGC if it fails to reclaim memory in time.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/11677#issuecomment-122707530\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-20T12:34:09Z",
	"updated_at": "2015-07-20T12:34:09Z"
}
