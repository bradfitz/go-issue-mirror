{
	"id": 123840058,
	"body": "\u003e The solution to both probably includes back pressure that forces the\r\n\u003e mutator to be more cooperative, for #11677 this probably means putting the\r\n\u003e mutator to sleep for a some period proportional to its debt, in effect\r\n\u003e slowing allocation by this goroutine down.\r\n\r\nCurrently, there are three ways to satisfy an assist: 1) the mutator steals credit from background GC, 2) the mutator actually does GC work, and 3) there is no more work available. 3 is one of the causes of overshooting the heap goal (and was never intended as a way to satisfy an assist). I have a prototype solution that disallows 3 by making the assist block until it can satisfy 1 or 2 or GC terminates. This actually looks a lot like the getfull barrier, except that it also repeatedly tries to steal credit. Unfortunately it's another spin-with-sleep loop like getfull, for the same reasons getfull is. I'm writing up a Go1.6Early issue about improving the GC barrier overall, since it's really showing its inappropriateness for concurrent GC.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-22T19:41:41Z",
	"updated_at": "2015-07-22T19:41:41Z"
}
