{
	"id": 51281170,
	"number": 3798,
	"state": "closed",
	"title": "runtime: crash in GC on 386",
	"body": "\u003cpre\u003eCurrent tip (13699:21130d62eeb0), linux/386, run enough times on a parallel machine:\n\n$ GOARCH=386 GOMAXPROCS=32 go test std\n\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n\tpanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x0 pc=0x8073d94]\n\ngoroutine 50 [running]:\ntesting.func·003(0xf7756fd4, 0xf7756100)\n\t/usr/local/google/home/dvyukov/go_vanilla/src/pkg/testing/testing.go:268 +0x123\n----- stack segment boundary -----\nruntime_test.TestStopTheWorldDeadlock(0x18855200, 0xe)\n\t/usr/local/google/home/dvyukov/go_vanilla/src/pkg/runtime/proc_test.go:25 +0x24\ntesting.tRunner(0x18855200, 0x82b3dd4, 0x0)\n\t/usr/local/google/home/dvyukov/go_vanilla/src/pkg/testing/testing.go:273 +0x71\ncreated by testing.RunTests\n\t/usr/local/google/home/dvyukov/go_vanilla/src/pkg/testing/testing.go:349 +0x711\n\nThe culprit is:\n\n// mgc0.c\nstatic struct {\n\tuint64\tfull;  // lock-free list of full blocks\n\tuint64\tempty; // lock-free list of empty blocks\n...\n} work;\n\n8c does not align uint64 on 8-bytes, occasionally full/empty crosses cache-line boundary\nand then\n\nTEXT runtime·atomicload64(SB), 7, $0\n\tMOVL    4(SP), BX\n\tMOVL\t8(SP), AX\n\t// MOVQ (%EAX), %MM0\n\tBYTE $0x0f; BYTE $0x6f; BYTE $0x00\n\t// MOVQ %MM0, 0(%EBX)\n\tBYTE $0x0f; BYTE $0x7f; BYTE $0x03\n\t// EMMS\n\tBYTE $0x0F; BYTE $0x77\n\tRET\n\nbecomes not particularly atomic.\n\nThere are 2 ways to fix it:\n1. Fix the compilers to properly align uint64 (I am not sure why they do not align it\nnow).\n2. Just patch the GC to manually align the vars.\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:20:04Z",
	"created_at": "2012-07-04T09:34:53Z",
	"updated_at": "2016-06-24T22:21:13Z"
}
