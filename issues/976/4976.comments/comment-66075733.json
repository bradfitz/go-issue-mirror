{
	"id": 66075733,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eFurthermore, even if there are explicit cyclic dependencies, the compiler (gc) does not\ncomplain. For:\n\na.go: package main; import \"./b\"; var X int = b.X; func main() {}\nb.go: package b; import \"./c\"; var X int = c.X\nc0.go: package c; var X int\nc1.go: package c; import \"./a\"; var X int = main.X\n\n1) go tool 6g c0.go \u0026\u0026 go tool 6g b.go \u0026\u0026 go tool 6g a.go\n2) go tool 6g c1.go \u0026\u0026 go tool 6g b.go \u0026\u0026 go tool 6g a.go =\u003e cyclic dependency: main.X\n-\u003e b.X -\u003e c.X -\u003e main.X\n\n3) go tool 6l a.6 =\u003e cyclic import error\n\nSo:\n\na) The sentence \"The importing of packages, by construction, guarantees that there can\nbe no cyclic dependencies in initialization.\" is actually not quite right. I also don't\nthink it follows from it that circular imports are forbidden.\n\nb) The suggested correction \"It is illegal for a package to import itself, either\ndirectly or transitively, or to import a package without referring to any of its\nexported identifiers.\", but one might argue that the compiler, not the linker should\ncomplain.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-04T20:24:00Z",
	"updated_at": "2014-12-08T10:26:30Z"
}
