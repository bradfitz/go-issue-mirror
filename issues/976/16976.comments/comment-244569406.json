{
	"id": 244569406,
	"body": "@minux Perhaps it should be an implementation detail?  I looked through the spec and didn't see anything that appending had to not return a modified capacity slice, only that it could.  Other implementations could still behave as they do today and leave it as a noop.  \r\n\r\n@randall77 I am not tied to the particular implementation, I would just like a way to use all the memory that has been allocated.  The template slice is a nice idea, but won't that pay the penalty of also having to read from template?  I was aiming at a zero copy implementation.  \r\n\r\nDefinitely agree about the two arg make being allowed to pick a smarter capacity, but as you said it would have to wait until Go 2.  It seems like my proposal would be a backwards compatible workaround  in the mean time.\r\n\r\n",
	"user": {
		"login": "carl-mastrangelo",
		"id": 8943572,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-03T20:57:18Z",
	"updated_at": "2016-09-03T20:57:18Z"
}
