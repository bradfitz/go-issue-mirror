{
	"id": 69946291,
	"number": 10527,
	"state": "open",
	"title": "net: concurrent Accept-Close with no timeout on TCPListener defers closing underlying socket",
	"body": "Go version:  go1.4.2\r\nOS: Linux 3.13 x86_64\r\n\r\nThe following test demonstrates what I consider a bug:\r\n\r\n```go\r\npackage foo\r\n\r\nimport (\r\n\t\"log\"\r\n\t\"net\"\r\n\t\"testing\"\r\n)\r\n\r\nconst addr = \"127.0.0.1:12345\"\r\n\r\nfunc TestXxx(t *testing.T) {\r\n\tfor i := 0; i \u003c 100000; i++ {\r\n\t\tlog.Printf(\"Iteration %d\", i+1)\r\n\t\tl, err := net.Listen(\"tcp4\", addr)\r\n\t\tif err != nil {\r\n\t\t\tt.Fatalf(\"Failed to listen on %s: %v\", addr, err)\r\n\t\t}\r\n\t\tgo func(l net.Listener) {\r\n\t\t\tfor {\r\n\t\t\t\t_, err := l.Accept()\r\n\t\t\t\tif err != nil {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}(l)\r\n\t\tif err := l.Close(); err != nil {\r\n\t\t\tt.Fatalf(\"Failed to close server: %v\", err)\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nBriefly, within a loop it Listens on tcp port 12345, invokes a goroutine that calls Accept on the listener, and then Closes the listener. My expectation was that this would always pass regardless of scheduler behavior or number of loop iterations as I expected Close() would only return once the underlying socket is no longer in use. \r\n\r\nInstead what I see is that it will sometimes pass, but often fails on the net.Listen call of subsequent loop iterations with an error that the address is already in use. I believe I understand the cause of the failure. netFD underlies the TCPListener and it's a reference counted object. A goroutine blocked on Accept will increment the reference count. Close() flips a flag on netFD to indicate the socket is considered closed which will make other netFD operations like Accept return errors indicating the socket is closed. The underlying OS socket is only closed once the reference count for the netFD has reached zero.\r\n\r\nThe end result is that an OS socket is only closed after TCPListener.Close() is invoked AND all goroutines that are blocked in TCPListener.Accept() are scheduled and return the expected error condition. It seems like more intuitive behavior would be for TCPListener.Close() to immediately close the underlying OS socket, and goroutines blocked in TCPListener.Accept() to return errors whenever they were next scheduled/run.\r\n\r\n",
	"user": {
		"login": "ggriffiniii",
		"id": 7447,
		"type": "User",
		"site_admin": false
	},
	"comments": 13,
	"created_at": "2015-04-21T20:41:21Z",
	"updated_at": "2015-12-05T06:17:08Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
