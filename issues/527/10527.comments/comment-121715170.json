{
	"id": 121715170,
	"body": "My SaneListener may have confused the situation more than it helped. I'm not proposing waiting for other goroutines to schedule before returning from Close(). I'm simply saying that Close() should invoke the underlying close syscall before returning. I don't know go internals at all, but at a high level I'm imagining that Close() would set a flag on the netFD to indicate it's closed, it would then immediately close the underlying file descriptor removing it from the network poller and then return. Any goroutines that are still blocked on netFD operations would become runnable and return with connection closed whenever they are next scheduled.\r\n\r\nI'm **not** proposing that there should be a synchronization barrier preventing Close() from returning until all other goroutines have been scheduled.",
	"user": {
		"login": "ggriffiniii",
		"id": 7447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-15T19:04:31Z",
	"updated_at": "2015-07-15T19:04:31Z"
}
