{
	"id": 94963337,
	"body": "I don't agree that a timeout is a solution here. That only bounds the time between the Listener.Close() and when the underlying socket is closed, it doesn't improve the situation in any other way. Regarding waiting for the Acceptor goroutine to stop before calling Close that doesn't seem like an easily implementable (or common) pattern. Assuming the goroutine is blocked on Accept() how does one signal that goroutine to exit? That's exactly what Close() is typically used for. I've hacked together a net.Listener wrapper that seems to do what I want, but it seems like it would be better if these were the semantics provided by the standard library.\r\n\r\n```go\r\n// NewSaneListener returns a new SaneListener around the provided net.Listener.\r\nfunc NewSaneListener(l net.Listener) net.Listener {\r\n        return \u0026SaneListener{l: l, c: sync.NewCond(\u0026sync.Mutex{})}\r\n}\r\n\r\n// SaneListener wraps a net.Listener and ensures that once SaneListener.Close\r\n// returns the underlying socket has been closed.\r\ntype SaneListener struct {\r\n        l        net.Listener\r\n        c        *sync.Cond\r\n        refCount int\r\n}\r\n\r\nfunc (s *SaneListener) incRef() {\r\n        s.c.L.Lock()\r\n        s.refCount++\r\n        s.c.L.Unlock()\r\n}\r\n\r\nfunc (s *SaneListener) decRef() {\r\n        s.c.L.Lock()\r\n        s.refCount--\r\n        s.c.Broadcast()\r\n        s.c.L.Unlock()\r\n}\r\n\r\n// Accept waits for and returns the next connection to the listener.\r\nfunc (s *SaneListener) Accept() (net.Conn, error) {\r\n        s.incRef()\r\n        defer s.decRef()\r\n        return s.l.Accept()\r\n}\r\n\r\n// Close closes the listener.\r\n// Any blocked Accept operations will be unblocked and return errors.\r\nfunc (s *SaneListener) Close() error {\r\n        err := s.l.Close()\r\n        if err == nil {\r\n                s.c.L.Lock()\r\n                for s.refCount \u003e 0 {\r\n                        s.c.Wait()\r\n                }\r\n                s.c.L.Unlock()\r\n        }\r\n        return err\r\n}\r\n\r\n// Addr returns the listener's network address.\r\nfunc (s *SaneListener) Addr() net.Addr {\r\n        return s.l.Addr()\r\n}\r\n```\r\n\r\nI'm mostly including the code above to demonstrate the behavior I would like to see from the default Listener. I would need to vet/test this much more thoroughly before I trusted it in a production environment.\r\n",
	"user": {
		"login": "ggriffiniii",
		"id": 7447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-21T22:40:08Z",
	"updated_at": "2015-04-21T22:40:08Z"
}
