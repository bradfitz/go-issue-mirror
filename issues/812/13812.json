{
	"id": 124774513,
	"number": 13812,
	"state": "closed",
	"title": "regexp: wrong match found without capturing parens",
	"body": "http://play.golang.org/p/n5XbC7kTDt\r\n\r\n\tpackage main\r\n\t\r\n\timport (\r\n\t\t\"fmt\"\r\n\t\t\"regexp\"\r\n\t)\r\n\t\r\n\tfunc main() {\r\n\t\ts := \"abc\"\r\n\t\t\r\n\t\trePass := regexp.MustCompile(\"(a.*?c)|a.*?b\")\r\n\t\treFail := regexp.MustCompile(\"a.*?c|a.*?b\")\r\n\t\r\n\t\tfmt.Printf(\"%v\\n\", rePass.FindStringIndex(s))\r\n\t\t// Writes \"[0 3]\"\r\n\t\tfmt.Printf(\"%v\\n\", reFail.FindStringIndex(s))\r\n\t\t// Writes \"[0 2]\"\r\n\t}\r\n\r\nThe overall match found should not depend on capturing parens. In this case, the `a.*?c` branch of the alternative should take priority over the `a.*?b` branch in both expressions, so both should match [0 3] not [0 2].\r\n\r\nThis happens in C++ RE2 as well.",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-01-08T16:42:06Z",
	"created_at": "2016-01-04T15:03:01Z",
	"updated_at": "2016-01-08T16:42:06Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
