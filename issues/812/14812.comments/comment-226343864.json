{
	"id": 226343864,
	"body": "hey @aclements sorry you had to go through that. what i personally do is compile metric-tank manually on the host, so that the binary is $GOPATH/src/github.com/raintank/raintank-metric/metric_tank/metric_tank, and then make raintank-docker/raintank_code/raintank-metric a symlink to $GOPATH/src/github.com/raintank/raintank-metric/metric_tank/ . you can see in fig.yaml, the metricTank entry, that    ./raintank_code/raintank-metric from the host gets mapped to /go/src/github.com/raintank/raintank-metric within the container using a docker directory mapping.  in other words, the directory in the container is synchronized with the host, so whatever you compile on the host will be available in the container.\r\n\r\n2. there's 2 methods: \r\n\r\nA) using vegeta. in the vegeta attack command you already have, probably change the duration from 120m to about 5m or so, to make the benchmark shorter. then it should be as simple as `cat attack.out | vegeta report`. vegeta has a few other interesting reporting modes as well. and i think you can even run reports \"streaming\", e.g. get reports while the file is still being written to.\r\n\r\nB) if grafana is running properly in the container (the easiest to verify is to attach to the screen session and go to the grafana tab. in fact you may want to check out all tabs just to verify nothing's obviously broken. usually the last tab i switch to is the benchmark one. there you'll have the console where vegeta is executing and where you can run more vegeta commands). but anyway if grafana's running then you can go to http://localhost:3000, log in as admin:admin and load the \"metric tank\" dashboard. that's the dashboard i've been using to provide the snapshots above. it should show real-time stats coming in (which it loads from graphite, which also runs in a container)",
	"user": {
		"login": "Dieterbe",
		"id": 20774,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-15T22:55:16Z",
	"updated_at": "2016-06-15T22:57:46Z"
}
