{
	"id": 205526169,
	"body": "Hey @aclements!\r\n\r\n\u003e 15s for 6.5GB is actually pretty good (I get ~5s/GB of CPU time on some benchmarks locally, but this can vary a lot based on heap layout and hardware).\r\n\r\nok , fair enough for me. i just reported this here because @davecheney mentioned in \r\nhttps://groups.google.com/forum/#!topic/golang-nuts/Q0rXKYjy1cg\r\nthat 1.5s for 5GB was unexpected and that i should open a ticket for it. so hence this ticket.\r\n\r\n\u003e  If it's that the CPU utilization goes up during GC, please clarify why this is a problem (the GC has to do its work somehow, and FPGA accelerators for GC are still an open area of research :)\r\n\r\nof course, this is by itself not a problem.\r\n\r\n\u003e If it's that response time goes up during GC, could you try the CL in #15022?\r\n\r\ninitially the ticket wasn't about this, but it was brought up and is definitely a problem for us. so from now on we may as well consider this the issue at hand.\r\nI recompiled my app with a recompiled go using your patch, and did a test run before and after.\r\nunfortunately i see no change and the latency spikes are still there (details at https://github.com/raintank/raintank-metric/issues/172) \r\nnote that i can verify this problem quite early on. e.g. in this case i've seen spikes as early as GC run 270. the issue is there probably much earlier but my app needs to load in a lot of data before i can test.  the bug mentioned in #15022 looks like it only activates after a sufficient amount of GC runs.\r\n\r\n",
	"user": {
		"login": "Dieterbe",
		"id": 20774,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-04T22:45:48Z",
	"updated_at": "2016-04-05T15:58:40Z"
}
