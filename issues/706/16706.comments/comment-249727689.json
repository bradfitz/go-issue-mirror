{
	"id": 249727689,
	"body": "I think there's a lot to consider here.\r\n\r\nThe current principle behind Go's binary layout is to minimize startup time and minimize memory use. I think that's the right goal for servers, and compressing type information or program text by default would get in the way of that. (Compressing DWARF is an all-round good idea.)\r\n\r\nThere are several potential improvements to binary size that can be done within those constraints. For example we still include a string representation of types in the type information, I suspect we could pack that information better with a binary representation that the runtime and reflect packages can reconstruct into a string. (There is also the typeOff project, which I'm not done with.)\r\n\r\nHowever there are lots of places where binary size is more important than both startup time and memory use (or at least, it is relatively more important than on servers). I think we should consider **introducing a -small mode**, that is, ```go build -small```. It would default to no DWARF info, no symbol table, compressed type information.\r\n\r\nThat's where I would start with this proposal. A -small flag is a reasonably well contained little project that we can build on over time (for example, by exploring text segment compression, inlining tuning, etc.)",
	"user": {
		"login": "crawshaw",
		"id": 161319,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-26T23:32:46Z",
	"updated_at": "2016-09-26T23:32:46Z"
}
