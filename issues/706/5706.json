{
	"id": 51284065,
	"number": 5706,
	"state": "open",
	"title": "reflect: field lookup ignores methods that cancel fields (ambiguity is ignored)",
	"body": "\u003cpre\u003e1) $ cat x.go\npackage main\n\nimport \u0026quot;reflect\u0026quot;\n\ntype S1 struct {\n\tm int\n}\n\ntype S2 struct{}\n\nfunc (S2) m() int { return 0 }\n\ntype S struct {\n\tS1\n\tS2\n}\n\nfunc main() {\n\tvar s S\n\tt := reflect.TypeOf(s)\n\tif f, ok := t.FieldByName(\u0026quot;m\u0026quot;); ok {\n\t\tprintln(\u0026quot;field found:\u0026quot;, f.Name)\n\t} else {\n\t\tprintln(\u0026quot;field not found\u0026quot;)\n\t}\n}\n\n\n2) $ go run x.go\nfield found: m\n\n\nBut in truth, the field m and the method m are at the same level and thus \u0026quot;cancel\neach other out\u0026quot;. In the same program, accessing s.m leads to a compile-time error (\nambiguous selector s.m ).\n\nThe bug is in \u003ca href=\"http://golang.org/src/pkg/reflect/type.go?#L856\"\u003ehttp://golang.org/src/pkg/reflect/type.go?#L856\u003c/a\u003e\n(structType.FieldByNameFunc) which ignores methods.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 9,
	"created_at": "2013-06-14T21:19:55Z",
	"updated_at": "2015-04-14T19:45:19Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
