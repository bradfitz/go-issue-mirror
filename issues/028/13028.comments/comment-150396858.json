{
	"id": 150396858,
	"body": "To make this report more self contained, here is the readme from https://github.com/glycerine/cshared-osx-issue\r\n\r\n# cshared-osx-issue\r\n\r\nWith go 1.5.1 and at tip, I'm seeing what looks like a bug when c-shared .so libraries that do signal.Notify(c, os.Interrupt) are loaded in a host program that handles SIGINT itself.\r\n\r\nUpdate: tried with tip *on OSX and linux*, go version devel +79a3b56 Thu Oct 22 21:19:43 2015 +0000 darwin/amd64, and I see the same thing.\r\n\r\nPossibly related: https://github.com/golang/go/issues/11794\r\n\r\n###Discussion:\r\n\r\nWhen I am building a c-shared dynamic library with golang code, it looks\r\nas though loading the shared library into the c-code masks the native signal\r\nhandling on OSX.  And on linux.\r\n\r\nI was led to investigate because when I loaded\r\na c-shared built .so library into the R statistical analysis \r\nenvironment, set-up handlers with signal.Notify(), and then pressed ctrl-c:\r\n it panics/crashes on OSX, but\r\nworks fine on Linux. See the last stack dump in this repo for the full details of that panic.\r\n\r\nThis repo is an attempt to reduce/isolate that issue into a minimal test case. I've not been successful yet in reproducing the difference between OSX and Linux, and I suspect this is due to variation in the signal handling code either in the Golang runtime or the R runtime.\r\n\r\nNonethless, while I cannot reproduce the crash/panic in a minimal test case (it reproduces easily in you want to go to the trouble of doing an R source install and compiling my R library 'rmq'), I do observe that signal handling under OSX and linux appears to be disabled by loading the golang based c-shared library, and I strongly suspect that this is a part of the mechanism of the crash. Moreover it seems like a bug in its own right.\r\n\r\nI think this is related to https://github.com/golang/go/issues/11794.\r\n\r\n### details\r\n\r\non darwin-amd64 / OSX 10.10.5 Yosemite:\r\n\r\nThe places below where you see \"C-c C-c\" is where I give Ctrl-c to \r\nthe program. It shows up twice due to being inside an emacs buffer.\r\n\r\n~~~\r\n$ make  # generates ./with_mygolib\r\n$ make no_go_lib   # generates ./no_mygolib\r\n\r\njaten@Jasons-MacBook-Pro:~/cshared-osx-issue$ make\r\ncd mygolib \u0026\u0026 make\r\ngo build -buildmode=c-shared -o ../libmygolib.so mygolib.go\r\n#nm -gU ../libmygolib.so\r\ngcc -DUSE_GOLIB=1 uses_mygolib.c -o with_mygolib libmygolib.so\r\njaten@Jasons-MacBook-Pro:~/cshared-osx-issue$ ./with_mygolib \r\nabout to call BlockInSelect(), which will exit after receiving 2 ctrl-c SIGINT signals.\r\nmylib.go: in BlockInSelect(): about to select on ctrlC_Chan\r\n  C-c C-c\r\n\r\n  I see ctrl-c !!\r\n                           ## what?? why no handleInterrupts() call!??\r\n  C-c C-c\r\n\r\n  I see ctrl-c !!\r\n\r\nback out of BlockInSelect()! R_interrupts_pending = 0 \r\njaten@Jasons-MacBook-Pro:~/cshared-osx-issue$ ./no_mygolib \r\nabout to call BlockInSelect(), which will exit after receiving 2 ctrl-c SIGINT signals.\r\n  C-c C-c\r\n handleInterrupt called back!\r\nback out of BlockInSelect()! R_interrupts_pending = 1\r\njaten@Jasons-MacBook-Pro:~/cshared-osx-issue$   C-c C-c\r\njaten@Jasons-MacBook-Pro:~/cshared-osx-issue$ go version\r\ngo version devel +79a3b56 Thu Oct 22 21:19:43 2015 +0000 darwin/amd64\r\njaten@Jasons-MacBook-Pro:~/cshared-osx-issue$ \r\n~~~\r\n\r\nThe same thing happens on fedora22 linux amd64, go1.5.1. And at tip 79a3b56.\r\n\r\n~~~\r\n[jaten@buzz cshared]$ make\r\ncd mygolib \u0026\u0026 make\r\nmake[1]: Entering directory '/home/jaten/cshared/mygolib'\r\ngo build -buildmode=c-shared -o ../libmygolib.so mygolib.go\r\n#nm -gU ../libmygolib.so\r\nmake[1]: Leaving directory '/home/jaten/cshared/mygolib'\r\ngcc -DUSE_GOLIB=1 uses_mygolib.c -o with_mygolib libmygolib.so\r\n[jaten@buzz cshared]$ make no_go_lib\r\ngcc -DUSE_GOLIB=0 uses_mygolib.c -o no_mygolib\r\n[jaten@buzz cshared]$ ./with_mygolib \r\nabout to call BlockInSelect(), which will exit after receiving 2 ctrl-c SIGINT signals.\r\nmylib.go: in BlockInSelect(): about to select on ctrlC_Chan\r\n  C-c C-c\r\n\r\n  I see ctrl-c !!\r\n\r\n  C-c C-c\r\n\r\n  I see ctrl-c !!\r\n\r\nback out of BlockInSelect()! R_interrupts_pending = 0   ## what??? \r\n[jaten@buzz cshared]$ ./no_mygolib \r\nabout to call BlockInSelect(), which will exit after receiving 2 ctrl-c SIGINT signals.\r\n  C-c C-c\r\n handleInterrupt called back!\r\nback out of BlockInSelect()! R_interrupts_pending = 1   ## seems to work when no c-shared go lib present.\r\n[jaten@buzz cshared]$ \r\n\r\n~~~\r\n\r\n### the originating (and more elaborate) problem: the panic stack trace\r\n\r\nHere is the stack trace from the crash when running under R on OSX. Source code is here: https://github.com/glycerine/rmq\r\n\r\nThe above code is a minimal test case for this more elaborate issue found in context of running under R.\r\n\r\n~~~\r\n$ R\r\nR version 3.2.2 (2015-08-14) -- \"Fire Safety\"\r\nCopyright (C) 2015 The R Foundation for Statistical Computing\r\nPlatform: x86_64-apple-darwin14.5.0 (64-bit)\r\n\r\nR is free software and comes with ABSOLUTELY NO WARRANTY.\r\nYou are welcome to redistribute it under certain conditions.\r\nType 'license()' or 'licence()' for distribution details.\r\n\r\n  Natural language support but running in an English locale\r\n\r\nR is a collaborative project with many contributors.\r\nType 'contributors()' for more information and\r\n'citation()' on how to cite R or R packages in publications.\r\n\r\nType 'demo()' for some demos, 'help()' for on-line help, or\r\n'help.start()' for an HTML browser interface to help.\r\nType 'q()' to quit R.\r\n\r\n\u003e options(STERM='iESS', editor='emacsclient')\r\n\u003e require(rmq)\r\nLoading required package: rmq\r\n\u003e require(testthat)\r\nLoading required package: testthat\r\n\u003e handler = function(x) {\r\n+   print(paste(\"handler called back with argument x = \", paste(collapse=\" \",sep=\" \",x)))\r\n+   reply=list()\r\n+   reply$hi = \"there!\"\r\n+   reply$yum = c(1.1, 2.3)\r\n+   reply$input = x\r\n+   reply\r\n+ }\r\n\u003e options(error=recover)\r\n\u003e r = .Call(\"ListenAndServe\", \"127.0.0.1:9090\", handler, new.env(), package=\"rmq\")\r\nListenAndServe listening on address '127.0.0.1:9090'...\r\n  C-c C-cfatal error: unexpected signal during runtime execution\r\n[signal 0xb code=0x1 addr=0x8 pc=0x10dd976d9]\r\n\r\nruntime stack:\r\nruntime.throw(0x10e425c20, 0x2a)\r\n\t/usr/local/go/src/runtime/panic.go:527 +0x90\r\nruntime.sigpanic()\r\n\t/usr/local/go/src/runtime/sigpanic_unix.go:12 +0x5a\r\nruntime.sighandler(0xc820032000, 0x0, 0x0, 0x3)\r\n\t/usr/local/go/src/runtime/signal_amd64x.go:76 +0x139\r\n\r\ngoroutine 17 [select, locked to thread]:\r\nruntime.gopark(0x10e468a70, 0xc820061e00, 0x10e37e638, 0x6, 0xc82001e718, 0x2)\r\n\t/usr/local/go/src/runtime/proc.go:185 +0x163 fp=0xc820061ad0 sp=0xc820061aa8\r\nruntime.selectgoImpl(0xc820061e00, 0x0, 0x18)\r\n\t/usr/local/go/src/runtime/select.go:392 +0xa64 fp=0xc820061c78 sp=0xc820061ad0\r\nruntime.selectgo(0xc820061e00)\r\n\t/usr/local/go/src/runtime/select.go:212 +0x12 fp=0xc820061c98 sp=0xc820061c78\r\nmain.ListenAndServe(0x7ffd733c4178, 0x7ffd730ddd48, 0x7ffd730e3920, 0x7ffd730e3040)\r\n\t/Users/jaten/pkg/R-3.2.2/src/library/Recommended/rmq/src/rmq/rmq.go:161 +0x865 fp=0xc820061ed0 sp=0xc820061c98\r\nruntime.call32(0x0, 0x7fff545f43d8, 0x7fff545f4468, 0x20)\r\n\t/usr/local/go/src/runtime/asm_amd64.s:437 +0x3e fp=0xc820061ef8 sp=0xc820061ed0\r\nruntime.cgocallbackg1()\r\n\t/usr/local/go/src/runtime/cgocall.go:252 +0x10c fp=0xc820061f30 sp=0xc820061ef8\r\nruntime.cgocallbackg()\r\n\t/usr/local/go/src/runtime/cgocall.go:177 +0xd7 fp=0xc820061f90 sp=0xc820061f30\r\nruntime.cgocallback_gofunc(0x0, 0x0, 0x0)\r\n\t/usr/local/go/src/runtime/asm_amd64.s:801 +0x60 fp=0xc820061fa0 sp=0xc820061f90\r\nruntime.goexit()\r\n\t/usr/local/go/src/runtime/asm_amd64.s:1696 +0x1 fp=0xc820061fa8 sp=0xc820061fa0\r\n\r\ngoroutine 8 [select, locked to thread]:\r\nruntime.gopark(0x10e468a70, 0xc82002f728, 0x10e37e638, 0x6, 0x18, 0x2)\r\n\t/usr/local/go/src/runtime/proc.go:185 +0x163\r\nruntime.selectgoImpl(0xc82002f728, 0x0, 0x18)\r\n\t/usr/local/go/src/runtime/select.go:392 +0xa64\r\nruntime.selectgo(0xc82002f728)\r\n\t/usr/local/go/src/runtime/select.go:212 +0x12\r\nruntime.ensureSigM.func1()\r\n\t/usr/local/go/src/runtime/signal1_unix.go:227 +0x323\r\nruntime.goexit()\r\n\t/usr/local/go/src/runtime/asm_amd64.s:1696 +0x1\r\n\r\ngoroutine 6 [syscall]:\r\nos/signal.loop()\r\n\t/usr/local/go/src/os/signal/signal_unix.go:22 +0x18\r\ncreated by os/signal.init.1\r\n\t/usr/local/go/src/os/signal/signal_unix.go:28 +0x37\r\n\r\ngoroutine 9 [IO wait]:\r\nnet.runtime_pollWait(0x10edd6950, 0x72, 0xc820014210)\r\n\t/usr/local/go/src/runtime/netpoll.go:157 +0x60\r\nnet.(*pollDesc).Wait(0xc82011c060, 0x72, 0x0, 0x0)\r\n\t/usr/local/go/src/net/fd_poll_runtime.go:73 +0x3a\r\nnet.(*pollDesc).WaitRead(0xc82011c060, 0x0, 0x0)\r\n\t/usr/local/go/src/net/fd_poll_runtime.go:78 +0x36\r\nnet.(*netFD).accept(0xc82011c000, 0x0, 0x10f061038, 0xc8201200e0)\r\n\t/usr/local/go/src/net/fd_unix.go:408 +0x27c\r\nnet.(*TCPListener).AcceptTCP(0xc820122000, 0xc82003cd88, 0x0, 0x0)\r\n\t/usr/local/go/src/net/tcpsock_posix.go:254 +0x4d\r\nnet.(*TCPListener).Accept(0xc820122000, 0x0, 0x0, 0x0, 0x0)\r\n\t/usr/local/go/src/net/tcpsock_posix.go:264 +0x3d\r\nnet/http.(*Server).Serve(0xc82008f040, 0x10f061000, 0xc820122000, 0x0, 0x0)\r\n\t/usr/local/go/src/net/http/server.go:1887 +0xb3\r\nvendor/github.com/glycerine/go-tigertonic.(*Server).Serve(0xc82008f040, 0x10f061000, 0xc820122000, 0x0, 0x0)\r\n\t/Users/jaten/pkg/R-3.2.2/src/library/Recommended/rmq/src/vendor/github.com/glycerine/go-tigertonic/server.go:160 +0xd8\r\nvendor/github.com/glycerine/go-tigertonic.(*Server).ListenAndServe(0xc82008f040, 0x0, 0x0)\r\n\t/Users/jaten/pkg/R-3.2.2/src/library/Recommended/rmq/src/vendor/github.com/glycerine/go-tigertonic/server.go:144 +0x1e2\r\nmain.(*WebServer).Start.func1(0xc820017d80)\r\n\t/Users/jaten/pkg/R-3.2.2/src/library/Recommended/rmq/src/rmq/web.go:54 +0x25\r\ncreated by main.(*WebServer).Start\r\n\t/Users/jaten/pkg/R-3.2.2/src/library/Recommended/rmq/src/rmq/web.go:60 +0x4e\r\n\r\ngoroutine 18 [syscall, locked to thread]:\r\nruntime.goexit()\r\n\t/usr/local/go/src/runtime/asm_amd64.s:1696 +0x1\r\n\r\nProcess R exited abnormally with code 2 at Thu Oct 22 13:47:58 2015\r\n$\r\n~~~",
	"user": {
		"login": "glycerine",
		"id": 445247,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-23T00:49:02Z",
	"updated_at": "2015-10-23T00:49:02Z"
}
