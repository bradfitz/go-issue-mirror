{
	"id": 144676768,
	"number": 15028,
	"state": "closed",
	"title": "cmd/compile: clarify Type.IsPtr and Isptr",
	"body": "`func (t *Type) IsPtr() bool` was introduced for the SSA backend. It reports (roughly) whether type is pointer-shaped, so it returns true for e.g. maps and channels. The \"roughly\" qualifier is because there are some things that are pointer-shaped (`struct { i *int }`) for which it returns false.\r\n\r\n`var Isptr [NTYPE]bool` is used extensively in the frontend. It is set to true for only TPTR32 and TPTR64.\r\n\r\nThis doesn't matter directly to my type encapsulation efforts, but it seems confusing/dangerous. Here's a proposal. I'd like feedback before I implement it, because the CL will be large, albeit mostly automated:\r\n\r\n* Rename the `IsPtr` method to `IsPtrShaped` and adjust ssa.Type appropriately. Use docs to explain the caveat noted above.\r\n* Eliminate the `Isptr` var in favor of an `IsPtr` method on Type.\r\n* Add an `IsUnsafePtr` method on Type to highlight that `IsPtr` does not include TUNSAFEPTR.\r\n* Bonus: Add checks to `IsPtr` to ensure that the right pointer width is in use everywhere.\r\n\r\n@randall77 @mdempsky @bradfitz \r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"closed_at": "2016-04-03T23:19:59Z",
	"created_at": "2016-03-30T18:13:40Z",
	"updated_at": "2016-04-03T23:19:59Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
