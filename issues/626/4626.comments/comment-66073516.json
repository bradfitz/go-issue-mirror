{
	"id": 66073516,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eGo supports type inference based on the type of a value, but only where a value must\noccur - in a variable initializer of a variable _declaration_. (`v := expr` === `var v T\n= expr`, where T is type of `expr`). Struct fields don't allow initializing expressions\nin the declaration. Seeing a name of a type field where a type lit or type name normaly\nis, would be IMO strange.\n\nIf some kind of referring to a type by naming some existing entity should be adopted,\nthem IMO it have to be available everywhere, not only for struct fields.\n\nAnyway, IMO this feature request, if adopted, makes more harm to the language than what\nvalue it brings.\n\nIs there a precedence in any other statically typed language providing something like\nthis? (Not a decision factor, would like to take a look on it)\u003c/pre\u003e",
	"user": {
		"login": "cznic",
		"id": 729580,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-01-18T22:36:48Z",
	"updated_at": "2014-12-08T10:24:33Z"
}
