{
	"id": 123086296,
	"number": 13692,
	"state": "closed",
	"title": "function auto coerce to a custom type from its underlying type when defined inside the function call ",
	"body": "When I do this:\r\n````\r\ntype X string\r\nfunc printX(x X) {\r\n\tfmt.Println(\"x: \", x)\r\n}\r\nfunc main() {\r\n\tx1 := X(\"x1\")\r\n\tprintX(x1)      // 1. \r\n\tprintX(\"x2\")    // 2.\r\n}\r\n```\r\nI expect **2.** to fail since `\"x2\"` is a string.\r\n\r\n**But it works since it auto coerce `\"x2\"` string type to type X.**  \r\n\r\n### Go\r\n* go version go1.4.2 darwin/amd64\r\n\r\n### OS X\r\n* ProductName:\tMac OS X\r\n* ProductVersion:\t10.10.5\r\n* BuildVersion:\t14F1509\r\n\r\nDarwin Kernel Version 14.5.0: Tue Sep  1 21:23:09 PDT 2015;\r\nroot:xnu-2782.50.1~1/RELEASE_X86_64 x86_64 i386 MacBookPro11,1 Darwin\r\n\r\n### Full Code Example\r\n\r\n```golang\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\ntype X string\r\ntype Y []byte\r\n\r\nfunc printX(x X) {\r\n\tfmt.Println(\"x: \", x)\r\n}\r\n\r\nfunc printY(y Y) {\r\n\tfmt.Println(\"y: \", y)\r\n\tfmt.Println(\"y as string: \", string(y))\r\n}\r\n\r\nfunc main() {\r\n\tx1 := X(\"x1\")\r\n\tprintX(x1)\r\n\t// The following does not work, since wrong type:\r\n\t// x2 := \"x2\"\r\n\t// printX(x2)\r\n\tprintX(\"x2\") // works, since auto coercion from type string to type X :(\r\n\r\n\ty1 := Y(\"y1\")\r\n\tprintY(y1)\r\n\tprintY([]byte{45, 45}) // works, since auto coercion from type []byte to type Y :(\r\n}\r\n```\r\nThe above code on Go Playground: https://play.golang.org/p/IFGDcg86Q0",
	"user": {
		"login": "unders",
		"id": 2189,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2015-12-19T14:48:08Z",
	"created_at": "2015-12-19T13:50:36Z",
	"updated_at": "2015-12-19T15:21:33Z"
}
