{
	"id": 51282491,
	"number": 4692,
	"state": "closed",
	"title": "runtime: allow recursion depth limit",
	"body": "\u003cpre\u003ePer discussion in #4494 and\n\u003ca href=\"https://groups.google.com/forum/?fromgroups=#\"\u003ehttps://groups.google.com/forum/?fromgroups=#\u003c/a\u003e!topic/golang-nuts/hfEHWJKnHls, it's hard\nto observe infinite recursion call in go. It's quite painful to find out root cause in a\nlarge code base at least for me.\n\nMy suggestion is to introduce an env variable called GOMAXRECURSIONS to set a hard limit\non depth of recursion call. Once the limit is hit, panic the running goroutine. User\nshould be able to change its value at runtime, just like GOMAXPROCS.\n\nThe default limit can be a very large number, e.g. max int64, or just reuse current\nstrategy (no limit) to avoid any potential performance regression.\n\nThis variable should be designed for DEBUG purpose. Users can choose to set it in debug\nversion and unset it in product version. Or just set it when product version sucks up\nabnormal cpu and memory without any clue. So, even if setting this variable will cause a\nprogram 50% slower, it's still acceptable to me.\n\nFYI: I don't think there would any scenario requires unlimit recursion call depth. It\nwould be great if go complier or vet or runtime could DETECT such infinite recursion and\nshow error/panic goroutine. Such detection logic would be quite risky (too smart,\nmaybe), so I wouldn't suggest to implement it. But I guess this is what I truly want...\nJust FYI...\u003c/pre\u003e",
	"user": {
		"login": "huandu",
		"id": 239739,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 9,
	"closed_at": "2014-12-08T10:24:51Z",
	"created_at": "2013-01-23T08:28:36Z",
	"updated_at": "2016-06-24T22:31:36Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
