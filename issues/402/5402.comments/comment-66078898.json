{
	"id": 66078898,
	"body": "\u003ca id=\"c14\"\u003e\u003c/a\u003eComment 14:\n\n\u003cpre\u003eok, i reproduced this using sysinternal's process explorer.\n\nthis is working as intended at least for now.\ngo 1.0.3 use 70MB committed memory at startup, go 1.1rc1 will use ~500MB.\ngo 1.0.3 could use at most 16GB heap whereas go 1.1rc1 supports 128GB,\nso the committed memory usage is proportionate to maximum heap size.\n\nthis has something to do with windows memory management (it will reserve\npage file even for memory that don't actually used.)\n\nyes, this does mean that you can't run a large number of helloworld Go\nprograms on 64-bit windows without allocating a very large page file.\n\ni will accept this issue, but i doubt we have simple solutions to this.\n(we can lazily reserve the heap metadata, but that surely won't happen\nbefore Go 1.1, this is \u003ca href=\"https://golang.org/issue/5236\"\u003eissue #5236\u003c/a\u003e)\n\nWe need to investigate why the binary uses ~500MB of committed memory\ninstead of ~256MB as needed on unix.\nafter that, we can merge this issue with \u003ca href=\"https://golang.org/issue/5236\"\u003eissue #5236\u003c/a\u003e.\u003c/pre\u003e\n\n_Labels changed: added **priority-later**, **expertneeded**, removed **priority-triage**._\n\n\n_Status changed to **Accepted**._",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-05-03T21:08:08Z",
	"updated_at": "2014-12-08T10:29:13Z"
}
