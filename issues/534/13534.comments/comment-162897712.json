{
	"id": 162897712,
	"body": "\u003e  The function foo in your example returns a value of type *Foo. That type implements the interface, so all is well. I'm not sure why you think it wouldn't be.\r\n\r\nAs I said in my description of the bug, if I take that returned struct and try to `t, ok := f.(BarInterface)` the compiler errors because it doesn't actually implement that interface because the method has a pointer receiver. The bug is that I shouldn't have been able to return it from that method at all. I should have gotten the compiler error on the return call. If I dereference the return so I return the actual struct instead of a pointer, I get the compile error I would expect. But by returning the pointer instead, no compile error happens and I'm allowed to return an invalid type.",
	"user": {
		"login": "stuarthicks",
		"id": 868156,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-08T14:29:33Z",
	"updated_at": "2015-12-08T14:32:02Z"
}
