{
	"id": 122465597,
	"body": "Unfortunately I don't know how to help you. In go1.5 cgo changed considerably. Go used to always link final executable, but now it calls gcc if you use cgo. I don't know much about gcc. You can revert to old way of linking by asking go command to use \"internal\" linker. I think you need to say:\r\n```\r\ngo build -gcflags \"-linkmode internal\" ...\r\n```\r\n\r\nAnother alternative might be to use my github.com/alexbrainman/odbc driver. I haven't used it for Oracle. But I don't see why it wouldn't work.\r\n\r\nAnother option would be for you to call into Oracle DLL directly with syscall.Syscall. Probably too much work if you start from scratch. But you never know.\r\n\r\nI also wouldn't give up on what you have. There might be bugs in the library you use. Make your example as small as possible. Check that things work every step of the way (you have call monitor, check all values are passed and returned correctly and so on). And add things slowly.\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-18T01:27:44Z",
	"updated_at": "2015-07-18T01:27:44Z"
}
