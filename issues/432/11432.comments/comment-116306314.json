{
	"id": 116306314,
	"body": "With regard to tail call optimization, one idea that has been discussed in the past (e.g., https://groups.google.com/d/msg/golang-nuts/JZZrFjFKkuM/MV9sSJsFlFEJ) is to add an explicit statement to the language to implement tail calls (\"become f()\").  Only for Go 2, though.\r\n\r\nI think that in the absence of some sort of explicit indication that a tail call is acceptable, the compiler should not implement them.  That is, I'm on the side of \"stack traces are really important.\"\r\n\r\nThat said, let me also mention http://www.dwarfstd.org/ShowIssue.php?issue=100909.2 which is an approach used by GCC to permit tail calls to be reconstructed from the debug info.  So one option is to only make a tail call when the call sequence can be reconstructed.\r\n\r\n(As far as fake PC values goes I think I would tentatively vote for your option 3, in the sense of use real PC values for simple addresses and completely different values for inlined addresses, but I have no strong feelings about it.)",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-28T18:16:09Z",
	"updated_at": "2015-06-28T18:16:09Z"
}
