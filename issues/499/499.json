{
	"id": 51276566,
	"number": 499,
	"state": "closed",
	"title": "json.Marshal/json.Unmarshal should work with pointers",
	"body": "by **carlisle.perera**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n\nCompile and execute the attached test.go\n\nWhat is the expected output? What do you see instead?\n\nExpected: {\u0026quot;Val\u0026quot;:42}\n\nActual: json cannot encode value of type *int\n{\u0026quot;Val\u0026quot;:\n\nWhat is your $GOOS?  $GOARCH?\n\n$GOOS=linux\n$GOARCH=386\n\nWhich revision are you using?  (hg identify)\n\nc82a8a767ef5+ tip\n\nPlease provide any additional information below.\n\nCurrently json.Marshal and json.Unmarshal do not work well with pointers, \ni.e. they are not taken into account generally. It is however quite common \nto have structs with pointers and to serialize/deserialize the whole graph.  \nMaking json.Marshal work with pointers is trivial - a nil pointer is \nwritten out as null and otherwise the value it points to is written (cf. \nthe attached patch). The changes to json.Unmarshal are not difficult \neither. Please consider changing the json package such that pointers are \n\u0026quot;first class\u0026quot;. If you agree to this change in general I am willing to help \nout implementing it.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/499/0/test.go\"\u003etest.go\u003c/a\u003e (334 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/499/0/struct.go.diff\"\u003estruct.go.diff\u003c/a\u003e (774 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:04:50Z",
	"created_at": "2010-01-06T13:44:57Z",
	"updated_at": "2016-06-24T19:12:28Z"
}
