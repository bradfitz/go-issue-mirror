{
	"id": 59356292,
	"number": 10037,
	"state": "closed",
	"title": "spec: go not as smart about log.Panicf() as it is about panic()",
	"body": "Go is quite happy with the following program:\r\n```.go\r\npackage main\r\n\r\nimport \"fmt\"\r\n// import \"log\"\r\n\r\nfunc foo(x int) int {\r\n\tif x == 0 {\r\n\t\treturn 0\r\n\t}\r\n\t// log.Panicf(\"Not yet handling case %d\", x)\r\n\tpanic(fmt.Sprintf(\"Not yet handling case %d\", x))\r\n}\r\n\r\nfunc main() {\r\n\tfoo(0)\r\n}\r\n```\r\nIt understands that panic() is a \"NoReturn\" function, and so it eliminates `foo()`'s responsibility of returning an int in that case.  It compiles and runs.  However, if you swap the `panic()` with the `log.Panicf()` line (and of course swap the imports), go now complains:\r\n```\r\n.\\panic.go:12: missing return at end of function\r\n```\r\nIt seems that something needs to inform the compiler that `log.Panicf()` (and other similar functions) are also NoReturn.\r\n\r\n$ go version\r\ngo version go1.4.1 windows/amd64",
	"user": {
		"login": "ellisonch",
		"id": 1285287,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2015-02-28T20:50:23Z",
	"created_at": "2015-02-28T20:14:39Z",
	"updated_at": "2016-06-25T02:02:17Z"
}
