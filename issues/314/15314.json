{
	"id": 148556861,
	"number": 15314,
	"state": "open",
	"title": "proposal: some way to reject unknown fields in encoding/json.Decoder",
	"body": "Currently, json.Unmarshal (and json.Decoder.Decode) ignore fields in the incoming JSON which are absent in a target struct.\r\n\r\nFor example, the JSON `{ \"A\": true, \"B\": 123 }` will successfully unmarshal into `struct { A bool }`.\r\n\r\nThis makes it difficult to do strict JSON parsing. One place this is an issue is in API creation, since you want to reject unknown fields on incoming JSON requests to allow safe introduction of new fields in the future (I've had this use case previously when working on a JSON REST API). It also can lead to typos leading to bugs in production: when a field is almost always the zero value in incoming JSON, you might not realise you're not even reading a misspelled field.\r\n\r\nI propose that a new method is added to `Decoder` to turn on this stricter parsing, in much the same way `UseNumber` is used today. When in strict parsing mode, a key in the incoming JSON which cannot be applied to a struct will result in an `MissingFieldError` error. Like `UnmarshalTypeError`, decoding would continue for the remaining incoming data.\r\n\r\n    d := json.NewDecoder(r.Body)\r\n    d.UseStrictFields()\r\n    err := d.Decode(myStruct)\r\n\r\n\r\n\r\n",
	"user": {
		"login": "okdave",
		"id": 1091335,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 22,
	"created_at": "2016-04-15T05:19:15Z",
	"updated_at": "2016-08-18T03:37:02Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	},
	"reactions": {
		"total_count": 5,
		"+1": 5
	}
}
