{
	"id": 91868582,
	"number": 11469,
	"state": "closed",
	"title": "gccgo, syscall: RawSockaddr struct field Data should be uint8 instead of int8 for ppc64le",
	"body": "The declaration for the struct RawSockaddr in gccgo from gcc5 branch when used on ppc64le does not match what is provided in golang for go 1.5.  Since they should be using the same syscalls on the ppc64le platform, the data structures should be the same.  Having different declarations in the two compilers is preventing some source code from building successfully with both compilers.  \r\n\r\nFrom gccgo in libgo/go/syscall/socket_linux.go:\r\n\r\ntype RawSockaddr struct {\r\n        Family uint16\r\n        Data   [14]int8\r\n}\r\n\r\nIn golang for go 1.5 on ppc64le, the generated ztypes_linux_ppc64le.go contains this:\r\n\r\ntype RawSockaddr struct {\r\n        Family uint16\r\n        Data   [14]uint8\r\n}\r\n\r\nMy understanding is that the original C header file that these are generated from is sys/socket.h and has Data declared as a char, which on ppc64le should be an unsigned 8 bit integer.  Based on that, the declaration provided in golang for go 1.5 on ppc64le is correct but incorrect for gccgo from gcc 5.0 using go 1.4.2.\r\n\r\nI suspect we don't want to just change the declaration in socket_linux.go in gccgo because it is not the same for all platforms.  ",
	"user": {
		"login": "laboger",
		"id": 9433228,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2015-08-03T21:18:15Z",
	"created_at": "2015-06-29T18:01:42Z",
	"updated_at": "2016-08-05T16:10:00Z",
	"milestone": {
		"id": 1069171,
		"number": 23,
		"title": "Gccgo"
	}
}
