{
	"id": 225405238,
	"body": "\u003e I'm not sure what to do about the general case, though. Right now the Call method is a hazard.\r\n\r\nIt has always been that way - when you use unsafe package you need to know what you're doing. syscall.Syscall and syscall.(*Proc).Call is how we call external code on windows - there is no way around it.\r\n\r\nUse of syscall.Syscall and syscall.(*Proc).Call has always been undocumented. From what I understand, we didn't document these rules because we still have not decided what should or should not be allowed.\r\n\r\n@ianlancetaylor I am surprised you are recommending to use new runtime.KeepAlive function. I specifically asked if runtime.KeepAlive is suitable for such things (see https://groups.google.com/forum/#!searchin/golang-dev/KeepAlive$20runtime/golang-dev/AlMCfgQLkdo/PSYsA9x3DQAJ), but was told that runtime.KeepAlive is to control when finalizers run, not to control garbage collector.\r\n\r\nI am not sure what you're planing to do on this issue. Especially considering it is marked as go1.7. I am sure we have similar issues already, for example #4318, #6907\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-12T02:04:55Z",
	"updated_at": "2016-06-12T02:04:55Z"
}
