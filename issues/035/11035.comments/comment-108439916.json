{
	"id": 108439916,
	"body": "@RLH w.r.t.\r\n\r\n\u003e so if the sizes of the objects being freed are similar to those been\r\n\u003e allocated fragmentation should not be a problem.\r\n\r\nIn Frequent Subgraph Mining the sizes of the subgraphs (and therefore\r\nthe allocations) grow as the program proceeds. This may be something of\r\na pathological case for a memory allocator. There are two things going\r\non\r\n\r\n1. The program is allocating space for the subgraphs (and their\r\n   serializations). The sizes of these allocations grow as the program\r\n   proceeds.\r\n\r\n2. The program is allocating many small objects throughout the run of\r\n   the program, such as function closures.\r\n\r\nSo, what I think tends to happen is the space where the subgraphs are\r\nallocated\r\n\r\na. Becomes too small during the next round\r\n\r\nb. Gets fragmented by other allocations\r\n\r\nThese are both hypothesis. I do not have data to back up those claims. I\r\nwill think on how to collect it.\r\n\r\n@ianlancetaylor I can provide the program and a data set to run it on\r\nimmediately (as well as an appropriate configuration). Providing a\r\nminimal test case may be harder as I am not sure what aspect of the\r\nprogram is causing the segmentation fault/dangling pointer. I will try\r\nand make a small program today that demonstrates it. I will also give a\r\nshot at making a program which replicates the allocation behavior of my\r\nprogram.\r\n\r\n",
	"user": {
		"login": "timtadh",
		"id": 38620,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-03T14:06:01Z",
	"updated_at": "2015-06-03T14:06:01Z"
}
