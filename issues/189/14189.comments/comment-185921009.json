{
	"id": 185921009,
	"body": "If a CPU is being taken away, setting GOMAXPROCS to 3 will give the process\na free CPU for the other non-Go stuff. It is worth a try but it doesn't\nexplain 1.4 not having this problem.\n\n\nOn Thu, Feb 18, 2016 at 2:55 PM, Ian Davis \u003cnotifications@github.com\u003e wrote:\n\n\u003e There are other support processes on that instance (e.g. consul agent) but\n\u003e they have very low cpu utilization and memory usage. GOMAXPROCS was 4 for\n\u003e that service (in 1.5 builds we don't set it at all so it's left as the Go\n\u003e default)\n\u003e\n\u003e I saw the interrupt/spike in the gc times instrumentation we also capture.\n\u003e I don't know what that is for sure but it could have been a refresh of an\n\u003e in-memory data cache that we use as part of our bid prediction logic. I can\n\u003e re-run the test with those settings if you think it is worth it.\n\u003e\n\u003e With the analysis you gave I agree that it's probably not the time spent\n\u003e in GC that is causing the latency. However there is lower latency when\n\u003e there are fewer GC cycles. Do you think it could be thread contention?\n\u003e Would repeating with different GOMAXPROCS give any insight?\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/14189#issuecomment-185889673\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-18T21:05:59Z",
	"updated_at": "2016-02-18T21:05:59Z"
}
