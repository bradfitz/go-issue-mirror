{
	"id": 185869962,
	"body": "Thanks Ian,\n\nLooking at the raw 1.6 gctrace numbers in go1.6-gogc100, go1.6-gogc200, and\ngo1.6-gogc400 the GC took up to 3% of the CPU depending on the heap size\nand the largest stop the world pauses was less than 3 ms. In fact of the\n300 or so GC cycles over the 3  10 minute runs only 1 showed a stop the\nworld pause greater than 2 ms. and only a handful were greater than 1 ms.\n\nThe 10 minute go1.6-gogc800 had an interesting single anomaly. Only 21 GC\ncycles happened over the entire run and all the cycles, except one,\ncompleted in less than 300ms including the concurrent phases. While the\ntotal CPU used by the GC was much less than 1% there was a single instance\n(gc 13 at 208 seconds into the run) of a 241 ms stop the world pause. I\ncan't account for this single very large pause time.\n\nI'm concluding that the latency problems are not related to the GC.\n\nThe only vaguely similar numbers that I have seen were when the OS /\nservice provider noticed that the application wasn't fully utilizing the\nallocated CPU resources and took them away after an asynchronous\npreemption.\n\nIt looks like GOMAXPROCS is set to 4, was anything else running on the\nmachine that might have reduced the number of HW threads available in some\nnon-deterministic fashion? Of particular interest would be such an\ninterrupt that might last 200 ms?\n\n- Rick\n\n\n\nOn Thu, Feb 18, 2016 at 10:35 AM, Ian Davis \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e Here are details of a similar degradation we are experiencing that is\n\u003e keeping us on Go 1.4.3. For context the service I took these measurements\n\u003e from is one instance in a cluster of real time advertising bidders. It\n\u003e receives bid requests via HTTP and performs two key operations that I\n\u003e timed. The first \"augment\" makes a single HTTP call to a couchbase cluster\n\u003e (using https://github.com/couchbase/go-couchbase) which returns about 5kB\n\u003e of protobuf encoded data. The second \"evaluate\" is a pure go section of the\n\u003e code that makes no network calls and is heavily optimised to avoid garbage\n\u003e generation. Responses from our service are expected to complete within 50ms.\n\u003e\n\u003e I ran each test for 10 minutes with gctrace=1 and various values of GOGC.\n\u003e Our instrumentation takes samples every 10 seconds. The service is running\n\u003e on an Amazon c4.xlarge instance with 4 cpus and 7.5GB RAM. At the time of\n\u003e the Go 1.5 and 1.4.3 tests the service was receiving about 1100 requests\n\u003e per second. When I ran the 1.6 tests the rate was about 1400 per second. We\n\u003e rate this service on this instance type at about 2000 per second max (under\n\u003e Go 1.4.3)\n\u003e\n\u003e  time  go version  GOGC\n\u003e ---------------------------\n\u003e  9:42       1.5.2   100\n\u003e  9:52       1.5.2   200\n\u003e 10.02       1.5.2   400\n\u003e 10:12       1.5.2   800\n\u003e 10:22       1.4.3  default\n\u003e 13:56       1.6     100\n\u003e 14:06       1.6     200\n\u003e 14:16       1.6     400\n\u003e 14:26       1.6     800\n\u003e\n\u003e Charts of timings of 99.9th (orange) and maximum values (blue) for augment\n\u003e operation.\n\u003e\n\u003e [image: augment-go1 5]\n\u003e \u003chttps://cloud.githubusercontent.com/assets/18375/13148113/cebd0972-d653-11e5-8d08-2f97091d7483.png\u003e\n\u003e [image: augment-go1 6]\n\u003e \u003chttps://cloud.githubusercontent.com/assets/18375/13148120/d3e3457e-d653-11e5-9002-5d0cd18f5959.png\u003e\n\u003e\n\u003e time     99.9% augment  max augment\n\u003e ------------------------------------\n\u003e  9:42       17.8ms         216.3ms\n\u003e  9:52       12.0ms         204.9ms\n\u003e 10:02        7.9ms         225.2ms\n\u003e 10:12        6.3ms         134.0ms\n\u003e 10:22        5.6ms         236.0ms\n\u003e 13:56       35.8ms         237.2ms\n\u003e 14:06        8.0ms         226.9ms\n\u003e 14:16        5.7ms         240.6ms\n\u003e 14:26        6.5ms         472.6ms\n\u003e\n\u003e And same for evaluate operation:\n\u003e\n\u003e [image: evaluate-go1 5]\n\u003e \u003chttps://cloud.githubusercontent.com/assets/18375/13148157/f85e0182-d653-11e5-91f0-b393e9976b3b.png\u003e\n\u003e [image: evaluate-go1 6]\n\u003e \u003chttps://cloud.githubusercontent.com/assets/18375/13148162/fd38aab8-d653-11e5-969f-af39f9dd1b28.png\u003e\n\u003e\n\u003e time     99.9% evaluate  max evaluate\n\u003e ------------------------------------\n\u003e  9:42       1.5ms         27.5ms\n\u003e  9:52       1.2ms          8.8ms\n\u003e 10:02       1.1ms         15.7ms\n\u003e 10:12       1.1ms         13.5ms\n\u003e 10:22       1.2ms        141.3ms\n\u003e 13:56       1.2ms        256.0ms\n\u003e 14:06       1.1ms        221.1ms\n\u003e 14:16       1.2ms        234.0ms\n\u003e 14:26       1.2ms        233.3ms\n\u003e\n\u003e Overall I would characterise the results as Go 1.5 and 1.6 result in\n\u003e slower timings than 1.4.3 but are more consistent. The 99.9 centiles were\n\u003e larger but there were fewer instances where the maximum time exceeded our\n\u003e deadlines.\n\u003e\n\u003e Attached are the gctrace outputs from each of the tests.\n\u003e\n\u003e go1.4-gogcdefault.txt\n\u003e \u003chttps://github.com/golang/go/files/136435/go1.4-gogcdefault.txt\u003e\n\u003e go1.5-gogc100.txt\n\u003e \u003chttps://github.com/golang/go/files/136432/go1.5-gogc100.txt\u003e\n\u003e go1.5-gogc200.txt\n\u003e \u003chttps://github.com/golang/go/files/136434/go1.5-gogc200.txt\u003e\n\u003e go1.5-gogc400.txt\n\u003e \u003chttps://github.com/golang/go/files/136433/go1.5-gogc400.txt\u003e\n\u003e go1.5-gogc800.txt\n\u003e \u003chttps://github.com/golang/go/files/136436/go1.5-gogc800.txt\u003e\n\u003e go1.6-gogc100.txt\n\u003e \u003chttps://github.com/golang/go/files/136437/go1.6-gogc100.txt\u003e\n\u003e go1.6-gogc200.txt\n\u003e \u003chttps://github.com/golang/go/files/136438/go1.6-gogc200.txt\u003e\n\u003e go1.6-gogc400.txt\n\u003e \u003chttps://github.com/golang/go/files/136439/go1.6-gogc400.txt\u003e\n\u003e go1.6-gogc800.txt\n\u003e \u003chttps://github.com/golang/go/files/136440/go1.6-gogc800.txt\u003e\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/14189#issuecomment-185778139\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-18T19:16:06Z",
	"updated_at": "2016-02-18T19:16:06Z"
}
