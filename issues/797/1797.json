{
	"id": 51278312,
	"number": 1797,
	"state": "closed",
	"title": "spec: link to Calls from method set discussion",
	"body": "\u003cpre\u003eIn the specification under Method sets it says\n\n    \u0026quot;The method set of any other named type T consists of all methods with receiver type T. The method set of the corresponding pointer type *T is the set of all methods with receiver *T or T (that is, it also contains the method set of T).\u0026quot;\n\nMy reading is that if I have an object of type T, then only methods that accept a T\n(i.e., not those accepting *T) are valid.\n\nBut this isn't true:\n\npackage main\nimport \u0026quot;fmt\u0026quot;\ntype Int int\nfunc (i Int) a() { fmt.Println(\u0026quot;a()\u0026quot;, i) }\nfunc (i *Int) b() { *i-=1;fmt.Println(\u0026quot;b()\u0026quot;, *i) }\nfunc main() {\n    var i Int = 5\n    i.a()\n    i.b()\n    fmt.Println(i)\n}\n\nProduces:\na() 5\nb() 4\n4\n\nSo Go is very sensibly taking the address of i to do the call to b().\n\nPerhaps the Method set docs could add an additional line:\n\n    \u0026quot;The method set of any other named type T consists of all methods with receiver type T. The method set of the corresponding pointer type *T is the set of all methods with receiver *T or T (that is, it also contains the method set of T). Methods with receiver *T may be called on *T pointers and on T values; in the latter case Go will pass T's address to the method.\u0026quot;\u003c/pre\u003e",
	"user": {
		"login": "mark-summerfield",
		"id": 1773348,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 7,
	"closed_at": "2014-12-08T10:09:56Z",
	"created_at": "2011-05-11T08:50:00Z",
	"updated_at": "2016-06-24T19:28:49Z",
	"milestone": {
		"id": 1061233,
		"number": 7,
		"title": "Go1"
	}
}
