{
	"id": 66053138,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eYou need to use parentheses to resolve the parsing ambiguity.\n\npackage main\n\ntype request struct {\n\tn int\n}\n\nfunc main() {\n\tchannel := make(chan request)\n\tif channel \u0026lt;- (request{42}) {\n\t\tprintln(\"Sent\")\n\t}\n}\n\nA parsing ambiguity arises when a composite literal using the TypeName form of the\nLiteralType appears between the keyword and the opening brace of the block of an \"if\",\n\"for\", or \"switch\" statement, because the braces surrounding the expressions in the\nliteral are confused with those introducing the block of statements. To resolve the\nambiguity in this rare case, the composite literal must appear within parentheses.\n\n   if x == (T{a,b,c}[i]) { ... }\n   if (x == T{a,b,c}[i]) { ... }\n\nComposite literals, The Go Programming Language Specification.\n\u003ca href=\"http://golang.org/doc/go_spec.html#Composite_literals\"\u003ehttp://golang.org/doc/go_spec.html#Composite_literals\u003c/a\u003e\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-11-01T14:04:03Z",
	"updated_at": "2014-12-22T05:53:07Z"
}
