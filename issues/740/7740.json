{
	"id": 51287140,
	"number": 7740,
	"state": "closed",
	"title": "cmd/gc: loss of precision in very low constant bits?",
	"body": "\u003cpre\u003eI expect this program to print the precision of the internal multiprecision floats used\nfor storing floating-point constants in the compiler. cmd/gc uses an Mpint with 16\n29-bit values, which should be 463 bits plus a sign bit. The program prints 434 on the\nplayground, which is 15*29-1, not 16*29-1. \n\nIt is possible that my logic here is wrong and that the program does not in fact compute\nthe precision of the internal floating point representation used for constants. However,\nbeing off by 29 in a compiler with 29-bit mp limbs cannot be a coincidence.\n\nI wonder if the final word in the compiler representation is being maintained or used\nincorrectly. It wouldn't be the first time.\n\npackage main\n\nimport (\n\t\u0026quot;fmt\u0026quot;\n\t\u0026quot;math\u0026quot;\n)\n\nconst ulp = (1.0+(2.0/3.0)) - (5.0/3.0)\n\nfunc main() {\n\tfmt.Println(math.Log(1/math.Abs(ulp))/math.Log(2))\n}\n\n\u003ca href=\"http://play.golang.org/p/_3XxPwYeVx\"\u003ehttp://play.golang.org/p/_3XxPwYeVx\u003c/a\u003e\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 6,
	"closed_at": "2015-04-02T22:51:13Z",
	"created_at": "2014-04-09T03:10:17Z",
	"updated_at": "2016-06-25T01:31:51Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
