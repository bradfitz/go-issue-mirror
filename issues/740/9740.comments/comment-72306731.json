{
	"id": 72306731,
	"body": "In the example, the output contains a lot of \\r, which, depending on the\r\nterminal used, might mean go to the start of the line, or change to the\r\nnext line.\r\n\r\nApparently, on unix, \\r means has the former meaning, so every line\r\nexcept the first will be overwritten again and again. As there is a final\r\n\\r in the output, the final result will be an empty 2nd line (without \\n,\r\nand then the shell prompt will appear on that line as usual). This\r\nmakes it appear that the program only outputs one line of message,\r\nbut it's not. You can verify that it does print out the other lines using\r\nhexdump(1) or redirect the stdout to a file.\r\n\r\nOn the playground, \\r is treated the same as \\n. This is not unreasonable\r\ngiven that the playground is not emulating any particular terminal.\r\n(And it does handle \\r\\n correctly as one line.)\r\n\r\nThis is a simplified example: https://play.golang.org/p/Hk3jiGbIii\r\n\r\nI don't think it's a bug of playground: it's not a terminal emulator.",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-31T06:22:55Z",
	"updated_at": "2015-02-01T19:54:33Z"
}
