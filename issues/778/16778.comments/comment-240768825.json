{
	"id": 240768825,
	"body": "#16772 \u003chttps://github.com/golang/go/issues/16772\u003e is about pointers\ncausing page faults. The problem here is that there is a pointer to some\nplace in the Go heap where the GC didn't allocate an object. The GC doesn't\nunderstand what is going on but it knows its internal data structures\naren't fully prepared to deal with such a situation. The difference in\nbetween 1.6 and 1.7 is that the 1.7 GC is now smart enough to detect the\nbug and report that it has found a reference to an object that it didn't\nallocate.\n\nExpect the GC to continue to get better at spotting and reporting these\nkinds of bugs. Think of using unsafe as purchasing technical debt lottery\nticket.\n\nOn Wed, Aug 17, 2016 at 11:56 PM, Keith Randall \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e Whether they point to Go allocated memory or not is irrelevant. You have\n\u003e always been able (and continue to be able) to have Go pointers point to\n\u003e differently allocated memory (globals, cgo-allocated stuff, syscall.Mmap,\n\u003e etc.). What's currently newly breaking in go 1.7 is pointer arithmetic on\n\u003e pointers that point to no memory, i.e. faulting pages.\n\u003e I'm thinking about maybe fixing this in some way. See my comment in #16772\n\u003e \u003chttps://github.com/golang/go/issues/16772\u003e\n\u003e\n\u003e â€”\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/16778#issuecomment-240617736\u003e, or mute\n\u003e the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AA7Wn2Jw5MyXF3_HWR0QMCZWElJeoPlGks5qg9gKgaJpZM4Jm-NY\u003e\n\u003e .\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 10,
		"+1": 5,
		"laugh": 5
	},
	"created_at": "2016-08-18T15:55:06Z",
	"updated_at": "2016-08-18T15:55:06Z"
}
