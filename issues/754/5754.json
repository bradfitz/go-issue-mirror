{
	"id": 51284137,
	"number": 5754,
	"state": "closed",
	"title": "Using slice of array literal as struct member causes broken pointer",
	"body": "by **m@mihasya.com**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n1. in a method, create an array using literal syntax\n2. take that array's slice using [:] syntax\n3. return the slice\n4. try to access the slice from caller\n\nSimplest reproducing program, courtesy of dominikh (Dominik Honnef) who helped me look\nat this: \n\u003ca href=\"http://play.golang.org/p/Yl6EXET0fc\"\u003ehttp://play.golang.org/p/Yl6EXET0fc\u003c/a\u003e\n\nMy original program, reproducing roughly the steps that triggered this in a real project\n(much more elaborate):\n\u003ca href=\"http://play.golang.org/p/s1WGRen-te\"\u003ehttp://play.golang.org/p/s1WGRen-te\u003c/a\u003e\n\nWhat is the expected output?\n0 3 foo\n1 3 bar\n0 3 foo\n1 3 bar\n\nWhat do you see instead?\n0 3 foo\n1 3 bar\n0 3 foo\n1 4457167 [string too long]\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g\n\nWhich operating system are you using?\nLinux 3.5.0-23-generic #35~precise1-Ubuntu SMP Fri Jan 25 17:13:26 UTC 2013 x86_64\nx86_64 x86_64 GNU/Linux\n\nWhich version are you using?  (run 'go version')\n1.1 (dominikh confirms this happens on tip as well)\n\nPlease provide any additional information below.\nThis is a strange and elusive bug; essentially, when using a slice that is produced\nusing the [:] notation on an array as a return value, the caller gets a bogus pointer.\nWhen I initially came across this bug, I was getting \u0026quot;invalid memory address or nil\npointer dereference\u0026quot; panics in the json Marshal function when trying to serialize\nthe return value (I was testing an HTTP framework, so I just had a method return the\nslice of [2]string{foo, bar}). When I tried to printf the value it was trying to pass to\nMarshal, it printed a bunch of binary data with strings that I recognized from other\nparts of the program, obviously causing serious concern.\n\nBelow are 2 programs that will reproduce this in various forms. dominikh from #go-nuts\nhelped me look at this and actually narrowed it down a bit further than my initial\nrepro, which just reproduced the sequence of events that happened in my program. His\nnotes below:\n\n\u0026quot;These are all the details I could find:\n\n- It breaks when using method values; it doesn't break when using\nfunction values.\n- It breaks when allowing inlining; it doesn't break when not allowing\ninlining\n- It breaks both with Go 1.1 and Go tip, so that makes bisecting it\nsomewhat easier.\u0026quot;\n\nAdditional \u0026quot;fun\u0026quot; info:\n- if you call printf(\u0026quot;%p\u0026quot;, foo[:]) in the \u0026quot;broken\u0026quot; method in the\nsecond program, it \u0026quot;fixes\u0026quot; the issue; I'm guessing this tips off the compiler\nsomehow. I discovered this while trying to see if I could demonstrate the pointer having\nthe wrong address\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:31:32Z",
	"created_at": "2013-06-22T16:16:14Z",
	"updated_at": "2016-06-24T22:43:05Z"
}
