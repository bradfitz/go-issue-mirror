{
	"id": 51899132,
	"number": 9307,
	"state": "open",
	"title": "os/exec: data race between StdinPipe and Wait",
	"body": "I believe there is an unintentional race in os/exec between Command.Wait and file operations. I am using go version go1.3 linux/amd64, but the race also reproduces with 1.4\r\n\r\nA test case follows.\r\n\r\n    package main\r\n\r\n    import (\r\n      \"fmt\"\r\n      \"log\"\r\n      \"os/exec\"\r\n    )\r\n\r\n    func main() {\r\n      cmd := exec.Command(\"/bin/echo\")\r\n      stdin, err := cmd.StdinPipe()\r\n      if err != nil {\r\n        log.Fatalf(\"StdinPipe: %v\", err)\r\n      }\r\n      if err := cmd.Start(); err != nil {\r\n        log.Fatalf(\"Start: %v\", err)\r\n      }\r\n      wrote := make(chan bool)\r\n      go func() {\r\n        defer close(wrote)\r\n        fmt.Fprint(stdin, \"echo\\n\")\r\n      }()\r\n      if err := cmd.Wait(); err != nil {\r\n        log.Fatalf(\"Wait: %v\", err)\r\n      }\r\n      \u003c-wrote\r\n    }\r\n\r\nTo observe the race, save this program to racedemo.go, and run:\r\n\r\n    go run -race racedemo.go\r\n\r\nThe result:\r\n\r\n    WARNING: DATA RACE\r\n    Read by goroutine 5:\r\n      os.(*File).write()\r\n          /usr/lib/google-golang/src/pkg/os/file_unix.go:211 +0xc5\r\n      os.(*File).Write()\r\n          /usr/lib/google-golang/src/pkg/os/file.go:139 +0xcb\r\n      os/exec.(*closeOnce).Write()\r\n          \u003cautogenerated\u003e:42 +0x81\r\n      fmt.Fprint()\r\n          /usr/lib/google-golang/src/pkg/fmt/print.go:223 +0xc3\r\n      main.func·001()\r\n          /usr/local/google/home/piatek/racedemo.go:21 +0x159\r\n\r\n    Previous write by main goroutine:\r\n      os.(*file).close()\r\n          /usr/lib/google-golang/src/pkg/os/file_unix.go:108 +0x19b\r\n      os.(*File).Close()\r\n          /usr/lib/google-golang/src/pkg/os/file_unix.go:97 +0x94\r\n      os/exec.(*closeOnce).close()\r\n          /usr/lib/google-golang/src/pkg/os/exec/exec.go:442 +0x45\r\n      os/exec.*closeOnce.(os/exec.close)·fm()\r\n          /usr/lib/google-golang/src/pkg/os/exec/exec.go:437 +0x33\r\n      sync.(*Once).Do()\r\n          /usr/lib/google-golang/src/pkg/sync/once.go:40 +0xb1\r\n      os/exec.(*closeOnce).Close()\r\n          /usr/lib/google-golang/src/pkg/os/exec/exec.go:437 +0x8e\r\n      os/exec.(*Cmd).closeDescriptors()\r\n          /usr/lib/google-golang/src/pkg/os/exec/exec.go:222 +0xa2\r\n      os/exec.(*Cmd).Wait()\r\n          /usr/lib/google-golang/src/pkg/os/exec/exec.go:367 +0x45c\r\n      main.main()\r\n          /usr/local/google/home/piatek/racedemo.go:23 +0x316\r\n\r\n    Goroutine 5 (running) created at:\r\n      main.main()\r\n          /usr/local/google/home/piatek/racedemo.go:22 +0x307\r\n\r\nThe race is on a reference to the file descriptor, which is assigned -1 upon close and read when writing. The documentation is not precise, but I suspect this race is unintentional.\r\n\r\nThe implementation of StdinPipe uses the internal closeOnce type to prevent concurrent calls to Close; see: http://golang.org/src/os/exec/exec.go#L436\r\n\r\nOnce wrapped, the file descriptor is added to the closeAfterWait slice, suggesting that concurrent calls to Close and Wait are to be expected. Yet, a concurrent Write will race as shown above. The partially concurrent API is odd.\r\n\r\nI believe it is common for code to block on Wait in one goroutine while writing to StdinPipe from other goroutines. (Indeed, I found such a race in a library at Google, prompting my investigation.)\r\n\r\nIf this race is expected behavior, I suggest updating the package docs to mirror the warning for use of StdoutPipe, e.g., \"It is incorrect to call Wait before all writes to the pipe have completed.\"\r\n",
	"user": {
		"login": "CSEMike",
		"id": 151865,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsDecision"
		},
		{
			"name": "RaceReport"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 14,
	"created_at": "2014-12-13T20:47:02Z",
	"updated_at": "2016-09-26T19:58:43Z",
	"milestone": {
		"id": 1709364,
		"number": 39,
		"title": "Go1.8Early"
	}
}
