{
	"id": 193040725,
	"body": "I take it that it's primarily so that rather than\r\n\r\n```\r\n// non test file\r\n\r\npackage P\r\n\r\nvar realStubMeOutForTesting = func() {\r\n   //test version, etc\r\n}\r\n\r\nfunc StubMeOutForTesting() {\r\n realStubMeOutForTesting()\r\n}\r\n```\r\n\r\n```\r\n//in p_test.go\r\n\r\npackage P\r\n\r\nfunc init() {\r\n   realStubMeOutForTesting = func() {\r\n      //version for testing\r\n   }\r\n}\r\n```\r\n\r\nyou could do\r\n\r\n```\r\n// in non-test build\r\n// +build !test\r\npackage P\r\n\r\nfunc StubMeOutForTesting() {\r\n //etc\r\n}\r\n```\r\n\r\n```\r\n//in p_test.go\r\npackage P\r\n\r\nfunc StubMeOutForTesting() {\r\n  //version for testing\r\n}\r\n```\r\n\r\nthe same way you would define different versions of the same function in, for example, `// +build windows` vs `// +build !windows`.\r\n\r\nSecondarily. the proposal seems to be so that if package T imports P it also gets the `// +build test` version of `StubMeOutForTesting`. That seems like a big change to the `go test` command, which would have to rebuild all the dependencies with the test tag, whether they use it or not, but only run tests for the specified packages. \r\n\r\nHaving APIs of imported packages change semantics during testing seems like an invitation for fragile and poorly thought out tests.",
	"user": {
		"login": "jimmyfrasche",
		"id": 375553,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-07T01:45:17Z",
	"updated_at": "2016-03-07T01:45:17Z"
}
