{
	"id": 51286833,
	"number": 7525,
	"state": "closed",
	"title": "gccgo: segmentation fault when compiling code with self-referential variable",
	"body": "\u003cpre\u003e\u003ca href=\"http://play.golang.org/p/akqH5uMoOD\"\u003ehttp://play.golang.org/p/akqH5uMoOD\u003c/a\u003e\n\nfor the above program, stored in x.go:\n\n$ gccgo x.go\ngccgo: internal compiler error: Segmentation fault (program go1)\n0x409850 execute\n\t/tmp/go-build-release/gccgo-srcdir/gcc/gcc.c:2841\n0x409b84 do_spec_1\n\t/tmp/go-build-release/gccgo-srcdir/gcc/gcc.c:4645\n0x40c197 process_brace_body\n\t/tmp/go-build-release/gccgo-srcdir/gcc/gcc.c:5928\n0x40c197 handle_braces\n\t/tmp/go-build-release/gccgo-srcdir/gcc/gcc.c:5842\n0x40a175 do_spec_1\n\t/tmp/go-build-release/gccgo-srcdir/gcc/gcc.c:5299\n0x40c197 process_brace_body\n\t/tmp/go-build-release/gccgo-srcdir/gcc/gcc.c:5928\n0x40c197 handle_braces\n\t/tmp/go-build-release/gccgo-srcdir/gcc/gcc.c:5842\n0x40a175 do_spec_1\n\t/tmp/go-build-release/gccgo-srcdir/gcc/gcc.c:5299\n0x40a916 do_spec_1\n\t/tmp/go-build-release/gccgo-srcdir/gcc/gcc.c:5414\n0x40c197 process_brace_body\n\t/tmp/go-build-release/gccgo-srcdir/gcc/gcc.c:5928\n0x40c197 handle_braces\n\t/tmp/go-build-release/gccgo-srcdir/gcc/gcc.c:5842\n0x40a175 do_spec_1\n\t/tmp/go-build-release/gccgo-srcdir/gcc/gcc.c:5299\n0x40b443 do_spec_2\n\t/tmp/go-build-release/gccgo-srcdir/gcc/gcc.c:4346\n0x40cad9 do_spec(char const*)\n\t/tmp/go-build-release/gccgo-srcdir/gcc/gcc.c:4313\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee \u0026lt;\u003ca href=\"http://go.ext.google.com/go/\u0026gt\"\u003ehttp://go.ext.google.com/go/\u0026gt\u003c/a\u003e; for instructions.\n\nThis is clearly pathological, but it probably shouldn't crash the compiler.\n\nFor the reference:\n- gc reports a type-checking loop\n\nprog.go:6: typechecking loop involving x\n\tprog.go:6 x.a\n\tprog.go:6 unsafe.Sizeof(x.a)\n\tprog.go:6 []unsafe.Sizeof(x.a)\n\tprog.go:7 \u0026lt;T\u0026gt;\n\tprog.go:7 x\nprog.go:6: invalid expression unsafe.Sizeof(x.a)\n\n- go/types complains that the variable x has no field or method a\n\nMore generally, the spec says nothing about the validity of this (or similar) programs,\nwhich is an issue by itself (to be filed).\n\nHere are similar cases:\n\n\u003ca href=\"http://play.golang.org/p/h9KlMctIqD\"\u003ehttp://play.golang.org/p/h9KlMctIqD\u003c/a\u003e (array bound is not constant)\n\u003ca href=\"http://play.golang.org/p/Ybsig_M8oF\"\u003ehttp://play.golang.org/p/Ybsig_M8oF\u003c/a\u003e (seg fault)\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "paranoiacblack",
		"id": 1035296,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2014-12-08T10:41:50Z",
	"created_at": "2014-03-12T20:52:22Z",
	"updated_at": "2016-06-25T01:29:39Z"
}
