{
	"id": 66057062,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eI only used the term because Robert told me that's what it's called.\n\nI've been told this has been discussed at length already but I haven't heard the\nbackstory / conclusion.  I want an interface-like type that lets me say a type is one of\na list of other types:\n\ntype Fetcher oneof {\n  FetcherAt\n  SeekFetcher\n  StreamingFetcher\n}\n\nYou could imagine it's implemented just like an interface, but the compiler checks for\nassignment compatibility are slightly different.\n\nThen callers look like:\n\nfunc Foo(f Fetcher) {\n    if sf, ok := f.(SeekFetcher); ok {\n        ....\n    }\n    if sf, ok := f.(StreamingFetcher); ok {\n        ....\n    }\n}\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-06-09T15:18:12Z",
	"updated_at": "2014-12-08T10:10:38Z"
}
