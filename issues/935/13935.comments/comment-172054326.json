{
	"id": 172054326,
	"body": "If I understand this proposal correctly, what you are suggesting is that\r\n```\r\n    fizzSwitch: switch {\r\n    case true:\r\n        print(num)\r\n    case num%3==0:\r\n        print(\"fizz\")\r\n        continue fizzSwitch // continues to check other cases for true also\r\n    case num%5==0:\r\n        print(\"buzz\")\r\n        continue fizzSwitch // continues to check other cases for true also\r\n    case true:\r\n        print(num)\r\n    }\r\n```\r\nis executed as\r\n```\r\n    if true {\r\n        print(num)\r\n    }\r\n    if num%3==0 {\r\n        print(\"fizz\")\r\n    }\r\n    if num%5==0 {\r\n        print(\"buzz\")\r\n    }\r\n    if true {\r\n        print(num)\r\n    }\r\n```\r\n(I am assuming that there's a continue missing in the first case because otherwise this example makes no sense: The first case always hits, and w/o a continue it doesn't matter that the other cases have one since they are never executed.)\r\n\r\nIn this special case it would even simplify to:\r\n```\r\n    print(num)\r\n    if num%3==0 {\r\n        print(\"fizz\")\r\n    }\r\n    if num%5==0 {\r\n        print(\"buzz\")\r\n    }\r\n    print(num)\r\n```\r\nwhich is much shorter and cleaner than the switch.\r\n\r\nThere's already quite a bit of overlap between switch statements and if-statements - mostly for historical reasons and notational convenience. This would increase this overlap and make it more difficult to decide what construct to use. It also doesn't seem to make the code shorter or clearer.\r\n\r\nI see no benefit in this construct and I am against this proposal, Go 2.0 or not.\r\n",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-15T19:01:12Z",
	"updated_at": "2016-01-15T19:01:12Z"
}
