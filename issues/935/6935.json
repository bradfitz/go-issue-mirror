{
	"id": 51285953,
	"number": 6935,
	"state": "closed",
	"title": "net: ponies: ListenBroadcastUDP(net string, ifi *Interface) (*UDPConn, error)",
	"body": "by **krolaw**:\n\n\u003cpre\u003eIn writing my DHCP library I have found:\nl, err := net.ListenPacket(\u0026quot;udp4\u0026quot;, \u0026quot;192.168.1.250:67\u0026quot;)\nListens on one interface but ignores broadcast packets coming to that interface.\n\nSo I end up using:\nl, err := net.ListenPacket(\u0026quot;udp4\u0026quot;, \u0026quot;:67\u0026quot;)\nListens on all interfaces and captures broadcast packets:\n\nOn a device with multiple interfaces this can be problematic.  The workaround so far has\nbeen to use iptables to block dhcp client packets coming in on unwanted interfaces.\n\nHowever, there is still the issue that any response packet doesn't go over the correct\ninterface.  When I try to open a new udp socket on the correct interface (using ip), \nand source port, it obviously doesn't work as the listener bound to that port.  The\nworkaround has been to open a new udp socket on a different port and use iptables to\nSNAT the source port on the way through to 67.\n\nHaving a ListenBroadcastUDP function would also make writing client side DHCP practical.\n\nThanks.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Unfortunate"
		}
	],
	"comments": 6,
	"closed_at": "2014-12-08T10:38:38Z",
	"created_at": "2013-12-11T20:30:10Z",
	"updated_at": "2016-06-25T01:23:43Z"
}
