{
	"id": 244078354,
	"body": "@strikerdw I agree now that the current implementation is OK for normal cacheable memory. Locking the scheduler lock to insert the preempted goroutine into the global queue guarantees that any HW thread that is able to see and pick up the goroutine from the global queue will necessarily be able to see all stores made by the goroutine before it was placed in the queue.\r\n\r\nSo I think the question now has to do with I/O and non-cacheable memory. As @laboger mentioned above we want to replace almost all HWSYNC instructions in our atomics with LWSYNC to improve performance. The only remaining HWSYNC would be in the seldom-used atomic.Store() routines. LWSYNC does not order I/O or noncacheable memory, and presumably C-language routines called from Go could be using these types of memory.",
	"user": {
		"login": "bcbrock",
		"id": 11968347,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-01T13:28:55Z",
	"updated_at": "2016-09-01T13:28:55Z"
}
