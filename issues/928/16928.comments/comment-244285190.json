{
	"id": 244285190,
	"body": "Go provides no way to write to an I/O register except by executing assembly code.  I'm perfectly willing to say that any assembly code that writes to an I/O register is responsible for executing `HWSYNC` instructions as needed.  I appreciate your concerns as to documenting what a programmer can assume about a context switch, but since approximately zero Go programmers will try to manipulate I/O registers it doesn't seem like a major concern.  Go isn't really that kind of language.  I think it's vastly more likely that anybody who wants to do that will call into a C library, so I can see a good argument for calling `HWSYNC` on the Go \u003c-\u003e C call paths.\r\n\r\nThe `SYNC` instruction that appears in Go assembly code does appear to assemble to an `HWSYNC` instruction (0x7c0004ac).  If we can replace this with a more efficient instruction, that would be great.\r\n\r\nWe do currently use `LWSYNC` in one case: to ensure that the garbage collector metadata for a new object is visible to the concurrent garbage collector before the object is actually used in any way.  See `publicationBarrier` in runtime/malloc.go.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-02T05:15:59Z",
	"updated_at": "2016-09-02T05:15:59Z"
}
