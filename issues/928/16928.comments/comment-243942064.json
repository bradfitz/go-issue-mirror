{
	"id": 243942064,
	"body": "\r\nHello, I'm the Derek Williams Bishop referred to. I'm a hardware guy and I know how to spell Go, but that's most of what I know about Go.  But I am the Power ISA memory model expert, so what I say here and in other emails will be slanted towards how the hardware works at the machine instruction level.  There's doubtless some translation to be had from that world-view into Go. \r\n\r\nAbove, ianlancetaylor says: \r\n\r\n_I believe there is room for debate once you understand that goroutines are not preempted at arbitrary points, but only at well understood and agreed upon points._\r\n\r\nPossibly yes. Can you give me some idea what these agreed upon and well understood points guarantee? Some of the usual hygiene that has to happen at context switches might be avoidable based on these conditions, but before I can have an opinion I need to know what guarantees those points give you. \r\n\r\nAnd randall77 says: \r\n\r\n_In addition to what Ian said, the Go scheduler uses synchronization\r\noperations to move a Goroutine from one P (one OS thread) to another.  So\r\nthe Go scheduler guarantees that after a goroutine stops, it will make sure\r\nall of its state gets to the new processor before the goroutine is started\r\nagain._\r\n\r\nInteresting. can you explain what synchronization operations those are? \r\n\r\nThey might fix things, but I can't tell because I have no idea what they are.  \r\n\r\nI apologize for my ignorance here. Once I have some idea what these things are and if they fix this, I'll be in a better position to comment. \r\n\r\nThanks, \r\n\r\nDerek \r\n\r\n",
	"user": {
		"login": "strikerdw",
		"id": 21373762,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-01T00:27:57Z",
	"updated_at": "2016-09-01T00:27:57Z"
}
