{
	"id": 171363267,
	"body": "I believe it's almost certainly a problem with the check.  This very stripped down version causes the same panic:\r\n\r\n```go\r\n// Package zlib implements zlib compression using libz, which should\r\n// be faster than the Go implementation\r\npackage zlib\r\n\r\n// #cgo LDFLAGS: -lz\r\n// #include \u003czlib.h\u003e\r\n// #include \u003cstdlib.h\u003e\r\n//\r\n// // inflateInit is a macro so we need to do this\r\n// int InflateInit(z_streamp s) {\r\n//     return inflateInit(s);\r\n// }\r\n//\r\n// // We do the zstream allocation in C, so that the Go\r\n// // GC doesn't inspect the pointers inside that are\r\n// // allocated by zlib and panic.\r\n// z_streamp new_zstream() {\r\n//     return (z_streamp) calloc(sizeof(z_stream), 1);\r\n// }\r\nimport \"C\"\r\n\r\nimport (\r\n\t\"errors\"\r\n\t\"io\"\r\n\t\"unsafe\"\r\n)\r\n\r\ntype reader struct {\r\n\ts  C.z_streamp\r\n}\r\n\r\n\r\n// NewReader creates a new ReadCloser. Reads from the returned ReadCloser\r\n// read and decompress data from r. The implementation buffers input and\r\n// may read more data than necessary from r. It is the caller's\r\n// responsibility to call Close on the ReadCloser when done.\r\nfunc NewReader(r io.Reader) (io.ReadCloser, error) {\r\n\trd := \u0026reader{\r\n\t\t// This allocates memory using C.calloc, so it's not go memory\r\n\t\ts:  C.new_zstream(),\r\n\t}\r\n\r\n\terr := C.InflateInit(rd.s) // \u003c-- Occasional panic here\r\n\tif err != C.Z_OK {\r\n\t\treturn nil, errors.New(\"Could not init inflate.\")\r\n\t}\r\n\r\n\treturn rd, nil\r\n}\r\n\r\nfunc (r *reader) Read(p []byte) (n int, err error) {\r\n\t// Do nothing to show we're not putting any Go pointers\r\n\t// in C memory.\r\n\treturn len(p), nil\r\n}\r\n\r\n// Close implements the io.Closer interface\r\n//\r\n// Calling Close does not close the wrapped io.Reader originally passed to NewReader\r\nfunc (r *reader) Close() error {\r\n\terr := C.inflateEnd(r.s)\r\n\tif err != C.Z_OK {\r\n\t\treturn errors.New(\"Could not end inflate\")\r\n\t}\r\n\r\n\tC.free(unsafe.Pointer(r.s))\r\n\r\n\tr.s = nil\r\n\t\r\n\treturn nil\r\n}\r\n```\r\n\r\nIn this case `cgoCheck=2` doesn't find any earlier errors ",
	"user": {
		"login": "jtsylve",
		"id": 594165,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-13T16:57:28Z",
	"updated_at": "2016-01-13T17:01:24Z"
}
