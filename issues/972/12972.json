{
	"id": 111965544,
	"number": 12972,
	"state": "closed",
	"title": "encoding/json: unexpected json.Unmarshal behavior with maps",
	"body": "http://golang.org/src/encoding/json/decode.go?s=2621:2669#L64\r\n\u003e To unmarshal a JSON object into a map, Unmarshal __replaces the map with an empty map__ and then adds key-value pairs from the object to the map.\r\n\r\nBut, while unmarshalling it behaves differently.\r\n\r\nhttp://play.golang.org/p/HTjkkCEQBV\r\n```go\r\nvar r map[string]string\r\nj := []byte(`{\"hello\": \"world\"}`)\r\n\r\njson.Unmarshal(j, \u0026r)\r\nfmt.Println(r)\r\n// map[string]string{\"hello\":\"world\"}\r\n\r\nja := []byte(`{\"world\": \"hello\"}`)\r\njson.Unmarshal(j, \u0026r)\r\nfmt.Println(r)\r\n// map[string]string{\"hello\":\"world\", \"world\":\"hello\"}\r\n// expected to eq map[string]string{\"world\": \"hello\"}\r\n```\r\n\r\nI'm totally in favor of this behavior but what docs is saying isn't correct.\r\n\r\nThat make sense? ",
	"user": {
		"login": "nandosousafr",
		"id": 818744,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Thinking"
		}
	],
	"comments": 9,
	"closed_at": "2015-12-03T14:54:40Z",
	"created_at": "2015-10-17T14:36:42Z",
	"updated_at": "2015-12-03T14:54:40Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
