{
	"id": 51288007,
	"number": 8305,
	"state": "closed",
	"title": "encoding/json: non-string map keys cause panic",
	"body": "by **2852914**:\n\n\u003cpre\u003eWhat does 'go version' print?\n\ngo version go1.3 linux/amd64\n\nWhat steps reproduce the problem?\n\n\u003ca href=\"http://play.golang.org/p/lVP3r71dWS\"\u003ehttp://play.golang.org/p/lVP3r71dWS\u003c/a\u003e\n\n1. Use a non-string key in a map to unmarshal into\n\nWhat happened?\n\nInvalid conversion inside the encoding/json decoder. Resulting in a panic.\n\nWhat should have happened instead?\n\nNo panic should've happened.\n\nPlease provide any additional information below.\n\nThere are two bugs in play here.\n\nThe first panic occurs because the check for a map[string]T does not exit the decoding\nstep when it doesn't hold. This is visible at\n\u003ca href=\"http://golang.org/src/pkg/encoding/json/decode.go#L481\"\u003ehttp://golang.org/src/pkg/encoding/json/decode.go#L481\u003c/a\u003e and the break on this line should\nbe a return.\n\nThe second panic, the one shown to the user occurs because the encoding/json package\nuses panics as a unwinding mechanism, and always expects the argument given to panic to\nbe an error. In the case of an unexpected panic which does not send an error type, the\ntype assertion on \u003ca href=\"http://golang.org/src/pkg/encoding/json/decode.go#L137\"\u003ehttp://golang.org/src/pkg/encoding/json/decode.go#L137\u003c/a\u003e fails and is\npropagated to the package user.\n\nI'm of the opinion that the type-assertion panic should not be fixed, since it will hide\nimplementation bugs such as these.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:46:09Z",
	"created_at": "2014-06-30T19:20:20Z",
	"updated_at": "2016-06-25T01:37:24Z",
	"milestone": {
		"id": 1067218,
		"number": 21,
		"title": "Go1.4"
	}
}
