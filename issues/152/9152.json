{
	"id": 51289164,
	"number": 9152,
	"state": "closed",
	"title": "spec: assignability of nested underlying types",
	"body": "\u003cpre\u003eOutput of go version: go version go1.2.1 linux/amd64\nI've installed go with the method described in\n\u003ca href=\"https://code.google.com/p/go-wiki/wiki/Ubuntu\"\u003ehttps://code.google.com/p/go-wiki/wiki/Ubuntu\u003c/a\u003e and apt-get claims that this is the newest\nversion\n\nCode : \u003ca href=\"http://play.golang.org/p/-157WKuyW6\"\u003ehttp://play.golang.org/p/-157WKuyW6\u003c/a\u003e\n\nCompiling and running it produces no errors and no output.\n\nAccording to the specifications, it should be a compiler error.\n\n\n\nFor the code to compile, the value of x (which is type int) must be assignable to a\nvariable of type t2.\n\nThe revalent clause from \u003ca href=\"http://golang.org/ref/spec#Assignability\"\u003ehttp://golang.org/ref/spec#Assignability\u003c/a\u003e is: \u0026quot;x's type V\nand T have identical underlying types and at least one of V or T is not a named\ntype.\u0026quot; (In this case, V is int, and T is t2).\n\nAccording to \u003ca href=\"http://golang.org/ref/spec#Types\"\u003ehttp://golang.org/ref/spec#Types\u003c/a\u003e : the underlying type of int is int, but\nthe underlying type of t2 is t1 (not int, since \u0026quot;T's underlying type is the\nunderlying type of the type to which T refers in its type declaration.\u0026quot;)\n\nMy suggestion would be to make the \u0026quot;underlying types\u0026quot; definition\n\u0026quot;transitive\u0026quot;.\u003c/pre\u003e",
	"user": {
		"login": "theemathas",
		"id": 6120103,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:50:00Z",
	"created_at": "2014-11-23T03:56:51Z",
	"updated_at": "2016-06-25T01:44:48Z"
}
