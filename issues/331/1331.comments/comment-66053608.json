{
	"id": 66053608,
	"body": "\u003ca id=\"c16\"\u003e\u003c/a\u003eComment 16:\n\n\u003cpre\u003eAnother minor issue turned up with:\n\nfind $GOROOT -name '*.go' | xargs -n 1 -t valgrind --leak-check=full -v\n--trace-children=yes --track-origins=yes gccgo -c\n\n==26726== 1 errors in context 1 of 51:\n==26726== Conditional jump or move depends on uninitialised value(s)\n==26726==    at 0x542141: Lex::require_line() (lex.cc:501)\n==26726==    by 0x54435A: Lex::next_token() (lex.cc:544)\n==26726==    by 0x544A42: Parse::peek_token() (parse.cc:64)\n==26726==    by 0x54655A: Parse::package_clause() (parse.cc:4603)\n==26726==    by 0x55366D: Parse::program() (parse.cc:4683)\n==26726==    by 0x51D87C: go_parse_input_files (go.cc:82)\n==26726==    by 0x82F1E7: toplev_main (toplev.c:579)\n==26726==    by 0x37FFA1EE7C: (below main) (in /lib64/libc-2.12.90.so)\n==26726==  Uninitialised value was created by a stack allocation\n==26726==    at 0x51A520: go_langhook_parse_file (go-lang.c:275)\n\nOne file that reproduces this is $GOROOT/src/cmd/5c/doc.go.\n\nI see various bits of GCC leak bytes here and there, but I guess nobody is too concerned\nabout that.\u003c/pre\u003e",
	"user": {
		"login": "alberts",
		"id": 409689,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-12-22T08:06:05Z",
	"updated_at": "2014-12-08T10:07:51Z"
}
