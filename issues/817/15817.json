{
	"id": 156512733,
	"number": 15817,
	"state": "closed",
	"title": "Assignment in scope reverts to value out of scope with goto",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\ngo version go1.6.2 linux/amd64 + play.golang.org.\r\n\r\n3. What did you do?\r\n\r\nhttps://play.golang.org/p/-T0o_8p5_T\r\n\r\n4. What did you expect to see?\r\n\r\n~~~\r\nErr: Hello world (inner scope)\r\nErr: Hello world (outer scope)\r\n~~~\r\n\r\nI expected this because the `err` variable which is modified in the inner scope is declared in the outer one. If inner scope uses `=` for assignment (instead of `:=`), then `err` holds it's value in the outer scope. An example of a working modification of err: https://play.golang.org/p/Fh0hwMvb53\r\n\r\n5. What did you see instead?\r\n\r\n~~~\r\nErr: Hello world\r\nErr: Should not exist\r\n~~~\r\n\r\nIf i declare `err` in the outer scope, and use `isCondition, err := conditional();` in the inner scope, then the value of `err` is reset to whatever it was when I hit `goto Finish` (jump to label).",
	"user": {
		"login": "titpetric",
		"id": 233360,
		"type": "User",
		"site_admin": false
	},
	"comments": 10,
	"closed_at": "2016-05-24T15:10:07Z",
	"created_at": "2016-05-24T13:50:25Z",
	"updated_at": "2016-05-25T17:15:48Z"
}
