{
	"id": 66074119,
	"body": "\u003ca id=\"c24\"\u003e\u003c/a\u003eComment 24:\n\n\u003cpre\u003eArie,\n\n\u0026gt; - cloned 33d3e7bbd3ef+ and ran:\n\u0026gt; - patched response.go\n\u0026gt; - ran: go test -v -run=TestDirectoryIfNotModified\n\u0026gt; =\u0026gt; reults are in err.txt\n\nThe reason you had errors from \"go test ...\" is that when you change Go repo revision,\nyou must rebuild everything first (I run make.bat on windows). Otherwise, all your tools\nand libraries do not match their source code, and they get confused.\n\nSo I do\n\n# hg id\n33d3e7bbd3ef+ tip\n# hg diff\ndiff -r 33d3e7bbd3ef src/pkg/net/http/response.go\n--- a/src/pkg/net/http/response.go      Mon Feb 25 10:37:17 2013 +1100\n+++ b/src/pkg/net/http/response.go      Tue Feb 26 10:41:31 2013 +1100\n@@ -116,6 +116,7 @@\n                }\n                return nil, err\n        }\n+       println(\"line=\", line)\n        f := strings.SplitN(line, \" \", 3)\n        if len(f) \u0026lt; 2 {\n                return nil, \u0026badStringError{\"malformed HTTP response\", line}\n#\n\nLooks like correct version and correct changes. Then I run make.bat. And then I run my\ntest:\n\n# cd $GOROOT/src/pkg/net/http\n# go test -v -run=TestDirectoryIfNotModified\n=== RUN TestDirectoryIfNotModified\nline= HTTP/1.1 200 OK\nline= HTTP/1.1 304 Not Modified\nline= HTTP/1.1 200 OK\n--- PASS: TestDirectoryIfNotModified (0.01 seconds)\nPASS\nok      net/http        0.023s\n#\n\n\u0026gt; Then I:\n\u0026gt; - built all sources (including your patch)\n\u0026gt; - ran all tests\n\u0026gt; =\u0026gt; results are in log.txt\n\nLooking at your log, I cannot see TestDirectoryIfNotModified failing. Your other log\n\u003ca href=\"https://golang.org/issue/4723?c=19\"\u003ehttps://golang.org/issue/4723?c=19\u003c/a\u003e does show this test failure. So,\nwhat is changed? Perhaps, you should run the test couple of times to see if it breaks at\nleast once. Please, report your results.\n\nAlso, after you finished with TestDirectoryIfNotModified, you could start investigating\nerrors in net/rpc. For example I made these changes:\n\n# cd $GOROOT/src/pkg/net/rpc\n# hg diff .\ndiff -r 33d3e7bbd3ef src/pkg/net/rpc/client.go\n--- a/src/pkg/net/rpc/client.go Mon Feb 25 10:37:17 2013 +1100\n+++ b/src/pkg/net/rpc/client.go Tue Feb 26 11:58:32 2013 +1100\n@@ -8,6 +8,7 @@\n        \"bufio\"\n        \"encoding/gob\"\n        \"errors\"\n+       \"fmt\"\n        \"io\"\n        \"log\"\n        \"net\"\n@@ -228,6 +229,16 @@\n        return DialHTTPPath(network, address, DefaultRPCPath)\n }\n\n+type logger struct {\n+       r io.Reader\n+}\n+\n+func (l *logger) Read(p []byte) (n int, err error) {\n+       n, err = l.r.Read(p)\n+       fmt.Printf(\"Read(%d) = %d bytes read %q, %v\\n\", len(p), n, string(p[:n]), err)\n+       return\n+}\n+\n // DialHTTPPath connects to an HTTP RPC server\n // at the specified network address and path.\n func DialHTTPPath(network, address, path string) (*Client, error) {\n@@ -240,7 +251,8 @@\n\n        // Require successful HTTP response\n        // before switching to RPC protocol.\n-       resp, err := http.ReadResponse(bufio.NewReader(conn), \u0026http.Request{Method:\n\"CONNECT\"})\n+       resp, err := http.ReadResponse(bufio.NewReader(\u0026logger{conn}),\n\u0026http.Request{Method: \"CONNECT\"})\n+       fmt.Printf(\"resp=%#v err=%v\\n\", resp, err)\n        if err == nil \u0026\u0026 resp.Status == connected {\n                return NewClient(conn), nil\n        }\n\nAnd here is my test output:\n\n# go test -run=TestHTTP\n2013/02/26 11:58:46 Test RPC server listening on 127.0.0.1:49574\n2013/02/26 11:58:46 Test HTTP RPC server listening on 127.0.0.1:55107\nRead(4096) = 34 bytes read \"HTTP/1.0 200 Connected to Go RPC\\n\\n\", \u0026lt;nil\u0026gt;\nline= HTTP/1.0 200 Connected to Go RPC\nresp=\u0026http.Response{Status:\"200 Connected to Go RPC\", StatusCode:200, Proto:\"HTTP/1.0\",\nProtoMajor:1, ProtoMinor:0, Header:http.Header{}, Body:(*http.body)(0x185d0080),\nContentLength:-1, TransferEncoding:[]string(nil), Close:true, Trailer:http.Header(nil),\nRequest:(*http.Request)(0x185c1000)} err=\u0026lt;nil\u0026gt;\n2013/02/26 11:58:46 NewServer test RPC server listening on 127.0.0.1:49048\nRead(4096) = 34 bytes read \"HTTP/1.0 200 Connected to Go RPC\\n\\n\", \u0026lt;nil\u0026gt;\nline= HTTP/1.0 200 Connected to Go RPC\nresp=\u0026http.Response{Status:\"200 Connected to Go RPC\", StatusCode:200, Proto:\"HTTP/1.0\",\nProtoMajor:1, ProtoMinor:0, Header:http.Header{}, Body:(*http.body)(0x185df5c0),\nContentLength:-1, TransferEncoding:[]string(nil), Close:true, Trailer:http.Header(nil),\nRequest:(*http.Request)(0x18583690)} err=\u0026lt;nil\u0026gt;\nPASS\nok      net/rpc 0.017s\n#\n\nCan you, please, show yours.\n\nThank you.\n\nAlex\u003c/pre\u003e",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-02-26T01:15:17Z",
	"updated_at": "2014-12-22T06:21:50Z"
}
