{
	"id": 51281535,
	"number": 4027,
	"state": "closed",
	"title": "Nil/empty slice discrepancy with bytes.Equal and reflect.DeepEqual",
	"body": "by **jacobsa@google.com**:\n\n\u003cpre\u003ebytes.Equal and reflect.DeepEqual differ in their comparison of a nil slice\nwith an empty slice. This program:\n\n    package main\n    \n    import \u0026quot;bytes\u0026quot;\n    import \u0026quot;fmt\u0026quot;\n    import \u0026quot;reflect\u0026quot;\n    \n    func main() {\n    \tvar a []byte = nil\n    \tb := []byte{}\n    \n    \tfmt.Println(\u0026quot;bytes.Equal:       \u0026quot;, bytes.Equal(a, b))\n    \tfmt.Println(\u0026quot;reflect.DeepEqual: \u0026quot;, reflect.DeepEqual(a, b))\n    }\n\nprints the following output:\n\n    bytes.Equal:        true\n    reflect.DeepEqual:  false\n\nI'm not entirely sure this is a bug, but both functions make reference to the\nbuilt-in `==` operator in the definitions of their semantics, even though that\noperator is not defined for slices (except for comparing to nil). Thus you\nmight expect from the documentation that they behave identically. I wouldn't\ncomplain if this was closed as working as intended, but anecdotally the\ndiscrepancy surprised me.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:21:23Z",
	"created_at": "2012-09-01T08:12:58Z",
	"updated_at": "2016-06-24T22:23:59Z"
}
