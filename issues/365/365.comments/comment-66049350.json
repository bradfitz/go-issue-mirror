{
	"id": 66049350,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5 by **timjrtheultimate**:\n\n\u003cpre\u003eI hit this on RHEL4.6, kernel 2.6.9.  This is what I see:\n\ntimjr$ strace /lib64/ld-linux-x86-64.so.2 ./6.out \nexecve(\"/lib64/ld-linux-x86-64.so.2\", [\"/lib64/ld-linux-x86-64.so.2\"...,\n\"./6.out\"...], [/* 52 vars */]) = 0\nuname({sys=\"Linux\", node=\"sereg8827\", ...}) = 0\nbrk(0)                                  = 0x552abc0000\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2a95556000\nopen(\"./6.out\", O_RDONLY)               = 3\nread(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\2\\0\u003e\\0\\1\\0\\0\\0\\260hB\\0\\0\\0\\0\\0\"..., 832) = 832\nfstat(3, {st_mode=S_IFREG|0777, st_size=921036, ...}) = 0\ngetcwd(\"/export/crawlspace/timjr/builds/go/release/src/pkg/archive/tar\", 128) = 63\nmmap(0x400000, 225280, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3,\n0) = 0x400000\nmmap(0x437000, 315392, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3,\n0x37000) = 0x437000\nmmap(0x484000, 2181400, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS,\n-1, 0) = 0x484000\nmmap(0x9900000000, 380928, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE,\n3, 0x84000) = -1 ENOMEM (Cannot allocate memory)\nclose(3)                                = 0\nwritev(2, [{\"./6.out\", 7}, {\": \", 2}, {\"error while loading shared libra\"..., 36},\n{\": \", 2}, {\"./6.out\", 7}, {\": \", 2}, {\"failed to map segment from share\"..., 40},\n{\": \", 2}, {\"Cannot allocate memory\", 22}, {\"\\n\", 1}], 10./6.out: error while loading\nshared libraries: ./6.out: failed to map segment from shared object: Cannot allocate\nmemory\n) = 121\nexit_group(127)                         = ?\n\nthe 0x9900000000 address that ld.so can't mmap can be seen here:\n\ntimjr$ readelf -l 6.out\n\nElf file type is EXEC (Executable file)\nEntry point 0x4268b0\nThere are 7 program headers, starting at offset 64\n\nProgram Headers:\n  Type           Offset             VirtAddr           PhysAddr\n                 FileSiz            MemSiz              Flags  Align\n  PHDR           0x0000000000000040 0x0000000000400040 0x0000000000400040\n                 0x0000000000000188 0x0000000000000188  R E    1000\n  INTERP         0x00000000000007e4 0x00000000004007e4 0x00000000004007e4\n                 0x000000000000001c 0x000000000000001c  R      1\n      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]\n  LOAD           0x0000000000000800 0x0000000000400800 0x0000000000400800\n                 0x000000000003631c 0x000000000003631c  R E    1000\n  LOAD           0x0000000000037000 0x0000000000437000 0x0000000000437000\n                 0x000000000004cd28 0x0000000000261918  RW     1000\n  LOAD           0x0000000000084000 0x0000009900000000 0x0000009900000000\n                 0x000000000005cdcc 0x000000000005cdcc  RW     1000\n  DYNAMIC        0x00000000000695a8 0x00000000004695a8 0x00000000004695a8\n                 0x0000000000000090 0x0000000000000090  RW     8\n  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000\n                 0x0000000000000000 0x0000000000000000  RW     8\n\n Section to Segment mapping:\n  Segment Sections...\n   00     \n   01     .interp \n   02     .text \n   03     .dynsym .dynstr .hash .dynamic .data .bss \n   04     .gosymtab .gopclntab \n   05     .dynamic \n   06     \n\nI was able to get a working binary by changing the address of that segment to the one\nthat go normally uses in a 32-bit build.  I'll attach a patch that you can try.\n\nI have no idea where that address comes from, what would be a good choice, or what\nit's conflicting with, as yet.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-02-04T00:49:49Z",
	"updated_at": "2014-12-08T10:04:17Z"
}
