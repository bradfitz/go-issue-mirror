{
	"id": 219309983,
	"body": "Another fun example\r\n```\r\ntype big [1 \u003c\u003c 20]byte\r\ntype T struct {\r\n\tx, y *big\r\n}\r\nvar p *big\r\nfunc f(t T) *big {\r\n\tt = T{p, nil}\r\n\tp = nil\r\n\truntime.GC()\r\n\treturn t.x\r\n}\r\n```\r\n`t` is decomposed by SSA into its individual parts.  `t.y` is never used, so it isn't spilled.  That leaves the old value of `t.y` on the stack when `GC` is called.  (The legacy compiler overwrote the old value of `t.y` with `nil`.)\r\n\r\nThis is similar to the `p = nil` example I mentioned a few comments ago, but adds the decomposition problem to the mix.\r\n",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-15T20:54:53Z",
	"updated_at": "2016-05-15T20:54:53Z"
}
