{
	"id": 51281885,
	"number": 4262,
	"state": "closed",
	"title": "flag: add and support implicit boolFlag interface ",
	"body": "by **brady**:\n\n\u003cpre\u003eIn the flag module the following code:\n\nif fv, ok := flag.Value.(*boolValue); ok { // special case: doesn't need an arg\n  if has_value {\n    if err := fv.Set(value); err != nil {\n      return false, f.failf(\u0026quot;invalid boolean value %q for  -%s: %v\u0026quot;, value, name, err)\n    }\n  } else {\n    fv.Set(\u0026quot;true\u0026quot;)\n}\n\nEnsures that its completely impossible to implement any kind of call back when a flag is\nprovided without value. Would it be possible to define an interface that has say a\n\u0026quot;Default()\u0026quot; function, and use that here to cast/call so that its possible for\na third party flag to have access to this special case?\n\nExamples of implementations where this is useful:\n\n# Count the number of times -v is passed.\n./count_dash_v -v -v -v -v\n\n# Provide very specific help (and then exit)\n./special_help --help_about_some_topic\n\netc.\n\nIf desired I can provide a patch as well, I figure this would be trivial to implement\noutside of the inevitable naming war. =)\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Suggested"
		}
	],
	"comments": 7,
	"closed_at": "2014-12-08T10:22:41Z",
	"created_at": "2012-10-19T08:00:51Z",
	"updated_at": "2016-06-24T22:26:45Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
