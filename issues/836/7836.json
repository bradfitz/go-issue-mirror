{
	"id": 51287279,
	"number": 7836,
	"state": "closed",
	"title": "compress/flate: need a way to efficiently reuse the decompressor",
	"body": "by **mail@joachim-bauch.de**:\n\n\u003cpre\u003eIt seems there is no way to recover from an EOF error when decompressing a stream.\n\nIn my use case (\u0026quot;permessage-deflate\u0026quot; extension for WebSockets), multiple parts\nof a compressed streams are received with a small header each:\n\n  Header1a Compressed1a Header1b Compressed1b ...\n\nWhen I received \u0026quot;Header1a\u0026quot;, I wrap my (\u0026quot;io.LimitReader\u0026quot;-wrapped)\nconnection in a \u0026quot;flate.Reader\u0026quot; and start decompressing\n\u0026quot;Compressed1a\u0026quot; until I get an EOF from \u0026quot;Read\u0026quot;. Sometime later I\nreceive \u0026quot;Header1b\u0026quot; and should be able (after resetting the\n\u0026quot;LimitReader\u0026quot;) to use the same \u0026quot;flate.Reader\u0026quot; for further\ndecompression.\n\nThis however doesn't work as the previous EOF is cached in \u0026quot;f.err\u0026quot;, so no more\nreading happens on the underlying stream.\n\nThere also is no way to get the dictionary of the reader to create a new reader with an\nexisting dict for decompressing \u0026quot;Compressed1b\u0026quot;.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 12,
	"closed_at": "2014-12-08T10:43:27Z",
	"created_at": "2014-04-22T14:22:57Z",
	"updated_at": "2016-06-25T01:32:48Z",
	"milestone": {
		"id": 1067218,
		"number": 21,
		"title": "Go1.4"
	}
}
