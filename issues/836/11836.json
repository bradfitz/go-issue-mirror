{
	"id": 96728245,
	"number": 11836,
	"state": "closed",
	"title": "bufio: Support empty final token from a SplitFunc",
	"body": "This is in reference to the golang-nuts thread [How to return an empty final token from a bufio.SplitFunc](https://groups.google.com/d/topic/golang-nuts/h8JeQPdvhJM/discussion).\r\n\r\n*Problem*: It's not currently possible to write a \"pure\" `bufio.SplitFunc` function that either (a) returns an empty final token or (b) wants to discard all text beyond some point in the input stream.  Instead, a package must implement a `bufio.SplitFunc` as a method on a state object, as in @robpike's [demonstration of how to treat newlines as separators](https://play.golang.org/p/Ivm2C02cb4).\r\n\r\n*Proposed solution*: Modify the implementation of [`Scanner.Scan`](https://golang.org/pkg/bufio/#Scanner.Scan) to check the concrete type of the error returned by the `bufio.SplitFunc` function.  If it's some sentinel value such as `io.EOF` or, say, a new `bufio.EndOfScan`, `Scanner.Scan` should store the returned token, as it does in the normal, non-error case, and return `false`.  A subsequent scan could then continue reading the input stream from where the previous scan left off, making the proposed solution additionally useful for parsing a block of one token type followed by a block of a different token type.  The proposed change to `Scanner.Scan` should not affect any existing code, especially if a new `Error` type like `bufio.EndOfScan` is used as the sentinel.\r\n\r\nâ€” Scott",
	"user": {
		"login": "spakin",
		"id": 650041,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "robpike",
		"id": 4324516,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2015-09-25T21:46:30Z",
	"created_at": "2015-07-23T04:54:45Z",
	"updated_at": "2016-09-27T13:31:47Z",
	"milestone": {
		"id": 1182837,
		"number": 25,
		"title": "Go1.6Early"
	}
}
