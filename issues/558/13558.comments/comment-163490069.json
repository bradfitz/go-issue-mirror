{
	"id": 163490069,
	"body": "An alternative would be to pay the penalty at Read time\r\nBelow is the current source code with a proposed addition.\r\n\r\n```\r\nfunc (mr *multiReader) Read(p []byte) (n int, err error) {\r\n\tfor len(mr.readers) \u003e 0 {\r\n```\r\nProposed addition:\r\n```\r\n        if len(mr.readers) == 1 {\r\n            if r, ok := mr.readers[0].(*multiReader); ok {\r\n                mr.readers = r.readers\r\n                continue\r\n            }\r\n        }\r\n```\r\n```\r\n\t\tn, err = mr.readers[0].Read(p)\r\n\t\tif n \u003e 0 || err != EOF {\r\n\t\t\tif err == EOF {\r\n\t\t\t\t// Don't return EOF yet. There may be more bytes\r\n\t\t\t\t// in the remaining readers.\r\n\t\t\t\terr = nil\r\n\t\t\t}\r\n\t\t\treturn\r\n\t\t}\r\n\t\tmr.readers = mr.readers[1:]\r\n\t}\r\n\treturn 0, EOF\r\n}\r\n```\r\n\r\nThis is probably better because it doesn't change the runtime of the function. The previous solution could make a sequence of calls to MultiReader with non-MultiReaders expensive, like when combining many short buffers. It would become O(readers contained) instead of O(readers passed), the latter of which is probably more expected. It also eliminates the possibly bad runtime from the successive calls to nested multiReaders that contain few actual Readers that originally prompted the proposal. ",
	"user": {
		"login": "ajwerner",
		"id": 1839234,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-10T05:21:58Z",
	"updated_at": "2015-12-10T05:21:58Z"
}
