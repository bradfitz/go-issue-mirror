{
	"id": 51276200,
	"number": 223,
	"state": "closed",
	"title": "feature request: some way of hooking into GC destruction of objects for resource management",
	"body": "\u003cpre\u003eCurrently, if a go structure contains a reference to some underlying OS\nresource (say a fd, or memory mmap'd from an fd), there is no way to ensure\nthat resource is released when the structure is garbage collected.\n\nFor example, if I call os.Open() many times, and fail to always call\nClose() on the File objects when done, the underlying fds will leak even\nthough the GC ensures the File objects themselves do not leak.\n\nThis could be accomplished with some form of weak references (allowing one\nto build the necessary infrastructure), a finalization method, etc.  Exact\nmechanism is not critical, just that there be some way for library code to\nensure proper cleanup on GC.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2014-12-08T10:03:43Z",
	"created_at": "2009-11-16T10:56:52Z",
	"updated_at": "2016-06-24T19:05:09Z"
}
