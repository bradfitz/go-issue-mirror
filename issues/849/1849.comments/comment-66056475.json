{
	"id": 66056475,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eVincent,\n\nYou could replace argument list with this:\n\nargs_cmd := []string{\"cmd\", \"/c\", \"cd\", `C:\\Program Files`, \"\u0026\u0026\", \"dir\", \"/a\", \"/b\"}\n\nto get your example to work.\n\nBut I can see your problem now. I think, in essence, the problem is that cmd.exe (ms\nown) and some others don't use syscall.CommandLineToArgv to parse command line into\narguments, but employ some of their own algorithm to do it. Is that a fare description?\n\nIf that is the case, then I agree with you, I can't see any other way, but to provide go\nusers with a way to not use \"standard\" procedure of encoding arguments into command\nline, but to employ their own.\n\nYour proposed change \u003ca href=\"http://golang.org/cl/4548050/\"\u003ehttp://golang.org/cl/4548050/\u003c/a\u003e looks simple enough, but\nthere is too much mystery / magic in it - user needs to remember to put 0 as first char\nof parameters it doesn't want to escape. I would rather do something similar to your\noriginal proposal. Perhaps, we could have new field ProcAttr.CmdLine:\n\ntype ProcAttr struct {\n        Dir        string\n        Env        []string\n        Files      []int\n        HideWindow bool\n}       CmdLine    string\n\nwhere user can specify \"command line\" encoded and escaped to his / her taste.\nsyscall.StartProcess will check for ProcAttr.CmdLine not empty and use it, ignoring argv.\n\nRuss, please comment.\n\nAlex\u003c/pre\u003e\n\n_Labels changed: added **os-windows**, **packagechange**._\n\n\n_Status changed to **Accepted**._",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-05-25T03:14:51Z",
	"updated_at": "2014-12-08T10:10:11Z"
}
