{
	"id": 66068574,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eSure, I added a simple Write(1, ...) to anyToSockaddr and here's what I got:\n\nanyToSockaddr: Addr.Len = 0 Addr.Family = 0\nanyToSockaddr failed, nfd = 3\n2012/07/25 00:07:49 accept tcp 0.0.0.0:12345: address family not supported by protocol\nfamily\nanyToSockaddr: Addr.Len = 0 Addr.Family = 0\nanyToSockaddr failed, nfd = 4\n2012/07/25 00:07:49 accept tcp 0.0.0.0:12345: address family not supported by protocol\nfamily\nanyToSockaddr: Addr.Len = 0 Addr.Family = 0\nanyToSockaddr failed, nfd = 4\n2012/07/25 00:07:55 accept tcp 0.0.0.0:12345: address family not supported by protocol\nfamily\nanyToSockaddr: Addr.Len = 0 Addr.Family = 0\nanyToSockaddr failed, nfd = 4\n2012/07/25 00:07:56 accept tcp 0.0.0.0:12345: address family not supported by protocol\nfamily\n\nThis is especially cool since I found how to reproduce it basically 100% of the time.\nServer up on my machine (Mac OS X 10.7.4), then I run this:\n\n$ nmap -p 80 myhost\n\nOn my linux box in London (the port 80 is forwarded by my router to port 12345 on my\nmachine). Turns out it happens to work like a charm and reliably triggers this bug. :)\nHere's a diff in pkg/syscall where I added that print:\n\ndiff -r 5e806355a9e1 src/pkg/syscall/syscall_bsd.go\n--- a/src/pkg/syscall/syscall_bsd.go    Thu Jun 14 12:50:42 2012 +1000\n+++ b/src/pkg/syscall/syscall_bsd.go    Wed Jul 25 00:14:05 2012 +0400\n@@ -294,6 +294,7 @@\n                }\n                return sa, nil\n        }\n+       Write(1, []byte(\"anyToSockaddr: Addr.Len = \" + itoa(int(rsa.Addr.Len)) + \"\nAddr.Family = \" + itoa(int(rsa.Addr.Family)) + \"\\n\"))\n        return nil, EAFNOSUPPORT\n }\n \n@@ -306,6 +307,7 @@\n        }\n        sa, err = anyToSockaddr(\u0026rsa)\n        if err != nil {\n+               Write(1, []byte(\"anyToSockaddr failed, nfd = \" + itoa(nfd) + \"\\n\"))\n                Close(nfd)\n                nfd = 0\n        }\n\nIt's probably just like I suspected, socket is accepted by due to a race in the kernel\nthere's no in_pcb associated anymore, so there's no sockaddr and thus it's not copied to\nuser space, leaving all zeroes.\n\nIf you're interested this is a possible call chain during accept:\n\n\u003ca href=\"http://fxr.watson.org/fxr/source/bsd/kern/kpi_socket.c?v=xnu-1699.24.8#L154\"\u003ehttp://fxr.watson.org/fxr/source/bsd/kern/kpi_socket.c?v=xnu-1699.24.8#L154\u003c/a\u003e\n\u003ca href=\"http://fxr.watson.org/fxr/source/bsd/netinet/tcp_usrreq.c?v=xnu-1699.24.8\"\u003ehttp://fxr.watson.org/fxr/source/bsd/netinet/tcp_usrreq.c?v=xnu-1699.24.8\u003c/a\u003e;im=10#L537\n\u003ca href=\"http://fxr.watson.org/fxr/source/bsd/netinet/in_pcb.c?v=xnu-1699.24.8\"\u003ehttp://fxr.watson.org/fxr/source/bsd/netinet/in_pcb.c?v=xnu-1699.24.8\u003c/a\u003e;im=10#L1072\n\nI'm not sure there's any sane way to fix (or even workaround) it in go though... it's\njust not supposed to work like that. :(\u003c/pre\u003e",
	"user": {
		"login": "snaury",
		"id": 53117,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-07-24T20:21:28Z",
	"updated_at": "2014-12-08T10:20:20Z"
}
