{
	"id": 66082139,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eThe spec says ( \u003ca href=\"http://tip.golang.org/ref/spec#Operators\"\u003ehttp://tip.golang.org/ref/spec#Operators\u003c/a\u003e ):\n\n\"If the left operand of a non-constant shift expression is an untyped constant, the type\nof the constant is what it would be if the shift expression were replaced by its left\noperand alone.\"\n\nFor:\n\nuint64(1 \u0026lt;\u0026lt; s)\n\nwe get:\n\nuint64(1)\n\nFurthermore, the spec says ( \u003ca href=\"http://tip.golang.org/ref/spec#Constants\"\u003ehttp://tip.golang.org/ref/spec#Constants\u003c/a\u003e ):\n\n\"A constant may be given a type explicitly by a constant declaration or conversion, or\nimplicitly when used in a variable declaration or an assignment or as an operand in an\nexpression.\"\n\nTherefore, in this case, the type of 1 is uint64 since it's given an explicit type via a\nconversion.\n\nThere may be a bug in go/types or elsewhere, but the spec is reasonably clear about the\ntype of 1 here.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-07-08T17:59:17Z",
	"updated_at": "2014-12-22T06:26:30Z"
}
