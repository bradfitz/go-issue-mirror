{
	"id": 51286288,
	"number": 7168,
	"state": "closed",
	"title": "scrypt: Memory Leak ",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n1. Download and compile this simple program: \u003ca href=\"http://play.golang.org/p/-R17xRHt93\"\u003ehttp://play.golang.org/p/-R17xRHt93\u003c/a\u003e\n2. Run it.\n3. The program will block after a few seconds. While it is blocked, use your OS tools\n(like ps(1)) to see the amount of memory it is using.\n\nWhat is the expected output?\nThe 1GB or so memory allocated in the scrypt package should have been released (garbage\ncollected) by the time the program blocks, not least due to the runtime.GC() call.\n\nWhat do you see instead?\nThe said 1GB remains allocated. It also remains allocated in all other programs using\nthe scrypt package with the key-generation parameters used in the example program.\n\nI also note that this leak appears to be there, too, in the revision 95 of the scrypt\npackage, that is before the latest speed-up changes.\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n6g\n\n\nWhich operating system are you using?\nlinux/amd64\n\nWhich version are you using?  (run 'go version')\ngo version go1.2 linux/amd64\n\nPlease provide any additional information below.\nThe heap profile tool (pprof) appears helpless in pointing out the point at which the\n1GB block is allocated, but it is certain it is allocated when the `v' byte slice is\ncreated in scrypt.go.\n\nSeems to be like this me actually be a GC bug.\u003c/pre\u003e",
	"user": {
		"login": "marete",
		"id": 2327361,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:39:48Z",
	"created_at": "2014-01-22T00:11:01Z",
	"updated_at": "2016-06-25T01:26:03Z"
}
