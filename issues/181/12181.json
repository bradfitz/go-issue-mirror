{
	"id": 101690238,
	"number": 12181,
	"state": "open",
	"title": "x/mobile: gomobile test",
	"body": "This may turn into a design for a ```gomobile test``` subcommand, but for now I'm writing down some notes on what I've been thinking about this topic, as I have a tendency to forget parts of this story when I switch work.\r\n\r\nCurrent and potential testing systems for app programmers:\r\n\r\n**All-Go apps:**\r\n- ```go test``` runs unit tests on the host. Works today. Fast, portable, and friendly to development.\r\n- ```gomobile test``` same UI as ```go test``` but they run on device. Can this be made easy to configure? (Provisioning issues on iOS, app permission issues on Android, or they would run via adb shell which rules out GUI tests.) Is this useful?\r\n- GUI tests. Right now x/mobile/app/app_test.go has some primitive GUI tests driven by the host. Can these be run on-device as part of ```gomobile test```?\r\n\r\n**Go libraries used by android apps:**\r\n- ```go test``` runs unit tests on the host.\r\n- ```gomobile test``` runs tests on the device. Same discussion as above.\r\n- Integration tests. As Go is the library, these have to be driven by the primary app environment, Android Studio, Xcode, etc. (For example, x/mobile/bind tests do this with gradle from the Android SDK.)\r\n\r\nIf we created a ```gomobile test``` mode, it would be built out of the go_darwin_arm_exec and go_android_arm_exec scripts used to run unit tests from the standard library. These are tricky to setup (in particular the ios-deploy dependency) and very tricky to debug. It i not clear we could make that easier with the gomobile tool.\r\n\r\nSo itâ€™s not clear yet that it is worth building ```gomobile test```, but a worthwhile first experiment would be rewriting x/mobile/app/app_test.go to be a unit test running under an .apk. If that is possible, the second step would be to rewrite go_android_arm_exec so that it builds app packages like go_darwin_arm_exec. In some ways it is easier to install and start an app on Android than it is on iOS, but extracting stdio usefully on a device without root (most development devices) is a bit of work.",
	"user": {
		"login": "crawshaw",
		"id": 161319,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "crawshaw",
		"id": 161319,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"created_at": "2015-08-18T16:02:33Z",
	"updated_at": "2015-10-23T19:53:50Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
