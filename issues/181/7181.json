{
	"id": 51286308,
	"number": 7181,
	"state": "open",
	"title": "runtime: stack traces of endless recursion should print top and bottom",
	"body": "\u003cpre\u003eIn stack traces caused by endless recursion it would be a lot more useful to print the n\ntop-most and the n bottom-most frames rather than just the top ones. Ideally, I'd like\nto see something like (fake stack trace):\n\nruntime: goroutine stack exceeds 1000000000-byte limit\nfatal error: stack overflow\n\ngoroutine 38 [stack split]:\ncopyout(0x25c3e0, 0x2251d0a148, 0x2251d0a150)\n\t/Users/gri/go/src/pkg/runtime/iface.c:160 fp=0x2251d0a100\nruntime.assertI2T2(0x25c3e0, 0x221065d900, 0x2112a7dc0, 0x0, 0x1)\n\t/Users/gri/go/src/pkg/runtime/iface.c:268 +0x59 fp=0x2251d0a138\ncode.google.com/p/go.tools/go/types.WriteType(0x210de8bd0, 0x0, 0x221065d900,\n0x2112a7dc0)\n\t/Users/gri/golib/src/code.google.com/p/go.tools/go/types/typestring.go:58 +0x5f2 fp=0x2251d0a2d0\ncode.google.com/p/go.tools/go/types.WriteType(0x210de8bd0, 0x0, 0x221065d9f0,\n0x210ea3bd0)\n\t/Users/gri/golib/src/code.google.com/p/go.tools/go/types/typestring.go:95 +0x803 fp=0x2251d0a468\ncode.google.com/p/go.tools/go/types.WriteType(0x210de8bd0, 0x0, 0x221065d900,\n0x2112a7dc0)\n\n... (1234 stack frames omitted)\n\n\t/Users/gri/golib/src/code.google.com/p/go.tools/go/types/typestring.go:104 +0x670 fp=0x2251d0a600\ncode.google.com/p/go.tools/go/types.WriteType(0x210de8bd0, 0x0, 0x221065d9f0,\n0x210ea3bd0)\n\t/Users/gri/golib/src/code.google.com/p/go.tools/go/types/typestring.go:95 +0x803 fp=0x2251d0a798\ncode.google.com/p/go.tools/go/types.WriteType(0x210de8bd0, 0x0, 0x221065d900,\n0x2112a7dc0)\n\t/Users/gri/golib/src/code.google.com/p/go.tools/go/types/typestring.go:104 +0x670 fp=0x2251d0a930\ncode.google.com/p/go.tools/go/types.WriteType(0x210de8bd0, 0x0, 0x221065d9f0,\n0x210ea3bd0)\n\t/Users/gri/golib/src/code.google.com/p/go.tools/go/types/typestring.go:95 +0x803 fp=0x2251d0aac8\ncode.google.com/p/go.tools/go/types.WriteType(0x210de8bd0, 0x0, 0x221065d900,\n0x2112a7dc0)\n\t/Users/gri/golib/src/code.google.com/p/go.tools/go/types/typestring.go:104 +0x670 fp=0x2251d0ac60\ncode.google.com/p/go.tools/go/types.WriteType(0x210de8bd0, 0x0, 0x221065d9f0,\n0x210ea3bd0)\n\t/Users/gri/golib/src/code.google.com/p/go.tools/go/types/typestring.go:95 +0x803 fp=0x2251d0adf8\ncode.google.com/p/go.tools/go/types.WriteType(0x210de8bd0, 0x0, 0x221065d900,\n0x2112a7dc0)\n\t/Users/gri/golib/src/code.google.com/p/go.tools/go/types/typestring.go:104 +0x670 fp=0x2251d0af90\ncode.google.com/p/go.tools/go/types.WriteType(0x210de8bd0, 0x0, 0x221065d9f0,\n0x210ea3bd0)\n\t/Users/gri/golib/src/code.google.com/p/go.tools/go/types/typestring.go:95 +0x803 fp=0x2251d0b128\ncreated by testing.RunTests\n\t/Users/gri/go/src/pkg/testing/testing.go:471 +0x978\n\ngoroutine 16 [chan receive]:\ntesting.RunTests(0x2f1680, 0x596ce0, 0x1a, 0x1a, 0x0)\n\t/Users/gri/go/src/pkg/testing/testing.go:472 +0x9a8\ntesting.Main(0x2f1680, 0x596ce0, 0x1a, 0x1a, 0x59ba80, ...)\n\t/Users/gri/go/src/pkg/testing/testing.go:403 +0x8c\nmain.main()\n\t/var/folders/00/013yr000h01000cxqpysvccm0004gv/T/go-build006333714/code.google.com/p/go.tools/go/types/_test/_testmain.go:99 +0x9c\nexit status 2\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"created_at": "2014-01-22T21:52:47Z",
	"updated_at": "2015-04-14T19:45:22Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
