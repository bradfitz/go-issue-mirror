{
	"id": 215053452,
	"body": "I noticed a mistake in my previous test.\r\n\r\nThis is the listener file:\r\n\r\n```\r\n%  for(i in /net/tcp/*){if(grep 8080 $i/local \u003e/dev/null \u003e[2=1] \u0026\u0026 ! grep ::!0 $i/remote \u003e/dev/null \u003e[2=1]){echo $i}}\r\n/net/tcp/11\r\n```\r\n\r\nThis is the connection file on the server side:\r\n\r\n```\r\n%  for(i in /net/tcp/*){if(grep 8080 $i/local \u003e/dev/null \u003e[2=1] \u0026\u0026 grep ::!0 $i/remote \u003e/dev/null \u003e[2=1]){echo $i}}\r\n/net/tcp/17\r\n```\r\n\r\nClose the connection from the server side:\r\n\r\n```\r\n% echo hangup \u003e/net/tcp/17/ctl\r\n```\r\n\r\nClosing the connection from the server side sends RST to the client, which closes the connection on his side, as expected:\r\n\r\n```\r\n% cat /net/tcp/12/status\r\nClosed qin 0 qout 0 rq 0.0 srtt 0 mdev 0 sst 1048560 cwin 4380 swin 1048560\u003e\u003e4 rwin 1048560\u003e\u003e4 qscale 4 timer.start 10 timer.count 10 rerecv 0 katimer.start 2400 katimer.count 2154\r\n```\r\n\r\nI'm still not sure why it doesn't work in Go, since the read syscall should return -1 in this case, with errstr set to \"Hangup\".",
	"user": {
		"login": "0intro",
		"id": 6043744,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-27T11:19:51Z",
	"updated_at": "2016-04-27T11:20:14Z"
}
