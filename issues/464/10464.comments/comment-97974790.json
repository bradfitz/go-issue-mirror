{
	"id": 97974790,
	"body": "I imagine on error (when we missed finding the directory header) we'd just scan forward looking for the directory header (0x02014b50) and for each case of 0x02014b50 we find, remember its offset from the real one, then load all the file headers with that offset, stopping once we find an offset that works.\r\n\r\nBut this is too late for Go 1.5. The tree closes in 1.5 days and the few people who regularly hack on this package are on vacation or busy.\r\n\r\nFor now I recommend you just do this loop yourself. You could instead scan forwards from the beginning, looking for file headers (0x04034b50) and whenever you find a 0x04034b50, try chopping off that prefix and opening the zip anew. `io.NewSectionReader` will give you a `ReaderAt` view into another one, letting you cheaply remove prefix bytes.\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-30T21:31:21Z",
	"updated_at": "2015-04-30T21:31:21Z"
}
