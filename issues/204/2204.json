{
	"id": 51278885,
	"number": 2204,
	"state": "closed",
	"title": "cmd/gc: optimized range over []byte(string)",
	"body": "\u003cpre\u003eA per-byte range over a string (over a []byte(string), not a per-rune range) currently\ndoes a a copy from string-\u0026gt;byte, but doesn't need to.\n\nOld mailing list post:\n\n\u003ca href=\"https://groups.google.com/group/golang-dev/browse_thread/thread/a74152dbc459ebba\"\u003ehttps://groups.google.com/group/golang-dev/browse_thread/thread/a74152dbc459ebba\u003c/a\u003e\n\nLow priority, but converting to an issue.\n\nFor reference,\n\nfunc BenchmarkRangeStringLoop(b *testing.B) {\n        s := string(make([]byte, 4096))\n        for i := 0; i \u0026lt; b.N; i++ {\n                for j := 0; j \u0026lt; len(s); j++ {\n                        _ = s[j]\n                }\n        }\n}\n\nfunc BenchmarkRangeStringCast(b *testing.B) {\n        s := string(make([]byte, 4096))\n        for i := 0; i \u0026lt; b.N; i++ {\n                for _, _ = range []byte(s) {\n                }\n        }\n}\n\nfunc BenchmarkRangeBytes(b *testing.B) {\n        bs := make([]byte, 4096)\n        for i := 0; i \u0026lt; b.N; i++ {\n                for _, _ = range bs {\n                }\n        }\n}\n\n\nbytes_test.BenchmarkRangeStringLoop  500000  6597 ns/op\nbytes_test.BenchmarkRangeStringCast  200000  8083 ns/op\nbytes_test.BenchmarkRangeBytes       500000  5020 ns/op\n\nA per-byte (not per-rune) range over a string should be equivalent to a per-byte range\nover a []byte, but currently it's 60% slower than it could be.\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "GarbageCollector"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 15,
	"closed_at": "2015-02-04T04:39:12Z",
	"created_at": "2011-08-29T22:34:19Z",
	"updated_at": "2016-06-24T19:34:02Z"
}
