{
	"id": 67170123,
	"body": "\u003e we use a bufio.Reader around the *os.File reading from /dev/urandom\r\n\r\nExcept on Plan9 for some reason?\r\n\r\nI'm not sure why the standard library should be buffering here at all, honestly. I understand that it will aid performance in the non-concurrent case, but my first instinct would be to let the caller do the buffering (if they so desire) and by default to just do an unlocked unbuffered Read on the underlying fd.\r\n\r\n\u003e We could use sync.Pool for the per-P buffer, but using that is contentious.\r\n\r\nMost threading libraries (pthreads etc) provide a thread-local storage API that doesn't content; since go does it's own scheduler I imagine (pure speculation here) that you pin threads to processors at the OS level to avoid scheduler fights, so you could cheat and use thread-local storage to get your per-P buffers? If I'm wildly off-base feel free to ignore this :)",
	"user": {
		"login": "eapache",
		"id": 1706826,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-16T14:52:07Z",
	"updated_at": "2014-12-16T14:52:28Z"
}
