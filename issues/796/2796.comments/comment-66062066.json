{
	"id": 66062066,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eEither output is correct.  Your program has a race.\n\nThe definition of the go statement is that the function being called\nand the arguments to the call are computed and passed to the goroutine,\nwhich then executes the call itself.  So if you write go f(x), the goroutine\nreceives the values f and x and runs f(x).  If you write go f(\u0026x), the goroutine\nreceives the values f and \u0026x and runs f(\u0026x).  In this program, you have two\ngoroutines running f(\u0026x) for the same \u0026x.\n\nRemember that\n\n        for _, st := range testStructs {\n                go fmt.Println(\u0026st)\n        }\n\nis the same as\n\n        {\n                var st testStruct\n                for _, st = range testStructs {\n                        go fmt.Println(\u0026st)\n                }\n        }\n\nThere's only one shared testStruct for all the loop iterations.\nIf the first go doesn't manage to run before the second iteration\noverwrites st, it won't see the first st value.\u003c/pre\u003e\n\n\n\n_Status changed to **WorkingAsIntended**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-01-27T16:27:20Z",
	"updated_at": "2014-12-08T10:14:51Z"
}
