{
	"id": 78760828,
	"body": "Initially when I started working on this I was thinking about how I would document a package like \"shuffle\" which works like \"sort\" except that it shuffles items around randomly rather than sorting them [think python random.shuffle()]. Basically an example of this function with Output is completely impossible to show since by definition the output is randomized. Being able to show the expected output, with a warning that it specifically can be in any order is useful in my opinion.\r\n\r\nSo the function to test shuffle.Shuffle() could look like this:\r\n```go\r\nfunc ExampleShuffle() {\r\n    x := []int{1, 2, 3, 4, 5}\r\n    shuffle.ShuffleInt(x)\r\n    for index, value := range x {\r\n        fmt.Printf(\"index[%d] = %d\\n\", index, value)\r\n    }\r\n\r\n    // Unordered output:\r\n    // 4\r\n    // 2\r\n    // 5\r\n    // 1\r\n    // 3\r\n}\r\n```\r\n\r\nOther use cases are like the one I am specifically working on now. A client I work on makes calls to an external service which returns results in an unspecified order. Ideally I don't want to have to sort the output myself here since every call might end up having the same boiler plate around it, therefor making the examples far more complicated to understand. I suspect that this is common in the Example realm specifically because of things like non-repeatable ordering in maps.\r\n\r\nAll that being said, I actually love the assertion of lack of assured order. Its awesome because it makes clear the only promise that can be made. It does however make things like \"fixed output\" testing more complicated. I would love to see changes like this because it embraces the assurance of \"unordered\" in the example to make it clear what is expected.\r\n\r\n[If you want I can list off examples of existing library calls that would be difficult to document using the existing '// Output:' mode.. say os.(*File).Readdir(n int) since the results depend on the underlying file system calls, most the functionality in atomic since it necessitates go routines, and likely a few more I can't think of off the top of my head.]",
	"user": {
		"login": "liquidgecka",
		"id": 325667,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-03-13T02:41:42Z",
	"updated_at": "2015-03-13T02:41:42Z"
}
