{
	"id": 66086945,
	"body": "\u003ca id=\"c7\"\u003e\u003c/a\u003eComment 7:\n\n\u003cpre\u003eRegarding initial comments 2a, 2b: Interface assignment is based on method sets, not\ninterface type identity; there's no place where interface type identity (rather than the\nrespective method sets matter). Thus, the initial list of possible approaches is flawed.\n\nThere seem to be only two viable approaches:\n\n1) gccgo approach: all method names (incl. _ methods) must be unique in an interface.\nThat is, an interface may have at most one blank method. Because blank methods cannot be\ndeclared for non-interface types, no concrete type can ever implement such an interface.\nBecause blank methods can be declared for interface types, the following code would be\nlegal (albeit pointless):\n\n     type I1 interface { _() }\n     type I2 interface { _() }\n     var i1 I1\n     var i2 I2\n     i1 = i2\n     i2 = i1\n\nInterfaces may be embedded, so a blank method may be embedded as well. As with all other\ninterface method names, declaring 2 blank methods would lead to a double-declaration\nerror.\n\nOpen question in this approach: Is the blank identifier exportable? That is, could one\nembed an imported interface with a blank method in an interface with another blank\nmethod?\n\n2) Disallow blank methods in interfaces altogether. This seems to be the simplest\napproach but is somewhat \"irregular\" - we allow blank identifiers pretty much everywhere\nelse. With this approach we would lose the ability to declare an interface that cannot\nbe implemented by any type; however that seems not a very useful feature in the first\nplace.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-05-19T21:39:51Z",
	"updated_at": "2014-12-08T10:36:33Z"
}
