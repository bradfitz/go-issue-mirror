{
	"id": 51280874,
	"number": 3604,
	"state": "closed",
	"title": "time: time.Parse mishandles southern hemisphere daylight savings?",
	"body": "\u003cpre\u003eWhy does the Sydney case not recognize EDT?\n\n\n---------- Forwarded message ----------\nFrom: Russ Cox \u0026lt;rsc@golang.org\u0026gt;\nDate: Wed, May 9, 2012 at 11:44 AM\nSubject: Re: [go-nuts] incorrect documentation in \u0026quot;time\u0026quot; package?\nTo: andrey mirtchovski \u0026lt;mirtchovski@gmail.com\u0026gt;\nCc: Kyle Lemons \u0026lt;kevlar@google.com\u0026gt;, Aaron Bohannon \u0026lt;aaron678@gmail.com\u0026gt;,\ngolang-nuts@googlegroups.com\n\n\nIf you call time.Parse and ask it to parse a string like \u0026quot;EST\u0026quot; against\n\u0026quot;MST\u0026quot;, that's not really well-defined.  Is it EST as in New York time\nor is it EST as in Sydney time?  Of course, if time.Parse just\nrejected that request outright, that would be not very useful.\n\nSo time.Parse does the following when trying to parse a zone abbreviation:\n\n1. If the zone abbreviation corresponds to a valid abbreviation for\nthe zone that is used in the default location (time.Local) at the\ngiven time, then time.Parse uses that location. So if your program is\nrunning on a computer set up to default to New York or Sydney time and\nyou parse a time when EST is in use there, then parsing \u0026quot;EST\u0026quot; uses\ntime.Local and will end up with that location's zone offset (-05:00 or\n+11:00).\n\n2. If the zone abbreviation is \u0026quot;GMT\u0026quot; or \u0026quot;UTC\u0026quot;, then time.Parse uses\ntime.UTC as the location.\n\n3. Otherwise, the zone abbreviation is unrecognized.  time.Parse can't\nbe expected to know the location you want, but maybe you don't care\nabout the location, so it creates a stub implementation to record the\nabbreviation and uses zone offset 0.  When you print such a time and\nonly show the abbreviation, you get back what you put in.  This is\nuseful in many contexts, but it does mean that a computer set up to\ndefault to California time treats \u0026quot;EDT\u0026quot; with a meaning that is both\nnot New York and not Sydney.\n\nIf you don't look closely, it can be hard to distinguish case #1 from\ncase #3, but the difference is one reason that the default format for\nprinting a time.Time prints both the zone abbreviation and its offset.\n If you do look closely, you can see the difference.\n\n$ cat x.go\npackage main\n\nimport (\n       \u0026quot;fmt\u0026quot;\n       \u0026quot;time\u0026quot;\n)\n\nfunc main() {\n       fmt.Printf(\u0026quot;time.Local = %v\\n\u0026quot;, time.Local)\n\n       show(\u0026quot;01/01/2011 12:00am EST\u0026quot;)\n       show(\u0026quot;01/01/2011 12:00am EDT\u0026quot;)\n       show(\u0026quot;07/01/2011 12:00am EST\u0026quot;)\n       show(\u0026quot;07/01/2011 12:00am EDT\u0026quot;)\n       show(\u0026quot;01/01/2011 12:00am PST\u0026quot;)\n       show(\u0026quot;07/01/2011 12:00am PDT\u0026quot;)\n}\n\nfunc show(s string) {\n       t, err := time.Parse(\u0026quot;01/02/2006 3:04pm MST\u0026quot;, s)\n       if err != nil {\n               fmt.Printf(\u0026quot;Parse(%q): %v\\n\u0026quot;, s, err)\n               return\n       }\n       fmt.Printf(\u0026quot;Parse(%q) = %v\\n\u0026quot;, s, t)\n}\n$ TZ=America/New_York go run x.go\ntime.Local = America/New_York\nParse(\u0026quot;01/01/2011 12:00am EST\u0026quot;) = 2011-01-01 00:00:00 -0500 EST\nParse(\u0026quot;01/01/2011 12:00am EDT\u0026quot;) = 2011-01-01 00:00:00 +0000 EDT\nParse(\u0026quot;07/01/2011 12:00am EST\u0026quot;) = 2011-07-01 00:00:00 +0000 EST\nParse(\u0026quot;07/01/2011 12:00am EDT\u0026quot;) = 2011-07-01 00:00:00 -0400 EDT\nParse(\u0026quot;01/01/2011 12:00am PST\u0026quot;) = 2011-01-01 00:00:00 +0000 PST\nParse(\u0026quot;07/01/2011 12:00am PDT\u0026quot;) = 2011-07-01 00:00:00 +0000 PDT\n$ TZ=America/Los_Angeles go run x.go\ntime.Local = America/Los_Angeles\nParse(\u0026quot;01/01/2011 12:00am EST\u0026quot;) = 2011-01-01 00:00:00 +0000 EST\nParse(\u0026quot;01/01/2011 12:00am EDT\u0026quot;) = 2011-01-01 00:00:00 +0000 EDT\nParse(\u0026quot;07/01/2011 12:00am EST\u0026quot;) = 2011-07-01 00:00:00 +0000 EST\nParse(\u0026quot;07/01/2011 12:00am EDT\u0026quot;) = 2011-07-01 00:00:00 +0000 EDT\nParse(\u0026quot;01/01/2011 12:00am PST\u0026quot;) = 2011-01-01 00:00:00 -0800 PST\nParse(\u0026quot;07/01/2011 12:00am PDT\u0026quot;) = 2011-07-01 00:00:00 -0700 PDT\n$\n\nThere may be a bug in handling daylight savings lookups in the\nsouthern hemisphere, or there may be a bug in the Sydney time zone\ninformation (less likely).  It doesn't seem to pick up EDT ever:\n\n$ TZ=Australia/Sydney go run x.go\ntime.Local = Australia/Sydney\nParse(\u0026quot;01/01/2011 12:00am EST\u0026quot;) = 2011-01-01 00:00:00 +1100 EST\nParse(\u0026quot;01/01/2011 12:00am EDT\u0026quot;) = 2011-01-01 00:00:00 +0000 EDT\nParse(\u0026quot;07/01/2011 12:00am EST\u0026quot;) = 2011-07-01 00:00:00 +0000 EST\nParse(\u0026quot;07/01/2011 12:00am EDT\u0026quot;) = 2011-07-01 00:00:00 +0000 EDT\nParse(\u0026quot;01/01/2011 12:00am PST\u0026quot;) = 2011-01-01 00:00:00 +0000 PST\nParse(\u0026quot;07/01/2011 12:00am PDT\u0026quot;) = 2011-07-01 00:00:00 +0000 PDT\n$\n\nAs for why QQQ is not a valid time zone, time.Parse requires as a\nsanity check that the zone abbreviation be 3 or 4 letters (A-Z) long\nand end in T.\n\nRuss\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 5,
	"closed_at": "2014-12-08T10:19:00Z",
	"created_at": "2012-05-09T15:45:29Z",
	"updated_at": "2016-06-24T22:18:48Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
