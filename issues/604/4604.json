{
	"id": 51282368,
	"number": 4604,
	"state": "open",
	"title": "runtime: switch to a fast, collision-resistant hash function",
	"body": "\u003cpre\u003eSipHash is a very fast PRG for short inputs developed by J. P. Aumasson and D. J.\nBernstein, competitive in speed with MurmurHash, but with the security benefits of\ncryptographically strong hash functions, i.e. finding collisions is a major undertaking\neven if the IV can be guessed, or if computing digests for the set of all IVs. Thus, it\ncan be an ideal choice for a hash table hash function, and provides significantly better\nprotection against collision attacks than a non-collision resistant hash function using\na random IV. It is also extremely simple. The entire implementation:\n\u003ca href=\"https://131002.net/siphash/siphash24.c\"\u003ehttps://131002.net/siphash/siphash24.c\u003c/a\u003e\n\nMost notably, Perl, the first by far to adopt any kind of hash function randomization\n(in the early 90s, when the attack was first described) have switched to SipHash in\ntheir 64-bit implementation.\n\niant suggested I file this ticket as I was commenting on the now-closed\n\u003ca href=\"https://golang.org/issue/2630\"\u003ehttps://golang.org/issue/2630\u003c/a\u003e. I plan to make a sample\nimplementation and provide benchmarks to back this up. I don't think this is terribly\nurgent, but that it would be a better long-term solution. It might even be faster than\nFNV in some cases where collisions were common since Sip has better distribution.\u003c/pre\u003e",
	"user": {
		"login": "patrickmn",
		"id": 72885,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "LongTerm"
		}
	],
	"comments": 13,
	"created_at": "2013-01-01T17:06:58Z",
	"updated_at": "2015-04-14T19:45:18Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
