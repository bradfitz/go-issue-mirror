{
	"id": 66069472,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9:\n\n\u003cpre\u003eIt's an escape analysis bug. The compiler correctly recognize that a variable local to\nloop iterations escape when you take its address: the \"var j int\" is interpreted as \"j\n:= new(int)\" so you get a different reference at each iteration.\n\nWhen you don't take the address, the compiler must recognize that keeping a reference to\nj in the closure forbids allocating j on the stack, but it does not. Hence j is on the\nstack, and the closures share references where they should not.\n\nIf you compile with -N (go build -gcflags -N or go tool 6g -N) to disable escape\nanalysis, it works.\u003c/pre\u003e",
	"user": {
		"login": "remyoudompheng",
		"id": 175246,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-08-20T19:47:32Z",
	"updated_at": "2014-12-08T10:21:05Z"
}
