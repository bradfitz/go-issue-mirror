{
	"id": 179011638,
	"number": 17220,
	"state": "open",
	"title": "cmd/compile: optimize f32Slice[i] += 1 across math.Float32bits, Float32frombits",
	"body": "I'm not sure how often this arises in practice, but it did come up in https://go-review.googlesource.com/#/c/29691/ in a vector rasterizer\r\n\r\nRoughly speaking, in func floatingAccumulateMask, I'm accumulating the elements of a []float32 and storing the (scaled) cumulative sums in an []uint32.\r\n\r\nI don't actually need both of the individual and cumulative values at the same time. If the two slices were both []float32 or both []uint32, then I could halve the amount of memory that I need (and possibly have better cache access patterns) by writing the output elements in-place over the input elements.\r\n\r\nI can actually still do this, even without using unsafe, with just one slice (of type []uint32), and sprinking some math.Float32bits and math.Float32frombits throughout my float32 code.\r\n\r\nThis works, in that it produces the correct output, but there is a performance penalty. In a simpler repro case, suppose that I had these global variables:\r\n\r\n```\r\nf32Slice []float32\r\nu32Slice []uint32\r\n```\r\n\r\nand these three lines of code:\r\n\r\n```\r\nf32Slice[0] += 1\r\nu32Slice[0] = uint32(1 + int32(u32Slice[0]))\r\nu32Slice[0] = math.Float32bits(1 + math.Float32frombits(u32Slice[0]))\r\n```\r\n\r\nThe GOARCH=amd64 codegen for each of the three lines are:\r\n\r\n```\r\n48 8b 05 b1 71 09 00    mov    0x971b1(%rip),%rax        # 498298 \u003cmain.f32Slice+0x8\u003e\r\n48 8b 0d a2 71 09 00    mov    0x971a2(%rip),%rcx        # 498290 \u003cmain.f32Slice\u003e\r\n48 85 c0                test   %rax,%rax\r\n76 3a                   jbe    40112d \u003cmain.main+0x12d\u003e\r\nf3 0f 10 01             movss  (%rcx),%xmm0\r\nf3 0f 10 0d 15 cc 06    movss  0x6cc15(%rip),%xmm1        # 46dd14 \u003c$f32.3f800000\u003e\r\n00 \r\nf3 0f 58 c8             addss  %xmm0,%xmm1\r\nf3 0f 11 09             movss  %xmm1,(%rcx)\r\n```\r\n\r\n```\r\n48 8b 05 fe 71 09 00    mov    0x971fe(%rip),%rax        # 4982b0 \u003cmain.u32Slice\u003e\r\n48 8b 0d ff 71 09 00    mov    0x971ff(%rip),%rcx        # 4982b8 \u003cmain.u32Slice+0x8\u003e\r\n48 85 c9                test   %rcx,%rcx\r\n76 76                   jbe    401134 \u003cmain.main+0x134\u003e\r\n8b 08                   mov    (%rax),%ecx\r\nff c1                   inc    %ecx\r\n89 08                   mov    %ecx,(%rax)\r\n```\r\n\r\n```\r\n48 8b 05 6c 72 09 00    mov    0x9726c(%rip),%rax        # 4982b0 \u003cmain.u32Slice\u003e\r\n48 8b 0d 6d 72 09 00    mov    0x9726d(%rip),%rcx        # 4982b8 \u003cmain.u32Slice+0x8\u003e\r\n48 85 c9                test   %rcx,%rcx\r\n0f 86 e7 00 00 00       jbe    40113b \u003cmain.main+0x13b\u003e\r\n8b 00                   mov    (%rax),%eax\r\n89 44 24 0c             mov    %eax,0xc(%rsp)\r\nf3 0f 10 44 24 0c       movss  0xc(%rsp),%xmm0\r\nf3 0f 10 0d ac cc 06    movss  0x6ccac(%rip),%xmm1        # 46dd14 \u003c$f32.3f800000\u003e\r\n00 \r\nf3 0f 58 c1             addss  %xmm1,%xmm0\r\nf3 0f 11 44 24 08       movss  %xmm0,0x8(%rsp)\r\n8b 44 24 08             mov    0x8(%rsp),%eax\r\n48 8b 0d 33 72 09 00    mov    0x97233(%rip),%rcx        # 4982b0 \u003cmain.u32Slice\u003e\r\n48 8b 15 34 72 09 00    mov    0x97234(%rip),%rdx        # 4982b8 \u003cmain.u32Slice+0x8\u003e\r\n48 85 d2                test   %rdx,%rdx\r\n0f 86 ae 00 00 00       jbe    40113b \u003cmain.main+0x13b\u003e\r\n89 01                   mov    %eax,(%rcx)\r\n```\r\n\r\nThe codegen for the first two lines are efficient. The codegen for the third line could be better in two ways. First, there's an unnecessary bounce via the stack from memory to XMM0:\r\n\r\n```\r\n8b 00                   mov    (%rax),%eax\r\n89 44 24 0c             mov    %eax,0xc(%rsp)\r\nf3 0f 10 44 24 0c       movss  0xc(%rsp),%xmm0\r\n```\r\n\r\nand likewise on the way back. Second, there are two bounds checks instead of one, but the second is redundant.\r\n\r\nI am not a compiler person, but it looks to me like the Float32{,from}bits calls are treated as black box functions and not like a (no-op) uint32 to int32 conversion until too late in the codegen for e.g. the relevant bounds check elimination.\r\n\r\nI'll let y'all decide if this is a dupe of issue #17069.",
	"user": {
		"login": "nigeltao",
		"id": 8565232,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		}
	],
	"comments": 4,
	"created_at": "2016-09-24T05:18:24Z",
	"updated_at": "2016-10-03T18:53:22Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
