{
	"id": 66077539,
	"body": "\u003ca id=\"c12\"\u003e\u003c/a\u003eComment 12:\n\n\u003cpre\u003eIn Go on amd64 int64 and int have precisely the same representation\n(and so do uintptr and uint64).  Nevertheless, a pointer of type\n*int64 may not be assigned to a pointer of type *int.  In fact, you\ncan't even assign a value of type int to a value of type int64 without\nan explicit conversion.  This is because Go never permits implicit\ntype conversions, except for the special case of assigning a value to\na variable of interface type.\n\nMy point is simply that Go always requires an explicit type\nconversion.  That's how the language is designed.  It doesn't have\nanything to do with the representation of the type.  It has to do with\nthe desire for a type-safe language, one in which types are always\nclear.\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-04-05T23:32:54Z",
	"updated_at": "2014-12-08T10:28:02Z"
}
