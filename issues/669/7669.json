{
	"id": 51287049,
	"number": 7669,
	"state": "closed",
	"title": "spec: nits in description of select statement",
	"body": "by **glyn.normington**:\n\n\u003cpre\u003eThe Go language spec of select statements (\u003ca href=\"http://golang.org/ref/spec#Select_statements)\"\u003ehttp://golang.org/ref/spec#Select_statements)\u003c/a\u003e\nhas a number of nits:\n\n\u0026gt; RecvExpr must be a receive operation. For all the cases in the \u0026quot;select\u0026quot;\nstatement,\n\u0026gt; the channel expressions are evaluated in top-to-bottom order, along with any\n\u0026gt; expressions that appear on the right hand side of send statements.\n\nThe term \u0026quot;channel expressions\u0026quot; is not defined. I think the intention is to\ninclude all expressions in the select statement which evaluate to a (possibly nil)\nchannel. So, in this example:\n\nselect {\ncase a = \u0026lt;-x()\ncase y() \u0026lt;- z()\n}\n\nwhere x() and y() return channels, the channel expressions are \u0026quot;x()\u0026quot; and\n\u0026quot;y()\u0026quot;.\n\n\u0026gt; A channel may be nil, which is equivalent to that case not being present\n\u0026gt; in the select statement except, if a send, its expression is still evaluated.\n\nThis sentence ignores the evaluation of channel expressions. If a channel expression\n(such as \u0026quot;x()\u0026quot; or \u0026quot;y()\u0026quot; above) returns nil but has a side-effect,\nthe select statement is not equivalent to the select statement with the corresponding\ncase omitted.\n\n\u0026gt; If any of the resulting operations can proceed, one of those is chosen and\n\u0026gt; the corresponding communication and statements are evaluated.\n\u0026gt; Otherwise, if there is a default case, that executes; if there is no default\n\u0026gt; case, the statement blocks until one of the communications can complete. \n\u0026gt; There can be at most one default case and it may appear anywhere in the\n\u0026gt; \u0026quot;select\u0026quot; statement. If there are no cases with non-nil channels, the\n\u0026gt; statement blocks forever.\n\nThe last sentence isn't true of the following example:\n\nselect {\n\t\tdefault:\n}\n\n\u0026gt; Even if the statement blocks, the channel and send expressions are evaluated\n\u0026gt; only once, upon entering the select statement.\n\nPS. This defect report may seem picky, but the intention is to tighten up the Go spec,\nwhich is a valuable document and whose very existence is one reason for preferring Go\nover certain other languages with unspecified semantics.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		},
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"closed_at": "2014-12-08T10:42:37Z",
	"created_at": "2014-03-31T11:08:35Z",
	"updated_at": "2016-06-25T01:31:06Z",
	"milestone": {
		"id": 1067211,
		"number": 17,
		"title": "Go1.3"
	}
}
