{
	"id": 165649858,
	"body": "ARM used to label both its CPU implementations and architectures\r\nwith numbers.\r\nSee https://en.wikipedia.org/wiki/List_of_ARM_microarchitectures.\r\n\r\nThe architecture has a uniform naming scheme: ARMvN with some\r\nsuffixes. A larger architecture version number means more features.\r\nFor example, we support ARMv5E and above. And ARMv8-A is the\r\n64-bit ISA.\r\n\r\nThe implementation of an architecture used to use the name matching\r\nARM\\d+[A-Z-]*, and the number has no direct correspondence to\r\nthe architecture it implements. For example, ARM920 implements\r\nARMv4T but ARM926E implements ARMv5E.\r\n\r\nTo make matters worse, people frequently abbreviate the core name\r\nto its family number, e.g. ARM7/ARM9/ARM11. This is where the ambiguity\r\ncomes.\r\n\r\nARM has since switched to a new naming scheme for cores, the\r\nCortex-[ARM]\\d+ scheme. But still, you can't infer the architectural\r\nversion purely from the number alone. (Cortex-A17 is ARMv7A,\r\nCortex-A35 is ARMv8-A; Cortex-M0 is ARMv6-M, Cortex-M3 is v7-M).\r\n\r\nSimilarly, the FPU in ARM cores also have architectural version.\r\nVFPvN. But the problem that the FPU and CPU version are fully\r\nindependent. Fortunately, most application ARM cores contain\r\nat least VFPv1 now.\r\n\r\n\r\nFor Go, GOARM roughly corresponds to ARM architectural version.\r\nGOARM=5 means ARMv5E (or higher) without FPU,\r\nGOARM=6 means ARMv6 (or higher) with FPU (VFPv1 or higher),\r\nGOARM=7 means ARMv7 (or higher) with FPU (VFPv3 or higher).\r\nThe difference between GOARM=6 and GOARM=7 is really\r\nsmall (actually, only a single new VFP instruction is used for 7,\r\nand runtime uses some new barrier instructions for OSes other\r\nthan linux where kernel helper is not available.)\r\n\r\n\r\nI suggest that we name the Go 1.6 linux/arm binary release as\r\nfollows:\r\nGOARM=6: go1.6.linux-armv6l.tar.gz\r\n(Or go1.6-linux-arm-v6l.tar.gz depending on whether we want to\r\nseparate the GOARCH value from the suffix or not.)\r\narmv6l also matches the `uname -m` output on Linux.\r\n\r\nThe 'l' here stands for little endian. (I know at least one case where\r\na ARMv6 core is used in big endian mode.)\r\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-18T02:32:02Z",
	"updated_at": "2015-12-18T02:34:12Z"
}
