{
	"id": 223123640,
	"body": "I'm sure I'm missing something, but why do the _cgoCheckPointer calls need to be inline in the function parameters at all?\r\n\r\nFor the example above, cgo generates this code:\r\n\r\n```go\r\n\r\nfunc _cgoCheckPointer0(p interface{}, args ...interface{}) unsafe.Pointer {\r\n        return _cgoCheckPointer(p, args...).(unsafe.Pointer)\r\n}\r\n\r\nfunc _Cfunc_free(p0 unsafe.Pointer) (r1 _Ctype_void) {\r\n        _cgo_runtime_cgocall(_cgo_188eb01e039f_Cfunc_free, uintptr(unsafe.Pointer(\u0026p0)))\r\n        [...]\r\n}\r\n\r\n[...]\r\n\r\nfunc main() {\r\n        var dt *_Ctype_struct___0\r\n        dt = (*_Ctype_struct___0)(_Cfunc__CMalloc(_Ctype_size_t(unsafe.Sizeof(*dt))))\r\n        defer _Cfunc_free(_cgoCheckPointer0(unsafe.Pointer(dt)))\r\n}\r\n```\r\n\r\nWhy does the `_cgoCheckPointer` call need to occur on the caller side of `_Cfunc_free`?  It seems like we could fix both this issue and #15921 by instead emitting:\r\n\r\n```go\r\n\r\nfunc _Cfunc_free(p0 unsafe.Pointer) (r1 _Ctype_void) {\r\n        _cgoCheckPointer0(p0)\r\n        _cgo_runtime_cgocall(_cgo_188eb01e039f_Cfunc_free, uintptr(unsafe.Pointer(\u0026p0)))\r\n        [...]\r\n}\r\n\r\n[...]\r\n\r\nfunc main() {\r\n        var dt *_Ctype_struct___0\r\n        dt = (*_Ctype_struct___0)(_Cfunc__CMalloc(_Ctype_size_t(unsafe.Sizeof(*dt))))\r\n        defer _Cfunc_free(dt)\r\n}\r\n```\r\n\r\nIs the problem that the generated function generally accept C types but we need/want to elide the pointer checks based on the corresponding Go types?  If that's the case, perhaps we could move the checks to the `_Cfunc` side only for parameter types that must be transformed between the two.",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-01T21:02:13Z",
	"updated_at": "2016-06-01T21:02:26Z"
}
