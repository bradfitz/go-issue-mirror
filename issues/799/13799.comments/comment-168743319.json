{
	"id": 168743319,
	"body": "This is weird.\r\n\r\nHere's the escape report (`-gcflags -m`) for the failing version and not-failing version, with common\r\nlines intended\r\n```\r\ndrchase-macbookair:tmp drchase$ go build -gcflags -m b13799.go\r\n# command-line-arguments\r\n   ./b13799.go:41: iter escapes to heap\r\n   ./b13799.go:41: maxI escapes to heap\r\n   ./b13799.go:41: len(m) escapes to heap\r\n./b13799.go:30: func literal escapes to heap\r\n./b13799.go:30: func literal escapes to heap\r\n./b13799.go:27: moved to heap: i\r\n./b13799.go:31: \u0026i escapes to heap\r\n./b13799.go:29: moved to heap: j\r\n./b13799.go:32: \u0026j escapes to heap\r\n./b13799.go:26: moved to heap: fn\r\n./b13799.go:34: \u0026fn escapes to heap\r\n./b13799.go:30: func literal escapes to heap\r\n./b13799.go:30: func literal escapes to heap\r\n./b13799.go:31: \u0026i escapes to heap\r\n./b13799.go:32: \u0026j escapes to heap\r\n./b13799.go:34: \u0026fn escapes to heap\r\n   ./b13799.go:21: test make(map[int][]int) does not escape\r\n   ./b13799.go:41: test ... argument does not escape\r\n   ./b13799.go:12: iter escapes to heap\r\n   ./b13799.go:12: main ... argument does not escape\r\n```\r\n\r\n(this is the working one)\r\n```\r\ndrchase-macbookair:tmp drchase$ go build -gcflags -m b13799.go\r\n# command-line-arguments\r\n   ./b13799.go:41: iter escapes to heap\r\n   ./b13799.go:41: maxI escapes to heap\r\n   ./b13799.go:41: len(m) escapes to heap\r\n   ./b13799.go:21: test make(map[int][]int) does not escape\r\n./b13799.go:30: test func literal does not escape\r\n   ./b13799.go:41: test ... argument does not escape\r\n   ./b13799.go:12: iter escapes to heap\r\n   ./b13799.go:12: main ... argument does not escape\r\n```\r\n\r\nMy guess is that the bug occurs when the function escapes to heap but the map does not, and then the stack moves (because of recursion) and the heap-allocated closure is not updated.\r\n",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-04T17:27:13Z",
	"updated_at": "2016-01-04T17:27:13Z"
}
