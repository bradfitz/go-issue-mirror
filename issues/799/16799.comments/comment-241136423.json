{
	"id": 241136423,
	"body": "\u003e The fix is to remove the second condition from this if-statement. It shouldn't impact existing servers. If you agree that it's a small enough change and worthwhile, I'll submit a patch.\r\n\r\nIgnoring the RFC pedantry for a second, I don't even think that's enough of a fix. Consider how Go's 100-continue actually works: we don't send 100-continue to the peer unless/until the ServeHTTP handler does a Read from the Request.Body.\r\n\r\nBut if the request body is 0 bytes, it's very likely that either/both:\r\n\r\na) the user will look at Request.ContentLength == 0 and never do a Read at all,\r\nb) the Reader type provided to the ServeHTTP handler will be limited to 0 bytes or a dummy `noBodyReader` value. \r\n\r\nMost likely (a), though.\r\n\r\nIf this is important, you'd want to send the 100-continue to the peer unconditional on whether the ServeHTTP handler ever looks at RequestBody.\r\n\r\nSo the fix is a little bit more involved.\r\n\r\nBut writing a test is usually 10-50x more code than the fix itself, and a test is required for all HTTP changes too, otherwise it would just regress, and then there's no point fixing it in the first place. (Sorry, little digression, knee-jerking at the description of the fix as a \"trivial (one-line) patch\" from the email thread about this, since it's always more than 1 line)\r\n\r\nAnyway, if you want to send that in, feel free.",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-19T21:11:58Z",
	"updated_at": "2016-08-19T21:11:58Z"
}
