{
	"id": 249492744,
	"body": "The reason to distinguish \"reference\" types in the documentation is because they really are different than other types (I'll call the non-reference types \"value\" types.  For example, `complex128`).  For reference compound types you don't get the whole compound object.  You only get part of it, the rest of it is possibly shared among other values in the program.  As such, operations on those types can observe aliasing among other modifications of that object in different functions or even goroutines.\r\n\r\nIn other words, \"reference\" means there's a pointer hidden in there somewhere, and assignments like \"a = b\" copy the pointer but don't copy the pointed-to shared part of the compound object.\r\n\r\nIf you defined your own type with a pointer in it, and the pointed-to data was not copied by the Copy method you define on your type, then that's a reference type (if the type has mutators - otherwise the missing copy is not observable, as it is for Go strings and interfaces).  So a `struct` can be a reference type, depends on how you use it.  The language can't call it that, of course, because it isn't always.  (In fact, it seldom is.)\r\n\r\nI'm not wedded to the word \"reference\", but there needs to be some distinguishing word for that concept.",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-26T06:54:30Z",
	"updated_at": "2016-09-26T06:54:30Z"
}
