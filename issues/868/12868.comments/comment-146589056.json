{
	"id": 146589056,
	"body": "I started to implement `cmd.SetEnv(\"KEY=val\", \"KEY=val\", ...)` but found two gross things about it:\r\n\r\n1) the `os` package spells it `os.Setenv` with a lowercase 'e'.\r\n2) the `os` package signature is `Setenv(key, value string)`, so people would assume that, and then it would silently compile with a `SetEnv(...string)` signature. So then what? Runtime panic? Magically work if even number of arguments and odd ones don't have `=` bytes in them? Gross.\r\n\r\nSo then I was back to thinking about just `Setenv(key, value string)` and `Unsetenv(key string)` (for @ianlancetaylor). But then we're back to them being quadratic if there's a bunch of them.\r\n\r\nMaybe we shouldn't care. `N` is small, etc (few environment variables).\r\n\r\nBut if we did care, I was toying with ideas like:\r\n\r\n```go\r\n// EnvMod represents a modification to environment variables.                                                                               \r\ntype EnvMod struct {\r\n        key string\r\n        val string\r\n        set bool\r\n}\r\n\r\nfunc Unsetenv(key string) EnvMod      { return EnvMod{key: key} }\r\nfunc Setenv(key, value string) EnvMod { return EnvMod{key: key, val: value, set: true} }\r\n\r\nfunc (c *Cmd) ModifyEnv(mods ...EnvMod) { ... }\r\n```\r\n\r\nBut call sites are then kinda ugly:\r\n\r\n```go\r\n        c.ModifyEnv(exec.Setenv(\"GOROOT\", v), exec.Unsetenv(\"GOBIN\"))\r\n```\r\n\r\n(and calling `exec.Setenv` directly and ignoring its return value looks like it does something but doesn't)\r\n\r\nSo then I thought: maybe we just keep the functions simple:\r\n\r\n```go\r\n    func(c *Cmd) Setenv(key, value string) {...}\r\n    func(c *Cmd) Unsetenv(key string) {...}\r\n```\r\n\r\n... but for people who care about the quadratic behavior, they can optionally use:\r\n\r\n```go\r\n    // ModifyEnv runs fn, which should contain a series of Setenv and/or Unsetenv calls.\r\n    // Use of ModifyEnv is optional but avoids quadratic behavior eliminating duplicates\r\n    // when modifying many environment variables.\r\n    func (c *Cmd) ModifyEnv(fn func()) {\r\n              // build, cache data structure on c\r\n              fn()\r\n              // clear cache data structure on c\r\n    }\r\n```\r\n\r\nThere's not much (any?) precedent for such a function, though. The closest is App Engine's RunInTransaction perhaps: https://godoc.org/google.golang.org/appengine/datastore#RunInTransaction\r\n\r\nMaybe we can introduce ModifyEnv later if needed, and just accept the poor behavior of `(*Cmd).Setenv` and `(*Cmd).Unsetenv` in the meantime?\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-08T15:56:30Z",
	"updated_at": "2015-10-08T16:04:31Z"
}
