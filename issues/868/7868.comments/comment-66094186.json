{
	"id": 66094186,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eThank you very much for answering the questions in detail.\n\nI understand, that in-code documentation sets the scope of user expectations over time.\n\nWhat I feel is the contract in this case is too restrictive to be useful. If garbage\ncollection concept is not stable internally throughout Go 1 then this contract\neffectively promises nothing. It is not clear then, why the function was made public -\nor documented at all. Or, if the expectation is to have no \"user-land\" calls to this\nfunction, should _that_ be documented?\n\nWhat I would like to have is an assurance, that a freezing part of garbage collection\nwill be over by the time runtime.GC() returns - that is my reason to call the function.\nSuch assurance may not be possible at this stage by the sound of it. Do I understand\nthis correctly?\n\nI am not sure I am clear about the criteria of separating an implementation detail vs.\ndeclared functionality - except for this:\n\nIf the intent of \"GC runs a garbage collection\" description is to refer to an abstract\nnotion of \"garbage collection\" described somewhere else, then it kinda makes sense, if\nthat \"somewhere else\" is findable (to your point in the first comment). Currently,\nGoogle search \"garbage collect site:golang.org\" returns no meaningful reference to what\nGolang garbage collection means in details.\n\nThe bottom line for me in this issue is that I like Go documentation for that it has the\nnecessary information to proceed with coding in most cases. Not in case of runtine.GC()\n- and I am not sure how to fix it. Documenting it externally seems to reduce the \"Code\ndocs contain it all\" quality.\u003c/pre\u003e",
	"user": {
		"login": "didenko",
		"id": 99670,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-04-26T13:22:57Z",
	"updated_at": "2014-12-08T10:43:41Z"
}
