{
	"id": 217226939,
	"body": "I think there is a problem in cbin.c:\n\n    // fork\n    for (i = 0; i \u003c 5; i++) {\n        if (0 \u003c (child = fork())) {\n            waitpid(child, NULL, 0);\n        } else if (0 == child) {\n            // load lib and func symbol\n            void            *golib = NULL;\n            golib_func      f;\n\n            printf(\"Start child %i (%i)\\n\", i, getpid());\n            if (NULL != (golib = dlopen(\"./golib.so\", RTLD_NOW))) {\n                if (NULL != (f = dlsym(golib, \"TestNetDial\"))) {\n                    (*f)();\n                } else {\n                    printf(\"%s\\n\", dlerror());\n                }\n\n                dlclose(golib);  // \u003c\u003c\u003c\u003c=== THIS LINE\n            } else {\n                printf(\"%s\\n\", dlerror());\n            }\n        } else {\n            printf(\"failed fork: 0x%0X\\n\", errno);\n        }\n    }\n\nNote that the child processes don't exit after calling the Go function\n(Go shared library can't be dlclosed, but that's another issue.)\n\nso, after the dlclose, the child will go back to the for loop, and fork,\nwhich will lead to bad things.\n\nThe fix is to change dlclose(golib) to exit(0) and the program will\nwork as intended.\n\nI will close the issue, please feel free reopen if you disagree about\nthe analysis.\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-05T17:59:05Z",
	"updated_at": "2016-05-05T17:59:05Z"
}
