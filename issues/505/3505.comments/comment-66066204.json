{
	"id": 66066204,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11:\n\n\u003cpre\u003eNotice the structs I used.  Stick in a long so it's more than a word wide, stick in an\nint to throw off alignment, and then drop in the array.\n\n$ cat \u003e test.c\nint main() {}\n\nstruct ArrEmpty {\n    long big;\n    int  small;\n    int  arr[];\n} empty;\nstruct ArrZero {\n    long big;\n    int  small;\n    int  arr[0];\n} zero;\nstruct ArrOne {\n    long big;\n    int  small;\n    int  arr[1];\n} one;\nstruct ArrTwo {\n    long big;\n    int  small;\n    int  arr[2];\n} two;\n\n$ gcc -gdwarf-2 -S -fverbose-asm -c test.c\n$ egrep \"AT_(name|byte_size)\" test.s | grep -A1 Arr\n        .ascii   \"ArrEmpty\"             ## DW_AT_name\n        .byte   16                      ## DW_AT_byte_size\n--\n        .ascii   \"ArrZero\"              ## DW_AT_name\n        .byte   16                      ## DW_AT_byte_size\n--\n        .ascii   \"ArrOne\"               ## DW_AT_name\n        .byte   16                      ## DW_AT_byte_size\n--\n        .ascii   \"ArrTwo\"               ## DW_AT_name\n        .byte   24                      ## DW_AT_byte_size\u003c/pre\u003e",
	"user": {
		"login": "kylelemons",
		"id": 322213,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-09-22T04:31:26Z",
	"updated_at": "2014-12-08T10:18:20Z"
}
