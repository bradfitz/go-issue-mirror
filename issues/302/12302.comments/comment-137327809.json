{
	"id": 137327809,
	"body": "I'd like to question how important SemVer is in this proposal.\r\n\r\nIn an ideal world everyone would use SemVer and use it correctly. However in the real world some projects do not use it at all:\r\n\r\n-  https://github.com/coreos/go-systemd repo has tags v1, v2, v3\r\n- Four component versions like 1.1.1.2 are not uncommon (e.g http://search.maven.org/#search%7Cga%7C1%7Cv%3A1.*.*.* gives 46178 results)\r\n\r\nor use it incorrectly:\r\n- According to http://avandeursen.com/2014/10/09/semantic-versioning-in-maven-central-breaking-changes/ almost 24% of patch updates to libraries from the central maven repository introduced binary (detectable by tools) incompatibility!\r\n- Even Google protobuf 2.4 and 2.5 are incompatible. It is real pain to support both of them in your project.\r\n- Many projects retain backward compatibility between major versions (e.g. springframework 1.x, 2.x, 3.x, 4.x), Linux kernel, etc\r\n\r\nIf I want to update a project dependency from version 1.2.1 to 1.2.2 apart from looking at the version number I usually take into consideration things like:\r\n\r\n- what it is used in my project for\r\n- any release notes\r\n- the source of the dependency and the track record of incompatible changes for this dependency\r\n- an automatically generated list of API changes (if available)\r\n- source code diff between two versions\r\n\r\nThe most widely used Java dependency manager (maven):\r\n- doesn't require SemVer, and instead defines a heuristic to compare versions: https://maven.apache.org/ref/3.3.3/maven-artifact/apidocs/org/apache/maven/artifact/versioning/ComparableVersion.html\r\n- doesn't pretend that it can resolve all dependency versions automatically:\r\n\r\n  - by default it chooses the latest version of a dependency from the dependency graph\r\n  - it is encouraged to specify versions of direct dependencies of a project explicitly (without ranges). The majority of the projects follows this rule.\r\n  - occasionally it is necessary to force maven to use a particular version of a transitive (dependency of a dependency) dependency\r\n\r\n\r\nMost of my examples are based on experience working with Java. It is one of the most widely used languages today. I believe if Go aims to be at least as popular it will have very similar ecosystem.",
	"user": {
		"login": "kostya-sh",
		"id": 7126275,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-03T04:26:30Z",
	"updated_at": "2015-09-03T04:37:51Z"
}
