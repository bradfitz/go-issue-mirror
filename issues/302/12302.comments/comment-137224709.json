{
	"id": 137224709,
	"body": "I agree with @crawshaw here. When I started the vendor-spec, I also started\na vendor tool to help inform my choices. Before that I made a vendor\nproposal, but also forked the go tool to ensure it was reasonably possible\nand to try out how it worked before proposing it.\n\nI think v\u003csemver\u003e is a fine standard. I think this proposal could be fine.\nWhile I did bring up the /x/ repos, I certainly didn't hear a proposal much\nless a consensus that they would change.\n\nI think not talking about how the go tool or other tools would use this is\ninappropriate; I think it should be discussed in the proposal for future\nramifications. I also would like discussion or definition of some\nassumptions on terms, like \"project\". I think it is assumed; I think it\nshould be explicit.\n\nI'm not against this proposal (I look forward to integrating a \"version\"\nfield to vendor-spec and my vendor tool). I'm concerned this fits one view\nof the world and predetermines other views as unsupported without even\nacknowledging them as existing. In other words, this proposal not only\ndefines semver; this proposal also implicitly defines a project and the\nscope of a project and how a project should be stored. While these implicit\ndefinitions fit with the \"gb\" tool and many repositories, they don't fit in\nwith other tools or other repositories.\n\nI'm for the end goal of versions and using semver. I'm against having many\nimplicit definitions this proposal contains.\n\n-Daniel\n\n\nOn Wed, Sep 2, 2015 at 11:11 AM David Crawshaw \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e @mattfarina \u003chttps://github.com/mattfarina\u003e I agree with everything\n\u003e you've said. I just like to build at the very least a throwaway\n\u003e implementation before trying to stabilize something, usually more than one.\n\u003e\n\u003e gopkg.in is very nice but as it is implemented argues for a much stronger\n\u003e notion of versions (major versions mean API changes, smaller versions\n\u003e provide compatibility), so it's interesting to this proposal in that it's\n\u003e different: why is it different and does it suggest any changes? Are they\n\u003e compatible? Are there longer term plans to add meaning to the versions in\n\u003e this proposal like gopkg.in? All good questions from an implementation\n\u003e not even spurred by the desire for this proposal.\n\u003e\n\u003e @peterbourgon \u003chttps://github.com/peterbourgon\u003e I don't follow how\n\u003e writing code will get bogged down in standards decisions. I appreciate the\n\u003e tight scope of this proposal, it's great. But code could do anything and\n\u003e doesn't need a proposal, and it's existence could help inform a standard.\n\u003e\n\u003e I'm not going to step up to write any of the tools I want to see, so I'm\n\u003e going to bow out of this discussion as I don't think I have anything more\n\u003e to add. Thanks for hearing me out.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/12302#issuecomment-137194851\u003e.\n\u003e\n",
	"user": {
		"login": "kardianos",
		"id": 755121,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-02T19:47:51Z",
	"updated_at": "2015-09-02T19:47:51Z"
}
