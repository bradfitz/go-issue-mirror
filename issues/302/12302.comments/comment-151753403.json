{
	"id": 151753403,
	"body": "Hi @rsc, thank you for your comments.\r\n\r\n\u003e What I don't understand is what this has to do with Go projects and libraries. There's clearly a \"and then we can do X\" in your head that is not spelled out in the document. What is X?\r\n\r\nI think the clearest answer I can give to this is what I wrote\r\n\r\n\u003e Who benefits from adopting this proposal ?\r\n\u003e\r\n\u003eThis proposal will immediately benefit the downstream consumers of Go libraries and programs. For example:\r\n\u003e\r\n\u003e * The large ecosystem of tools like godeps, glide, govendor, gb, the vendor-spec proposal and dozens more, that can use this information to provide, for example, a command that will let users upgrade between minor versions, or update to the latest patch released of their dependencies rather than just the latest HEAD of the repository.\r\n\u003e * Operating system distributions such as Debian, Fedora, Ubuntu, Homebrew, rely on released versions of software for their packaging policies. They don't want to pull random git hashes into their archives, they want to pull released versions of the code and have release numbers that give them a sense of how compatible new versions are with previous version. For example, Ubuntu have a policy that we only accept patch releases into our LTS distribution; no major version changes, no minor version changes that include new features, only bug fixes.\r\n\u003e * godoc.org could show users the documentation for the version of the package they were using, not just whatever is at HEAD.\r\n\u003e * That go get cannot consume this version information today should not be an argument against enabling other tools to do so.\r\n\r\nWith respect to your comment\r\n\r\n\u003e I don't understand why the previous recommendation is being deprecated. Again, it's not clear what it is being replaced with.\r\n\r\nThis section was added in response to @adg 's comment (https://github.com/golang/go/issues/12302#issuecomment-137301469) on Sept 3. Personally I'd be happy to drop the recommendation as\r\n\r\na. it will make the conceptual surface of this proposal smaller\r\nb. this is specifically not a proposal to change to Go tool, so changing a recommendation of the Go team is probably also out of scope.\r\n\r\nWhat do you think ? Is that acceptable.\r\n\r\n\u003e You seem to be assuming some kind of extension to the go command and/or source code for specifying constraints on what version of a package is acceptable when satisfying an import.\r\n\r\nI'm sorry, no. This proposal specifically, and deliberately does not seek to change the Go tool. As I hope I have shown in the comments, and the proposal document, there is a wider ecosystem of consumers for Go packages than just the Go tool.\r\n\r\nLastly, I'm sorry for the moribund state of this proposal. I have been working, slowly, on implementing two proof of concepts to demonstrate the usefulness of this proposal.\r\n\r\na. Run a modified version of godoc.org to show multiple versions of a package, which turned out to be a large job as \r\nb. modify gb, specifically gb vendor, to consume released versions of packages.\r\n\r\nSadly the best ETA I can give for both of these is the end of 2015.",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-28T07:40:25Z",
	"updated_at": "2015-10-28T07:41:13Z"
}
