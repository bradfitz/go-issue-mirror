{
	"id": 135383113,
	"body": "\u003e A strong +1 to the proposal. It would be wonderful to provide consumers of Go kit with version semantics, and the most widely-adopted way of doing that now (gopkg.in) is unsuitable for a variety of reasons.\r\n\r\nWhat are the problems with gopkg.in? Understanding them will allow to address them in this or any subsequent proposals.\r\n\r\nThere are no tags in https://github.com/go-kit/kit repo? Is it because the existing tools (like godep or gb-vendor) do not support them? Should the support for tags be added to these tools then?\r\n\r\n\u003e This is a distraction, because—as I understand it—it categorically can't be allowed to occur. \r\n\r\nThere is no way to enforce it. While not common I can imagine it can occur in practice. Imagine the following hypothetical example:\r\n- there are two incompatible versions of github.com/go-kit/kit 1.2.1 and 2.0.1 (semver versions) and they both use the same import path\r\n- there is library *foo* that depends on kit 1.2.1 and another library *bar* that depends on 2.0.1\r\n- my application depends on both libraries *foo* and *bar*.\r\n\r\nWhat should I do now?\r\n\r\ngopkg.in is an attempt to provide different import paths for invompatible versions of the same package.",
	"user": {
		"login": "kostya-sh",
		"id": 7126275,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-27T10:59:38Z",
	"updated_at": "2015-08-27T10:59:38Z"
}
