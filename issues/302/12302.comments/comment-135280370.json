{
	"id": 135280370,
	"body": "@kostya-sh sorry for not addressing every one of your points\r\n\r\n\u003e However if a package changes in a backward incompatible way between v1 and v2 and keeps using the same import path then burden of resolving dependency mess is on users of the package.\r\n\r\nYes, and this will always be true, and this will always be true if we have a release process and version numbers, or continue to muddle along using vcs revisions as a proxy.\r\n\r\n\u003e I just wanted to suggest that raising awareness about these problems among package developers would be a good thing.\r\n\r\nI agree, and think that semver is a concrete and well understood standard that works well. Do you think that Go should develop its own version numbering scheme ? What benefits do you think that would have over semver ?\r\n\r\n\u003e My examples were referring to a single class loader (no OSGI). You will be surprised how many similarities Go and Java have in package/library management. I would say that within a single class loader they are equivalent:\r\n\r\nYes, the linking model for java, with its class path and the Go toolchain are quite similar and I draw a lot of inspiration from my work with Java and Maven in the past.\r\n\r\n\u003e I am just a bit skeptical that the proposal alone would be enough. I might be wrong about that though as Go community seems to be quite united.\r\n\r\nIt's absolutely not enough. This proposal is just the start, more will follow if this one is accepted, but I belive that this _is_ the place to start.\r\n\r\n\u003e If you agree with that position, then this proposal boils down to a format for vcs tags that I believe can achieve consensus easily and can be of use immediately for all the tool makers, godoc.org maintainers, and operating system distros, in the Go ecosystem.\r\nUnfortunately dealing with backward (in)compatibility is not as simple as enforcing semver and vcs tag format.\r\n\r\nCould you please expand on this point and provide some specifics.\r\n\r\n\u003e Very interesting study of libraries in the maven central repository that contains majority of open source Java libraries: http://avandeursen.com/2014/10/09/semantic-versioning-in-maven-central-breaking-changes/ . Almost 24% of patch updates introduced binary (detectable by tools) incompatibility!\r\n\r\nTo cut to the chase, semver is not a magic bullet, it cannot _force_ developers to do the right thing, only incentivise them to do the right thing. I believe that this property would hold true no matter what version number methodology was proposed, semver or something of our own concoction.\r\n\r\nI think there is a lot of benefit from working from a position of assuming Go programmers _want_ to do the right thing, not engineer a straight jacket process which inhibits them from doing the wrong thing.\r\n\r\nAs you mentioned above social pressure work well in the Go community, I point to the ubiquitous success of gofmt as an example. Code that is no go formatted is considered my many to be a first order indicator of a lack of quality. \r\n\r\nSimilarly, adherence to a commonly accepted ideal of what constitutes semver's major, minor and patch release definitions will come through the same social pressures, and we all benefit from a shared vocabulary across our counterparts in node, ruby and rust.\r\n\r\n\u003e Please treat my comments not as arguments against the proposal but as feedback and food for thoughts.\r\n\r\nThank you for your continued feedback, I appreciate your experience and it is very valuable to me.",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-27T03:42:45Z",
	"updated_at": "2015-08-27T04:56:23Z"
}
