{
	"id": 152072534,
	"body": "Thank you to all those who have commented recently. As I see it, the theme of your responses has been, \"ok, this sounds like a good idea, but when is the other shoe going to drop\".\r\n\r\nHere are some ideas that I had that complement this proposal. I specifically did not include them in the original proposal because I feared (perhaps without good cause) that they would derail the discussion into unproductive bike shedding of future plans.\r\n\r\nTo be clear, I see a standardised release process; putting a tag on your repo, as the first step, without it, the next steps are meaningless. Please when considering the ideas below keep in mind that they are separate from _this_ proposal; they are enabled by it, but not a requirement of this proposal.\r\n\r\n# A central package proxy\r\n\r\nHaving a machine readable tags in repositories would enable some form of centralised proxy.\r\n\r\n*Wait, please don't freak out, I am not proposing maven central*\r\n\r\nWhat I am thinking of is some form of proxy, in precisely the way godoc.org is a proxy for the documentation. This proxy may in fact be godoc.org. \r\n\r\nHitting a url, say https://godoc.org/github.com/pkg/term/v1.1, would return a tgz of the source for github.com/pkg/term at the v1.1 tag. Please do not get too hung up on the specific url, everything about this example is speculative. \r\n\r\nUsing a proxy, rather than a central repository has some other nice benfits.\r\n\r\n* Ownership of a specific import path is delegated to the owner of the url of the target package; be that github, or some vanity url. ICANN decides who owns domain names, we wouldn't have to get involved. Similarly the owner of the repository at the end of the url decides what is tagged, not use. We just proxy.\r\n* Single point of control: this is just a cache, not the origin (the way that maven central is the origin). The source is open, so's the spec so people can run their own repo if they like. The url format will be crawlable so people can mirror with proxies, or wget.\r\n* Separation between the repo that contains the day to day work of the contributors, and the downstream consumers of that package. The former use git, hg, bzr, whatever, over a bunch of protocols; ssh, git, https. The latter just pull from https, which will solve a large number of usability problems that the Go tool has with people who try to use development environments that don't look like open source git projects.\r\n\r\n# Dependencies file\r\n\r\nThe second idea is a way to describe the dependencies of one package to another. If this proposal were accepted, packages are released and have versions, now package authors will want to say things like \"my project depends on version 1.x of the glog logging package\".\r\n\r\nThis information must be stored somewhere in their project's repository, as that is the part that we will cache in the central repo. It _must_ live in the repository to be covered by the same attribution guarantees as the version tag.\r\n\r\nWhere exactly it lives and in what form would be the subject of extended debate; I'm fine with a text file, I'm sure others won't be.",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-29T04:22:22Z",
	"updated_at": "2015-10-29T04:22:22Z"
}
