{
	"id": 134444045,
	"body": "\u003e It would be easier to judge this proposal if it included examples from a specific extant tool that would work better with a standard versioning scheme. \r\n\r\n@crawshaw thank you for your comments. To give two concrete examples:\r\n\r\n\\1. For my project, [gb](https://getgb.io/) I provide a helper plugin, gb-vendor, which assists users in maintaining the contents of the code they have vendored. gb-vendor also provides an update command, but at the moment the best we can do is update from the currently vendored revision to the latest on the branch, if users want something else they have to manually update to a different revision. \r\n\r\nThis is because, given an arbitrary branch and revision, it is not possible to say \"give me the latest stable version\". Sure, if you knew the latest \"blessed\" revision, you could do that, which is effectively what gb-vendor users have to do now, but then again, if they already knew the revision they wanted to switch to, they wouldn't ask questions like \"give me the latest stable version\".\r\n\r\n\\2. For my day job, both Debian and Ubuntu have a strong preference to only package released versions of software. Ubuntu _want_ to make their distribution an excellent platform for Go developers by packaging up all the commonly used dependencies, as we do for other popular languages like Ruby and Python. At the moment Debian maintainers are forced to do [things like this](https://ftp-master.debian.org/new/golang-github-odeke-em-cache_0.0~git20150804.0.b51b08c-1.html), which are of no use to anyone because it's a made up _un_ released version number assigned by the packager, not the owner of the source code.\r\n\r\nNow, that is not to say that all projects do not have usable versions, docker, kubernetes, and coreos, the three biggest projects in Go, use the form I proposed above and that benefits all the downstream consumers of those projects. \r\n\r\n\u003e As it stands, the proposal's preface justifies versions, but not consistent versions.\r\n\r\nIf this proposal removed the use of semver, and made the version string opaque, that is to say `v\u003cx.y.z\u003e` where x, y and z were not specified, would you be more favourable to this propsal ?",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-25T01:54:21Z",
	"updated_at": "2015-08-25T01:56:10Z"
}
