{
	"id": 135341107,
	"body": "A strong +1 to the proposal. It would be wonderful to provide consumers of [Go kit](https://github.com/go-kit/kit) with version semantics, and the most widely-adopted way of doing that now (gopkg.in) is unsuitable for a variety of reasons. \r\n\r\nI would also like to see a larger proposal, including some suggestions (if not spec implementations) for tool integration. But I defer to @davecheney's preference for a smaller scope. SemVer 2.0 is the obvious choice for schema, and versioning whole repositories strikes a good balance between versatility and simplicity.\r\n\r\n@kostya-sh \r\n\r\n\u003e However when there is a possibility that two incompatible versions of the same package are used as dependencies of a single project (in semver terms libfoo 1.x and libfoo 2.y) . . .\r\n\r\nThis is a distraction, because—as I understand it—it categorically can't be allowed to occur. Two versions of the same package can't be imported into the same dependency graph, because of issues like the double-driver-registration problem enumerated by @davecheney above.",
	"user": {
		"login": "peterbourgon",
		"id": 114509,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-27T08:35:59Z",
	"updated_at": "2015-08-27T08:35:59Z"
}
