{
	"id": 137279032,
	"body": "@crawshaw said:\r\n\r\n\u003egopkg.in is very nice but as it is implemented argues for a much stronger notion of versions (major versions mean API changes, smaller versions provide compatibility), so it's interesting to this proposal in that it's different: why is it different and does it suggest any changes? Are they compatible? Are there longer term plans to add meaning to the versions in this proposal like gopkg.in? All good questions from an implementation not even spurred by the desire for this proposal.\r\n\r\nMaybe I don't understand the point you are making. It sounds to me like you are saying that gopkg.in has stronger semantics for VCS tags than this proposal. My understanding is just the opposite. I believe that since this proposal explicitly leverages SemVer 2.0 that it incorporates the meaning of each component of SemVer version numbers as part of this proposal.\r\n\r\nTo review, the summary of SemVer is: \r\n\r\n\u003e1. MAJOR version when you make incompatible API changes,\r\n\u003e2. MINOR version when you add functionality in a backwards-compatible manner, and\r\n\u003e3. PATCH version when you make backwards-compatible bug fixes.\r\n\u003e\r\n\u003eAdditional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.\r\n\r\nThe summary of gopkg.in is:\r\n\r\n\u003eThe number used in the gopkg.in URL looks like \"v1\" or \"v42\", and represents the major version for the Go package. No incompatible changes should be done to the package without also changing that version...\r\n\u003eWhen using branches or tags to version the GitHub repository, gopkg.in understands that a selector in the URL such as \"v1\" may be satisfied by a tag or branch \"v1.2\" or \"v1.2.1\" (vMAJOR[.MINOR[.PATCH]]) in the repository, and will select the highest version satisfying the requested selector.\r\n\r\nThe differences I see are:\r\n\r\n1. SemVer requires all three components MAJOR.MINOR.PATCH, while gopkg.in leaves the last two components as optional.\r\n1. SemVer assigns specific meaning to MINOR and PATCH, while gopkg.in understands them from an ordering perspective but does not distinguish between new features and bug fixes.\r\n1. This proposal admits only VCS tags to indicate a release, while gopkg.in admits tags *and branches*.\r\n\r\nBased on this analysis I conclude that SemVer—and therefore this proposal—is more strict than gopkg.in. I also conclude that the set of repositories that comply with this proposal is a strict subset of repositories that comply with gopkg.in. Which is to say that if a repository complies with this proposal it will also comply with gopkg.in. The converse is not always true, however.",
	"user": {
		"login": "ChrisHines",
		"id": 1060711,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-03T00:19:06Z",
	"updated_at": "2015-09-03T00:19:06Z"
}
