{
	"id": 134742804,
	"body": "@crawshaw \r\n\r\n\u003e I don't have any problem with the specifics of this proposal, I'm just a little confused by the scope. The go tool has opinions about Go packages and the layout of the repositories they exist in, but has no concept of a project. Introducing project-level versioning requires introducing the notion of a project.\r\n\r\nThis is correct, the go tool does not have a concept of how the packages on your GOPATH came to be there, but `go get` does. Before fetching, go get must canonicalise the import path, find some prefix of the path you provided you gave it to the location of a remote repository, which it fetches in its entirety. It is this import prefix, or what the Go tool calls, the repository root, that is a project.\r\n\r\nWith that said, any changes to the go tool are outside the scope of this proposal.\r\n\r\nI've updated the original proposal with a definition of a Go project.\r\n\r\n\u003e The kinds of questions I might ask about projects:\r\n\u003e - Can a project span repositories?\r\n\r\nNo. Each repository is a versioned and released individually.\r\n\r\n\u003e - Can a single repository contain multiple projects?\r\n\r\nNo. The contents of a repository are released together as a whole, golang.org/x/tools is a great example of that.\r\n\r\n\u003e - How many main packages can be in a project?\r\n\r\nUnlimited. There is an unfortunate coincidence with the gb definition of a project. If you think it would help I can reword this proposal to remove all references to Project, and replace it with Remote Repository.\r\n\r\n\u003e - What names a project?\r\n\r\nGo projects are named by the import prefix that is defined by their repository root. Import prefix and repository root are defined by the [documentation on the go tool](https://golang.org/cmd/go/#hdr-Remote_import_paths).",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-25T21:09:48Z",
	"updated_at": "2015-08-25T21:20:55Z"
}
