{
	"id": 133141618,
	"number": 14302,
	"state": "closed",
	"title": "runtime: improve performance of == on arrays.",
	"body": "What version of Go are you using (go version)? go1.5.3\r\nWhat operating system and processor architecture are you using? Linux, amd64\r\nWhat did you do? benchmarked `==` vs `bytes.Equal` for array types\r\nWhat did you expect to see? `==` be as fast as or faster than `bytes.Equal`\r\nWhat did you see instead? `==` is slower than `bytes.Equal`\r\n\r\nGiven:\r\n\r\n```\r\ntype A [16]byte\r\nvar a1, a2 A\r\n```\r\n`a1== a2` is slower than `bytes.Equal(a1[:], a2[:])` with the regular gc compiler.\r\n\r\nOn my machine, the two benchmarks:\r\n```\r\ntype A [16]byte\r\nfunc BenchmarkEqual(b *testing.B) {\r\n        a1 := A{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\r\n        a2 := A{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\r\n        b.ResetTimer()\r\n        for i := 0; i \u003c b.N; i++ {\r\n                if a1 != a2 {\r\n                        b.Fatal(\"not equal\")\r\n                }\r\n        }\r\n}\r\n\r\nfunc BenchmarkBytesEqual(b *testing.B) {\r\n        a1 := A{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\r\n        a2 := A{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\r\n        b.ResetTimer()\r\n        for i := 0; i \u003c b.N; i++ {\r\n                if !bytes.Equal(a1[:], a2[:]) {\r\n                        b.Fatal(\"not equal\")\r\n                }\r\n        }\r\n}\r\n```\r\nresult in times of:\r\n```\r\nBenchmarkEqual-12           200000000            6.02 ns/op\r\nBenchmarkBytesEqual-12      300000000            4.90 ns/op\r\n```\r\nIt seems the same optimizations that have been applied to bytes.Equal could be applied to the code generated by the compiler (or the compiler could simply call the equivalent of the bytes.Equal function).\r\n\r\nI also ran the test with 8, 128, and 1024 byte arrays (as well as 16 bytes).  The source code is\r\n[a_test.go.txt](https://github.com/golang/go/files/127410/a_test.go.txt).\r\n\r\nThe results:\r\n\r\n```\r\nBenchmarkEqual8-12        \t200000000\t         5.78 ns/op\r\nBenchmarkBytesEqual8-12   \t300000000\t         4.89 ns/op\r\nBenchmarkEqual16-12       \t200000000\t         6.77 ns/op\r\nBenchmarkBytesEqual16-12  \t300000000\t         5.93 ns/op\r\nBenchmarkEqual128-12      \t200000000\t         8.48 ns/op\r\nBenchmarkBytesEqual128-12 \t200000000\t         7.57 ns/op\r\nBenchmarkEqual1024-12     \t50000000\t        30.1 ns/op\r\nBenchmarkBytesEqual1024-12\t50000000\t        30.4 ns/op\r\n\r\n```\r\n\r\nAs a side note, with gccgo the results are the opposite, `==` is faster than `bytes.Equal`.  `bytes.Equal` with gccgo is also slower than `bytes.Equal` with the regular gc compiler.",
	"user": {
		"login": "pborman",
		"id": 5115933,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"assignee": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-02-23T00:15:58Z",
	"created_at": "2016-02-12T02:22:08Z",
	"updated_at": "2016-02-23T00:15:58Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
