{
	"id": 240837176,
	"body": "FYI I build and ran the go code from this issue with tip (604efe128) and compared it to tip+[cl 24723](https://golang.org/cl/24723) applied and I got around 10% improvment.\r\n\r\nI also wrote a little benchmark:\r\n\r\n```go\r\nfunc BenchmarkCSV(b *testing.B) {\r\n\td, err := ioutil.ReadFile(\"mock_data.csv\")\r\n\r\n\tif err != nil {\r\n\t\tb.Fatal(err)\r\n\t}\r\n\r\n\tbr := bytes.NewReader(d)\r\n\r\n\tb.ResetTimer()\r\n\r\n\tfor i := 0; i \u003c b.N; i++ {\r\n\t\tbr.Reset(d)\r\n\r\n\t\tr := csv.NewReader(br)\r\n\r\n\t\tfor {\r\n\t\t\t_, err := r.Read()\r\n\r\n\t\t\tif err == io.EOF {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\r\n\t\t\tif err != nil {\r\n\t\t\t\tb.Fatal(err)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nResults for 10 runs each (tip \u0026 tip+cl 24723)\r\n\r\n```\r\nname   old time/op    new time/op    delta\r\nCSV-8     1.27s ± 1%     1.13s ± 2%  -11.49%  (p=0.000 n=10+9)\r\n\r\nname   old alloc/op   new alloc/op   delta\r\nCSV-8     160MB ± 0%     144MB ± 0%  -10.00%   (p=0.000 n=9+9)\r\n\r\nname   old allocs/op  new allocs/op  delta\r\nCSV-8     7.00M ± 0%     2.00M ± 0%  -71.43%   (p=0.000 n=9+9)\r\n```\r\n\r\nCPU profile with cl 24723:\r\n```\r\n(pprof) top20\r\n1.18s of 1.18s total (  100%)\r\nShowing top 20 nodes out of 37 (cum \u003e= 0.01s)\r\n      flat  flat%   sum%        cum   cum%\r\n     0.33s 27.97% 27.97%      0.35s 29.66%  bufio.(*Reader).ReadRune\r\n     0.17s 14.41% 42.37%      0.17s 14.41%  bytes.(*Buffer).grow\r\n     0.16s 13.56% 55.93%      0.33s 27.97%  bytes.(*Buffer).WriteByte\r\n     0.16s 13.56% 69.49%      0.95s 80.51%  encoding/csv.(*Reader).parseField\r\n     0.08s  6.78% 76.27%      1.17s 99.15%  encoding/csv.(*Reader).parseRecord\r\n     0.07s  5.93% 82.20%      0.42s 35.59%  encoding/csv.(*Reader).readRune\r\n     0.06s  5.08% 87.29%      0.12s 10.17%  runtime.mallocgc\r\n     0.05s  4.24% 91.53%      0.05s  4.24%  runtime.heapBitsSetType\r\n     0.04s  3.39% 94.92%      0.37s 31.36%  bytes.(*Buffer).WriteRune\r\n     0.02s  1.69% 96.61%      0.02s  1.69%  runtime.memmove\r\n     0.01s  0.85% 97.46%      0.10s  8.47%  runtime.makeslice\r\n     0.01s  0.85% 98.31%      0.01s  0.85%  runtime.memclr\r\n     0.01s  0.85% 99.15%      0.04s  3.39%  runtime.rawstringtmp\r\n     0.01s  0.85%   100%      0.01s  0.85%  syscall.Syscall\r\n         0     0%   100%      1.18s   100%  _/home/justinn/Workspace_test.BenchmarkCSV\r\n         0     0%   100%      0.02s  1.69%  bufio.(*Reader).fill\r\n         0     0%   100%      0.01s  0.85%  bytes.(*Buffer).ReadFrom\r\n         0     0%   100%      0.02s  1.69%  bytes.(*Reader).Read\r\n         0     0%   100%      1.17s 99.15%  encoding/csv.(*Reader).Read\r\n         0     0%   100%      0.01s  0.85%  io/ioutil.ReadFile\r\n(pprof) top20 --cum\r\n1.14s of 1.18s total (96.61%)\r\nShowing top 20 nodes out of 37 (cum \u003e= 0.02s)\r\n      flat  flat%   sum%        cum   cum%\r\n         0     0%     0%      1.18s   100%  _/home/justinn/Workspace_test.BenchmarkCSV\r\n         0     0%     0%      1.18s   100%  runtime.goexit\r\n         0     0%     0%      1.18s   100%  testing.(*B).run1.func1\r\n         0     0%     0%      1.18s   100%  testing.(*B).runN\r\n         0     0%     0%      1.17s 99.15%  encoding/csv.(*Reader).Read\r\n     0.08s  6.78%  6.78%      1.17s 99.15%  encoding/csv.(*Reader).parseRecord\r\n     0.16s 13.56% 20.34%      0.95s 80.51%  encoding/csv.(*Reader).parseField\r\n     0.07s  5.93% 26.27%      0.42s 35.59%  encoding/csv.(*Reader).readRune\r\n     0.04s  3.39% 29.66%      0.37s 31.36%  bytes.(*Buffer).WriteRune\r\n     0.33s 27.97% 57.63%      0.35s 29.66%  bufio.(*Reader).ReadRune\r\n     0.16s 13.56% 71.19%      0.33s 27.97%  bytes.(*Buffer).WriteByte\r\n     0.17s 14.41% 85.59%      0.17s 14.41%  bytes.(*Buffer).grow\r\n     0.06s  5.08% 90.68%      0.12s 10.17%  runtime.mallocgc\r\n     0.01s  0.85% 91.53%      0.10s  8.47%  runtime.makeslice\r\n     0.05s  4.24% 95.76%      0.05s  4.24%  runtime.heapBitsSetType\r\n     0.01s  0.85% 96.61%      0.04s  3.39%  runtime.rawstringtmp\r\n         0     0% 96.61%      0.04s  3.39%  runtime.slicebytetostring\r\n         0     0% 96.61%      0.03s  2.54%  runtime.rawstring\r\n         0     0% 96.61%      0.02s  1.69%  bufio.(*Reader).fill\r\n         0     0% 96.61%      0.02s  1.69%  bytes.(*Reader).Read\r\n```\r\n\r\nMemory profile with cl 24723:\r\n```\r\n(pprof) top10\r\n1971674 of 1971675 total (  100%)\r\nDropped 2 nodes (cum \u003c= 9858)\r\n      flat  flat%   sum%        cum   cum%\r\n   1971674   100%   100%    1971674   100%  encoding/csv.(*Reader).parseRecord\r\n         0     0%   100%    1971675   100%  _/home/justinn/Workspace_test.BenchmarkCSV\r\n         0     0%   100%    1971674   100%  encoding/csv.(*Reader).Read\r\n         0     0%   100%    1971675   100%  runtime.goexit\r\n         0     0%   100%    1971675   100%  testing.(*B).run1.func1\r\n         0     0%   100%    1971675   100%  testing.(*B).runN\r\n```",
	"user": {
		"login": "nuss-justin",
		"id": 6443781,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-18T19:54:34Z",
	"updated_at": "2016-08-18T19:54:34Z"
}
