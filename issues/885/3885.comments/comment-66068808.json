{
	"id": 66068808,
	"body": "\u003ca id=\"c15\"\u003e\u003c/a\u003eComment 15:\n\n\u003cpre\u003eI did some more tests with some more telling data.\n\nI'm not sure how to interpret it; Hopefully it makes sense to you guys and you can \nuse it as a data point.\n\nIn the test, I try to see which would perform better between linear searching and map\nretrieval.\n\nClearly, map retrieval is much better for integer keys (and I expect for most of the\nother \nnumeric types in Go). It stayed constant whereas linear search increased (as expected).\n\nHowever, for string keys, it seems map retrieval was always worse than linear searching \na slice (in this test) even as we increased the size of the map or slice. Map access\ntime \nincreased as n increased, even \"averaging\" more than the linear search in the slice.\n\nI've attached 3 files:\n- map_vs_slice_test.go (benchmark tests)\n- test.sh (run the benchmark with increasing sizes of n from 2, 4, 8, ... 256)\n- output.txt (sample run)\n\nJust guessing, but could this be because the hash function is called each time on the\nstring?\nIs there a chance that we could do what was done for like reflect.Type, and cache a hash \nin the string? This way, we don't compute the hash every time if the same string is\nsent. \nAs a data point, Java caches the hash code in the String object also to save on hash \ncomputation time. For an immutable value, I think it makes sense.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/3885/15/map_vs_slice_test.go\"\u003emap_vs_slice_test.go\u003c/a\u003e (3663 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/3885/15/test.sh\"\u003etest.sh\u003c/a\u003e (163 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/3885/15/output.txt\"\u003eoutput.txt\u003c/a\u003e (1250 bytes)",
	"user": {
		"login": "ugorji",
		"id": 1222082,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-14T17:42:34Z",
	"updated_at": "2014-12-08T10:20:32Z"
}
