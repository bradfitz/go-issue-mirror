{
	"id": 66068807,
	"body": "\u003ca id=\"c14\"\u003e\u003c/a\u003eComment 14:\n\n\u003cpre\u003eI was seeing some bad results within my codebase that looked up information \nwithin a map. I had to look up a mapping for reflect.Type every turn in the loop\nand the map access increased my benchmark times significantly.\n\nI did some analysis comparing to Node.JS maps, for both string and integer \nkey/values, checking time spent for inserts, deletes and gets for different sizes \nof the map.\n\nI've attached 4 files with my results:\n- comparelangs.go\n- comparelangs.js\n- test.sh (for running with appropriate arguments)\n- output.txt (output from a sample run).\n\nSimple Analysis Results:\n   Node.JS significantly better than Go Maps for insert and retrieval.\n     Go Maps performance degrades at retrieval as map size increases.\n   Node.JS terrible/unusable at delete once since of map grows.\n   Summary is that for typical map usage of small size maps that are, \n     mostly doing retrievals, Go maps do not perform as well.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/3885/14/comparelangs.go\"\u003ecomparelangs.go\u003c/a\u003e (1516 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/3885/14/comparelangs.js\"\u003ecomparelangs.js\u003c/a\u003e (1532 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/3885/14/test.sh\"\u003etest.sh\u003c/a\u003e (1072 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/3885/14/output.txt\"\u003eoutput.txt\u003c/a\u003e (1960 bytes)",
	"user": {
		"login": "ugorji",
		"id": 1222082,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-14T06:42:52Z",
	"updated_at": "2014-12-08T10:20:32Z"
}
