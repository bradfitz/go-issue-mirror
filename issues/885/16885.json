{
	"id": 173349328,
	"number": 16885,
	"state": "closed",
	"title": "net: DNS timeout not implemented per spec",
	"body": "Per man resolv.conf -\r\n\r\n\"timeout:n\r\nsets the amount of time the resolver will wait for a response from a remote name server before retrying the query via a different name server. Measured in seconds, the default is RES_TIMEOUT (currently 5, see \u003cresolv.h\u003e). The value for this option is silently capped to 30.\"\r\n\r\nThis indicates that after timeout seconds, the querier will move to the next server.  \r\n\r\nHowever, in Go 1.7, this seems to be a hard max timeout.  The config structure is even noted as such - \r\n\"timeout    time.Duration // wait before giving up on a query, including retries\"\r\n\r\nThis in itself doesn't make much sense, since server iteration happens inside the retry for loop (which is correct).\r\n\r\nThen in dnsclient_unix.go starting at 183, a hard deadline seems to add cfg.timeout to current time before even starting retries or iterations.  Ideally instead this should be calculated and reset in the server for loop.\r\n\r\nThis is problematic because many set a low timeout in resolv.conf to keep a bad server from hanging for so long.  Doing so now will cause queries to fail rather than move to next server as is supposed to happen.\r\n\r\nThanks\r\nAlex A Skinner\r\n\r\n\r\n\r\nPlease answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n1.7\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nLinux amd64\r\n\r\n\r\n\r\n",
	"user": {
		"login": "axaxs",
		"id": 3145286,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2016-08-26T01:47:08Z",
	"created_at": "2016-08-26T01:38:16Z",
	"updated_at": "2016-08-26T01:47:08Z"
}
