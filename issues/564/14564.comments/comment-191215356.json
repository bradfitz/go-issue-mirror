{
	"id": 191215356,
	"body": "I was also thinking of adding a second opt optional pass. I saw a\nmeasurable decrease in code size of pkg/tools/linuxamd64 binaries.\n\nI don't see why we should split opt. It's generally fast enough\nPe 2 mar. 2016 12:48 p.m., \"Todd\" \u003cnotifications@github.com\u003e a scris:\n\n\u003e Adding another cse/zcse pair costs 3-6% in compile time (consistency\n\u003e checks disabled). Adding a second opt pass *after* cse is negligible in\n\u003e cost and resolves the issue:\n\u003e\n\u003e         {name: \"generic cse\", fn: cse},\n\u003e +       {name: \"opt second pass\", fn: opt},\n\u003e         {name: \"phiopt\", fn: phi opt},\n\u003e\n\u003e name       old time/op     new time/op     delta\n\u003e Template       293ms ± 2%      295ms ± 2%    ~             (p=0.421 n=5+5)\n\u003e GoTypes        1.09s ± 1%      1.10s ± 2%    ~             (p=0.841 n=5+5)\n\u003e Compiler       4.79s ± 1%      4.83s ± 1%    ~             (p=0.151 n=5+5)\n\u003e MakeBash       35.8s ± 2%      36.3s ± 1%    ~             (p=0.222 n=5+5)\n\u003e\n\u003e # file difference\n\u003e /home/todd/Projects/gn/bin/go 11942904\n\u003e /home/todd/Projects/go/bin/go 11942600 [-304 bytes]\n\u003e\n\u003e # section differences\n\u003e read-only data = -25 bytes (-0.001476%)\n\u003e global text (code) = -240 bytes (-0.006249%)\n\u003e Total difference -265 bytes (-0.004533%)\n\u003e\n\u003e g_ssa \u003cnil\u003e\n\u003e   b1:\n\u003e     v1 = InitMem \u003cmem\u003e\n\u003e     v27 = Arg \u003c*uint8\u003e {a} [0] : a[*uint8]\n\u003e     v7 = Arg \u003cint\u003e {b} [0] : b[int]\n\u003e     v26 = Arg \u003cint\u003e {a} [8] : a+8[int]\n\u003e     v16 = LoadReg \u003cint\u003e v7 : CX\n\u003e     v46 = LoadReg \u003cint\u003e v26 : AX\n\u003e     v45 = CMPQ \u003cflags\u003e v16 v46\n\u003e     ULT v45 -\u003e b7 b3 (likely)\n\u003e   b7: \u003c- b1\n\u003e     v50 = LoadReg \u003c*uint8\u003e v27 : DX\n\u003e     v15 = MOVQloadidx8 \u003cint\u003e [0] v50 v16 v1 : AX\n\u003e     v36 = ADDQconst \u003cint\u003e [2] v15 : AX\n\u003e     v44 = MOVQstoreidx8 \u003cmem\u003e [0] v50 v16 v36 v1\n\u003e     Ret v44\n\u003e   b3: \u003c- b1\n\u003e     v11 = CALLstatic \u003cmem\u003e {runtime.panicindex} [0] v1\n\u003e     Exit v11\n\u003e\n\u003e There's a long standing TODO about splitting the required and optimizing\n\u003e rules. What are your thoughts on doing that split and adding the second\n\u003e optimization rule pass after cse?\n\u003e\n\u003e —\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/14564#issuecomment-191205305\u003e.\n\u003e\n",
	"user": {
		"login": "brtzsnr",
		"id": 57079,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-02T12:14:28Z",
	"updated_at": "2016-03-02T12:14:28Z"
}
