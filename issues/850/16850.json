{
	"id": 172759015,
	"number": 16850,
	"state": "closed",
	"title": "runtime: madvise() failure during scavenging causing crash on darwin arm64",
	"body": "1. What version of Go are you using (`go version`)?\r\n\r\ngo version go1.7 darwin/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\niOS 9.3.4 arm64 (though I believe this applies to armv7 as well)\r\n\r\n3. What did you do?\r\n\r\nCreate a gomobile library with `gomobile bind -target ios` and link the framework into an iOS app. Run the app, then switch away for five minutes or more. Switch back to the app.\r\n\r\n4. What did you expect to see?\r\n\r\nNormal operation.\r\n\r\n5. What did you see instead?\r\n\r\nUpon returning to the app, one thread will have crashed via `notok` as a result of a failed `madvise` syscall during scavenging. `GODEBUG=scavenge=1` accelerates things significantly, and it will crash almost immediately.\r\n\r\n----\r\n\r\nIt seems this was [fixed for 386 and amd64 a while ago](https://codereview.appspot.com/6998052/), but the same treatment never got applied to arm/arm64. I tested [a similar fix](https://github.com/golang/go/compare/release-branch.go1.7...SpiderOak:darwin-arm-ignore-madvise-failure) and it solved my problem, but I'm not that confident in my ability to edit ARM assembly correctly.\r\n\r\nFrustratingly, I couldn't replicate the problem with any of the gomobile example apps. I suspect that they are too simple to sufficiently provoke the GC.",
	"user": {
		"login": "bytex64",
		"id": 3218786,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-08-23T18:09:03Z",
	"created_at": "2016-08-23T17:29:34Z",
	"updated_at": "2016-08-23T18:09:03Z"
}
