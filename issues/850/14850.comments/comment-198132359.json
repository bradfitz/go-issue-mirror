{
	"id": 198132359,
	"body": "Regalloc definitely needs a once-over for  allocation reduction.  A lot of\nthe allocation looks like live variable analysis, which maybe we could do\nmore densely.\ncopyelimValue surprises me.  It implies there are large copy chains and we\nwould do well to short circuit them as we find them (so short circuiting\nthem all takes O(n), not potentially O(n^2)).\n\n\nOn Thu, Mar 17, 2016 at 4:22 PM, Dave Cheney \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e\n\u003e    1. What version of Go are you using (go version)?\n\u003e\n\u003e go version devel +56e0ecc Thu Mar 17 04:20:02 2016 +0000 linux/amd64\n\u003e\n\u003e    1. What operating system and processor architecture are you using (go\n\u003e    env)?\n\u003e\n\u003e linux/amd64\n\u003e\n\u003e    1. What did you do?\n\u003e\n\u003e (pprof) lucky(~/go/src/cmd/compile/internal/gc) % env GOGC=off go build -gcflags=-cpuprofile=/tmp/c.p .\n\u003e lucky(~/go/src/cmd/compile/internal/gc) % go tool pprof $(go tool -n compile) /tmp/c.p\n\u003e\n\u003e\n\u003e    1. What did you expect to see?\n\u003e\n\u003e mallocgc should take less of the overall run time\n\u003e\n\u003e    1. What did you see instead?\n\u003e\n\u003e Entering interactive mode (type \"help\" for commands)\n\u003e (pprof) top\n\u003e 1640ms of 5080ms total (32.28%)\n\u003e Dropped 289 nodes (cum \u003c= 25.40ms)\n\u003e Showing top 10 nodes out of 243 (cum \u003e= 350ms)\n\u003e flat flat% sum% cum cum%\n\u003e 240ms 4.72% 4.72% 240ms 4.72% cmd/compile/internal/ssa.copyelimValue\n\u003e 240ms 4.72% 9.45% 240ms 4.72% runtime.duffzero\n\u003e 210ms 4.13% 13.58% 220ms 4.33% runtime.(\n\u003e\n\u003e\n\u003e *mcentral).grow 190ms 3.74% 17.32% 400ms 7.87%\n\u003e cmd/compile/internal/gc.escwalkBody 170ms 3.35% 20.67% 600ms 11.81%\n\u003e runtime.mallocgc 140ms 2.76% 23.43% 170ms 3.35% cmd/compile/internal/ssa.(*\n\u003e regAllocState).computeLive\n\u003e 130ms 2.56% 25.98% 130ms 2.56% runtime.heapBitsSetType\n\u003e 110ms 2.17% 28.15% 640ms 12.60%\n\u003e cmd/compile/internal/ssa.(*regAllocState).regalloc\n\u003e 110ms 2.17% 30.31% 220ms 4.33% cmd/compile/internal/ssa.cmpVal\n\u003e 100ms 1.97% 32.28% 350ms 6.89% runtime.mapassign1\n\u003e\n\u003e [image: compile]\n\u003e \u003chttps://cloud.githubusercontent.com/assets/7171/13864113/25e0edb2-ecf3-11e5-9884-233014199813.png\u003e\n\u003e\n\u003e â€”\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/14850\u003e\n\u003e\n",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-17T23:37:15Z",
	"updated_at": "2016-03-17T23:37:15Z"
}
