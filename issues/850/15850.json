{
	"id": 157037259,
	"number": 15850,
	"state": "open",
	"title": "crypto/rand: does not verify /dev/urandom is a character device",
	"body": "Posting here per my e-mail conversation with rsc@\r\n\r\n--\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\n1.6.2\r\n\r\n2. What operating system and processor architecture are you using (`go\r\nenv`)?\r\n\r\nGOOS=linux\r\nGOARCH=amd64\r\n\r\n3. What did you do?\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n\r\n![glissue](https://cloud.githubusercontent.com/assets/5894247/15447269/c5ace532-1ef1-11e6-9141-4e060b4584a3.png)\r\n\r\n4. What did you expect to see?\r\n\r\nAn error because `/dev/urandom` isn't a character device.\r\n\r\n5. What did you see instead?\r\n\r\nA normal read of the bad file.\r\n\r\nKernel versions \u003c 3.17 read /dev/urandom instead of calling\r\ngetrandom(2). This allows an attacker to redirect modify /dev/urandom so\r\nto a block device instead of a character device. A simple check (e.g.,\r\n`f.Mode()\u0026ModeCharDevice == 0`) would mostly mitigate this.\r\n\r\nAdditionally, the min:maj could be checked to see if it matches what\r\nLinux says it's supposed to be (`man 4 random` says 1:9 for /dev/urandom)",
	"user": {
		"login": "EricLagergren",
		"id": 5894247,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"created_at": "2016-05-26T17:31:03Z",
	"updated_at": "2016-06-21T18:11:21Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
