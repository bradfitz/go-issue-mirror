{
	"id": 66055135,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2 by **eleanor@games-with-brains.com**:\n\n\u003cpre\u003eWhen I run that program the size is reported correctly, and also if I declare _a as a\npackage-level variable (which is how it's being used in my code).\n\nFor me the problem manifests itself when I'm running tests via gotest (which I should\nhave mentioned in my original report - apologies about that, it's such an ingrained part\nof my workflow that I tend to forget I'm using it).\n\nruntime.go\n=======\n\n\tpackage raw\n\timport \"unsafe\"\n\n\ttype BasicType struct {\n\t\tsize\t\t\t\tint\n\t\talignment\t\tint\n\t}\n\n\tvar _a interface{} = 0\n\tvar INTERFACE = BasicType{ unsafe.Sizeof(_a), unsafe.Alignof(_a) }\n\ntest_runtime.go\n==========\n\n\n\tpackage raw\n\timport \"testing\"\n\timport \"unsafe\"\n\n\tvar _b interface{} = 0\n\tvar _i = BasicType{ unsafe.Sizeof(_b), unsafe.Alignof(_b) }\n\n\tfunc TestInterfaceSize(t *testing.T) {\n\t\tt.Logf(\"_b size = %v, align = %v\", unsafe.Sizeof(_b), unsafe.Alignof(_b))\n\t\tt.Logf(\"_i.size = %v, align = %v\", _i.size, _i.alignment)\n\t}\n\noutput\n====\n\t_b size = 16, align = 8\n\t_i.size = -1000000000, align = 8\n\nI would have expected unsafe.Sizeof(_b) and _i.size to be the same, and likewise\nunsafe.Sizeof(_a) and INTERFACE.size - or at least for unsafe.Sizeof() to consistently\nreturn the same result for package-level variables declared prior to its invocation.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-03-15T11:43:57Z",
	"updated_at": "2014-12-08T10:09:05Z"
}
