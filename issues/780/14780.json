{
	"id": 140258969,
	"number": 14780,
	"state": "open",
	"title": "cmd/go: unable to disable test timeout",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n1.6\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nlinux/amd64\r\n\r\n3. What did you do?\r\n\r\n`go test` timeouts are implemented in 2 ways:\r\n\r\nThere is the main timeout which just calls `panic` when the timeout is reached.\r\nThis timeout can be disabled when you set a value less than 1\r\n\r\nA secondary timeout is set as a failsafe which calls SIGQUIT to dump a stacktrace and then exits.\r\nThis is set to the main timeout value + 1 minute: https://github.com/golang/go/blob/9323de3da79d240b8223f74bd8ddd0d55dab8070/src/cmd/go/test.go#L409\r\nIf the main timeout is not \u003e 0, it just stays at the default 10m.\r\n\r\n4. What did you expect to see?\r\nThe test timeout should be able to be be disabled.\r\n\r\n5. What did you see instead?\r\nThe secondary timeout is in place even when no timeout is set and there is no way to disable.\r\n\r\nWe use a test helper that wraps testing.T to provide its own functionality, like setup/teardown tests.\r\nThis means the entire suite uses a single testing.T. With that, means the only way to not have go kill our integration tests is to set an really high value for the timeout (which I think also defeats the purpose of the timeout to begin with).\r\n",
	"user": {
		"login": "cpuguy83",
		"id": 799078,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"created_at": "2016-03-11T18:40:00Z",
	"updated_at": "2016-04-17T17:08:02Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
