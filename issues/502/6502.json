{
	"id": 51285283,
	"number": 6502,
	"state": "closed",
	"title": "Incorrect use of closures in Effective Go documentation",
	"body": "by **shiblon**:\n\n\u003cpre\u003eIn the Effective Go document, the following example appears in the Goroutines section:\n\nfunc Serve(queue chan *Request) {\n    for req := range queue {\n        \u0026lt;-sem\n        go func() {\n            process(req)\n            sem \u0026lt;- 1\n        }()\n    }\n}\n\nThis example is not going to work, however, because \u0026quot;req\u0026quot; gets reused at every\niteration of the loop. In order for it to be correct, it would either need \u0026quot;req :=\nreq\u0026quot; at the beginning of the loop body, or the request should be passed in thus:\n\nfunc Serve(queue chan *Request) {\n    for req := range queue {\n        \u0026lt;-sem\n        go func(r *Request) {\n            process(r)\n            sem \u0026lt;- 1\n        }(req)\n    }\n}\n\nI am not sure which of the two approaches would be more idiomatic in Go (creating a new\nlocal variable at every iteration vs. passing in a parameter), but the one that is\ncurrently there appears incorrect.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:35:54Z",
	"created_at": "2013-09-27T23:30:34Z",
	"updated_at": "2016-06-25T01:19:51Z"
}
