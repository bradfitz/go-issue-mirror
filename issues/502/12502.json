{
	"id": 104942650,
	"number": 12502,
	"state": "closed",
	"title": "cmd/go: allow local imports in non-local packages",
	"body": "Consider the following file structure:\r\n\r\n    $GOPATH/src/example/example.go (Imports \"./other\")\r\n    $GOPATH/src/example/other/other.go\r\n\r\nCurrently, if you run `go build example`, the command will fail with `local import \"./other\" in non-local package`. In many cases, this is not a problem; for example, in this case, you could just use `import \"example/other\"` instead.\r\n\r\nHowever, this quickly becomes a problem when dealing with GitHub forks. For example, let's say that the `example` package is a command that I've pushed to GitHub. In this case, the import line would be `import \"github.com/DeedleFake/example\"`. Someone else decides that they want to contribute, so they fork the repo. Two repos now exist: `github.com/DeedleFake/example`, and `github.com/someone/example`.\r\n\r\nThe problem is that they want to make a change to `other`. In order to do so, they must modify every instance of the import line in `example` in order to build their modified version, but they have to remember to change them all back before submitting a pull request. This is tedious and error prone. In the worst case, they miss one or two of the imports and `github.com/someone/example` winds up importing both `github.com/someone/example/other` *and* `github.com/DeedleFake/example/other`.\r\n\r\nSo, I propose that relative imports be allowed inside of a GOPATH. Especially with internal packages incentifying people to split their code into multiple sub-packages, it just seems to me like it would make sense.",
	"user": {
		"login": "DeedleFake",
		"id": 326750,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2015-09-04T19:00:09Z",
	"created_at": "2015-09-04T18:23:37Z",
	"updated_at": "2016-09-04T20:48:26Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
