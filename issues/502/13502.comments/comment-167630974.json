{
	"id": 167630974,
	"body": "A final note on this (hopefully):\r\n\r\nSHLoadIndirectString is an alternative to GetDynamicTimeZoneInformation that you can remember if the current code needs to be revised at some later date. I think SHLoadIndirectString is better suited for the current testing approach since the caller get to decide what registry key values to fetch irrespective of any settings the user has made.\r\n\r\nI still think that an integration test is the right approach (and not a pure unit test with mocking) and also testing the real MUI-keys and indirectly tzres.dll and its satellite DLLs since that was the initial purpose for GetMUIStringValue. Testing the real keys will also constrict the side effects (populating the shell string cache) to keys that Windows itself uses which I feel is OK. \r\n\r\nExample to put in your back pocket for a rainy day (could contain bugs):\r\n\r\n```go\r\n//Solution using SHLoadIndirectString\r\n//\r\n// $ cd %goroot%\\src\\internal\\syscall\\windows\\registry\r\n// $ go test -run=TestGetMUIStringValue -cover -coverprofile=cover.out\r\n// $ go tool cover -html cover.out\r\n\r\nfunc TestGetMUIStringValue(t *testing.T) {\r\n\r\n    if err := registry.LoadRegLoadMUIString(); err != nil {\r\n        t.Skip(\"regLoadMUIString not supported; skipping\")\r\n    }\r\n\r\n    tzk := openTZKey(\"W. Europe Standard Time\")\r\n    defer tzk.close()\r\n\r\n    tests := []struct {\r\n        name string\r\n        want interface{}\r\n        data string\r\n    }{\r\n        {\"MUI_Std\", tzk.load(\"MUI_Std\"), tzk.data(\"MUI_Std\")},\r\n        {\"MUI_Dlt\", tzk.load(\"MUI_Dlt\"), tzk.data(\"MUI_Dlt\")},\r\n        {\"MUI_Display\", tzk.load(\"MUI_Display\"), tzk.data(\"MUI_Display\")},\r\n        //{\"Invalid string (wrong format)\", error(registry.ErrInvalidData), \"a value\"},\r\n        {\"Invalid string (dll missing)\", error(registry.ErrNotExist), \"@shouldnotexist666.dll,-1\"},\r\n    }\r\n\r\n    if tzk.err != nil {\r\n        t.Fatal(tzk.err)\r\n    }\r\n\r\n    basek, kpath := registry.CURRENT_USER, \"Software\\\\\"+randKeyName(\"TestMUIValues_\")\r\n    k, err := tempSubKey(basek, kpath)\r\n    if err != nil {\r\n        log.Fatal(err)\r\n    }\r\n    defer k.Close()\r\n    defer registry.DeleteKey(basek, kpath)\r\n\r\n    for _, test := range tests {\r\n        if err = k.SetStringValue(test.name, test.data); err != nil {\r\n            t.Fatalf(\"SetValue for %q failed: %v\", test.name, err)\r\n        }\r\n    }\r\n\r\n    //*registry.PGetMuiStringValueBufLen = 2\r\n    for _, test := range tests {\r\n        var got interface{}\r\n        got, err = k.GetMUIStringValue(test.name)\r\n        if _, ok := test.want.(error); ok {\r\n            got = err\r\n        }\r\n        if got != test.want {\r\n            t.Errorf(\"GetMUIStringValue: %s: Got %T %q, want %T %q\", test.name, got, got, test.want, test.want)\r\n        }\r\n    }\r\n}\r\n\r\ntype TZKey struct {\r\n    k   registry.Key\r\n    err error\r\n}\r\n\r\nfunc (tzk *TZKey) close() {\r\n    if tzk.k != 0 {\r\n        tzk.k.Close()\r\n    }\r\n}\r\n\r\nfunc (tzk *TZKey) data(name string) string {\r\n    if tzk.err != nil {\r\n        return \"\"\r\n    }\r\n    var v string\r\n    v, _, tzk.err = tzk.k.GetStringValue(name)\r\n    if tzk.err != nil {\r\n        return \"\"\r\n    }\r\n    return v\r\n}\r\n\r\nfunc (tzk *TZKey) load(name string) string {\r\n    v := tzk.data(name)\r\n    if tzk.err != nil {\r\n        return \"\"\r\n    }\r\n    var s string\r\n    s, tzk.err = SHLoadIndirectString(v)\r\n    if tzk.err != nil {\r\n        return \"\"\r\n    }\r\n    return s\r\n}\r\n\r\nfunc openTZKey(tz string) *TZKey {\r\n    tzk := new(TZKey)\r\n    tzk.k, tzk.err = registry.OpenKey(registry.LOCAL_MACHINE, `SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones\\`+tz, registry.QUERY_VALUE)\r\n    return tzk\r\n}\r\n\r\nfunc tempSubKey(basek registry.Key, path string) (k registry.Key, err error) {\r\n    k, _, err = registry.CreateKey(basek, path, registry.CREATE_SUB_KEY|registry.QUERY_VALUE|registry.SET_VALUE)\r\n    if err != nil {\r\n        return 0, err\r\n    }\r\n    return k, nil\r\n}\r\n\r\nvar (\r\n    shlwapiDLL               = syscall.NewLazyDLL(\"shlwapi\")\r\n    procSHLoadIndirectString = shlwapiDLL.NewProc(\"SHLoadIndirectString\")\r\n)\r\n\r\nfunc SHLoadIndirectString(src string) (res string, err error) {\r\n\r\n    psrc, err := syscall.UTF16PtrFromString(src)\r\n    if err != nil {\r\n        return \"\", err\r\n    }\r\n\r\n    var buf = make([]uint16, 1024)\r\n\r\n    r0, _, e1 := syscall.Syscall6(\r\n        procSHLoadIndirectString.Addr(),\r\n        4,\r\n        uintptr(unsafe.Pointer(psrc)),\r\n        uintptr(unsafe.Pointer(\u0026buf[0])),\r\n        uintptr(len(buf)),\r\n        0,\r\n        0,\r\n        0)\r\n\r\n    if r0 != 0 {\r\n        return \"\", e1\r\n    }\r\n\r\n    return syscall.UTF16ToString(buf), nil\r\n}\r\n```",
	"user": {
		"login": "dajoo75",
		"id": 6588569,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-28T19:15:10Z",
	"updated_at": "2015-12-28T19:15:10Z"
}
