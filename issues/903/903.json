{
	"id": 51277083,
	"number": 903,
	"state": "closed",
	"title": "reflect.Call() is broken with embedded types",
	"body": "\u003cpre\u003eCalling with reflection with embedded types seems to be broken.\n\nHere is a short snippet showing the issue:\n\n    package main\n    import \u0026quot;reflect\u0026quot;\n    type A struct{}\n    type B struct{A}\n    func (a *A) S() { println(\u0026quot;Hi!\u0026quot;) }\n    func main() {\n        b := \u0026amp;B{}\n        b.S()\n        reflect.NewValue(b).Method(0).Call([]reflect.Value{})\n    }\n\nb.S() works, but the next line fails with:\n\n    panic: type mismatch: *main.A != *main.B\n\nLooking at the source of Call():\n\n    if v := fv.first; v != nil {\n        // Hard-wired first argument.\n        if fv.isInterface {\n            // v is a single uninterpreted word\n            memmove(addr(ptr), v.getAddr(), ptrSize)\n            off = ptrSize\n        } else {\n            // v is a real value\n            tv := v.Type()\n            typesMustMatch(t.In(0), tv)\n            n := tv.Size()\n            memmove(addr(ptr), v.getAddr(), n)\n            off = n\n            delta = 1\n        }\n    }\n\nIt looks to my untrained eye like the type checking might be relaxed in the second case\ntoo, in the same way that was done with interfaces in the first case.\n\nThe only possible way to reach this code path is via the Method() function, which I\nbelieve is already a proof that the type is indeed acceptable as the receiver of the\ngiven call.\n\nAm I missing something, or could this check be removed?\u003c/pre\u003e",
	"user": {
		"login": "niemeyer",
		"id": 378683,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2014-12-08T10:06:16Z",
	"created_at": "2010-07-07T03:35:32Z",
	"updated_at": "2016-06-24T19:17:29Z"
}
