{
	"id": 66051232,
	"body": "\u003ca id=\"c15\"\u003e\u003c/a\u003eComment 15:\n\n\u003cpre\u003eWith the rt_sigaction error check disabled, this sometimes works:\n\nvalgrind --tool=none -v ./reflect.test -test.v\n\nbut also sometimes fails with nil pointer derefs, etc.\n\nThis points to some issues in the Valgrind runtime.\n\nvalgrind --tool=memcheck survives some packages but segfaults on reflect.\n\nSo next steps:\n\n1. Fix the SIGRT32 sigaction thing in the Go runtime. Some guidance would be appreciated.\n\n2. Fix the Valgrind runtime so that nullgrind can always run all the tests.\n\n3. Tackle the memcheck segfault/stacktrace debugging task from the valgrind-developers\nmailing list:\n\n\"\"\"\nYou might use the Valgrind gdbserver to use gdb to do the stacktrace\njust before the error is reported by Valgrind.\n\nIf gdb+Valgrind gdbserver can produce a stacktrace of the simulated cpu\nand Valgrind \"core\" cannot make a stacktrace with the same simulated cpu\nstate, then it looks like the Valgrind stacktrace logic is to be\nenhanced/corrected.\n\nIf both can't make a stacktrace, but the native gdb can do a stacktrace,\nthen that looks more like a Valgrind simulation bug.\n\"\"\"\n\n4. Add the stuff from\n\u003ca href=\"http://valgrind.org/docs/manual/manual-core-adv.html#manual-core-adv.clientreq\"\u003ehttp://valgrind.org/docs/manual/manual-core-adv.html#manual-core-adv.clientreq\u003c/a\u003e to the Go\nruntime code to hopefully cut down on spurious Valgrind warnings.\u003c/pre\u003e",
	"user": {
		"login": "alberts",
		"id": 409689,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-02-02T09:58:58Z",
	"updated_at": "2014-12-08T10:05:51Z"
}
