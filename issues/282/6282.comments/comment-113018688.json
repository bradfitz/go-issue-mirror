{
	"id": 113018688,
	"body": "@nigeltao's response to the proposal: https://groups.google.com/d/msg/golang-dev/T2oH4MK5kj8/Kwpe8NfD45IJ\r\n\r\n\u003e We appreciate the amount of work and care that went into this \r\n\u003e proposal, but we're sorry that it's not likely to be adopted, at least \r\n\u003e for Go 1. \r\n\u003e \r\n\u003e The problem isn't with the proposal itself. The reason is that the \r\n\u003e language is stable: the bar for new language features is high, and is \r\n\u003e only getting higher. The \"Changes to the language\" sections of \r\n\u003e http://golang.org/doc/go1.1, http://golang.org/doc/go1.2 and \r\n\u003e http://golang.org/doc/go1.3 are getting smaller, not bigger. The \r\n\u003e changes that did happen were also minor compared to introducing \r\n\u003e tables, which touch make, literals, indexing, slices, len/cap, copy, \r\n\u003e range, reflect and the type system in general. \r\n\u003e \r\n\u003e We don't doubt that adding tables to the language has benefits. Any \r\n\u003e reasonable language feature has benefits, and the gonum-dev mailing \r\n\u003e list's existence clearly shows that it would make some people very \r\n\u003e happy. Yet even if tables were part of the language, it's hard to see \r\n\u003e any packages in the standard library, or even in the \r\n\u003e code.google.com/p/go.foo sub-repositories, that would use them. There \r\n\u003e is a chicken-and-egg factor here, but it's still not encouraging for \r\n\u003e tables. \r\n\u003e \r\n\u003e The only candidate seems to be the image-related packages, but even \r\n\u003e then, we can't change, for instance, the image.RGBA type in the Go 1.x \r\n\u003e time frame, and even for a hypothetical Go 2.0, it's not clear that \r\n\u003e changing the design of the image package is a win. One of the \r\n\u003e motivations for the current design is that, when decoding from or \r\n\u003e encoding to formats like GIF or PNG, it's useful to linearize the \r\n\u003e rectangle of pixels as a []byte, as spoken by general-purpose \r\n\u003e compressors like LZW and ZLIB. Another deliberate design decision, \r\n\u003e based on Plan 9 GUI experience, was that the top-left of an image \r\n\u003e isn't necessarily at (0, 0). \r\n\u003e \r\n\u003e In any case, debating the proposal's benefits is secondary. To repeat \r\n\u003e the main point, we value API and language stability very highly. Yes, \r\n\u003e the proposal is backwards-compatible, but it's a feature request, not \r\n\u003e a bug fix, and we err on the side of making no changes. \r\n\u003e \r\n\u003e As an alternative, one could define a computational language a la \r\n\u003e halide-lang, and write a program that worked with \"go generate\". This \r\n\u003e program would parse the specialized code and generate Go 1.x code \r\n\u003e (which possibly uses package unsafe for pointer arithmetic), or \r\n\u003e generate C code, or generate 6a-compatible assembly code, or generate \r\n\u003e GPU-specific code. Of course, this still requires finding someone to \r\n\u003e do the work, but that person or group of people don't have to be \r\n\u003e familiar with the runtime and compilers, blocked on Go's release \r\n\u003e cycles, or bound by the Go 1 compatibility promise. \r\n",
	"user": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-18T02:42:54Z",
	"updated_at": "2015-06-18T02:42:54Z"
}
