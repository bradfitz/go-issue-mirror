{
	"id": 239576102,
	"body": "Regarding the status of this proposal: I have just reviewed the latest version of the design doc and provided some more feedback. As far as I can tell, and ignoring details of the design doc wording and some syntax specifics (which just need to be decided), the proposal seems fairly clean, consistent, and implementable.\r\n\r\nThe proposal is also backward compatible with Go as it is now - that is, the generalization of slices into multi-dimensional slices could be done w/o affecting existing Go code.\r\n\r\nHowever, this backward-compatibility also comes at a high price: It makes it impossible for an n-dimensional slice to be (sub-)sliced in arbitrary dimensions. Indexing must always be done from left-to-right (outer- to innermost dimension) so that a 1-dimensional slice gracefully degrades into an existing Go slice. The problem is that existing slices don't store an explicit 'stride' as it is always 1. For instance, given a 2-dim. matrix, I can \"slice\" a row vector, but I cannot \"slice\" a column vector (since the stride of that column would not be 1 in general).\r\n\r\nWithout paying a runtime cost, I don't see how backward-compatibility can be retained without the above-mentioned restriction.\r\n\r\nI think this is the crucial question here: Is this restriction too restrictive?",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-12T22:35:34Z",
	"updated_at": "2016-08-12T22:35:34Z"
}
