{
	"id": 51776088,
	"number": 9282,
	"state": "open",
	"title": "testing/quick: add support for shrinking",
	"body": "The testing/quick package automatically generates test cases to be checked against a property. However, it often generates complicated values which obscure the source of test failures. Shrinking is a feature from the original [QuickCheck](https://en.wikipedia.org/wiki/QuickCheck) which eases this burden by \"simplifying\" a failed test case as much as possible.\r\n\r\nEvan Shaw gave a [presentation](https://docs.google.com/a/golang.org/file/d/0B-nws9GU_6qVVElmOHpwamp4aTA/edit) on testing/quick at Gopher Summerfest, and [started work](http://godoc.org/github.com/edsrzf/quick) on adding shrinking to the package in the stdlib. I could't find any official activity related to it, though.\r\n\r\nI think he got a good start on the problem, but I also think the interface definition for Shrinker would be significantly simpler like this:\r\n\r\n    // A Shrinker can produce simpler values with its same type.\r\n    type Shrinker interface {\r\n        // Shrink returns a closure which successively yields simpler values of its type.\r\n        Shrink() func() reflect.Value\r\n    }\r\n\r\nAlso, because testing/quick generates random values for its test cases, I believe the behavior of quick.Check() can be changed to support shrinking without breaking the Go compatibility guidelines.\r\n\r\nI can work on this feature if the Go team decides it's a good idea.",
	"user": {
		"login": "ghost",
		"id": 10137,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Suggested"
		}
	],
	"comments": 1,
	"created_at": "2014-12-12T06:49:31Z",
	"updated_at": "2015-04-14T19:45:26Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
