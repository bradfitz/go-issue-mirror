{
	"id": 76205561,
	"body": "Here're two standard scenarios:\r\n\r\n### Sorting the same array with different comparators\r\nIt's very inconvinient to define a type for the array of a custom type and assert it just for sorting. When you have to sort in different ways, things become worse.\r\n\r\n### Sorting without changing the original array\r\nI.e. create an index array to represent the sorting result.\r\n\r\nHere are some code fragments showing these cases:\r\n\r\n```go\r\ntype MyData struct {\r\n    score int\r\n    time   int\r\n}\r\n\r\nfunc main() {\r\n    list := []MyData{...}\r\n    // descending sort by score\r\n    sort.Sort(len(list), func(i, j int) bool {\r\n        return list[i].score \u003e list[i].score\r\n    }, func(i, j int) {\r\n        list[i], list[j] = list[j], list[i]\r\n    })\r\n\r\n    // sort by time\r\n    sort.Sort(len(list), func(i, j int) bool {\r\n        return list[i].time \u003c list[i].time\r\n    }, func(i, j int) {\r\n        list[i], list[j] = list[j], list[i]\r\n    })\r\n\r\n    // sort with indexes\r\n    indexes := make([]int, len(list)\r\n    for i := range list {\r\n        indexes[i] = i\r\n    }\r\n    sort.Sort(len(list), func(i, j int) bool {\r\n        return list[indexes[i]].score \u003c list[indexes[j]].score\r\n    }, func(i, j) {\r\n        indexes[i], indexes[j] = indexes[j], indexes[i]\r\n    })\r\n}\r\n```\r\n\r\nClosures are clearly making the code consie and much easier to maintain.\r\n\r\nPS: I think the `Len` not necessary to be a function but just a integer field.",
	"user": {
		"login": "daviddengcn",
		"id": 565744,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-26T16:08:23Z",
	"updated_at": "2015-02-26T16:08:23Z"
}
