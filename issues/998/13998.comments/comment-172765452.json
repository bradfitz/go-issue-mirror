{
	"id": 172765452,
	"body": "This is an actual bug that I see. It happens because the connection is terminated by a component in between and a FIN package is never sent back to Go.  \r\n\r\nIf you don't have TCP KeepAlive enabled, Go will have no way of knowing that the connection is down. It will find the first time it tries to send a new HTTP request.\r\n\r\n```\r\n11:48:18.759501 IP source.60116 \u003e target.https: Flags [S], seq 2465554534, win 29200, options [mss 1460,sackOK,TS val 561255716 ecr 0,nop,wscale 7], length 0\r\n11:48:18.760473 IP target.https \u003e source.60116: Flags [S.], seq 1751945730, ack 2465554535, win 28960, options [mss 1460,sackOK,TS val 45413825 ecr 561255716,nop,wscale 7], length 0\r\n11:48:18.760506 IP source.60116 \u003e target.https: Flags [.], ack 1, win 229, options [nop,nop,TS val 561255717 ecr 45413825], length 0\r\n11:48:18.761261 IP source.60116 \u003e target.https: Flags [P.], seq 1:174, ack 1, win 229, options [nop,nop,TS val 561255717 ecr 45413825], length 173\r\n11:48:18.774406 IP target.https \u003e source.60116: Flags [P.], seq 1:4727, ack 174, win 235, options [nop,nop,TS val 45413829 ecr 561255717], length 4726\r\n11:48:18.774439 IP source.60116 \u003e target.https: Flags [.], ack 4727, win 302, options [nop,nop,TS val 561255720 ecr 45413829], length 0\r\n11:48:18.779828 IP source.60116 \u003e target.https: Flags [P.], seq 174:249, ack 4727, win 302, options [nop,nop,TS val 561255722 ecr 45413829], length 75\r\n11:48:18.779943 IP source.60116 \u003e target.https: Flags [P.], seq 249:255, ack 4727, win 302, options [nop,nop,TS val 561255722 ecr 45413829], length 6\r\n11:48:18.779991 IP source.60116 \u003e target.https: Flags [P.], seq 255:300, ack 4727, win 302, options [nop,nop,TS val 561255722 ecr 45413829], length 45\r\n11:48:18.781131 IP target.https \u003e source.60116: Flags [.], ack 300, win 235, options [nop,nop,TS val 45413830 ecr 561255722], length 0\r\n11:48:18.781192 IP target.https \u003e source.60116: Flags [P.], seq 4727:4778, ack 300, win 235, options [nop,nop,TS val 45413830 ecr 561255722], length 51\r\n11:48:18.781547 IP source.60116 \u003e target.https: Flags [P.], seq 300:453, ack 4778, win 302, options [nop,nop,TS val 561255722 ecr 45413830], length 153\r\n11:48:18.789486 IP target.https \u003e source.60116: Flags [P.], seq 4778:5865, ack 453, win 243, options [nop,nop,TS val 45413832 ecr 561255722], length 1087\r\n11:48:18.827759 IP source.60116 \u003e target.https: Flags [.], ack 5865, win 325, options [nop,nop,TS val 561255734 ecr 45413832], length 0\r\n11:55:23.791656 IP source.60116 \u003e target.https: Flags [P.], seq 453:606, ack 5865, win 325, options [nop,nop,TS val 561361974 ecr 45413832], length 153\r\n11:55:23.792331 IP target.https \u003e source.60116: Flags [R.], seq 5865, ack 606, win 0, length 0\r\n```\r\n\r\n(I have replaced the IP addresses with source and target)\r\n\r\nYou can see that the last 2 records happen around 7 minutes and 5 seconds later and comprise of a `[P.]` request from Go which receives a `[R.]` response.\r\n\r\nIf I were to enable TCP Keep Alive, this would not be reproducible as there would be multiple `[.]` requests to keep the connection alive.\r\n\r\n```\r\n07:34:26.355755 IP source.60201 \u003e target.443: Flags [.], ack 5865, win 325, options [nop,nop,TS val 687047616 ecr 171198210], length 0\r\n07:34:26.356825 IP target.443 \u003e source.60201: Flags [.], ack 453, win 243, options [nop,nop,TS val 171205724 ecr 687040112], length 0\r\n```\r\n\r\n(These are examples from today, that's why there is a timestamp difference)\r\n\r\nStill, it requires a conscious and educated decision when creating the `http.Transport` to enable it and one might not want a continuous stream of polling packets. I would expect that there is a reasonable HTTP Keep Alive enabled by default, similar to Ruby. Currently, the connection is just left there indefinitely. There must be a good reason why Ruby has such a timeout set by default.",
	"user": {
		"login": "momchil-sap",
		"id": 9860734,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-19T07:41:58Z",
	"updated_at": "2016-01-19T07:41:58Z"
}
