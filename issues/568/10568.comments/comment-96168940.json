{
	"id": 96168940,
	"body": "I like your example.  It shows the care and thoughtfulness that goes into the standard library.  The javadoc makes no mention of how false positives are caught (probably aren't) or should be handled.\r\n\r\nTo deal with arbitrary prefixed data, one could return errors from the Next function:\r\nPreviousFilesInvalidError:\r\nwhere a directory record ends, but there is still more data in the stream.  This would indicate two (or more) zip files concatenated, and that all previous files were false and that more files may be coming.  This error may also be used in the case where the stream is closed without a directory record, or could fire an InvalidFileFormatError or similar.\r\n\r\nFirstNFilesInvalidError: could be used to catch cases where files were prepended without directory record.  Technically this error could/should be used for the above case as well.\r\n\r\nAlternatively/Additionally, one could have explanations/warnings of streaming zips in the docs.\r\n\r\nThanks.",
	"user": {
		"login": "krolaw",
		"id": 3317970,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-25T09:36:11Z",
	"updated_at": "2015-04-25T09:36:11Z"
}
