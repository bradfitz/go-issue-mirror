{
	"id": 137259066,
	"number": 14568,
	"state": "closed",
	"title": "net/http: TimeoutHandler timing out instantly",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n```\r\ngo version go1.6 linux/amd64\r\n```\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGORACE=\"\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n3. What did you do?\r\n(Use play.golang.org to provide a runnable example, if possible.)\r\nhttp://play.golang.org/p/K9IgiTNaFk\r\n\r\n4. What did you expect to see?\r\n`204 No content`\r\n\r\n5. What did you see instead?\r\n`503 Service Unavailable`\r\n\r\nIt looks like the timer of the timoutHandler is created when the handler is wrapped in https://github.com/golang/go/blob/fdd0179bb1fdd70d405929b78c7d2fb6b61369b0/src/net/http/server.go#L2312. By the time the request is actually made, `timer.C` will have already triggered.",
	"user": {
		"login": "dim",
		"id": 16614,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2016-03-07T23:42:41Z",
	"created_at": "2016-02-29T13:45:28Z",
	"updated_at": "2016-04-19T23:00:16Z"
}
