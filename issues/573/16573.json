{
	"id": 168894633,
	"number": 16573,
	"state": "closed",
	"title": "reflect: clarify FieldByNameFunc docs?",
	"body": "My Env is as follow:\r\n```\r\ngo version go1.6 darwin/amd64\r\n\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\n```\r\n\r\nIn the package reflect, the func `func (v Value) FieldByNameFunc(match func(string) bool) Value` return the struct field that satisfies the match func.\r\n\r\nMy question is what will the func return if there are more than one struct fields that satisfy the match func. In my opinion, it should return the first field, but actually it return invalid. The test code is as follow.\r\n```go\r\ntype S struct {\r\n    A int\r\n    B int\r\n    C int\r\n    D int\r\n}\r\n\r\nfunc main() {\r\n    var f = func(s string) bool {\r\n        if s == \"A\" || s == \"B\" || s == \"C\" {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n  \r\n    var a S\r\n    S := reflect.ValueOf(a)\r\n\r\n    fields := S.FieldByNameFunc(f)\r\n    fmt.Println(fields.Kind())\r\n}\r\n```\r\n It output `invalid`. I think it should output `int` (field A). Is this expected ?\r\n\r\nThanks.",
	"user": {
		"login": "legendtkl",
		"id": 2370761,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		},
		{
			"name": "NeedsDecision"
		}
	],
	"assignee": {
		"login": "crawshaw",
		"id": 161319,
		"type": "User",
		"site_admin": false
	},
	"comments": 8,
	"closed_at": "2016-10-19T01:49:57Z",
	"created_at": "2016-08-02T14:08:24Z",
	"updated_at": "2016-10-19T12:50:28Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
