{
	"id": 66066756,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003eThis appears not to be fixed at tip.\n\n$ go tool 6g -V\n6g version weekly.2012-03-27 +d8e47164f8dd\n\nThe following code demonstrates a variety of errors:\n\npackage main\n\nimport \"fmt\"\n\nconst id = \"scaf\" // or var id = \"scaf\" or other values - see comments below\n\n\ntype sf struct {\n    id string\n    i  int\n\n}\n\ntype sp struct {\n    a, b sf\n}\n\nfunc main() {\n    seen := map[sp]struct{}{}\n    for i := 0; i \u0026lt; 500; i++ {\n        fmt.Println(i)\n        a := sf{id, i}\n        aa := sp{a, a}\n        seen[aa] = struct{}{}\n    }\n}\n\nThe results depend on the value of and 'type' of id:\nif it's const \"\" then the result is always a `throw: hashmap assert`, if it's a var \"\"\nthen it's either that or `invalid memory address or nil pointer dereference`\nif it's const or var \"a\" then mainly `unexpected fault address`, but sometime `hashmap\nassert'\nif it's const or var \"scaf\", sometimes it hangs and sometimes it throws `hashmap assert`\n- other '4-words' behave differently (id ~\u0026lt; \"naaa\" behaves like \"a\", id ~\u0026gt; \"naaa\"\nbehaves like \"scaf\" - not exhaustively confirmed for all values)\n\nThe common thing is that the throw or hang always happens as i == 81.\n\nRemoving the integer or the string field results in normal behaviour.\u003c/pre\u003e",
	"user": {
		"login": "kortschak",
		"id": 275221,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-06-02T04:33:04Z",
	"updated_at": "2014-12-22T06:14:13Z"
}
