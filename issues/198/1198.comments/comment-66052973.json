{
	"id": 66052973,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eYou're right. And I was wrong anyway. Here are properly fair timings (I've attached the\ncorrected test for reference):\n\n: time ./regex 1\nReplaceAllStringFunc - identical\nreal\t0m0.059s\nuser\t0m0.048s\nsys\t0m0.008s\n\n: time ./regex 2\nReplaceAllString - identical\nreal\t0m0.043s\nuser\t0m0.036s\nsys\t0m0.008s\n\n: time ./regex 3\nReplaceAllStringFunc - same size\nreal\t0m0.528s\nuser\t0m0.528s\nsys\t0m0.000s\n\n: time ./regex 4\nReplaceAllStringFunc - shorter\nreal\t0m0.531s\nuser\t0m0.524s\nsys\t0m0.008s\n\n: time ./regex 5\nReplaceAllString - shorter\nreal\t0m0.520s\nuser\t0m0.520s\nsys\t0m0.004s\n\n: time ./regex 6\nReplaceAllStringFunc - longer\nreal\t0m0.552s\nuser\t0m0.552s\nsys\t0m0.000s\n\n: time ./regex 7\nReplaceAllString - longer\nreal\t0m0.543s\nuser\t0m0.544s\nsys\t0m0.000s\n\nFor my particular use case .5 seconds is too long to be viable. However, as it turned\nout the regex I was using (due to lack of word boundary support) couldn't do what I\nwanted anyway. So I did a manual solution that is 30x faster \u0026 works correctly, so a\nhappy ending for me.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1198/8/regex.go\"\u003eregex.go\u003c/a\u003e (6785 bytes)",
	"user": {
		"login": "mark-summerfield",
		"id": 1773348,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-10-16T07:47:34Z",
	"updated_at": "2014-12-08T10:07:19Z"
}
