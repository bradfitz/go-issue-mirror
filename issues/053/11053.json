{
	"id": 84837478,
	"number": 11053,
	"state": "closed",
	"title": "cmd/compile: incorrect escape analysis after transitive inlining across packages",
	"body": "This can probably be reduced further, but the following works. The example below shows the value changing to 0, but I've observed it being filled with other garbage values as well.\r\n\r\nI'm guessing the value is being incorrectly GCd.\r\n\r\n```go\r\npackage p\r\n\r\nfunc Int32(i int32) *int32 {\r\n        return \u0026i\r\n}\r\n```\r\n\r\n```go\r\npackage p_test\r\n\r\nimport (\r\n        \"fmt\"\r\n        \"testing\"\r\n\r\n        \"p\"\r\n)\r\n\r\ntype I interface {\r\n        Add(out *P)\r\n}\r\n\r\ntype P struct {\r\n        V *int32\r\n}\r\n\r\ntype T struct{}\r\n\r\nfunc (T) Add(out *P) {\r\n        out.V = p.Int32(42)\r\n}\r\n\r\nfunc F(s I) interface{} {\r\n        out := \u0026P{}\r\n        s.Add(out)\r\n        return out\r\n}\r\n\r\nfunc TestP(t *testing.T) {\r\n        var s T\r\n        resp := F(s).(*P)\r\n        fmt.Sprint(new(int32)) // this line is necessary\r\n        if got, want := *resp.V, int32(42); got != want {\r\n                t.Errorf(\"got %v, want %v\", got, want)\r\n        }\r\n}\r\n```\r\n\r\n```\r\n$ go version\r\ngo version go1.4.2 linux/amd64\r\n$ go test\r\nPASS\r\n\r\n$ go version\r\ngo version devel +1e48683 Wed Jun 3 22:28:06 2015 +0000 linux/amd64\r\n$ /tmp/g/bin/go test\r\n--- FAIL: TestP (0.00s)\r\n        p_test.go:35: got 0, want 42\r\nFAIL\r\n```",
	"user": {
		"login": "neild",
		"id": 52544,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2015-06-17T02:36:55Z",
	"created_at": "2015-06-04T00:43:04Z",
	"updated_at": "2016-08-21T23:00:18Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
