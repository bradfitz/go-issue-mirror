{
	"id": 66096297,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9 by **nicolas.riesch**:\n\n\u003cpre\u003eI have just installed Go 1.3.1 and run my test files.\n\nThese test files are table-driven, and contain about 8000 samples.\n\nMy configuration is:\n\nHP Pavilion dv7\nAMD Phenom II P960 Quad-Core Processor 1.80 GHz\n4 Gb RAM\nWindows 7\n\nOn top of this, I have Virtualbox, with Linux Mint 17 64bits Xfce.\nAll the work is done inside this Linux Mint virtual machine.\n\nI have run the tests with the virtual machine memory setting at 1024 Mb of RAM, or 1914\nMb of RAM.\nYou can see that for Go 1.3.1, with 1914 Mb of RAM available for the virtual machine,\nthe tests go 4 times faster than with 1024 Mb of RAM.\n\n\nHere are the figures.\n\n--------------------------------- go 1.2.2 on Linux Mint with 1024 Mb of RAM\n----------------------\n\nnico@nico-Qiana-Xfce ~/z_go/src/rsql/data $ time go test\nPASS\nok  \trsql/data\t7.007s\n\nreal\t1m20.271s\nuser\t0m58.783s\nsys\t0m5.230s\n\nnico@nico-Qiana-Xfce ~/z_go/src/rsql/data $ time go test\nPASS\nok  \trsql/data\t6.899s\n\nreal\t1m17.577s\nuser\t0m58.069s\nsys\t0m5.599s\n\n--------------------------------- go 1.3 with 1024 Mb of RAM  ----------------------\n\nno figure, compilation never ends...\n\n--------------------------------- go 1.3.1 with 1024 Mb of RAM ----------------------\n\nAt my first attempt, the compiler stopped with a message indicating it cannot allocate\nmore memory.\nAt the second attempt, the OS just sent a SIGKILL to stop the compiler.\nBut at the third attempt, the compilation works all right and performed the test\nsuccessfully.\nI don't know what happened, as I just retried the same \"go test\" command each time.\nSeems to be some memory pressure somewhere...\n\nnico@nico-Qiana-Xfce ~/z_go/src/rsql/data $ time go test\nPASS\nok  \trsql/data\t6.946s\n\nreal\t5m56.815s\nuser\t1m5.199s\nsys\t0m16.318s\n\nnico@nico-Qiana-Xfce ~/z_go/src/rsql/data $ time go test\nPASS\nok  \trsql/data\t8.619s\n\nreal\t6m32.995s\nuser\t1m5.150s\nsys\t0m15.858s\n\nnico@nico-Qiana-Xfce ~/z_go/src/rsql/data $ time go test\nPASS\nok  \trsql/data\t8.057s\n\nreal\t6m3.998s\nuser\t1m5.329s\nsys\t0m16.053s\n\nThis is the \"top\" command output when VIRT and RES were at at their highest during\ncompilation :\n\ntop - 19:39:07 up 41 min,  3 users,  load average: 1.65, 1.33, 1.30\nTasks: 138 total,   2 running, 136 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  6.3 us,  8.9 sy,  0.0 ni,  0.0 id, 82.5 wa,  2.3 hi,  0.0 si,  0.0 st\nKiB Mem:   1017912 total,   921784 used,    96128 free,      452 buffers\nKiB Swap:  1047548 total,   964600 used,    82948 free.     9448 cached Mem\n  scroll coordinates: y = 1/138 (tasks), x = 1/12 (fields)\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                \n 4449 nico      20   0 1513344 713208    512 D  2.6 70.1   0:44.88 6g                                                     \n 1329 root      20   0  299800  23296    972 S  0.7  2.3   1:08.13 Xorg                                                   \n 4382 nico      20   0  259308   4692     32 S  0.0  0.5   0:00.96 go                                                     \n 2968 nico      20   0  377328   3752   1772 S  6.6  0.4   2:14.72 xfce4-taskmanag                                        \n 2182 nico      20   0  532564   3448   1596 S  0.0  0.3   0:06.61 xfce4-terminal                                         \n 1857 nico      20   0  475620   3164   1904 S  0.0  0.3   0:00.95 xfce4-panel                                            \n 1853 nico      20   0  164176   2952   1460 S  0.0  0.3   0:02.93 xfwm4                                                  \n 2086 nico      20   0  147584   2860   2088 S  0.3  0.3   0:00.46 panel-5-datetim                                        \n 1861 nico      20   0  570316   1612    852 S  0.0  0.2   0:01.64 xfdesktop        \n\n--------------------------------- go 1.3.1 with 1914 Mb of RAM ----------------------\n\nnico@nico-Qiana-Xfce ~/z_go/src/rsql/data $ time go test\nPASS\nok  \trsql/data\t6.698s\n\nreal\t1m29.073s\nuser\t1m2.295s\nsys\t0m10.791s\n\nnico@nico-Qiana-Xfce ~/z_go/src/rsql/data $ time go test\nPASS\nok  \trsql/data\t6.741s\n\nreal\t1m42.629s\nuser\t1m2.167s\nsys\t0m10.041s\n\nnico@nico-Qiana-Xfce ~/z_go/src/rsql/data $ time go test\nPASS\nok  \trsql/data\t6.620s\n\nreal\t1m29.094s\nuser\t1m1.978s\nsys\t0m10.681s\n\nThis is the \"top\" command output when VIRT and RES were at at their highest during\ncompilation :\n\ntop - 20:34:04 up 48 min,  3 users,  load average: 0.84, 0.44, 0.21\nTasks: 139 total,   3 running, 136 sleeping,   0 stopped,   0 zombie\n%Cpu(s): 90.1 us,  9.6 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.3 hi,  0.0 si,  0.0 st\nKiB Mem:   1914936 total,  1473636 used,   441300 free,     1260 buffers\nKiB Swap:  1047548 total,    14356 used,  1033192 free.    89032 cached Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                               \n 2465 nico      20   0 1128648 1.075g    768 R 99.5 58.8   0:25.57 6g                                                                    \n 1329 root      20   0  290700  38920   3960 S  0.0  2.0   0:12.42 Xorg                                                                  \n 1932 nico      20   0  561652  18560    684 S  0.0  1.0   0:00.85 mintUpdate                                                            \n 1826 nico      20   0  569412  10220    844 S  0.0  0.5   0:01.18 xfdesktop                                                             \n 1834 nico      20   0  247560   9656    496 S  0.0  0.5   0:00.28 applet.py                                                             \n 2398 nico      20   0  259180   9604   3688 S  0.0  0.5   0:00.96 go                                                                    \n 2188 nico      20   0  531980   8160   2640 S  0.3  0.4   0:06.00 xfce4-terminal                                                        \n\n\nThe compiler seems to allocate about 1 Gb of memory, which explains why the\nconfiguration with only 1024 Mb of RAM is crawling and swapping.\nIs the compiler expected to allocate this amount of memory ?\n\n\nBut the compile time on 1.3.1 with 1914 Mb of RAM is similar to 1.2.2 with 1024 Mb of\nRAM.\nSo, in my case, the problem is fixed.\n\nI thank you very much for having fixed this issue so quickly ;-)))\n\n\n@rsc:\nFor your question of August 11th:\nThe test case demonstrating the 55 seconds on Go 1.3 is\n\u003ca href=\"http://play.golang.org/p/qpxcVGkzuk\"\u003ehttp://play.golang.org/p/qpxcVGkzuk\u003c/a\u003e, which contains ~500 samples.\nMy original test case contains 8000 samples, and Go 1.3 takes forever to compile it.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-08-17T19:37:36Z",
	"updated_at": "2014-12-08T10:45:51Z"
}
