{
	"id": 155837711,
	"body": "Here are the CLs that I am aware of related to ppc64 BE linking which match the patches I had previously used from Minux:\r\nhttps://go-review.googlesource.com/#/c/9677\r\nchange to obj.go no longer needed due to MHDs change\r\nhttps://go-review.googlesource.com/#/c/9676\r\nchange to tls_ppc64x.s no longer needed due to MHDs change in TLS handling\r\nI applied the other changes from this CL.\r\nhttps://go-review.googlesource.com/#/c/9673\r\nchange to obj.go no longer needed\r\n\r\nThe file asm.go from 9677 and 9673 is a question because I see there are conflicting changes now with what's upstream. \r\n\r\nI tried to add support to handle R_PPC64_TOC based on Ian's comments above but was unsure what to put in adddynrel for the R_PPC64_TOC case.\r\n\r\nAnd then after making those changes, I see errors like this:\r\n\r\nTOC-relative relocation in object without .TOC. \r\n\r\nI don't see where a .TOC. object would get generated so it would be found when calling Linkrlookup.\r\n\r\nI'm not sure what the next step is to make this work.  I agree with previous comments that when CGO_ENABLED=1 on ppc64 BE this has probably never worked.  I can see that gcc generates .opd sections with the R_PPC64_TOC relocation type and that happens even with older versions of gcc.  I found this .opd section in some of the _all.o files that are generated during the golang build that are generating the error message about the missing relocation type.",
	"user": {
		"login": "laboger",
		"id": 9433228,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-11T16:37:30Z",
	"updated_at": "2015-11-11T16:37:30Z"
}
