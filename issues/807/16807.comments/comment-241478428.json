{
	"id": 241478428,
	"body": "My vote would be to simply drop the words \"and that the two share an equivalent memory layout.\"  I don't see that they tell us anything meaningful.  As Russ's quote suggests, people who want to convert from one pointer type to another need to know what they are doing.  We should not provide any guarantees about how values are stored in memory.\r\n\r\nIt's true that there is an issue about converting between a pointer to a pointer type to a pointer to a non-pointer type.  We may want to state clearly that that is invalid, or, at least, that it's invalid if you dereference the resulting pointer.  But I don't think that is implied by the language about \"equivalent memory layout.\"\r\n\r\nHow about something like\r\n\r\n    // (1) Conversion of a *T1 to Pointer to *T2.\r\n    //\r\n    // Provided that T2 is no larger than T1, that T2 does not have\r\n    // stricter alignment requirements than T1, that any pointer fields of\r\n    // T1 are also pointer fields of T2, and vice-versa, this conversion\r\n    // allows reinterpreting data of one type as data of another type. An\r\n    // example is the implementation of math.Float64bits:\r\n    //\r\n    //\tfunc Float64bits(f float64) uint64 {\r\n    //\t\treturn *(*uint64)(unsafe.Pointer(\u0026f))\r\n    //\t}\r\n    //\r\n    // The alignment requirements of types and the position of pointer\r\n    // fields of types may vary between different implementations and\r\n    // between different versions of the same implementation.\r\n",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-22T16:58:45Z",
	"updated_at": "2016-08-22T16:58:45Z"
}
