{
	"id": 241496030,
	"body": "I worry about this definition defeating alias analysis that is based on\nwrites to disjoint types not being aliases. If we do end up changing the\nwording perhaps we should indicate that use of unsafe may suppress compiler\noptimizations now and in the future.\n\nI still think we should just keep the current wording.\n\nOn Mon, Aug 22, 2016 at 12:58 PM, Ian Lance Taylor \u003cnotifications@github.com\n\u003e wrote:\n\n\u003e My vote would be to simply drop the words \"and that the two share an\n\u003e equivalent memory layout.\" I don't see that they tell us anything\n\u003e meaningful. As Russ's quote suggests, people who want to convert from one\n\u003e pointer type to another need to know what they are doing. We should not\n\u003e provide any guarantees about how values are stored in memory.\n\u003e\n\u003e It's true that there is an issue about converting between a pointer to a\n\u003e pointer type to a pointer to a non-pointer type. We may want to state\n\u003e clearly that that is invalid, or, at least, that it's invalid if you\n\u003e dereference the resulting pointer. But I don't think that is implied by the\n\u003e language about \"equivalent memory layout.\"\n\u003e\n\u003e How about something like\n\u003e\n\u003e // (1) Conversion of a *T1 to Pointer to *T2.\n\u003e //\n\u003e // Provided that T2 is no larger than T1, that T2 does not have\n\u003e // stricter alignment requirements than T1, that any pointer fields of\n\u003e // T1 are also pointer fields of T2, and vice-versa, this conversion\n\u003e // allows reinterpreting data of one type as data of another type. An\n\u003e // example is the implementation of math.Float64bits:\n\u003e //\n\u003e //  func Float64bits(f float64) uint64 {\n\u003e //      return *(*uint64)(unsafe.Pointer(\u0026f))\n\u003e //  }\n\u003e //\n\u003e // The alignment requirements of types and the position of pointer\n\u003e // fields of types may vary between different implementations and\n\u003e // between different versions of the same implementation.\n\u003e\n\u003e â€”\n\u003e You are receiving this because you commented.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/16807#issuecomment-241478428\u003e, or mute\n\u003e the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AA7Wn_gh-3jm3Ph-KzJfIGMhU5_zZMjtks5qidVTgaJpZM4Jo3nL\u003e\n\u003e .\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-22T17:58:04Z",
	"updated_at": "2016-08-22T17:58:04Z"
}
