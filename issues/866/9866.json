{
	"id": 57597633,
	"number": 9866,
	"state": "closed",
	"title": "runtime: go 1.3.3 (32-bits only) panics in gc involving cgo, C heap pointers and finalizers (afaict)",
	"body": "What version of Go are you using (go version)?\r\n1.3.3\r\n\r\nWhat operating system and processor architecture are you using?\r\non Ubuntu,  issue happens on both ARM and 386 (32 bits), but not amd64 (64 bits)\r\n\r\nWhat did you do?\r\nrun repeatedly go test on the code in the package at\r\n\r\nhttps://github.com/pedronis/go133explode.git\r\n\r\nlike with\r\n\r\n    for i in $(seq 100) ; do echo $i ; go test || break ; done\r\n\r\napart the obvious deps, it needs:\r\n\r\n    apt-get install libclick-0.4-dev\r\n\r\nThis code is derived from a larger test suite, didn't manage to reduce further without making failure probability much lower.\r\n\r\nOn some tries on the listed 32 bit archs the code explodes with panics from inside the gc,\r\n\r\n- seen sometimes:  fatal error: freelist empty\r\n- or signals are typical like:\r\n\r\n        3\r\n        RUN\r\n        fatal error: unexpected signal during runtime execution\r\n        [signal 0xb code=0x1 addr=0x1 pc=0x806968c]\r\n\r\n        goroutine 22 [running]:\r\n        runtime.throw(0x82a8ac5)\r\n                /usr/lib/go/src/pkg/runtime/panic.c:520 +0x71 fp=0xc5d5d990 sp=0xc5d5d984\r\n        runtime.sigpanic()\r\n                /usr/lib/go/src/pkg/runtime/os_linux.c:222 +0x46 fp=0xc5d5d99c sp=0xc5d5d990\r\n        runtime.mallocgc(0x10, 0x81c59c0, 0x0)\r\n                /usr/lib/go/src/pkg/runtime/malloc.goc:154 +0x2ec fp=0xc5d5d9d0 sp=0xc5d5d99c\r\n        runtime.new(0x81c59c0, 0x0)\r\n                /usr/lib/go/src/pkg/runtime/malloc.goc:826 +0x35 fp=0xc5d5d9e0 sp=0xc5d5d9d0\r\n        reflect.Value.MapIndex(0x8177f80, 0xd70a4ec0, 0x0, 0x150, 0x8178c00, 0xd71075a8, 0x0, 0x182, 0x81774c0, 0xd71076d8, ...)\r\n                /usr/lib/go/src/pkg/reflect/value.go:1184 +0x2e fp=0xc5d5da54 sp=0xc5d5d9e0\r\n        encoding/json.(*mapEncoder).encode(0xd708e378, 0xd70fa780, 0x8177f80, 0xd70a4ec0, 0x0, 0x150, 0x100)\r\n                /usr/lib/go/src/pkg/encoding/json/encode.go:617 +0x1f8 fp=0xc5d5dafc sp=0xc5d5da54\r\n        encoding/json.*mapEncoder.(encoding/json.encode)·fm(0xd70fa780, 0x8177f80, 0xd70a4ec0, 0x0, 0x150, 0x100)\r\n                /usr/lib/go/src/pkg/encoding/json/encode.go:627 +0x4c fp=0xc5d5db1c sp=0xc5d5dafc\r\n        encoding/json.(*encodeState).reflectValue(0xd70fa780, 0x8177f80, 0xd70a4ec0, 0x0, 0x150)\r\n                /usr/lib/go/src/pkg/encoding/json/encode.go:297 +0x58 fp=0xc5d5db38 sp=0xc5d5db1c\r\n        encoding/json.(*encodeState).marshal(0xd70fa780, 0x8177f80, 0xd70a4ec0, 0x0, 0x0)\r\n                /usr/lib/go/src/pkg/encoding/json/encode.go:268 +0xa9 fp=0xc5d5db74 sp=0xc5d5db38\r\n        encoding/json.Marshal(0x8177f80, 0xd70a4ec0, 0x0, 0x0, 0x0, 0x0, 0x0)\r\n                /usr/lib/go/src/pkg/encoding/json/encode.go:133 +0x88 fp=0xc5d5dbac sp=0xc5d5db74\r\n        explode.(*clientSuite).writeTestConfig(0xd70b8170)\r\n                /home/pedronis/canonical/go-ws/src/explode/explode_test.go:43 +0x94b fp=0xc5d5dc9c sp=0xc5d5dbac\r\n        explode.(*clientSuite).witness(0xd70b8170)\r\n                /home/pedronis/canonical/go-ws/src/explode/explode_test.go:52 +0x98 fp=0xc5d5dcdc sp=0xc5d5dc9c\r\n        explode.(*clientSuite).SetUpSuite(0xd70b8170, 0xd70842a0)\r\n                /home/pedronis/canonical/go-ws/src/explode/explode_test.go:99 +0xd5 fp=0xc5d5dd28 sp=0xc5d5dcdc\r\n        runtime.call16(0x81b828c, 0xd708e2b8, 0x8, 0x8)\r\n                /usr/lib/go/src/pkg/runtime/asm_386.s:383 +0x3a fp=0xc5d5dd3c sp=0xc5d5dd28\r\n        reflect.Value.call(0x81b8240, 0xd70b8170, 0x0, 0x138, 0x81c8a98, 0x4, 0xd70b81d0, 0x1, 0x1, 0x0, ...)\r\n                /usr/lib/go/src/pkg/reflect/value.go:563 +0xdaf fp=0xc5d5df2c sp=0xc5d5dd3c\r\n        reflect.Value.Call(0x81b8240, 0xd70b8170, 0x0, 0x138, 0xd70b81d0, 0x1, 0x1, 0x0, 0x0, 0x0)\r\n                /usr/lib/go/src/pkg/reflect/value.go:411 +0x91 fp=0xc5d5df60 sp=0xc5d5df2c\r\n        launchpad.net/gocheck.func·005(0xd70842a0)\r\n                /home/pedronis/canonical/go-ws/src/launchpad.net/gocheck/gocheck.go:683 +0xec fp=0xc5d5dfb8 sp=0xc5d5df60\r\n        launchpad.net/gocheck.func·004()\r\n                /home/pedronis/canonical/go-ws/src/launchpad.net/gocheck/gocheck.go:628 +0x7c fp=0xc5d5dfd0 sp=0xc5d5dfb8\r\n        runtime.goexit()\r\n                /usr/lib/go/src/pkg/runtime/proc.c:1445 fp=0xc5d5dfd4 sp=0xc5d5dfd0\r\n        created by launchpad.net/gocheck.(*suiteRunner).forkCall\r\n                /home/pedronis/canonical/go-ws/src/launchpad.net/gocheck/gocheck.go:629 +0x1ba\r\n\r\n        goroutine 16 [chan receive]:\r\n        testing.RunTests(0x821b2c4, 0x82a5630, 0x1, 0x1, 0x1)\r\n                /usr/lib/go/src/pkg/testing/testing.go:505 +0x75c\r\n        testing.Main(0x821b2c4, 0x82a5630, 0x1, 0x1, 0x82bb1e0, 0x0, 0x0, 0x82bb1e0, 0x0, 0x0)\r\n                /usr/lib/go/src/pkg/testing/testing.go:435 +0x6e\r\n        main.main()\r\n                explode/_test/_testmain.go:47 +0x86\r\n\r\n        goroutine 19 [finalizer wait]:\r\n        runtime.park(0x805a040, 0x82b926c, 0x82ab3e9)\r\n                /usr/lib/go/src/pkg/runtime/proc.c:1369 +0x94\r\n        runtime.parkunlock(0x82b926c, 0x82ab3e9)\r\n                /usr/lib/go/src/pkg/runtime/proc.c:1385 +0x3f\r\n        runfinq()\r\n                /usr/lib/go/src/pkg/runtime/mgc0.c:2644 +0xc5\r\n        runtime.goexit()\r\n                /usr/lib/go/src/pkg/runtime/proc.c:1445\r\n\r\n        goroutine 20 [chan receive]:\r\n        launchpad.net/gocheck.(*suiteRunner).runFunc(0xd70ae140, 0xd70ae180, 0x0, 0x0, 0x821b2bc, 0x0)\r\n                /home/pedronis/canonical/go-ws/src/launchpad.net/gocheck/gocheck.go:636 +0x71\r\n        launchpad.net/gocheck.(*suiteRunner).runFixture(0xd70ae140, 0xd70ae180, 0x0, 0xd70b8170)\r\n                /home/pedronis/canonical/go-ws/src/launchpad.net/gocheck/gocheck.go:684 +0x55\r\n        launchpad.net/gocheck.(*suiteRunner).run(0xd70ae140, 0xd70b8170)\r\n                /home/pedronis/canonical/go-ws/src/launchpad.net/gocheck/gocheck.go:581 +0x7f\r\n        launchpad.net/gocheck.Run(0x81b8240, 0xd70b8170, 0xd70a46a0, 0x0)\r\n                /home/pedronis/canonical/go-ws/src/launchpad.net/gocheck/run.go:76 +0x4a\r\n        launchpad.net/gocheck.RunAll(0xd70a46a0, 0xd70a46a0)\r\n                /home/pedronis/canonical/go-ws/src/launchpad.net/gocheck/run.go:68 +0xb8\r\n        launchpad.net/gocheck.TestingT(0xd70841e0)\r\n                /home/pedronis/canonical/go-ws/src/launchpad.net/gocheck/run.go:56 +0x29c\r\n        explode.TestClient(0xd70841e0)\r\n                /home/pedronis/canonical/go-ws/src/explode/explode_test.go:88 +0x2e\r\n        testing.tRunner(0xd70841e0, 0x82a5630)\r\n                /usr/lib/go/src/pkg/testing/testing.go:422 +0x87\r\n        created by testing.RunTests\r\n                /usr/lib/go/src/pkg/testing/testing.go:504 +0x720\r\n\r\n        goroutine 21 [select]:\r\n        launchpad.net/gocheck.(*resultTracker)._loopRoutine(0xd70ae100)\r\n                /home/pedronis/canonical/go-ws/src/launchpad.net/gocheck/gocheck.go:436 +0x28f\r\n        created by launchpad.net/gocheck.(*resultTracker).start\r\n                /home/pedronis/canonical/go-ws/src/launchpad.net/gocheck/gocheck.go:416 +0x35\r\n\r\n        goroutine 17 [syscall]:\r\n        runtime.goexit()\r\n                /usr/lib/go/src/pkg/runtime/proc.c:1445\r\n        exit status 2\r\n        FAIL \texplode\t0.030s\r\n\r\nthey all seem to point to a corrupted freelist.\r\n\r\nThis change seems to workaround the issue, pointing in the direction of C-heap pointers and finalizers instead of an issue with the code itself. AFAIU go gc should be able to ignore C-heap pointers so this wouldn't be needed, indeed the code works fine with no panics without this change with 1.2, 1.4.1 and 1.3.3 on 64 bits:\r\n\r\n    diff --git a/cclick.go b/cclick.go\r\n    index 976c00a..cc56c24 100644\r\n    --- a/cclick.go\r\n    +++ b/cclick.go\r\n    @@ -26,6 +26,7 @@ func (ccu *CClickUser) CInit(holder interface{}) error {\r\n            }\r\n            ccu.cref = cref\r\n            runtime.SetFinalizer(holder, func(interface{}) {\r\n    +               ccu.cref = nil\r\n                    C.g_object_unref((C.gpointer)(cref))\r\n            })\r\n            return nil\r\n\r\n\r\n\r\n",
	"user": {
		"login": "pedronis",
		"id": 975757,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 9,
	"closed_at": "2015-02-13T16:14:02Z",
	"created_at": "2015-02-13T13:19:36Z",
	"updated_at": "2016-06-25T02:00:47Z"
}
