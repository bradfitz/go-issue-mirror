{
	"id": 76624742,
	"number": 10866,
	"state": "closed",
	"title": "x/net/websocket: websocket.Conn.Close leaks file descriptors if remote has disconnected",
	"body": "In the current Conn.Close behaviour can leak file descriptors if the server has gone away before the client calls .Close\r\n```\r\n// Close implements the io.Closer interface.\r\nfunc (ws *Conn) Close() error {\r\n\terr := ws.frameHandler.WriteClose(ws.defaultCloseStatus)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\treturn ws.rwc.Close()\r\n}\r\n```\r\nIn the case that the remote side has closed the connection, WriteClose will return an error which will be returned to the caller _without_ calling `ws.rwc.Close`. As it is customary to ignore the error from an `io.Closer.Close`, and even when not, the error is treated as opaque there is no indication that Close didn't actually release the file descriptor associated with `ws.rwc`. Even if the error was handled from the caller of Close, it would typically be `io.EOF` or some operating system specific version of \"connection closed unexpectedly\".\r\n\r\n/cc @bradfitz ",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2015-07-30T07:32:06Z",
	"created_at": "2015-05-15T07:02:35Z",
	"updated_at": "2016-08-05T16:09:39Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
