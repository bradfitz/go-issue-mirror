{
	"id": 66077459,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eIt gets worse.\n\ntype SafeStore struct {\n\tContainer          map[interface{}]interface{}\n\tsafestoreHelper\n}\ntype safestoreHelper struct {\n\tLock               sync.RWMutex\n\tUseLock            bool\n\ttickerIntervalNs   int64\n\tticker             *time.Ticker\n\ttickerLock         sync.Mutex\n\tonceStartPurgeLoop sync.Once\n}\n\n\nMy code basically acquires a lock, and then calls this:\nfunc (rq *SafeStore) get(key interface{}) (v interface{}) {\n\t//TODO: remove debugging\n\t//fmt.Printf(\"About to get for rq: [isNil: %v], rq.Container: [isNil: %v] %v, key: %v\\n\", rq==nil, rq.Container==nil, rq.Container, v))\n\tfmt.Printf(\"About to get for rq: [isNil: %v], rq.Container: [isNil: %v], key: %v\\n\", rq==nil, rq.Container==nil, v)\n\tif val, ok := rq.Container[key]; ok {\n\t\t\u0026lt;snip\u0026gt;\n\nthis method is called a lot, as I use a mutex-protected map.\n\nNotice the two different print statements I have above:\n- One prints out rq.Container (ie map[interface{}]interface{}), and the other doesn't.\n- When printing out rq.Container, my app crashes. \n- When not print out rq.Container, I get the previous error everytime (from first time).\n\nWithout the prints (as before), I got the error after like 6 http requests.\n\nWith the un-commented prints introduced early here, I get the error from the 1st\nrequest. \nThis suggests some timing issues.\n\nThe key was nil, the map is not.\n\nAbout to get for rq: [isNil: false], rq.Container: [isNil: false], key: \u0026lt;nil\u0026gt;\nERROR    1177 1 1 2013-04-04 18:59:57.742 - [baseapp.(*BaseApp).derr] [baseapp.go:411]\nError handling request: runtime error: invalid memory address or nil pointer dereference\n/home/ugorji/depot/golang/src/ugorji.net/baseapp/baseapp.go:413 (0x4bdf0e)\n\tnet/baseapp.(*BaseApp).derr: debug.PrintStack()\n/home/ugorji/depot/golang/src/ugorji.net/baseapp/baseapp.go:264 (0x4c1a33)\n\tnet/baseapp.func.003: gapp.derr(x, c, w, r, h.OnErrorFn)\n/opt/go-tip/src/pkg/runtime/traceback_x86.c:211 (0x41d7f5)\n\tcallers: return runtime·gentraceback(pc, sp, nil, g, skip, pcbuf, m, nil, nil);\n/opt/go-tip/src/pkg/runtime/runtime.c:275 (0x419d72)\n\tCaller: if(runtime·callers(1+skip-1, rpc, 2) \u0026lt; 2) {\n/opt/go-tip/src/pkg/runtime/debug/stack.go:46 (0x5b131c)\n\tstack: pc, file, line, ok := runtime.Caller(i)\n/opt/go-tip/src/pkg/runtime/debug/stack.go:25 (0x5b125c)\n\tPrintStack: os.Stderr.Write(stack())\n/home/ugorji/depot/golang/src/ugorji.net/baseapp/baseapp.go:413 (0x4bdf0e)\n\tnet/baseapp.(*BaseApp).derr: debug.PrintStack()\n/home/ugorji/depot/golang/src/ugorji.net/baseapp/baseapp.go:264 (0x4c1a33)\n\tnet/baseapp.func.003: gapp.derr(x, c, w, r, h.OnErrorFn)\n/opt/go-tip/src/pkg/runtime/panic.c:229 (0x413531)\n\tpanic: reflect·call(d-\u0026gt;fn, (byte*)d-\u0026gt;args, d-\u0026gt;siz);\n/opt/go-tip/src/pkg/runtime/panic.c:487 (0x413cd3)\n\tpanicstring: runtime·panic(err);\n/opt/go-tip/src/pkg/runtime/os_linux.c:236 (0x412c18)\n\tsigpanic: runtime·panicstring(\"invalid memory address or nil pointer dereference\");\n/opt/go-tip/src/pkg/runtime/hashmap.c:-145 (0x4067b5)\n\thash_lookup: ???\n/opt/go-tip/src/pkg/runtime/hashmap.c:1150 (0x408c62)\n\tmapaccess: res = hash_lookup(t, h, \u0026ak);\n/opt/go-tip/src/pkg/runtime/hashmap.c:1207 (0x408e17)\n\tmapaccess2: runtime·mapaccess(t, h, ak, av, ap);\n/home/ugorji/depot/golang/src/ugorji.net/util/safe_store.go:108 (0x4f3574)\n\tnet/util.(*SafeStore).get: if val, ok := rq.Container[key]; ok {\n/home/ugorji/depot/golang/src/ugorji.net/util/safe_store.go:78 (0x4f3169)\n\tnet/util.(*SafeStore).Get: return rq.get(key)\n\u0026lt;\u0026lt;snip\u0026gt;\u0026gt;\n\n===============================================\n\nHowever, with the print that I commented out, the program crashes. My recover() up at \nthe top of the http Request call doesn't even intercept it. \n\nThe stack trace is below. Basically, there's a crash printing a non-nil map.\n\nThis may be a different issue.\n \nThe stack trace from this is like:\n\nunexpected fault address 0x7604a9\nfatal error: fault\n[signal 0xb code=0x2 addr=0x7604a9 pc=0x4091ea]\n\ngoroutine 17 [running]:\n[fp=0x7f955a450438] runtime.throw(0x9921f7)\n\t/opt/go-tip/src/pkg/runtime/panic.c:473 +0x67\n[fp=0x7f955a450450] runtime.sigpanic()\n\t/opt/go-tip/src/pkg/runtime/os_linux.c:239 +0xe7\n[fp=0x7f955a450478] reflect.mapiterinit(0x67d220, 0x7604a0, 0x156)\n\t/opt/go-tip/src/pkg/runtime/hashmap.c:1384 +0x8a\n[fp=0x7f955a4504f8] reflect.Value.MapKeys(0x67d220, 0x7f955a5607a8, 0x156, 0x280,\n0x97a260, ...)\n\t/opt/go-tip/src/pkg/reflect/value.go:1140 +0xe0\n[fp=0x7f955a450f80] fmt.(*pp).printReflectValue(0xc20013b270, 0x67d220, 0x7f955a5607a8,\n0x156, 0x76, ...)\n\t/opt/go-tip/src/pkg/fmt/print.go:891 +0x1f3f\n----- stack segment boundary -----\n[fp=0x7f955a4514f8] fmt.(*pp).printValue(0xc20013b270, 0x67d220, 0x7f955a5607a8, 0x156,\n0x76, ...)\n\t/opt/go-tip/src/pkg/fmt/print.go:850 +0x2f5\n[fp=0x7f955a451f80] fmt.(*pp).printReflectValue(0xc20013b270, 0x725540, 0x7f955a5607a8,\n0x196, 0x76, ...)\n\t/opt/go-tip/src/pkg/fmt/print.go:930 +0x325b\n----- stack segment boundary -----\n[fp=0x7f955a4434f8] fmt.(*pp).printValue(0xc20013b270, 0x725540, 0x7f955a5607a8, 0x196,\n0x76, ...)\n\t/opt/go-tip/src/pkg/fmt/print.go:850 +0x2f5\n[fp=0x7f955a443f80] fmt.(*pp).printReflectValue(0xc20013b270, 0x7604a0, 0x7f955a5607a8,\n0x160, 0x76, ...)\n\t/opt/go-tip/src/pkg/fmt/print.go:1003 +0x2dc3\n----- stack segment boundary -----\n[fp=0x7f955a5602f0] fmt.(*pp).printField(0xc20013b270, 0x7604a0, 0x7f955a5607a8, 0x76,\n0x0, ...)\n\t/opt/go-tip/src/pkg/fmt/print.go:812 +0x3d1\n[fp=0x7f955a560670] fmt.(*pp).doPrintf(0xc20013b270, 0x7f6a50, 0x34, 0x7f955a560798,\n0x4, ...)\n\t/opt/go-tip/src/pkg/fmt/print.go:1110 +0x1270\n[fp=0x7f955a5606c0] fmt.Fprintf(0xc2000c97b0, 0xc200000008, 0x7f6a50, 0x34,\n0x7f955a560798, ...)\n\t/opt/go-tip/src/pkg/fmt/print.go:213 +0x80\n[fp=0x7f955a560718] fmt.Printf(0x7f6a50, 0x34, 0x7f955a560798, 0x4, 0x4, ...)\n\t/opt/go-tip/src/pkg/fmt/print.go:222 +0x8c\n[fp=0x7f955a5607e0] ugorji.net/util.(*SafeStore).get(0x7f955a5607a8, 0x688800,\n0xc2001bf7d0, 0x0, 0x0, ...)\n\t/home/ugorji/depot/golang/src/ugorji.net/util/safe_store.go:106 +0x18a\n\u0026lt;\u0026lt;snip\u0026gt;\u0026gt;\u003c/pre\u003e",
	"user": {
		"login": "ugorji",
		"id": 1222082,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-04-04T19:17:26Z",
	"updated_at": "2014-12-22T06:24:02Z"
}
