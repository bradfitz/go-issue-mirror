{
	"id": 66091179,
	"body": "\u003ca id=\"c19\"\u003e\u003c/a\u003eComment 19:\n\n\u003cpre\u003e\u003e\n\u003e I have no idea how to do such thing. ...\n\nMe neither. I suspect somewhere inside DLL there is an address that hints windows\nprogram loader where to load the dll (if the address is free). If you can change that\naddress while building DLL, it might help.\n\n\u003e It integrates with multiple languages without problems. I am creating bindings for the\nGo language. I think that this is something that should be fixed in Go, and not the\nother way around.\n\nGo runtime is designed to keep all it objects in one continuous block of memory (that is\nhow current garbage collector works), so it reserves these addresses at the start of the\nprogram. If it cannot reserve them it has no choice, but to fail. 32-bit version of\nWindows provides maximum of 2GB for every process. So Go designers had to come-up with a\nfigure that will fit that requirement, but will be large enough to cover as many of our\nusers as possible. The figure does not cover your scenario. I'm sorry, but I don't see\nit change because of you. You can use 64-bit version of Windows. Then this problem will\ngo away.\n\n\u003e How can I decrease the amount of memory that Go is trying to reserve?\n\nThe figure is in Go runtime. You have to change the source and recompile runtime package.\n\n\u003e ... And 3 GB of free ram in total. It just doesn't sound right.\n\nLike I said earlier, your memory amount is irrelevant. We are talking about \"virtual\naddress space\" here - each windows/386 process gets 2GB of \"virtual address space\"\nregardless of how much memory you have installed. It is how 32-bit Windows is designed.\n32-bit addresses can address only so much memory.\n\nAlex\u003c/pre\u003e\n\n\n\n_Status changed to **Unfortunate**._",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-02-12T23:44:01Z",
	"updated_at": "2014-12-08T10:40:34Z"
}
