{
	"id": 172473319,
	"body": "Changing the default is not an option, imo. CJK scripts are not the only\none that vary in width. In fact, even the width ratios varies for CJK\ndepending on the font used. For someone who's primary development\nenvironment is C, J, or K the 2:1 ratio is very likely. For users of\nLatin-oriented fixed-width fonts, for example, it is not. (I believe it is\n5/3:1.) Furthermore, there are also characters that should be mapped to\nzero width and characters for which it is unclear to which width they\nshould be mapped in general. Overall it is very hard, if not impossible, to\ncome up with a single mapping that works across the board.\n\nWhat I could imagine, though, is allowing tabwriter to have an optional\ninterface that maps the length of an element or single character. It seems\nhard to extend the current NewWriter function to add this. I can imagine,\nthough, adding a New function that takes an option argument:\n\nNew(w io.Writer, opts ...Option) *Writer\n\ntype Option ...\n\nfunc Padding(n int) Option\nfunc TabWidth(width ...int) Option  // would allow different widths per\ncolumn\nfunc MinWidth(width ...int) Option\nfunc PadChar(r rune) Option\n\nfunc WidthFunc(func(cell []byte) int) Option\n\nExample:\n\ntabwriter.New(w, tabwriter.TabWidth(30),\ntabwriter.WidthFunc(width.FixedWidthEastAsian))\n\nThe flags are, unfortunately, not typed, otherwise they could be options.\nThis is the biggest problem with adopting this API, I think. Haven't given\nit much thought, though. In the worst case, this package could be copied\ninto the text repo, but that would be lame. I rather not do that.\n\nSomething like that. That is quite an addition to the current package, even\nthough it is only a new API wrapper, so that probably requires a proposal.\nWidthFunc is defined on the entire cell, instead of per rune, to be able to\nhandle contextual sizes (such as Hangul rendering for decomposed Jamo in\nKorean).\n\nNote that the golang.org/x/text/width package also has support for\nEast-Asian width. This package could provide implementations of the\ninterface for tabwriter. All the data is there.\nSimilarly a package for Arabic Shaping could provide approximate widths for\nArabic (don't actually know if there is such a thing as fixed-width Arabic).\n\n\nOn Mon, Jan 18, 2016 at 7:34 AM, zhangwei_cs \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e Hello, everyone, I meet the same problem of printing CJK words, so I have\n\u003e to write a custom tabwriter (WeiZhang555/tabwriter\n\u003e \u003chttps://github.com/WeiZhang555/tabwriter\u003e).\n\u003e It uses a very similar Golang git repository \"\n\u003e github.com/moznion/go-unicode-east-asian-width\" and only changes little\n\u003e code: here\n\u003e https://github.com/WeiZhang555/tabwriter/blob/master/tabwriter.go#L408-L413\n\u003e and here\n\u003e https://github.com/WeiZhang555/tabwriter/blob/master/tabwriter.go#L388-L404.\n\u003e You can regard this as a POC.\n\u003e\n\u003e so the question is:\n\u003e 1. Do you think this is OK or not? I mean changing the default width\n\u003e calculation method?\n\u003e 2. The proposal mentioned custom CellWidth calculation method, I think it\n\u003e can also give me some help, why you say this can't be implemented ?\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/12073#issuecomment-172439316\u003e.\n\u003e\n",
	"user": {
		"login": "mpvl",
		"id": 6445383,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-18T09:25:47Z",
	"updated_at": "2016-01-18T09:25:47Z"
}
