{
	"id": 51281601,
	"number": 4073,
	"state": "closed",
	"title": "net/http: ListenAndServeTLS performs badly on Windows",
	"body": "by **raheelgup**:\n\n\u003cpre\u003eHi,\n\nThis is in reference to the crypto/tls package which is very slow and CPU intensive than\nit should be.\nI had been discussing this here :\n\u003ca href=\"https://groups.google.com/forum/?fromgroups=#\"\u003ehttps://groups.google.com/forum/?fromgroups=#\u003c/a\u003e!topic/golang-nuts/QTDzrcDQmmw\n\nI am using the following example as on the main go docs :\n\u003ca href=\"http://golang.org/pkg/net/http/#ListenAndServeTLS\"\u003ehttp://golang.org/pkg/net/http/#ListenAndServeTLS\u003c/a\u003e\n\nI did a performance check on Windows 7 64 Bit for HTTPS connections and it is surprising\nthat it really performs badly.\nMy test methodology is simple, press F5 continously in chrome.\nThe CPU shot to 25-50% and the RAM also kept on increasing.\nDuring the constant refresh, there are many \u0026quot;Connection was reset\u0026quot; messages. \n\nAs against this the normal ListenAndServe example is very stable. I did an ab.exe -n\n10000 -c 1000 \u003ca href=\"http://127.0.0.1:PORT/index.html\"\u003ehttp://127.0.0.1:PORT/index.html\u003c/a\u003e and it completes it in 60-70 seconds. The\nMAX CPU touches 9-10% and RAM usage increases a little BIT and after the requests are\ncomplete, it reaches near the previous RAM usage.\n\nAdam from Golang also did a profiling :\n(pprof) top10 -cum\nTotal: 1075 samples\n       0   0.0%   0.0%      827  76.9% schedunlock\n       0   0.0%   0.0%      822  76.5% net/http.(*conn).serve\n       0   0.0%   0.0%      813  75.6% crypto/tls.(*Conn).Handshake\n       0   0.0%   0.0%      813  75.6% crypto/tls.(*Conn).serverHandshake\n       2   0.2%   0.2%      578  53.8% crypto/elliptic.(*CurveParams).ScalarMult\n       0   0.0%   0.2%      495  46.0% crypto/tls.(*ecdheRSAKeyAgreement).generateServerKeyExchange\n       9   0.8%   1.0%      449  41.8% math/big.nat.div\n     135  12.6%  13.6%      431  40.1% math/big.nat.divLarge\n       8   0.7%  14.3%      347  32.3% math/big.(*Int).Mod\n       2   0.2%  14.5%      343  31.9% math/big.(*Int).QuoRem\n\nSo 75% of the time is being taken in handshaking and the rest is probably taken in\ndealing with the garbage from that.\n\nSO I am wondering if this can be fixed in the next GO Version.\n\nRegards,\nR\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 14,
	"closed_at": "2014-12-08T10:21:40Z",
	"created_at": "2012-09-13T06:57:03Z",
	"updated_at": "2016-06-24T22:24:32Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
