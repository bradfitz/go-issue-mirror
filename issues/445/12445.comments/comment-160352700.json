{
	"id": 160352700,
	"body": "@RLH Sorry, when you say \"for which this will not work\", what are you referring to by \"this\"?  E.g., would [the overlap function I wrote above](https://github.com/golang/go/issues/12445#issuecomment-160264004) (setting aside momentarily that it doesn't address @kortschak's actual use case) not be safe under some of those GC implementations?\r\n\r\nThe Go spec says \"For struct `s` with field `f`: `uintptr(unsafe.Pointer(\u0026s)) + unsafe.Offsetof(s.f) == uintptr(unsafe.Pointer(\u0026s.f))`\".  I've generally extrapolated from this that within a single expression, pointers when converted to uintptr must represent a consistent view of memory, as otherwise the equality wouldn't necessarily hold.  Also that other uintptr expressions like `uintptr(unsafe.Pointer(\u0026s.f)) - uintptr(unsafe.Pointer(\u0026s)) == unsafe.Offsetof(s.f)` and `uintptr(unsafe.Pointer(\u0026s.f)) \u003e= uintptr(unsafe.Pointer(\u0026s))` would be valid and guaranteed to evaluate to true.\r\n\r\nIf those aren't safe extrapolations, perhaps the spec should be revised to only guarantee `unsafe.Pointer(uintptr(unsafe.Pointer(\u0026s)) + unsafe.Offsetof(s.f)) == unsafe.Pointer(\u0026s.f)`.",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-29T00:47:00Z",
	"updated_at": "2015-11-29T00:47:00Z"
}
