{
	"id": 66052457,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4 by **ashtonfedler**:\n\n\u003cpre\u003equote:\n\"An implementation always has to be aware of the interface is is fulfilling in a correct\nprogram, even in fully dynamically typed languages.\"\n\nThis is not an entirely accurate statement, in fact, the go team along with Rob Pike are\nquoted quite numerously online in videos, and writings as stating, one of the largest\nbenefits of go programming is that implementations do not need to be concerned with the\ninterfaces they are implementing and this is a benefit because if new interfaces are\ncreated old code will not have to be updated to meet these interfaces.\n\nQuote:  \n\"Note also that duck typing is not strictly defined.\"\n\nWhile I agree with this statement in general, I believe in the least the following\nstatement should always be able to be made if duck typing is to be claimed: Duck typing\nis a form of dynamic typing such that a type may be derived from it's properties and/or\nbehaviors.\n\nQuote:\n\"This would be a language change with significant runtime consequences. We have thought\nabout this in the past and decided against it.\"\n\nNow this I can strongly agree with and respect; however, I would love to hear what the\ncounter arguments were against allowing for covariant resulting types. Especially, as\nsaid above, one of the most powerful features of go is allowing existing code to\nimplement new interfaces. The choice made in fact makes it impossible for any recursive\nstructure to implement multiple interfaces.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-09-03T18:09:04Z",
	"updated_at": "2014-12-08T10:06:53Z"
}
