{
	"id": 51284635,
	"number": 6074,
	"state": "closed",
	"title": "net: unix/windows handling of netFD.Close is different",
	"body": "\u003cpre\u003e\u0026gt; Comment #9 on \u003ca href=\"https://golang.org/issue/5792\"\u003eissue #5792\u003c/a\u003e by alex.brainman: net/rpc: data race on non-net\n\u0026gt; transport\n\u0026gt; \u003ca href=\"https://golang.org/issue/5792\"\u003ehttps://golang.org/issue/5792\u003c/a\u003e\n\u0026gt;\n\u0026gt; Dmitriy,\n\u0026gt;\n\u0026gt; While we're on this subject, I would like to talk to you about\n\u0026gt; (*netFD).Close. I could be wrong, but, I think, semantically windows and\n\u0026gt; unix (*netFD).Close are different. One waits for all outstanding IO to\n\u0026gt; finish, while the other does not. The questions here is: \u0026quot;What is guaranteed\n\u0026gt; on (*netFD).Close return? Can it be assumed that all outstanding IO is\n\u0026gt; completed and is flushed to OS or canceled? Can we be certain that OS socket\n\u0026gt; is closed?\u0026quot;. Perhaps it is not important, but I would like to run this\n\u0026gt; concern by you.\n\u0026gt;\n\u0026gt; Alex\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 9,
	"closed_at": "2014-12-08T10:33:23Z",
	"created_at": "2013-08-07T20:51:21Z",
	"updated_at": "2016-06-24T22:54:01Z",
	"milestone": {
		"id": 1067207,
		"number": 14,
		"title": "Go1.2"
	}
}
