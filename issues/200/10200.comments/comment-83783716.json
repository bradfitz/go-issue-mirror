{
	"id": 83783716,
	"body": "I also think we discussed this before, but I would have to dig it up.\r\n\r\n@chipaca You are right that one _could_ define parameter and return statement handling as you suggest, and just perhaps, in a strictly mathematical sense, it may be more consistent. But once you go that route, a lot of additional questions need to be answered (or perhaps would follow by implication). For instance:\r\n\r\nIf f is a function taking 0 arguments, and g returns no values, f(g()) should probably be permitted as well. What about f(g(), g())? Not so obvious. There's still a notion of \"arity\", and it may require special rules, too. It is not obvious that it makes the language more consistent or simpler, or better for that matter. And it is likely to cause a whole lot of confusion for less mathematically inclined programmers.\r\n\r\nhttps://code.google.com/p/virgil/ is a programming language which allows this, I believe. There's a notion of a \"void\" type (at least there used to be), which is used to designate the absence of parameters and results. Consequently, functions that have a void parameter list accept a function call that returns a void result, and presumably this also applies to returns. One may even be able to declare void variables and then assign results of void functions. The author of virgil claims (personal communication) that this \"fell out\" naturally from the implementation. This may well be true, but it's not clear, as @adg already mentioned, that this is for the benefit of readability.\r\n\r\nAt the end of the day this is a design decision that has to be made, pretty early in the design of a language, and in Go we simply have not gone this route.\r\n",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-03-19T22:18:04Z",
	"updated_at": "2015-03-19T22:18:04Z"
}
