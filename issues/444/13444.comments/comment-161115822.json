{
	"id": 161115822,
	"body": "When you say \"streams\", you don't mean anything more specific than being able to read \u0026 write response bodies and/or (?) request bodies at the same time?\r\n \r\nFor the client side, can't you just do a RoundTrip with the Request.Body set to the read end of an io.Pipe and then write your stderr/stdout to the write side?\r\n\r\nI just put up an `/ECHO` handler at https://http2.golang.org/ECHO which streams back its output capitalized:\r\n\r\n```go\r\ntype capitalizeReader struct {\r\n        r io.Reader\r\n}\r\n\r\nfunc (cr capitalizeReader) Read(p []byte) (n int, err error) {\r\n        n, err = cr.r.Read(p)\r\n        for i, b := range p[:n] {\r\n                if b \u003e= 'a' \u0026\u0026 b \u003c= 'z' {\r\n                        p[i] = b - ('a' - 'A')\r\n                }\r\n        }\r\n        return\r\n}\r\n\r\ntype flushWriter struct {\r\n        w io.Writer\r\n}\r\n\r\nfunc (fw flushWriter) Write(p []byte) (n int, err error) {\r\n        n, err = fw.w.Write(p)\r\n        if f, ok := fw.w.(http.Flusher); ok {\r\n                f.Flush()\r\n        }\r\n        return\r\n}\r\n\r\nfunc echoCapitalHandler(w http.ResponseWriter, r *http.Request) {\r\n        if r.Method != \"PUT\" {\r\n                http.Error(w, \"PUT required.\", 400)\r\n                return\r\n        }\r\n        io.Copy(flushWriter{w}, capitalizeReader{r.Body})\r\n}\r\n```\r\n\r\nAnd then with a couple modifications to the http2 client, I can now stream an HTTP request body to a server, and read the streamed response body at the same time, even seeing the 1 second delays:\r\n\r\n```\r\nbradfitz@dev-bradfitz-debian2:~$ cat echo.go\r\npackage main\r\n\r\nimport (\r\n        \"fmt\"\r\n        \"io\"\r\n        \"io/ioutil\"\r\n        \"log\"\r\n        \"net/http\"\r\n        \"os\"\r\n        \"time\"\r\n)\r\n\r\nfunc main() {\r\n        pr, pw := io.Pipe()\r\n        req, err := http.NewRequest(\"PUT\", \"https://http2.golang.org/ECHO\", ioutil.NopCloser(pr))\r\n        if err != nil {\r\n                log.Fatal(err)\r\n        }\r\n        go func() {\r\n                for {   \r\n                        time.Sleep(1 * time.Second)\r\n                        fmt.Fprintf(pw, \"It is now %v\\n\", time.Now())\r\n                }\r\n        }()\r\n        go func() {\r\n                res, err := http.DefaultClient.Do(req)\r\n                if err != nil {\r\n                        log.Fatal(err)\r\n                }\r\n                log.Printf(\"Got: %#v\", res)\r\n                n, err := io.Copy(os.Stdout, res.Body)\r\n                log.Fatalf(\"copied %d, %v\", n, err)\r\n        }()\r\n        select {}\r\n}\r\nbradfitz@dev-bradfitz-debian2:~$ go run echo.go\r\n2015/12/01 22:10:54 Got: \u0026http.Response{Status:\"200 OK\", StatusCode:200, Proto:\"HTTP/2.0\", ProtoMajor:2, ProtoMinor:0, Header:http.Header{\"Content-Type\":[]string{\"text/plain; charset=utf-8\"}, \"Date\":[]string{\"Tue, 01 Dec 2015 22:10:54 GMT\"}}, Body:http.http2transportResponseBody{cs:(*http.http2clientStream)(0xc8203697a0)}, ContentLength:-1, TransferEncoding:[]string(nil), Close:false, Trailer:http.Header(nil), Request:(*http.Request)(0xc8200c4000), TLS:(*tls.ConnectionState)(0xc8203d69a0)}\r\nIT IS NOW 2015-12-01 22:10:54.592452374 +0000 UTC\r\nIT IS NOW 2015-12-01 22:10:55.592869959 +0000 UTC\r\nIT IS NOW 2015-12-01 22:10:56.593126243 +0000 UTC\r\nIT IS NOW 2015-12-01 22:10:57.593371657 +0000 UTC\r\nIT IS NOW 2015-12-01 22:10:58.593660994 +0000 UTC\r\nIT IS NOW 2015-12-01 22:10:59.59395207 +0000 UTC\r\nIT IS NOW 2015-12-01 22:11:00.594216993 +0000 UTC\r\nIT IS NOW 2015-12-01 22:11:01.594496771 +0000 UTC\r\nIT IS NOW 2015-12-01 22:11:02.594795043 +0000 UTC\r\nIT IS NOW 2015-12-01 22:11:03.594974236 +0000 UTC\r\nIT IS NOW 2015-12-01 22:11:04.595187379 +0000 UTC\r\nIT IS NOW 2015-12-01 22:11:05.59544486 +0000 UTC\r\n```\r\n\r\nDo you need more than that?\r\n\r\nThe change is at https://golang.org/cl/17310 if you want to patch it in and play. (In your $GOPATH/src/net directory, run `git fetch https://go.googlesource.com/net refs/changes/10/17310/1 \u0026\u0026 git cherry-pick FETCH_HEAD`)\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-01T22:24:58Z",
	"updated_at": "2015-12-01T22:26:48Z"
}
