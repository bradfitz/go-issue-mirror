{
	"id": 66097985,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eI am not an expert here, just reading source code ...\n\nThe problem appears to be cgo. It is trying to figure all C defines, variables and\nfunctions out of\n/Users/woodjk/work/eqworks/flash/src/code.google.com/p/odbc/api/api_unix.go file. It's\ndoing this (see $GOROOT/src/cmd/gcc.go) by creating small C program that uses all above\nmentioned bits in a various scenarios, builds the file, and then parses gcc errors to\nfigure out the nature of every bit. cgo expects gcc output to contain certain phrases.\nYours does not contain expected output.\n\nUnfortunately, cgo error message does not include full gcc output, so we can see where\ncgo logic fails. Perhaps you can provide that output. This bit of code has been changed\nrecently just for the same reason. If you update your Go to the tip, you should be able\nto see full gcc output. Alternatively, you can change your source:\n\ndiff --git a/src/cmd/cgo/gcc.go b/src/cmd/cgo/gcc.go\n--- a/src/cmd/cgo/gcc.go\n+++ b/src/cmd/cgo/gcc.go\n@@ -374,7 +374,7 @@\n \t}\n \n \tif !completed {\n-\t\tfatalf(\"%s did not produce error at completed:1\\non input:\\n%s\", p.gccBaseCmd()[0],\nb.Bytes())\n+\t\tfatalf(\"%s did not produce error at completed:1\\non input:\\n%s\\nfull error\noutput:\\n%s\", p.gccBaseCmd()[0], b.Bytes(), stderr)\n \t}\n \n \tfor i, n := range names {\n\nto do the same. Please, report here what you discover. Thank you.\n\nAlex\u003c/pre\u003e\n\n\n\n_Status changed to **WaitingForReply**._",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-08-28T04:45:14Z",
	"updated_at": "2014-12-08T10:47:36Z"
}
