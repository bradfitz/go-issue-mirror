{
	"id": 66074039,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eWhat you are proposing is essentially to provide free() function. That's the easiest and\nthe most efficient way to implement your interface :)\n\nAnother option is to provide generic pool for interface{}:\n\ntype Pool struct {...}\nfunc (p *Pool) Get() interface{}\nfunc (p *Pool) Put(res interface{}) bool\nfunc (p *Pool) Drain() []interface{}\nfunc (p *Pool) SetCapacity(global, local int)\n\nAnd then if the buffer sizes have some reasonable limits, then one can have, say, 16\npools for blocks of size 4k, 8k, 12k, ..., 64k, and manually choose the right one. Brad,\nwould it suffice dl.google.com server?\n\nThe idea behind SetCapacity(global, local int) is that you can set local=0, and then it\nwill be a slower pool for expensive resources.\n\nYes, the fast version with local cache would benefit greatly from per-m caches.\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-02-01T20:21:26Z",
	"updated_at": "2014-12-08T10:25:00Z"
}
