{
	"id": 66081122,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8:\n\n\u003cpre\u003eAlex,\n\nSorry for taking time to respond.\n\n\u003e \u003e ... the problem was that go get was trying to invoke \"cmd /C hg\" using an arbitrary\ncmd.exe ...\n\u003e \n\u003e You keep saying that. I am yet to see it. I don't believe \"go get\" command invokes\ncmd.exe in any circumstances.\n\n\"Trying to invoke\" was not the right expression, sorry. It doesn't explicitly specify\n\"cmd\" but apparently it ends up invoking it anyway in some cases.\n\nIt has happened for the OP in the golang-nuts thread linked at the top, and I too could\nreproduce it when hg is installed as a batch file. (Note that for instance \"pip install\nmercurial\" installs the hg command as a batch file; pip is one of the standard\ninstallers for Python software.) It can be confirmed using ProcessManager, or by placing\na bogus cmd.exe in cwd or on the PATH before %ComSpec%.\n\nIn #2 I also provided a minimal example showing that invoking a .bat file using\nexec.Start causes cmd.exe in cwd (rather than %ComSpec%) to be used for invoking the\nbatch file.\n\nThe same can happen in go get. My biggest concern is that it may be possible to create a\nrepository that exploits this and makes go get invoke arbitrary code in some cases. (I\ncan try to create one if that is what it takes for this to be accepted as an issue.)\n\nPeter\u003c/pre\u003e",
	"user": {
		"login": "speter",
		"id": 450945,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-07-03T14:42:39Z",
	"updated_at": "2014-12-08T10:31:14Z"
}
