{
	"id": 51284874,
	"number": 6231,
	"state": "closed",
	"title": "reflect: assignment compatibility doesn't include nil",
	"body": "\u003cpre\u003eA couple of times recently I've come up against an awkwardness when using the reflect\npackage to pass an arbitrary value to a destination of the same type as the value.\n\nThe code that I naively wrote initially ran along the following lines:\n\n    // Set sets the contents of dest, which must be a pointer to some type,\n    // say *T, to the given value, which must be assignable to type T.\n    func Set(dest, value interface{}) {\n          reflect.ValueOf(dest).Elem().Set(reflect.ValueOf(value))\n    }\n\nThis at first seems to work fine (\u003ca href=\"http://play.golang.org/p/OSz3NGEykB)\"\u003ehttp://play.golang.org/p/OSz3NGEykB)\u003c/a\u003e but it fails when\nvalue is nil (\u003ca href=\"http://play.golang.org/p/0zPsQUiD3F)\"\u003ehttp://play.golang.org/p/0zPsQUiD3F)\u003c/a\u003e\n\nTo get this right, you have to do something like this:\n\u003ca href=\"http://play.golang.org/p/E_Rrhnokz_\"\u003ehttp://play.golang.org/p/E_Rrhnokz_\u003c/a\u003e\n\nI think it would be reasonable to make the original code work as expected; that is: we\ncould make it possible for a zero (\u0026quot;invalid\u0026quot;) reflect.Value to be treated as\nuntyped nil for assignability purposes.\n\nOne suggestion is to change Value.Convert to allow a zero Value - I think this is\nnecessary but not sufficient, as for many purposes, assignability is exactly what we\nwant, and the stronger Covert operation will allow more types than desired.\u003c/pre\u003e",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 7,
	"closed_at": "2014-12-08T10:34:15Z",
	"created_at": "2013-08-23T15:41:07Z",
	"updated_at": "2016-06-25T01:17:07Z"
}
