{
	"id": 66076251,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9 by **eric.hill**:\n\n\u003cpre\u003eQuotes in Windows were intended for the command interpreter to understand where to break\ncommand line arguments to an application:\n\napp.exe \"First Argument\" \"Second Argument\"\n\nPlacing them into environment variables is not generally a good idea, including the\nsystem PATH.  Applications that use PATH will split it on a semicolon and then use the\nstrings as prefixes to the file name they're looking for.  Environment variables with a\nsingle path should be just that, the path:\n\nSOMEPATH=C:\\Program Files\\Long Path\\bin\n\nInside of a program that reads the variable, that expands to a single string that should\nbe treated as a path segment.  Command scripts work the same way:\n\n@echo off\n\"%SOMEPATH%\\app.exe\" \"First Argument\" \"Second Argument\"\n\nI think the parsing or stripping quotes from environment variables may cause unintended\nside effects.  For example, an application that computes folder size:\n\n@echo off\nset APPPATH=C:\\Program Files\\Folder Sizer\nset APPARGS=folder name\nrem Use case 1\n\"%APPPATH%\\app.exe\" %APPARGS%\nrem Use case 2\n\"%APPPATH%\\app.exe\" \"%APPARGS%\"\n\nUse case 1 is very different from use case 2.  In case 1, the application should compute\nthe space for two folders, one named \"folder\", and one named \"name\".  In the second\ncase, the application should compute the space for a single folder called \"folder name\".\n If the application performed quote stripping, it may not work properly for case 2.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-19T15:53:29Z",
	"updated_at": "2014-12-08T10:26:55Z"
}
