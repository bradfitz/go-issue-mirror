{
	"id": 122999180,
	"number": 13681,
	"state": "closed",
	"title": "testing: test timeout traceback is not useful",
	"body": "Since we introduced and changed the default GOTRACEBACK to \"single\" (see #13107), test time outs no longer print the traceabck of the goroutine actually running the test, or of any other goroutines that may be involved in the test being stuck or slow. This makes it difficult to debug these time outs.\r\n\r\nFor example, in http://build.golang.org/log/a7048d0c840f1815694b38306ce9e7f723d4e382, the runtime test times out with just\r\n\r\n```\r\npanic: test timed out after 5m0s\r\n\r\ngoroutine 207854 [running]:\r\ntesting.startAlarm.func1()\r\n\t/tmp/workdir/go/src/testing/testing.go:717 +0x132\r\ncreated by time.goFunc\r\n\t/tmp/workdir/go/src/time/sleep.go:129 +0x3a\r\nFAIL\truntime\t300.006s\r\n```\r\n\r\nUnfortunately, there seems not to be a way for startAlarm to tell the system to print all stacks on panic. \"go test\" could pass a higher GOTRACEBACK if GOTRACEBACK isn't set (suggested by @davecheney in https://github.com/golang/go/issues/13107#issuecomment-165252244), but this would affect all test panics (not necessarily a bad thing), and wouldn't help if the test binary was being run directly. Another possibility is that startAlarm could print the stacks itself using runtime.Stack (with \"all\" set to true) and then simply exit.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2015-12-18T20:51:55Z",
	"created_at": "2015-12-18T18:06:40Z",
	"updated_at": "2015-12-18T20:51:55Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
