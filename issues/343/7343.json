{
	"id": 51286564,
	"number": 7343,
	"state": "closed",
	"title": "runtime: GC leak on arm",
	"body": "\u003cpre\u003eThe arm builders occasionally fail with complaints about finalizers not being run in the\nsync.Pool test. Here is one failure:\n\u003ca href=\"http://build.golang.org/log/0d19587ed9638d98d6bcc517b0847c2b0649af63\"\u003ehttp://build.golang.org/log/0d19587ed9638d98d6bcc517b0847c2b0649af63\u003c/a\u003e\n\nI was unable to reproduce 0 of 100, but using\n\nGOMAXPROCS=4 ./sync.test -test.short -test.run=TestPoolGC\n-test.cpu=10,10,10,10,10,10,10,10,10,10,10,10\n\nI was able to reproduce 69 of 100 quite reliably. That turned out to be 31 elements in a\npool cache line being retained due to timerproc holding arg longer than necessary. I\nwill send CL 64920044 for that.\n\nWith that out of the way, I was able to reproduce 0 of 100 fairly reliably as well, with\nthe same command line but many more 10s.\n\nI do not yet know what is causing the 0 of 100 leak.\n\nA bug to find before Go 1.3.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:40:50Z",
	"created_at": "2014-02-17T03:23:59Z",
	"updated_at": "2016-06-25T01:27:45Z",
	"milestone": {
		"id": 1067211,
		"number": 17,
		"title": "Go1.3"
	}
}
