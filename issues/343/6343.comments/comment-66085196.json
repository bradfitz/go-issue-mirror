{
	"id": 66085196,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5 by **kerridgejon**:\n\n\u003cpre\u003eThanks for this update on likely release date.\nWill this release of the scheduler also overcome another problem  as\nfollows?\nIf you create a set of goroutines running will there by any way to ensure\nthat you wait for them all to finish before carrying on to the next part of\nthe algorithm. Its a bit like join in Unix or more like PAR in Occam.  A\nPAR only terminates when all the parallel components themselves terminate.\nThe following is a simple example\n\n*func* RecvValue (valuePtr **int*,\n  in *chan* *int {*\n\n\n\n  *valuePtr = \u0026lt;-in\n}\n\n\n\n*func* PlusP (in1 *chan* *int*,\n  in2 *chan* *int*,\n  out *chan* *int* ) {\n  *var* v1, v2 *int* = 0, 0\n  *for* {\n    *go* RecvValue (\u0026v1, in1)\n    *go* RecvValue (\u0026v2, in2)\n\n    out \u0026lt;- v1 + v2\n  }\n}\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-09-22T11:12:50Z",
	"updated_at": "2014-12-22T06:28:39Z"
}
