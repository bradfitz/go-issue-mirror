{
	"id": 74256433,
	"body": "It's tip and our focus has been on correctness and not memory utilization\nor performance. As always we will be driven by usage cases but I'd be\n(happily) surprised if this does not come up. It does however bring up the\nissue of whether the test suite should be used for performance metrics or\nif it is just for correctness. I actually don't know the answer to that\nquestion or have an opinion.\n\n\nOn Thu, Feb 12, 2015 at 7:17 PM, Brad Fitzpatrick \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e True.\n\u003e\n\u003e But at least on my laptop (OS X), I see this test at tip only retain up to\n\u003e 176 MB:\n\u003e\n\u003e [log] allocated 1000 chunks of 1048576 and used  176189440 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  171728896 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  167268352 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  175075328 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  182882304 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  171728896 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  177303552 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  176189440 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  178421760 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  175075328 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  168382464 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  161693696 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  170614784 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  172843008 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  156119040 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  161693696 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  172843008 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  151658496 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  173961216 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  159461376 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  166154240 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  166154240 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  161693696 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  151658496 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  175075328 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  172843008 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  165040128 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  176189440 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  168382464 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  165040128 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  157233152 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  173961216 memory\n\u003e [log] allocated 1000 chunks of 1048576 and used  169500672 memory\n\u003e\n\u003e Why is Windows retaining so much more? (636481536)\n\u003e\n\u003e And why can't I make my laptop have a higher number with GOGC=1?\n\u003e\n\u003e Is GOGC not respected until after init or something?\n\u003e\n\u003e bradfitz@laptop test$ GODEBUG=gctrace=1 GOGC=0 go run init1.go\n\u003e gc1(1): 0+1+89+0 us, 4 -\u003e 11 MB, 38 (38-0) objects, 3 goroutines, 29/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc2(1): 172+1+104+0 us, 11 -\u003e 11 MB, 38 (38-0) objects, 3 goroutines, 29/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc3(1): 0+1+63+0 us, 4 -\u003e 43 MB, 67 (79-12) objects, 4 goroutines, 61/1/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc4(1): 116+0+80+0 us, 43 -\u003e 43 MB, 67 (79-12) objects, 4 goroutines, 61/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc5(1): 1+4+75+2 us, 4 -\u003e 69 MB, 93 (146-53) objects, 4 goroutines, 87/1/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc6(1): 211+1+116+0 us, 69 -\u003e 69 MB, 93 (146-53) objects, 4 goroutines, 87/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc7(1): 0+1+70+0 us, 4 -\u003e 91 MB, 115 (235-120) objects, 4 goroutines, 109/1/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc8(1): 128+0+59+0 us, 91 -\u003e 91 MB, 115 (235-120) objects, 4 goroutines, 109/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc9(1): 0+1+61+0 us, 4 -\u003e 111 MB, 135 (344-209) objects, 4 goroutines, 129/1/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc10(1): 119+0+61+0 us, 111 -\u003e 111 MB, 135 (344-209) objects, 4 goroutines, 129/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc11(1): 0+1+67+0 us, 4 -\u003e 123 MB, 147 (465-318) objects, 4 goroutines, 141/1/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc12(1): 130+0+68+0 us, 123 -\u003e 123 MB, 147 (465-318) objects, 4 goroutines, 141/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc13(1): 0+1+66+0 us, 4 -\u003e 129 MB, 153 (592-439) objects, 4 goroutines, 147/1/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc14(1): 133+0+66+0 us, 129 -\u003e 129 MB, 153 (592-439) objects, 4 goroutines, 147/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc15(1): 0+1+59+0 us, 4 -\u003e 144 MB, 168 (734-566) objects, 4 goroutines, 162/1/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc16(1): 119+0+59+0 us, 144 -\u003e 144 MB, 168 (734-566) objects, 4 goroutines, 162/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc17(1): 0+1+59+0 us, 4 -\u003e 155 MB, 179 (887-708) objects, 4 goroutines, 173/1/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e gc18(1): 120+0+59+0 us, 155 -\u003e 155 MB, 179 (887-708) objects, 4 goroutines, 173/0/0 sweeps, 0(0) handoff, 0(0) steal, 0/0/0 yields\n\u003e [log] allocated 1000 chunks of 1048576 and used  172843008 memory\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/9848#issuecomment-74181812\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-13T13:55:20Z",
	"updated_at": "2015-02-13T13:55:20Z"
}
