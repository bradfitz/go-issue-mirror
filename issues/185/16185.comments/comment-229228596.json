{
	"id": 229228596,
	"body": "@driusan @crawshaw \r\n\r\nYes, golang.org/x/image/font/plan9font already exists, and it's under golang.org/x, but it has the same problem in that you still need to provide one or more font files separately. The whole point, as crawshaw said, is for tests and small examples where you just want the simplicity of a single import and no further runtime dependencies. This proposed package does not replace freetype; if you want freetype, you can have freetype. But sometimes you don't want freetype's complications.\r\n\r\nI will distinguish between basicfont.Face, the type, and basicfont.Face7x13, a value of that type based on the X11 fixed font. You can think of the proposed inconsolata.Regular8x16 as a better (nicer looking, wider unicode coverage) basicfont.Face7x13, and I agree we could probably delete the latter if the former lands. I don't think we can delete the basicfont package entirely, because others may want to use the Face type, especially given the genbasicfont program I just linked to.\r\n\r\nAs for being basicfont.Face8x16 or basicfont.InconsolataRegular8x16 instead of inconsolata.Regular8x16, at some point we are bikeshedding but I prefer inconsolata.Regular8x16. Note that it can't be a transparent re-purposing of the existing basicfont.Face7x13 name because the metrics are different (8x16 instead of 7x13), plus there's now regular and bold flavors.\r\n\r\nA package to query what fonts the OS provides would indeed be useful, but if, in practice, you're querying for TTF fonts, then your program will pretty much need to depend on freetype, so such a package probably doesn't belong under golang.org/x. It could possibly be a new package under github.com/golang/freetype/... but that's a separate discussion.",
	"user": {
		"login": "nigeltao",
		"id": 8565232,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-29T01:03:38Z",
	"updated_at": "2016-06-29T01:04:03Z"
}
