{
	"id": 115739931,
	"number": 13185,
	"state": "open",
	"title": "encoding/xml: unexpected behavior of encoder.Indent(\"\", \"\")",
	"body": "Marshaling xml with prefix and indent set to empty strings results in unindented xml. Tested in Go 1.5.1 darwin/amd64.\r\n\r\nThe following code:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"encoding/xml\"\r\n\t\"fmt\"\r\n)\r\n\r\ntype Person struct {\r\n\tXMLName   xml.Name `xml:\"person\"`\r\n\tId        int      `xml:\"id,attr\"`\r\n\tFirstName string   `xml:\"name\u003efirst\"`\r\n\tLastName  string   `xml:\"name\u003elast\"`\r\n\tAge       int      `xml:\"age\"`\r\n}\r\n\r\nfunc main() {\r\n\tv := \u0026Person{Id: 13, FirstName: \"John\", LastName: \"Doe\", Age: 42}\r\n\r\n\toutput, err := xml.MarshalIndent(v, \"\", \"\")\r\n\tif err != nil {\r\n\t\tfmt.Printf(\"error: %v\\n\", err)\r\n\t}\r\n\r\n\tfmt.Println(string(output))\r\n}\r\n```\r\n\r\ngives:\r\n```xml\r\n\u003cperson id=\"13\"\u003e\u003cname\u003e\u003cfirst\u003eJohn\u003c/first\u003e\u003clast\u003eDoe\u003c/last\u003e\u003c/name\u003e\u003cage\u003e42\u003c/age\u003e\u003c/person\u003e\r\n```\r\n\r\nbut expteded was:\r\n```xml\r\n\u003cperson id=\"13\"\u003e\r\n\u003cname\u003e\r\n\u003cfirst\u003eJohn\u003c/first\u003e\r\n\u003clast\u003eDoe\u003c/last\u003e\r\n\u003c/name\u003e\r\n\u003cage\u003e42\u003c/age\u003e\r\n\u003c/person\u003e\r\n```\r\n\r\nI know, not major, but believe it or not, I actually need the latter behavior. :-)",
	"user": {
		"login": "poffe",
		"id": 1055995,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"created_at": "2015-11-08T15:35:58Z",
	"updated_at": "2016-05-23T05:05:14Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
