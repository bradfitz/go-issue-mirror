{
	"id": 139989604,
	"body": "@mikioh Result of new test with syscall.bind + syscall.connect\r\n\r\nSamsung SM-T320 (Broken device)\r\n\r\n```\r\n09-14 15:49:31.568 17808-17838/? I/GoLog: 38: {family:2 sotype:1 protocol:0}\r\n09-14 15:49:31.765 17808-17838/? I/GoLog: 39: {family:2 sotype:1 protocol:6}\r\n```\r\n\r\nSamsung GT-N7102 (Broken device)\r\n```\r\n09-14 15:51:15.091 21315-21330/com.test.gosockettest I/GoLog: 59: {family:2 sotype:1 protocol:0}\r\n09-14 15:51:15.286 21315-21330/com.test.gosockettest I/GoLog: 64: {family:2 sotype:1 protocol:6}\r\n```\r\n\r\nNo errors on broken devices. Strange. \r\n\r\nBut this give us some extra ammo to work with. We are going to try using the syscall.connect method to create a tcp fd and then converting that fd -\u003e file -\u003e fileConn(). We have already successfully passed java tcp socket's fd to go and going this route to bypass this problem. If the syscall fd works, it would be a pure go problem bypass. ",
	"user": {
		"login": "diegomontoya",
		"id": 417764,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-09-14T07:57:48Z",
	"updated_at": "2015-09-14T07:57:48Z"
}
