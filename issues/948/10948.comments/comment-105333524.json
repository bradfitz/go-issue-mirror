{
	"id": 105333524,
	"body": "Can you provide some benchmark numbers to validate this. In the past the\ngrossness of layering violations have scuttled similar proposals.\n\nOn Tue, 26 May 2015 08:51 Philip Hofer \u003cnotifications@github.com\u003e wrote:\n\n\u003e sendfile only allows the source to be a mmap-able file descriptor. Using\n\u003e splice in the implementation of (net.Conn).ReadFrom allows net.Conn to\n\u003e get the same sort of performance benefits as *os.File when io.Copy is\n\u003e used. (In theory, the src can be any fd.)\n\u003e\n\u003e Pros:\n\u003e\n\u003e    - Uses the fastest (AFAIK) socket -\u003e socket method available on Linux.\n\u003e    (Fundamentally, this is how haproxy works.)\n\u003e    - Can be non-blocking (in the sense that both sockets are talking to\n\u003e    the netpoller.)\n\u003e    - Transparent perf improvements to existing users of io.Copy.\n\u003e\n\u003e Cons:\n\u003e\n\u003e    - Increased implementation complexity: requires two calls to splice,\n\u003e    and a call to pipe, along with associated pd.WaitRead()/pd.WaitWrite()\n\u003e    business.\n\u003e    - Architecture-specific.\n\u003e\n\u003e For people writing proxies in Go \u003chttps://github.com/mailgun/vulcand\u003e,\n\u003e this kind of optimization could be huge.\n\u003e\n\u003e If this sounds agreeable, I can send in a patch next week.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/10948\u003e.\n\u003e\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-05-25T23:14:27Z",
	"updated_at": "2015-05-25T23:14:27Z"
}
