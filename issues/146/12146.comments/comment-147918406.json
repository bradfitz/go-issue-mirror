{
	"id": 147918406,
	"body": "@extemporalgenome I agree that adding it now is better than adding it later.  I think we should not add it, however.\r\n\r\nI don't see a need to allow json.Marshaler once we have encoding.TextMarshaler.  That can be done with a trivial adapter, however the basic support for encoding.TextMarshaler is something that cannot be done with the current encoding package and thus warrants extending the package to add it now.\r\n\r\nAlso, the failure condition seems easier to understand:\r\n    \"*sorry, Foo in map[Foo]Bar is not a string nor an encoding.TextMarshaler*\"\r\nrather than\r\n    \"*sorry, Foo in map[Foo]Bar is a json.Marshaler (and it encoded to valid JSON) but not a string.*\"\r\n\r\n\r\nOn another note:\r\nDespite writing the original proposal, I'm a bit bummed at the priority order even for string vs encoding.TextMarshaler -- I would much prefer the more consistent and rational order of using encoding.TextMarshaler first.  I doubt that many actual programs would be affected, but there is a simple workaround (e.g. `type Foo struct { X string }`) and thus I lean towards the slightly convoluted API that maintains go1 compilation and functionality.",
	"user": {
		"login": "augustoroman",
		"id": 676565,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-14T03:21:50Z",
	"updated_at": "2015-10-14T03:22:50Z"
}
