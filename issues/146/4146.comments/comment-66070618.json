{
	"id": 66070618,
	"body": "\u003ca id=\"c16\"\u003e\u003c/a\u003eComment 16 by **martin@probst.io**:\n\n\u003cpre\u003eWouldn't it be possible to write something like Mockito's API:\n\n  ctrl := ...\n  defer ctrl.Finish()\n  mockFoo := gomock.NewMock(ctrl, (*Foo)(nil))\n  gomock.When(mockFoo.Put(\"b\", gomock.Eq(2))).\n    ThenReturn(PutResponse{}, nil)\n\n  myTestCode()\n\nI.e. NewMock creates a mock that returns zero values for all calls. When() returns an\nExpectation interface that allows users to set expectations, e.g. using functions like\n\"ThenReturn(retVals ...interface{})\". NewMock internally tracks the last call to any\nmethod, calls on the returned Expectation interface set up the return values for any\nsubsequent calls.\n\nYou lose type safety on the values, i.e. ThenReturn is essentially untyped, but that\nmight be acceptable in return for no code generation. In Java-land, that is solved using\ngenerics - When() could be parameterized as \"func template \u0026lt;T\u0026gt; When(argument\n\u0026lt;T\u0026gt;) Expectation\u0026lt;T\u0026gt;\" (pseudo syntax), so that \"ThenReturn()\" calls could\nrequire the correct types.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-05-11T13:31:11Z",
	"updated_at": "2014-12-22T06:19:04Z"
}
