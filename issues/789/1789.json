{
	"id": 51278304,
	"number": 1789,
	"state": "closed",
	"title": "os/user: add Windows support",
	"body": "by **paulo.jpinto**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n1. Create an application that makes use of os.user on Windows\n2. Compile it\n3. Execute it\n\nWhat is the expected output?\nReal information about existing Windows users\n\nWhat do you see instead?\nDummy results.\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\nProblem applies to all compilers.\n\nWhich operating system are you using?\nWindows\n\nWhich revision are you using?  (hg identify)\n2f0fa51fa2da+ weekly/weekly.2011-04-27\n\nPlease provide any additional information below.\nI am creating an issue to better track down the discussion we are having on the mailing\nlist:\n\n\u003ca href=\"http://groups.google.com/group/golang-nuts/browse_thread/thread/c464373522f92d7c\"\u003ehttp://groups.google.com/group/golang-nuts/browse_thread/thread/c464373522f92d7c\u003c/a\u003e\n\nThe attached file contains the modified source files that provide initial support for\nos.user on Windows, plus some hacks I needed to do to mkerrors_windows.sh to make it\nproperly run under my go_mingw installation.\n\n\nThe original issue is of course, that the actual os.user package does not provide any\nreal functionality under Windows, just a set of dummy functions.\n\nI have added enough entry points to syscall, that now it is possible to get the user\nname from a SID and vice-versa. But there are other issues that are not that easy to\nsolve and maintain a kind of portable implementation.\n\nThe way Windows security works, it is only possible to obtain the user home directory,\nin two possible ways:\n - Asking the information for the owner of the current process\n - Login in the user into the system and make use of the logon token\n\nFor the second option, the user's password is required.\n\nThere is a possible way how to fetch the user's profile, but it only works if the user\nhas already logged at least once, and is an undocumented feature.\n\nRegarding getting the user's fullname, it only works properly for the users defined on\nthe local security database (SAM) or if the system can fetch the user data from the\ndomain server, which might not work all the time.\n\nCurrently there are two issues that affect the design of a portable os.user:\n 1 - Not possible to fetch the homedir for any user with the lookup functions;\n 2 - It is not guaranteed that a fullname can be provided in all queries. Plus it suffers a restriction similar to the homedir\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1789/0/pkg.zip\"\u003epkg.zip\u003c/a\u003e (13287 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 6,
	"closed_at": "2014-12-08T10:09:54Z",
	"created_at": "2011-05-08T16:23:20Z",
	"updated_at": "2016-06-24T19:28:43Z"
}
