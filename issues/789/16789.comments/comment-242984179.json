{
	"id": 242984179,
	"body": "The very best would be to not attempt any bind unless asked to explicitly (\"do what I tell you to do, and nothing else\"); also my 2c from a security perspective: software that binds when not asked to is one of the first trigger signs for further analysis :wink: which would of course turn out to be noise in the case of Go binaries.\r\n\r\nAs far as I know IPv4 cannot be disabled entirely from Linux kernel (not sure about BSDs); talking about IPv6 instead, I've verified that checking `/proc/net/if_inet6` is not enough (it would still be there even when IPv6 connectivity is not possible) because there are other settings that can be used to disable IPv6:\r\n```\r\nnet.ipv6.conf.default.disable_ipv6 = 1\r\nnet.ipv6.conf.all.disable_ipv6 = 1\r\nnet.ipv6.conf.lo.disable_ipv6 = 1\r\n## and even the individual interface's parameter\r\n```\r\n\r\nI understand why using `bind()` is more preferable, as it attempts the exact thing that might be asked later on, however one has to distinguish being able to `bind()` IPv6 addresses (server model) from being able to use IPv6 addresses (client model), hence I suggest better not using it as a test, not even a lazy one.\r\n\r\nBy reading around and on the `man ipv6` (http://man7.org/linux/man-pages/man7/ipv6.7.html), it seems like attempting connection to the local IPv6 loopback address `::1` should be a good test for this, but then I cannot really tell if there is a connection that would always work (like port 0/ICMP).\r\n\r\nOn lack of practical solutions for this, then one could just avoid probing and fail with the OS-level error when something which is not supported is being attempted.",
	"user": {
		"login": "gdm85",
		"id": 7117866,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-28T16:31:58Z",
	"updated_at": "2016-08-28T16:31:58Z"
}
