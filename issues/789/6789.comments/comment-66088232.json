{
	"id": 66088232,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eHere is a smaller example:\n\nmwhudson@narsil:mwhudson$ cd $GOPATH/src/mwhudson\nmwhudson@narsil:mwhudson$ cat hashfun/hashfun.go\npackage hashfun\n\n// this type must not be exported\n// it must also be complex enough to get a $hash function generated\ntype unexported struct {\n\ta int\n\tb bool\n}\n\n// now embed this type in a struct that is exported\ntype Struct struct {\n\tunexported\n}\nmwhudson@narsil:mwhudson$ cat wtf/wtf_test.go\npackage wtf\n\nimport (\n\t\"mwhudson/hashfun\"\n\t\"testing\"\n)\n\ntype l hashfun.Struct\n\nfunc TestAll(t *testing.T) {\n}\nmwhudson@narsil:mwhudson$ go test -compiler gccgo mwhudson/wtf\n# testmain\n/tmp/go-build219194897/mwhudson/wtf/_test/mwhudson/libwtf.a(wtf.o): In function\n`wtf.l$hash':\n/home/mwhudson/goplay/src/mwhudson/wtf/wtf_test.go:11: undefined reference to\n`mwhudson_hashfun.unexported$hash'\ncollect2: error: ld returned 1 exit status\nFAIL\tmwhudson/wtf [build failed]\n\nIt seems that the hash function for an unexported type is inconsistently named\n(s/unexported/Exported/ and it works).  Bit confused as to why compiling wtf_test.go\nneeds to know this name, but don't know how this is supposed to work.\u003c/pre\u003e",
	"user": {
		"login": "mwhudson",
		"id": 672022,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-11-20T02:15:34Z",
	"updated_at": "2014-12-08T10:37:45Z"
}
