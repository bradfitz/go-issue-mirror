{
	"id": 66062021,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eWe should probably clarify the meaning of ideal constants in the spec before. Depending\non the choice, there will be natural compiler representations of these:\n\n1. \"A numeric constant represent arbitrary precision integers. A conforming compiler may\nuse rounded representations for non-integral constants. The chosen representation must\nat least represent exactly binary floating-point values with twice the bit count of\nmachine types.\"\n\nIn 1., I suppose the current implementation is conformant. It uses binary\nfloating-point, with multi-precision mantissa, and rounds a/b at 128 bits. With this\nspec, the result of \"0.1 + 0.2 == 0.3\" is undefined, and \"0.1 * 10 == 1\" is allowed to\nbe always false. What does the current spec says about (1.0e999 - (1.0e999-1)) ? \n\n2. \"A numeric constant represent arbitrary precision integers and decimal numbers. It\nmust exactly represent floating-point literals, however a conformant compiler may choose\nto round the results of division of such constants\".\n\nIn 2., the natural representation would be a multiprecision mantissa and a base 10\nexponent in a reasonable range. Then \"0.1 + 0.2 == 0.3\" would be somewhat guaranteed to\nbe true, but \"(1.0 / 49.0) * 49.0\" is not guaranteed.\n\n3. \"A numeric constant represent exactly arbitrary precision integers, floating-point\nliterals as well as the result of operations between them.\"\n\nIn 3. the appropriate representation would probably be rational numbers, something like\nstruct Mprat { Mpint numerator, denominator; };\n\nI think 3 is too much. 2 is reasonable but would require quite many changes to\ncompilers, and 1 is reasonable if the spec is clarified.\u003c/pre\u003e",
	"user": {
		"login": "remyoudompheng",
		"id": 175246,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-01-26T19:13:10Z",
	"updated_at": "2014-12-08T10:14:48Z"
}
