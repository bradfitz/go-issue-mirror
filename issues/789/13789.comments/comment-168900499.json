{
	"id": 168900499,
	"body": "I thought I had a nice simple convincing explanation for this, then I made the mistake of doing more tests. Now I have no idea what is going on and what Bash is doing, and unfortunately I can't reproduce this under `strace` so I can't tell what is really happening.\r\n\r\nThe trigger condition for this seems to be testcshared/test.bash running and not having done the `$(go env GOROOT)` before the main test driver process exits. Introducing an artificial sleep before that point makes it fail reliably (the sleep can be in `cleanup()` or earlier in the main body). It doesn't have to be `go env` running here specifically; I've substituted running a C program that simply prints out a hardcoded path and the same failure happens. Only the first `$(...)` is affected; additional ones give the correct results.\r\n\r\nIn the current setup of testcshared/test.bash, the spurious `ok` actually comes from the `echo \"ok\"` at the end of the script that is used to mark success. You can verify this by changing the echo to something else and having the something else show up as the spurious output. However, if I change the plain echo (which invokes the bash builtin echo) to eg `/bin/echo`, I once got recycled output from elsewhere entirely, in my case from bits of testcarchive's failure output. I don't seem to be able to reproduce this now; instead `/bin/echo` just makes everything work.\r\n\r\n(If the output was always from within testcshared/test.bash, I could convince myself that Bash was just incorrectly recycling IO buffers under some weird situation. However, it at least once seemed to be getting IO data from a completely different process and context through some crazy method. ~~Or `go env GOROOT` is, I suppose; I can't tell one way or another without reliable strace results, and~~ this stubbornly refuses to reproduce under strace.)\r\n\r\nDoing a great many changes to testcshared/test.bash perturb this issue into vanishing. Producing redirected output early on in the script seems to. Adding a `trap \"\" SIGHUP` to the start of `cleanup()` also seemed to make things go away (at one point I was operating under the theory that `go tool dist test` exiting was causing the lingering test.bash to get a SIGHUP while it was already in `cleanup()`, confusing Bash).\r\n\r\nThe whole situation worries me, but I don't know if there's anything more that can be done besides hardening the scripts against crazy input and making sure that all running test processes stop before the main process exits. (I suspect that the Bash people are not going to be interested in looking at this and trying to figure out what's going on.)",
	"user": {
		"login": "siebenmann",
		"id": 865382,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-05T05:15:14Z",
	"updated_at": "2016-01-05T12:53:11Z"
}
