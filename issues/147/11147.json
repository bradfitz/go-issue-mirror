{
	"id": 87060659,
	"number": 11147,
	"state": "closed",
	"title": "x/sys/windows: FormatMessage can't accept a DLL handle on 64-bit systems",
	"body": "1. What version of Go are you using (go version)?\r\ngo1.3.3 windows/amd64\r\n\r\n2. What operating system and processor architecture are you using?\r\nWindows x86-64\r\n\r\n3. What did you do?\r\nTry to call syscall.FormatMessage with a DLL handle.\r\n\r\n```\r\nvar flags uint32 = syscall.FORMAT_MESSAGE_ARGUMENT_ARRAY | syscall.FORMAT_MESSAGE_IGNORE_INSERTS | syscall.FORMAT_MESSAGE_FROM_HMODULE\r\nlibpdhDll := syscall.MustLoadDLL(\"pdh.dll\")\r\nbuffer := make([]uint16, 300)\r\n\r\n// Have to cast Handle, which is a uintptr, to a uint32 due to the signature of FormatMessage\r\nsyscall.FormatMessage(flags, uint32(libpdhDll.Handle), \u003csome error number\u003e, 0, buffer, nil)\r\n``` \r\n\r\n4. What did you expect to see?\r\nFormatMessage should accept a syscall.Handle or a uintptr so the cast to uint32 doesn't have to happen.\r\n\r\n5.What did you see instead?\r\nFormatMessage returns an error because the truncated pointer doesn't point to a DLL.",
	"user": {
		"login": "alanctgardner",
		"id": 3100188,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "OS-Windows"
		}
	],
	"comments": 8,
	"closed_at": "2015-07-21T02:26:43Z",
	"created_at": "2015-06-10T18:24:31Z",
	"updated_at": "2016-07-20T14:27:23Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
