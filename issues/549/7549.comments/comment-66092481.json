{
	"id": 66092481,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003ethere's a problem with fixing false retention for slices.  To fix the problem I need to\ncheck if the capacity of a slice is 0 or not.  There are slices on the stack that are\nlive, but the capacity is junk.  There is probably some optimization that avoids storing\nthe capacity to the stack if it isn't going to be used.  It happens in code like the\nfollowing:\n\nfunc f(n int) int {\n        s := make([]int, n)\n        runtime.GC()\n        return s[0]\n}\n\nSince s.cap isn't ever used, it is never saved to (the local variable storage for) s\nupon the return from make.  Inside the gc call s doesn't have a valid cap.\n\nSo we either fix this bug, or allow false retention from slices.  For 1.3, I'm leaning\ntowards the latter, compiler changes at this point scare me.  Unless someone sees that\nit is easy to do.  I'll prepare my changelist with the slice stuff disabled for now.\u003c/pre\u003e",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-15T06:27:27Z",
	"updated_at": "2014-12-08T10:41:57Z"
}
