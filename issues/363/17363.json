{
	"id": 181476132,
	"number": 17363,
	"state": "closed",
	"title": "x/oauth2:  TestExchangeRequest_JSONResponse_Expiry is broken on Go 1.8",
	"body": "Using `3c3a985cb79f52a3190fbc056984415ca6763d01` of `oauth2`.\r\n\r\nA change introduced in https://golang.org/cl/18692 expanded upon the errors returned by the `json` package to be more informative about where the error occurred.\r\n\r\nThis breaks the oauth2 package, which does direct comparison on specific errors, which I find to be fairly brittle. In fact, when Go 1.5 was released, this code broke, @bradfitz fixed it in golang/oauth2@c58fcf0ffc1c772aa2e1ee4894bc19f2649263b2, but I that doesn't solve the deeper issue that the test is just brittle. We could adjust it again for Go1.8, but it seems to be just a bad test.\r\n\r\nDoes anyone object to just removing the exact errors and simply checking whether the test passes or fails?\r\n\r\nFailure:\r\n```\r\n$ go.dev test golang.org/x/oauth2\r\n--- FAIL: TestExchangeRequest_JSONResponse_Expiry (0.01s)\r\n\toauth2_test.go:249: Error = json: cannot unmarshal bool into Go struct field tokenJSON.expires of type json.Number; want json: cannot unmarshal bool into Go value of type json.Number\r\n\toauth2_test.go:249: Error = json: cannot unmarshal object into Go struct field tokenJSON.expires of type json.Number; want json: cannot unmarshal object into Go value of type json.Number\r\nFAIL\r\nFAIL\tgolang.org/x/oauth2\t0.027s\r\n```\r\n\r\n/cc @bradfitz @rakyll @adg \r\n\r\nRelated to #11811",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-10-07T18:00:11Z",
	"created_at": "2016-10-06T17:23:27Z",
	"updated_at": "2016-10-07T18:00:12Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
