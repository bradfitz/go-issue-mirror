{
	"id": 145765602,
	"number": 15110,
	"state": "open",
	"title": "runtime: 40us pause in file-backed serve loops",
	"body": "Summary: An idiomatic serve loop that reads from a file (as opposed to a socket) pauses for 40us before the request goroutine starts. We isolated this from a FUSE filesystem into a small benchmark.\r\n\r\nThe idiomatic serve loop (Cf. [src/net/http/server.go Serve](https://golang.org/src/net/http/server.go#L2116) and [bazil.org/fuse/fs/serve.go Serve](https://github.com/bazil/fuse/blob/master/fs/serve.go#L383)) processes a request on a new goroutine:\r\n```\r\nfor {\r\n  req := accept()\r\n  go process(req)\r\n}\r\n```\r\nWe compared it against a no-concurrency serial server:\r\n```\r\nfor { \r\n  req := accept()\r\n  process(req)\r\n}\r\n```\r\n\r\nWe measured the overhead (from the end of accept() to beginning of process()). Median of 100k runs for each strategy:\r\nSerial: 441ns\r\nGoroutine: 38us\r\n\r\nFor context, we've found the rest of our logic can run in ~10us, so the go scheduling overhead would be 400%\r\n\r\nWe tried a channel:\r\n```\r\ngo func() {\r\n  for {\r\n    process(\u003c-ch)\r\n  }\r\n}\r\nfor {\r\n  req := accept()\r\n  ch \u003c- req\r\n}\r\n```\r\n\r\nWhich is comparable to a Goroutine:\r\nSerial: 441ns\r\nGoroutine: 38us\r\nChannel: 40us\r\n\r\nMost servers read/accept from a socket, which the Go runtime implements using polling via the netpoller. FUSE reads from a file, which uses a blocking syscall. AIUI, the Go runtime will let the thread make the syscall, and then another thread of the runtime will notice it's blocked after ~20 us, and then reschedule work. These numbers seem similar which makes me think they're related.\r\n\r\nOur workaround: service one process (both accept and process) on one goroutine and hand off the next request to a new goroutine. Strategy \"handoff\" looks like:\r\n```\r\nfunc serve() {\r\n  req := accept()\r\n  go serve()\r\n  process(req)\r\n}\r\n```\r\nSerial: 441ns\r\nGoroutine: 38us\r\nChannel: 40us\r\nHandoff: 671ns\r\n\r\nI'm seeing this on Go version 1.6 darwin/amd64\r\n\r\nIs this a known issue? Does it affect other platforms? Is our rewriting of the serve loop a known workaround?\r\n\r\nOur full benchmark: http://play.golang.org/p/wc6hPnN778\r\n\r\nBuild it into a binary fileping. To run:\r\nrm a b; mkfifo a; mkfifo b; ./bin/fileping -print -strategy handoff \u003c b \u003e a\u0026  ./bin/fileping -strategy serial \u003c a \u003e b\u0026  echo 000000000000000 \u003e a\r\n\r\n(Modify the -strategy argument in the first command to try different strategies)",
	"user": {
		"login": "dbentley",
		"id": 159980,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"comments": 3,
	"created_at": "2016-04-04T18:24:29Z",
	"updated_at": "2016-04-04T21:40:37Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
