{
	"id": 51280707,
	"number": 3501,
	"state": "closed",
	"title": "cmd/8c: code generation bug",
	"body": "\u003cpre\u003e\u0026gt;What steps will reproduce the problem?\n12929:512073e3b7f2 tip Linux/386\nApply patch \u003ca href=\"http://golang.org/cl/5986054/\"\u003ehttp://golang.org/cl/5986054/\u003c/a\u003e (patchset 6)\n$cd pkg/runtime \u0026amp;\u0026amp; GOARCH=386 go test -v -run=Parfor2\n\n\u0026gt;What is the expected output?\nThe test passes.\n\nWhat do you see instead?\n--- FAIL: TestParfor2 (0.00 seconds)\n\tparfor_test.go:52: Wrong element 2: 2\nFAIL\n\n\nHere is the problematic code:\n                getthread(desc, i)-\u0026gt;pos = (uint64)begin | (((uint64)end)\u0026lt;\u0026lt;32);\n 8056e5e:       mov    %esi,0x20(%esp)\n 8056e62:       xor    %ecx,%ecx\n 8056e64:       xor    %eax,%eax\n 8056e66:       mov    %edi,%edx\n 8056e68:       mov    %edi,0x24(%esp)\n 8056e6c:       xor    %ebx,%ebx\n 8056e6e:       or     %eax,%edx\n 8056e70:       or     %esi,%ebx\n 8056e72:       mov    0x34(%esp),%ecx\n 8056e76:       mov    %ecx,(%esp)\n 8056e79:       mov    %ebp,0x2c(%esp)\n 8056e7d:       mov    %ebp,0x4(%esp)\n// at this point %edx,%ebx represents the correctly calculated uint64 expression\n 8056e81:       call   8056d3c \u0026lt;getthread\u0026gt;\n// since these are scratch registers, the call clobbers them\n// random garbage is stored to the pos\n 8056e86:       mov    %edx,(%eax)\n 8056e88:       mov    %ebx,0x4(%eax)\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2014-12-08T10:18:19Z",
	"created_at": "2012-04-09T10:23:38Z",
	"updated_at": "2016-06-24T22:17:35Z"
}
