{
	"id": 112110436,
	"number": 12989,
	"state": "closed",
	"title": "Goroutine leak detector",
	"body": "In my experience it could be very valuable to have a goroutine \"leak\" detection similar to the race detector we already have. It should be able to detect goroutines that will never we runnable again, and therefore is \"leaked\".\r\n\r\nI have created a [playground example](http://play.golang.org/p/g0L28Rove3) of the things I could imagine would be detectable, which are blocking selects, sync.Mutex, sync.WaitGroup, sync.Cond, where no other goroutine holds a reference to the item needing to unblock it. \r\n\r\nThe examples are of course very simple, but I don't see why it shouldn't apply in a much bigger scope.\r\n\r\nI imagine this could be used in a similar fashion as the race detector, so it is an option that can be used for testing, problem identification, etc.",
	"user": {
		"login": "klauspost",
		"id": 5663952,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2015-10-19T10:10:06Z",
	"created_at": "2015-10-19T09:46:39Z",
	"updated_at": "2015-10-19T14:55:20Z"
}
