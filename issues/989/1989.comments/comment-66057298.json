{
	"id": 66057298,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eHi,\n\nI'm not sure if the xml library supports overriding the name of the member field an\nelement is assigned too via it's tag. If it does, then this is a simpler test case which\nreproduces the issue.\n\n\n--- a/src/pkg/xml/read_test.go  Thu Oct 06 07:22:48 2011 +0100\n+++ b/src/pkg/xml/read_test.go  Sat Oct 08 15:53:41 2011 +1100\n@@ -369,3 +369,30 @@\n                Bool: true,\n        },\n }\n+\n+type TestNamed1 struct {\n+       A string `xml:\"B\"`\n+       B string `xml:\"A\"`\n+}\n+\n+const testNamed1String = `\n+\u0026lt;?xml version=\"1.0\" charset=\"utf-8\"?\u0026gt;\n+\u0026lt;TestNamed1\u0026gt;\n+  \u0026lt;A\u0026gt;b\u0026lt;/A\u0026gt;\n+  \u0026lt;B\u0026gt;a\u0026lt;/B\u0026gt;\n+\u0026lt;/TestNamed1\u0026gt;\n+`\n+\n+func TestUnmarshalNamed(t *testing.T) {\n+       var actual TestNamed1\n+       var expected = TestNamed1{\n+               A: \"a\",\n+               B: \"b\",\n+       }\n+       if err := Unmarshal(StringReader(testNamed1String), \u0026actual); err != nil {\n+                t.Fatalf(\"Unmarshal: %s\", err)\n+        }\n+        if !reflect.DeepEqual(actual, expected) {\n+                t.Fatalf(\"have %#v\\nwant %#v\", actual, expected)\n+        }\n+}\u003c/pre\u003e",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-10-08T04:55:49Z",
	"updated_at": "2014-12-22T05:56:44Z"
}
