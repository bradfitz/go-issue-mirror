{
	"id": 241603788,
	"body": "I've seen this recently in some of my applications with go1.6.x and go1.7—but with large slices and large channels (both with pointers) instead of large pointerless maps.\r\n\r\nI have a reproducer for this. Using go1.6.3 and go1.7 with a live heap of around 1GB, it can show mutator unavailability in excess of a second (in \"slice-livepointer\" mode). It can show mutator unavailability of tens of milliseconds with a large pointer-free map—after churning the map for several minutes to simulate what I suspect are @cespare 's program's operation conditions.\r\n\r\nApplying https://golang.org/cl/23540 PS3 to go1.7 brings the pauses for all test modes are down to only a few milliseconds.\r\n\r\n---\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"flag\"\r\n\t\"log\"\r\n\t\"os\"\r\n\t\"os/signal\"\r\n\t\"runtime/trace\"\r\n\t\"time\"\r\n)\r\n\r\nconst (\r\n\tballastBytes      = 1000 \u003c\u003c 20\r\n\ttickInterval      = 1 * time.Millisecond\r\n\tdesiredGCInterval = 1 * time.Second\r\n\tworkers           = 10\r\n\ttestDuration      = 10 * time.Second\r\n\r\n\tptrBytes = 8 // 8 bytes per pointer on amd64\r\n)\r\n\r\nvar (\r\n\tballast interface{}\r\n\tsink    = make([]interface{}, workers)\r\n)\r\n\r\n// makeBallast controls which GC pause experiment is active.\r\nvar makeBallast func() interface{} = makeMapNopointer\r\n\r\n// makeSliceNopointer creates a large pointer-free slice.\r\n//\r\n// In go1.6.3 and go1.7, this has no measured effect on mutator availability.\r\nfunc makeSliceNopointer() interface{} { return make([]uintptr, ballastBytes/ptrBytes) }\r\n\r\n// makeSlicePointer creates a large slice of nil pointers.\r\n//\r\n// In go1.6.3 and go1.7, this leads to long periods of mutator unavailability\r\n// (hundreds of milliseconds).\r\nfunc makeSlicePointer() interface{} { return make([]*uintptr, ballastBytes/ptrBytes) }\r\n\r\n// makeSliceLivePointer creates a large slice containing pointers to many\r\n// pieces of live memory.\r\n//\r\n// In go1.6.3 and go1.7, this leads to long periods of mutator unavailability\r\n// (around a second).\r\nfunc makeSliceLivePointer() interface{} {\r\n\tb := make([]*uintptr, ballastBytes/ptrBytes/2)\r\n\tfor i := range b {\r\n\t\tb[i] = new(uintptr)\r\n\t}\r\n\treturn b\r\n}\r\n\r\n// makeChanPointer creates a large channel of nil pointers.\r\n//\r\n// In go1.6.3 and go1.7, this leads to long periods of mutator unavailability\r\n// (hundreds of milliseconds).\r\nfunc makeChanPointer() interface{} { return make(chan *uintptr, ballastBytes/ptrBytes) }\r\n\r\n// makeChanPointer creates a large channel of nil pointers.\r\n//\r\n// In go1.6.3 and go1.7, this leads to long periods of mutator unavailability\r\n// (around a second).\r\nfunc makeChanLivePointer() interface{} {\r\n\tc := make(chan *uintptr, ballastBytes/ptrBytes/2)\r\n\tfor i := 0; i \u003c cap(c); i++ {\r\n\t\tc \u003c- new(uintptr)\r\n\t}\r\n\treturn c\r\n}\r\n\r\n// makeMapNopointer creates a large map with non-pointer keys and values.\r\n//\r\n// In go1.6.3 and go1.7, this leads to long periods of mutator unavailability\r\n// (tens of milliseconds).\r\n//\r\n// Populating and churning the map may take a few minutes.\r\nfunc makeMapNopointer() interface{} {\r\n\tconst (\r\n\t\t// mapMemoryInefficiencyEstimate estimates how many bytes of memory\r\n\t\t// does a map require to store one additional byte of key+value\r\n\t\tmapMemoryInefficiencyEstimate = 2\r\n\r\n\t\tkvsize     = 4\r\n\t\tmapsize    = (ballastBytes / ptrBytes) / kvsize / mapMemoryInefficiencyEstimate\r\n\t\tchurnTimes = 30\r\n\t)\r\n\r\n\tb := make(map[uintptr][kvsize - 1]uintptr)\r\n\t// the key size and value size must both be below 128 bytes:\r\n\t// https://github.com/golang/go/blob/go1.7/src/runtime/hashmap.go#L70-L75\r\n\r\n\t// populate and churn the map to grow (https://golang.org/issue/16070) the\r\n\t// overflow bucket list:\r\n\t// https://github.com/golang/go/blob/go1.7/src/runtime/hashmap.go#L117-L126\r\n\tfor i := 0; i \u003c mapsize*(1+churnTimes); i++ {\r\n\t\tb[uintptr(i)] = [kvsize - 1]uintptr{}\r\n\t\tdelete(b, uintptr(i-mapsize))\r\n\t}\r\n\treturn b\r\n}\r\n\r\nfunc main() {\r\n\ttname := flag.String(\"trace\", \"\", \"Execution trace file name\")\r\n\texp := flag.String(\"experiment\", \"\",\r\n\t\t\"Name of experiment (slice-nopointer, slice-pointer, slice-livepointer, map-nopointer, chan-pointer, chan-livepointer)\")\r\n\tflag.Parse()\r\n\r\n\tif *tname == \"\" {\r\n\t\tlog.Fatalf(\"The -trace flag must be used to set the execution trace file destination\")\r\n\t}\r\n\r\n\tswitch *exp {\r\n\tcase \"slice-nopointer\":\r\n\t\tmakeBallast = makeSliceNopointer\r\n\tcase \"slice-pointer\":\r\n\t\tmakeBallast = makeSlicePointer\r\n\tcase \"slice-livepointer\":\r\n\t\tmakeBallast = makeSliceLivePointer\r\n\tcase \"map-nopointer\":\r\n\t\tmakeBallast = makeMapNopointer\r\n\tcase \"chan-pointer\":\r\n\t\tmakeBallast = makeChanPointer\r\n\tcase \"chan-livepointer\":\r\n\t\tmakeBallast = makeChanLivePointer\r\n\tcase \"\":\r\n\tdefault:\r\n\t\tlog.Fatalf(\"Unknown -experiment %q\", *exp)\r\n\t}\r\n\r\n\tsigs := make(chan os.Signal, 1)\r\n\tsignal.Notify(sigs, os.Interrupt)\r\n\r\n\ttfile, err := os.Create(*tname)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"trace open: %v\", err)\r\n\t}\r\n\tdefer func() {\r\n\t\terr := tfile.Close()\r\n\t\tif err != nil {\r\n\t\t\tlog.Fatalf(\"trace close: %v\", err)\r\n\t\t}\r\n\t}()\r\n\r\n\terr = trace.Start(tfile)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"trace start: %v\", err)\r\n\t}\r\n\tdefer trace.Stop()\r\n\r\n\tballast = makeBallast()\r\n\r\n\tticker := time.NewTicker(tickInterval)\r\n\tdefer ticker.Stop()\r\n\r\n\tfor i := 0; i \u003c workers; i++ {\r\n\t\tgo work(ticker.C, i)\r\n\t}\r\n\r\n\tselect {\r\n\tcase \u003c-sigs:\r\n\tcase \u003c-time.After(testDuration):\r\n\t}\r\n}\r\n\r\nfunc work(ch \u003c-chan time.Time, i int) {\r\n\tfor t := range ch {\r\n\t\td := time.Since(t)\r\n\t\tif d \u003e 1*time.Millisecond {\r\n\t\t\tlog.Printf(\"long pause: %s\", d)\r\n\t\t}\r\n\r\n\t\tsink[i] = make([]byte, ballastBytes/(desiredGCInterval/tickInterval))\r\n\t}\r\n}\r\n```",
	"user": {
		"login": "rhysh",
		"id": 230685,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-23T01:48:59Z",
	"updated_at": "2016-08-23T01:48:59Z"
}
