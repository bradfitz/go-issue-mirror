{
	"id": 242850298,
	"body": "@cespare — does this look like it reproduces your issue, or does it illustrate a different bug?\r\n\r\n@aclements — this makes garbage collections pause all mutators that allocate memory for nearly the whole duration of the GC. My company has a couple of programs I'm aware of that see their applications pause for ~100ms whenever a GC happens, so for some applications (those with goroutines that allocate, and whose live heaps are concentrated in a few giant allocations), GCs are effectively stop-the-world.\r\n\r\nDo you have recommendations for how to work around this, particularly for applications where breaking the few large allocations into many smaller ones would require significant effort?\r\n\r\nIs there a safe runtime change to address this that could make it into a 1.7.x point release? You seemed skeptical of https://golang.org/cl/23540 for 1.7.\r\n\r\nThanks!\r\n",
	"user": {
		"login": "rhysh",
		"id": 230685,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-26T21:00:09Z",
	"updated_at": "2016-08-26T21:00:09Z"
}
