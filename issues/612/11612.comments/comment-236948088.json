{
	"id": 236948088,
	"body": "For the referenced \"test.go\", 6784 blocks, 55190 vars.\r\nI tried compiling it with 1.7.latest (whatever I got by syncing and building) and tried turning the sparse-phi-assist cutoff up and down (0 = always on, -1 = always off, default = 2,500,000, the cutoff is compared to the product of #blocks and #vars):\r\n\r\n```\r\nfor i in a b c d e f g h i j k l ; do\r\n\u003e GO_SSA_PHI_LOC_CUTOFF=-1 /usr/bin/time $(go tool -n compile) test.go\r\n\u003e done\r\n        0.93 real         1.03 user         0.04 sys\r\n        0.91 real         1.02 user         0.03 sys\r\n        0.92 real         1.01 user         0.04 sys\r\n        0.96 real         1.06 user         0.03 sys\r\n        1.01 real         1.08 user         0.03 sys\r\n        1.04 real         1.12 user         0.04 sys\r\n        0.93 real         1.02 user         0.04 sys\r\n        1.02 real         1.12 user         0.04 sys\r\n        1.04 real         1.10 user         0.05 sys\r\n        0.94 real         1.04 user         0.03 sys\r\n        0.95 real         1.04 user         0.04 sys\r\n        1.08 real         1.14 user         0.04 sys\r\n~/GoogleDrive/work/tmp/b11612$ for i in a b c d e f g h i j k l ; do GO_SSA_PHI_LOC_CUTOFF=0 /usr/bin/time $(go tool -n compile) test.go; done\r\n        0.78 real         0.91 user         0.03 sys\r\n        0.88 real         0.96 user         0.04 sys\r\n        0.84 real         0.96 user         0.04 sys\r\n        0.83 real         0.93 user         0.03 sys\r\n        0.84 real         0.95 user         0.03 sys\r\n        0.84 real         0.94 user         0.04 sys\r\n        0.86 real         0.96 user         0.04 sys\r\n        0.82 real         0.91 user         0.04 sys\r\n        0.85 real         0.96 user         0.04 sys\r\n        0.84 real         0.96 user         0.03 sys\r\n        0.86 real         0.94 user         0.04 sys\r\n        0.84 real         0.95 user         0.04 sys\r\n~/GoogleDrive/work/tmp/b11612$ for i in a b c d e f g h i j k l ; do /usr/bin/time $(go tool -n compile) test.go; done\r\n        0.77 real         0.87 user         0.03 sys\r\n        0.89 real         0.97 user         0.04 sys\r\n        0.88 real         0.99 user         0.04 sys\r\n        0.85 real         0.94 user         0.04 sys\r\n        0.82 real         0.92 user         0.03 sys\r\n        0.89 real         0.93 user         0.05 sys\r\n        0.81 real         0.93 user         0.03 sys\r\n        0.81 real         0.93 user         0.04 sys\r\n        0.82 real         0.95 user         0.04 sys\r\n        0.86 real         0.96 user         0.04 sys\r\n        0.85 real         0.94 user         0.03 sys\r\n        0.82 real         0.92 user         0.04 sys\r\n```\r\n\r\nSpace use (with sparse assist):\r\n```\r\n(pprof) top 20\r\n57.21MB of 72.92MB total (78.46%)\r\nShowing top 20 nodes out of 175 (cum \u003e= 1.38MB)\r\n      flat  flat%   sum%        cum   cum%\r\n       6MB  8.23%  8.23%        6MB  8.23%  cmd/compile/internal/gc.Prog\r\n       5MB  6.86% 15.09%        5MB  6.86%  cmd/compile/internal/gc.Nod\r\n    4.50MB  6.17% 21.26%     4.50MB  6.17%  cmd/compile/internal/ssa.(*Func).newValue\r\n    4.11MB  5.64% 26.90%     4.11MB  5.64%  cmd/compile/internal/ssa.(*Func).setHome\r\n    4.02MB  5.51% 32.40%     5.69MB  7.80%  cmd/compile/internal/ssa.(*regAllocState).computeLive\r\n       4MB  5.49% 37.89%        4MB  5.49%  cmd/compile/internal/gc.typ\r\n    3.18MB  4.37% 42.26%     3.18MB  4.37%  cmd/compile/internal/ssa.cse\r\n    2.91MB  3.99% 46.25%     2.91MB  3.99%  cmd/internal/obj.(*LSym).Grow\r\n    2.88MB  3.95% 50.20%     2.88MB  3.95%  cmd/compile/internal/ssa.(*stackAllocState).stackalloc\r\n    2.84MB  3.90% 54.10%     8.53MB 11.70%  cmd/compile/internal/ssa.(*regAllocState).init\r\n    2.76MB  3.79% 57.88%     2.76MB  3.79%  cmd/internal/obj.Linknew\r\n    2.12MB  2.90% 60.78%     2.12MB  2.90%  cmd/compile/internal/ssa.schedule\r\n       2MB  2.74% 63.53%        3MB  4.11%  cmd/compile/internal/ssa.(*SparseTreeMap).Insert\r\n    1.75MB  2.40% 65.92%     3.12MB  4.28%  cmd/compile/internal/ssa.(*stackAllocState).init\r\n    1.71MB  2.35% 68.27%     1.71MB  2.35%  cmd/compile/internal/gc.Naddr\r\n    1.52MB  2.09% 70.36%     1.52MB  2.09%  cmd/compile/internal/ssa.prove\r\n    1.52MB  2.09% 72.45%     1.52MB  2.09%  cmd/compile/internal/gc.livenessepilogue\r\n    1.51MB  2.07% 74.52%     1.51MB  2.07%  cmd/compile/internal/gc.escflows\r\n    1.50MB  2.06% 76.57%     2.50MB  3.43%  cmd/compile/internal/gc.(*state).variable\r\n    1.38MB  1.89% 78.46%     1.38MB  1.89%  cmd/compile/internal/ssa.(*stackAllocState).buildInterferenceGraph\r\n```\r\nWithout sparse assist:\r\n```\r\n~/GoogleDrive/work/tmp/b11612$ GO_SSA_PHI_LOC_CUTOFF=-1 $(go tool -n compile) -memprofile=n.prof test.go \r\n~/GoogleDrive/work/tmp/b11612$ go tool pprof -alloc_space $(go tool -n compile) n.prof\r\nEntering interactive mode (type \"help\" for commands)\r\n(pprof) top 20\r\n64.60MB of 83.13MB total (77.71%)\r\nShowing top 20 nodes out of 200 (cum \u003e= 1.06MB)\r\n      flat  flat%   sum%        cum   cum%\r\n    9.51MB 11.44% 11.44%     9.51MB 11.44%  cmd/compile/internal/ssa.(*Func).newValue\r\n    6.50MB  7.82% 19.26%     6.50MB  7.82%  cmd/compile/internal/gc.Prog\r\n    6.50MB  7.82% 27.08%     6.50MB  7.82%  cmd/compile/internal/gc.Nod\r\n    5.39MB  6.48% 33.56%     5.39MB  6.48%  cmd/compile/internal/ssa.(*Func).setHome\r\n    4.42MB  5.32% 38.88%     4.42MB  5.32%  cmd/compile/internal/ssa.cse\r\n    3.63MB  4.36% 43.24%     3.63MB  4.36%  cmd/compile/internal/ssa.(*regAllocState).computeLive\r\n    3.36MB  4.04% 47.29%     3.36MB  4.04%  cmd/internal/obj.(*LSym).Grow\r\n    3.07MB  3.69% 50.98%     6.69MB  8.05%  cmd/compile/internal/ssa.(*regAllocState).init\r\n    2.76MB  3.32% 54.30%     2.76MB  3.32%  cmd/internal/obj.Linknew\r\n    2.56MB  3.07% 57.37%     2.56MB  3.07%  cmd/compile/internal/gc.Naddr\r\n    2.14MB  2.58% 59.95%     2.14MB  2.58%  cmd/compile/internal/gc.(*Pkg).LookupBytes\r\n    2.14MB  2.58% 62.53%     2.14MB  2.58%  cmd/compile/internal/ssa.(*stackAllocState).stackalloc\r\n       2MB  2.41% 64.94%        2MB  2.41%  cmd/compile/internal/gc.typ\r\n    1.90MB  2.29% 67.22%     1.90MB  2.29%  cmd/compile/internal/ssa.schedule\r\n    1.75MB  2.10% 69.33%     3.12MB  3.76%  cmd/compile/internal/ssa.(*stackAllocState).init\r\n    1.65MB  1.98% 71.31%    12.30MB 14.79%  cmd/compile/internal/ssa.(*regAllocState).regalloc\r\n    1.54MB  1.85% 73.15%     2.04MB  2.45%  cmd/compile/internal/gc.(*state).variable\r\n    1.38MB  1.65% 74.81%     1.38MB  1.65%  cmd/compile/internal/ssa.(*stackAllocState).buildInterferenceGraph\r\n    1.35MB  1.63% 76.44%     1.35MB  1.63%  cmd/compile/internal/ssa.tighten\r\n    1.06MB  1.27% 77.71%     1.06MB  1.27%  cmd/compile/internal/ssa.layout\r\n```\r\n\r\nThere are still some inputs we don't compile as fast as we'd like, or as fast as we once did, and I'd love to have any mistakes in our implementation of the paper's algorithm sorted out, but this particular slow compilation is solved.\r\n",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-02T15:49:38Z",
	"updated_at": "2016-08-02T15:49:38Z"
}
