{
	"id": 235303481,
	"body": "@randall77 The algorithm presented in http://pp.info.uni-karlsruhe.de/uploads/publikationen/braun13cc.pdf removes unnecessary phi functions during construction (as soon as the block is sealed). Since the go implementation delay the phi removal until the whole CFG is build, you end up with a lot of unnecessary phi functions/FwdRef markers. Thus, a possible solution would be to create and optimize phi functions during the construction.\r\n\r\nEven with FwdRef the memory usage looks pretty high.\r\n@rin01 Can you provide some statistics for your input program:\r\n\r\n- number of basic blocks\r\n- number of variables\r\n\r\nIt would also nice to see how the CFG for one line looks like.",
	"user": {
		"login": "UniQP",
		"id": 1321557,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-26T15:24:32Z",
	"updated_at": "2016-07-26T15:24:32Z"
}
