{
	"id": 130725070,
	"body": "@cznic Owicki's paper discusses how you interoperate traced and untraced stuff in a language without dropping down into Unsafe.  It influenced the design of Modula-2+, which influenced the design of Modula-3, then along came Java, and we forgot all that stuff because who needs anything better than JNI?  The rules follow from the needs of the garbage collector and tracing -- traced can contain pointers to untraced, but not vice-versa, because the GC (in most designs) does not include untraced memory in its root set -- untraced memory is treated as a likely source of bugs and is not to be relied on (and decades of experience confirms this), and this is especially true in the usual use case for untraced memory, which is \"interfacing with some other language that doesn't enforce type safety or array bounds\".  It's a perfectly reasonable model for Cgo.\r\n\r\nI can't quite figure out how you end up needing pinning without using unsafe, if that's your eventual goal.  I suspect you'll find yourself wanting to use unsafe to convert pointer-to-foo into a singleton slice of foo, also, but that doesn't create a need for pinning.",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-13T15:12:46Z",
	"updated_at": "2015-08-13T15:12:46Z"
}
