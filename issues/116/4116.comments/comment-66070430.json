{
	"id": 66070430,
	"body": "\u003ca id=\"c9\"\u003e\u003c/a\u003eComment 9:\n\n\u003cpre\u003eThere is new API in Go 1.1. Suppose someone wants to use it in one of\ntheir packages but also arrange for the code to compile under Go\n1.0.x. They can write separate versions of the functionality, one\ntagged with go1.1 and one tagged with !go1.1 (presumably that one\nwould return an error or something like that), the same way we do for\nexisting operating system differences (linux vs darwin), compiler\ndifferences (gccgo vs gc) or context differences (appengine vs not).\n\nI hope this will be the replacement for the version control branch tag\nstuff, which I removed just before Go 1 and really wasn't working\nwell. Compared to that approach, I see two important benefits:\n\n1. There is just one official version of the code. You can make a tar\nfile of source that builds everywhere, for example, without version\ncontrol issues getting mixed in.\n\n2. The version control tags were '\u0026lt;=': marking code as 'r57' meant\nthat the code would not get used for r58, which meant each new\nreleased required more tags. The build tags are (at least as\nenvisioned) '\u0026gt;='. Any release after go1.1 will satisfy the go1.1 tag,\nso that if you need a feature from Go 1.1 but that's all, you tag the\ncode go1.1 and it keeps getting used for Go 1.2, Go 2, and so on.\n\nYou asked earlier about whether there would be calls for 3-level tags\nlike go1.0.4. I think we can say no: we've adopted the convention that\nthose releases are bug fixes only, with zero API differences, so that\nit is trivial to move between them. It is only the +.1 releases that\nadd new API, so those should be the only ones that need adjustments to\nwhat the compiler is asked to build.\n\nRuss\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-11-07T14:34:34Z",
	"updated_at": "2014-12-22T06:18:56Z"
}
