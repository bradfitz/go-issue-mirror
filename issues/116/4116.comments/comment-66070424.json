{
	"id": 66070424,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eBrad and I were discussing this just a day or so ago. Here's my take on why there's\nlittle point on having a build tag for Go 1.1.\n\n(a) it's only relevant to packages that are using Go 1.1 features (e.g. the new \"html\"\npackage)\n(b) if such packages can provide a useful substitute without that new feature then\nthere's no point using it; they may as well just use the substitute for everyone\n(c) given (a) and (b), a go1.1 build tag would only be useful to packages that, say,\noffer an expanded API that would use Go 1.1 features, thus meaning that that package has\na non-uniform API. But then what would programs do that use that package? They can't use\nthose new features without restricting themselves to Go 1.1, at which point the build\ntag doesn't buy them anything.\n\nThe \"Debian problem\" (people stuck on old distros that only give them Go 1.0.x) is not,\nin my opinion, a problem. Such people can still build Go from source. If they are truly\nstuck in a conservative situation where they can't upgrade Go, they probably should not\nbe upgrading Go libraries either.\n\nI've been trying to come up with a worked example of where a go1.1 build tag would\nactually be useful, but can't come up with a scenario that makes sense. Perhaps someone\ncan enlighten me and describe such a scenario.\u003c/pre\u003e",
	"user": {
		"login": "dsymonds",
		"id": 31506,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-11-06T02:38:38Z",
	"updated_at": "2014-12-08T10:21:53Z"
}
