{
	"id": 75073567,
	"number": 10773,
	"state": "closed",
	"title": "os: Make os.Rename act more similar to *NIX on Windows",
	"body": "I was toying with atomic file operations, and noticed os.Rename for the Microsoft implementation uses MoveFileW, yet MoveFileExW exists which accepts a flags argument. os.Rename on everything *not* Windows (and plan9) is \"atomic,\" meaning that it replaces the destination if it exists, with no opportunity to crash in user space. In Microsoft, if the destination exists, the os.Rename operation fails and the programmer is expected to be able to remove and replace the destination themselves without any way to prevent race conditions or interruptions halfway through. \r\n\r\nThis will confuse any programmers on Microsoft, performing needless existence checks when calling os.Rename on non-Microsoft, and any programmers not on Microsoft will be rather miffed at being unable to do safe file renames on Microsoft.\r\n\r\nThe non-Microsoft behavior can be achieved in Microsoft using MoveFileExW (I think) by passing certain flags to the procedure. So I recommend that the Go language adopt MoveFileExW as the system call for Microsoft, when using os.Rename, so that os.Rename behaves the same on Microsoft, and off Microsoft.\r\n\r\nIt should be about a 2 line patch, but I have no way to test whether it works correctly or not. Just throwing it out there.\r\n\r\nusing go 1.5 btw, from a recent git pull\r\ngo version devel +e8fc93e Fri May 8 04:23:43 2015 +0000 linux/amd64",
	"user": {
		"login": "cyisfor",
		"id": 1278811,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2015-05-11T03:56:31Z",
	"created_at": "2015-05-11T03:49:46Z",
	"updated_at": "2016-06-25T02:08:05Z"
}
