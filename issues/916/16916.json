{
	"id": 173782195,
	"number": 16916,
	"state": "closed",
	"title": "FAQ is outdated or not clear on sizes of floating point numbers",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\nusing `go version go1.7 linux/amd64`\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n\r\n### What did you do?\r\nhttps://play.golang.org/p/CF7xy52g2B\r\n\r\n\r\n### What did you expect to see?\r\n\r\nfloat32   4: 40000000\r\nfloat32   4: 40c90fdb\r\ncomplex64   8: 4000000040400000\r\n\r\n(https://play.golang.org/p/OvRuleLGR5)\r\n\r\nhttps://golang.org/doc/faq#q_int_sizes states\r\n\r\n On the other hand, floating-point scalars and complex numbers are always sized: float32, complex64, \r\n etc., because programmers should be aware of precision when using floating-point numbers. The \r\n default size of a floating-point constant is float64. \r\n\r\n### What did you see instead?\r\n\r\nfloat64   8: 4000000000000000\r\nfloat64   8: 401921fb54442d18\r\ncomplex128  16: 40000000000000004008000000000000\r\n\r\n\r\n\r\n",
	"user": {
		"login": "lernisto",
		"id": 9610030,
		"type": "User",
		"site_admin": false
	},
	"comments": 10,
	"closed_at": "2016-08-29T14:45:28Z",
	"created_at": "2016-08-29T14:04:38Z",
	"updated_at": "2016-08-30T12:00:26Z"
}
