{
	"id": 66062558,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eI believe that we should not permit a named struct type to have a field and method with\nthe same name.  It is not a useful thing to do, as there is no way to use the field. \n(It might be possible to use the method by assigning the value to an interface, although\nI think this currently fails with 6g.)  The alternative would be to only give an error\nif the field/method is actually accessed, but I don't see any advantage to postponing\nthe error to that point.\n\nCurrently gccgo gives an error if a field and method have the same name, so it's not\nlike lots of programs are doing this.\n\nOf course it's OK to have ambiguity between fields and methods when using embedding. \nI'm only talking about the case where the method is on defined directly on the struct\ntype, as in\n\ntype T struct { F int }\nfunc (t T) F() { }\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-02-08T06:13:36Z",
	"updated_at": "2014-12-08T10:15:18Z"
}
