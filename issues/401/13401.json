{
	"id": 118907187,
	"number": 13401,
	"state": "closed",
	"title": "crypto/tls: internal error when connecting to site with abnormaly large certificate",
	"body": "`https://10000-sans.badssl.com` is a test site that serves a certificate with 10,000 SAN records for the purpose of breaking TLS clients. Go is unable to open a connection to this site, and breaks with the error:\r\n\r\n```bash\r\n$ go run https_break.go \r\npanic: Get https://10000-sans.badssl.com: local error: internal error\r\n\r\ngoroutine 1 [running]:\r\nmain.main()\r\n\t/home/ulfr/git/go-toybox/https_break.go:8 +0x6e\r\n\r\ngoroutine 17 [syscall, locked to thread]:\r\nruntime.goexit()\r\n\t/usr/lib/go/src/runtime/asm_amd64.s:1696 +0x1\r\nexit status 2\r\n```\r\n\r\nSource code is\r\n```go\r\npackage main\r\n\r\nimport \"net/http\"\r\n\r\nfunc main() {\r\n\t_, err := http.Get(\"https://10000-sans.badssl.com\")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n```\r\n\r\nI would like for this to work, but I can understand Go refusing to open a connection with such an unusual certificate. If so, maybe the failure should be enforced by a policy and the error message explicit?",
	"user": {
		"login": "jvehent",
		"id": 415617,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "agl",
		"id": 21203,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2016-03-11T00:16:35Z",
	"created_at": "2015-11-25T19:31:23Z",
	"updated_at": "2016-03-11T00:16:35Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
