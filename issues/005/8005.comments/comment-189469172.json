{
	"id": 189469172,
	"body": "\u003e Right--a runtime check, not just a compiler check. To my mind, that makes this a lot more like the race detector than a souped-up, compiler-enforced vet.\r\n\r\nTo me it's more like the panic you get when trying to compare two incomparable types that are in interfaces. The compiler can catch *almost* all cases statically,  and we could make it possible to guard against the panic by providing a CanCopy method along the lines of CanInterface. Not that reflect-based code should be copying these kind of structs anyway - if it's happening I really want to know about it! \r\n\r\nI don't mind much about the \"must go first\" thing. It only matters if you're really needing to save space and it's just the same with any zero-length type. Since it doesn't affect correctness, to my mind it's just like any other optimisation tip - nice to know but not essential.\r\n\r\nI'm not keen on the method suggestion. It's perfectly OK to embed a pointer to a type in a value type but that doesn't mean that the outer type can't be copied, even though it would inherit the NoCopy method.\r\n\r\nFor example, it's fine to copy values of the following type:\r\n\r\n    type X struct {\r\n        *sync.Mutex\r\n    }\r\n\r\nYou could try to define different rules for inheritance of NoCopy methods but... no. :-)\r\n\r\n",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-26T20:25:42Z",
	"updated_at": "2016-02-26T20:25:42Z"
}
