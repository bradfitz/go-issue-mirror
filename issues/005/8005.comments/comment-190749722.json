{
	"id": 190749722,
	"body": "Rob said:\r\n\u003e you can usually construct the API so that it won't be copied by accident.\r\n\r\nWithout hiding representation details and exposing only interfaces containing pointers, you cannot prevent these accidents.  Buffer and Mutex are the textbook examples of the problem, but any type that has complex internal aliasing and is routinely used as a field of another struct type is at risk.  Users define such types all the time, and indeed we encourage them to do so.  The difference between values, variables, and pointers of a given type is one of the most subtle aspects of Go.  (It confused even Linus Torvalds, as I recall.)\r\n\r\nThe speed of vet is a red herring.  The cost of loading and type-checking a program is much greater than the cost of simple checking passes over the AST.\r\n\r\nThe struct field tag seems like a good compromise since it needs no standard library changes and no compiler changes (at least until we have experience), has no runtime cost, is relatively self-explanatory, and persists in export data.  It is obviously restricted to struct types, but in practice that's where the problem is since unexported struct fields are Go's main means of data encapsulation; for all other types, you know what you've got.\r\n",
	"user": {
		"login": "alandonovan",
		"id": 8433140,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-01T14:46:04Z",
	"updated_at": "2016-03-01T14:46:44Z"
}
