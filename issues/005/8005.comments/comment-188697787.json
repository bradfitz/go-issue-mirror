{
	"id": 188697787,
	"body": "govet is fine, but I wonder if a stronger guarantee, always checked by the compiler, might be better.\r\n\r\nHow about this?\r\n\r\nThe compiler provides a predefined zero-size type, say \"nocopy\" or \"static\".\r\nNo value with this type may be copied.\r\n\r\nTo mark a structure so that it can't be copied, just embed\r\nit in the struct:\r\n\r\n    type Mutex struct {\r\n        nocopy\r\n        state int32\r\n        sema  uint32\r\n    }\r\n\r\nNote that there's no way to initialize a nocopy\r\nmember because we can't copy a value into it, so\r\nthis means that such structs must be initialised with a composite literal\r\nwith keyed fields so that the nocopy member can be omitted,\r\nbut keyed literals are recommended practice anyway\r\nso this shouldn't be a great obstacle.\r\n",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-25T09:55:02Z",
	"updated_at": "2016-02-25T10:00:27Z"
}
