{
	"id": 188922250,
	"body": "\u003e I still don't quite understand the case for this check being in the compiler instead of vet or for a language change. There are lots of unsafe things one can do with the language, and vet, the race detector, and other tools help on that front. I don't see why this is different.\r\n\r\nI agree that there are unsafe things that one can do with the language, but they're almost all concurrency-related and hard for the compiler to check. The things that go vet checks are mostly things that are unwise rather than actually unsafe.\r\n\r\nI think there's a definite advantage to having a single, definitive and always-checked way to say that a given struct must not be copied. It's a check that can be made easily, and if the runtime is aware of it, the check can reach places that it's hard for go vet to check. For example, go vet doesn't print an error on [this program](http://play.golang.org/p/aXh1qqB7dO), even though it copies a mutex. With compiler and runtime support, the reflect package could easily make that check at runtime.\r\n\r\nI've used minux's anonymous empty type trick before and it's useful, but for such a core language thing I'm afraid it looks quite ugly to me.",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-25T18:38:06Z",
	"updated_at": "2016-02-25T18:38:06Z"
}
