{
	"id": 73546160,
	"body": "Two reasons.  The first is that unsafe.Sizeof matches unsafe.Offsetof and unsafe.Alignof, and unsafe.Offsetof in particular can't take a type parameter, since it has to take a selector expression.  The second is that unsafe.Sizeof looks and acts like a function call (except that the result is a constant), and function calls in Go can not take type arguments.  The predeclared functions make and new are exceptions and as they are predeclared they look clearly distinct from other function calls.  Adding an exception for unsafe.Sizeof to take a type parameter means adding another exception that people have to learn, in this case for no useful purpose.\r\n\r\nYou say you are after the size of the type, not the instance, but that is a distinction without a difference.  I could just as easily reply by saying that types have no sizes; only instances of types have sizes.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-09T17:02:46Z",
	"updated_at": "2015-02-09T17:02:46Z"
}
