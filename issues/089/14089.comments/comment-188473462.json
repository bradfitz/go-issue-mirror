{
	"id": 188473462,
	"body": "I can report on this issue to, since I am working on a solution for 3-4 days now.\r\n\r\n```go\r\n// some DownloadFileFunction\r\nfunc download() (*bytes.Buffer, err){\r\nresponse, err := defaultHttpClient.Do(req)\r\n//..\r\ndefer response.Body.Close() //yadayada\r\nbuf := bytes.NewBuffer(make([]byte, 32 * 1024)) // io.Copy makes this anyway if I pass in an empty one, I also tried it with size 0\r\n_, err = io.Copy(buf, response.Body)\r\nreturn buf, err // buf is obviously *bytes.Buffer\r\n}\r\n\r\nfunc  Run() {\r\n\tgo func() {\r\n\t\tfor {\r\n\t\t\tselect {\r\n\t\t\tcase job := \u003c-w.Job:\r\n                            buf, err := download(job.URL.String())\r\n                            job.dataChannel \u003c- buf.Bytes()\r\n\t\t\t}\r\n\t\t}\r\n        }\r\n}\r\n\r\nfunc httpHandler(....){\r\n// fill jobQueue with jobs to be consumed by Worker goroutines\r\ndataChan, errChan = AddDownloadJob(dlJobCollector, u.String())\r\n// wait for error\r\nerr = \u003c-errChan\r\n// no error? receive on the dataChannel\r\ndata = \u003c-dataChan\r\n// close after receiving\r\nclose(dataChan)\r\n// pass data []byte to another goroutine for Upload\r\nerrChan = AddUploadJob(uploadJobCollector, data)\r\n}\r\n```\r\n\r\nUsing  `go tool pprof -inuse_space mybinary`\r\n```\r\n(flat,cum)\r\n  .    61.25MB     98:   _, err = io.Copy(buf, response.Body) \r\n  .    61.75MB    168:  buf, err := download(job.URL.String())\r\n```\r\n```\r\n(pprof) top\r\n81.35MB of 82.35MB total (98.79%)\r\nDropped 491 nodes (cum \u003c= 0.41MB)\r\nShowing top 10 nodes out of 58 (cum \u003e= 0.50MB)\r\n      flat  flat%   sum%        cum   cum%\r\n   61.25MB 74.38% 74.38%    61.25MB 74.38%  bytes.makeSlice\r\n    8.84MB 10.73% 85.11%     8.84MB 10.73%  main.fileReadAppend\r\n    3.50MB  4.25% 89.36%     3.50MB  4.25%  net/textproto.(*Reader).ReadLine\r\n       3MB  3.64% 93.01%    12.55MB 15.24%  main.uploadHttpHandler\r\n       2MB  2.43% 95.44%        2MB  2.43%  main.(*UploadWorker).Run.func1\r\n    0.54MB  0.66% 96.96%     0.54MB  0.66%  html.init\r\n    0.50MB  0.61% 97.57%     0.50MB  0.61%  crypto/tls.(*block).reserve\r\n    0.50MB  0.61% 98.18%     0.50MB  0.61%  encoding/pem.Decode\r\n    0.50MB  0.61% 98.79%     0.50MB  0.61%  reflect.unsafe_NewArray\r\n```\r\n\r\nI tried this with difference approaches with ioutil etc, and on a high traffic server this quickly runs into 500MB - 1000MB memory usage just for `bytes.makeSlice`.\r\nI even tried lowering `GOGC` to 30.\r\n\r\n",
	"user": {
		"login": "daemonfire300",
		"id": 135746,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-24T22:08:15Z",
	"updated_at": "2016-02-24T22:08:15Z"
}
