{
	"id": 176644234,
	"number": 17089,
	"state": "open",
	"title": "runtime: expose number of running/runnable goroutines",
	"body": "### Summary\r\n\r\nI'd like to propose a way to expose the number of active (running + runnable) goroutines.\r\n\r\n### Background\r\n\r\nMy primary use case for this metric is to estimate application load (`num-active-goroutines / num-cpu`) in order to implement load shedding. Other metrics, like the `times()` syscall, don't expose application overload and don't work well in the presence of noisy neighbours.\r\n\r\n### Plan\r\n\r\nCurrently the runtime package includes `runtime.NumGoroutine() int` which returns the number of live, non-system goroutines.\r\n\r\nThe runtime package could be extended to include `runtime.NumActiveGoroutine() int`. `NumActiveGoroutine()` should count all goroutines where `isSystemGoroutine()` is false and where status is `_Grunnable|_Grunning|_Gsyscall`.\r\n\r\nIt seems that such a function would need to acquire `sched.lock` and `allglock`. This could have some performance implications.\r\n\r\n\r\n",
	"user": {
		"login": "fd",
		"id": 591,
		"type": "User",
		"site_admin": false
	},
	"comments": 12,
	"created_at": "2016-09-13T13:44:26Z",
	"updated_at": "2016-09-14T13:46:43Z",
	"milestone": {
		"id": 1748849,
		"number": 42,
		"title": "Go1.8Maybe"
	}
}
