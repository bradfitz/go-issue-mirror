{
	"id": 66075618,
	"body": "\u003ca id=\"c10\"\u003e\u003c/a\u003eComment 10:\n\n\u003cpre\u003eApplied this:\n\ndiff --git a/src/pkg/runtime/sys_windows_386.s b/src/pkg/runtime/sys_windows_386.s\n--- a/src/pkg/runtime/sys_windows_386.s\n+++ b/src/pkg/runtime/sys_windows_386.s\n@@ -314,3 +314,30 @@\n \tMOVL\tAX, 0(FS)\n \n \tRET\n+\n+// void runtime·osyield(void)\n+// Called from the goroutine stack.\n+// Assume it does not use additional stack space.\n+TEXT runtime·osyield(SB),7,$0\n+\tMOVL\truntime·NtYieldExecution(SB), AX\n+\tMOVL\tSP, BP\n+\tCALL\tAX\n+\tMOVL\tBP, SP\n+\tRET\n+\n+// void runtime·usleep(uint32 us)\n+// Called from the goroutine stack.\n+// Assume it does not use additional stack space.\n+TEXT runtime·usleep(SB),7,$20\n+\tMOVL\truntime·NtWaitForSingleObject(SB), AX\n+\tMOVL\tusec+0(FP), BX\n+\tMOVL\t$0, hi-4(SP)\n+\tMOVL\tBX, lo-8(SP)\n+\tLEAL\tlo-8(SP), BX\n+\tMOVL\tBX, ptime-12(SP)\n+\tMOVL\t$0, alertable-16(SP)\n+\tMOVL\t$0, handle-20(SP)\n+\tMOVL\tSP, BP\n+\tCALL\tAX\n+\tMOVL\tBP, SP\n+\tRET\ndiff --git a/src/pkg/runtime/thread_windows.c b/src/pkg/runtime/thread_windows.c\n--- a/src/pkg/runtime/thread_windows.c\n+++ b/src/pkg/runtime/thread_windows.c\n@@ -31,6 +31,8 @@\n #pragma dynimport runtime·timeBeginPeriod timeBeginPeriod \"winmm.dll\"\n #pragma dynimport runtime·WaitForSingleObject WaitForSingleObject \"kernel32.dll\"\n #pragma dynimport runtime·WriteFile WriteFile \"kernel32.dll\"\n+#pragma dynimport runtime·NtYieldExecution NtYieldExecution \"ntdll.dll\"\n+#pragma dynimport runtime·NtWaitForSingleObject NtWaitForSingleObject \"ntdll.dll\"\n \n extern void *runtime·CloseHandle;\n extern void *runtime·CreateEvent;\n@@ -56,6 +58,8 @@\n extern void *runtime·timeBeginPeriod;\n extern void *runtime·WaitForSingleObject;\n extern void *runtime·WriteFile;\n+extern void *runtime·NtYieldExecution;\n+extern void *runtime·NtWaitForSingleObject;\n \n static int32\n getproccount(void)\n@@ -135,22 +139,6 @@\n \treturn written;\n }\n \n-#pragma textflag 7\n-void\n-runtime·osyield(void)\n-{\n-\truntime·stdcall(runtime·Sleep, 1, (uintptr)0);\n-}\n-\n-void\n-runtime·usleep(uint32 us)\n-{\n-\tus /= 1000;\n-\tif(us == 0)\n-\t\tus = 1;\n-\truntime·stdcall(runtime·Sleep, 1, (uintptr)us);\n-}\n-\n #define INFINITE ((uintptr)0xFFFFFFFF)\n \n int32\ndiff --git a/src/run.bat b/src/run.bat\n--- a/src/run.bat\n+++ b/src/run.bat\n@@ -72,8 +72,6 @@\n echo.\n \n :: cgo tests\n-:: \u003ca href=\"https://golang.org/issue/4955\"\u003eissue #4955\u003c/a\u003e - cgo is broken\n-goto nocgo\n if x%CGO_ENABLED% == x0 goto nocgo\n echo # ..\\misc\\cgo\\life\n go run %GOROOT%\\test\\run.go - ..\\misc\\cgo\\life\n\nNow\n\ngo test runtime -short -v -timeout=10m -cpu=1,2,4\n\ncommand takes 3 times as long (from under 1m to aroung 200s) on my pc. I don't think it\nis acceptable.\n\nAlex\u003c/pre\u003e",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-05T05:55:53Z",
	"updated_at": "2014-12-08T10:26:24Z"
}
