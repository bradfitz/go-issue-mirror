{
	"id": 66075612,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003e\u003e usleep/osyield must switch stack, because they can be called from a normal goroutine\n(e.g. runtime.lock), and then stack switch is required.\n\nFair enough.\n\n\u003e For other OSes textflag7 magically resolve all the issues, but for Windows it seems to\nbe more complicated.\n\nI do not know about other OSes, but windows syscalls require large stack, because they\nstart with a call to a system dll, which is just a C code that runs in user space and\nneed stack just like any other program. I am not sure how \"textflag7 magically resolve\nall the issues\" on other OSes.\n\n\u003e We can introduce another pair of functions (or perhaps just one) that can be called\nw/o m. And use them in lockextra(). The simples impl for Windows will be an empty func.\nIt will affect performance during contention, but should not lead to crashes/deadlocks.\n\nSounds like a plan. I can make these real syscalls. Do you have a good name for them? Is\nlockextra the only place these should be called from? Should we wait for Russ?\n\nAlex\u003c/pre\u003e",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-04T06:22:25Z",
	"updated_at": "2014-12-08T10:26:23Z"
}
