{
	"id": 66075623,
	"body": "\u003ca id=\"c14\"\u003e\u003c/a\u003eComment 14:\n\n\u003cpre\u003e\u003e ... it will use a small enough amount of stack not to need\n\u003e a stack switch.\n\nI am still concerned about our stack usage. Even if new usleep needs just 20-30 bytes of\nstack, who will check that the room is there? I saw usleep sometimes called from a chain\nof \"textflag 7\" functions, so our stack could be on the last leg. And, if you think that\n20-30 is on a low side, then think again, because (on amd64) we must reserve room for\nfirst 4 parameters + stack must be aligned on 16 (I do not know if these are required\nfor NtXxx functions).\n\nAlso, what happens, if it works on my pc, and then breaks somewhere else, where\nNtYieldExecution stack is slightly longer. How are we going to deal with these?\n\nThe problem we have is with TestCthread test, that test quite uncommon (for the moment)\nfunctionality. I would say, lets fix that and move on for now.\n\n\u003e ... Which tests get slower during the 'go test runtime -short -v'?\n\nI applied a.diff to 9742f722b558. No more NtYieldExecution, just NtWaitForSingleObject.\nI couldn't use your #define trick, so I did it differently. New version is slower. I ran\n\"go test -short -v\" and \"go test -cpu=1,2 -v\" (see files attached). TestCrashHandler\nlooks suspect, but I am not sure why.\n\n\u003e The most\nlikely reason they'd get slower is that osyield is not actually yielding\nthe CPU, so that locks take much longer when contended. The old\nimplementation did a Sleep(0), and the new implementation is using the\nNtYieldExecution system call, but perhaps NtYieldExecution is not strong\nenough. A simple test to do would be to put\n\n#define runtime?osyield() runtime?usleep(0)\n\nat the bottom of runtime.h, so that all the osyields become Sleep(0) again,\nand see if that makes the test execution fast again.\n\nhg id\n9742f722b558 tip\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/4955/14/a.diff\"\u003ea.diff\u003c/a\u003e (2344 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/4955/14/clean_cpu_1_2.txt\"\u003eclean_cpu_1_2.txt\u003c/a\u003e (6253 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/4955/14/clean_short.txt\"\u003eclean_short.txt\u003c/a\u003e (3051 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/4955/14/patched_cpu_1_2.txt\"\u003epatched_cpu_1_2.txt\u003c/a\u003e (6254 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/4955/14/patched_short.txt\"\u003epatched_short.txt\u003c/a\u003e (3052 bytes)",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-05T23:53:36Z",
	"updated_at": "2014-12-08T10:26:24Z"
}
