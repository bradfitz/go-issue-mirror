{
	"id": 66057131,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003efunc (*Decoder) Decode\nDecode reads the next JSON-encoded value from its input and stores it in the value\npointed to by v.\n\u003ca href=\"http://golang.org/pkg/json/#Decoder.Decode\"\u003ehttp://golang.org/pkg/json/#Decoder.Decode\u003c/a\u003e\n\nfunc (*Buffer) Read\nRead reads the next len(p) bytes from the buffer or until the buffer is drained.\n\u003ca href=\"http://golang.org/pkg/bytes/#Buffer.Read\"\u003ehttp://golang.org/pkg/bytes/#Buffer.Read\u003c/a\u003e\n\nWhen json.Decode reads from bytes.Buffer (buf.Read), the bytes in the buffer are\nconsumed.\n\npackage main\n\nimport (\n\t\"bytes\"\n\t\"json\"\n\t\"log\"\n)\n\nfunc main() {\n\tbuf := bytes.NewBufferString(`{\"k\":\"v\"}exdata`)\n\tm := map[string]string{}\n\tlog.Println(\"buf.Len:\", buf.Len())\n\terr := json.NewDecoder(buf).Decode(\u0026m)\n\tif err != nil {\n\t\tlog.Fatalf(\"Couldn't even decode...\")\n\t}\n\tlog.Println(\"buf.Len:\", buf.Len())\n\texbuff := make([]byte, 80)\n\tn, err := buf.Read(exbuff)\n\tif string(exbuff[0:n]) != \"exdata\" {\n\t\tlog.Fatalf(\"Didn't get proper exdata, got '%s'\", exbuff[0:n])\n\t}\n\tlog.Printf(\"Everything was A-OK\")\n}\n\nOutput:\n2011/06/13 23:45:02 buf.Len: 15\n2011/06/13 23:45:02 buf.Len: 0\n2011/06/13 23:45:02 Didn't get proper exdata, got ''\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-06-14T03:45:50Z",
	"updated_at": "2014-12-08T10:10:42Z"
}
