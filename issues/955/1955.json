{
	"id": 51278534,
	"number": 1955,
	"state": "closed",
	"title": "encoding/json: document and limit buffering",
	"body": "by **jdnurmi@qwe.cc**:\n\n\u003cpre\u003eWhat steps will reproduce the problem?\n1. Compile \u0026amp; run the attached\n\nWhat is the expected output?\n\u0026quot;Everything is A-OK\u0026quot;\n\nWhat do you see instead?\n\u0026quot;Didn't get proper exdata, got ''\u0026quot;\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n8g\n\nWhich operating system are you using?\nlinux\n\nWhich revision are you using?  (hg identify)\ntip\n\nPlease provide any additional information below.\n\nI believe the cause is that the decoder creates (and grows) a buffer without confirming\nthat the total amount is needed.  This approach is probably far more efficient than a\ncorrect 'byte.Read \u0026amp;\u0026amp; process || byte.Unread' approach, but it would be nice if\nthere were an exported \njson.DecodeElement(io.Reader, interface{})(os.Error) that didn't \u0026quot;over-feed\u0026quot;.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1955/0/json_bug.go\"\u003ejson_bug.go\u003c/a\u003e (465 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 12,
	"closed_at": "2014-12-08T10:10:42Z",
	"created_at": "2011-06-14T01:57:15Z",
	"updated_at": "2016-06-24T19:30:52Z",
	"milestone": {
		"id": 1061233,
		"number": 7,
		"title": "Go1"
	}
}
