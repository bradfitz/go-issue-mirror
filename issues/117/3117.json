{
	"id": 51280143,
	"number": 3117,
	"state": "open",
	"title": "spec: cannot assign to a field of a map element directly: m[\"foo\"].f = x",
	"body": "\u003cpre\u003eThe non-addressability requirement of map index expressions makes sense by itself since\nwe don't want a surviving pointer to a map element.\n\nBut surely it should be ok to have an invisible temporary pointer p to the respective\nfield which is just used during the assignment (*p = x). It seems that this doesn't\nintroduce any more issues than what we have already when assigning to a larger map\nelement that cannot be assigned to atomically.\n\nE.g., the following program should be legal:\n\npackage main\n\nimport \u0026quot;fmt\u0026quot;\n\nvar m = map[string]struct{x, y int} {\n\t\u0026quot;foo\u0026quot;: {2, 3},\n}\n\nfunc main() {\n\tm[\u0026quot;foo\u0026quot;].x = 4 // cannot assign to m[\u0026quot;foo\u0026quot;].x\n\tfmt.Println(m)\n}\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "LanguageChange"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 13,
	"created_at": "2012-02-23T20:09:43Z",
	"updated_at": "2016-01-04T20:25:33Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
