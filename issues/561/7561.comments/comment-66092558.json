{
	"id": 66092558,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eThe following change fixes *both* compiler error on tip and runtime crash in 1.2\n\n\ndiff --git a/proto/iris/broadcast_test.go b/proto/iris/broadcast_test.go\nindex d6685a9..2d2b522 100644\n--- a/proto/iris/broadcast_test.go\n+++ b/proto/iris/broadcast_test.go\n@@ -104,12 +104,12 @@ func testBroadcast(t *testing.T, nodes, conns, msgs int) {\n \t\tliveHands[i] = make([]*broadcaster, conns)\n \t\tliveConns[i] = make([]*Connection, conns)\n \t\tfor j := 0; j \u0026lt; conns; j++ {\n-\t\t\tvar err error\n \t\t\tliveHands[i][j] = \u0026broadcaster{make(chan []byte, nodes*conns*msgs)}\n-\t\t\tliveConns[i][j], err = node.Connect(cluster, liveHands[i][j])\n+\t\t\tconn, err := node.Connect(cluster, liveHands[i][j])\n \t\t\tif err != nil {\n \t\t\t\tt.Fatalf(\"failed to connect to the iris overlay: %v.\", err)\n \t\t\t}\n+\t\t\tliveConns[i][j] = conn\n \t\t\tdefer func(conn *Connection) {\n \t\t\t\tif err := conn.Close(); err != nil {\n \t\t\t\t\tt.Fatalf(\"failed to close iris connection: %v.\", err)\ndiff --git a/proto/iris/pubsub_test.go b/proto/iris/pubsub_test.go\nindex 5e29610..d1c25eb 100644\n--- a/proto/iris/pubsub_test.go\n+++ b/proto/iris/pubsub_test.go\n@@ -97,12 +97,12 @@ func testPubSub(t *testing.T, nodes, conns, msgs int) {\n \t\tliveHands[i] = make([]*subscriber, conns)\n \t\tliveConns[i] = make([]*Connection, conns)\n \t\tfor j := 0; j \u0026lt; conns; j++ {\n-\t\t\tvar err error\n \t\t\t// Connect to the iris network\n-\t\t\tliveConns[i][j], err = node.Connect(cluster, nil)\n+\t\t\tconn, err := node.Connect(cluster, nil)\n \t\t\tif err != nil {\n \t\t\t\tt.Fatalf(\"failed to connect to the iris overlay: %v.\", err)\n \t\t\t}\n+\t\t\tliveConns[i][j] = conn\n \t\t\tdefer func(conn *Connection) {\n \t\t\t\tif err := conn.Close(); err != nil {\n \t\t\t\t\tt.Fatalf(\"failed to close iris connection: %v.\", err)\ndiff --git a/proto/iris/reqrep_test.go b/proto/iris/reqrep_test.go\nindex d589c41..d04c833 100644\n--- a/proto/iris/reqrep_test.go\n+++ b/proto/iris/reqrep_test.go\n@@ -109,12 +109,12 @@ func testReqRep(t *testing.T, nodes, conns, reqs int) {\n \t\tliveHands[i] = make([]*requester, conns)\n \t\tliveConns[i] = make([]*Connection, conns)\n \t\tfor j := 0; j \u0026lt; conns; j++ {\n-\t\t\tvar err error\n \t\t\tliveHands[i][j] = \u0026requester{i, 0}\n-\t\t\tliveConns[i][j], err = node.Connect(cluster, liveHands[i][j])\n+\t\t\tconn, err := node.Connect(cluster, liveHands[i][j])\n \t\t\tif err != nil {\n \t\t\t\tt.Fatalf(\"failed to connect to the iris overlay: %v.\", err)\n \t\t\t}\n+\t\t\tliveConns[i][j] = conn\n \t\t\tdefer func(conn *Connection) {\n \t\t\t\tif err := conn.Close(); err != nil {\n \t\t\t\t\tt.Fatalf(\"failed to close iris connection: %v.\", err)\ndiff --git a/proto/iris/tunnel_test.go b/proto/iris/tunnel_test.go\nindex 053548d..8e27d6e 100644\n--- a/proto/iris/tunnel_test.go\n+++ b/proto/iris/tunnel_test.go\n@@ -118,12 +118,12 @@ func testTunnel(t *testing.T, nodes, conns, tuns, msgs int) {\n \t\tliveHands[i] = make([]*tunneler, conns)\n \t\tliveConns[i] = make([]*Connection, conns)\n \t\tfor j := 0; j \u0026lt; conns; j++ {\n-\t\t\tvar err error\n \t\t\tliveHands[i][j] = \u0026tunneler{i, 0}\n-\t\t\tliveConns[i][j], err = node.Connect(cluster, liveHands[i][j])\n+\t\t\tconn, err := node.Connect(cluster, liveHands[i][j])\n \t\t\tif err != nil {\n \t\t\t\tt.Fatalf(\"failed to connect to the iris overlay: %v.\", err)\n \t\t\t}\n+\t\t\tliveConns[i][j] = conn\n \t\t\tdefer func(conn *Connection) {\n \t\t\t\tif err := conn.Close(); err != nil {\n \t\t\t\t\tt.Fatalf(\"failed to close iris connection: %v.\", err)\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-17T10:04:10Z",
	"updated_at": "2014-12-22T06:33:20Z"
}
