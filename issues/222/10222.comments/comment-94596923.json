{
	"id": 94596923,
	"body": "On 21 April 2015 at 11:53, Robert Griesemer \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e Fundamentally, this type is recursive; internally this means that the data\n\u003e structure representing the type has a (pointer) loop. More generally, this\n\u003e can happen with any type data structure containing loops.\n\u003e\n\u003e Trying to serialize such a data structure in finite form (e.g., print it\n\u003e in text form) requires some mechanism to break the loop.\n\u003e\n\nRight.\n\nThe straight-forward algorithm to serialize cyclic data structures is to\n\u003e mark (e.g., number) each node, and when a node is encountered that was seen\n\u003e before during serialization, instead of serializing it again, use that\n\u003e number to refer to it.\n\u003e\nI did actually try to implement this, but ran into some grotty problem or\nother.  I was only hacking on the plane though, a more principled attempt\nmay well work fine.\n\n\u003e It may be possible to export nodes in a clever order (after sorting them\n\u003e topologically) and preserve the current textual export format that emulates\n\u003e source code. Cycles would be broken by using identifiers, similar to what\n\u003e we do when we write cyclic type definitions in the first place.\n\u003e\n\u003e Another alternative is to ditch the current format and use an algorithm\n\u003e the can handle cycles from the outset. x/tools/go/importer implements this\n\u003e for go/types.\n\u003e\nMy (half remembered) impression is that trying to hack a (textually) small\nfix is not really the way to go, so that would favour this sort of\napproach. I don't have any long haul flights for a while though :-)\n",
	"user": {
		"login": "mwhudson",
		"id": 672022,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-21T00:04:39Z",
	"updated_at": "2015-04-21T00:04:39Z"
}
