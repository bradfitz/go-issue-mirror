{
	"id": 229532316,
	"body": "@bradfitz I didn't do anything in the os/exec package.  What I did was fix up the os package so that there is no race between Process.Signal and Process.Wait on GNU/Linux, and then mikioh extended that to Darwin and FreeBSD.\r\n\r\nMaybe I'm missing something but I don't see why the goroutine started by `Start` should call `wait`.  Seems to me it should just be like the one currently started by `Wait`:\r\n\r\n    \t\tgo func() {\r\n    \t\t\tselect {\r\n    \t\t\tcase \u003c-c.ctx.Done():\r\n    \t\t\t\tc.Process.Kill()\r\n    \t\t\tcase \u003c-c.waitDone:\r\n    \t\t\t}\r\n    \t\t}()\r\n\r\nand then `Wait` closes `c.waitDone` after `c.Process.Wait` returns.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-30T00:58:49Z",
	"updated_at": "2016-06-30T00:58:49Z"
}
