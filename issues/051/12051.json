{
	"id": 99433309,
	"number": 12051,
	"state": "open",
	"title": "net: 1.5rc1 testing: stuck for long time if there are many TCP connections",
	"body": "Hi,\r\nI use 1.5rc to test my program, which will hold millions of tcp connections and push messages to client.\r\n\r\nI test the program by make a fake client(also in go) and build 1 million tcp to the server. Server bind 100 ports and client connect 10000 tcp per port so totally 1,000,000. Server and fake client are on same server and both have `runtime.GOMAXPROCS(runtime.NumCPU())`.\r\n\r\nIf I build them on go 1.4.2(cross-platform compile from my MacBook to linux/amd64 server), when I push message to all tcp connections almost concurrently, the CPU is high but it works as expected that all client tcp can receive messages within less than 20 seconds. \r\n\r\nHowever if I build them with same code on go 1.5rc1(also cross-platform compile), when I push message, both server and client are stuck and system load is high for several minutes. Two process' status will sometimes change to 'D' which means  \"uninterruptible sleep\" although CPU may be 0.0% at all.  If I kill client, the server will become normal.\r\n\r\nWhy 1.4.2 works well but 1.5rc1 not? Does 1.5 has TCP performance issue or goroutine scheduling issue?\r\n\r\nThanks\r\n",
	"user": {
		"login": "yangzhe1991",
		"id": 860739,
		"type": "User",
		"site_admin": false
	},
	"comments": 16,
	"created_at": "2015-08-06T13:25:35Z",
	"updated_at": "2015-08-11T15:02:17Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
