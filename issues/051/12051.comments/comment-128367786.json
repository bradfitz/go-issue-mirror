{
	"id": 128367786,
	"body": "Can you please try one or more of the following and report your results on this issue.\n\n*  run your application with GODEBUG=gctrace=1 and capture the output, this will give an idea how much of your programs time is spent I garbage collection. \n* when the processes are in in D state, kill the programs with SIGQUIT and post the output\n* profile your application using debug/pprof and post the cpu svg data to this issue.\n\n\nThanks\n\nDave\n\n\n\n\u003e On 6 Aug 2015, at 23:25, Phil Yang \u003cnotifications@github.com\u003e wrote:\n\u003e \n\u003e Hi,\n\u003e I use 1.5rc to test my program, which will hold millions of tcp connections and push messages to client.\n\u003e \n\u003e I test the program by make a fake client(also in go) and build 1 million tcp to the server. Server bind 100 ports and client connect 10000 tcp per port so totally 1,000,000. Server and fake client are on same server and both have runtime.GOMAXPROCS(runtime.NumCPU()).\n\u003e \n\u003e If I build them on go 1.4.2(cross-platform compile from my MacBook to linux/amd64 server), when I push message to all tcp connections almost concurrently, the CPU is high but it works as expected that all client tcp can receive messages within less than 20 seconds.\n\u003e \n\u003e However if I build them with same code on go 1.5rc1(also cross-platform compile), when I push message, both server and client are stuck and system load is high for several minutes. Two process' status will sometimes change to 'D' which means \"uninterruptible sleep\" although CPU may be 0.0% at all. If I kill client, the server will because normal.\n\u003e \n\u003e Why 1.4.2 works well but 1.5rc1 not? Does 1.5 has TCP performance issue or goroutine scheduling issue?\n\u003e \n\u003e Thanks\n\u003e \n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub.\n\u003e \n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-06T13:36:40Z",
	"updated_at": "2015-08-06T13:36:40Z"
}
