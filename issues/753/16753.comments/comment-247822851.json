{
	"id": 247822851,
	"body": "I also noticed a minor thing about the #File example.\r\n\r\nIn the current docs, both the package and the type are linked separately. For example, the io.Reader in\r\n\r\n    type File interface {\r\n        io.Closer\r\n        io.Reader\r\n        io.Seeker\r\n        Readdir(count int) ([]os.FileInfo, error)\r\n        Stat() (os.FileInfo, error)\r\n\t}\r\n\r\n\"io\" links to pkg io and \"Reader\" links to io.Reader.\r\n\r\nhttps://golang.org/pkg/net/http/#File\r\n\r\nIn your example, the link to the package has been dropped, though honestly I'm not sure how useful it is to have that link to the package when you most likely to want to go straight to io.Reader anyway...\r\n\r\nThe case of nested structs is something I considered when I looked into this as well. My conclusion was that I would punt and only add links for the first-level fields of a named type. My reasoning was that nested structs are probably rare (didn't verify this), and you can get into nasty edge cases (admittedly contrived) like the following:\r\n\r\n    type Nested struct {\r\n\t    Nest1, Nest2 struct {\r\n\t\t    X int\r\n\t\t}\r\n\t}\r\n\r\nWould X in the above example get labeled as both Nested.Nest1.X and Nested.Nest2.X?\r\n\r\nWhat about (god forbid):\r\n\r\n\ttype Nested struct {\r\n\t\tNest1, Nest2 struct {\r\n\t\t\tNest3, Nest4 struct {\r\n\t\t\t\tX int\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\nHow is X labeled in this case?\r\n\r\nTo be clear, I'm not advocating that you actually need to handle such unlikely cases. Just throwing it out there for consideration.\r\n",
	"user": {
		"login": "appleby",
		"id": 86076,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-18T03:30:30Z",
	"updated_at": "2016-09-18T03:30:30Z"
}
