{
	"id": 153124114,
	"body": "@crawshaw I submitted the following CL to show current progress: https://go-review.googlesource.com/16553\r\n\r\nI've been holding off until some sort of \"ok\" was given, so I'll look at picking up work of this again.\r\n\r\nNotably, right now it supports unmarshal/marshal of aapt output that matches byte for byte. I'm now looking to simplify the string pool struct to be more idiomatic but this is not yet complete.\r\n\r\nThis also supports reading portions of the resource table from an android.jar, including the table's string pool (which happens to be utf-8) and the beginning of the package resource type.\r\n\r\nI failed to mention any current deficiencies with this proposal, here's a short list of what I have/know at the moment:\r\n\r\n* marshalling will generate a lot of garbage due to implementation details to conform to testing\r\n* I'm aware of a quirk with high/low bytes for string length where high word is 0 (wrt utf8 strings). The case I saw this for was a byte length of 147. My current guess is it uses a second byte if length overflows an int8 and not a uint8 but haven't looked further. If such quirks can't be identified, then tests wouldn't complete successfully.\r\n\r\nI think a minimum api of 15 is ideal, notably to break away from the old menu action and styling before 4.x, e.g. see `...` button that does nothing with a pure go app that defines minimum api-9. The display of old menu button may sound trivial compared to \"supporting more features\", but I don't really anticipate the need for a pure go app to require many features, just the basics.\r\n\r\nAlso, here's a reference for current api device statistics in the wild: http://developer.android.com/about/dashboards/index.html\r\n\r\nI also think the cmd should only target one api version as you mentioned. What I've considered in this case is that specifying a minimum or target api within the manifest would produce an error and abort. This information would instead be inserted by gomobile cmd.\r\n\r\nI also agree about not making gomobile try and do everything. More complex interactions using the gradle plugin and `bind` is definitely the place to go so it can scale to all features normally supported in a java app.\r\n\r\nI'm also in favor of either a whitelist or blacklist (whichever is more practical) of what's supported in a manifest for a pure go app. But, this needs some thought put into it.",
	"user": {
		"login": "dskinner",
		"id": 92266,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-02T18:56:34Z",
	"updated_at": "2015-11-02T18:56:34Z"
}
