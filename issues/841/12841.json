{
	"id": 109765988,
	"number": 12841,
	"state": "closed",
	"title": "cmd/compile: optimize struct copy",
	"body": "Go1.5.1 windows/amd64\r\n\r\nIt seems that manually copying all the fields of a struct to a new location is faster than copying through assignment (which invokes `memmove`).\r\n\r\n```\r\nBenchmarkMoveSmallStruct-8      2000000000               0.62 ns/op\r\nBenchmarkSetSmallStruct-8       2000000000               0.50 ns/op\r\nBenchmarkMoveBigStruct-8        1000000000               2.68 ns/op\r\nBenchmarkSetBigStruct-8         1000000000               2.20 ns/op\r\n```\r\n\r\nUsing\r\n``` go\r\npackage main\r\n\r\nimport \"testing\"\r\n\r\ntype Small struct {\r\n\ta int\r\n}\r\n\r\ntype Big struct {\r\n\ta, b, c, d, e, f, g, h int\r\n}\r\n\r\n////////////////\r\n\r\nfunc moveSmall(item *Small) {\r\n\t*item = Small{0}\r\n}\r\n\r\nfunc setSmall(item *Small) {\r\n\titem.a = 0\r\n}\r\n\r\nfunc moveBig(item *Big) {\r\n\t*item = Big{0, 1, 2, 3, 4, 5, 6, 7}\r\n}\r\n\r\nfunc setBig(item *Big) {\r\n\titem.a, item.b, item.c, item.d, item.e, item.f, item.g, item.h = 0, 1, 2, 3, 4, 5, 6, 7\r\n}\r\n\r\n////////////////\r\n\r\nfunc BenchmarkMoveSmallStruct(b *testing.B) {\r\n\titem := Small{0}\r\n\tfor i := 0; i \u003c b.N; i++ {\r\n\t\tmoveSmall(\u0026item)\r\n\t}\r\n}\r\n\r\nfunc BenchmarkSetSmallStruct(b *testing.B) {\r\n\titem := Small{0}\r\n\tfor i := 0; i \u003c b.N; i++ {\r\n\t\tsetSmall(\u0026item)\r\n\t}\r\n}\r\n\r\nfunc BenchmarkMoveBigStruct(b *testing.B) {\r\n\titem := Big{0, 1, 2, 3, 4, 5, 6, 7}\r\n\tfor i := 0; i \u003c b.N; i++ {\r\n\t\tmoveBig(\u0026item)\r\n\t}\r\n}\r\n\r\nfunc BenchmarkSetBigStruct(b *testing.B) {\r\n\titem := Big{0, 1, 2, 3, 4, 5, 6, 7}\r\n\tfor i := 0; i \u003c b.N; i++ {\r\n\t\tsetBig(\u0026item)\r\n\t}\r\n}\r\n```\r\n\r\nI think the assignment of the struct first allocates the struct on the stack and then `memmoves` it to the destination. The struct can be set on the destination immediately.",
	"user": {
		"login": "tdewolff",
		"id": 5563166,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"assignee": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-04-18T18:51:40Z",
	"created_at": "2015-10-05T10:04:14Z",
	"updated_at": "2016-04-18T18:51:40Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
