{
	"id": 57367207,
	"number": 9841,
	"state": "closed",
	"title": "encoding/json: doesn't deserialize json fields with underscores into struct's fields who's tag contains the underscore but the struct field name does not",
	"body": "Json:\r\n```\r\n{ Some_ID: 4 }\r\n```\r\n\r\nGo:\r\n```\r\ntype Example struct {\r\n    SomeID int \"Some_ID\"\r\n}\r\n...\r\ndata := \u003cabove json as []byte\u003e\r\nvar e Example\r\njson.Unmarshal(data, \u0026e)\r\n```\r\nGiven the above json and struct, the value `e.SomeID` will not be filled with the value `4`.\r\n\r\nFrom the first of three rules listed at http://blog.golang.org/json-and-go:\r\n\r\n\u003e [Unmarshal will look through the destination struct's fields to find] An exported field with a tag of [the json field's name]\r\n\r\nIf I change the struct definition to \r\n\r\n```\r\ntype Example struct {\r\n    Some_ID int \"Some_ID\"\r\n}\r\n```\r\n\r\nThen, after Unmarshalling, e.Some_ID will contain `4` as expected.\r\n\r\nIt appears that when an underscore is involved in the field in the json, tagging the struct's field with an underscore when the struct's field does not contain an underscore will not marshal that field. If the json contains an underscore, so must the struct's field and the tag is useless.",
	"user": {
		"login": "coreyog",
		"id": 2836207,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2015-02-11T19:55:21Z",
	"created_at": "2015-02-11T19:47:29Z",
	"updated_at": "2016-06-25T02:00:38Z"
}
