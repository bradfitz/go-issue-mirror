{
	"id": 124229226,
	"body": "I agree that it's a pity that there are breaking changes, but I think it's\r\nstill worth making them now.\r\n\r\nNote that the most important changes that I made were to the low level\r\ntokenization, which was fundamentally broken to the point where\r\nyou could not round-trip *any* XML containing namespaces through\r\nEncoder/Decoder without producing broken XML. This is now fixed.\r\n\r\nI tried to make as few changes as were necessary to the struct marshaling\r\nand unmarshaling, because a) I didn't want to break things and b) that\r\nwasn't what I was trying to fix at the time and I didn't want to get bogged\r\ndown in it.\r\n\r\nI don't see that any of the above-mentioned issues that are broken as a result of the\r\nlow level tokenization changes, and can only think one issue\r\nwhere existing valid XML output was broken as a result of this (issue #11431)\r\nand that was *still* a struct-encoding issue.\r\n\r\nSo, I agree that encoding/xml is broken but I'd argue that the foundations of\r\nit are now sound, and that we don't have to fix everything now. Also,\r\nwe'll get to find more issues when more people actually use it.\r\n\r\nOn the other hand, I do see that it's a pity to have to make breaking changes\r\ntwice (even if, strictly speaking, it's within the remit of the compatibility guarantee\r\nbecause it's fixing bugs). Another solution might be to move the current\r\nversion of encoding/xml to somewhere under golang.org/x, do the reversion\r\nand make more breaking changes (with appropriate fanfare) in Go 1.6,\r\nincluding a potential rethink of the way that namespaces work with structs,\r\npotentially even renaming the package in std so we can remain backwardly compatible.\r\n\r\nFor us, it won't make too much difference because we have to use a fork of\r\nencoding/xml anyway as we have to use the Go version in Ubuntu LTS.",
	"user": {
		"login": "rogpeppe",
		"id": 66491,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-23T20:23:11Z",
	"updated_at": "2015-07-23T20:23:11Z"
}
