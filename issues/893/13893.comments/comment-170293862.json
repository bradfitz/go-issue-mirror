{
	"id": 170293862,
	"body": "The code base been there un-touched since 2011. \r\n\r\n```\r\ncommit c7d16cc4118bf0db3e4268a7ab657577911999f4\r\nAuthor: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\r\nDate:   Wed Apr 13 14:09:04 2011 -0700\r\n\r\n    http: flesh out server Expect handling + tests\r\n\r\n    This mostly adds Expect 100-continue tests (from\r\n    the perspective of server correctness) that were\r\n    missing before.\r\n\r\n    It also fixes a few missing cases that will\r\n    probably never come up in practice, but it's nice\r\n    to have handled correctly.\r\n\r\n    Proper 100-continue client support remains a TODO.\r\n\r\n    R=rsc, bradfitzwork\r\n    CC=golang-dev\r\n    https://golang.org/cl/4399044\r\n```\r\n\r\n```\r\n+               // Expect 100 Continue support\r\n+               req := w.req\r\n+               if req.expectsContinue() {\r\n+                       if req.ProtoAtLeast(1, 1) {\r\n+                               // Wrap the Body reader with one that replies on the connection\r\n+                               req.Body = \u0026expectContinueReader{readCloser: req.Body, resp: w}\r\n+                       }\r\n+                       if req.ContentLength == 0 {\r\n+                               w.Header().Set(\"Connection\", \"close\")\r\n+                               w.WriteHeader(StatusBadRequest)\r\n+                               break\r\n+                       }\r\n+                       req.Header.Del(\"Expect\")\r\n+               } else if req.Header.Get(\"Expect\") != \"\" {\r\n+                       // TODO(bradfitz): let ServeHTTP handlers handle\r\n+                       // requests with non-standard expectation[s]? Seems\r\n+                       // theoretical at best, and doesn't fit into the\r\n+                       // current ServeHTTP model anyway.  We'd need to\r\n+                       // make the ResponseWriter an optional\r\n+                       // \"ExpectReplier\" interface or something.\r\n+                       //\r\n+                       // For now we'll just obey RFC 2616 14.20 which says\r\n+                       // \"If a server receives a request containing an\r\n+                       // Expect field that includes an expectation-\r\n+                       // extension that it does not support, it MUST\r\n+                       // respond with a 417 (Expectation Failed) status.\"\r\n+                       w.Header().Set(\"Connection\", \"close\")\r\n+                       w.WriteHeader(StatusExpectationFailed)\r\n+                       break\r\n+               }\r\n```",
	"user": {
		"login": "harshavardhana",
		"id": 622699,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-09T23:41:57Z",
	"updated_at": "2016-01-09T23:41:57Z"
}
