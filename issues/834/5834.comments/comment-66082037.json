{
	"id": 66082037,
	"body": "\u003ca id=\"c19\"\u003e\u003c/a\u003eComment 19 by **in60jp**:\n\n\u003cpre\u003eAlex,\n\nThis test will demonstrate the error:\n\n\ndiff --git a/src/pkg/net/udp_test.go b/src/pkg/net/udp_test.go\n--- a/src/pkg/net/udp_test.go\n+++ b/src/pkg/net/udp_test.go\n@@ -9,6 +9,7 @@\n \t\"runtime\"\n \t\"strings\"\n \t\"testing\"\n+\t\"time\"\n )\n \n func TestResolveUDPAddr(t *testing.T) {\n@@ -255,3 +256,39 @@\n \t\t}\n \t}\n }\n+\n+func TestUDPReadFrom(t *testing.T) {\n+\tconst raddr = \"127.0.0.1:55555\"\n+\tconst laddr = \":0\"\n+\n+\tra, err := ResolveUDPAddr(\"udp\", raddr)\n+\tif err != nil {\n+\t\tt.Fatalf(\"ResolveUDPAddr failed: %v\", err)\n+\t}\n+\n+\tla, err := ResolveUDPAddr(\"udp\", laddr)\n+\tif err != nil {\n+\t\tt.Fatalf(\"ResolveUDPAddr failed: %v\", err)\n+\t}\n+\n+\tc, err := ListenUDP(\"udp\", la)\n+\tif err != nil {\n+\t\tt.Fatalf(\"ListenUDP failed: %v\", err)\n+\t}\n+\tdefer c.Close()\n+\n+\t_, err = c.WriteToUDP([]byte(\"a\"), ra)\n+\tif err != nil {\n+\t\tt.Fatal(\"WriteToUDP failed: %v\", err)\n+\t}\n+\n+\terr = c.SetDeadline(time.Now().Add(100 * time.Millisecond))\n+\tif err != nil {\n+\t\tt.Fatalf(\"SetDeadline failed: %v\", err)\n+\t}\n+\tb := make([]byte, 1)\n+\t_, _, err = c.ReadFromUDP(b)\n+\tif err != nil \u0026\u0026 !isTimeout(err) {\n+\t\tt.Fatalf(\"ReadFromUDP failed: %v\", err)\n+\t}\n+}\n\n\n\nand I wrote a patch to fix this issue:\n\n\ndiff --git a/src/pkg/net/fd_windows.go b/src/pkg/net/fd_windows.go\n--- a/src/pkg/net/fd_windows.go\n+++ b/src/pkg/net/fd_windows.go\n@@ -294,6 +294,18 @@\n \t\t\tfd.skipSyncNotif = true\n \t\t}\n \t}\n+\t// Disable the SIO_UDP_CONNRESET behavior.\n+\t// \u003ca href=\"https://golang.org/issue/5834\"\u003ehttps://golang.org/issue/5834\u003c/a\u003e\n+\tswitch fd.net {\n+\tcase \"udp\", \"udp4\", \"udp6\":\n+\t\tret := uint32(0)\n+\t\tflag := uint32(0)\n+\t\tsize := uint32(unsafe.Sizeof(flag))\n+\t\terr := syscall.WSAIoctl(fd.sysfd, syscall.SIO_UDP_CONNRESET,\n(*byte)(unsafe.Pointer(\u0026flag)), size, nil, 0, \u0026ret, nil, 0)\n+\t\tif err != nil {\n+\t\t\treturn os.NewSyscallError(\"WSAIoctl\", err)\n+\t\t}\n+\t}\n \tfd.rop.mode = 'r'\n \tfd.wop.mode = 'w'\n \tfd.rop.fd = fd\ndiff --git a/src/pkg/syscall/ztypes_windows.go b/src/pkg/syscall/ztypes_windows.go\n--- a/src/pkg/syscall/ztypes_windows.go\n+++ b/src/pkg/syscall/ztypes_windows.go\n@@ -520,6 +520,7 @@\n \tIOC_WS2                            = 0x08000000\n \tSIO_GET_EXTENSION_FUNCTION_POINTER = IOC_INOUT | IOC_WS2 | 6\n \tSIO_KEEPALIVE_VALS                 = IOC_IN | IOC_VENDOR | 4\n+\tSIO_UDP_CONNRESET                  = IOC_IN | IOC_VENDOR | 12\n \n \t// cf. \u003ca href=\"http://support.microsoft.com/default.aspx?scid=kb\"\u003ehttp://support.microsoft.com/default.aspx?scid=kb\u003c/a\u003e;en-us;257460\n \n\n\nThanks.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-29T06:42:34Z",
	"updated_at": "2014-12-08T10:32:03Z"
}
