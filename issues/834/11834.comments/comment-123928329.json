{
	"id": 123928329,
	"body": "Here is a snippet with `GODEBUG=gctrace=1`, interleaved with my function that logs when the freelist misses:\r\n\r\n```\r\ngc #2015/07/23 01:46:49.064631 allocMessage called 1044 times\r\n555 @16.671s 6%: 2.1+0.40+0.004+2.6+0.27 ms clock, 6.3+0.40+0+0/2.5/3.0+0.83 ms cpu, 64-\u003e81-\u003e49 MB, 66 MB goal, 4 P\r\n2015/07/23 01:46:49.067593 allocMessage called 1045 times\r\ngc #556 @16.677s 6%: 2015/07/23 01:46:49.070735 allocMessage called 1046 times\r\n1.7+0.29+0.29+2.2+0.27 ms clock, 5.3+0.29+0+0/1.4/1.2+0.83 ms cpu, 64-\u003e81-\u003e49 MB, 66 MB goal, 4 P\r\n2015/07/23 01:46:49.073320 allocMessage called 1047 times\r\n2015/07/23 01:46:49.076236 allocMessage called 1048 times\r\ngc #557 @16.683s 6%: 1.5+0.27+0.003+2.6+0.31 ms clock, 4.5+0.27+0+0/1.4/1.0+0.93 ms cpu, 64-\u003e81-\u003e49 MB, 66 MB goal, 4 P\r\n2015/07/23 01:46:49.080386 allocMessage called 1049 times\r\n2015/07/23 01:46:49.083039 allocMessage called 1050 times\r\ngc #558 @16.689s 6%: 2.1+0.41+2.2+1.2+0.28 ms clock, 8.4+0.41+0+0/0.98/2.2+1.1 ms cpu, 64-\u003e82-\u003e49 MB, 66 MB goal, 4 P\r\n2015/07/23 01:46:49.087171 allocMessage called 1051 times\r\n2015/07/23 01:46:49.089865 allocMessage called 1052 times\r\ngc #559 @16.697s 6%: 1.6+0.35+0.004+2.5+0.32 ms clock, 4.8+0.35+0+0.005/1.5/1.1+0.96 ms cpu, 64-\u003e82-\u003e49 MB, 65 MB goal, 4 P\r\ngc #5602015/07/23 01:46:49.121411 allocMessage called 1053 times\r\n @16.729s 6%: 0.042+0.32+0.11+2.9+0.30 ms clock, 0.17+0.32+0+0.13/1.6/1.0+1.2 ms cpu, 64-\u003e81-\u003e49 MB, 66 MB goal, 4 P\r\n2015/07/23 01:46:49.124037 allocMessage called 1054 times\r\ngc #561 @2015/07/23 01:46:49.127282 allocMessage called 1055 times\r\n16.734s 6%: 1.4+0.28+0.003+2.6+0.30 ms clock, 4.4+0.28+0+0/1.3/1.5+0.91 ms cpu, 64-\u003e81-\u003e49 MB, 65 MB goal, 4 P\r\n2015/07/23 01:46:49.130001 allocMessage called 1056 times\r\n2015/07/23 01:46:49.133795 allocMessage called 1057 times\r\n2015/07/23 01:46:49.136930 allocMessage called 1058 times\r\ngc #562 @16.739s 6%: 1.8+0.43+2.4+4.2+0.34 ms clock, 5.5+0.43+0+0.93/1.8/0.82+1.0 ms cpu, 64-\u003e98-\u003e65 MB, 66 MB goal, 4 P\r\n2015/07/23 01:46:49.141047 allocMessage called 1059 times\r\ngc #563 @16.749s 6%: 0.11+0.27+0.003+2.7+0.43 ms clock, 0.34+0.27+0+0/1.6/0.62+1.3 ms cpu, 64-\u003e82-\u003e49 MB, 65 MB goal, 4 P\r\n2015/07/23 01:46:49.144764 allocMessage called 1060 times\r\ngc #564 @16.7542015/07/23 01:46:49.147856 allocMessage called 1061 times\r\ns 6%: 2.0+0.37+0.004+2.4+0.26 ms clock, 6.0+0.37+0+0/1.2/1.5+0.80 ms cpu, 64-\u003e82-\u003e49 MB, 66 MB goal, 4 P\r\n```\r\n\r\n\r\nAnd here with `GODEBUG=gctrace=1,gcstoptheworld=2`:\r\n\r\n```\r\n2015/07/23 01:45:43.173046 allocMessage called 377 times\r\ngc #349 @21.007s 3%: 0.018+0+0+0+1.9 ms clock, 0.073+0+0+0/0/0+7.7 ms cpu, 62-\u003e62-\u003e33 MB, 62 MB goal, 4 P (forced)\r\n2015/07/23 01:45:43.186673 allocMessage called 378 times\r\ngc #350 @21.034s 3%: 0.071+0+0+0+2.0 ms clock, 0.21+0+0+0/0/0+6.2 ms cpu, 62-\u003e62-\u003e33 MB, 62 MB goal, 4 P (forced)\r\n2015/07/23 01:45:43.214135 allocMessage called 379 times\r\ngc #351 @21.062s 3%: 0.015+0+0+0+1.7 ms clock, 0.063+0+0+0/0/0+7.0 ms cpu, 62-\u003e62-\u003e33 MB, 62 MB goal, 4 P (forced)\r\n2015/07/23 01:45:43.240878 allocMessage called 380 times\r\ngc #352 @21.090s 3%: 0.031+0+0+0+1.8 ms clock, 0.12+0+0+0/0/0+7.5 ms cpu, 62-\u003e62-\u003e33 MB, 62 MB goal, 4 P (forced)\r\n2015/07/23 01:45:43.282152 allocMessage called 381 times\r\ngc #353 @21.118s 3%: 0.017+0+0+0+2.0 ms clock, 0.070+0+0+0/0/0+8.0 ms cpu, 62-\u003e62-\u003e33 MB, 62 MB goal, 4 P (forced)\r\n2015/07/23 01:45:43.301456 allocMessage called 382 times\r\ngc #354 @21.137s 3%: 2.22015/07/23 01:45:43.314280 allocMessage called 383 times\r\n+0+0+0+2.4 ms clock, 8.9+0+0+0/0/0+9.7 ms cpu, 73-\u003e73-\u003e33 MB, 73 MB goal, 4 P (forced)\r\n2015/07/23 01:45:43.317380 allocMessage called 384 times\r\ngc #355 @21.167s 3%: 0.016+0+0+0+1.8 ms clock, 0.065+0+0+0/0/0+7.4 ms cpu, 62-\u003e62-\u003e33 MB, 62 MB goal, 4 P (forced)\r\n2015/07/23 01:45:43.359269 allocMessage called 385 times\r\ngc #356 @21.195s 3%: 0.019+0+0+0+1.7 ms clock, 0.079+0+0+0/0/0+6.9 ms cpu, 62-\u003e62-\u003e33 MB, 62 MB goal, 4 P (forced)\r\n2015/07/23 01:45:43.379051 allocMessage called 386 times\r\ngc #357 @21.209s 3%: 0.016+0+0+0+1.6 ms clock, 0.067+0+0+0/0/0+6.7 ms cpu, 69-\u003e69-\u003e17 MB, 69 MB goal, 4 P (forced)\r\n```\r\n\r\nThe latter looks much more 'orderly', with apparently one freelist item being thrown out each time. The former is more variable. I suspect you could reproduce this with a much smaller test case by creating a program that does `Get` in a loop in a single goroutine, then immediately does `go Put()`, but I haven't tried.\r\n\r\nFor my notes: this is GoogleCloudPlatform/gcsfuse@04f3cfba749b64dbc03538744b7d3ac5de479097 and jacobsa/fuse@3755e07da2a399b3468b895c087047a23d5df488, running the benchmark like `./sequential_read --dir ~/mp --file_size 67108864 --read_size 1048576 --duration 10s`.",
	"user": {
		"login": "jacobsa",
		"id": 202895,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-23T01:50:22Z",
	"updated_at": "2015-07-23T01:50:22Z"
}
