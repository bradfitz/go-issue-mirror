{
	"id": 123986941,
	"body": "The program with concurrent GC is slower, because GC runs all the time.\r\nIf you look at these lines:\r\n```\r\ngc #562 @16.739s 6%: 1.8+0.43+2.4+4.2+0.34 ms clock, 5.5+0.43+0+0.93/1.8/0.82+1.0 ms cpu, 64-\u003e98-\u003e65 MB, 66 MB goal, 4 P\r\ngc #563 @16.749s 6%: 0.11+0.27+0.003+2.7+0.43 ms clock, 0.34+0.27+0+0/1.6/0.62+1.3 ms cpu, 64-\u003e82-\u003e49 MB, 65 MB goal, 4 P\r\n```\r\n\r\nThe second GC starts in 10ms after the first one, while the wall clock time of the first is 9.17ms.\r\nGoal of the second GC is set basically to the current heap size. Which leads to overallocation and the cycle repeats.\r\n\r\nBecause concurrent GC constantly lags behind it also runs more frequently: every ~6ms vs ~28ms for non-concurrent GC. This explains higher poll miss rate.\r\n\r\nWhat makes the situation worse in this case is that most of the overallocated memory is live at the end of GC, because it is added to the pool, and the pool is cleared only at the beginning of GC.",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-23T06:04:57Z",
	"updated_at": "2015-07-23T06:04:57Z"
}
