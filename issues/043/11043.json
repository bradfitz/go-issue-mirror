{
	"id": 84416344,
	"number": 11043,
	"state": "closed",
	"title": "x/mobile/cmd/gomobile: add iOS build support",
	"body": "This is the tracking bug for the gomobileâ€™s iOS build support.\r\n\r\nThere are two obvious strategies we can follow to build an *.app file from a Go package.\r\n\r\nThe first alternative is what misc/ios/go_darwin_arm_exec.go has been doing.\r\n\r\n* Require user to set GOIOS_DEV_ID, GOIOS_APP_ID, and GOIOS_TEAM_ID manually.\r\n* Target darwin/arm (and darwin/arm64 in the future) and build a binary.\r\n* Generate Info.plist, Entitlements.plist and ResourceRules.plist.\r\n* Compile the asset catalog and generate asset catalog plist file. (TBD)\r\n* codesign the the application directory.\r\n* Output the app file and optionally generate an IPA for ad-hoc distribution.\r\n\r\nOr a simpler alternative is to create a minimal Xcode project.\r\n* Create the minimal Xcode project. (TBD, CLI tools like xcodeproj is able to create projects, it must be doable.)\r\n* Target darwin/arm and build a binary.\r\n* Shell out to xcodebuild to build and app. (It will fail if there are no default signing authorities.)\r\n* Optionally we can output the generated xcode project to allow users to open it in Xcode.\r\n\r\nAny feedback or opinions about which way to follow?\r\n\r\ncc/ @crawshaw @hyangah @minux ",
	"user": {
		"login": "rakyll",
		"id": 108380,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Started"
		}
	],
	"assignee": {
		"login": "rakyll",
		"id": 108380,
		"type": "User",
		"site_admin": false
	},
	"comments": 11,
	"closed_at": "2015-06-29T20:17:05Z",
	"created_at": "2015-06-03T07:44:11Z",
	"updated_at": "2016-06-28T21:53:38Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
