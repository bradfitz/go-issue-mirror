{
	"id": 76330830,
	"body": "Would simply using pthread_sigmask() to temporarily block SIGPROF while calling clone() have worked too?  Or would generating SIGPROF and/or interrupting another thread still have caused clone() failures?\r\n\r\nCould there be any profiling inaccuracies if CPU profiling timers continue to countdown during clone(), but instead the SIGPROF signals are sent to a different thread?  Would it be worse than the status quo where we disable SIGPROF entirely and then re-enable it?\r\n\r\nI ask because technically I think right now calling syscall.ForkExec and runtime.SetCPUProfileRate concurrently could cause problems, as they both try to enable/disable the process-wide CPU profiler.  This can be fixed with a locking protocol, of course, but it seems like a slightly simpler solution would be to make SetCPUProfileRate exclusively responsible for modifying the process-wide CPU profiler state, and have ForkExec just modify the thread-local SIGPROF mask state.",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-27T04:45:27Z",
	"updated_at": "2015-02-27T04:45:27Z"
}
