{
	"id": 170633978,
	"body": "My understanding of where we stand is as follows: I would like to try to determine a single file that might allow different workflows to work together using a single format. People on the Glide team don't want that because it would be a suboptimal design, it would be different than other languages, and copying the version range from a tools design file to the standard lock file would \"hugely complicate the tool\".\r\n\r\nHere is my response to @mattfarina 's use cases:\r\n * application_information: Name, description, keywords are already present in source. Homepage and license are not. However, I don't see how this affects vendoring. (Looks like something for a central package manager).  Maybe we could improve godoc.org, but not in this issue.\r\n * consistent_team_setup_with_private: Maybe you can't do that today with `go get` or similar tools that just work off an import path. You don't need a package spec for that. If there is a problem with private repo creds, then we could leverage existing stored credential files or make our own. Doesn't appear to relate to this issue.\r\n * contact_owners: Unless you need to automate the contacting and message writing, then why can't you just read the README  or private message their github profile? Doesn't appear to relate to this issue anyway.\r\n * license_scan: If you vendor something or use a dependency, you had better review the license first. Sarbanes-Oxley reviews will require more then just oh, it is MIT. You need to know copyright assignment and actual license full text. Doesn't really relate to this issue anyway.\r\n * lock_version; Ah, here we go. You want to allow non-main packages to declare their allowed version ranges on each dependency and pin an exact version for main packages. We have established this. I can at least roughly agree with this. I think the vendor-spec + additions talked about could write this information down.\r\n * managed_vendored_dependencies: When building specific versions, I agree use the `vendor` folder to put in specific versions of your dependencies. I agree, organizations can choose to either check them in or fetch them after cloning or updating a repo. That's great. The above use case needs a meta-data file. This I roughly the same, but needs support for it from the tools.\r\n * single_import: I agree. The tool `govendor` has always done this and `govendor` uses `vendor-spec` so no problem here.\r\n * use_specific_version: looks like a more specific version of \"lock_version\". Same response. I'm fine with a meta-data file having the ability to note version ranges for packages of some sort and exact revisions for main packages. Defining a single field on `vendor-spec` should allow this.\r\n * work_with_private_packages: looks like a partial duplicate of \"consistent_team_setup_with_private\". Similar response. The answer isn't more meta-data files I would argue. However, I don't think it is relevant to this issue.\r\n * working_with_forks: Can't do that in Go and unless you want to build your own build system distinct from \"go\" and \"gb\", it will never do that. But it doesn't relate to this issue anyway.\r\n\r\nSo of the user stories you wrote down that relate to this issue, I really don't have a problem with them. I continue to not understand why vendor ranges can't live in a vendor-spec (lock typeish) file for those who wish to use them.\r\n",
	"user": {
		"login": "kardianos",
		"id": 755121,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-11T17:55:30Z",
	"updated_at": "2016-01-11T17:55:30Z"
}
