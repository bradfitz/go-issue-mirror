{
	"id": 152612695,
	"body": "\u003e @Redundancy My calling function then sends the request to something that can use the headers and path to look up the handle,\r\n\r\nClientTrace.Start gets a pointer to the http.Request, so with a bit of boilerplate it's easy to lookup a handle given an *http.Request.\r\n\r\n\u003e @Redundancy That way I can also more easily ignore any requests that someone else is making on the Transport.\r\n\r\nI think you're saying that the current API makes it impossible (or at least difficult) to change the tracing functions based on the context of the RoundTrip call. I can think of APIs that don't have this problem, but they're clumsier ... can you think of a compelling example where you need different tracing functions based on calling context?\r\n\r\nFor your library example, note that it's possible to allow the library and caller to both install their own tracing functions: the caller installs their ClientTrace object first, then the library installs a delegate object that invokes the caller's ClientTrace.Foo before calling its own ClientTrace.Foo.",
	"user": {
		"login": "tombergan",
		"id": 13954200,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-30T18:39:35Z",
	"updated_at": "2015-10-30T18:39:35Z"
}
