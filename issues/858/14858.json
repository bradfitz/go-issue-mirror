{
	"id": 141858856,
	"number": 14858,
	"state": "open",
	"title": "cmd/compile: improve escape analysis understanding of tree structures",
	"body": "```go\r\npackage x\r\n\r\ntype N struct {\r\n\tleft *N\r\n\tt    string\r\n}\r\n\r\nfunc f(n *N) {\r\n\tn.t = n.left.t\r\n}\r\n```\r\n\r\n```bash\r\n$ go tool compile -m -m e.go\r\ne.go:8: leaking param content: n\r\ne.go:8: \tfrom n.left (dot of pointer) at e.go:9\r\ne.go:8: \tfrom n.left.t (dot of pointer) at e.go:9\r\ne.go:8: \tfrom n.t (star-dot-equals) at e.go:9\r\n```\r\n\r\nI believe that n should not escape here.\r\n\r\nThis arises in the compiler. It is one of the reasons that typecheck1's np argument escapes. (The new escape analysis explainer is very exciting.) 15% of the allocations in the compiler are `*gc.Node`, almost all of them due to moving `*gc.Node` parameters to the heap for calls to typecheck1. (After `*gc.Node` come `gc.Nodes` at 9%, `gc.Node` at 8.5%, `[]*gc.Node` at 5.5%, and `string` at 5%.)\r\n\r\nThis strikes me as hard to fix in the general case, but figured it was worth checking.\r\n\r\n@dr2chase \r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2016-03-18T12:57:40Z",
	"updated_at": "2016-03-21T23:00:29Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
