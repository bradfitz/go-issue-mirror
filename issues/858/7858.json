{
	"id": 51287314,
	"number": 7858,
	"state": "closed",
	"title": "sync: A deadlock occurs when call the Wait() of a Cond associated with the RLocker of a RWMutex after call the Lock() of the RWMutex",
	"body": "\u003cpre\u003e// What does 'go version' print?\ngo 1.2.1\n\n// What steps reproduce the problem?\n// If possible, include a link to a program on play.golang.org.\n\nPlease see \u003ca href=\"http://play.golang.org/p/519bXABwl_\"\u003ehttp://play.golang.org/p/519bXABwl_\u003c/a\u003e .\n\nWhen I comment 'rlocker.Lock()' in line 19 and run the program, it will occurs a\ndeadlock.\n\nI discovered that the method Wait() of 'cond' calls the method RUnlock() of 'rwmutex '.\nAnd, RUnlock() will do not release semaphore 'writerSem' when RLock() not be called\nbefore this. But rwmutex.Lock() will acquires semaphore 'writerSem'. In this program, it\nwill make a deadlock. \n\nAlthough I not using 'cond' in the correct way designedly, but it does create some\nsticky issue. That should be a BUG, right?\n\nI look forward to the reply.\u003c/pre\u003e",
	"user": {
		"login": "hyper-carrot",
		"id": 315569,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 8,
	"closed_at": "2014-12-08T10:43:35Z",
	"created_at": "2014-04-24T09:27:47Z",
	"updated_at": "2016-06-25T01:33:01Z",
	"milestone": {
		"id": 1067218,
		"number": 21,
		"title": "Go1.4"
	}
}
