{
	"id": 179374892,
	"number": 17245,
	"state": "open",
	"title": "os/exec: TestContextCancel flaky (on Windows?)",
	"body": "### What version of Go are you using (`go version`)?\r\ngo version devel +e6143e1 Mon Sep 26 01:51:31 2016 +0000 windows/386\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nset GOARCH=386\r\nset GOBIN=\r\nset GOEXE=.exe\r\nset GOHOSTARCH=386\r\nset GOHOSTOS=windows\r\nset GOOS=windows\r\nset GOPATH=c:\\dev\r\nset GORACE=\r\nset GOROOT=c:\\dev\\go\r\nset GOTOOLDIR=c:\\dev\\go\\pkg\\tool\\windows_386\r\nset CC=gcc\r\nset GOGCCFLAGS=-m32 -mthreads -fmessage-length=0 -fdebug-prefix-map=C:\\DOCUME~1\\brainman\\LOCALS~1\\Temp\\go-build338345670=/tmp/go-build -gno-record-gcc-switches\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\n\r\n### What did you do?\r\nI run `all.bat`.\r\n\r\n### What did you expect to see?\r\nall.bat run to successful completion.\r\n\r\n### What did you see instead?\r\n```\r\nok      os      2.015s\r\n--- FAIL: TestContextCancel (0.03s)\r\n        exec_test.go:946: program unexpectedly exited successfully\r\nFAIL\r\nFAIL    os/exec 15.669s\r\n```\r\nThis happens only occasionally. I discovered this while working on CL 29700 which makes this test fail more often.\r\n\r\nIf I understand TestContextCancel correctly, there is an expected race there between goroutine killing process and another goroutine checking that process was killed. And the error above seems like a wrong turn of that race. I don't see how the race can be avoided altogether. Not sure how to fix this. Maybe I am wrong about this.\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsInvestigation"
		},
		{
			"name": "Testing"
		}
	],
	"comments": 0,
	"created_at": "2016-09-27T01:09:35Z",
	"updated_at": "2016-09-27T03:17:32Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
