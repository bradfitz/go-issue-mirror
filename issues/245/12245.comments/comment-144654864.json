{
	"id": 144654864,
	"body": "\u003e For binding 3rd party packages, the user can wrap them with more meaningful names\r\n\r\nPlease reconsider this decision. One of the strengths with the Go ecosystem is that it is incredibly easy to share code. If I build a useful library and every developer will now have to manually write a wrapper the barrier to adoption is significantly higher.  For example, I would love to just be able to go get a library to handle networking (checking network type WiFi/3G/etc) or location and just have it work. Having to now write a bunch of code to essentially re-implement the API imposes an unnecessary burden.\r\n\r\nAll of these problems are very easily solved if you just provide a separate command in gomobile to build. Then I can do the following easily:\r\n\r\n    $ gobind pkg1\r\n    $ gobind pkg2\r\n    $ gobind pkg3\r\n\r\nNow manually create my main\r\n\r\n    package main\r\n\r\n    import (\r\n        _ \"pkg1\"\r\n        _ \"pkg2\"\r\n        _ \"pkg3\"\r\n    )\r\n    \r\n    func main() {\r\n        panic(\"Does nothing!\")\r\n    }\r\n\r\nAnd build\r\n\r\n    $ gomobile build -target=ios -buildmode=objc-framework\r\n\r\nThis is consistent with how the go tool works and makes sharing code very easy. Even better, I can use `go generate` and it all fits beautifully into the existing go workflow. As an added bonus the source is now available for me to debug.\r\n\r\nEDIT: I forgot to add, that the above approach has the advantage that it makes incremental builds possible. Having gobind being run automatically by Intellij/Android Studio/XCode is very helpful since it avoids build errors. Right now the framework / aar is rebuilt on every iteration. \r\n",
	"user": {
		"login": "sridharv",
		"id": 326998,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-01T08:31:10Z",
	"updated_at": "2015-10-01T08:36:16Z"
}
