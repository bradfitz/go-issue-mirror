{
	"id": 167471350,
	"number": 16494,
	"state": "closed",
	"title": "cmd/compile: \u0026T{} generates different assembly than new(T)",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n```\r\n$ go version\r\ngo version go1.7rc3 darwin/amd64\r\n```\r\n(Also tested with go1.6.2)\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n`darwin/amd64`\r\n\r\n3. What did you do?\r\nCreate a simple struct `User`, and benchmark the difference between `\u0026User{}` and `new(User)`:\r\nhttps://github.com/prashantv/go-bench/blob/master/new_bench_test.go\r\n\r\n4. What did you expect to see?\r\nBoth to have the same performance and disassembly.\r\n\r\n5. What did you see instead?\r\n`new` is consistently faster. Looking at the disassembly, `new(User)` does less work than `\u0026User{}`.\r\n\r\n`new` does:\r\n```\r\nMOVQ BX, 0(SP)\r\nCALL runtime.newobject(SB)\r\nMOVQ 0x8(SP), CX\r\nMOVQ 0x40(SP), AX\r\n```\r\nand then increments the counter and jumps to the if check.\r\n\r\n`\u0026User{}` is similar but then also stores a lot of 0s before jumping to the if check:\r\n```\r\nMOVQ BX, 0(SP)\r\nCALL runtime.newobject(SB)\r\nMOVQ 0x8(SP), CX\r\nXORL BP, BP\r\nMOVQ BP, 0(CX)\r\nMOVQ BP, 0x8(CX)\r\nMOVQ BP, 0x10(CX)\r\nMOVQ BP, 0x18(CX)\r\nMOVQ BP, 0x20(CX)\r\nMOVQ 0x40(SP), AX\r\n```\r\n\r\nIt seems like `\u0026T{}` is zeroing out the value even though `runtime.newobject` already returns a zero'ed out object.",
	"user": {
		"login": "prashantv",
		"id": 140159,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2016-07-25T23:56:44Z",
	"created_at": "2016-07-25T21:34:11Z",
	"updated_at": "2016-07-25T23:56:44Z"
}
