{
	"id": 129635753,
	"body": "type safety is guaranteed, because in a body of function the generic pointer cannot be cast, copied to concrete pointer. all generic pointer typed variables originate from a concrete function call site (function arguments), where *foo becomes *. the function then manipulates the * pointers without knowing actual type it points to (foo).\r\n\r\nit's true that this proposal is too weak compared to multi parametric polymorphism like templates in c++:\r\n\r\n        template\u003cclass T1, class T2\u003e struct Can_copy {\r\n            static void constraints(T1 a, T2 b) { T2 c = a; b = a; }\r\n            Can_copy() { void(*p)(T1,T2) = constraints; }\r\n        };\r\n\r\nhowever Rusell please consider. a reason why 1 parametric might be enough is that often in practice it's possible to reduce a problem that at first glance requires multi parametric polymorhpism to former.\r\n\r\nlets say\r\n\r\n    func DoWithTwoTypes\u003ct1 , t2\u003e (foo *t1, bar *t1, baz *t2) {\r\n       ...\r\n    }\r\n\r\ncan be split to\r\n\r\n     func DoWith(foo *, bar *) chain {\r\n         ...\r\n      }\r\n      func (c chain) AndWith(baz *) {\r\n        }\r\n\r\nthen used:\r\n\r\n       DoWith(a,b).AndWith(c)\r\n",
	"user": {
		"login": "anlhord",
		"id": 10063650,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-10T22:38:58Z",
	"updated_at": "2015-08-10T22:39:30Z"
}
