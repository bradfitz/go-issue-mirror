{
	"id": 204322086,
	"body": "The architecture is amd64; the CPU is an Intel Core i5 750.\r\nBoth the userland and the base system and the jail are `10.2-RELEASE-p13`.\r\n\r\nI tried with a simple hello world program.\r\n\r\n- Building it out of the jail works. Running the generated executable in the jail works.\r\n- Building it in the jail results in the go runtime getting stuck the same way.\r\n\r\nFinally I tried a hello world program using the `C` package:\r\n\r\n```go\r\n\r\npackage main\r\n\r\n// #include \u003cstdio.h\u003e\r\n//\r\n// static void helloWorld() {\r\n//     printf(\"hello world\\n\");\r\n// }\r\nimport \"C\"\r\n\r\nfunc main() {\r\n        C.helloWorld()\r\n}\r\n```\r\n\r\nBuilding it out of the jail, then running it in the jail results in it getting stuck.\r\nOur software also uses `C`, and also gets stuck in the same situation.\r\nDoes the go runtime use `C` ? If yes, there could be something wrong with `C` when running in a jail.\r\n\r\n`_umtx_op` seems to be pthread-related, and afaik, cgo uses pthreads. This would make sense.",
	"user": {
		"login": "galdor",
		"id": 37804,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-01T09:09:19Z",
	"updated_at": "2016-04-01T09:14:37Z"
}
