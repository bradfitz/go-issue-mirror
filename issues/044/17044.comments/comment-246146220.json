{
	"id": 246146220,
	"body": "\u003e Can we let the frontend generate code to use the runtime function when ssaEnabled is not true since the non-ssa backend is likely to be removed for 1.8 anyway or would that be a violation of the separation between the stages?\r\n\r\nIt might take a bit of work to get ssaEnabled available earlier in the compiler.\r\n\r\nWe've resisted doing this so far, in part to make it easier for people working on the migration. However, maybe it's time. Then we could start now on eliminating bits of the mid-tier in a way that'd be easy to cope with when the old backend is gone for good. Thoughts, @randall77?\r\n\r\n\u003e OARRAYBYTESTRTMP does not sound like a good name to me.\r\n\r\nIn very old versions of the compiler, there were no slices in Go yet, only arrays. Slices were clearly then hacked in as array variants. We've been slowly cleaning that up ever since (only last week I separated OSLICELIT from OARRAYLIT). So yeah, we should do a bunch of renaming at some point. \r\n\r\nStill sitting in my pile of unmailed CLs:\r\n\r\n```\r\ngorename -from '\"cmd/compile/internal/gc\".OPROC' -to OGO\r\n\r\nTODO:\r\nOARRAYBYTESTR\r\nOARRAYBYTESTRTMP\r\nOARRAYRUNESTR\r\nOSTRARRAYBYTE\r\nOSTRARRAYBYTETMP\r\nOSTRARRAYRUNE\r\n```\r\n\r\nand\r\n\r\n```\r\ncmd/compile: add Node.IsMethod method\r\n\r\nGenerated by eg:\r\n\r\nfunc before(n *gc.Node) bool { return n.Type.Recv() != nil }\r\nfunc after(n *gc.Node) bool  { return n.IsMethod() }\r\n\r\nfunc before(n *gc.Node) bool { return n.Type.Recv() == nil }\r\nfunc after(n *gc.Node) bool  { return !n.IsMethod() }\r\n```\r\n\r\n\r\n\u003e Other string functions (e.g. stringtoslicebytetmp) seem to be also good candidates to be handled directly by either frontend or backend instead of a runtime function.\r\n\r\nSGTM\r\n\r\n\r\n",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-10T22:08:45Z",
	"updated_at": "2016-09-10T22:08:45Z"
}
