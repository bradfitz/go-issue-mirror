{
	"id": 111949591,
	"number": 12969,
	"state": "closed",
	"title": "archive/zip unsupported compression algorithm for aes_256 password protected zips",
	"body": "TL;DR archive/zip cannot decompress a password protected with AES 256 encryption, deflated archive.\r\n\r\nAnswers to the 5 questions:\r\n- go version go1.5 darwin/amd64\r\n- OSX Yosemite Version 10.10.5 (14F27) / 2.4 GHz Intel Core 2 Duo\r\n- Attempted to unzip password protected .zip file:\r\n  - Password Encryption was set to AES256\r\n  - Zip Compression Method was set to COMP_DEFLATE\r\n  - Zip Compression Level was set to DEFLATE_LEVEL_NORMAL\r\n- Expected that the zip file would be extracted fully – as successfully tested using other tools including [unar](http://unarchiver.c3.cx/commandline) and http://online.b1.org/online\r\n- err returned ErrAlgorithm – \"zip: unsupported compression algorithm\"\r\n\r\nI should begin by mentioning that, if the Java code is modified to comment out the following lines; that archive/zip can handle these files without issue:\r\n\r\n    // parameters.setEncryptFiles(true);\r\n    // parameters.setEncryptionMethod(Zip4jConstants.ENC_METHOD_AES);\r\n    // parameters.setAesKeyStrength(Zip4jConstants.AES_STRENGTH_256);\r\n    // parameters.setPassword(\"verySecurePassword\");\r\n\r\nThe jar file for `net.lingala.zip4j` is at  www.lingala.net/zip4j/download.php; The following commands compiled and ran the java code below in terminal:\r\n\r\n    $\u003e javac -cp zip4j_1.3.2.jar ZipTest.java\r\n    $\u003e java -cp .:./zip4j_1.3.2.jar ZipTest\r\n\r\nBelow is the Java code used to generate the zip file. \r\n\r\n    import java.io.File;\r\n    import net.lingala.zip4j.core.ZipFile;\r\n    import net.lingala.zip4j.model.ZipParameters;\r\n    import net.lingala.zip4j.util.Zip4jConstants;\r\n\r\n    public class ZipTest {\r\n\r\n    \tpublic static void main(String[] args)\r\n    \t{\r\n    \t\tSystem.out.println(\"starting...\");\r\n\r\n    \t\ttry {\r\n    \t\t\tZipFile zipFile = new ZipFile(\"/Users/alex/Desktop/test_nopass.zip\");\r\n\r\n    \t\t\tZipParameters parameters = new ZipParameters();\r\n    \t\t\tparameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE);\r\n    \t\t\tparameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_NORMAL);\r\n    \t\t\tparameters.setEncryptFiles(true);\r\n    \t\t\tparameters.setEncryptionMethod(Zip4jConstants.ENC_METHOD_AES);\r\n    \t\t\tparameters.setAesKeyStrength(Zip4jConstants.AES_STRENGTH_256);\r\n    \t\t\tparameters.setPassword(\"verySecurePassword\");\r\n\r\n    \t\t\tzipFile.addFile(new File(\"/Users/alex/Desktop/test.txt\"), parameters);\r\n    \t\t} catch (Exception e) {\r\n    \t\t\tSystem.out.println(e.getMessage());\r\n    \t\t}\r\n    \t\tSystem.out.println(\"done\");\r\n    \t}\r\n    }\r\n\r\nand below is the main.go code for attempting to decompress the zip archive\r\n\r\n    package main\r\n\r\n    import (\r\n    \t\"archive/zip\"\r\n    \t\"fmt\"\r\n    \t\"log\"\r\n    \t\"os\"\r\n    \t\"path\"\r\n    )\r\n\r\n    func main() {\r\n    \t// Open a zip archive for reading.\r\n    \tr, err := zip.OpenReader(\"/Users/alex/Desktop/test.zip\")\r\n    \tif err != nil {\r\n    \t\tlog.Fatal(err)\r\n    \t}\r\n    \tdefer r.Close()\r\n\r\n    \t// Iterate through the files in the archive,\r\n    \t// printing some of their contents.\r\n    \tfor _, fi := range r.File {\r\n    \t\tfmt.Printf(\"Contents of %s:\\n\", fi.Name)\r\n    \t\tfmt.Printf(\"Size compressed: %d bytes\\n\", fi.CompressedSize64)\r\n    \t\tfmt.Printf(\"Size uncompressed:%d bytes\\n\", fi.UncompressedSize64)\r\n    \t\tfmt.Printf(\"Creator Version: %d\\n\", fi.CreatorVersion)\r\n    \t\tfmt.Printf(\"Reader Version: %d\\n\", fi.ReaderVersion)\r\n    \t\tfmt.Printf(\"Flags: %d\\n\", fi.Flags)\r\n    \t\tfmt.Printf(\"Method: %d\\n\", fi.Method)\r\n    \t\tfmt.Printf(\"Extra: %s\\n\", fi.Extra)\r\n\r\n    \t\tf, err := os.Create(path.Join(\"/Users/alex/Desktop\", fi.Name))\r\n    \t\tif err != nil {\r\n    \t\t\tf.Close()\r\n    \t\t\tfmt.Println(err)\r\n    \t\t}\r\n\r\n    \t\trc, err := fi.DataOffset()\r\n    \t\tif err != nil {\r\n    \t\t\tfmt.Println(err)\r\n    \t\t} else {\r\n    \t\t\tfmt.Printf(\"%d\", rc)\r\n    \t\t}\r\n    \t\tf.Close()\r\n    \t}\r\n    \tfmt.Println(\"DONE!\")\r\n    }\r\n",
	"user": {
		"login": "alexmcroberts",
		"id": 189079,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2015-10-17T16:02:48Z",
	"created_at": "2015-10-17T07:48:47Z",
	"updated_at": "2016-10-17T07:32:18Z"
}
