{
	"id": 203155317,
	"body": "Looks like this is related to the following in SSA (ssa.go:OAS case):\r\n```\r\n\t\tif rhs != nil \u0026\u0026 rhs.Op == OAPPEND {\r\n\t\t\t// Yuck!  The frontend gets rid of the write barrier, but we need it!\r\n\t\t\t// At least, we need it in the case where growslice is called.\r\n\t\t\t// TODO: Do the write barrier on just the growslice branch.\r\n\t\t\t// TODO: just add a ptr graying to the end of growslice?\r\n\t\t\t// TODO: check whether we need to do this for ODOTTYPE and ORECV also.\r\n\t\t\t// They get similar wb-removal treatment in walk.go:OAS.\r\n\t\t\tneedwb = true\r\n\t\t}\r\n```\r\nSo we need to be less aggressive in adding back the write barrier.  The frontend basically punts to the backend to decide if write barriers are needed (walk.go, OAS case):\r\n```\r\n\t\t\tif r.Op == OAPPEND {\r\n\t\t\t\t// Left in place for back end.\r\n\t\t\t\t// Do not add a new write barrier.\r\n\t\t\t\tbreak opswitch\r\n\t\t\t}\r\n```\r\n\r\nFor `*p = append(*p, x)` we need to generate code like:\r\n```\r\na := *p\r\nnewlen := a.len+1\r\nif newlen \u003e a.cap {\r\n   a = growslice()...\r\n   p.ptr = a.ptr  // with a write barrier\r\n   p.cap = a.cap\r\n}\r\np.len = newlen\r\na.ptr[newlen-1] = x // with a write barrier, if needed\r\n```\r\nThis code is similar to what we generate for the generic OAPPEND case, maybe we can share some code.\r\n\r\nSee #15023 for another case of this same problem.",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-29T23:23:35Z",
	"updated_at": "2016-03-29T23:24:33Z"
}
