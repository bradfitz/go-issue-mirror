{
	"id": 225057110,
	"body": "Thanks for the clarification; indeed your mail to the DTrace list didn't make it to me.\r\n\r\nDTrace disassembles functions to determine the return (and offset) probe points. If it encounters something that looks fishy it bails out. In particular if it finds a 0xcc (int 3) it figures that either a debugger is already in there (in which case there's no telling the identity of the original instruction) or that this an offset for a jump table. We're particularly paranoid about interpreting data as code since doing so would cause DTrace to dramatically (and hopefully fatally) change the operation of the program.\r\n\r\nI noticed that the int 3 padding is within the bounds of the symbol. Is that necessary? DTrace only look at the range of the function symbol. Is there a reason that the size needs to encompass the padding? Could the padding be beyond the range of the function?\r\n\r\nI understand the rationale behind using the int 3 as padding though I haven't seen other compilers do this.\r\n\r\nI'm not sure how we would fix this in DTrace without adding some special golang-specific workaround to ignore 0xcc trailing padding. And while I could get this into illumos and FreeBSD the processes around Mac OS X and Oracle Linux are a mystery.",
	"user": {
		"login": "ahl",
		"id": 677483,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-09T23:33:47Z",
	"updated_at": "2016-06-09T23:33:47Z"
}
