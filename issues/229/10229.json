{
	"id": 63886387,
	"number": 10229,
	"state": "closed",
	"title": "spec: clarify legal types of operands of x==y",
	"body": "The spec describes Comparability as a dynamic property of values, which makes sense because of the rule for interface comparisons, which may panic at run-time.\r\n\r\nThe == operator is said to \"apply to operands that are comparable\", but obviously a compiler cannot know whether the operands are comparable in general.  In the special case where the operand type has no comparable values (i.e., slice, map, func, and aggregates thereof), the compiler is capable of rejecting the comparison, but the spec wording neither requires nor forbids this check.\r\n\r\nGiven than all implementations apply some variation of this check, the intent is clear enough.  We should make the spec explicitly require it, so that a program such as this one\r\n  var m map[int]int\r\n  _ = m == m\r\nis unambiguously illegal.",
	"user": {
		"login": "adonovan",
		"id": 5658175,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 2,
	"closed_at": "2015-03-31T22:40:56Z",
	"created_at": "2015-03-24T02:35:50Z",
	"updated_at": "2016-06-25T02:03:52Z"
}
