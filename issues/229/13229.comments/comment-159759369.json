{
	"id": 159759369,
	"body": "\u003e does a mod of either 29# or 53# then simple modulos. The patch replaces this with a much more convoluted method. I think there needs to be some benchmarking justification for this less obvious code.\r\n\r\nyes, originally basic tests could return different results for 32/64 bit platforms due to a shorter list of primes for 32 bits. I think bringing them in-line matters because later functions can now safely make assumptions about what basicPrime() (consistently) does. for example you can always assume input's prime divisors \u003e 53.\r\n\r\njacobiP() needs a little help when recognizing squares. Since we already calculate \"input mod smallPrime\" why not also check whether this modulo is a quadratic non-residue. if so then input cant be a square. this extra info is very cheap to get, and it helps jacobiP() a lot.\r\n\r\n\u003e 1) M-R base 2 (because jfcg says it is a little faster than random bases)\r\n\u003e 2) if x \u003e 2^64, run n random-base M-R tests\r\n\u003e 3) run the Lucas test.\r\n\r\nI like this idea. random bases can be chosen from [ 3, (x-3)/2 ]\r\n\r\nFor small inputs I think this is good enough. They will take very short/hard-to-measure times to test. We will slowdown the significantly common use case (of testing numbers of 200+ bits) very slightly for numbers less then 32/64 bits. I dont think it is worth it.",
	"user": {
		"login": "jfcg",
		"id": 1410597,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-25T23:52:16Z",
	"updated_at": "2015-11-25T23:52:16Z"
}
