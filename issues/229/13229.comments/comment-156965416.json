{
	"id": 156965416,
	"body": "Re using PRNG bases is basically what GMP does.  The link I gave to Nicely's GMP pseudoprimes page discusses it and shows a number of cases where we can make it fail with what seems like a reasonable number of tests.  It's deterministic so one can search for numbers that pass many bases.\r\n\r\nThe idea of choosing parameters where (D|n)=-1 is discussed in Baillie/Wagstaff 1980.  It's used in most Frobenius style tests, as it gives *far* better results.\r\n\r\nI will reiterate that below 2^64, this should be a different discussion centered around the best performance vs. effort / maintainability.  There is no good reason to be doing a probable prime test, as there are well known methods for fast deterministic correct results.\r\n\r\nAbove 64-bit, there are a variety of methods with different tradeoffs.  My take (which is certainly debatable) is that BPSW (M-R base 2 followed by a strong, AES, or ES Lucas test) is the best starting point.  There are decent arguments for that being adequate by itself, but I can see why some might want additional tests, whether they be a Frobenius variant, additional fixed M-R (such as Mathematica adding a base 3 test), additional deterministic M-R, or additional non-deterministic (however far down the rathole one wants to chase that) M-R.  There will always be a small group that desires a proof for any input, but that has serious downsides for everyone else.\r\n\r\nIt's not a horrible sin to use just M-R, but it's a little disappointing.  GAP, Maple, Mathematica, Maxima, PARI/GP, and Sage all use some variant of BPSW, and as mathematics programs that have been around for a while they obviously care about correctness.  At a computational cost of ~3 M-R tests it is also quite efficient.",
	"user": {
		"login": "danaj",
		"id": 125502,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-16T09:23:54Z",
	"updated_at": "2015-11-16T09:23:54Z"
}
