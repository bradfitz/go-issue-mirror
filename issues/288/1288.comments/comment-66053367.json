{
	"id": 66053367,
	"body": "\u003ca id=\"c13\"\u003e\u003c/a\u003eComment 13 by **jdevilliers**:\n\n\u003cpre\u003e\"No, you can always compare a variable of an interface type to nil, but what does it\nmean?\"\n\nThis is exactly my point. What DOES is mean?  It should either do something meaningful,\nor not be allowed, in my opinion.\n\nMy idea of something meaningful is that it tests equal to the literal value nil if the\ninterface variable is either uninitialized or has been assigned a value (of any type\nthat implements the interface) that can also be compared to the literal value nil.  \n\nIn other words, if a pointer variable with value nil is assigned to the interface\nvariable, the resulting interface variable should still test equal to the literal value\nnil, otherwise you are saying that the literal value nil has different types depending\non the context. \n\nI do understand why it currently does not work like that.  An interface can be\nimplemented by ANY type, not just pointer types.  If the interface is implemented by a\nboolean type, for example, the test against the literal value nil is meaningless if the\nvalue of any such variable has been assigned to the interface variable.\n\nHandling pointer types differently would be a special case, but not without precedent. \nThere are already other places in the language where special work is done for pointer\ntypes. Of course, this would mean that the valid use of the interface variable in some\nsense becomes dependent on the implementation of the interface...\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-11-21T08:01:51Z",
	"updated_at": "2014-12-08T10:07:39Z"
}
