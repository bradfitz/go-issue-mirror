{
	"id": 66053366,
	"body": "\u003ca id=\"c12\"\u003e\u003c/a\u003eComment 12:\n\n\u003cpre\u003e\"Are you saying that the nil value for the struct type is not equal to the nil value for\nthe interface type, because their types are different, even though the struct type\nsatisfies the interface?\" Yes.\n\n\"In other words, it is okay to assign a variable of the struct type with value nil to a\nvariable of the interface type, but not to compare the resulting interface variable to\nnil?\" No, you can always compare a variable of an interface type to nil, but what does\nit mean?\n\nA variable i of an interface type may be set to nil or to a variable v whose type, the\nconcrete type, satisfies the interface type. Therefore, if i == nil, no variable that\nsatisfies the interface type is stored in the variable i. If i != nil, a variable v that\nsatisfies the interface type is stored in the variable i; the value of the variable v\nmay or may not be nil.\n\nA variable i of an interface type may be compared to a variable v whose type, the\nconcrete type, satisfies the interface type. Therefore, if i == v, the concrete type of\ni and value of i are the same as the type and value  of v. If i != v, the concrete type\nof i, value of i, or both are not the same as the type and value of v.\n\nHere's a simple illustration.\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar i interface{}\n\tvar p *int\n\n\t// i and p store different types\n\tfmt.Printf(\"i and p store different types\\n\")\n\t// concrete i is \u0026lt;nil\u0026gt;        ; p is (*int)(nil)\n\tfmt.Printf(\"concrete i is %#v        ; p is %#v\\n\", i, p)\n\t// interface i == nil is true ; p == nil is true ; concrete i == p is false\n\tfmt.Printf(\"interface i == nil is %#-5v; p == nil is %#-5v; concrete i == p is %#-5v\\n\",\n\t\ti == nil, p == nil, i == p)\n\n\ti = p\n\n\t// i and p store the same type\n\tfmt.Printf(\"i and p store the same type\\n\")\n\t// concrete i is (*int)(nil)  ; p is (*int)(nil)\n\tfmt.Printf(\"concrete i is %#v  ; p is %#v\\n\", i, p)\n\t// interface i == nil is false; p == nil is true ; concrete i == p is true \n\tfmt.Printf(\"interface i == nil is %#-5v; p == nil is %#-5v; concrete i == p is %#-5v\\n\",\n\t\ti == nil, p == nil, i == p)\n\n\ti = (*float)(nil)\n\n\t// i and p store different types\n\tfmt.Printf(\"i and p store different types\\n\")\n\t// concrete i is (*float)(nil); p is (*int)(nil)\n\tfmt.Printf(\"concrete i is %#v; p is %#v\\n\", i, p)\n\t// interface i == nil is false; p == nil is true ; concrete i == p is false\n\tfmt.Printf(\"interface i == nil is %#-5v; p == nil is %#-5v; concrete i == p is %#-5v\\n\",\n\t\ti == nil, p == nil, i == p)\n}\n\nOutput:\n\ni and p store different types\nconcrete i is \u0026lt;nil\u0026gt;        ; p is (*int)(nil)\ninterface i == nil is true ; p == nil is true ; concrete i == p is false\n\ni and p store the same type\nconcrete i is (*int)(nil)  ; p is (*int)(nil)\ninterface i == nil is false; p == nil is true ; concrete i == p is true \n\ni and p store different types\nconcrete i is (*float)(nil); p is (*int)(nil)\ninterface i == nil is false; p == nil is true ; concrete i == p is false\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-11-21T00:39:58Z",
	"updated_at": "2014-12-22T05:53:18Z"
}
