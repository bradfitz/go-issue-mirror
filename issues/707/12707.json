{
	"id": 107629270,
	"number": 12707,
	"state": "closed",
	"title": "cmd/internal/ld: dead code in macho.go",
	"body": "1f9dbb60 (part of the c2go transition) introduced the following translation\r\n```\r\nfunc machosymorder() {\r\n        // On Mac OS X Mountain Lion, we must sort exported symbols\r\n        // So we sort them here and pre-allocate dynid for them\r\n        // See https://golang.org/issue/4029\r\n        for i := 0; i \u003c len(dynexp); i++ {\r\n                dynexp[i].Reachable = true\r\n        }\r\n        machogenasmsym(addsym)\r\n        sortsym = make([]*LSym, nsortsym)\r\n        nsortsym = 0\r\n        machogenasmsym(addsym)\r\n        sort.Sort(machoscmp(sortsym[:nsortsym]))\r\n        for i := 0; i \u003c nsortsym; i++ {\r\n                sortsym[i].Dynid = int32(i)\r\n        }\r\n}\r\n```\r\nMost of which is dead code. The na√Øve response would be to delete the dead code, but I wonder if there is a regression lurking in here.\r\n\r\n/cc @ianlancetaylor @minux @crawshaw \r\n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2015-09-22T01:31:57Z",
	"created_at": "2015-09-22T01:20:02Z",
	"updated_at": "2015-09-23T14:09:31Z"
}
