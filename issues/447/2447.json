{
	"id": 51279226,
	"number": 2447,
	"state": "closed",
	"title": "cmd/8g: better floating point register optimization",
	"body": "\u003cpre\u003eFrom Charlie Dorian:\n\nI continued exploring using constants versus array elements in a\npolynomial evaluation with the 8g compiler. I added a fourth function\nto test,\n   func poly1(x float64) float64 {\n     return x * ((x*P[0]+P[1])*x+P[2]) / ((x*Q[0]+Q[1])*x+Q[2])\n   }\n   func poly2(x float64) float64 {\n     p := (x*P[0]+P[1])*x+P[2]; q := (x*Q[0]+Q[1])*x+Q[2]\n     return x * p / q\n   }\n   func poly3(x float64) float64 {\n     p := (x*P0+P1)*x+P2; q := (x*Q0+Q1)*x+Q2\n     return x * p / q\n   }\n   func poly4(x float64) float64 {\n     return x * ((x*P0+P1)*x+P2) / ((x*Q0+Q1)*x+Q2)\n   }\ntimed them (subtracting the function call overhead, results were\n5.56ns, 7.01ns, 7.54ns and 5.30ns) and examined the assembly code the\ncompiler produced.\n\nThis time, 8g produces perfect code for poly4. As before, poly2 and\npoly3 had additional code for the temporaries that was not yet\noptimized away.\n\nHowever, 8g produces extraneous instructions for poly1. For example:\n   ...\n   0005 (p.go:50) LEAL    P+0(SB),BX\n   0006 (p.go:50) MOVL    BX,AX\n   0007 (p.go:50) FMOVD   (BX),F0\n   0008 (p.go:50) FMULD   x+0(FP),F0\n   0009 (p.go:50) LEAL    P+0(SB),BX\n   0010 (p.go:50) ADDL    $8,BX\n   0011 (p.go:50) MOVL    BX,AX\n   0012 (p.go:50) FMOVD   (BX),F0\n   ...\nThe AX register is never later referenced. I tested the potential\nimprovement by a straightforward conversion of poly1 to assembly, so\nit now looked like:\n   ...\n   LEAL    ·P+0(SB),BX\n   FMOVD   (BX),F0\n   FMULD   x+0(FP),F0\n   LEAL    ·P+0(SB),BX\n   ADDL    $8,BX\n   FMOVD   (BX),F0\n   ...\nIt took 4.36ns. In other words, for 386 code, using an array was 22\npercent faster than using constants.\n\nIn summary, once 6g and 8g are improved, using arrays in source code\nwill produce the fastest polynomial evaluations, because, they're\nfaster for the 386 and the same as constants for the amd64.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Performance"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"closed_at": "2014-12-08T10:13:03Z",
	"created_at": "2011-11-11T20:19:31Z",
	"updated_at": "2016-06-24T21:20:25Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
