{
	"id": 254088243,
	"body": "Looks like this is related to the change in how `bytes.Index` works.  @TocarIP \r\n\r\nWhen looking for a smallish multicharacter string (in this case, 26 characters), we used to look for the first character, then check the remaining characters, then repeat.  Now we use fun SSE (AVX?) instructions to look for multiple characters at once.  The new way will definitely be faster when the first character matches but the rest don't (it is not slowed down by partial matches).  The old way looks like it is faster when there are few matches of the first character.  I'm surprised about how much faster it is, however.\r\n\r\nIt is possible that we should do some combination algorithm, looking for just the first character and switching once we get a few false positives (partial but not complete matches).\r\n\r\nAll that said, the regexp is still doing \u003e1GB/sec.  I think this may be an instance of \"something blazingly fast got a bit less blazingly fast\".",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-17T00:29:33Z",
	"updated_at": "2016-10-17T00:29:33Z"
}
