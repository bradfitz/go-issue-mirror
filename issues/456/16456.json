{
	"id": 166765687,
	"number": 16456,
	"state": "open",
	"title": "net/http: allow checking if http.Hijacker was already Hijacked",
	"body": "1.- What version of Go are you using (`go version`)?\r\ngo version go1.6.3 darwin/amd64\r\nbut should happen in all versions which has `Hijacker` support.\r\n\r\n2.- What operating system and processor architecture are you using (`go env`)?\r\ndarwin_amd64\r\n\r\n3.- What did you do?\r\nI'm using `httprouter` package to handle all kind of requests, these include websocket related ones. The router has a panic handler which helps writing useful info based on `http.Request`, `http.ResponseWriter` and an interface which defines the panic itself. But this problem is not related to the package, the absence of something to check if the connection is hijacked could derive in server errors due to an hijacked connection was in place and trying to write any kind of http data.\r\n```\r\nfunc handler(w http.ResponseWriter, _ *http.Request)\r\n{\r\n  hijacked := false\r\n  if h, ok := w.(http.Hijacker); ok {\r\n    hijacked = h.Hijacked\r\n  }\r\n\r\n  if !hijacked {\r\n    http.Error(w, \"\", http.StatusInternalServerError)\r\n  }\r\n}\r\n```\r\n4.- What did you expect to see?\r\nNothing if connection was already Hijacked.\r\n\r\n5.- What did you see instead?\r\n```\r\n2016/07/21 10:25:23 http: response.WriteHeader on hijacked connection\r\n2016/07/21 10:25:23 http: response.Write on hijacked connection\r\n```\r\n\r\nAny chance to accept a PR?\r\n",
	"user": {
		"login": "glerchundi",
		"id": 2232214,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FeatureRequest"
		}
	],
	"comments": 10,
	"created_at": "2016-07-21T08:36:46Z",
	"updated_at": "2016-07-22T06:38:27Z",
	"milestone": {
		"id": 1748849,
		"number": 42,
		"title": "Go1.8Maybe"
	}
}
