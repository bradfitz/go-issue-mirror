{
	"id": 180179542,
	"body": "@glasser: That would be a bit of an annoyance, but it would be simple enough to use variables for those conditional values.\r\n\r\n---\r\n\r\n@codeblooded \r\n\r\nWRT your `Account` vs `Profile` example https://github.com/golang/go/issues/12854#issuecomment-148102117, I would hope `what := {Name: \"John\"}` would be allowed and would result in neither type but would rather be equivalent to this:\r\n\r\n``` go\r\nwhat := struct {\r\n  Name string\r\n}{Name: \"John\"}\r\n```\r\n\r\nIt would only have a named type if it was assigned to a typed variable/field/parameter or cast as `Account(what)`.\r\n\r\nThis syntax would help with the problem @glasser describes.\r\n\r\n``` go\r\nparams := {A: 1, B: 2, C: 3}\r\n\r\nif true {\r\n  params.B += 40\r\n}\r\n\r\nFoo(params)\r\n```\r\n\r\nThis could only be used for structs and not maps, of course, unless the syntax was changed to be unambiguous:\r\n\r\n``` go\r\nwhat := struct {Name: \"John\"}\r\n\r\nconst Name = \"NAME\"\r\nwhat2 := map {Name: \"John\"}\r\n```\r\n\r\nThough perhaps parsing this would be more difficult.",
	"user": {
		"login": "Perelandric",
		"id": 1114646,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-05T03:40:58Z",
	"updated_at": "2016-02-05T03:41:41Z"
}
