{
	"id": 180453631,
	"body": "@Perelandric\r\n\r\n\u003e I would hope `what := {Name: \"John\"}` would be allowed and would result in neither type but would rather be equivalent to this\r\n\r\nThat would be inconsistent with the proposal (which is more \"allow elision of composite types\" than \"allow untyped composite literals\").  As you noted, using it for untyped structs introduces an unpleasant ambiguity between structs and maps.  It would also not work at all for composite literals using positional fields instead of explicit field names.\r\n\r\nBesides, it would be inconsistent: an implicitly-typed literal would mean \"a struct with only the mentioned fields\" in some contexts and \"a struct with non-mentioned fields having zero-values\" in others.  Given that Go does not (and IMO should not) apply subtyping to structs based on subsets of fields, that would make the feature surprising and non-orthogonal to the rest of the language.\r\n\r\n----\r\n\r\n@minux Honestly, I find that example more readable with a direct transliteration.\r\n\r\n    if something {\r\n        f({A: a, B: b, C: 1})\r\n    } else {\r\n        f({A: a, B: c, C: 2})\r\n    }",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-05T17:25:57Z",
	"updated_at": "2016-02-05T17:25:57Z"
}
