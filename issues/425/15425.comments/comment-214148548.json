{
	"id": 214148548,
	"body": "Hmm, I've tried digging into this with go version\r\n```shell\r\ngo version devel +758431f Mon Apr 25 02:13:58 2016 +0000 darwin/amd64\r\n```\r\n, because about 2 months ago, I encountered this same issue on production servers and worked around it by the same work around `io.Copy(ioutil.Discard, res.Body)`. However, I cannot reproduce your issue. Maybe something am missing, maybe tip fixed it? Does it run with code refresh from the latest/tip?\r\n\r\nI've updated your original code @nemothekid spinning a client and a server. The code is at https://github.com/odeke-em/bugs/tree/master/golang/15425 or here below inlined\r\n\r\n- client.go\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"crypto/tls\"\r\n\t\"io\"\r\n\t\"io/ioutil\"\r\n\t\"log\"\r\n\t\"net/http\"\r\n\t\"os\"\r\n\t\"strings\"\r\n\r\n\t\"golang.org/x/net/http2\"\r\n)\r\n\r\nfunc main() {\r\n\tserverURL := \"https://localhost:1333\"\r\n\tif envServURL := os.Getenv(\"SERVER_URL\"); envServURL != \"\" {\r\n\t\tserverURL = envServURL\r\n\t}\r\n\r\n\tcerts, err := tls.LoadX509KeyPair(\"key.crt\", \"key.key\")\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\ttr := \u0026http.Transport{\r\n\t\tTLSClientConfig: \u0026tls.Config{\r\n\t\t\tCertificates:       []tls.Certificate{certs},\r\n\t\t\tInsecureSkipVerify: true,\r\n\t\t},\r\n\t}\r\n\thttp2.ConfigureTransport(tr)\r\n\r\n\tclient := \u0026http.Client{\r\n\t\tTransport: tr,\r\n\t}\r\n\r\n\t// Make a GigaByte of data\r\n\traw := strings.Repeat(\"A\", 1024*1024*1024)\r\n\tlog.Printf(\"len(data)=%v\\n\", len(raw))\r\n\tsr := strings.NewReader(raw)\r\n\treq, err := http.NewRequest(\"POST\", serverURL, sr)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tlog.Printf(\"client.Do next\\n\")\r\n\tres, err := client.Do(req)\r\n\tlog.Printf(\"client.Do done\\n\")\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tn, err := io.Copy(ioutil.Discard, res.Body)\r\n\tlog.Printf(\"done Reading the server response's body n=(%v) err=%v\\nres.headers: %v\\n\", n, err, res.Header)\r\n\t_ = res.Body.Close()\r\n}\r\n``` \r\n\r\n- server.go\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"io\"\r\n\t\"io/ioutil\"\r\n\t\"log\"\r\n\t\"net/http\"\r\n\t\"strings\"\r\n\t\"time\"\r\n)\r\n\r\nfunc handler(w http.ResponseWriter, r *http.Request) {\r\n\tif r.Method == \"POST\" {\r\n\t\tlog.Printf(\"Received post request whose Headers are %v\", r.Header)\r\n\t\tif false {\r\n\t\t\tio.Copy(ioutil.Discard, r.Body)\r\n\t\t}\r\n\t\terr := r.Body.Close()\r\n\t\tlog.Printf(\"req.Body.Close() here, err=%v\\n\", err)\r\n\t\tif false {\r\n\t\t\ttime.Sleep(700 * time.Millisecond)\r\n\t\t}\r\n\t\t//http.Error(w, error, code)\r\n\t\tw.WriteHeader(413)\r\n\r\n\t\tb, err := io.Copy(w, strings.NewReader(strings.Repeat(\"XXXXXX\", 4192)))\r\n\t\tlog.Printf(\"Wrote %d bytes. Error: %v\", b, err)\r\n\t\treturn\r\n\t}\r\n\tw.Header().Set(\"Content-Type\", \"text/html\")\r\n\tw.Write([]byte(`\r\n    \u003cbody\u003e\r\n    \u003cscript type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0-beta1/jquery.min.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n      var reqs = 1;\r\n      $('body').text('Sending ' + reqs + ' requests...');\r\n      function send(i) {\r\n  var el = $('\u003cdiv class=\"req\"\u003eWaiting...\u003c/div\u003e').attr('id', i).appendTo('body');\r\n  var data = new FormData();\r\n  data.append('file', new File([new Blob([new Array(5 * 1024 * 1024).join('0')], {type: 'image/jpeg'})], 'test.jpg'));\r\n  var done = false;\r\n  var req = new XMLHttpRequest();\r\n  req.upload.onprogress = function(e) {\r\n    if (!e.lengthComputable || done) return;\r\n    el.text((e.loaded / e.total * 100) + '%');\r\n  }\r\n  req.onreadystatechange = function(e) {\r\n    if (done || req.readyState !== 3) return;\r\n    done = true;\r\n    el.text('Done. Got ' + req.status);\r\n  }\r\n  req.open('POST', '/', true);\r\n  req.send(data);\r\n      }\r\n      for (var i = 0; i \u003c reqs; i++)\r\n  send(i);\r\n    \u003c/script\u003e\r\n    \u003c/body\u003e\r\n  `))\r\n}\r\n\r\nfunc main() {\r\n\thttp.HandleFunc(\"/\", handler)\r\n\tif err := http.ListenAndServeTLS(\":1333\", \"key.crt\", \"key.key\", nil); err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n}\r\n```\r\n\r\nHowever, running it on my local network and debugging http2 gives\r\n- server\r\n```shell\r\n$ GODEBUG=http2debug=1 go run server.go \r\n2016/04/24 22:50:30 http2: server connection from [::1]:53481 on 0xc820088200\r\n2016/04/24 22:50:30 http2: server: client [::1]:53481 said hello\r\n2016/04/24 22:50:30 http2: server read frame SETTINGS len=18, settings: ENABLE_PUSH=0, INITIAL_WINDOW_SIZE=4194304, MAX_HEADER_LIST_SIZE=10485760\r\n2016/04/24 22:50:30 http2: server processing setting [ENABLE_PUSH = 0]\r\n2016/04/24 22:50:30 http2: server processing setting [INITIAL_WINDOW_SIZE = 4194304]\r\n2016/04/24 22:50:30 http2: server processing setting [MAX_HEADER_LIST_SIZE = 10485760]\r\n2016/04/24 22:50:30 http2: server read frame WINDOW_UPDATE len=4 (conn) incr=1073741824\r\n2016/04/24 22:50:30 http2: server read frame SETTINGS flags=ACK len=0\r\n2016/04/24 22:50:30 http2: server read frame HEADERS flags=END_HEADERS stream=1 len=44\r\n2016/04/24 22:50:30 Received post request whose Headers are map[Content-Length:[1073741824] Accept-Encoding:[gzip] User-Agent:[Go-http-client/2.0]]\r\n2016/04/24 22:50:30 req.Body.Close() here, err=\u003cnil\u003e\r\n2016/04/24 22:50:30 http2: server encoding header \":status\" = \"413\"\r\n2016/04/24 22:50:30 http2: server encoding header \"content-type\" = \"text/plain; charset=utf-8\"\r\n2016/04/24 22:50:30 http2: server encoding header \"date\" = \"Mon, 25 Apr 2016 05:50:30 GMT\"\r\n2016/04/24 22:50:30 Wrote 25152 bytes. Error: \u003cnil\u003e\r\n2016/04/24 22:50:30 http2: server read frame DATA stream=1 len=65535 data=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" (65279 bytes omitted)\r\n2016/04/24 22:50:30 http2: server read frame WINDOW_UPDATE stream=1 len=4 incr=12288\r\n2016/04/24 22:50:30 http2: server read frame WINDOW_UPDATE stream=1 len=4 incr=12864\r\n```\r\n\r\nand the client when run\r\n```shell\r\n$ go run client.go \r\n2016/04/24 22:56:28 len(data)=1073741824\r\n2016/04/24 22:56:28 client.Do next\r\n2016/04/24 22:56:28 client.Do done\r\n2016/04/24 22:56:28 done Reading the server response's body n=(25152) err=\u003cnil\u003e\r\nres.headers: map[Content-Type:[text/plain; charset=utf-8] Date:[Mon, 25 Apr 2016 05:56:28 GMT]]\r\n```\r\nonly the first 65535 of the client's Body are consumed in the HTTP2 server, res.Body.Close is successful and it writes out the response to the client asap.\r\n\r\nMaybe am missing something?",
	"user": {
		"login": "odeke-em",
		"id": 4898263,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-25T06:01:06Z",
	"updated_at": "2016-04-25T06:02:04Z"
}
