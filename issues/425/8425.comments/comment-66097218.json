{
	"id": 66097218,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eObservations so far:\n\n1) The bug is reproducible when considering only\n\n\t{GOOS: \"darwin\", GOARCH: \"386\"},\n\t{GOOS: \"windows\", GOARCH: \"amd64\"},\n\nas (goapi.go) contexts entries.\n\n2) The pkgCache contents are different depending on whether the asm_amd64.s file is\npresent or not: If the file is present, the pkgCache contains the keys (among others):\n\n\t$GOROOT/src/crypto/cipher\n\t$GOROOT/src/crypto/cipher,amd64\n\n(otherwise it's just:\n\n\t$GOROOT/src/crypto/cipher\n)\n\n3) The presence of the assembly file affects the go/build.Package.AllTags list; if the\nfile is present, the list contains the additional tag \"amd64\" for the cipher package.\n\n4) This tag list is used to create the respective pkgCache keys (see 2).\n\nFor reasons I don't fully understand yet, the type-checker must be using entries from\nthe $GOROOT/src/crypto/cipher and $GOROOT/src/crypto/cipher,amd64 package at the same\ntime - while the two packages are identical, the package pointers are not, resulting in\nan error.\n\nPossible explanations:\n\n- the goapi.go code assumes that the type-checker can handle packages that are\nisomorphic but have different package objects (that's not the case)\n- there's a bug in how goapi.go sets up the pkgCache.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-09-15T22:56:31Z",
	"updated_at": "2014-12-08T10:46:48Z"
}
