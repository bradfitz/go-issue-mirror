{
	"id": 253918740,
	"body": "@rressi The following\r\n```\r\npacked |= int(minValue \u003c x \u003c maxValue) \u003c\u003c i\r\n```\r\nis not particularly readable in my mind.\r\n```\r\nif minValue \u003c x \u003c maxValue:\r\n      packed |= 1\u003c\u003ci\r\n```\r\nseems clearer and not really a hardship to write. It may be more important in Python to have the int(boolean) conversion because it may be faster to execute than an extra 'if' - but that is just speculation on my part. There is absolutely no reason why the Go compiler couldn't be smarter in code generation.\r\n\r\nThere's another issue to consider: There's a cost (spec and learning) of defining int(bool). It's not clear what the result should be, either. int(true) could be 1, -1, or a value != 0. In some cases, you may want a different result, say 3. Then you'd write code like int(bool)*3. An if statement is much clearer.\r\n",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-14T21:03:31Z",
	"updated_at": "2016-10-14T21:03:31Z"
}
