{
	"id": 66083238,
	"body": "\u003ca id=\"c13\"\u003e\u003c/a\u003eComment 13:\n\n\u003cpre\u003eSome observations:\n\n1) It is trivial to \"convert\" from any comparable non-boolean value x to a boolean\nvalue; the operation is called comparison ==. There's absolutely no need for a different\nsyntax. We want people to write x != 0 which is very clear; we don't want people to\nwrite bool(x).\n\n2) It is trivial to \"convert\" from a boolean value to any other value using an if (or\nswitch) statement. If necessary, it can be enclosed in a function.\n\n3) Go provides built-in conversions between types where it otherwise would be hard to\nimpossible, extremely inefficient, or implementation-dependent to do a conversion (with\nthe notable exception of string(a_rune_value); but there have been suggestions to remove\nthis one). For bool-\u003enumeric, and numeric-\u003ebool this is not the case; the code is\nobvious, trivial, and reasonably efficient.\n\n4) It would be a sensible compiler optimization to produce specialized code for patterns\nof the form b := x != 0, etc. Also, a function of the form\n\nfunc toInt(b bool) int {\n   if b {\n      return 1\n   }\n   return 0\n}\n\nis not to hard to optimize by converting the if statement into a conditional move, and\ninline the function call away.\n\nIt seems not justified to add special conversions (and certainly not special notation)\nfor going from bools to numeric values and vice versa; and it's certainly not in the\nspirit of Go.\n\nLeaving as \"Thinking\" for now, just in case somebody makes a truly compelling argument;\nbut I suggest this issue be closed eventually as \"WorkingAsIntended\".\u003c/pre\u003e\n\n\n\n_Status changed to **Thinking**._",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-04-07T21:58:24Z",
	"updated_at": "2014-12-08T10:33:06Z"
}
