{
	"id": 66083240,
	"body": "\u003ca id=\"c15\"\u003e\u003c/a\u003eComment 15:\n\n\u003cpre\u003e(Perhaps not the best place for design discussions, but...)\n\nWhat you're asking for here is essentially Iverson bracket notation as originally\ncreated for APL and further popularized by Donald Knuth in mathematical papers and the\nbook Concrete Mathematics. \n\nThe idea is that \"[p]\", where p is a proposition (\"bool\" expression to Go) represents a\nnumber and has two possible values:\n\n[ false ] = 0\n[ true ] = 1\n\nExamples would be:\n\nx += [n \u0026gt; 4]\nc := [n \u0026lt; limit]*p(n)\nz += [IsPrime(k)]\n\nI would love this feature. It is simple to understand, easy to implement, and very\nefficient to generate code for.\n\nAs it happens, it _could_ be added to Go without changing the meaning of any valid Go\nprogram. Go now has \"[]\" to mean \"a slice\" and \"[ \u0026lt;index\u0026gt; ]\" to mean subscripting\nand map references. But it has no use of \"[ \u0026lt;boolean expression ]\" for anything.\n\nNote that it would NOT give subtly different meanings to \"a += slice[b]\" because\n\u0026lt;slice\u0026gt;[\u0026lt;numeric expression\u0026gt;]\" and monadic \"[ \u0026lt;boolean expression\u0026gt; ]\"\nare completely distinct. The parser would complain about \"boolean in integer context\" in\nthis case. However, the expression \"a += slice[[b]]\" would be legal and would mean\neither \"a += slice[0]\" or \"a += slice[1]\" depending on the truth of boolean expression\nb. If b were a numeric expression, this would not parse and yield the complaint \"numeric\nin boolean context\"\u003c/pre\u003e",
	"user": {
		"login": "MichaelTJones",
		"id": 7877285,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-05-30T14:09:59Z",
	"updated_at": "2014-12-22T06:27:28Z"
}
