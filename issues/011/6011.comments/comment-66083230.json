{
	"id": 66083230,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5 by **sjbogdan**:\n\n\u003cpre\u003e\u0026gt;compile it to a sequence without jumps\nIt is a bad idea. There are different cases where \"hot\" registers give the performance\ngain, compiler won't be able to handle all of them.\n\nThe whole point of the thread/issue is to handle a golang bool as a \"multiplicative\"\nvalue (int) with register.\n\nmax (x, y) :\nr = x ^ ((x ^ y) \u0026 -(x \u0026lt; y));\n\n( x \u0026lt; y ) will be stored in a ( compare ) register, won't be saved into a variable,\nthus ( ideally ) won't leave L1 cache. Cache / register techniques are highly optimized,\nalthough even gcc ( compiling c/c++ ) can't always produce good asm code for \"if blocks\".\n\nFrom the very beginning computer bit was designed as int. Is there a low level / asm\nexpert to give an opinion how it should be built ? ( or to prevent implementing bad\nideas ). I'm not rushing the issue, but I think it's important to resolve it in the\nearly stage.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-02T17:37:34Z",
	"updated_at": "2014-12-22T06:27:27Z"
}
