{
	"id": 173110382,
	"body": "\u003e ... this issue is breaking canonicality (uniqueness).\r\n\r\nYes filepath.EvalSymlinks is supposed to return the same path (same string) for the same file. filepath.EvalSymlinks documentation does not spell this out, but we have always assumed this to be true. @rsc asked for this:\r\n```\r\nI would like to be able to depend on filepath.EvalSymlinks\r\nreturning the canonical spelling of its argument.\r\nSo if root is C:\\GO and dir is c:\\go\\src\\cmd,\r\nI would like EvalSymlinks to return strings that\r\nare the actual canonical case recorded in the file system\r\n(say, C:\\Go and C:\\Go\\src\\cmd). \r\n```\r\nSee https://codereview.appspot.com/5713043/#msg5 for reference.\r\n\r\nOur current implementation is broken on computers like @jucie's. I think we need to try and correct that.\r\n\r\n\u003e ... remake it by CreateFile and GetFinalPathNameByHandle.\r\n\u003e It's not the best solution, it requires hacky workaround. In this mean, it is also kind of compromising.\r\n\r\nI am not sure what your proposal is. Feel free to send a CL to demonstrate. It can be quick and dirty. We can improve it, if it is a good solution.\r\n\r\n\u003e I don't know what is important for go's decision-making.\r\n\r\nSure. We could do nothing too. I will let @rsc to comment here.\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-20T06:44:42Z",
	"updated_at": "2016-01-20T06:44:42Z"
}
