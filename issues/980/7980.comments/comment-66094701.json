{
	"id": 66094701,
	"body": "\u003ca id=\"c10\"\u003e\u003c/a\u003eComment 10:\n\n\u003cpre\u003eTangentially, rejecting 32-bit addresses \u0026gt;=2**31 means 6l can't link programs using\nthe x86-64 kernel code model.  Under that model, the program is loaded into the top 2GB\nof memory, so sign extending addresses is okay/desirable.\n\nI prepared a CL (\u003ca href=\"https://golang.org/cl/117800044/)\"\u003ehttps://golang.org/cl/117800044/)\u003c/a\u003e to change the \"(int32)o \u0026lt;\n0\" check with \"o != (int32)o\", and also to change INITTEXT and INITDAT from int64 to\nuint64 (otherwise strtoll() caps the flags to LONG_MAX, and you can't specify an\nappropriate text address).  With that CL, I'm able to successfully link a Go hello-world\nprogram using -ldflags='-T 0xffffffff80000c00', and it looks right if I inspect it with\nreadelf.\n\nOf course, the Go runtime doesn't support running as a kernel, and no supported Go OS\nallows running userspace applications in this code model either, so it's perhaps moot.\u003c/pre\u003e",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-07-15T00:52:48Z",
	"updated_at": "2014-12-22T06:34:33Z"
}
