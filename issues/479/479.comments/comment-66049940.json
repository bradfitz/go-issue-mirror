{
	"id": 66049940,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003eIt would actually appear that when it's not referenced, there's no way to get dwarf\nsymbols for it. The \ncompiled program that ends up being output for the first one is:\n\ntypedef struct { char *p; int n; } _GoString_;\n_GoString_ GoString(char *p);\nchar *CString(_GoString_);\ntypedef enum {a, b, c, d} foo;\n\nvoid f(void) {\n#line 0 \"cgo-test\"\nc;\nd;\na;\nb;\n}\n\nAs you can see here, the enum is never referenced, and thus no dwarf stabs are generated\nfor it. As soon as \nwe reference C.foo:\n\ntypedef struct { char *p; int n; } _GoString_;\n_GoString_ GoString(char *p);\nchar *CString(_GoString_);\ntypedef enum {a, b, c, d} foo;\n\nvoid f(void) {\n#line 0 \"cgo-test\"\nc;\nd;\nfoo;\na;\nb;\n}\n\nThis yields dwarf stabs.\n\nUnfortunately, I'm not entirely sure how to deal with this. This pretty much means that\nany unnamed \nenumeration (e.g. enum { ... } as opposed to typedef enum { ... } bla) is unusable,\nessentially requiring godefs. \nI'll play around a bit, but I'm not sure I'm coming up with any solutions tonight.\u003c/pre\u003e",
	"user": {
		"login": "dhobsd",
		"id": 168647,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-12-30T04:19:01Z",
	"updated_at": "2014-12-08T10:04:46Z"
}
