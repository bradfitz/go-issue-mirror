{
	"id": 161793594,
	"number": 16157,
	"state": "open",
	"title": "cmd/compile: Optimize strings.Join with finite number of elements",
	"body": "1. What version of Go are you using (`go version`)?\r\ngo version go1.7beta2 linux/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\n\r\nIntel(R) Core(TM) i7-4870HQ CPU @ 2.50GHz\r\n\r\n\r\nGiven the following example: https://play.golang.org/p/a_ow6e7II7\r\n\r\nI would expect the compiler to transform the calls to `strings.Join` with a finite number of elements into simple string concatenations. The reason is that these calls might be used on hot-paths for code, for example: https://github.com/aws/aws-sdk-go/pull/729\r\n\r\nThe results might be small, see below for my machine, but any speed improvement is a good one imho\r\n \r\n```\r\ngo test -bench=.\r\nBenchmarkStringsJoin-8          10000000               140 ns/op\r\nBenchmarkStringsConcat-8        20000000                92.6 ns/op\r\nPASS\r\nok      some/package        3.505s\r\n\r\n\r\ngo test -bench=. -benchmem\r\nBenchmarkStringsJoin-8          10000000               136 ns/op             128 B/op          2 allocs/op\r\nBenchmarkStringsConcat-8        20000000                96.6 ns/op            64 B/op          1 allocs/op\r\nPASS\r\nok      some/package        3.565s\r\n```\r\n\r\nThank you.",
	"user": {
		"login": "dlsniper",
		"id": 607868,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"comments": 2,
	"created_at": "2016-06-22T21:42:04Z",
	"updated_at": "2016-06-23T13:38:54Z",
	"milestone": {
		"id": 1748849,
		"number": 42,
		"title": "Go1.8Maybe"
	}
}
