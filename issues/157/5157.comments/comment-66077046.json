{
	"id": 66077046,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eFor clarity: to get around this, it's opening _go_.6 (found via glob to be architecture\nindependent) in the filepath.Dir(os.Args[0]) and then looking with a regexp to find the\nsource file used to define package main, which works when main is one file, rather than\nthe result of everything in the directory.\n\nAs Brady puts it, \"jank\".  I can write it, I'd rather not maintain it.  :)\n\nWhile \"go run\" may be intended for playing, it's also the easiest way to run a tool\nwritten as a single Go file, so people will end up using it anyway.  I like Go for its\npragmatism, instead of telling folks they're doing it wrong by using the way set up to\nbe easiest.  I can document \"build first, or run from same directory\", but in practice,\nthat just results in pain and stalls when developers are trying to focus on something\nelse.  Rather than interrupt their mental flow, I added jank.\n\nIf we can just get the list of original gofiles in an environment variable, while\nrunning under \"go run\", it looks much more like existing concepts such as\n$SSH_ORIGINAL_COMMAND, $SUDO_COMMAND and is _reducing_ complexity by restoring the\ninformation that would normally be available via os.Args[0] but has otherwise been\nremoved by the \"go run\" intermediation.\n\nThanks.\u003c/pre\u003e",
	"user": {
		"login": "philpennock",
		"id": 559098,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-03-29T20:47:19Z",
	"updated_at": "2014-12-08T10:27:37Z"
}
