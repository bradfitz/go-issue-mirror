{
	"id": 51283212,
	"number": 5157,
	"state": "closed",
	"title": "cmd/go: run should provide a way to find the file being run.",
	"body": "by **brady@apcera.com**:\n\n\u003cpre\u003eRight now it is impossible to find the initial command line, or file being executed when\nI use \u0026quot;go run foo.go\u0026quot;, ideally the command line should be exposed via an\nenvironment variable, or some other mechanism so I can find out the user provided\ncommand line.\n\nOur current use case is this: There is a config file placed next to our binary. If I cd\ninto that directory and use \u0026quot;go run foo.go then I can open the file using\n'os.Open(\u0026quot;configfile\u0026quot;)'. If I build the program, then run the built file I can\nmake an assumption that the command should be near the binary, as such getting the\nabsolute directory for os.Args[0] works perfectly enough to find out where the config\nmight exist. However if the user uses go run somedir/foo.go its impossible to find out\neither the path to the go file, or the command line used without jank like opening the\ncompiled program being run (os.Args[0]) and looking for string paths.\n\nIdeally the initial command could be set in an environment variable such as\n\u0026quot;GO_RUN_COMMANDLINE\u0026quot; or some such so that the invoked application can find out\nwhat program was actually run.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 9,
	"closed_at": "2014-12-08T10:27:37Z",
	"created_at": "2013-03-29T18:28:02Z",
	"updated_at": "2016-06-24T22:36:42Z"
}
