{
	"id": 118682046,
	"body": "\u003e ... My one concern is that on Windows\r\n\u003e 7 I recently ran into an issue where I was using lxn/walk and it was\r\n\u003e crashing without a dump or trace of any kind (running tip). I'm not sure if\r\n\u003e it is the same issue or not, but it does concern my that I didn't get a\r\n\u003e dump of any kind.\r\n\r\nYou cannot expect stack trace every time. Sometimes, if memory gets corrupted, runtime won't be able to print stack trace. It depends on the bug. lxn/walk has not been updated for a while, and Go runtime changed a bit since then.\r\n\r\n\u003e ... I'll see if I can get a test case for that.\r\n\r\nHaving reproducible testcase is always helpful. Except this issue ... :-)\r\n\r\n\u003e ... What's the difference (on the stack or registers) between stdcall5 and stdcall1?\r\n\r\nFor amd64, see runtimeÂ·asmstdcall in sys_windows_amd64.go. One major difference is that for stdcall5 we store parameters on stack as well as in registers.\r\n\r\n\u003e ... If I put in a stdcall5 above the cgocall(...) function (it must be above that function) then it works. But that doesn't work with stdcall1.\r\n\r\nI don't understand you. Please try again.\r\n\r\n\u003e ... also in syscall_getprocaddress, if c.n is set to 5 (not 2), it also works. Does that just push more values onto the stack?\r\n\r\nSee my answer above. Are you're saying that one line change in syscall_getprocaddress fixes the problem?\r\nSend me the diff and I will try it tonight.\r\n\r\nAlex",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-06T00:14:01Z",
	"updated_at": "2015-07-06T00:14:01Z"
}
