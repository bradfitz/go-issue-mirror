{
	"id": 235171052,
	"body": "This is actually very easy to reproduce:\r\n\r\n```go\r\ntype funcReader func([]byte) (n int, err error)\r\n\r\nfunc (f funcReader) Read(p []byte) (n int, err error) { return f(p) }\r\n\r\nfunc TestUnreadFlowControlReturned(t *testing.T) {\r\n        unblock := make(chan bool, 1)\r\n        defer close(unblock)\r\n\r\n        st := newServerTester(t, func(w http.ResponseWriter, r *http.Request) {\r\n                \u003c-unblock\r\n        }, optOnlyServer)\r\n        defer st.Close()\r\n\r\n        tr := \u0026Transport{TLSClientConfig: tlsConfigInsecure}\r\n        defer tr.CloseIdleConnections()\r\n\r\n        for i := 0; i \u003c 10; i++ {\r\n                println(i)\r\n                body := io.MultiReader(\r\n                        io.LimitReader(neverEnding('A'), 16\u003c\u003c10),\r\n                        funcReader(func([]byte) (n int, err error) {\r\n                                unblock \u003c- true\r\n                                return 0, io.EOF\r\n                        }),\r\n                )\r\n                req, _ := http.NewRequest(\"POST\", st.ts.URL, body)\r\n                res, err := tr.RoundTrip(req)\r\n                if err != nil {\r\n                        t.Fatal(err)\r\n                }\r\n                res.Body.Close()\r\n                println(i, \"done\")\r\n        }\r\n\r\n}\r\n```\r\n\r\nAs feared, it hangs after 3 iterations, blocked on waiting for flow control to write the 4th body:\r\n\r\n```\r\ngoroutine 37 [semacquire]:\r\nsync.runtime_notifyListWait(0xc420014ed0, 0x0)\r\n        /Users/bradfitz/go/src/runtime/sema.go:267 +0x122\r\nsync.(*Cond).Wait(0xc420014ec0)\r\n        /Users/bradfitz/go/src/sync/cond.go:57 +0x80\r\ngolang.org/x/net/http2.(*clientStream).awaitFlowControl(0xc4202ea280, 0x1, 0x0, 0x0, 0x0)\r\n        /Users/bradfitz/src/golang.org/x/net/http2/transport.go:989 +0x11c\r\ngolang.org/x/net/http2.(*clientStream).writeRequestBody(0xc4202ea280, 0x507dc0, 0xc4202ec160, 0x12641e0, 0xc4202de150, 0x0, 0x0)\r\n        /Users/bradfitz/src/golang.org/x/net/http2/transport.go:904 +0x23c\r\ngolang.org/x/net/http2.(*Transport).getBodyWriterState.func1()\r\n        /Users/bradfitz/src/golang.org/x/net/http2/transport.go:1824 +0xa1\r\ncreated by golang.org/x/net/http2.bodyWriterState.scheduleBodyWrite\r\n        /Users/bradfitz/src/golang.org/x/net/http2/transport.go:1871 +0x8e\r\n```\r\n\r\nThis is pretty bad and I'm surprised nobody has encountered this earlier. Thanks for reporting it.\r\n\r\n@adg, @broady, this isn't a regression from Go 1.6, but it's pretty nasty and I think the fix will be easy.\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-26T06:02:54Z",
	"updated_at": "2016-07-26T06:02:54Z"
}
