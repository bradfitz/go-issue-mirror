{
	"id": 165537554,
	"body": "I believe I know what's going on here. If sigprof fails to acquire the stack barrier lock, it can still perform a traceback *if* the M is in a Cgo call. This makes the following sequence possible:\r\n\r\n1. M1: G1 performs a Cgo call (which, on Windows, is any system call, which could explain why this is easier to reproduce on Windows).\r\n2. M1: The Cgo call puts G1 into _Gsyscall state.\r\n3. M2: GC starts a scan of G1's stack. It puts G1 in to _Gscansyscall and acquires the stack barrier lock.\r\n4. M3: A profiling signal comes in. On Windows this is a global (though I don't think this matters), so the runtime stops M1 and calls sigprof for G1.\r\n5. M3: sigprof fails to acquire the stack barrier lock (because the GC's stack scan holds it).\r\n6. M3: sigprof observes that G1 is in a Cgo call, so it calls gentraceback on G1 with its Cgo transition point.\r\n7. M3: gentraceback on G1 grabs the currently empty g.stkbar slice.\r\n8. M2: GC finishes scanning G1's stack and installing stack barriers.\r\n9. M3: gentraceback encounters one of the just-installed stack barriers and panics.\r\n\r\nThe solution is that sigprof must not perform any user stack walking if it fails to acquire the stack barrier lock, regardless of the state of the G.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-17T18:22:18Z",
	"updated_at": "2015-12-17T18:22:18Z"
}
