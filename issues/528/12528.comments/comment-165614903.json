{
	"id": 165614903,
	"body": "I went through every (non-testing) use of gentraceback and every place that modifies stkbar or stkbarPos to root out remaining races:\r\n\r\n\u003ctable\u003e\r\n \u003ctr\u003e\u003ctd\u003e\u003c/td\u003e\u003ctd colspan=\"5\"\u003estkbar/stkbarPos write\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003egentraceback caller\u003c/td\u003e\r\n     \u003cth\u003estackBarrier (sync)\u003c/th\u003e\r\n     \u003cth\u003egcUnwindBarriers (stack lock + sync)\u003c/tg\u003e\r\n     \u003cth\u003esetNextBarrierPC (sync)\u003c/th\u003e\r\n     \u003cth\u003ecopystack (stack lock + sync)\u003c/th\u003e\r\n     \u003cth\u003escanstack (stack lock + safe point)\u003c/th\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003edumpgoroutine (STW)\u003c/td\u003e\u003ctd colspan=\"5\" rowspan=\"2\" align=\"center\"\u003eSTW\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003esaveg (STW)\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003ecallers/gcallers (sync)\u003c/td\u003e\u003ctd colspan=\"4\" rowspan=\"5\" align=\"center\"\u003esync\u003c/td\u003e\u003ctd\u003esync\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003ecopystack (stack lock + safe point)\u003c/td\u003e\u003ctd\u003estack lock\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003escanstack (stack lock + safe point)\u003c/td\u003e\u003ctd\u003estack lock\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003esigprof cgo (safe point)\u003c/td\u003e\u003ctd\u003e\u003cb\u003eUNSAFE\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003esigprof libcall (safe point)\u003c/td\u003e\u003ctd\u003e\u003cb\u003eUNSAFE\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003esigprof user (stack lock)\u003c/td\u003e\u003ctd\u003egtb fixup\u003c/td\u003e\u003ctd\u003estack lock\u003c/td\u003e\u003ctd\u003e\u003cb\u003eUNSAFE\u003c/b\u003e\u003c/td\u003e\u003ctd\u003estack lock\u003c/td\u003e\u003ctd\u003estack lock\u003c/td\u003e\u003c/tr\u003e\r\n\u003c/table\u003e\r\n\r\nThere are four labels on functions above: \"STW\" means the function stops the world, \"stack lock\" means that the function holds the stack lock while reading or writing stkbar, \"safe point\" means the function ensures the G is at a safe point, and \"sync\" means the function is running synchronously on the G and preventing safe points. Two \"stack lock\" functions are safe because they serialize on the lock. Two \"sync\" functions are safe because they cannot both be running on the G at the same time. A \"sync\" and a \"safe point\" function are safe because the sync function prevents the G from reaching a safe point, and the safe point function prevents the G from entering a sync function.\r\n\r\nFor each reader/writer pair, I've written what synchronizes them, if anything. In many cases there are multiple things that synchronize them, in which case I've picked one to simplify the table.\r\n\r\nThis shows that we still have three problems in profiling signals (two of which are essentially the same), and a frustrating level of complexity.\r\n\r\nI plan to make two changes to address these:\r\n\r\n1. Disallow cgo and libcall tracebacks in sigprof if it fails to acquire the stack barrier lock.\r\n2. Make setNextBarrierPC acquire the stack barrier lock.\r\n\r\nThis should simplify the synchronization down to:\r\n\r\n\u003ctable\u003e\r\n \u003ctr\u003e\u003ctd\u003e\u003c/td\u003e\u003ctd colspan=\"5\"\u003estkbar/stkbarPos write\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003egentraceback caller\u003c/td\u003e\r\n     \u003cth\u003estackBarrier (sync)\u003c/th\u003e\r\n     \u003cth\u003egcUnwindBarriers (stack lock + sync)\u003c/tg\u003e\r\n     \u003cth\u003esetNextBarrierPC (stack lock + sync)\u003c/th\u003e\r\n     \u003cth\u003ecopystack (stack lock + sync)\u003c/th\u003e\r\n     \u003cth\u003escanstack (stack lock + safe point)\u003c/th\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003edumpgoroutine (STW)\u003c/td\u003e\u003ctd colspan=\"5\" rowspan=\"2\" align=\"center\"\u003eSTW\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003esaveg (STW)\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003ecallers/gcallers (sync)\u003c/td\u003e\u003ctd colspan=\"5\"\u003esync\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003escanstack (stack lock + safe point)\u003c/td\u003e\u003ctd rowspan=\"4\"\u003esync\u003c/td\u003e\u003ctd colspan=\"4\" rowspan=\"5\"\u003estack lock\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003ecopystack (stack lock + safe point)\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003esigprof cgo (stack lock + safe point)\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003esigprof libcall (stack lock + safe point)\u003c/td\u003e\u003c/tr\u003e\r\n \u003ctr\u003e\u003ctd\u003esigprof user (stack lock)\u003c/td\u003e\u003ctd\u003egtb fixup\u003c/td\u003e\u003c/tr\u003e\r\n\u003c/table\u003e\r\n",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-17T23:29:54Z",
	"updated_at": "2015-12-17T23:29:54Z"
}
