{
	"id": 239027294,
	"body": "All of the numbers I quoted above are from an implementation where `mayhavework[i]` is false if `allp[i]` is queued in the global queue of idle Ps, otherwise true. So the variables really are very rarely updated.\r\n\r\nI started with a more aggressive implementations where `mayhavework[i]` is updated as you suggested above. In that case `mayhavework[i]` was implemented as an integer. There is a tradeoff of the size of integer to use, trading write collisions vs. read efficiency - I used 32-bit which worked well in my case. I also avoided redundant writes by only writing the new `mayhavework` value when it changed. \r\n\r\nI think the unknown in the more aggressive context is how often the question \"does this P have work\" is answered yes vs. no. In the system I was working in that led to this issue the answer was almost always \"no\" - most of the Ps were always idle and no longer updating their entries, but they were being read multiple times by each thread looking for work. ",
	"user": {
		"login": "bcbrock",
		"id": 11968347,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-10T22:43:10Z",
	"updated_at": "2016-08-10T22:43:10Z"
}
