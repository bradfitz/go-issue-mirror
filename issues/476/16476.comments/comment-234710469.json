{
	"id": 234710469,
	"body": "HI Bishop,\r\n\r\nIt would also be useful to see request latency and CPU load. \r\nThread parking/unparking strategy is the most tricky part of distributed task schedulers. It affects throughput, latency and CPU load. A change is not arguable if it improves at least one characteristic and makes no characteristic worse. Otherwise it is a matter of tradeoffs.\r\nTime spent in findrunnable is not very interesting per se. For example, if we reduce time in findrunnable, but spend equally more time in thread parking/unparking, that's a profitable change.\r\n\r\nIt may also make sense to benchmark 4 steal iterations + mayhavework.\r\n\r\nChanging this condition can also have profound effect:\r\n```go\r\n\tif !_g_.m.spinning \u0026\u0026 2*atomic.Load(\u0026sched.nmspinning) \u003e= procs-atomic.Load(\u0026sched.npidle) {\r\n\t\tgoto stop\r\n\t}\r\n```\r\nI've chosen the threshold with bind intuition and my desktop had only 16 hw threads at the time.\r\nYou may try reducing it all way down to 1 spinning goroutine at most.",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-23T10:05:04Z",
	"updated_at": "2016-07-23T10:05:04Z"
}
