{
	"id": 236965098,
	"body": "Regarding the slight throughput loss: Yes, I am arguing for changes that will likely increase latency / reduce performance slightly in some cases, the argument being that a small part of the current performance is \"accidental\" due to spending longer than necessary spinning.\r\n\r\nI have been looking at the HTTP benchmark for a couple of days. This benchmark is quite different from our application, for example threads entering the stealing loop have about a 90% chance of stealing work in the HTTP benchmark, but only about 20% in our application. The results are noisy - run-to-run variation is on the same order (low single-digit percentages) as the differences we're trying to observe. However if the data is real then in general the things I've proposed seem to reduce CPU time slightly for large GOMAXPROCS and seem to increase latency slightly in the HTTP benchmark. The work-stealing \"hit rate\" goes from 86.3% for the current scheduler to 84.8% with 2 loops and the `mayhavework` check here. A scheduler with exactly 1 permanently spinning thread looks like it would also work well for this benchmark.\r\n\r\nI agree that it would be useful to see a comprehensive study of scheduling heuristics on a large number of Go applications. Unfortunately I don't have a mandate to undertake that kind of study myself.",
	"user": {
		"login": "bcbrock",
		"id": 11968347,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-02T16:43:33Z",
	"updated_at": "2016-08-02T16:43:33Z"
}
