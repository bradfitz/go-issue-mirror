{
	"id": 51277194,
	"number": 982,
	"state": "closed",
	"title": "Extending interfaces",
	"body": "by **jdnurmi**:\n\n\u003cpre\u003eI thought this would be useful, but I'm open to being convinced otherwise.\n\nThe example case is a multi-level logger I was working on, but you could extrapolate\nyour own.\n\nGiven the basic type:\n\ntype Logger interface {\n  Log(int, string)\n}\n\nit'd be nice to be able to also declare derivitive functions off of the interface:\n\nfunc  (*Logger) Logf(lvl int, format string, v ...interface{}) {\n  Logger.Log(lvl, fmt.Sprintf(format, v))\n}\n\nAnd even nicer if I could do 'helpers' like:\n\nfunc  (*Logger) Debugf(format string, v ...interface{}) {\n  Logger.Log(Logger.DEBUG, fmt.Sprintf(format, v))\n}\n\nAs it is, without interface extension, I'd have to declare 'level helpers' as part of\nthe interface, or use the more awkward\n\nfunc Debugf(Logger, string, ...interface{}) \n\nsyntax, forcing the user to do something like:\n\nlogger.Debugf(log, fstring, vars)\n\nwhich feels much less pretty than the \n\nlog.Debugf(fstring, vars)\n\n\nIn this context, the Logger interface would only 'export' one function, but any type\nderived from the 'Logger' would have available, several functions that only require the\nlogger interface.\n\nI think that's in keeping with the language theme, but I'm happy to be wrong.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2014-12-08T10:06:35Z",
	"created_at": "2010-07-30T15:09:35Z",
	"updated_at": "2016-06-24T19:18:28Z"
}
