{
	"id": 66053684,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1 by **julian@quantumfyre.co.uk**:\n\n\u003cpre\u003eI just had a similar problem.  The cause seems to be typedef for unnamed structs - where\nthe underlying struct may not get the same auto-generated name for different go files. \nCL 3653041 applies the approach from \u003ca href=\"https://golang.org/issue/1222\"\u003eissue #1222\u003c/a\u003e to make typedefs consistent across\nfiles, and it fixes my problem (I can't test the files attached to this bug, as the\nproblem does not reproduce for me on MacOS X), though there is probably a better fix if\nyou know the code.  In particular I suspect (though I haven't checked) that two typedefs\n(used in separate go files) with the same name, but different underlying nameless\nstructs, will generate neither an error nor correct code.\n\nAttached is the reduced test case that I derived before I found this bug - just in case\nit is useful.\u003c/pre\u003e\n\n\n\n\n\nAttachments:\n\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1345/1/a.go\"\u003ea.go\u003c/a\u003e (81 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1345/1/b.go\"\u003eb.go\u003c/a\u003e (85 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1345/1/broken.h\"\u003ebroken.h\u003c/a\u003e (128 bytes)\n1. \u003ca href=\"https://storage.googleapis.com/go-attachment/1345/1/Makefile\"\u003eMakefile\u003c/a\u003e (95 bytes)",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-12-15T01:01:33Z",
	"updated_at": "2014-12-08T10:07:54Z"
}
