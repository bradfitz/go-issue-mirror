{
	"id": 122558723,
	"body": "Any ‘text’ file WILL have different line endings depending on the platform.  This is not a new phenomenon.  So, any test case *requiring* a specific line ending in a text file (which I would argue is itself broken), should ensure that file is in the format it needs one way or the other.  Whether that means it just reads an embedded string constant with escape sequences, writes that out to a file first (if using file IO is required in the test), or even translates after reading it in.\r\n\r\nOne of the tests mentioned in #9281 for eg. is just reading an 11 byte text file from disk and expecting an exact BYTE size - why?  There’s no reason for this at all.  Read it as a text file, correctly (Scanner and Reader.ReadLine already handle this properly) and it’s a non-issue.  Worst case, it could have those 11 bytes as a local constant.  \r\n\r\nIan, it looks like you’ve already got a diff up fixing the Go compiler itself being broken by EOL differences which is great, but technically, test cases failing because of ‘text’ file differences is broken as well.\r\nFor my immediate needs the former is really all I require but the latter staying broken would be unfortunate I think.\r\n\r\nThanks for all the great work in 1.5 guys…",
	"user": {
		"login": "pbennettinin",
		"id": 6741292,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-07-18T16:02:04Z",
	"updated_at": "2015-07-18T16:02:04Z"
}
