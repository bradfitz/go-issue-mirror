{
	"id": 66074417,
	"body": "\u003ca id=\"c15\"\u003e\u003c/a\u003eComment 15:\n\n\u003cpre\u003eHah. Everybody sucks at this.\n\nIn addition to that Python module not being able to decode its own encodings, the\n\"qprint\" command gets into states where it craps itself:\n\n$ echo -n \"0000= \" | qprint -d\nError: invalid character \"0xFFFFFFFF\" in soft line break sequence at byte 5 (0x5) of\ninput.\nError: invalid character \"0xFFFFFFFF\" in soft line break sequence at byte 5 (0x5) of\ninput.\nError: invalid character \"0xFFFFFFFF\" in soft line break sequence at byte 5 (0x5) of\ninput.\nError: invalid character \"0xFFFFFFFF\" in soft line break sequence at byte 5 (0x5) of\ninput.\nError: invalid character \"0xFFFFFFFF\" in soft line break sequence at byte 5 (0x5) of\ninput.\nError: invalid character \"0xFFFFFFFF\" in soft line break sequence at byte 5 (0x5) of\ninput.\nError: invalid character \"0xFFFFFFFF\" in soft line break sequence at byte 5 (0x5) of\ninput.\nError: invalid character \"0xFFFFFFFF\" in soft line break sequence at byte 5 (0x5) of\ninput.\nError: invalid character \"0xFFFFFFFF\" in soft line break sequence at byte 5 (0x5) of\ninput.\nError: invalid character \"0xFFFFFFFF\" in soft line break sequence at byte 5 (0x5) of\ninput.\n(spins forever)\n\n\nThis was from me trying to use qprint to check all possible sequences of up to 6 bytes\nwith an alphabet of \"0A \\r\\n=\":\n\n+\t\tif useQprint {\n+\t\t\tcmd := exec.Command(\"qprint\", \"-d\")\n+\t\t\tcmd.Stdin = strings.NewReader(s)\n+\t\t\twant, err := cmd.Output()\n+\t\t\tif err != nil {\n+\t\t\t\tt.Errorf(\"qprint(%q) = err: %v\", s, err)\n+\t\t\t} else {\n+\t\t\t\tif string(want) != buf.String() {\n+\t\t\t\t\tt.Errorf(\"go decode(%q) = %q; qprint = %q\", s, want, buf.String())\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n\n\nI'll try to detect qprint spinning now and work around it.\n\nBut at this point I trust nothing.\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-02-14T22:33:08Z",
	"updated_at": "2014-12-08T10:25:21Z"
}
