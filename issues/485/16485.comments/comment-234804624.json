{
	"id": 234804624,
	"body": "A side note regarding the related existing comment: \r\n```\r\n//Ensure directories have a trailing separator\r\n```\r\nfrom here:\r\n\r\n https://github.com/golang/tools/blob/ed69e84b1518b5857a9f4e01d1f9cefdcc45246e/refactor/rename/mvpkg.go#L83\r\n\r\n```go\r\n\t\t// Ensure directories have a trailing separator.\r\n\t\tdest := strings.Replace(pkg,\r\n\t\t\tfilepath.Join(from, \"\"),\r\n\t\t\tfilepath.Join(to, \"\"),\r\n\t\t\t1)\r\n\t\tdestinations[pkg] = filepath.ToSlash(dest)\r\n```\r\n\r\nEither that comment is misleading, or I don't understand that comment (either option being relatively likely ;-)\r\n\r\nThe `Ensure directories have a trailing separator` comment seems to imply that `filepath.Join(foo, \"\")` would add a trailing separator but I'm not sure that's true. I think that would be true for **strings**.Join with final empty string being joined, but I'm not sure that `filepath.Join(foo, \"\")` would add a trailing separator.\r\n\r\nI'm not 100% sure of those statements, but here's a quick example:\r\n\r\nhttps://play.golang.org/p/QkQ0Y1Pvbn\r\n\r\n```go\r\n\t// Sample data. Note 2 empty strings (especially note that last element is empty string)\r\n\ts := []string{\"foo\", \"\", \"bar\", \"baz\", \"\"}\r\n\r\n\t// Compare strings.Join vs. filepath.Join vs. path.Jon\r\n\tfmt.Println(\"strings.Join:  \", strings.Join(s, \",\"))\r\n\tfmt.Println(\"filepath.Join: \", filepath.Join(s...))\r\n\tfmt.Println(\"path.Join:     \", path.Join(s...))\r\n\r\n\t// Output:\r\n\t// strings.Join:   foo,,bar,baz,\r\n\t// filepath.Join:  foo/bar/baz\r\n\t// path.Join:      foo/bar/baz\r\n```\r\n\r\nNote that that filepath.Join behavior is a little different from what seems to be the Python and Ruby behavior for a similar filepath join with an empty string, where Python and Ruby would seem to include a final trailing separator if passed a final empty string (live Python/Ruby examples at bottom of this comment).\r\n\r\nSo, perhaps the author of this Go code incorrectly expected filepath.Join to behave either  similar to how either Go behaves for strings.Join, and/or how other programming languages handle filepath join?\r\n\r\nSo perhaps the intent of that comment was something closer to the following (untested, sorry):\r\n\r\n```go\r\n\t\t// Normalize any trailing separators (via Clean) to ensure we \r\n\t\t// replace the substrings in pkg consistently.\r\n\t\tdest := strings.Replace(pkg,\r\n\t\t\tpath.Clean(from),\r\n\t\t\tpath.Clean(to),\r\n\t\t\t1)\r\n```\r\n\r\n## Python filepath join example:\r\n\r\nhttps://repl.it/CfZD\r\n\r\n```python\r\nprint 'python string join (input includes 2 empty strings):'\r\nprint ','.join(['foo', '', 'bar', 'baz', ''])\r\n\r\nprint '\\npython os.path join (input includes 2 empty strings):'\r\nprint os.path.join('foo', '', 'bar', 'baz', '')\r\n\r\n# Outputs\r\n# python string join (input includes 2 empty strings):\r\n# foo,,bar,baz,\r\n# \r\n# python os.path join (input includes 2 empty strings):\r\n# foo/bar/baz/\r\n```\r\n\r\n## Ruby filepath join example \r\n\r\n(and sorry, I don't really know Ruby):\r\n\r\nhttps://repl.it/CfZA\r\n\r\n```ruby\r\nputs \"ruby string join (input includes 2 empty strings):\"\r\nputs [\"foo\", \"\", \"bar\", \"baz\", ''].join(\",\")\r\n\r\nputs \"\\nruby file join (input includes 2 empty strings):\"\r\nputs File.join(\"foo\", \"\", \"bar\", \"baz\", \"\")\r\n\r\n# Output:\r\n# ruby string join (input includes 2 empty strings):\r\n# foo,,bar,baz,\r\n#\r\n# ruby file join (input includes 2 empty strings):\r\n# foo/bar/baz/\r\n```",
	"user": {
		"login": "thepudds",
		"id": 20628140,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-24T21:48:38Z",
	"updated_at": "2016-07-24T22:03:29Z"
}
