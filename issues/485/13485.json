{
	"id": 120482082,
	"number": 13485,
	"state": "open",
	"title": "cmd/compile: compiler accepts invalid array type",
	"body": "```\r\nvar a [10]int                         // valid and accepted\r\nvar b [10.0]int                       // valid and accepted\r\nvar c [float64(10)]int                // invalid but accepted\r\nvar d [complex(10, 0)]int             // valid but not accepted\r\nvar e [complex128(complex(10, 0))]int // invalid and not accepted\r\n```\r\n(http://play.golang.org/p/YYb-ApQgjj)\r\n\r\nThe declaration of c is not valid because the length is of type float32. The spec says:\r\n\"The length is part of the array's type; it must evaluate to a non-negative constant representable by a value of type int.\"\r\n\r\n(In other parts of the spec where we use similar wording, e.g. for array/slice indices, we do permit untyped constants representable as ints, but we reject non-integer-type values even if their values happen to be representable as integers.)\r\n\r\nThe declaration of d is valid because complex(10, 0) is an untyped constant that is representable as an int.\r\n\r\nThe declaration of e is correctly rejected and in contradiction to the acceptance of c; i.e., the compiler is not consistent.\r\n\r\nFor comparison:\r\n\r\n- go/types correctly rejects c and e and accepts the others\r\n- gccgo dies with an internal compiler error for `type c [float64(10)]int` and `type e [complex128(complex(10, 0))]int`, but accepts d.\r\n",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2015-12-04T20:41:32Z",
	"updated_at": "2016-06-10T22:04:18Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
