{
	"id": 66084460,
	"body": "\u003ca id=\"c18\"\u003e\u003c/a\u003eComment 18:\n\n\u003cpre\u003eThis is how I would approach this:\n\ndiff --git a/src/pkg/os/exec/lp_windows_test.go b/src/pkg/os/exec/lp_windows_test.go\nnew file mode 100644\n--- /dev/null\n+++ b/src/pkg/os/exec/lp_windows_test.go\n@@ -0,0 +1,45 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package exec\n+\n+import (\n+\t\"testing\"\n+)\n+\n+type lookPathTest struct {\n+\tPATH      string\n+\tPATHEXT   string\n+\tfiles     []string\n+\tsearchFor string\n+\t// TODO: maybe try and work out resultExpected on the fly\n+\t// by executing some system command.\n+\tresultExpected string\n+}\n+\n+var lookPathTests = []lookPathTest{\n+\t{\n+\t\tPATHEXT:        `.COM;.EXE;.BAT`,\n+\t\tPATH:           `p2;p1`,\n+\t\tfiles:          []string{`p1\\a.exe`, `p2\\a.exe`},\n+\t\tsearchFor:      `a`,\n+\t\tresultExpected: `p2\\a.exe`,\n+\t},\n+}\n+\n+func testLookPath(t *testing.T, lpt lookPathTest) {\n+\t// Create tmp directory.\n+\t// Update lpt.PATH, lpt.files and lpt.resultExpected to include our tmp directory.\n+\t// Create files listed in lpt.files in tmp directory.\n+\t// Create a Go program that uses LookPath to find lpt.searchFor and print result to\nstdout (maybe pass lpt.searchFor as process parameter).\n+\t// Build the Go program.\n+\t// Run the Go program with lpt.PATH and lpt.PATHEXT set.\n+\t// Capture output of execution and compare it with lpt.resultExpected.\n+}\n+\n+func TestLookPath(t *testing.T) {\n+\tfor _, lpt := range lookPathTests {\n+\t\ttestLookPath(t, lpt)\n+\t}\n+}\n\nBut, I could be wrong.\n\nAlex\u003c/pre\u003e",
	"user": {
		"login": "alexbrainman",
		"id": 9796621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-08-28T01:39:55Z",
	"updated_at": "2014-12-08T10:34:14Z"
}
