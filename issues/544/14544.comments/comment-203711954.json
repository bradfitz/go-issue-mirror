{
	"id": 203711954,
	"body": "I'm experiencing this general issue on FreeBSD 9.3, but there is a significant complication in my environment (one that may well exist in others). The short version is that I believe a fundamental problem here is compiling the Fortran code with gfortran (part of gcc) but compiling C code and linking everything with clang.\r\n\r\nRun straight, without the CL change to misc/cgo/fortran/test.bash, I get the same failure as others:\r\n\r\n    ##### ../misc/cgo/fortran\r\n    # _/homes/cks/src/go/misc/cgo/fortran\r\n    /usr/bin/ld: cannot find -lgfortran\r\n    clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n    FAIL    _/homes/cks/src/go/misc/cgo/fortran [build failed]\r\n    FAIL: go test\r\n    2016/03/30 21:00:43 Failed: exit status 1\r\n\r\nHowever, with the modification to test.bash from CL https://golang.org/cl/21297 what I get instead is a failure to link:\r\n\r\n    ##### ../misc/cgo/fortran\r\n    # _/homes/cks/src/go/misc/cgo/fortran\r\n    /usr/local/lib/gcc48/gcc/i386-portbld-freebsd9.3/4.8.5/../../../libgfortran.so: undefined reference to `__getf2@GCC_4.6.0'\r\n    /usr/local/lib/gcc48/gcc/i386-portbld-freebsd9.3/4.8.5/../../../libgfortran.so: undefined reference to `__floatunditf@GCC_4.6.0'\r\n    /usr/local/lib/gcc48/gcc/i386-portbld-freebsd9.3/4.8.5/../../../libgfortran.so: undefined reference to `__subtf3@GCC_4.6.0'\r\n    [... repeat for a lot more symbols ...]\r\n\r\nWhat I believe the underlying problem here is that on my FreeBSD the Fortran compiler is gfortran, ie GNU Fortran from the GCC compiler suite, but 'go test' is trying to build C code with clang and link the resulting clang C .o's with gfortran-compiled Fortran .o's. I'm not certain if this can ever work, but if it does it clearly needs more than just libgfortran.so itself, because libgfortran.so depends on libgcc_s.so and possibly other gcc-built shared libraries:\r\n\r\n    $ gfortran helloworld/helloworld.f90 -o main.exe\r\n    $ ldd main.exe\r\n    main.exe:\r\n            libgfortran.so.3 =\u003e /usr/local/lib/gcc48/libgfortran.so.3 (0x2806a000)\r\n            libm.so.5 =\u003e /lib/libm.so.5 (0x28167000)\r\n            libgcc_s.so.1 =\u003e /lib/libgcc_s.so.1 (0x28182000)\r\n            libquadmath.so.0 =\u003e /usr/local/lib/gcc48/libquadmath.so.0 (0x2818d000)\r\n            libc.so.7 =\u003e /lib/libc.so.7 (0x28206000)\r\n\r\nI have tried a modification to the CL where I set not just `LIBRARY_PATH` but also `CC=gcc` and it works. In fact, setting `$CC` alone makes things work, presumably because the version of gcc that goes with gfortran has been built properly so it can find libgfortran on its own. This is easy to test in the directory:\r\n\r\n    $ cd misc/cgo/fortran\r\n    $ CC=gcc go test\r\n    PASS\r\n    ok      _/homes/cks/src/go/misc/cgo/fortran     0.004s\r\n\r\nIt's possible that forcing use of gcc will deal with most of the issues here.\r\n\r\nThe current test.bash diff I'm testing with is:\r\n\r\n    --- a/misc/cgo/fortran/test.bash\r\n    +++ b/misc/cgo/fortran/test.bash\r\n    @@ -9,6 +9,12 @@ set -e\r\n     \r\n     FC=$1\r\n     \r\n    +case \"$FC\" in\r\n    +*gfortran*)\r\n    +  export CC=gcc\r\n    +  ;;\r\n    +esac\r\n    +\r\n     if ! $FC helloworld/helloworld.f90 -o main.exe \u003e\u0026 /dev/null; then\r\n       echo \"skipping Fortran test: could not build helloworld.f90 with $FC\"\r\n       exit 0\r\n",
	"user": {
		"login": "siebenmann",
		"id": 865382,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-31T01:46:26Z",
	"updated_at": "2016-03-31T01:46:26Z"
}
