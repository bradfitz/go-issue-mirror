{
	"id": 73125703,
	"number": 10685,
	"state": "closed",
	"title": "net/http: tls handshake EOF on new connections when passing connection between goroutines",
	"body": "When using SSL and websockets (using either gorilla or golang.org's websocket lib), moderate connection load will result in clients not connecting properly, and this message:\r\n\r\n```\r\n2015/05/04 13:31:58 http: TLS handshake error from 127.0.0.1:5253: EOF\r\n2015/05/04 13:31:58 http: TLS handshake error from 127.0.0.1:5254: EOF\r\n2015/05/04 13:31:58 http: TLS handshake error from 127.0.0.1:5255: EOF\r\n2015/05/04 13:31:58 http: TLS handshake error from 127.0.0.1:5256: EOF\r\n2015/05/04 13:31:58 http: TLS handshake error from 127.0.0.1:5257: EOF\r\n```\r\n\r\nThis doesn't happen in my basic example (located here:  https://github.com/bbangert/ssl-ram-testing/blob/master/Go/golang.org/main.go) when it uses io.Copy to implement the echo server, but when it merely uses another goroutine to write the echo'd data back then the TLS handshake errors pop up.\r\n\r\nI observed this using the latest Go 1.4.2, we have observed it in prior versions of Go in production, but this is the first time I have a minimal example of it (for testing SSL RAM overhead per connection, which is very very high in Golang, but that's a separate issue....).",
	"user": {
		"login": "bbangert",
		"id": 100193,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 9,
	"closed_at": "2015-05-05T00:24:37Z",
	"created_at": "2015-05-04T20:53:58Z",
	"updated_at": "2016-06-25T02:07:27Z"
}
