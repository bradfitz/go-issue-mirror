{
	"id": 161114130,
	"number": 16124,
	"state": "closed",
	"title": "math/rand: Read should return consistent results, regardless of buffer size",
	"body": "`Read` returns byte sequence that depends on the buffer length. That's because `Rand` uses `Int63` value to produce 7 random bytes and throws away unused bits from `Int63` when done with the particular call. Next call always starts with fresh `Int63` leaving \"gap\" from previous `Read` if it was not finished on 7-bytes boundary.\r\n\r\nTherefore, you can't fix seed and read pseudo-random bytes deterministically without fixing buffer size.\r\n\r\n#### Proposed fix\r\n\r\nMy proposal is to keep unused `Int63` reminder in the `Rand` struct. It let us fix the issue and still have the same bytes from the first `Read` call as we have now. The performance hit is minimal also. The downside is an extra state in `Rand` struct.\r\n\r\nOne of the other options is to use only single byte from each `Int63` call. No state in `Rand` but the 2x-4x performance hit.\r\n\r\n1. What version of Go are you using (`go version`)?\r\n`go version devel +f3d5478 Fri Jun 17 19:15:29 2016 +0000 linux/amd64`\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n```\r\nGOARCH=\"amd64\"\r\nGOOS=\"linux\"\r\n```\r\n3. What did you do?\r\nThis is play-adopted unit-test using `testing/iotest` that fails: https://play.golang.org/p/dbz-VlFPCa\r\n\r\n4. What did you expect to see?\r\nThe same random bytes stream no matter read buffer size used.\r\n",
	"user": {
		"login": "pin",
		"id": 150904,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "HelpWanted"
		}
	],
	"comments": 12,
	"closed_at": "2016-06-27T22:18:51Z",
	"created_at": "2016-06-20T04:14:49Z",
	"updated_at": "2016-06-28T07:00:21Z",
	"milestone": {
		"id": 1714149,
		"number": 40,
		"title": "Go1.7Maybe"
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	}
}
