{
	"id": 179277839,
	"number": 17235,
	"state": "open",
	"title": "cmd/compile, cmd/internal/obj/ppc64: generate the likely/unlikely bit on branches for ppc64x",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n### What version of Go are you using (`go version`)?\r\ngo version devel +375092b Mon Sep 26 15:46:44 2016 +0000 linux/ppc64le\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nUbuntu 16.04\r\n\r\n### What did you do?\r\nPerused generated ppc64x code.\r\n\r\n### What did you expect to see?\r\nBranch likely flag set for many commonly generated if-then-else sequences when the 'then' block should rarely be taken.\r\n\r\n### What did you see instead?\r\nI don't see the likely/unlikely flag set it by golang generated code except in asm files.\r\n\r\nThe asm9.go file has support to set the likely/unlikely flag but the branch asm opcodes don't currently have an operand combination which indicates when it should be done.  \r\n\r\nI plan to add support for an operand with the branch that indicates when to set likely/unlikely, then update some of the sequences that should have the flag set.  This includes morestack_noctxt in the prolog, and the runtime checks that result in panics once I figure out where those are.\r\n\r\n\r\n",
	"user": {
		"login": "laboger",
		"id": 9433228,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		}
	],
	"comments": 1,
	"created_at": "2016-09-26T16:38:18Z",
	"updated_at": "2016-10-03T15:52:22Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
