{
	"id": 66049774,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2 by **RyanneDolan**:\n\n\u003cpre\u003e\u003e v := OldPoint()  // returns a reference shared with others\n\u003e v.x = 1\n\nGood point.  My example is still logically incorrect I think, but not a compile \nerror.  Sorry.\n\nA revised example (as per your comment) for the record:\n\nvar v struct{i int}\nv.i = 1\n\nInterestingly, I think\n  for _, v = range arr { v.i = 1 }\nilluminates a problem with adding generics to Go: the same code can have value or \nreference semantics depending on the underlying types.  I guess that is what confused \nme, and as I said above, confuses new Go programmers.\n\nThanks for considering the issue.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-12-22T21:16:06Z",
	"updated_at": "2014-12-08T10:04:37Z"
}
