{
	"id": 66090680,
	"body": "\u003ca id=\"c8\"\u003e\u003c/a\u003eComment 8 by **ryguillian**:\n\n\u003cpre\u003eWhen you call Read on MultiReader with a slice larger than what's left in the rest of\nthe file MultiReader yields rather than trying to keep reading. As pointed out, this is\nmore of a pathological design in Go. It's like a tacit \"yield\" using n \u0026lt; len(slice)\n\u0026\u0026 err==nil as a \"more to read\" signal. If the Go team thinks this is okay, fine. I\nwould be interested in the rationale for this pervasive design.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-01-28T03:35:34Z",
	"updated_at": "2014-12-22T06:32:01Z"
}
