{
	"id": 228169983,
	"body": "\u003e - Perhaps datalink might be a better package name\r\n\u003e   - I'm not keen on providing Ethernet marshaler/unmarshaler\r\n\r\nI'd be okay with making this package called `datalink`, but since I assume most folks would use it for ethernet sockets anyway, I figured I would go for the more common use case.  If this package were to be a raw datalink package, should another package be created to leverage it with ethernet sockets (`x/net/ethernet` or maybe even `x/net/datalink/ethernet`)?\r\n\r\n\u003e - It's okay that this package focuses on a bit slow BPF/LSF and AF_PACKET socket IO\r\n\u003e  - Having a separate package that implements Netmap/DPDK-like faster stuff sounds reasonable\r\n\r\nI'm not familiar with Netmap or DPDK, but perhaps they could be cleanly integrated into this package at some point too.\r\n\r\n\u003e - Probably we need a type that can be used to configure BPF/LSF files and AF_PACKET sockets; maybe 'type Listener struct { }`?\r\n\r\nSure, but what type of options would need to be configured?  Would this be things like the ability to set the socket to nonblocking, or change the direction of traffic to capture using BPF?\r\n\r\n\u003e A simple question: What's the reason why we need to provide RawConn on Linux?\r\n\r\nMaybe we don't.  My intention for the `RawConn` type was to enable writing arbitrary ethernet frames, but perhaps it isn't needed after all.  If this package only focuses on \"datalink\" sockets, then this functionality is totally unneeded.",
	"user": {
		"login": "mdlayher",
		"id": 1926905,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-23T20:14:58Z",
	"updated_at": "2016-06-23T20:14:58Z"
}
