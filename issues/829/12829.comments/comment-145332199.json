{
	"id": 145332199,
	"body": "A test:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"os\"\r\n\t\"testing\"\r\n)\r\n\r\nfunc TestNote(t *testing.T) {\r\n\tpid := os.Getpid()\r\n\r\n\tpath := fmt.Sprintf(\"/proc/%d/note\", pid)\r\n\tf, err := os.Create(path)\r\n\tif err != nil {\r\n\t\tt.Fatalf(\"unable to open note file: %v\", err)\r\n\t}\r\n\tdefer f.Close()\r\n\tfmt.Fprint(f, \"Hello, world!\\n\")\r\n}\r\n```\r\n\r\nI have run a non-test variant (make TestNote into a func main() and you got it), but not as go test, as I only have go 1.4.2 available directly on my plan9 box. I can install one from master later tonight when I come home for testing \"go test\" directly. The only issue that could be would be whether go test would detect that the thread has been suspended as an error.\r\n\r\nIf the signal handler works in the _SigNotify case, then this should simply do nothing. Otherwise, the thread will have execution suspended in the \"broken\" run state, and \"XYZ: pid: suicide: sys: floating point in note handler: pc=somewhere\" printed to stderr. It does not validate the _SigPanic or _SigExit branches.\r\n\r\nA side-note is that, due to the go runtime posting \"go: exit\" to all threads on shutdown, any terminating application is a test, with all threads being suspended and having their own line about floating point written to stderr.",
	"user": {
		"login": "joushou",
		"id": 176245,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-04T10:13:16Z",
	"updated_at": "2015-10-04T10:13:16Z"
}
