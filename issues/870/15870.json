{
	"id": 157354167,
	"number": 15870,
	"state": "open",
	"title": "x/crypto/openpgp: Support PKCS#11 keys for signing",
	"body": "As the current interface requires the existence of the actual private key in memory for a number of operations a PKCS#11 key (i.e. from `letsencrypt/pkcs11key`) cannot be used for signing.\r\n\r\nIt seems like the simplest way to do this would be to allow `Signature.PrivateKey.PrivateKey` to also be a `crypto.Signer` ([in this switch](https://github.com/golang/crypto/blob/master/openpgp/packet/signature.go#L517), but testing the type of `priv.PrivateKey` instead of `priv.PubKeyAlgo`) and if present attempt to sign using its `Signer.Sign` method and parse the resulting signature based on the `Signer.PublicKey`. As far as I can tell this would be the _easiest_ diff, there is a much more complicated one that completely replaces `Signature.PrivateKey.PrivateKey` with a `crypto.Signer` but that would require changing quite a few of the interfaces.\r\n\r\ncc @agl for thoughts, if the first idea makes sense I'm happy to work on a CL for it.\r\n\r\n",
	"user": {
		"login": "rolandshoemaker",
		"id": 5080674,
		"type": "User",
		"site_admin": false
	},
	"comments": 0,
	"created_at": "2016-05-28T19:45:16Z",
	"updated_at": "2016-06-17T01:44:28Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
