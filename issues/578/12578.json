{
	"id": 105913010,
	"number": 12578,
	"state": "closed",
	"title": "spec: Clarify composite literal type elision rules for map values",
	"body": "As best I can read, with http://golang.org/doc/go1.5#map_literals and https://github.com/golang/go/issues/8589 the spec says (my emphasis)\r\n\r\n\u003e Within a composite literal of array, slice, or map type T, **elements or map keys** that are themselves composite literals may elide the respective literal type if it is identical to the element or key type of T. \r\n\r\nThe grammar above that says\r\n\r\n    Element       = [ Key \":\" ] Value .\r\n\r\nSo that \"element\" can't quite refer to a map value, in my reading (the element would be key-value pair).\r\n\r\nObviously, one can elide the type for a map value, example from spec:\r\n\r\n    map[string]Point{\"orig\": {0, 0}}    // same as map[string]Point{\"orig\": Point{0, 0}}\r\n\r\nBut I can't see what in the spec actually allows that!\r\n\r\nSomething like this would fix it:\r\n\r\n\u003e Within a composite literal of array, slice, or map type T, elements or map keys **or values** that are themselves composite literals may elide the respective literal type if it is identical to the element or key type of T. \r\n\r\nThough a devil's advocate would read that as \"(elements) or (map keys) or (values)\" not as \"(elements) or (map keys or values)\". I'm going to have to leave precise language to a native speaker..",
	"user": {
		"login": "tv42",
		"id": 419909,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2015-09-12T00:46:17Z",
	"created_at": "2015-09-10T22:42:10Z",
	"updated_at": "2015-09-12T00:46:17Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
