{
	"id": 153509338,
	"number": 15578,
	"state": "closed",
	"title": "runtime/race: race detector can call exit more than once on finish",
	"body": "Seen on linux amd64 1.6 (but verified present at tip as well)\r\n\r\nWhen using the race detector and C++ code is linked into the process as well it's possible for 2 threads to call racefini() today which eventually calls __tsan_fini which itself calls the regular C library exit().\r\n\r\nCalling exit \u003e 1 times is undefined behavior and means in a C++ program that the static destructors get invoked twice. On a glibc implementation of the exit handlers it also means a double free() occurs when the entry from the exit handlers list is freed upon completion.\r\n",
	"user": {
		"login": "jmchacon",
		"id": 2874885,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2016-05-18T01:05:21Z",
	"created_at": "2016-05-06T18:20:14Z",
	"updated_at": "2016-05-18T01:05:21Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	}
}
