{
	"id": 72349486,
	"body": "It all depends on the meaning of \"the first error\".\r\n\r\nIf you think it means the read, then it shouldn't continue to issue\r\nthe Write even if n \u003e 0, because the Copy call is guaranteed to\r\nfail.\r\n\r\nOn the other hand, if you regard that a Read that returns (n, err)\r\nwith n \u003e 0 and err != nil as successful, then the current behavior\r\nis correct.\r\n\r\nMaking io.Copy return a new Error struct combining the two errors\r\nis an API change that might break existing code.\r\n\r\nThere are more corner cases in the design of io.Copy (for example,\r\nif the Write fails due to some flakiness in underlying writer, the client\r\nmight want to retry, so it is desirable to not discard the unwritten\r\nbytes.) If you want more control, I think you should design your own\r\ncopy routine.",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-01T03:23:45Z",
	"updated_at": "2015-02-01T03:23:45Z"
}
