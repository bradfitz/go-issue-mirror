{
	"id": 183154471,
	"body": "This issue isn't tied to the release cycle, but I'm planning to wait until after Go 1.6 is released and things settle down.\r\n\r\nAdding a `DecodeAll` function should do the trick, while leaving the existing API intact. DecodeAll would possibly return a slice of x509 certificates and a slice of keys.\r\n\r\n```go\r\nfunc DecodeAll(pfxData []byte, password string) (privateKeys []interface{}, certificates []*x509.Certificate, err error) {\r\n```\r\n\r\nRight now the keys or interface{} because they may be RSA or another format. I don't know that there is any better option, but I'd like to look into that.\r\n\r\n I'd also like to include [an example of using this method with TLS](https://github.com/RobotsAndPencils/buford/blob/master/certificate/cert.go#L49), which isn't [immediately obvious](https://groups.google.com/d/msg/golang-nuts/7l75mp2gh1o/ntF5DD-hCAAJ).\r\n\r\nP.S. I think there is a bug in the current implementation where it continues to decode bags after an \"pkcs12: expected exactly one certificate bag\" error. There should be a return statement and tests around this. In reality this is unlikely to be triggered thanks to an earlier check. The p12 would need to be contain exactly two certs and no keys.\r\nhttps://github.com/golang/crypto/blob/master/pkcs12/pkcs12.go#L228 \r\n",
	"user": {
		"login": "nathany",
		"id": 4566,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-12T02:45:46Z",
	"updated_at": "2016-02-12T02:47:08Z"
}
