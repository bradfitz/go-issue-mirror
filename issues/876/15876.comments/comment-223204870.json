{
	"id": 223204870,
	"body": "I can see pros and cons of adding UTF-32 support to a new utf32 package versus the existent unicode package.\r\n\r\nNot changing the existing BOM detection algorithm makes sense to me, since it seems to be intended HTML5 decoding as per the W3C recommendation. Adding UTF-32 support to it would not be possible in a backwards compatible manner.\r\n\r\nIt would, however, seem logical to me that unicode.All included all supported Unicode encodings. On the other hand I am not sure what the use case for unicode.All is and thus don't know the implications of adding UTF-32 to it for consistency. If you know, would you mind elaborating a little on it, just so I can follow?\r\n\r\nThe points you make about ASCII compatibility and that it is easy to get things wrong apply to UTF-16 as well. Putting UTF-32 in its own package for me thus solely appears to be to ensure that lack of maintenance won't affect the more widely used Unicode encodings.\r\n\r\nAlas, whether it should be in one package or the other depends on the benefits of having the UTF-32 encodings in unicode.All.\r\n\r\nIndependent of where UTF-32 is added, what disclaimer do you have in mind? It is not yet entirely clear to me.\r\n\r\nThanks! :-)",
	"user": {
		"login": "PhilipBorgesen",
		"id": 1206583,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-02T06:16:56Z",
	"updated_at": "2016-06-02T06:16:56Z"
}
