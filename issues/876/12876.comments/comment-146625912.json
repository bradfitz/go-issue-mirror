{
	"id": 146625912,
	"body": "I can see the use for access to what are constants known to the compiler, and it's not entirely unprecedented in Go: The predeclared constant iota exposes such a mechanism (it counts semicolons inside a const declaration, not unlike `__LINE__` counts lines inside a file).\r\n\r\nBut I think introducing more such predeclared constants is not the right path. For one, `__FILE__` and `__LINE__` don't really fit into the aesthetics of Go. Also, it opens the door for ever more explicitly named such constants.\r\n\r\nWe do have other means to handle such things in a more Go-like way. I can think of 2:\r\n\r\n1) Introduce a new predeclared built-in function (better name choice welcome):\r\n```\r\n// compilerinfo accepts a string argument \"filename\", \"line\", or \"timestamp\" and returns the\r\n// filename of the file being compiled, the line number of the compilerinfo invocation, or the\r\n// time of compilation, respectively. The argument must be a constant string, and the result is\r\n// a constant string.\r\nfunc compilerinfo(string) string\r\n```\r\nSuch a mechanism would be easily extensible. It would mean that we extend the language by this additional builtin.\r\n\r\n2) Introduce a new compiler-known magic package, say \"compiler\" (similar to package \"unsafe\"). Or maybe it should be in \"unsafe\" since results depend on file names, line numbers etc. which might not be considered \"portable\". Either way, such a packet could export functions like Filename(), Line(), Timestamp(), etc. that produce constant results (package unsafe does this already, so maybe that's the right place for these).\r\n\r\nSomething to think about.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-08T17:07:40Z",
	"updated_at": "2015-10-08T17:10:24Z"
}
