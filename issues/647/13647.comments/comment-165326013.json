{
	"id": 165326013,
	"body": "It looks like \"bugs fixed in arcane corner cases\", which usually doesn't go into release notes. The most visible change is spelling license correctly.\n\nMaybe e3b615f (detect truncated files) is worth mentioning, but maybe not.\n\n\n```\n$ git log go1.5..origin/master src/archive/tar\ncommit 2ae895c0ce36ffb607442ff053bd19cb5fcd6fd6\nAuthor:     Joe Tsai \u003cjoetsai@digital-static.net\u003e\nAuthorDate: Wed Dec 16 11:26:26 2015 -0800\nCommit:     Russ Cox \u003crsc@golang.org\u003e\nCommitDate: Thu Dec 17 02:46:41 2015 +0000\n\n    archive/tar: spell license correctly in example\n    \n    Change-Id: Ice85d161f026a991953bd63ecc6ec80f8d06dfbd\n    Reviewed-on: https://go-review.googlesource.com/17901\n    Run-TryBot: Joe Tsai \u003cjoetsai@digital-static.net\u003e\n    Reviewed-by: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n\ncommit 5ebb374f96da366d2c44b2fae7d9b3d0af7825dd\nAuthor:     Joe Tsai \u003cjoetsai@digital-static.net\u003e\nAuthorDate: Wed Dec 2 15:41:44 2015 -0800\nCommit:     Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\nCommitDate: Fri Dec 4 22:38:15 2015 +0000\n\n    archive/tar: properly parse GNU base-256 encoding\n    \n    Motivation:\n    * Previous implementation did not detect integer overflow when\n    parsing a base-256 encoded field.\n    * Previous implementation did not treat the integer as a two's\n    complement value as specified by GNU.\n    \n    The relevant GNU specification says:\n    \u003c\u003c\u003c\n    GNU format uses two's-complement base-256 notation to store values\n    that do not fit into standard ustar range.\n    \u003e\u003e\u003e\n    \n    Fixes #12435\n    \n    Change-Id: I4639bcffac8d12e1cb040b76bd05c9d7bc6c23a8\n    Reviewed-on: https://go-review.googlesource.com/17424\n    Reviewed-by: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n    Run-TryBot: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n    TryBot-Result: Gobot Gobot \u003cgobot@golang.org\u003e\n\ncommit 481eedce62015f9f7ed390bb01b1afc63300b0e6\nAuthor:     Joe Tsai \u003cjoetsai@digital-static.net\u003e\nAuthorDate: Wed Dec 2 15:48:06 2015 -0800\nCommit:     Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\nCommitDate: Fri Dec 4 21:38:38 2015 +0000\n\n    archive/tar: properly format GNU base-256 encoding\n    \n    Motivation:\n    * Previous implementation silently failed when an integer overflow\n    occurred. Now, we report an ErrFieldTooLong.\n    * Previous implementation did not encode in two's complement format and was\n    unable to encode negative numbers.\n    \n    The relevant GNU specification says:\n    \u003c\u003c\u003c\n    GNU format uses two's-complement base-256 notation to store values\n    that do not fit into standard ustar range.\n    \u003e\u003e\u003e\n    \n    Fixes #12436\n    \n    Change-Id: I09c20602eabf8ae3a7e0db35b79440a64bfaf807\n    Reviewed-on: https://go-review.googlesource.com/17425\n    Reviewed-by: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n    Run-TryBot: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n    TryBot-Result: Gobot Gobot \u003cgobot@golang.org\u003e\n\ncommit b8a12928a65a15ecce5c9332da9feef0cb221389\nAuthor:     Joe Tsai \u003cjoetsai@digital-static.net\u003e\nAuthorDate: Wed Sep 16 00:58:56 2015 -0700\nCommit:     Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\nCommitDate: Wed Dec 2 02:27:27 2015 +0000\n\n    archive/tar: convert Reader.Next to be loop based\n    \n    Motivation for change:\n    * Recursive logic is hard to follow, since it tends to apply\n    things in reverse. On the other hand, the tar formats tend to\n    describe meta headers as affecting the next entry.\n    * Recursion also applies changes in the wrong order. Two test\n    files are attached that use multiple headers. The previous Go\n    behavior differs from what GNU and BSD tar do.\n    \n    Change-Id: Ic1557256fc1363c5cb26570e5d0b9f65a9e57341\n    Reviewed-on: https://go-review.googlesource.com/14624\n    Run-TryBot: Joe Tsai \u003cjoetsai@digital-static.net\u003e\n    TryBot-Result: Gobot Gobot \u003cgobot@golang.org\u003e\n    Reviewed-by: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n\ncommit 38f8e4407c3626a9509760089b82eecb4d0f2d48\nAuthor:     Joe Tsai \u003cjoetsai@digital-static.net\u003e\nAuthorDate: Mon Sep 28 13:49:35 2015 -0700\nCommit:     Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\nCommitDate: Wed Dec 2 00:29:33 2015 +0000\n\n    archive/tar: move parse/format methods to standalone receiver\n    \n    Motivations for this change:\n    * It allows these functions to be used outside of Reader/Writer.\n    * It allows these functions to be more easily unit tested.\n    \n    Change-Id: Iebe2b70bdb8744371c9ffa87c24316cbbf025b59\n    Reviewed-on: https://go-review.googlesource.com/15113\n    Reviewed-by: Russ Cox \u003crsc@golang.org\u003e\n    Run-TryBot: Joe Tsai \u003cjoetsai@digital-static.net\u003e\n    TryBot-Result: Gobot Gobot \u003cgobot@golang.org\u003e\n    Reviewed-by: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n\ncommit 7823197e5d6a024a4fe2f4f9ca414cb5244eb10f\nAuthor:     Joe Tsai \u003cjoetsai@digital-static.net\u003e\nAuthorDate: Thu Oct 1 01:35:15 2015 -0700\nCommit:     Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\nCommitDate: Tue Dec 1 20:22:38 2015 +0000\n\n    archive/tar: fix issues with readGNUSparseMap1x0\n    \n    Motivations:\n    * Use of strconv.ParseInt does not properly treat integers as 64bit,\n    preventing this function from working properly on 32bit machines.\n    * Use of io.ReadFull does not properly detect truncated streams\n    when the file suddenly ends on a block boundary.\n    * The function blindly trusts user input for numEntries and allocates\n    memory accordingly.\n    * The function does not validate that numEntries is not negative,\n    allowing a malicious sparse file to cause a panic during make.\n    \n    In general, this function was overly complicated for what it was\n    accomplishing and it was hard to reason that it was free from\n    bounds errors. Instead, it has been rewritten and relies on\n    bytes.Buffer.ReadString to do the main work. So long as invariants\n    about the number of '\\n' in the buffer are maintained, it is much\n    easier to see why this approach is correct.\n    \n    Change-Id: Ibb12c4126c26e0ea460ea063cd17af68e3cf609e\n    Reviewed-on: https://go-review.googlesource.com/15174\n    Reviewed-by: Russ Cox \u003crsc@golang.org\u003e\n    Run-TryBot: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n    TryBot-Result: Gobot Gobot \u003cgobot@golang.org\u003e\n\ncommit dd5e14a7511465d20c6e95bf54c9b8f999abbbf6\nAuthor:     Joe Tsai \u003cjoetsai@digital-static.net\u003e\nAuthorDate: Tue Nov 3 18:12:31 2015 -0800\nCommit:     Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\nCommitDate: Tue Dec 1 20:16:26 2015 +0000\n\n    archive/tar: properly handle header-only \"files\" in Reader\n    \n    Certain special type-flags, specifically 1, 2, 3, 4, 5, 6,\n    do not have a data section. Thus, regardless of what the size field\n    says, we should not attempt to read any data for these special types.\n    \n    The relevant PAX and USTAR specification says:\n    \u003c\u003c\u003c\n    If the typeflag field is set to specify a file to be of type 1 (a link)\n    or 2 (a symbolic link), the size field shall be specified as zero.\n    If the typeflag field is set to specify a file of type 5 (directory),\n    the size field shall be interpreted as described under the definition\n    of that record type. No data logical records are stored for types 1, 2, or 5.\n    If the typeflag field is set to 3 (character special file),\n    4 (block special file), or 6 (FIFO), the meaning of the size field is\n    unspecified by this volume of POSIX.1-2008, and no data logical records shall\n    be stored on the medium.\n    Additionally, for type 6, the size field shall be ignored when reading.\n    If the typeflag field is set to any other value, the number of logical\n    records written following the header shall be (size+511)/512, ignoring\n    any fraction in the result of the division.\n    \u003e\u003e\u003e\n    \n    Contrary to the specification, we do not assert that the size field\n    is zero for type 1 and 2 since we liberally accept non-conforming formats.\n    \n    Change-Id: I666b601597cb9d7a50caa081813d90ca9cfc52ed\n    Reviewed-on: https://go-review.googlesource.com/16614\n    Reviewed-by: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n    Run-TryBot: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n    TryBot-Result: Gobot Gobot \u003cgobot@golang.org\u003e\n\ncommit 3a3049897c0c62907da398819f61d77199df52ad\nAuthor:     Matt Layher \u003cmdlayher@gmail.com\u003e\nAuthorDate: Thu Aug 27 14:52:06 2015 -0400\nCommit:     Russ Cox \u003crsc@golang.org\u003e\nCommitDate: Fri Nov 13 02:02:32 2015 +0000\n\n    archive/tar: make output deterministic\n    \n    Replaces PID in PaxHeaders with 0.  Sorts PAX header keys before writing\n    them to the archive.\n    \n    Fixes #12358\n    \n    Change-Id: If239f89c85f1c9d9895a253fb06a47ad44960124\n    Reviewed-on: https://go-review.googlesource.com/13975\n    Reviewed-by: Russ Cox \u003crsc@golang.org\u003e\n    Reviewed-by: Joe Tsai \u003cjoetsai@digital-static.net\u003e\n\ncommit e3b615fd6c633a05a5d4d46cc0345fdfb82c28e6\nAuthor:     Joe Tsai \u003cjoetsai@digital-static.net\u003e\nAuthorDate: Thu Oct 1 02:30:29 2015 -0700\nCommit:     Ian Lance Taylor \u003ciant@golang.org\u003e\nCommitDate: Fri Nov 6 04:31:26 2015 +0000\n\n    archive/tar: detect truncated files\n    \n    Motivation:\n    * Reader.skipUnread never reports io.ErrUnexpectedEOF. This is strange\n    given that io.ErrUnexpectedEOF is given through Reader.Read if the\n    user manually reads the file.\n    * Reader.skipUnread fails to detect truncated files since io.Seeker\n    is lazy about reporting errors. Thus, the behavior of Reader differs\n    whether the input io.Reader also satisfies io.Seeker or not.\n    \n    To solve this, we seek to one before the end of the data section and\n    always rely on at least one call to io.CopyN. If the tr.r satisfies\n    io.Seeker, this is guarunteed to never read more than blockSize.\n    \n    Fixes #12557\n    \n    Change-Id: I0ddddfc6bed0d74465cb7e7a02b26f1de7a7a279\n    Reviewed-on: https://go-review.googlesource.com/15175\n    Reviewed-by: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n    Run-TryBot: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n    TryBot-Result: Gobot Gobot \u003cgobot@golang.org\u003e\n\ncommit e4add8d569d3152a461dbdf6e086dd60c8ca6c27\nAuthor:     Joe Tsai \u003cjoetsai@digital-static.net\u003e\nAuthorDate: Thu Oct 1 01:04:24 2015 -0700\nCommit:     Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\nCommitDate: Tue Oct 6 17:49:05 2015 +0000\n\n    archive/tar: fix numeric overflow issues in readGNUSparseMap0x1\n    \n    Motivation:\n    * The logic to verify the numEntries can overflow and incorrectly\n    pass, allowing a malicious file to allocate arbitrary memory.\n    * The use of strconv.ParseInt does not set the integer precision\n    to 64bit, causing this code to work incorrectly on 32bit machines.\n    \n    Change-Id: I1b1571a750a84f2dde97cc329ed04fe2342aaa60\n    Reviewed-on: https://go-review.googlesource.com/15173\n    Reviewed-by: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n    Run-TryBot: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n    TryBot-Result: Gobot Gobot \u003cgobot@golang.org\u003e\n\ncommit 281eabe46f638139b8d85d87a359880dc0f8ea81\nAuthor:     Joe Tsai \u003cjoetsai@digital-static.net\u003e\nAuthorDate: Tue Oct 6 01:04:18 2015 -0700\nCommit:     Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\nCommitDate: Tue Oct 6 17:13:11 2015 +0000\n\n    archive/tar: add missing error checks to Reader.Next\n    \n    A recursive call to Reader.Next did not check the error before\n    trying to use the result, leading to a nil pointer panic.\n    This specific CL addresses the immediate issue, which is the panic,\n    but does not solve the root issue, which is due to an integer\n    overflow in the base-256 parser.\n    \n    Updates #12435\n    \n    Change-Id: Ia908671f0f411a409a35e24f2ebf740d46734072\n    Reviewed-on: https://go-review.googlesource.com/15437\n    Run-TryBot: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n    Reviewed-by: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n    TryBot-Result: Gobot Gobot \u003cgobot@golang.org\u003e\n\ncommit cfb116d4538dcf2455ca59e786396c779019c065\nAuthor:     Joe Tsai \u003cjoetsai@digital-static.net\u003e\nAuthorDate: Thu Oct 1 02:59:49 2015 -0700\nCommit:     Andrew Gerrand \u003cadg@golang.org\u003e\nCommitDate: Tue Oct 6 05:06:58 2015 +0000\n\n    archive/tar: expand abilities of TestReader\n    \n    Motivation:\n    * There are an increasing number of \"one-off\" corrupt files added\n    to make sure that package does not succeed or crash on them.\n    Instead, allow for the test to specify the error that is expected\n    to occur (if any).\n    * Also, fold in the logic to check the MD5 checksum into this\n    function.\n    \n    The following tests are being removed:\n    * TestIncrementalRead: Done by TestReader by using io.CopyBuffer\n    with a buffer of 8. This achieves the same behavior as this test.\n    * TestSparseEndToEnd: Since TestReader checks the MD5 checksums\n    if the input corpus provides them, then this is redundant.\n    * TestSparseIncrementalRead: Redundant for the same reasons that\n    TestIncrementalRead is now redundant\n    * TestNegativeHdrSize: Added to TestReader corpus\n    * TestIssue10968: Added to TestReader corpus\n    * TestIssue11169: Added to TestReader corpus\n    \n    With this change, code coverage did not change: 85.3%\n    \n    Change-Id: I8550d48657d4dbb8f47dfc3dc280758ef73b47ec\n    Reviewed-on: https://go-review.googlesource.com/15176\n    Reviewed-by: Andrew Gerrand \u003cadg@golang.org\u003e\n\ncommit 02d2db18a79ad2b143fe6501dba22feae5260778\nAuthor:     Joe Tsai \u003cjoetsai@digital-static.net\u003e\nAuthorDate: Thu Oct 1 03:08:18 2015 -0700\nCommit:     Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\nCommitDate: Thu Oct 1 22:33:33 2015 +0000\n\n    archive/tar: make Reader.Read errors persistent\n    \n    If the stream is in an inconsistent state, it does not make sense\n    that Reader.Read can be called and possibly succeed.\n    \n    Change-Id: I9d1c5a1300b2c2b45232188aa7999e350809dcf2\n    Reviewed-on: https://go-review.googlesource.com/15177\n    Reviewed-by: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n    Run-TryBot: Brad Fitzpatrick \u003cbradfitz@golang.org\u003e\n\ncommit 79480ca07a1515223d49031c59ae37b662f45b5e\nAuthor:     Joe Tsai \u003cjoetsai@digital-static.net\u003e\nAuthorDate: Mon Sep 28 16:38:16 2015 -0700\nCommit:     Andrew Gerrand \u003cadg@golang.org\u003e\nCommitDate: Thu Oct 1 00:51:15 2015 +0000\n\n    archive/tar: fix bugs with sparseFileReader\n    \n    The sparseFileReader is prone to two different forms of\n    denial-of-service attacks:\n    * A malicious tar file can cause an infinite loop\n    * A malicious tar file can cause arbitrary panics\n    \n    This results because of poor error checking/handling, which this\n    CL fixes. While we are at it, add a plethora of unit tests to\n    test for possible malicious inputs.\n    \n    Change-Id: I2f9446539d189f3c1738a1608b0ad4859c1be929\n    Reviewed-on: https://go-review.googlesource.com/15115\n    Reviewed-by: Andrew Gerrand \u003cadg@golang.org\u003e\n    Run-TryBot: Andrew Gerrand \u003cadg@golang.org\u003e\n    TryBot-Result: Gobot Gobot \u003cgobot@golang.org\u003e\n\ncommit d1b1487a64be2e3bcd882d03f909c4617403c43d\nAuthor:     Joe Tsai \u003cjoetsai@digital-static.net\u003e\nAuthorDate: Thu Sep 17 16:07:38 2015 -0700\nCommit:     David Symonds \u003cdsymonds@golang.org\u003e\nCommitDate: Wed Sep 23 23:55:13 2015 +0000\n\n    archive/tar: remove dead code with USTAR path splitting\n    \n    Convert splitUSTARPath to return a bool rather than an error since\n    the caller never ever uses the error other than to check if it is\n    nil. Thus, we can remove errNameTooLong as well.\n    \n    Also, fold the checking of the length \u003c= fileNameSize and whether\n    the string is ASCII into the split function itself.\n    \n    Lastly, remove logic to set the MAGIC since that's already done on\n    L200. Thus, setting the magic is redundant.\n    \n    There is no overall logic change.\n    \n    Updates #12638\n    \n    Change-Id: I26b6992578199abad723c2a2af7f4fc078af9c17\n    Reviewed-on: https://go-review.googlesource.com/14723\n    Reviewed-by: David Symonds \u003cdsymonds@golang.org\u003e\n    Run-TryBot: David Symonds \u003cdsymonds@golang.org\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-17T03:18:05Z",
	"updated_at": "2015-12-17T03:18:05Z"
}
