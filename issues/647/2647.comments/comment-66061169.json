{
	"id": 66061169,
	"body": "\u003ca id=\"c4\"\u003e\u003c/a\u003eComment 4:\n\n\u003cpre\u003eThe controlling TTY is a weird idea in POSIX.  Acquiring a controlling terminal is a\nhighly specialized operation normally only done by a program like getty which manages\nthe login prompt for all the terminals on a system.  When somebody logs in on a\nterminal, getty forks to create a new session leader, and that session leader must\nacquire the terminal as a controlling terminal.  Historically the first terminal opened\nby a process with no controlling terminal became the controlling terminal.  The O_NOCTTY\nflag was added to permit a process to open a terminal without having it become\ncontrolling.  The SCTTY ioctl was added later to formalize the process of acquiring a\ncontrolling terminal rather than have it happen automatically.  The Setctty flag in exec\nimplements that functionality.\n\nHaving a shell keep a child process in the foreground even after the parent exits is not\na matter of the controlling terminal at all.  It's a matter of shell internal\ninformation: the shell tracks each child by process group, it doesn't care about the\ncontrolling terminal.  I don't know of any way to tell the shell to change the\nforeground job to a child process.  If there were a way, I think it would be shell\nspecific.\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-01-13T19:46:35Z",
	"updated_at": "2014-12-08T10:14:06Z"
}
