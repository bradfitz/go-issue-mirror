{
	"id": 164943382,
	"number": 16325,
	"state": "closed",
	"title": "cmd/cover: when a panic occurs in a function call, cover still marks the whole basic block covered",
	"body": "go version go1.6.2 darwin/amd64\r\nThis is similar to #10185, but the issue still occurs if the panic happens inside of a function call.\r\n\r\nA contrived example:\r\n\r\nrand.go:\r\n\r\n```go\r\npackage covertest\r\n\r\nimport (\r\n\t\"log\"\r\n\t\"math/rand\"\r\n)\r\n\r\nfunc Rand(i int64) int64 {\r\n\tv := rand.Int63n(i)\r\n\tlog.Println(v)\r\n\treturn v\r\n}\r\n\r\nfunc MaybeRand(i int64) int64 {\r\n\tdefer func() {\r\n\t\trecover()\r\n\t}()\r\n\treturn Rand(i)\r\n}\r\n```\r\n\r\nrand_test.go:\r\n```go\r\npackage covertest\r\n\r\nimport \"testing\"\r\n\r\nfunc TestMaybeRand(t *testing.T) {\r\n\tif MaybeRand(0) != 0 {\r\n\t\tt.Error(\"expected zero\")\r\n\t}\r\n}\r\n```\r\n\r\nCoverage should be less than 100% because the `log.Println` inside of Rand is never called. But executing the tests with coverage shows:\r\n\r\n    coverage: 100.0% of statements\r\n\r\nThe issue is that the coverage blocks are not fine grained enough if a panic occurs in a function call.\r\n\r\n",
	"user": {
		"login": "wadey",
		"id": 18437,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-07-11T22:00:27Z",
	"created_at": "2016-07-11T21:52:13Z",
	"updated_at": "2016-07-11T22:00:27Z"
}
