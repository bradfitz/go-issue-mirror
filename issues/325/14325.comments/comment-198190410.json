{
	"id": 198190410,
	"body": "There are some subtleties to when this is a safe transformation.  E.g., in\r\n\r\n    var a [2]int\r\n    p := a[:0]\r\n\r\n    for _, v := range [...]int{1,2,3,4} {\r\n        p = append(p, v)\r\n    }\r\n\r\nthe first two calls to `append(p, x)` need to still have the side effect of assigning `a[0] = 1` and `a[1] = 2`, because the Go spec guarantees `append` will reuse the underlying array if there's available capacity.\r\n\r\nInstead of up front calling a hypothetical runtime.ensurecapacity function, we could instead be smarter about calculating the desired length argument for runtime.growslice.  Currently, for `append(p, v)`, we just pass `len(p)+1` each time.\r\n\r\nHowever, the Go spec makes no guarantees about how large the newly allocated slice will be.  That gives us freedom to try to predict the target size better and let that influence what size slice to allocate.",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-18T03:46:36Z",
	"updated_at": "2016-03-18T03:46:36Z"
}
