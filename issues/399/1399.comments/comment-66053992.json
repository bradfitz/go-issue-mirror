{
	"id": 66053992,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eIt's consistent indeed; it caused me some troubles streamlining a function:\n\n// getFooNames creates a slice of non-empty names from a colon-separated string.\nfunc getFooNames(s string, emptyOK bool) []string {\n        if len(s) == 0 {\n                if !emptyOK {\n                        panic(\"empty string\")\n                }\n                return string{}\n        }\n        names := string.Split(s, \":\", -1)\n        for n := range names {\n                if len(n) == 0 {\n                        panic(\"empty name in a list\")\n                }\n                // ... more validation ...\n        }\n        return names\n}\n\ninto a form without the special-case return at the top:\n\nfunc getFooNames(s string, emptyOK bool) []string {\n        names := string.Split(s, \":\", -1)\n        for n := range names {\n                if len(n) == 0 {\n                        panic(\"empty name in a list\")\n                }\n                // ... more validation ...\n        }\n        if len(names) == 0 \u0026\u0026 !emptyOK {\n                panic(\"empty list\")\n        }\n        return names\n}\n\nI had assumed the loop would not run for empty s, but it did, and panicked.\n\nThe assumption is due to me having worked with Perl, where split(\"\") acts differently. \nI've checked out Python's split; it has multiple modes, one of which acts more like\nGo's.  Python documentation states:\n\n  Splitting an empty string with a specified separator returns [''].\n\nIt might benefit Perl programmers to mention it as well, e.g.:\n\n  Splitting an empty string returns a slice containing empty string as its element.\u003c/pre\u003e",
	"user": {
		"login": "masiulaniec",
		"id": 550892,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-01-09T00:25:16Z",
	"updated_at": "2014-12-08T10:08:10Z"
}
