{
	"id": 51276749,
	"number": 643,
	"state": "closed",
	"title": "Apparent inconsistency in gofmt replacement rules application",
	"body": "by **loughlinmchugh**:\n\n\u003cpre\u003eI have several files which implement the same functionality for orthogonal types and\nfollowing the example of the \ncontainer/vector/Makefile I'm trying to generate these files from a single template file.\n\nAs an example of the code in the template:\n\n\tpackage buffer\n\timport \u0026quot;unsafe\u0026quot;\n\n\ttype Buffer []interface{}\n\tfunc (b *Buffer) Bytes() IntBuffer { return *(*IntBuffer)(unsafe.Pointer(b)) }\n\tfunc (b *Buffer) iterate(c chan \u0026lt;- interface{}) {\n\t\tfor _, v := range *b { c \u0026lt;- v }\n\t\tclose(c)\n\t}\n\tfunc (b *Buffer) Iter() \u0026lt;-chan interface{} {\n\t\tc := make(chan interface{})\n\t\tgo b.iterate(c)\n\t\treturn c\n\t}\n\nand in my Makefile I'm using the following rule to generate a type-specific version:\n\n\tgenerate: buffer.go\n\t\t\u0026lt; buffer.go cat\\\n\t\t| gofmt -r='Buffer -\u0026gt; ByteBuffer'\\\n\t\t| gofmt -r 'interface{} -\u0026gt; byte'\\\n\t\t\u0026gt; bytebuffer.go\\\n\nWhen I run make, or when I use the statement gofmt -r='Buffer -\u0026gt; ByteBuffer' directly\nBuffer is not replaced with ByteBuffer. \nHowever interface{} is correctly replaced with byte. The same result occurs regardless\nof the order in which the two replacement \nrules are applied.\n\nMy platform details:\n\n$GOOS = darwin\n$GOARCH = 386\nGo release = release.2010-03-04\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 7,
	"closed_at": "2014-12-08T10:05:22Z",
	"created_at": "2010-03-04T16:42:57Z",
	"updated_at": "2016-06-24T19:14:15Z"
}
