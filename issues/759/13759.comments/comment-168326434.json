{
	"id": 168326434,
	"body": "Years ago I worked on a Java system that detected vanilla deadlocks on the fly.  In a green-threads-like system (which Go also resembles) when a thread is about to enter a wait state because of a lock, if the lock records the thread that owns it (this was true in our implementation), the about-to-wait thread can trace from lock, to thread, to lock, to thread, etc, as long as the threads are in a wait state.  If this search runs \"too far\" (e.g, more than 16) then the algorithm switches to serious deadlock detection and notes the current thread, and then the 32nd, 64th, etc, and checks each new thread encountered against those recorded to search for a duplicate.\r\n\r\nThis is something that can take the place of spinning for a lock; our system didn't do any spinning by default and enabling the deadlock detector tended to improve performance slightly.  The sort of information that we found useful in a deadlock was a stack trace for each thread involved.\r\n\r\nI think (not sure) that we actually marked threads on the fly while searching for deadlocks; a \"searching\" thread would abandon a search if it encountered some other thread's mark, and a thread would report a cycle if it encountered its own mark; however, I think that this was vulnerable to sometimes missing deadlocks in a race-to-deadlock, and also required more expensive load/store barriers.",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-01T18:16:49Z",
	"updated_at": "2016-01-01T18:16:49Z"
}
