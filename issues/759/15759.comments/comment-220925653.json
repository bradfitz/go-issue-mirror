{
	"id": 220925653,
	"body": "\u003e We want zero calls\r\n\r\nI agree\r\n\r\n\u003e Instead, I think you'd want something like a\r\n\u003e\r\n\u003e ToRGBA64(dst []color.RGBA64, sRect image.Rectangle) (dRect image.Rectangle)\r\n\r\nDo you mean a `ToRGBA64()` method for all image types? (in the `Image` interface)\r\n\r\nHow do you determine the size of `sRect`?\r\nDoes it have the same size as `dst`?\r\n\r\nIs `dRect` really useful?\r\n\r\nThis approach requires to allocate a large slice of `color.RGBA64`.\r\nDo you think it will be faster than 1 function call per pixel?\r\n\r\nIt also requires to rewrite all \"image encode\" functions in a non trivial way.\r\n\r\n\u003e In hindsight, maybe the core image.Image method should have been this instead of At, but we can't change that until Go 2.\r\n\r\nOf course.\r\n\r\nIt should be relatively easy to write a function `NewToRGBA64Func(m image.Image) ToRGBA64Func` and a type `type ToRGBA64Func func(dst []color.RGBA64, sRect image.Rectangle)`.\r\n(do you really need `dRect image.Rectangle`)?\r\n\r\nIt doesn't change the `Image` interface.\r\n\r\n\u003e For completeness, a separate approach (type switching on the source image type) is taken by the image/draw and golang.org/x/image/draw pacages.\r\n\r\nThis approach requires to write a specific code for each image type.",
	"user": {
		"login": "pierrre",
		"id": 131535,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-23T09:04:30Z",
	"updated_at": "2016-05-23T09:04:30Z"
}
