{
	"id": 149338122,
	"body": "One issue that came up here is what does this mean with respect to race\nconditions. I propose that any field or element in the referent of a go\npointer passed to C will be considered a read by the race detector. This\nwill tighten up the semantics around what Go can write while a C routine is\nrunning.\n\nOn Mon, Oct 19, 2015 at 2:38 PM, Ian Lance Taylor \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e @taruti \u003chttps://github.com/taruti\u003e\n\u003e\n\u003e A) You're right that scatter/gather syscalls using [][]byte won't work.\n\u003e I'm not opposed to handling them somehow in the future, though I don't know\n\u003e what that would look like. In the meantime you'll have to allocate the\n\u003e buffers in C, or you'll have to call the C code with multiple arguments.\n\u003e\n\u003e B) It's possible, but does it really come up that often in a performance\n\u003e sensitive context?\n\u003e\n\u003e C) In the default mode, nothing will happen if a C function takes too\n\u003e long, except that your program might eventually run out of memory because\n\u003e the GC can't run (that won't happen with 1.6 but it might happen in future\n\u003e releases). In the checking mode, you will get a panic. If you want to call\n\u003e a C function that does a read on a device that blocks arbitrarily long, you\n\u003e should read the data into a buffer allocated by C. We will make the\n\u003e syscall.Read function do the right thing on a long-blocking read, whatever\n\u003e that turns out to be.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/12416#issuecomment-149307830\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-19T20:31:41Z",
	"updated_at": "2015-10-19T20:31:41Z"
}
