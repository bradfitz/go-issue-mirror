{
	"id": 136494716,
	"body": "@ianlancetaylor So it sounds like the rationale then is you want to do direct pinning without transitive pinning, and transitive pinning is necessary if C code is going to access Go pointers in Go memory.  Your proposed solution seems to try to use the C type system to prevent C code from accessing Go pointers in Go memory.\r\n\r\nFor completeness, I see another solution of simply ruling that C code may not access Go pointers in Go memory.  I.e., if a *N pointer is passed to C code, the C code may freely read/write Buf, but not Next.  Instead, the C code would need to call into a Go helper if it wants to access the pointers.  (Analogously, Go code needs to call into C helpers to access unusual C struct members like bit fields.)",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-31T20:46:32Z",
	"updated_at": "2015-08-31T20:46:32Z"
}
