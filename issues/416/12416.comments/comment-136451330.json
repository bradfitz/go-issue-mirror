{
	"id": 136451330,
	"body": "@ianlancetaylor For the first rule, can you clarify what \"Go code may pass a Go pointer to C provided that the Go memory to which it points does not contain any Go pointers.\" means and perhaps some further rationale behind this restriction?  I understand why C code mustn't mutate Go pointers, but there seems to be a significant gap between those two restrictions.\r\n\r\nFor example, in the code below, is this rule satisfied or violated by passing a pointer to a pointer-free subregion of a Go struct?  If it's violated, do you propose the toolchain should reject this still?  If so, how?\r\n\r\n    // #include \u003cstring.h\u003e\r\n    import \"C\"\r\n\r\n    func fill(x []byte) {\r\n        C.memset(\u0026x[0], 'x', len(x))\r\n    }\r\n\r\n    type N struct {\r\n        Next *N\r\n        Buf [1024]byte\r\n    }\r\n\r\n    func fillN(n *N) {\r\n        fill(n.Buf[:])\r\n    }\r\n\r\nAlso, I assume by \"Go pointers\" you actually mean to include all pointer-like types (i.e., strings, slices, functions, interfaces, maps, channels)?",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-31T18:17:39Z",
	"updated_at": "2015-08-31T18:17:39Z"
}
