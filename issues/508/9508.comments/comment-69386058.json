{
	"id": 69386058,
	"body": "I had a third idea this morning.\r\nFind a way to trigger an apk build (easy part).\r\n\r\nThe apk build starts a tool or a subsection of the go tool that works similar to \"go test\".\r\nIt scans every package that will be included for a func named and defined \r\n\"func ApkManifest(m *apk.Manifest)\" and calls them with a single apk.Manifest.\r\nThese funcs could be precompiled in the existing .a files without any changes to the current tools.\r\nEach package adds it's requirements to this manifest object which in turn generates the xml file.\r\nNo need to write a complicated \"pragment parser\" and all of the ApkManifest() would be dropped from the final binary by the linker since only the \"go test\" like program uses them.\r\nThe apk package would just be a normal go package.\r\nFrom what I can see this is the most robust solution, requiring the least amount of work while maintaining simplicity.\r\n\r\nexample ApkManifest for stdlib net package\r\n```\r\n// inside a file only built on android.\r\nfunc ApkManifest(m *apk.Manifest) {\r\n   m.Target(16) // target \"android-16\"\r\n   m.ICanHazNetworks() // all funcs required to have lolcat based names.\r\n}\r\n```\r\n\r\nMight want to tell godoc to ignore ApkManifest with the proper definition, or not.\r\nA similar thing could be created for ios and possibly other systems that like to wrap programs up in bundles.",
	"user": {
		"login": "bryanturley",
		"id": 1634211,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-09T19:33:04Z",
	"updated_at": "2015-01-09T19:33:04Z"
}
