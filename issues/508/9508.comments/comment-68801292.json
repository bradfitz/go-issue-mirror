{
	"id": 68801292,
	"body": "And more\r\n\r\n* Version Code/Name\r\n* Custom Permissions\r\n* Services\r\n* Providers\r\n* Supported Screens\r\n* Metadata Nodes\r\n\r\nand so on. All of these things can have a place in a native game.\r\n\r\nIt'd likely be simpler to ask what you don't want to support. Having so many variations makes `_ \"imports\"` look clunky and doesn't account for variations or even different manifests for product flavors (demo with IAP/ads vs paid).\r\n\r\nI have a similar tool I put together for producing shared lib: https://github.com/dskinner/mobilize and sympathize with the effort here, nice work on binary_xml.go. It would be nice if `go build` did the right thing when `GOOS=android` as I currently have to conflate code gen and building just to keep workflow simple.\r\n\r\nBut, this feels like a perilous path leading down a dead end trying to support too many features of AndroidManifest and I'd likely never use it (or find it useful) in any currently conceivable fashion beyond prototyping.\r\n\r\nI know the discussion is pure go games written for Android/iOS, but realistically, games are likely to include features such as push notifications, in-app purchases, ads, etc. and much of this functionality on android is brought in with third party libs and configured in the manifest and/or resource files.",
	"user": {
		"login": "dskinner",
		"id": 92266,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-01-05T23:29:14Z",
	"updated_at": "2015-01-05T23:29:14Z"
}
