{
	"id": 66063117,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eAccording to RFC 6265 spaces are not allowed in the\nvalue of a cookie (not even if double-quoted). \nSee \u003ca href=\"http://tools.ietf.org/html/rfc6265#section-4.1.1\"\u003ehttp://tools.ietf.org/html/rfc6265#section-4.1.1\u003c/a\u003e\nUnfortunately RFC 2109 did allow spaces in\ndouble quoted values. \n\nRFC 6265 is pretty clear that the cookie-value is\nnot a string but just some octets.  Section 4.1.1\nstates that values should be encoded and suggests\nBase64. See also note at end of section 5.4.\n\nAs SetCookie does not return an error its possibilities\non an invalid cookie value are limited:\n - set the given (invalid) value (current behaviour)\n - ignore the cookie\n - panic \n - encode the value\nAs it is called SetCookie and not MustSetCookie panic is\nnot an option.  Just ignoring it without any feedback\nis unpolite.  Encoding the value is a hairy issue as\nthere is no single right way to do it.\n\nGo typically is very explicit, so an implicit, automatic\nencoding in SetCookie if the value contains illegal \ncharacters feels strange. Additionally it adds the \noverhead of deciding whether to encode or not to any\ncall.\n\nI'd suggest a better documentation of SetCookie with \nan example of how to manually encode the cookie value\nbeforehand.\u003c/pre\u003e",
	"user": {
		"login": "vdobler",
		"id": 701382,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-10-09T14:14:50Z",
	"updated_at": "2014-12-08T10:15:47Z"
}
