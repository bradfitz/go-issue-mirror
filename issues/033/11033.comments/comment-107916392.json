{
	"id": 107916392,
	"body": "I have analyzed this data segment and confirmed that it is a duplicate of the issue #11030.\r\n\r\nFor brevity, I isolated the raw DEFLATE stream: http://play.golang.org/p/KFEHgR2zal\r\nRunning the snippet, we see that it complains about an error before offset 36\r\n\r\nI decomposed the entire DEFLATE stream into the following (LSB on right):\r\n```python\r\n[\r\n\t# Last, dynamic block\r\n\t\"1\", \"10\", \r\n\r\n\t# HLIT: 257, HDIST: 1, HCLEN: 12\r\n\t\"00000\", \"00000\", \"1000\", \r\n\r\n\t# HCLEN codes\r\n\t\"000\", \"011\", \"011\", \"010\", \"000\", \"000\", \"000\", \"011\", \"000\", \"010\", \"000\", \"011\", \r\n\r\n\t# HLIT tree\r\n\tr\n\r\n\t# HDIST tree\r\n\t\"00\", \r\n\r\n\t# Compressed data\r\n\t\"10001\", \"0000\", \"0000\", \"11001\", \"1000\", \"1000\", \"00001\", \"1100\", \"11101\", \"010111\", \"0010\", \"1100\", \"0010\", \"01110\", \"0100\", \"000111\", \"01001\", \"01101\", \"00011\", \"001111\", \"10101\", \"111111\", \"100111\", \"00101\", \"10011\", \"01011\", \"0100\", \"11110\", \"101111\", \"011111\", \"1010\", \"11011\", \"1010\", \"110111\", \"0110\"\r\n]\r\n```\r\n\r\nParsing the HCLEN codes, we generate the following Huffman table (LSB on right):\r\n```python\r\n00  =\u003e 0\r\n10  =\u003e 5\r\n001 =\u003e 4\r\n101 =\u003e 6\r\n011 =\u003e 17\r\n111 =\u003e 18\r\n```\r\n\r\nThus, we can see that the HDIST tree is composed of a single zero-bit length (since the '00' code maps to the 0 symbol). To further confirm this, we can see the HDIST tree starts a bit offset 280. Converting to bytes, this is byte 35, which lies before the 36byte offset mentioned in the error.\r\n\r\nEDIT (further analysis):\r\n\r\nAs a test, I modified the HDIST tree to be full tree. The only changes were changing the number of symbols in the HDIST tree (from 1 to 16) and changing the HDIST tree itself to contain 16 symbols, each of 4bits in length. This was the only way to generate a full HDIST tree without modifying the HCLENs.\r\n```python\r\n[\r\n\t# Last, dynamic block\r\n\t\"1\", \"10\", \r\n\r\n\t#  HLIT: 257, HDIST: 16 (CHANGED), HCLEN: 12\r\n\t\"00000\", \"01111\", \"1000\", \r\n\r\n\t# HCLEN codes\r\n\t\"000\", \"011\", \"011\", \"010\", \"000\", \"000\", \"000\", \"011\", \"000\", \"010\", \"000\", \"011\", \r\n\r\n\t# HLIT tree\r\n\tr\n\r\n\t# HDIST tree (CHANGED)\r\n\t\"001\", \"001\", \"001\", \"001\", \"001\", \"001\", \"001\", \"001\", \"001\", \"001\", \"001\", \"001\", \"001\", \"001\", \"001\", \"001\",\r\n\r\n\t# Compressed data\r\n\t\"10001\", \"0000\", \"0000\", \"11001\", \"1000\", \"1000\", \"00001\", \"1100\", \"11101\", \"010111\", \"0010\", \"1100\", \"0010\", \"01110\", \"0100\", \"000111\", \"01001\", \"01101\", \"00011\", \"001111\", \"10101\", \"111111\", \"100111\", \"00101\", \"10011\", \"01011\", \"0100\", \"11110\", \"101111\", \"011111\", \"1010\", \"11011\", \"1010\", \"110111\", \"0110\"\r\n]\r\n```\r\nWhen composed into a byte stream, it now properly gets decoded by Go's flate library, further indicating that it is the HDIST tree causing issues.\r\n\r\nhttp://play.golang.org/p/e1pLj5NKjs",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-02T11:03:06Z",
	"updated_at": "2015-06-02T21:24:46Z"
}
