{
	"id": 203048005,
	"body": "Hi,\n\nThanks for the work you've put in to figuring out what's possible. Can you\nsay more about why these are in package net instead of package syscall?\nIt's a bit of a non-starter for package net's API to expose so much (really\nanything) from package syscall. If this were in syscall it would be more\npalatable, and at first glance I don't see why it can't be. But I haven't\ntried, so probably I'm missing something.\n\nThanks.\nRuss\n\nOn Tue, Mar 29, 2016 at 2:18 PM Matt Layher \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e *Overview*\n\u003e\n\u003e At this time, there is no mechanism for socket types outside of the\n\u003e standard library to access the runtime network poller. This proposal, if\n\u003e accepted, would enable a resolution to issue #10565\n\u003e \u003chttps://github.com/golang/go/issues/10565\u003e. This would enable packages\n\u003e outside of the standard library to take advantage of the runtime network\n\u003e poller, instead of implementing their own network polling mechanism.\n\u003e\n\u003e *Proposed Change*\n\u003e\n\u003e I propose adding a new API to package net which enables registration of\n\u003e arbitrary sockets for use with the runtime network poller. The design of\n\u003e this API is based upon a comment from @rsc \u003chttps://github.com/rsc\u003e found\n\u003e here: #11492 (comment)\n\u003e \u003chttps://github.com/golang/go/issues/11492#issuecomment-117855313\u003e.\n\u003e\n\u003e It seems to me that the net package should just keep using (and providing)\n\u003e only FileConn but perhaps we can put a registration mechanism in package\n\u003e syscall to let clients register converters between sockaddrs and net.Addr\n\u003e for non-standard sockaddr types.\n\u003e\n\u003e This is what I was able to come up with after a little bit of\n\u003e experimentation. Parameter list is to be determined, but this is what I was\n\u003e able to get working with my prototype on a Linux system. Efforts will be\n\u003e made to make this mechanism as generic and cross-platform friendly as\n\u003e possible, but it may not be implemented immediately on non-UNIX platforms.\n\u003e From what I can tell, syscall.Sockaddr does appear to be available on all\n\u003e platforms.\n\u003e\n\u003e package net\n\u003e // Registration mechanism, perhaps called in init() or main() when a// socket is first initalized.func RegisterSocket(\n\u003e     family int,\n\u003e     sockaddr syscall.Sockaddr,\n\u003e     addr Addr,\n\u003e     convertSockaddr func(syscall.Sockaddr) Addr,\n\u003e     convertNetAddr func(Addr) syscall.Sockaddr,\n\u003e )\n\u003e // Generic net.Conn and net.PacketConn implementation which embeds the// internal net.conn type.  Checks for registered socket hooks to determine// validity of sent and received net.Addr implementations.type SocketConn struct {\n\u003e     conn\n\u003e }\n\u003e\n\u003e *Example*\n\u003e\n\u003e Using a modified version of package net, I was able to gain access to the\n\u003e runtime network poller and\n\u003e simplify my raw sockets package \u003chttps://github.com/mdlayher/raw\u003e code to\n\u003e something like the following:\n\u003e\n\u003e // Called in init() in package raw\n\u003e net.RegisterSocket(\n\u003e     syscall.AF_PACKET,\n\u003e     \u0026syscall.SockaddrLinklayer{},\n\u003e     \u0026Addr{},\n\u003e     // internal conversion functions for syscall.SockaddrLinklayer \u003c-\u003e raw.Addr\n\u003e     convertSockaddr,\n\u003e     convertNetAddr,\n\u003e )\n\u003e sock, _ := syscall.Socket(syscall.AF_PACKET, syscall.SOCK_RAW, proto)\n\u003e _ = syscall.Bind(sock, \u0026syscall.SockaddrLinklayer{\n\u003e     Protocol: pbe,\n\u003e     Ifindex:  ifi.Index,\n\u003e })f := os.NewFile(uintptr(sock), \"linklayer\")// c is type net.SocketConn, backed by raw socket (uses raw.Addr for addressing)c := net.FilePacketConn(f)\n\u003e\n\u003e *Summary*\n\u003e\n\u003e The runtime network poller is an excellent mechanism, and enabling access\n\u003e to it will allow the future development of packages for raw ethernet\n\u003e sockets, netlink sockets, and other platform-specific socket types.\n\u003e\n\u003e If this proposal is accepted, I'd happily seek guidance from @mikioh\n\u003e \u003chttps://github.com/mikioh\u003e regarding creating the best possible API for\n\u003e this feature.\n\u003e\n\u003e Questions and comments appreciated, and thanks for your team.\n\u003e\n\u003e /cc @rsc \u003chttps://github.com/rsc\u003e @mikioh \u003chttps://github.com/mikioh\u003e\n\u003e\n\u003e â€”\n\u003e You are receiving this because you were mentioned.\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/15021\u003e\n\u003e\n",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-29T18:52:52Z",
	"updated_at": "2016-03-29T18:52:52Z"
}
