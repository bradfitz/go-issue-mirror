{
	"id": 66063798,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2:\n\n\u003cpre\u003eWe've defined that the method set is attached to named types:\nunnamed is not of a named type and thus has no method set.\n\nYou can make direct calls because unnamed.Greeting()\nturns into unnamed.Foo.Greeting(), but when you pass\nan unnamed into an interface value, the methods are lost.\n\nAnother common case is\n\nvar foo struct {\n    sync.Mutex\n}\n\nYou can call foo.Lock and foo.Unlock but you cannot do\n\nvar x sync.Locker = \u0026foo\n\nIan alerted me to this discrepancy a while back - I believe\ngccgo did not originally allow foo.Lock and foo.Unlock - but\nwe never decided whether it was something to change.\n\n\u003ca href=\"http://play.golang.org/p/wu0G_77L0W\"\u003ehttp://play.golang.org/p/wu0G_77L0W\u003c/a\u003e\n\nIt may be that there is nothing to change here.  It is already\nthe case that you can say x.M() in situations where M is not\nin x's method set:\n\nvar x bytes.Buffer\nx.Read(nil)\nvar r io.Reader = x  // fails - x has no Read method (\u0026x does)\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-02-28T17:38:24Z",
	"updated_at": "2014-12-08T10:16:23Z"
}
