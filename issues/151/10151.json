{
	"id": 60949948,
	"number": 10151,
	"state": "closed",
	"title": "spec: bad grammar for binary expressions",
	"body": "Section \"Operators\" defines:\r\n\r\n    Expression = UnaryExpr | Expression binary_op UnaryExpr .\r\n    UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .\r\n    \r\n    binary_op  = \"||\" | \"\u0026\u0026\" | rel_op | add_op | mul_op .\r\n    rel_op     = \"==\" | \"!=\" | \"\u003c\" | \"\u003c=\" | \"\u003e\" | \"\u003e=\" .\r\n    add_op     = \"+\" | \"-\" | \"|\" | \"^\" .\r\n    mul_op     = \"*\" | \"/\" | \"%\" | \"\u003c\u003c\" | \"\u003e\u003e\" | \"\u0026\" | \"\u0026^\" .\r\n    \r\n    unary_op   = \"+\" | \"-\" | \"!\" | \"^\" | \"*\" | \"\u0026\" | \"\u003c-\" .\r\n\r\nLater section \"Operator precedence\" explains how mul_op has higher precedence than add_op, etc., but according to the BNF grammar the only way to derive \"1 + 2 * 3\" is:\r\n\r\n    Expression\r\n    Expression binary_op UnaryExpr\r\n    (Expression binary_op UnaryExpr) binary_op UnaryExpr\r\n    (UnaryExpr binary_op UnaryExpr) binary_op UnaryExpr\r\n    (\"1\" \"+\" \"2\") \"*\" \"3\"\r\n\r\nSo the operator precedence section doesn't matter under the presented grammar.\r\n\r\nI think the Expression rule needs to be changed to\r\n\r\n    Expression = UnaryExpr | Expression binary_op Expression .\r\n\r\nI.e., the final UnaryExpr should be changed to Expression.  This matches the yacc grammar in cmd/internal/gc/go.y.",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2015-05-13T17:41:34Z",
	"created_at": "2015-03-13T00:58:40Z",
	"updated_at": "2016-06-25T02:03:11Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
