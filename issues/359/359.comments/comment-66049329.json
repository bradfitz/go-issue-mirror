{
	"id": 66049329,
	"body": "\u003ca id=\"c5\"\u003e\u003c/a\u003eComment 5:\n\n\u003cpre\u003eYou are correct that one could probably extend the notion of constants to composite\ntypes. One probably would exclude not just pointers, but all reference types. So\nconstants could be all composite value types (structs, arrays) where the element types\nthemselves are types that can have constant values. Naturally, one would want constant\ncomposite literals of those types. Operations such as field selection and array indexing\nwith constant index on such constant structs and arrays should probably return constant\nvalues again. The compiler would have to represent internally such structs and arrays\nsuch that all const operations could be executed at compile time.\n\nI don't think this would open a new meaning of \"const\" - I think it would simply extend\nit to more types than just the basic types. It would still permit exact representation\nand evaluation at compile time.\n\nThat said, I am not sure there's enough \"bang for the buck\": For one, there's a\nsignificant amount of extra language rules for this extended const concept which does\nnot seem super-important: I can't think of a lot of code that would benefit from being\nable to \"constant-fold\" field selections or constant array indices. Furthermore,\nwhenever such constant structs and arrays are used as a whole, they would have to be\n\"materialized\" in memory anyway, and thus loose any \"memory advantage\" that might exist.\nAlso, the concept doesn't extend orthogonally to _all_ composite literals (what about\nmaps? arguably they should be included, but I think that would require quite some work\nwhen used in place of non-constant maps). Finally, there would be quite a bit of\ncompiler work needed: for instance, a type checker now would have to be able to\nrepresent a new class of constants, requiring additional data structures, and operations\non them.\n\nNone of this is particularly difficult to do, but it adds enough extra complexity for a\nlittle used feature that it is probably not worth it (as you point out yourself).\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-12-26T18:03:41Z",
	"updated_at": "2014-12-08T10:04:16Z"
}
