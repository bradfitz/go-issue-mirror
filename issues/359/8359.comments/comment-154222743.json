{
	"id": 154222743,
	"body": "Copying my comments from CL/16669 for discussion (and is an expanded argument from my comment above):\r\n\r\nI definitely have an interest in seeing finer control of the compression performed in archive/zip, but I'm skeptical that the right approach is to couple aspects of DEFLATE into archive/zip. While this does solve the ability to select the compression level for the standard library's DEFLATE, what happens if I wanted to completely switch out the DEFLATE encoder with a parallelized one (for very high throughput)? What if I wanted to use the [Zopfli algorithm](https://en.wikipedia.org/wiki/Zopfli) (which produces a higher compression ratio than level 9, at the expense of very slow encoding speed)?\r\n\r\nThus, I believe the better solution is to just give the user the power to register any arbitrary Compressor or Decompressor. As it exists, it would be problematic to do this at the package level. For example, I may want to use Zopfli for one specific zip file, but not all of them. Thus, maybe the right approach would be to allow a user to register a Compressor/Decompressor at the Reader and Writer level? Thus, if a specific DEFLATE compressor is specified for that given Writer, it will use that instead of the package level pool.\r\n\r\nNew API methods:\r\n```go\r\n// RegisterCompressor registers custom compressors for a specific method ID.\r\n// If no compressors are registered, Writer will default to using the\r\n// compressors defined at the package level.\r\n(*Writer) RegisterCompressor(method uint16, enc Compressor)\r\n\r\n// RegisterDecompressor registers custom decompressors for a specific method ID.\r\n// If no decompressors are registered, Reader will default to using the\r\n// decompressors defined at the package level.\r\n(*Reader) RegisterDecompressor(method uint16, dec Decompressor)\r\n```\r\n\r\nExample usage:\r\n```go\r\nw := zip.NewWriter(buf)\r\nw.RegisterCompressor(zip.Deflate, func(wr io.Writer) (io.Writecloser, error) {\r\n\treturn zopfli.NewWriter(wr), nil\r\n})\r\n...\r\n```\r\n\r\nI believe this solution is better for the following reasons:\r\n* It enables much more flexibility and power. Although the expanded API does not directly solve the feature requested in this issue, it allows it to be trivially achieve with a few lines of code. In this sense, it enables exponentially more by doing less.\r\n* It avoids more coupling of DEFLATE components into archive/zip, which I believe is the wrong approach. The zip format supports more compression methods than DEFLATE, including bzip2, and lzma. Why special case DEFLATE but not other algorithms?",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-05T22:59:20Z",
	"updated_at": "2015-11-06T00:46:43Z"
}
