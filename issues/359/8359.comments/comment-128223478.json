{
	"id": 128223478,
	"body": "Just a thought, since I ran into something related to this.\r\n\r\nPerhaps the solution would be simply to allow an existing Compressor to be replaced. Currently, RegisterCompressor panics if the method was already registered. Maybe the library can allow them to be replaced.\r\n\r\nThis way, the user has more flexibility than simply setting the compression level. They can do:\r\n```go\r\nzip.RegisterCompressor(zip.Deflate, func(w io.Writer) (io.WriteCloser, error) {\r\n\treturn flate.NewWriter(w, flate.BestSpeed)\r\n})\r\n```\r\n\r\nThis gives users more power. For example, I can swap in custom version of the flate library for various purposes (like one that supports parallel compression or has a faster version of flate). One down-side is that this will lose the benefit of the sync.Pool that the library places used writers back in, but it shouldn't be too difficult for a user to re-implement the sync.Pool features.\r\n\r\n@bradfitz [In archive/zip/register.go](https://github.com/golang/go/blob/master/src/archive/zip/register.go), what was the purpose of guarding each Write and Close call of pooledFlateWriter with a mutex?",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-06T03:09:49Z",
	"updated_at": "2015-08-06T03:36:37Z"
}
