{
	"id": 184891572,
	"body": "Great, thanks. As I understand it now, the report concerns this command sequence:\r\n\r\n```\r\ngo install -v github.com/mattn/go-sqlite3\r\ngo install -v buggy\r\n```\r\n\r\nSpecifically, the report is that the first command installs the non-vendored go-sqlite3 and the second one builds and installs the vendored copy.\r\n\r\nIf so, that's working as intended. On the go command line, paths are always interpreted relative to GOROOT/GOPATH roots, not vendor directories. The canonical path for a vendored package includes the .../vendor/ prefix even though source code-level import references do not. That is, on the command line, 'github.com/mattn/go-sqlite3' always means the unvendored copy of go-sqlite3, while buggy/vendor/github.com/mattn/go-sqlite3 is a vendored copy. You'll see these expanded paths in the output of 'go list -json' or 'go list all' as well.\r\n\r\nWhat would be unintended is if the second of any of these command pairs printed anything at all (the first should do all the work):\r\n\r\n```\r\ngo install -v buggy\r\ngo install -v buggy\r\n```\r\n\r\n```\r\ngo install -v buggy/vendor/github.com/mattn/go-sqlite3\r\ngo install -v buggy/vendor/github.com/mattn/go-sqlite3\r\n```\r\n\r\n```\r\ngo install -v github.com/mattn/go-sqlite3\r\ngo install -v github.com/mattn/go-sqlite3\r\n```\r\n\r\nCan you confirm that on your system those are all correctly doing nothing the second time? Thanks.\r\n\r\n",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-16T21:58:36Z",
	"updated_at": "2016-02-16T21:58:36Z"
}
