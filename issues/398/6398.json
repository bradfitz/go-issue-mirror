{
	"id": 51285127,
	"number": 6398,
	"state": "closed",
	"title": "spec: switch with no value uses bool rather than untyped bool",
	"body": "\u003cpre\u003epackage main\n\ntype B bool\n\nfunc main() {\n\tvar a B\n\tif a == true {\n\t\tprintln(\u0026quot;1\u0026quot;)\n\t}\n\tswitch true {\n\tcase a:\n\t\tprintln(\u0026quot;2\u0026quot;)\n\t}\n\tswitch {\n\tcase a:\n\t\tprintln(\u0026quot;3\u0026quot;)\n\t}\n}\n\n\nCurrently this gets two errors at compile time:\n\nfoo.go:11: invalid case a in switch on true (mismatched types B and bool)\nfoo.go:15: invalid case a in switch (mismatched types B and bool)\n\nThe spec says \u0026quot;the cases contain expressions that are compared against the value of\nthe switch expression.\u0026quot;  It's a little vague but it seems plausible that they\nshould be compared using ==.  In that case it's hard to see why an if statement and a\nswitch statement would act differently here.\n\nNote that gccgo acts like cmd/gc here, so we could also change the spec.  But in this\ncase I think the spec is right and the compilers are wrong.\n\nToo late for Go 1.2 but should be fixed for Go 1.3.\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		},
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 16,
	"closed_at": "2015-07-30T23:11:31Z",
	"created_at": "2013-09-16T16:02:42Z",
	"updated_at": "2016-08-05T16:08:22Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
