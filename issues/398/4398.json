{
	"id": 51282079,
	"number": 4398,
	"state": "closed",
	"title": "spec: typed floating point constant does not match compiler behaviour",
	"body": "\u003cpre\u003eIs this a valid program?\n\npackage main\n\nimport \u0026quot;fmt\u0026quot;\n\nconst x1 = 1 - float64(1.00000000000000000001)\nconst x2 = float64(1 - 1.00000000000000000001)\n\nfunc main() {\n\tfmt.Println(x1)\n\tfmt.Println(x2)\n}\n\nThe spec says that a constant value x can be converted to type T if \u0026quot;x is\nrepresentable by a value of type T.\u0026quot;  The value 1.00000000000000000001 is not\nrepresentable in float64; the closest approximation is 1.\n\nNeither compiler actually behaves this way.  The two compilers produce different results\nfor the above program.  The gc compiler rounds the value before computing the\nsubtraction for x1; gccgo does not.  Probably the gc compiler is correct, but the spec\ndoes not support either choice.\n\nWe probably do not want to take the spec too seriously, because it would mean that,\ne.g., float64(math.Pi) would be invalid.  The spec should probably say that converting a\nconstant to a floating point value permits dropping the least significant bits.\n\nThe correct implementation of the above program will then hinge on the meaning of\n\u0026quot;typed constant,\u0026quot; a term that the spec does not clearly describe.\u003c/pre\u003e",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 9,
	"closed_at": "2014-12-08T10:23:23Z",
	"created_at": "2012-11-16T14:38:07Z",
	"updated_at": "2016-06-24T22:28:15Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
