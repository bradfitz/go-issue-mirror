{
	"id": 170393061,
	"body": "Not sure I agree that there isn't a straight forward alternative. The problem is its inconsistent.\r\nIf it consistently defaulted to $GOPATH/bin and overwrote whatever was there regardless of architecture, then we could just use GOBIN to cross compile safely. I mean the whole point of GOBIN is to specify that directory correct? I could be wrong on that...\r\n\r\nconsistency is why I suggested just using a flag to force the directory mode. https://github.com/golang/go/issues/11001. That approach was to keep current behaviour, but if we don't care about maintaining that then lets just drop the creation of additional directories and emit warnings (or refuse to compile) when GOBIN isn't set and you are compiling to a non-native binary.\r\n\r\nI don't see requiring GOBIN to be set when cross compiling would be a huge issue, we specify the majority\r\nof those environment variable anyways when cross compiling.\r\ni.e)\r\n```bash\r\nGOBIN=$PWD/darwin-amd64 GOOS=darwin GOARCH=amd64 go install ./...\r\nGOBIN=$PWD/linux-amd64 GOOS=linux GOARCH=amd64 go install ./...\r\n```\r\nwould write to different directories and be safe where as:\r\n```bash\r\nGOOS=darwin GOARCH=amd64 go install ./...\r\nGOOS=linux GOARCH=amd64 go install ./...\r\n```\r\nwould overwrite each other and emit a warning (or error) for one of the attempts depending if you where on mac or linux.",
	"user": {
		"login": "james-lawrence",
		"id": 2835871,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-01-10T20:52:43Z",
	"updated_at": "2016-01-14T23:35:40Z"
}
