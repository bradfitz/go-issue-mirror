{
	"id": 176243942,
	"number": 17063,
	"state": "closed",
	"title": "math: add exported variables +Inf, -Inf, +0, -0 ",
	"body": "Minor request - support assignment of IEEE 754 signed zeros, and non-numbers in the package in the simplest possible form\r\n\r\nI brought this up here https://groups.google.com/forum/#!topic/golang-nuts/BVyo-QQO8xg\r\n\r\nThe question was answered, and there are ways to generate all these\r\n\r\n+Inf = math.Inf(+1)\r\n-Inf = math.Inf(-1)\r\n-0 = math.Copysign(0, -1)\r\nNaN = math.NaN()\r\n\r\nIt seemed a useful thing to have these defined as exportable variables at the beginning of the package eg math.Infinity, math.MinusInfinity, math.NaN, math.MinusZero \r\n\r\n**Rationale - ease of use, simplicity, makes for clearer code** .. eg üëç \r\n\r\n`if a/b == math.MinusZero {..}`\r\n\r\nrather than \r\n\r\n`if a/b == math.CopySign(0,-1) {..}`\r\n\r\nI see that math.NaN() is already supported as a function not variable - so maybe the rest should follow this pattern..\r\n\r\nThanks .\r\n",
	"user": {
		"login": "xiofen",
		"id": 11979606,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FeatureRequest"
		},
		{
			"name": "Proposal"
		},
		{
			"name": "Proposal-Declined"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 22,
	"closed_at": "2016-09-12T04:12:03Z",
	"created_at": "2016-09-11T13:29:55Z",
	"updated_at": "2016-09-13T02:22:53Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	}
}
