{
	"id": 246198506,
	"body": "\u003e Instead of adding new names we could intrinsify math.Nan() and others in the compiler backend like the atomics. \r\n\r\nIt's already inlined, no?\r\n\r\n```go\r\npackage main\r\n\r\nimport \"math\"  \r\n  \r\nvar v float64\r\n  \r\nfunc main() {\r\n        v = math.Inf(1)\r\n}\r\n```\r\n\r\n```\r\n$ go tool compile -m -m ~/inf.go\r\n/home/bradfitz/inf.go:7: can inline main as: func() { v = math.Inf(1) }\r\n/home/bradfitz/inf.go:8: inlining call to math.Inf func(int) float64 { var math.v·3 uint64; math.v·3 = \u003cN\u003e; if math.sign·2 \u003e= int(0) { math.v·3 = uint64(9218868437227405312) } else { math.v·3 = uint64(18442240474082181120) }; return math.Float64frombits(math.v·3) }\r\n/home/bradfitz/inf.go:8: inlining call to math.Float64frombits func(uint64) float64 { return *(*float64)(unsafe.Pointer(\u0026math.b·2)) }\r\n/home/bradfitz/inf.go:8: main \u0026math.b·2 does not escape\r\n\r\n$ go tool compile -S ~/inf.go  \r\n\"\".main t=1 size=51 args=0x0 locals=0x10\r\n        0x0000 00000 (/home/bradfitz/inf.go:7)  TEXT    \"\".main(SB), $16-0\r\n        0x0000 00000 (/home/bradfitz/inf.go:7)  SUBQ    $16, SP  \r\n        0x0004 00004 (/home/bradfitz/inf.go:7)  MOVQ    BP, 8(SP)  \r\n        0x0009 00009 (/home/bradfitz/inf.go:7)  LEAQ    8(SP), BP\r\n        0x000e 00014 (/home/bradfitz/inf.go:7)  FUNCDATA        $0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)  \r\n        0x000e 00014 (/home/bradfitz/inf.go:7)  FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\r\n        0x000e 00014 (/home/bradfitz/inf.go:8)  MOVQ    $9218868437227405312, AX\r\n        0x0018 00024 (/home/bradfitz/inf.go:8)  MOVQ    AX, math.b·2(SP)\r\n        0x001c 00028 (/home/bradfitz/inf.go:8)  MOVSD   math.b·2(SP), X0\r\n        0x0021 00033 (/home/bradfitz/inf.go:8)  MOVSD   X0, \"\".v(SB)\r\n        0x0029 00041 (/home/bradfitz/inf.go:9)  MOVQ    8(SP), BP\r\n        0x002e 00046 (/home/bradfitz/inf.go:9)  ADDQ    $16, SP\r\n        0x0032 00050 (/home/bradfitz/inf.go:9)  RET\r\n        0x0000 48 83 ec 10 48 89 6c 24 08 48 8d 6c 24 08 48 b8  H...H.l$.H.l$.H.\r\n        0x0010 00 00 00 00 00 00 f0 7f 48 89 04 24 f2 0f 10 04  ........H..$....\r\n        0x0020 24 f2 0f 11 05 00 00 00 00 48 8b 6c 24 08 48 83  $........H.l$.H.\r\n        0x0030 c4 10 c3                                         ...\r\n        rel 37+4 t=14 \"\".v+0\r\n```\r\n\r\nLikewise with `NaN`.\r\n\r\nI don't think there's anything to do here.\r\n\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 2,
		"+1": 2
	},
	"created_at": "2016-09-11T19:18:09Z",
	"updated_at": "2016-09-11T19:18:09Z"
}
