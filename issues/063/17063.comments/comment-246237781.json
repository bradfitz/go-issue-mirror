{
	"id": 246237781,
	"body": "What @ianlancetaylor said: Unless there's a compelling (as in \"extremely strong\") argument for this, I don't see any reason to make the API bigger.\r\n\r\nFirst of all, infinities may be meaningful results as part of a computation (per IEEE floating-point behavior), but they are rarely input and thus we rarely need the actual values. And we can create an infinity easily enough. If there's a performance issue, in creating them, one can trivially create one and store it locally. \r\n\r\nThe case for NaNs is even more rare. Furthermore, there's many NaNs. Anybody who has to do more with NaNs but testing for them, will probably want to have full control over the bits (which they already have). Testing for a NaN is trivial: x != x for NaNs.\r\n\r\nThis leaves -0; and in fact -0 might be the only value where it might be useful to have an easier way to access one besides with Copysign. math/big needs a few -0's in it's code, mostly for IEEE compatibility when converting to float32/64. Note that we cannot have a -0 constant, because Go constants don't support negative zeros. Thus, we could have a math.MinusZero variable. But that runs the risk that somebody modifies that value; so we would need a MinusZero() function. At which point we can just as well call Copysign. But that leaves away the elementary solution which doesn't even require package math which is: `x := 0.0; x = -x` and now `x` is -0.\r\n\r\nI vote against this proposal/suggestion.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-12T03:52:39Z",
	"updated_at": "2016-09-12T03:53:58Z"
}
