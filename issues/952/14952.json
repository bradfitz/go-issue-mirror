{
	"id": 143387876,
	"number": 14952,
	"state": "open",
	"title": "net/http: add switches to accept/send bogus HTTP?",
	"body": "We are writing a reverse proxy that we want to be completely transparent in terms of the HTTP request URI. If a client sends an invalid Request URI, we want to forward it on as is and not modify it in any way.\r\n\r\nWe have been able to almost achieve this goal using the `url.Opaque` field, expect for http requests starting with `//`. In the URL.RequestURI() method [here](https://github.com/golang/go/blob/3afbb690d5dd87949c87a8dd8d88cb4f3489f644/src/net/url/url.go#L919-L921), we see that an explicit check is being made for a prefix of `//` and the Scheme is appended. This was added for issue https://github.com/golang/go/issues/4860.\r\n\r\nThe issue https://github.com/golang/go/issues/10433 mentions a workaround for the specific usecase of `//`, but using `RawPath` makes `URL.RequestURI()` return a url-encoded RequestURI through the use of `EscapedPath()`. This is also a violation of our goal of transparency.\r\n\r\nIf there is another workaround that we are not aware, help finding that out would be appreciated, otherwise we would ask whether or not this is a feature the Go developers would support.\r\n\r\nReference issue: https://github.com/cloudfoundry/gorouter/issues/60\r\n\r\n@crhino \u0026\u0026 @shashwathi",
	"user": {
		"login": "crhino",
		"id": 4146455,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Thinking"
		}
	],
	"comments": 12,
	"created_at": "2016-03-24T23:33:37Z",
	"updated_at": "2016-07-11T21:42:32Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
