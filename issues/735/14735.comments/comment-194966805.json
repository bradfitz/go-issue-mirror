{
	"id": 194966805,
	"body": "\u003e Is it possible to adjust heap goal according to current\r\n\u003e system memory pressure (but capped by some user\r\n\u003e setting, e.g. GOGC)?\r\n\r\nIMO, this again falls prey to the fallacy of thinking of memory as \"unused.\" All memory is used all of the time, just for different things. Having an application use all of the system's memory is never the best policy. As an extreme example, at the very least you want to leave space for the application's own binary in the OS file cache; if you put the system under more pressure, the application will slow down, even though you're giving it more memory. In most applications there are other things in memory that are helping out the application, but don't count toward its RSS. I have no idea how to compute the optimal trade-off here, hence heuristics that try to keep the memory footprint within the realm of the minimum possible footprint.\r\n\r\nHierarchical memory management is actually an area I feel should be ripe for research, but I've never seen anything on it. When different layers can adjust their resource usage in different ways, it really feels like there should be a cooperative way to iterate toward an optimum.\r\n\r\n\u003e For example, we can query getrusage(2) periodically,\r\n\u003e and reduce the heap goal if we triggered any swaps\r\n\u003e during the last cycle?\r\n\r\nLinux doesn't actually report this. Even if it did, a lot of systems (particularly server systems) will kill your process before you ever start swapping. And even if the system does swap, this won't tell you if your application is causing other applications to swap.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-10T17:27:19Z",
	"updated_at": "2016-03-10T17:27:19Z"
}
