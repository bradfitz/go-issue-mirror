{
	"id": 194759964,
	"body": "\u003e Interesting. Are you basically proposing that we low-pass filter the heap goal? (Or at least low-pass filter it when it's going up.)\r\n\r\nYes, low-pass filter when heap is growing.\r\n\r\n\u003e I'm curious for more details about v8's GC scheduling if you have them or have a pointer.\r\n\r\nCan't find anything now. Probably it was just personal communication.\r\n\r\n\u003e If anything, we need to return memory to the OS more aggressively.\r\n\r\nCompletely agree.\r\nIf the additional GC cost turns out to be noticeable, it seems to me that introducing an additional lower-frequency metric (max RSS during last X minutes) will allow to reduce the overhead to any target level. \r\n\r\n\u003e @dvyukov, what you are describing is the exact opposite of the problem I see most often when looking at GC overheads.\r\n\r\nI wonder if we can do heap growth throttling for long running server and client programs without compromising compiler... I looked at compiler gctrace, and the steady growth is easily recognizable. So the simplest heuristic would be to throttle gc goal once, if during the next gc reachable memory continues to grow, give up with throttling.\r\n\r\n\u003e and GOGC gives control in the cases where it absolutely needs changing.\r\n\r\nThe absolutely need is more-or-less always related to reduction of GOGC value (you have infinite amount of CPU time, but limited memory). So temporary reducing GOGC should not be an issue. And the throttling should correlate with GOGC (e.g. GOGC/2), so you still can control it with GOGC.\r\n\r\nFTR, here are compiler traces for net package with different values of GOGC:\r\n\r\n```\r\nGOGC=100\r\n========\r\n\r\n0.94user 0.05system 0:00.58elapsed 169%CPU (0avgtext+0avgdata 66404maxresident)k\r\n0.99user 0.05system 0:00.58elapsed 179%CPU (0avgtext+0avgdata 66720maxresident)k\r\n0.88user 0.15system 0:00.55elapsed 186%CPU (0avgtext+0avgdata 67256maxresident)k\r\n0.85user 0.15system 0:00.56elapsed 178%CPU (0avgtext+0avgdata 67084maxresident)k\r\n0.97user 0.14system 0:00.58elapsed 190%CPU (0avgtext+0avgdata 66928maxresident)k\r\n\r\n\r\ngc 1 @0.004s 1%: 0.12+2.8+0.35 ms clock, 0.51+0.38/3.7/1.5+1.4 ms cpu, 4-\u003e4-\u003e3 MB, 5 MB goal, 48 P\r\ngc 2 @0.015s 2%: 0.12+2.4+0.45 ms clock, 1.2+0.25/7.1/2.8+4.5 ms cpu, 6-\u003e7-\u003e5 MB, 7 MB goal, 48 P\r\ngc 3 @0.031s 2%: 0.048+2.6+0.43 ms clock, 0.88+0.39/12/5.8+7.7 ms cpu, 10-\u003e11-\u003e9 MB, 11 MB goal, 48 P\r\ngc 4 @0.069s 2%: 0.043+2.9+0.44 ms clock, 0.87+1.8/22/19+8.9 ms cpu, 17-\u003e18-\u003e15 MB, 19 MB goal, 48 P\r\ngc 5 @0.135s 1%: 0.043+4.4+0.39 ms clock, 1.2+2.0/28/20+11 ms cpu, 29-\u003e30-\u003e20 MB, 31 MB goal, 48 P\r\ngc 6 @0.233s 1%: 0.052+6.1+0.41 ms clock, 1.6+2.5/37/14+12 ms cpu, 39-\u003e40-\u003e25 MB, 41 MB goal, 48 P\r\ngc 7 @0.356s 1%: 0.017+5.5+0.34 ms clock, 0.56+2.7/46/23+11 ms cpu, 49-\u003e49-\u003e29 MB, 50 MB goal, 48 P\r\ngc 8 @0.484s 1%: 0.023+8.0+0.50 ms clock, 0.75+4.8/60/24+16 ms cpu, 58-\u003e59-\u003e37 MB, 59 MB goal, 48 P\r\n\r\nGOGC=50\r\n=======\r\n\r\n1.33user 0.06system 0:00.62elapsed 225%CPU (0avgtext+0avgdata 58680maxresident)k\r\n1.43user 0.05system 0:00.63elapsed 233%CPU (0avgtext+0avgdata 58128maxresident)k\r\n1.40user 0.07system 0:00.62elapsed 236%CPU (0avgtext+0avgdata 59396maxresident)k\r\n1.45user 0.08system 0:00.61elapsed 249%CPU (0avgtext+0avgdata 56272maxresident)k\r\n1.37user 0.05system 0:00.62elapsed 230%CPU (0avgtext+0avgdata 60124maxresident)k\r\n\r\ngc 1 @0.001s 1%: 0.16+2.6+0.27 ms clock, 0.48+0.017/2.6/0.58+0.83 ms cpu, 3-\u003e4-\u003e3 MB, 4 MB goal, 48 P\r\ngc 2 @0.005s 2%: 0.043+1.9+0.27 ms clock, 0.39+0.30/2.7/0.72+2.4 ms cpu, 4-\u003e4-\u003e4 MB, 5 MB goal, 48 P\r\ngc 3 @0.008s 3%: 0.031+2.1+0.30 ms clock, 0.41+0.32/4.0/0.69+4.0 ms cpu, 4-\u003e5-\u003e4 MB, 5 MB goal, 48 P\r\ngc 4 @0.012s 4%: 0.050+2.2+0.30 ms clock, 0.81+0.23/5.6/1.0+4.8 ms cpu, 5-\u003e5-\u003e5 MB, 6 MB goal, 48 P\r\ngc 5 @0.018s 4%: 0.031+2.4+0.29 ms clock, 0.62+0.49/6.9/1.7+5.8 ms cpu, 6-\u003e7-\u003e6 MB, 7 MB goal, 48 P\r\ngc 6 @0.025s 4%: 0.034+2.6+0.32 ms clock, 0.80+0.51/9.5/3.7+7.5 ms cpu, 8-\u003e9-\u003e7 MB, 9 MB goal, 48 P\r\ngc 7 @0.035s 4%: 0.042+3.2+0.32 ms clock, 1.1+0.61/10/4.4+8.4 ms cpu, 10-\u003e11-\u003e10 MB, 11 MB goal, 48 P\r\ngc 8 @0.051s 4%: 0.036+3.4+0.31 ms clock, 1.0+0.73/14/9.3+8.7 ms cpu, 14-\u003e14-\u003e13 MB, 15 MB goal, 48 P\r\ngc 9 @0.076s 3%: 0.030+4.2+0.39 ms clock, 0.92+1.9/22/14+11 ms cpu, 19-\u003e19-\u003e18 MB, 20 MB goal, 48 P\r\ngc 10 @0.108s 3%: 0.011+3.9+0.35 ms clock, 0.35+2.0/21/27+11 ms cpu, 25-\u003e26-\u003e19 MB, 26 MB goal, 48 P\r\ngc 11 @0.159s 2%: 0.025+3.8+0.37 ms clock, 0.82+1.3/37/8.3+12 ms cpu, 29-\u003e29-\u003e22 MB, 30 MB goal, 48 P\r\ngc 12 @0.218s 2%: 0.024+21+0.43 ms clock, 0.79+1.4/39/1.8+13 ms cpu, 32-\u003e32-\u003e24 MB, 33 MB goal, 48 P\r\ngc 13 @0.298s 2%: 0.012+5.0+0.40 ms clock, 0.40+2.6/40/27+13 ms cpu, 35-\u003e36-\u003e26 MB, 36 MB goal, 48 P\r\ngc 14 @0.366s 2%: 0.012+6.8+0.41 ms clock, 0.40+2.6/42/32+13 ms cpu, 39-\u003e39-\u003e29 MB, 40 MB goal, 48 P\r\ngc 15 @0.440s 2%: 0.026+9.2+0.45 ms clock, 0.85+5.3/61/8.1+14 ms cpu, 43-\u003e43-\u003e32 MB, 44 MB goal, 48 P\r\ngc 16 @0.519s 2%: 0.014+7.0+0.43 ms clock, 0.44+3.7/49/49+14 ms cpu, 48-\u003e48-\u003e36 MB, 49 MB goal, 48 P\r\n\r\nGOGC=30\r\n=======\r\n\r\n1.85user 0.06system 0:00.65elapsed 294%CPU (0avgtext+0avgdata 53980maxresident)k\r\n1.64user 0.12system 0:00.65elapsed 267%CPU (0avgtext+0avgdata 54772maxresident)k\r\n1.89user 0.05system 0:00.68elapsed 285%CPU (0avgtext+0avgdata 56444maxresident)k\r\n1.74user 0.07system 0:00.66elapsed 274%CPU (0avgtext+0avgdata 54508maxresident)k\r\n1.65user 0.04system 0:00.66elapsed 255%CPU (0avgtext+0avgdata 55444maxresident)k\r\n\r\ngc 1 @0.002s 1%: 0.20+2.3+0.17 ms clock, 0.62+0.14/2.8/0.83+0.53 ms cpu, 3-\u003e3-\u003e3 MB, 4 MB goal, 48 P\r\ngc 2 @0.005s 2%: 0.059+1.9+0.37 ms clock, 0.53+1.5/0.90/0.51+3.4 ms cpu, 3-\u003e3-\u003e3 MB, 4 MB goal, 48 P\r\ngc 3 @0.008s 3%: 0.052+2.1+0.36 ms clock, 0.57+0.48/3.4/0.60+4.0 ms cpu, 3-\u003e4-\u003e3 MB, 4 MB goal, 48 P\r\ngc 4 @0.012s 4%: 0.054+2.4+0.40 ms clock, 0.76+0.23/4.2/0.77+5.6 ms cpu, 4-\u003e4-\u003e4 MB, 5 MB goal, 48 P\r\ngc 5 @0.016s 4%: 0.065+2.7+0.29 ms clock, 1.1+0.16/7.0/1.1+5.0 ms cpu, 4-\u003e5-\u003e4 MB, 5 MB goal, 48 P\r\ngc 6 @0.022s 5%: 0.054+2.7+0.40 ms clock, 1.0+0.41/9.0/2.3+7.6 ms cpu, 5-\u003e6-\u003e5 MB, 6 MB goal, 48 P\r\ngc 7 @0.028s 5%: 0.059+3.2+0.40 ms clock, 1.3+0.62/10/5.3+8.9 ms cpu, 6-\u003e7-\u003e6 MB, 7 MB goal, 48 P\r\ngc 8 @0.034s 5%: 0.052+3.0+0.45 ms clock, 1.4+0.15/12/6.8+12 ms cpu, 7-\u003e8-\u003e7 MB, 8 MB goal, 48 P\r\ngc 9 @0.043s 6%: 0.040+2.9+0.44 ms clock, 1.1+0.38/15/0.73+12 ms cpu, 9-\u003e9-\u003e8 MB, 10 MB goal, 48 P\r\ngc 10 @0.054s 6%: 0.051+3.8+0.40 ms clock, 1.5+1.4/24/30+12 ms cpu, 10-\u003e11-\u003e10 MB, 11 MB goal, 48 P\r\ngc 11 @0.068s 6%: 0.012+3.7+0.42 ms clock, 0.40+1.0/17/22+13 ms cpu, 13-\u003e13-\u003e12 MB, 14 MB goal, 48 P\r\ngc 12 @0.089s 5%: 0.014+3.9+0.42 ms clock, 0.44+1.9/23/33+13 ms cpu, 16-\u003e16-\u003e15 MB, 17 MB goal, 48 P\r\ngc 13 @0.114s 5%: 0.014+4.0+0.42 ms clock, 0.45+2.3/24/17+13 ms cpu, 19-\u003e20-\u003e18 MB, 20 MB goal, 48 P\r\ngc 14 @0.141s 4%: 0.015+5.1+0.40 ms clock, 0.50+2.8/33/19+13 ms cpu, 23-\u003e24-\u003e19 MB, 24 MB goal, 48 P\r\ngc 15 @0.179s 4%: 0.022+3.7+0.46 ms clock, 0.73+1.4/33/29+14 ms cpu, 25-\u003e26-\u003e20 MB, 26 MB goal, 48 P\r\ngc 16 @0.213s 4%: 0.014+5.2+0.47 ms clock, 0.47+2.0/32/44+15 ms cpu, 27-\u003e27-\u003e22 MB, 28 MB goal, 48 P\r\ngc 17 @0.259s 3%: 0.014+7.5+0.45 ms clock, 0.47+2.0/36/22+14 ms cpu, 29-\u003e29-\u003e24 MB, 30 MB goal, 48 P\r\ngc 18 @0.302s 3%: 0.020+22+0.44 ms clock, 0.66+3.1/36/3.2+14 ms cpu, 31-\u003e31-\u003e25 MB, 32 MB goal, 48 P\r\ngc 19 @0.366s 3%: 0.021+5.4+0.48 ms clock, 0.70+1.5/44/13+15 ms cpu, 33-\u003e34-\u003e27 MB, 34 MB goal, 48 P\r\ngc 20 @0.418s 3%: 0.014+9.9+0.41 ms clock, 0.46+6.6/57/2.8+13 ms cpu, 35-\u003e35-\u003e28 MB, 36 MB goal, 48 P\r\ngc 21 @0.477s 3%: 0.012+4.1+0.42 ms clock, 0.40+3.0/41/37+13 ms cpu, 37-\u003e38-\u003e30 MB, 38 MB goal, 48 P\r\ngc 22 @0.525s 3%: 0.022+6.8+0.53 ms clock, 0.70+3.9/47/29+17 ms cpu, 40-\u003e40-\u003e33 MB, 41 MB goal, 48 P\r\ngc 23 @0.587s 3%: 0.014+5.9+0.41 ms clock, 0.46+1.5/53/73+13 ms cpu, 43-\u003e44-\u003e35 MB, 44 MB goal, 48 P\r\ngc 24 @0.639s 3%: 0.023+7.6+0.54 ms clock, 0.74+4.2/62/30+17 ms cpu, 46-\u003e47-\u003e38 MB, 47 MB goal, 48 P\r\n```",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-10T09:47:58Z",
	"updated_at": "2016-03-10T09:47:58Z"
}
