{
	"id": 119269579,
	"number": 13420,
	"state": "closed",
	"title": "spec: example in specification for struct tags not valid tags or not representative of tag usage",
	"body": "The example given in the [spec](https://golang.org/ref/spec#Struct_types) is this:\r\n\r\n```\r\n// A struct corresponding to the TimeStamp protocol buffer.\r\n// The tag strings define the protocol buffer field numbers.\r\nstruct {\r\n\tmicrosec  uint64 \"field 1\"\r\n\tserverIP6 uint64 \"field 2\"\r\n\tprocess   string \"field 3\"\r\n}\r\n```\r\n\r\nHowever, the reflect packages will not accept these tags when performing queries on them:\r\n\r\n```\r\n// A StructTag is the tag string in a struct field.\r\n//\r\n// By convention, tag strings are a concatenation of\r\n// optionally space-separated key:\"value\" pairs.\r\n// Each key is a non-empty string consisting of non-control\r\n// characters other than space (U+0020 ' '), quote (U+0022 '\"'),\r\n// and colon (U+003A ':').  Each value is quoted using U+0022 '\"'\r\n// characters and Go string literal syntax.\r\n```\r\n\r\nNot explicitly mentioned is that there cannot a space before or after the colon.\r\n\r\nSuggest change to something similar to\r\n\r\n```\r\n// A struct corresponding to the TimeStamp protocol buffer.\r\n// The tag strings define the protocol buffer field numbers.\r\nstruct {\r\n\tmicrosec  uint64 \"field:\\\"1\\\"\"\r\n\tserverIP6 uint64 \"field:\\\"2\\\" desc:\\\"holds servers IPv6 address as integer\\\"\"\r\n\tprocess   string `field:\"3\"`\r\n}\r\n```\r\n",
	"user": {
		"login": "deathly809",
		"id": 1381210,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2015-11-30T22:24:32Z",
	"created_at": "2015-11-28T04:15:00Z",
	"updated_at": "2015-11-30T22:24:32Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
