{
	"id": 66082184,
	"body": "\u003ca id=\"c6\"\u003e\u003c/a\u003eComment 6:\n\n\u003cpre\u003eI looked into having separate deferreturns, but it's tricky. \n\nThe CALL deferreturn is already tagged with the line number of the function's closing },\nbut that line number is not actually relevant to the stack trace. The deferred function\ncall was set up through abnormal means, and it is _returning to_ the CALL deferreturn\ninstruction, not called by it. The traceback does what it always does, which is to print\nthe line number of the instruction before the return PC (in normal operation, that's the\nCALL). Here, because the call was simulated by the runtime package, the instruction\nbefore the return PC is completely unrelated. The way the code was laid out, it happens\nto be something on line 11.\n\nThe solution is to emit a real no-op instruction with the correct line number before the\nCALL deferreturn, so that when the traceback looks at the line number of the instruction\nbefore the return PC, it will get the right answer.\n\ngoroutine 1 [running]:\nmain.PanicInGoSrc()\n\t/Users/rsc/x.go:4 +0x43\nmain.doPanic()\n\t/Users/rsc/x.go:17 +0x23\nmain.main()\n\t/Users/rsc/x.go:20 +0x1b\u003c/pre\u003e\n\n\n_Owner changed to @rsc._\n\n_Status changed to **Started**._",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-07-12T17:41:30Z",
	"updated_at": "2014-12-08T10:32:11Z"
}
