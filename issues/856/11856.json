{
	"id": 97009055,
	"number": 11856,
	"state": "closed",
	"title": "compress/flate: Inconsistent error handling",
	"body": "The package defines a ReadError which \"reports an error encountered while reading input\" and a WriteError which \"reports an error encountered while writing output\". However, a quick peruse through the package code shows that WriteError is never used. Secondly, its use of ReadError is inconsistent.\r\n\r\nThere are 3 instances where the Reader is used in inflate.go: [L635](https://github.com/golang/go/blob/b03129aa2758a337823071ffda37e49da5a814d0/src/compress/flate/inflate.go#L635), [L677](https://github.com/golang/go/blob/b03129aa2758a337823071ffda37e49da5a814d0/src/compress/flate/inflate.go#L667), and [L699](https://github.com/golang/go/blob/b03129aa2758a337823071ffda37e49da5a814d0/src/compress/flate/inflate.go#L699). The call to ReadByte lacks a the wrapper for ReadError. Interestingly, the bulk of DEFLATE compression will be done through the ReadByte call, thus, usage of ReadError seems to only occur when decoding a raw block.\r\n\r\nShould use of ReadError and WriteError be removed and marked as deprecated? Or should the library properly handle both error types? Other packages don't seem to wrap IO errors with package specific errors.",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		},
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 7,
	"closed_at": "2015-10-10T00:49:17Z",
	"created_at": "2015-07-24T09:07:29Z",
	"updated_at": "2016-10-09T20:20:38Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
