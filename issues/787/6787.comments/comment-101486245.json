{
	"id": 101486245,
	"body": "This isn't really non-actionable. Go could ask for a RANDMMAP exception by applying the appropriate extended attribute to the executable it builds if it knows it's going to be required (i.e. sanitizers are used). It's as simple as `setfattr -n user.pax.flags -v er whatever-binary` but via the `setxattr` system call.\r\n\r\nIdeally, the sanitizers wouldn't make these non-portable assumptions about the address space. There's absolutely no guarantee of it working on all configurations of future upstream Linux kernel versions either. I really wouldn't expect that to be considered an ABI break. Making an assumption that the address space is a precise size is as bad as a program breaking if `mmap`  was switched from the current heuristic to best-fit. It should be dynamically detected with an error only if there truly isn't enough room available. This isn't a Go-specific problem though.\r\n",
	"user": {
		"login": "thestinger",
		"id": 1505226,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-05-13T02:32:30Z",
	"updated_at": "2015-05-13T02:32:30Z"
}
