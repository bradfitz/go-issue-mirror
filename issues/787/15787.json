{
	"id": 156116855,
	"number": 15787,
	"state": "closed",
	"title": "cmd/vet: Incorrect warning shown when code isn't built",
	"body": "1. What version of Go are you using (`go version`)?\r\n\r\n  ```\r\n$ go version\r\ngo version devel +1f8d276 Sat May 21 01:30:43 2016 +0000 linux/amd64\r\n  ```\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\n  ```\r\n$ go env\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"\"\r\nGORACE=\"\"\r\nGOROOT=\"/tmp/go\"\r\nGOTOOLDIR=\"/tmp/go/pkg/tool/linux_amd64\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build009147319=/tmp/go-build -gno-record-gcc-switches\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n  ```\r\n\r\n3. What did you do?\r\n  I ran `go vet` on the following program: https://play.golang.org/p/-AbGnFT_3W\r\n \r\n  The struct `foo` is intentionally undefined. The same problem occurs if `foo` is defined in another package, and that package hasn't been built yet.\r\n\r\n4. What did you expect to see?\r\n\r\n  No warnings reported by `go vet` (this is the case when using 1.6).\r\n\r\n5. What did you see instead?\r\n\r\n  ```\r\n$ go vet main.go\r\nmain.go:16: first argument to Fprintln is os.Stdout\r\nexit status 1\r\n  ```\r\n\r\nIt seems that building the code is required before running `go vet` now, is this an intentional change from 1.6?\r\n\r\n",
	"user": {
		"login": "martinp",
		"id": 174496,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"closed_at": "2016-05-24T16:14:40Z",
	"created_at": "2016-05-21T19:08:21Z",
	"updated_at": "2016-05-24T16:14:40Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
