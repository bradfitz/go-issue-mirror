{
	"id": 51285264,
	"number": 6489,
	"state": "open",
	"title": "cmd/go: try https before git/svn/hg protocol?",
	"body": "\u003cpre\u003eWhat steps will reproduce the problem?\n1. Start a local HTTP server on a non-standard port, ex via python: `python -m\nSimpleHTTPServer 8080`\n2. Pretend it is a HTTP git server and 'go get' a package: `go get -x\n127.0.0.1:8080/something.git`\n3. go get hangs\n\nWhat is the expected output?\n- The server should check out the git repository on the HTTP server\n\nWhat do you see instead?\nGo get will tries to clone the repository over the plain-text git protocol, but will get\na HTTP error response back - which doesn't make git back out immediately.\n\nInstead it hangs for a very long time (presumably till the TCP connection times out).\n\n(The interaction can be seen from git's point of view with `GIT_TRACE_PACKET=1 git\nls-remote git://127.0.0.1:8080/foo.git`)\n\nWhich version are you using?  (run 'go version')\n\n\u0026gt; go version\ngo version go1.1.2 darwin/amd64\n\n(The relevant source hasn't been touched in TIP)\n\nPlease provide any additional information below.\n\nThe error seem to be in go trying out git:// first. But as git is apparently very\ntolerant with unexpected server responses, it results on odd overall behaviour. I\nsuspect a solution could be to re-order the protocols in\n\u003ca href=\"https://code.google.com/p/go/source/browse/src/cmd/go/vcs.go#107\"\u003ehttps://code.google.com/p/go/source/browse/src/cmd/go/vcs.go#107\u003c/a\u003e so git:// comes last.\u003c/pre\u003e",
	"user": {
		"login": "msiebuhr",
		"id": 330611,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Thinking"
		}
	],
	"comments": 9,
	"created_at": "2013-09-26T21:40:40Z",
	"updated_at": "2015-04-14T19:45:20Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
