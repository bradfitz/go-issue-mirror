{
	"id": 249007446,
	"body": "I am imagining that given\r\n\r\n    defer f()\r\n    ...\r\n    defer g()\r\n\r\nthe defer statements would be compiled as\r\n\r\n    deferredFunctions = deferredFunction{next: deferredFunctions; run: f}\r\n    ...\r\n    deferredFunctions = deferredFunction{next: deferredFunctions; run: g}\r\n\r\nand the function exit sequence would be compiled as\r\n\r\n    deferredFunctions = deferredFunctions.next\r\n    g()\r\n    deferredFunctions = deferredFunctions.next\r\n    f()\r\n\r\nSo I don't think the performance would be like that of `deferreturn`.  The compiler would of course have to ensure that `deferredFunctions` was stored on the stack and that it was always accurate before any function call.  And this approach would take extra execution space as there would in effect be two copies of each deferred function--I suspect that is true of any efficient implementation.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-22T19:42:47Z",
	"updated_at": "2016-09-22T19:43:07Z"
}
