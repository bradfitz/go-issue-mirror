{
	"id": 143119427,
	"number": 14939,
	"state": "open",
	"title": "runtime: defer is slow",
	"body": "```\r\npackage p\r\nimport \"testing\"\r\n//go:noinline\r\nfunc defers() (r int) {\r\n        defer func() {\r\n                r = 42\r\n        }()\r\n        return 0\r\n}\r\nfunc BenchmarkDefer(b *testing.B) {\r\n        for i := 0; i \u003c b.N; i++ {\r\n                defers()\r\n        }\r\n}\r\n```\r\n\r\nOn my system, BenchmarkDefer uses 77.7ns/op. This issue\r\narises from investigation of #9704: if I remove the \"defer endcgo(mp)\"\r\nand place the call at the end of the func cgocall, the benchmark in\r\n#9704 will improve from 144ns/op to 63.7ns/op. (Note: we can't\r\neliminate the defer in func cgocall though, as it will break defer/recover\r\nin Go-\u003eC-\u003eGo scenario.)",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"assignee": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"comments": 19,
	"created_at": "2016-03-24T01:16:48Z",
	"updated_at": "2016-09-22T22:00:47Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	},
	"reactions": {
		"total_count": 15,
		"+1": 15
	}
}
