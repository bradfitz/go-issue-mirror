{
	"id": 253700637,
	"body": "@ianlancetaylor, I have created a discussion here: https://groups.google.com/forum/#!topic/golang-nuts/7Tz2UamO30c\r\n\r\nI know the type assertion mechanism well, I just think the example in the spec is not professional, for some reasons:\r\n1. the example makes people think y == nil\r\n2. the example doesn't make it clear what \"y must implement both I and io.Reader\" means, it means to do compile, or to avoid panicking?\r\n3. y is a value, it is weird to say a value implements an interface type. \r\n\r\nSo here I made a better example. Certainly, if you go team don't think so, just ignore it.\r\n\r\n\ttype I interface { m() }\r\n\r\n\tfunc f(y I) {\r\n\t\t// assume y != nil\r\n\t\ts := y.(string)        // illegal: string does not implement I (missing method m)\r\n\t\tr := y.(io.Reader)     // r has type io.Reader and y must implement io.Reader to avoid panicking\r\n\r\n\t\t// ...\r\n\t}\r\n\r\nEven better, the comment can change to \"r has type io.Reader and **the dynamic type of** y must implement io.Reader to avoid panicking\"\r\n",
	"user": {
		"login": "golang101",
		"id": 22589241,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-14T03:26:55Z",
	"updated_at": "2016-10-15T09:30:03Z"
}
