{
	"id": 66079089,
	"body": "\u003ca id=\"c37\"\u003e\u003c/a\u003eComment 37 by **manoj.dayaram@moovweb.com**:\n\n\u003cpre\u003eI have a very similar usecase as Camilo.  We're dynamically linking libraries.  Several\nof these individual libraries are used all over the Go code in different locations,\nhowever, we dump all the libraries into one \"lib\" folder that we provide relative paths\nto during the compile process with LDFLAGS.\n\nI would also like to mention that this affects \"go test\" as well.  Perhaps obvious, I\nfeel like a lot of the alternative solutions provided in this thread ignore the fact\nthat the workflow for go test (specially for the \"go test ...\" command) would not work\nsince it would require the command to be ran from within the directory using the cgo\nflags.  If you're using two projects that use different cgo flags, then the alternatives\nfail.\n\nAs mentioned, using relative paths worked fine in Go1.0.3.  This issue has now been\nbumped for nearly three versions of Go since it's been filed because of its difficult to\nimplement I presume.  I work in software as well, I understand that sometimes things\nwill take longer than expected, so this does not bother me that much.\n\nHowever, if we're going to talk about discarding this as an issue all together, please\nprovide a more powerful alternative.  As mentioned by others, using absolute paths is\nnot a viable alternative as it forces the code to be non-portable.  Please don't take\nfeatures away without at least providing a new more powerful alternative.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-04-04T17:47:26Z",
	"updated_at": "2014-12-08T10:29:24Z"
}
