{
	"id": 51279193,
	"number": 2428,
	"state": "closed",
	"title": "Exported fields and methods in non-exported embedded structs or interfaces are not handled consistently",
	"body": "\u003cpre\u003etype inner interface { M() }   // inner is not exported\ntype Outer interface{ inner } // but Outer is\n\nis Outer.M exported?\n\ncurrent 6g implementation:\n        x.M()    // compiles fine\n        x.(one.inner).M()   // cannot refer to unexported name one.inner\n\n\nsame question for structs:\n\ntype inner struct { M int }\ntype Outer struct { inner }\n\ncurrent 6g implementation:\nimplicit assignment of unexported field 'inner' of one.Outer in assignment on trying to\ncopy, but\n\n  var a foo.Outer\n  a.M = 3\n\ncompiles fine.\n\nI actually had a nightmare in which i was the compiler, trying to figure out what to do\nhere, with rsc looking over my shoulder but i just couldn't figure it out.  Woke up in a\ncold sweat. Not sure if this is a documentation issue, a language change or a compiler\nbug, leavning it to gri.\u003c/pre\u003e",
	"user": {
		"login": "lvdlvd",
		"id": 9462795,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2014-12-08T10:12:57Z",
	"created_at": "2011-11-08T09:43:47Z",
	"updated_at": "2016-06-24T21:20:12Z"
}
