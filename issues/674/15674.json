{
	"id": 154761933,
	"number": 15674,
	"state": "open",
	"title": "cmd/vet: check for concurrent use of T.FatalX and T.SkipX",
	"body": "The `testing` package is explicit about the following:\r\n\r\n\u003e A test ends when its Test function returns or calls any of the methods FailNow, Fatal, Fatalf, SkipNow, Skip, or Skipf. Those methods, as well as the Parallel method, must be called only from the goroutine running the Test function.\r\n\r\nHowever, this is easy to overlook and it is not immediately obvious that the code below is a bad test:\r\n```go\r\nfunc TestFoo(t *testing.T) {\r\n\tgo func() {\r\n\t\tt.Fatal(\"fatal\") // Called from outside the Test function\r\n\t}()\r\n\ttime.Sleep(1 * time.Second)\r\n}\r\n```\r\n\r\nThis outputs (what a user expects):\r\n```\r\n--- FAIL: TestFoo (1.00s)\r\n\tfoo_test.go:10: fatal\r\n```\r\nGiving the user a false sense of having written correct test.\r\n\r\nHowever, when running the test with the `-race` flag, it becomes obvious this is not okay:\r\n```\r\n==================\r\nWARNING: DATA RACE\r\n....\r\n==================\r\n--- FAIL: TestFoo (1.00s)\r\n\tfoo_test.go:10: fatal\r\n```\r\n\r\nPerhaps the `vet` tool can check for these cases.",
	"user": {
		"login": "dsnet",
		"id": 6354026,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2016-05-13T17:25:55Z",
	"updated_at": "2016-05-18T00:42:35Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
