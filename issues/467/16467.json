{
	"id": 166965456,
	"number": 16467,
	"state": "open",
	"title": "cmd/go: no go-import meta tags error could be more informative",
	"body": "Using go 1.6.3 on amd64, I was encountering an error stemming from go-import tags containing a hostname that did not match the import path.\r\n\r\nWhile this stemmed from a misconfiguration of a gitlab instance, it took a bit of time to spot the discrepancy, as the errors coming from `go get` were generic and gave the (me) impression that no tags were present, as opposed to a mismatch.\r\n\r\nThis can be reproduced with gitlab (and probably other tools) by attempting to `go get` the package by using a hostname other than the currently configured external_url.\r\n\r\n The current behaviour is to emit a warning like:\r\n`package git1.host.com/user/package: unrecognized import path \"git1.host.com/user/package\" (parse https://git1.host.com/user/package?go-get=1: no go-import meta tags)`\r\n\r\nI think it would be helpful if the error message gave more context about why no meta tags were matched.\r\nA small patch i've prepared would change the output to:\r\n`package git1.host.com/user/package: unrecognized import path \"git1.host.com/user/package\" (parse https://git1.host.com/user/package?go-get=1: no go-import meta tags (prefix [git.host.com user package] did not match import [git1.host.com user package]))`\r\n\r\nwhere the erroneous host from gitlab is git.host.com, failing to match git1.host.com.\r\n",
	"user": {
		"login": "trist4n",
		"id": 1930740,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		}
	],
	"comments": 1,
	"created_at": "2016-07-22T03:53:21Z",
	"updated_at": "2016-10-06T20:28:02Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
