{
	"id": 66049888,
	"body": "\u003ca id=\"c11\"\u003e\u003c/a\u003eComment 11 by **jckanis**:\n\n\u003cpre\u003eAFAIK what distinguishes Timsort from other sorting algorithms is that it can take a lot\nmore advantage of already sorted (or reverse-sorted) runs within the collection, to\nminimise the number of comparisons it has to do. Timsort does a lot fewer comparisons\nwhen sorting data that already has some structure. There is (I guess) some time overhead\nto do this, so it really pays off when the comparison is expensive, for example because\nit involves calling a user-defined function or calling interpreted code. This is why it\nis a good choice for Python and why (I think) Java uses Timsort when sorting objects,\nbut quicksort/introsort when sorting primitive types.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2011-01-25T18:31:20Z",
	"updated_at": "2014-12-08T10:04:43Z"
}
