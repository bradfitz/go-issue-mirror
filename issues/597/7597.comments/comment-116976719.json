{
	"id": 116976719,
	"body": "Running playground on a sandbox makes easier to execute `cmd/vet` on a piece of code. \r\n\r\nThese two CLs addresses this issue, by updating both sandbox, playground frontend application and a static file shared with godoc. \r\n\r\nCurrently, it is implemented following this way:\r\n1 - Added one entry point (`/vet`) to sandbox, which calls `cmd/vet` and parses the result as if it were a compilation process.\r\n2 - Updated `playground.js`, so it calls `/vet` at backend. \r\n3 - Updated Dockerfile with `go get` to install `cmd/vet`\r\n\r\nI considered the alternative of overloading `/compile` endpoint with a parameter, thus switching back and forth between compilation and vetting. The reason I did not do it was that it seemed a cleaner design to keep separated different resources with different goals. \r\n\r\nOf course, I am ready to change the implementation after debate. \r\n\r\nAnyway, I should like to open as soon as possible another CL updating docs to mention the existence of a proxy at `golang.org/compile` - so other contributos do not get lost on why query-string calls are made where the sandbox expects for JSON.\r\n\r\nhttps://go-review.googlesource.com/#/c/11632/\r\nhttps://go-review.googlesource.com/#/c/11633/",
	"user": {
		"login": "ccirello",
		"id": 138827,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-30T05:39:12Z",
	"updated_at": "2015-06-30T05:39:12Z"
}
