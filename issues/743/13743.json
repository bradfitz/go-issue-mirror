{
	"id": 123979637,
	"number": 13743,
	"state": "closed",
	"title": "fmt: Scanf's err puts extraneous '\\n' if arg is small",
	"body": "Scanf doesn't seem to care about newline in format. It's also putting an extraneous `\\n` in `err.Error()` if scanned input is longer than expected.\r\n\r\n```\r\nfunc main() {\r\n\tvar input int\r\n\t_, err := fmt.Scanf(\"%d\\n\", \u0026input)\r\n\tif err != nil {\r\n\t\tfmt.Printf(\"%q\", err)\r\n\t}\r\n}\r\n```\r\nWith \"golang\" as input, the \"olang\" gets dragged to a newline in `err`.  This is contrary to what the documentation says:\r\n```\r\nScanf, Fscanf and Sscanf require that (after skipping spaces) newlines in the format are matched by newlines in the input and vice versa. \r\nWith that proviso, text in the format string must match the input text; scanning stops if it does not, with the return value of the function indicating the number of arguments scanned\r\n```\r\n\r\n```\r\nbash-3.2$ go run test.go\r\ngolang\r\n\"expected integer\"bash-3.2$ olang\r\nbash: olang: command not found\r\nbash-3.2$\r\n```",
	"user": {
		"login": "bassu",
		"id": 977697,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"closed_at": "2015-12-27T19:32:14Z",
	"created_at": "2015-12-27T13:56:26Z",
	"updated_at": "2015-12-27T22:13:21Z"
}
