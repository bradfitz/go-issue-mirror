{
	"id": 59108670,
	"number": 10014,
	"state": "open",
	"title": "spec: define/imply memory layout of tagged struct fields",
	"body": "This is half-baked idea that needs more thought, written down so it doesn't get forgotten.\r\n\r\nCurrently, the spec does not specify how struct fields are laid out in memory (e.g. source order, or optimally packed, or any other order). That is, theoretically, a compiler is free to optimize the layout. However, currently all (?) compilers lay out struct fields in source order, possibly wasting significant amounts of space due to padding (struct internal fragmentation).\r\n\r\nIt is not unlikely that code depends on this property.\r\n\r\nInstead of requiring all structs to follow source order layout of fields, we could say that structs with tagged fields are the ones that are laid out in source order. Here are some variants of the same idea:\r\n\r\n- struct fields are laid out in source order if there's at least one field that's tagged\r\n- struct fields are laid out in source order if all fields are tagged\r\n- tagged struct fields are laid out in source order (relative to other tagged fields), but untagged fields are free to be where the compiler decides\r\n- tagged fields are laid out contiguously, in source order, at the beginning (or the end) of the struct; untagged fields are in compiler-determined order at the opposite end (and the end or beginning) of the struct",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "LanguageChange"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 16,
	"created_at": "2015-02-26T17:36:27Z",
	"updated_at": "2015-10-09T22:07:46Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
