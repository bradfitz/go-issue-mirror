{
	"id": 76491481,
	"body": "@Jragonmiris a few things would need to happen for pointers across cgo to be safe (some of these may already be enforced):\r\n* No mechanism can allow C to directly reference Go package globals (the only safe way to pass data, including pointers, is via the C stack).\r\n* Goroutines blocked on C calls cannot have any of its stack-resident references moved, if the implementation has a compacting GC.\r\n* C may not retain references into Go memory after the initial call from Go returns. Also, C may not pass references into Go memory between concurrent calls into C originating from Go (reference passing within C may behave like a tree, but may not behave like a graph).\r\n* Pertinent to this issue, Go struct types escaping into C in the form of pointers must be detected and implicitly compiled with predictable layouts, such as source-order aligned. Alternatively, Go struct pointers may not cross the boundary at all.",
	"user": {
		"login": "extemporalgenome",
		"id": 536740,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-27T23:21:43Z",
	"updated_at": "2015-02-27T23:30:39Z"
}
