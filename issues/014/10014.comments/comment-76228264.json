{
	"id": 76228264,
	"body": "I'd be happy to have the compiler pack the structs however it likes, unless\nthere is a \"nopack\" label somewhere (first field?  any field?), in which\ncase it must lay out the fields in source order.\n\n\nOn Thu, Feb 26, 2015 at 9:42 AM, Brad Fitzpatrick \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e I would love to have the source order (read: documentation order) and\n\u003e layout be totally separate, and both be under programmer's control. (the\n\u003e programmer might know optimal better than the compiler, if optimal means\n\u003e more than packing, like getting on different cache lines)\n\u003e\n\u003e You could imagine a struct tag that declares the index position, or a\n\u003e magic zero-width field that declares the order for the rest:\n\u003e\n\u003e     type S struct {\n\u003e           _ struct{} `order:\"A,C,B\"`\n\u003e           A uint8\n\u003e           B int16\n\u003e           C uint8\n\u003e     }\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/10014#issuecomment-76226181\u003e.\n\u003e\n",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-26T17:52:41Z",
	"updated_at": "2015-02-26T17:52:41Z"
}
