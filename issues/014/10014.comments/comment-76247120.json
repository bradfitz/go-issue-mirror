{
	"id": 76247120,
	"body": "I agree we probably can't make the default reorder fields for Go 1.x.  But\nit is something to think about for 2.0.\n\n\nOn Thu, Feb 26, 2015 at 10:55 AM, Ingo Oeser \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e That would make it difficult to hunt cacheline pingpong issues in shared\n\u003e structs. Those can also happen in imported packages. Also handover to C,\n\u003e kernel API, wire-formats, etc. might become hairy and even lead to\n\u003e surprising bugs.\n\u003e\n\u003e I would switch the default or make it even a new keyword, since it\n\u003e technically is no struct as we know it from C family languages anymore, but\n\u003e something else. That will be very surprising.\n\u003e\n\u003e A struct has the following three important properties for me:\n\u003e\n\u003e    - I control memory layout down to the bit level when composing them\n\u003e    using {u,}int{,8,16,32,64} float32, float64 and fixed sized arrays of those\n\u003e    - padding is zeroed on allocation\n\u003e    - alignment is documented in spec\n\u003e\n\u003e But a tool like http://linux.die.net/man/1/pahole might prove to be very\n\u003e useful for Go.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/10014#issuecomment-76242966\u003e.\n\u003e\n",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-02-26T19:17:07Z",
	"updated_at": "2015-02-26T19:17:07Z"
}
