{
	"id": 199094442,
	"body": "I want to check that I understand how this works in the presence of shared libraries.\r\n\r\nSuppose libraries libT.so, libI.so, libX.so, and libY.so, where the only interdependencies between them are that libX.so and libY.so both depend on both of libT.so and libI.so.\r\n\r\nSuppose libT.so declares type t.T, libI.so declares interface i.I (that t.T happens to implement), and libX.so and libY.so both include conversions from t.T to i.I.\r\n\r\nSince libX.so and libY.so don't know about each other, they both need to provide definitions for go.itab.t.T,i.I.\r\n\r\nHow is this duplicity handled?  Will one definition take priority and always be canonically used, or do we need to ensure the runtime / compiler-emitted code are safe in the presence of redundant itabs?\r\n\r\nI notice, for example, that ifaceeq currently requires identical itab pointer values.  So if we need to worry about redundant itabs, we need to at least relax that function to check for itab._type equality instead (maybe only in the shared library case).",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-21T03:11:25Z",
	"updated_at": "2016-03-21T03:11:25Z"
}
