{
	"id": 51288813,
	"number": 8874,
	"state": "open",
	"title": "database/sql: no good way to set execution deadlines",
	"body": "by **wmorgan.masanjin**:\n\n\u003cpre\u003eThere's currently (circa go 1.3.3) no good way to set execution deadlines on database\noperations as provided by database/sql. Systems that e.g. use go.net/context to\nrepresent end-to-end request deadlines must either stop enforcing deadlines at the\ndatabase layer, or make use of system-specific hacks.\n\nFor example, a system that uses go.net/context for requests that are backed by database\noperations with database/sql might have a function like this:\n\n  func getName(ctx context.Context, db *sql.DB, id int) (name string, err error) { \n    err = db.QueryRow(\u0026quot;select name from things where id=? limit 1\u0026quot;, id).Scan(\u0026amp;name)\n    return\n  }\n\nNote that ctx is ignored in this implementation. With the current database/sql API,\nthere are at least two ways of making use of it, but they both have problems:\n\n1. Run QueryRow() in a goroutine, emit the results to a channel, and select() across\nthat channel and ctx.Done(). This would bound the execution time of the function, but\nwould leave the query dangling on the database side, where it would continue to consume\ndatabase resources.\n\n2. Wrap every query in a transaction and execute a system-specific timeout command prior\nto the query as part of the transaction. For example, Postgres allows setting timeouts\non a per-transaction basis via a 'set local statement_timeout' command. This approach\nallows database-side timeouts, but necessitates the overhead of adding a transaction to\nevery query, which may be significant.\n\nSome alternatives that are not currently possible, but which would allow for the desired\nbehavior:\n\n3. An alternative (parallel?) API for database/sql that makes use of go.net/context\ndirectly, and requires drivers to implement these constraints when supported by the\nunderlying database.\n\n4. Additional APIs for exclusive access to individual connections outside of\ntransactions. This would allow setting per-connection timeouts (and other settings) on\ndatabases that support it, at the application level, without incurring the overhead of\ntransactions.\n\n5. Something else?\n\nSee \u003ca href=\"https://groups.google.com/forum/#\"\u003ehttps://groups.google.com/forum/#\u003c/a\u003e!topic/golang-nuts/c7gfPQ8gIvM for some discussion.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"comments": 5,
	"created_at": "2014-10-06T18:56:27Z",
	"updated_at": "2016-08-12T17:01:20Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
