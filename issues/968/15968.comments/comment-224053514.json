{
	"id": 224053514,
	"body": "@purpleidea Here is one way to think about it.  Every change to the language has a cost: it's an additional thing that users of the language need to learn and understand.  I agree that your proposal makes case clauses more like if statements, but it makes them less like case clauses.  It's something else to learn.  So the benefit of the change has to outweigh the cost.  One way to measure the benefit is to look through a body of Go code and see how often this could be used.  Look for chains of if statements in which the else clauses use simple statements in their if conditions, and look for switch statements that use convoluted logic to call functions and capture the results.\r\n\r\nThat said, I don't understand how your initial example could work anyhow.  The first cases, the fallthrough cases, are going to wind up in a block in which `delayErr` and `ok` are declared but were never set.  That seems like a recipe for confusion.  You can say that `delayErr` and `ok` do get set, but now there is a complicated rule to remember involving `fallthrough`.  Or you could say that `delayErr` and `ok` can only be used in the case statement condition, but now there is a complicated rule to remember involving `case`.  So I think the complexity of this suggestion is actually higher than it appears.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-06T18:55:51Z",
	"updated_at": "2016-06-06T18:55:51Z"
}
