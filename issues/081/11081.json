{
	"id": 85543619,
	"number": 11081,
	"state": "closed",
	"title": "net: builtin DNS stub resolver returns query results including the second best records unconditionally",
	"body": " - **Version:** 1.4.2; simple `net.LookupIP()` program compiled both with `-tags \"netgo\"` and without\r\n - **OS/Arch:** Ubuntu Linux 14.04LTS, x64\r\n - **Steps:**\r\n  1. may require special DNS server crafted, as to reproduce the problem you need a `search \u003csomedomain\u003e` in your `/etc/resolv.conf` and the `nameserver` in use needs to have a catch-all in the zone def'n responding with an AAAA record for all matches on `*.somedomain`.\r\n  2. given the above, if you search for any hostname with a valid A (IPv4) record from any authoritative nameserver, but no AAAA (IPv6) record, with 1.4.2-netgo you will be returned both the valid IPv4 address as well as the catch-all IPv6 record for `\u003csomedomain\u003e`\r\n - **Expected behavior:**: The cgo resolver as well as pure libc-based (which you would expect as they should be one and the same) resolving only replies with the (correct) IPv4 A record for the hostname.\r\n - **Current behavior:**: Any Go program compiled with `netgo` will receive incorrect results from a DNS client lookup for this specific DNS server setup; for a real-world scenario see this issue in Docker, which is compiled statically with Go 1.4.2 with `-tags \"netgo\"`: docker/docker#10863\r\n\r\nWhile I would like to say I have the exact set of changes in `net/dnsclient_unix.go` figured out as to the difference, it seems to hinge on two things--one is that the requests to the nameserver now come from two different connections (source ports) from the Go resolver (because of the go routines used in 1.4.2 that aren't used in cgo, or in 1.3.3 cgo or netgo), and secondly, the initial AAAA response is not found instead of the nameserver doing a forward-request to upstream (e.g. Google public DNS) which you see in the 1.3.3 trace below.  Whichever is the exact root cause, the result is that the 1.4.2 netgo code decides it is time to append the search domain and try again for the AAAA record, which hits the \"catch-all\" set up in the nameserver, which then responds with the catch-all AAAA record for that domain, which means a client may decide to select that as the valid response, when the hostname really has no AAAA record, but has a valid A record which is also returned.\r\n\r\nWe can debate about the ugliness of catch-all entries in a DNS setup, but the root issue seems to be that netgo has different behavior in this particular scenario than cgo/libc and also from 1.3.3, not to mention we can't control whether certain users will have DNS configurations and backends beyond their control.\r\n\r\n#### go 1.3.3 trace from a simple `net.LookupIP(\"index.docker.io\")`:\r\n```\r\n10:25:33.922616 IP 172.17.0.22.57536 \u003e 172.17.0.13.domain: 51477+ A? index.docker.io. (33)\r\n10:25:33.922669 IP 172.17.0.22.57536 \u003e 172.17.0.13.domain: 51477+ A? index.docker.io. (33)\r\n10:25:33.922704 IP 172.17.0.22.57536 \u003e 172.17.0.13.domain: 27449+ AAAA? index.docker.io. (33)\r\n10:25:33.922715 IP 172.17.0.22.57536 \u003e 172.17.0.13.domain: 27449+ AAAA? index.docker.io. (33)\r\n10:25:33.923099 IP 172.17.0.13.62093 \u003e google-public-dns-a.google.com.domain: 25323+ [1au] A? index.docker.io. (44)\r\n10:25:33.923343 IP 172.17.0.13.29026 \u003e google-public-dns-a.google.com.domain: 30220+ [1au] AAAA? index.docker.io. (44)\r\n10:25:33.923918 IP 172.17.0.13.16392 \u003e google-public-dns-a.google.com.domain: 17430+ [1au] NS? . (28)\r\n10:25:33.948675 IP google-public-dns-a.google.com.domain \u003e 172.17.0.13.62093: 25323 1/0/1 A 162.242.195.84 (60)\r\n10:25:33.949118 IP 172.17.0.13.domain \u003e 172.17.0.22.57536: 51477 1/13/0 A 162.242.195.84 (260)\r\n10:25:33.954178 IP google-public-dns-a.google.com.domain \u003e 172.17.0.13.29026: 30220 0/1/1 (114)\r\n```\r\n\r\n#### go 1.4.2-netgo trace from a simple `net.LookupIP(\"index.docker.io\")`:\r\n```\r\n13:42:50.021716 IP 172.17.0.23.47708 \u003e 172.17.0.13.domain: 54982+ A? index.docker.io. (33)\r\n13:42:50.021791 IP 172.17.0.23.47708 \u003e 172.17.0.13.domain: 54982+ A? index.docker.io. (33)\r\n13:42:50.021925 IP 172.17.0.23.36219 \u003e 172.17.0.13.domain: 64311+ AAAA? index.docker.io. (33)\r\n13:42:50.021938 IP 172.17.0.23.36219 \u003e 172.17.0.13.domain: 64311+ AAAA? index.docker.io. (33)\r\n13:42:50.022036 IP 172.17.0.13.domain \u003e 172.17.0.23.36219: 64311 0/1/0 (103)\r\n13:42:50.022103 IP 172.17.0.13.domain \u003e 172.17.0.23.36219: 64311 0/1/0 (103)\r\n13:42:50.022337 IP 172.17.0.13.55684 \u003e google-public-dns-b.google.com.domain: 22399+ [1au] A? index.docker.io. (44)\r\n13:42:50.022583 IP 172.17.0.13.56478 \u003e google-public-dns-b.google.com.domain: 7997+ [1au] NS? . (28)\r\n13:42:50.022834 IP 172.17.0.23.55110 \u003e 172.17.0.13.domain: 49279+ AAAA? index.docker.io.testdocker.org. (48)\r\n13:42:50.022856 IP 172.17.0.23.55110 \u003e 172.17.0.13.domain: 49279+ AAAA? index.docker.io.testdocker.org. (48)\r\n13:42:50.023017 IP 172.17.0.13.domain \u003e 172.17.0.23.55110: 49279* 1/2/2 AAAA 2002::2002:2002:1 (144)\r\n13:42:50.023140 IP 172.17.0.13.domain \u003e 172.17.0.23.55110: 49279* 1/2/2 AAAA 2002::2002:2002:1 (144)\r\n13:42:50.053067 IP google-public-dns-b.google.com.domain \u003e 172.17.0.13.55684: 22399 1/0/1 A 162.242.195.84 (60)\r\n13:42:50.053494 IP 172.17.0.13.domain \u003e 172.17.0.23.47708: 54982 1/13/0 A 162.242.195.84 (260)\r\n```\r\n\r\nAdditional resources available--I have a container with the BIND setup shown above, as well as the simple program performing `net.LookupIP()`.  Also you can see docker/docker#10863 for further discussion although fair warning that some of it is off-track as the problem was being narrowed down.",
	"user": {
		"login": "estesp",
		"id": 1397980,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 11,
	"closed_at": "2015-07-28T08:39:40Z",
	"created_at": "2015-06-05T14:14:45Z",
	"updated_at": "2016-08-05T16:09:45Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
