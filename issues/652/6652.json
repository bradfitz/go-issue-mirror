{
	"id": 51285507,
	"number": 6652,
	"state": "closed",
	"title": "spec: Clarify constant type ",
	"body": "\u003cpre\u003erelevant code: \u003ca href=\"http://play.golang.org/p/d8xqDwNlOG\"\u003ehttp://play.golang.org/p/d8xqDwNlOG\u003c/a\u003e \n\nThere has been some confusion over the types of constants ( see\n\u003ca href=\"https://groups.google.com/forum/#\"\u003ehttps://groups.google.com/forum/#\u003c/a\u003e!topic/Golang-Nuts/t3c9b4pUbYw and \u003ca href=\"https://golang.org/issue/6648\"\u003eissue #6648\u003c/a\u003e ) \n\nI believe the issue is that, as far as I can tell, no where does the spec say that a\nconstant value represented by an integer literal is an integer constant.\n\nThe spec currently says:\n1) Constants may be typed or untyped. Literal constants, true, false, iota, and certain\nconstant expressions containing only untyped constant operands are untyped.\n2) A constant may be given a type explicitly by a constant declaration or conversion, or\nimplicitly when used in a variable declaration or an assignment or as an operand in an\nexpression. It is an error if the constant value cannot be represented as a value of the\nrespective type. For instance, 3.0 can be given any integer or any floating-point type,\nwhile 2147483648.0 (equal to 1\u0026lt;\u0026lt;31) can be given the types float32, float64, or\nuint32 but not int32 or string.\n\n\n1) does not specify that non-untyped constants are typed constants with the type of the\nrespective literal. In my original reading of the spec, the large integer literal on\nline 7 of the linked code at the top is still an untyped constant, because none of the\nscenarios in 2) have yet applied. On line 7, the constant is set explicitly by a\nconstant declaration, which should turn it from an untyped constant into a float64\nconstant. Since the value is representable by a float64, this should not be a compile\nerror. \n\nI assume this reading of the spec is wrong, and not the actions of the compiler. I think\nthis issue could be cleared up by changing 1) to say something like:\nConstants may be typed or untyped. Literal constants, true, false, iota, and certain\nconstant expressions containing only untyped constant operands are untyped; all other\nconstants have the type of their literal.\u003c/pre\u003e",
	"user": {
		"login": "btracey",
		"id": 3680859,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2014-12-08T10:36:53Z",
	"created_at": "2013-10-23T23:06:54Z",
	"updated_at": "2016-06-25T01:21:15Z"
}
