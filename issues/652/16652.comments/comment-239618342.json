{
	"id": 239618342,
	"body": "@jimmyfrasche Yes, this would *not* be database agnostic. That would need a different system layer to filter it through. It would just expose what the RDBMS SQL type is.\r\n\r\nUse case for results where switching on go type doesn't work:\r\n```\r\nvar sql = `\r\nselect\r\n  d.ID, d.Name, d.Mime,\r\n fromp.FullName as  FromFullName,  forp.FullName as ForFullName\r\nfrom\r\n  seq.Document d\r\n  join acc.Person fromPerson fromp on fromp.ID = d.FromPerson\r\n  left join acc.Person forPerson forp on forp.ID = d.ForPerson\r\nwhere\r\n  1=1 and ...;\r\n`\r\n```\r\nIf you need to encode a information regarding ForFullName, you can't rely on it being there in the first row, in fact it may never be represented. This isn't a problem if you ad-hoc everything, but if you push more to app specific framework, it can be more problematic.\r\n\r\nHowever, per Brad in comment https://github.com/golang/go/issues/12381#issuecomment-239589860 I think this is moot. So while Brad also said https://github.com/golang/go/issues/16652#issuecomment-239328934 , it would need to be without specific type information being represented in the sql pacakge.",
	"user": {
		"login": "kardianos",
		"id": 755121,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-13T12:25:33Z",
	"updated_at": "2016-08-13T12:25:33Z"
}
