{
	"id": 252303818,
	"body": "@kardianos @bradfitz \r\n\r\nI had some time this week to look over the proposal. I'm *generally* ok with the proposed `sql` pkg API, but I think the `driver` pkg changes are going off in the wrong direction. I'm referencing `driver.go` PS7 ([Gerrit](https://go-review.googlesource.com/#/c/29961/7/src/database/sql/driver/driver.go)).\r\n\r\n**TLDR**: Replace the five new `driver` pkg interfaces with one `ColumnTyper` interface.\r\n\r\n---\r\nIt seems to me that having these five separate interfaces is overly elaborate.\r\nThis is what is currently proposed (comments omitted):\r\n\r\n```go\r\npackage driver\r\n\r\ntype RowsColumnTypeScanType interface {\r\n    Rows\r\n    ColumnTypeScanType(index int) reflect.Type\r\n}\r\n\r\ntype RowsColumnTypeDatabaseTypeName interface {\r\n    Rows\r\n    ColumnTypeDatabaseTypeName(index int) string\r\n}\r\n\r\ntype RowsColumnTypeLength interface {\r\n    Rows\r\n    ColumnTypeLength(index int) (length int64, ok bool)\r\n}\r\n\r\ntype RowsColumnTypeNullable interface {\r\n    Rows\r\n    ColumnTypeNullable(index int) (nullable, ok bool)\r\n}\r\n\r\ntype RowsColumnTypePrecisionScale interface {\r\n    Rows\r\n    ColumnTypePrecisionScale(index int) (precision, scale int64, ok bool)\r\n}\r\n```\r\n\r\nAnd this from the `sql` package:\r\n\r\n```go\r\npackage sql\r\n\r\n\r\nfunc (rs *Rows) ColumnTypes() ([]ColumnType, error) {\r\n\tif rs.isClosed() {\r\n\t\treturn nil, errors.New(\"sql: Rows are closed\")\r\n\t}\r\n\tif rs.rowsi == nil {\r\n\t\treturn nil, errors.New(\"sql: no Rows available\")\r\n\t}\r\n\treturn rowsColumnInfoSetup(rs.rowsi), nil\r\n}\r\n\r\nfunc rowsColumnInfoSetup(rowsi driver.Rows) []ColumnType {\r\n\tnames := rowsi.Columns()\r\n\r\n\tlist := make([]ColumnType, len(names))\r\n\tfor i := range list {\r\n\t\tci := \u0026list[i]\r\n\t\tci.name = names[i]\r\n\r\n\t\tif prop, ok := rowsi.(driver.RowsColumnTypeScanType); ok {\r\n\t\t\tci.scanType = prop.ColumnTypeScanType(i)\r\n\t\t} else {\r\n\t\t\tci.scanType = reflect.TypeOf(new(interface{})).Elem()\r\n\t\t}\r\n\t\tif prop, ok := rowsi.(driver.RowsColumnTypeDatabaseTypeName); ok {\r\n\t\t\tci.databaseType = prop.ColumnTypeDatabaseTypeName(i)\r\n\t\t}\r\n\t\tif prop, ok := rowsi.(driver.RowsColumnTypeLength); ok {\r\n\t\t\tci.length, ci.hasLength = prop.ColumnTypeLength(i)\r\n\t\t}\r\n\t\tif prop, ok := rowsi.(driver.RowsColumnTypeNullable); ok {\r\n\t\t\tci.nullable, ci.hasNullable = prop.ColumnTypeNullable(i)\r\n\t\t}\r\n\t\tif prop, ok := rowsi.(driver.RowsColumnTypePrecisionScale); ok {\r\n\t\t\tci.precision, ci.scale, ci.hasPrecisionScale = prop.ColumnTypePrecisionScale(i)\r\n\t\t}\r\n\t}\r\n\treturn list\r\n}\r\n```\r\n\r\n\r\nI suggest replacing those five `driver` interfaces with one interface:\r\n\r\n```go\r\npackage driver\r\n\r\n\r\ntype ColumnTyper interface {\r\n  Rows\r\n  ColumnTypes() ([]ColumnType, error)\r\n}\r\n```\r\n\r\nThe issues I see with this current proposal include:\r\n\r\n- First and foremost, why separate the interfaces at all? In practice, driver authors\r\nare not going to implement just a subset of this new API; what would the reasoning for that be?\r\n- As a consumer of the API, a partial implementation by a driver would be somewhat silly. The sort of use cases I'm thinking of that\r\nrequire this type of column metadata generally aren't satisfied by a partial implementation.\r\n- This increases the burden on the driver author who now has five methods they need to write test cases for, as opposed to one. Also it potentially complicates their implementation (will they need to keep data structures hanging around expecting subsequent calls for the next col etc?)\r\n- The interface and method names are unidiomatic.\r\n- This breaks the design symmetry between the `sql` and `driver` packages (as exemplified by the `Rows.Columns()` methods).\r\n- A single call to `sql.Rows.ColumnTypes()` results in `5` x `[num cols]` calls to the driver impl.\r\nThat's potentially a great deal of calls (at Teradata I saw customer queries with hundreds of cols). Even if in practice this is not a huge perf burden, something about it seems wrong (an \"API smell\" if you will).",
	"user": {
		"login": "neilotoole",
		"id": 6013203,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-10-07T16:51:49Z",
	"updated_at": "2016-10-07T16:51:49Z"
}
