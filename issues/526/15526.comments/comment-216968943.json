{
	"id": 216968943,
	"body": "Tried this. Summary:\r\n\r\n#### Inline is best\r\n\r\n    stack[d+3] = p\r\n    stack[d] = c\r\n    stack[d+1] = l\r\n    stack[d+2] = r\r\n    d += 4\r\n\r\n$ go test -bench=RichardsTwoWayIterative -benchtime=10s\r\nBenchmarkRichardsTwoWayIterative04-8   \t500000000\t        32.9 ns/op\r\nBenchmarkRichardsTwoWayIterative05-8   \t200000000\t        74.5 ns/op\r\nBenchmarkRichardsTwoWayIterative06-8   \t50000000\t       217 ns/op\r\nBenchmarkRichardsTwoWayIterative07-8   \t20000000\t       745 ns/op\r\nBenchmarkRichardsTwoWayIterative08-8   \t 5000000\t      2758 ns/op\r\nBenchmarkRichardsTwoWayIterative09-8   \t 1000000\t     15411 ns/op\r\nBenchmarkRichardsTwoWayIterative10-8   \t  200000\t    103947 ns/op\r\nBenchmarkRichardsTwoWayIterative11-8   \t   30000\t    486789 ns/op\r\nBenchmarkRichardsTwoWayIterative12-8   \t    5000\t   2599768 ns/op\r\nBenchmarkRichardsTwoWayIterative13-8   \t    1000\t  14371944 ns/op\r\nBenchmarkRichardsTwoWayIterative14-8   \t     200\t  81969665 ns/op\r\nBenchmarkRichardsTwoWayIterative15-8   \t      30\t 502210871 ns/op\r\nBenchmarkRichardsTwoWayIterative16-8   \t       3\t3354597203 ns/op\r\n\r\n#### Stack type is close\r\n\r\n    type STACK struct {\r\n\t\tsp    int\r\n\t\tstack [4 * MaxN]int\r\n\t}\r\n\r\n\tfunc (s *STACK) push4(c, l, r, p int) {\r\n\t\ts.stack[s.sp+3] = p\r\n\t\ts.stack[s.sp+0] = c\r\n\t\ts.stack[s.sp+1] = l\r\n\t\ts.stack[s.sp+2] = r\r\n\t\ts.sp += 4\r\n\t\treturn\r\n\t}\r\n\r\n$ go test -bench=RichardsTwoWayIterative -benchtime=10s\r\nBenchmarkRichardsTwoWayIterative04-8   \t500000000\t        35.3 ns/op\r\nBenchmarkRichardsTwoWayIterative05-8   \t200000000\t        79.1 ns/op\r\nBenchmarkRichardsTwoWayIterative06-8   \t50000000\t       246 ns/op\r\nBenchmarkRichardsTwoWayIterative07-8   \t20000000\t       810 ns/op\r\nBenchmarkRichardsTwoWayIterative08-8   \t 5000000\t      3112 ns/op\r\nBenchmarkRichardsTwoWayIterative09-8   \t 1000000\t     17465 ns/op\r\nBenchmarkRichardsTwoWayIterative10-8   \t  200000\t    112961 ns/op\r\nBenchmarkRichardsTwoWayIterative11-8   \t   30000\t    546747 ns/op\r\nBenchmarkRichardsTwoWayIterative12-8   \t    5000\t   2711926 ns/op\r\nBenchmarkRichardsTwoWayIterative13-8   \t    1000\t  15259405 ns/op\r\nBenchmarkRichardsTwoWayIterative14-8   \t     200\t  87839617 ns/op\r\nBenchmarkRichardsTwoWayIterative15-8   \t      20\t 548524594 ns/op\r\nBenchmarkRichardsTwoWayIterative16-8   \t       3\t3769988645 ns/op\r\nPASS\r\n\r\n#### General function is slower\r\n\r\n    func push(stack *[4 * MaxN]int, sp *int, c, l, r, p int) {\r\n\t\tstack[(*sp)+3] = p\r\n\t\tstack[(*sp)+0] = c\r\n\t\tstack[(*sp)+1] = l\r\n\t\tstack[(*sp)+2] = r\r\n\t\t*sp = (*sp) + 4\r\n    }\r\n\r\n$ go test -bench=RichardsTwoWayIterative -benchtime=10s\r\nBenchmarkRichardsTwoWayIterative04-8   \t300000000\t        40.5 ns/op\r\nBenchmarkRichardsTwoWayIterative05-8   \t100000000\t       103 ns/op\r\nBenchmarkRichardsTwoWayIterative06-8   \t50000000\t       273 ns/op\r\nBenchmarkRichardsTwoWayIterative07-8   \t20000000\t       923 ns/op\r\nBenchmarkRichardsTwoWayIterative08-8   \t 5000000\t      3534 ns/op\r\nBenchmarkRichardsTwoWayIterative09-8   \t  500000\t     24871 ns/op\r\nBenchmarkRichardsTwoWayIterative10-8   \t  100000\t    135996 ns/op\r\nBenchmarkRichardsTwoWayIterative11-8   \t   20000\t    695837 ns/op\r\nBenchmarkRichardsTwoWayIterative12-8   \t    5000\t   3612700 ns/op\r\nBenchmarkRichardsTwoWayIterative13-8   \t    1000\t  18441152 ns/op\r\nBenchmarkRichardsTwoWayIterative14-8   \t     100\t 107092404 ns/op\r\nBenchmarkRichardsTwoWayIterative15-8   \t      20\t 676950315 ns/op\r\nBenchmarkRichardsTwoWayIterative16-8   \t       3\t4516315653 ns/op\r\n\r\n#### Inline with \"-B\"\r\n\r\n$ go test -bench=RichardsTwoWayIterative -gcflags=-B -benchtime=10s\r\nBenchmarkRichardsTwoWayIterative04-8   \t500000000\t        31.0 ns/op\r\nBenchmarkRichardsTwoWayIterative05-8   \t200000000\t        70.2 ns/op\r\nBenchmarkRichardsTwoWayIterative06-8   \t100000000\t       211 ns/op\r\nBenchmarkRichardsTwoWayIterative07-8   \t20000000\t       687 ns/op\r\nBenchmarkRichardsTwoWayIterative08-8   \t 5000000\t      2743 ns/op\r\nBenchmarkRichardsTwoWayIterative09-8   \t 1000000\t     16873 ns/op\r\nBenchmarkRichardsTwoWayIterative10-8   \t  200000\t     97011 ns/op\r\nBenchmarkRichardsTwoWayIterative11-8   \t   30000\t    495367 ns/op\r\nBenchmarkRichardsTwoWayIterative12-8   \t    5000\t   2550674 ns/op\r\nBenchmarkRichardsTwoWayIterative13-8   \t    1000\t  14377273 ns/op\r\nBenchmarkRichardsTwoWayIterative14-8   \t     200\t  83683313 ns/op\r\nBenchmarkRichardsTwoWayIterative15-8   \t      20\t 523547845 ns/op\r\nBenchmarkRichardsTwoWayIterative16-8   \t       3\t3341482554 ns/op\r\n\r\n### Humor\r\n\r\nI acknowledge that the code snippet is not itself an award winner in terms of \"clarity of exposition.\" It is the 4th in a developmental series and most of the comments are out at this point as it is focused on what changes between the versions. This series is just one of six or so ways to solve the same problem with a huge range of variations in performance and intricacy. The final version is very much faster, is dependent on -gcflags=-B, and rather completely inscrutable, with much like this...\r\n\r\n    : \r\n\ts_left[i] = left\r\n\t\ts_rigt[i] = rigt\r\n\tPROC2:\r\n\t\tbit = -bits \u0026 bits\r\n\t\tbits ^= bit\r\n\t\tboard[i] = bit\r\n\t\ts_bits[i] = bits\r\n\t\ti++\r\n\t\tmask ^= bit\r\n\t\tleft = (left | bit) \u003c\u003c 1\r\n\t\trigt = (rigt | bit) \u003e\u003e 1\r\n\t\tif i == posa {\r\n\t\t\tif mask\u0026topb != 0 {\r\n\t\t\t\tgoto BACK2\r\n\t\t\t}\r\n\t\t\tif mask\u00261 != 0 {\r\n\t\t\t\tif ((left | rigt) \u0026 1) != 0 {\r\n\t\t\t\t\tgoto BACK2\r\n\t\t\t\t}\r\n\t\t\t\tbits = 1\r\n\t\t\t} else {\r\n\t\t\t\tbits = mask \u0026 ^(left | rigt)\r\n\t\t\t\tif bits == 0 {\r\n\t\t\t\t\tgoto BACK2\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tgoto NEXT3\r\n\t\t} else {\r\n\t\t\tgoto NEXT2\r\n\t\t}\r\n\tBACK2:\r\n\t\ti--\r\n\t\tbits = s_bits[i]\r\n\t\tif bits != 0 {\r\n\t\t\tmask = s_mask[i]\r\n\t\t\tleft = s_left[i]\r\n    : \r\n",
	"user": {
		"login": "MichaelTJones",
		"id": 7877285,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-04T19:06:27Z",
	"updated_at": "2016-05-05T00:43:28Z"
}
