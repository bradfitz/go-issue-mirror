{
	"id": 51286834,
	"number": 7526,
	"state": "closed",
	"title": "spec: spec says nothing about validity of self-referential declarations",
	"body": "\u003cpre\u003eAt the package-level, all (non-imported) identifiers are immediately in package scope\nwhich permits self-referential declarations.\n\nThis is important for type declarations; e.g.:\n\ntype List struct{\n   elem int\n   next *List\n}\n\na) For type declarations, certain recursive constructs would lead to\n\u0026quot;infinitely\u0026quot; sized types and are obviously impossible and invalid; e.g.:\n\ntype T [n]T\ntype S struct{field S}\ntype I interface{I}\n\nThe spec should specify the exact rules for these (straight-forward) cases.\n\nb) There are pathological cases of self-referential declarations, typically involving\nconstant expressions referring used as length value of array declarations, whith the\nconstant expressopns referring to the yet-to-be declared variable/type. E.g.:\n\n\u003ca href=\"http://play.golang.org/p/h9KlMctIqD\"\u003ehttp://play.golang.org/p/h9KlMctIqD\u003c/a\u003e\n\u003ca href=\"http://play.golang.org/p/Ybsig_M8oF\"\u003ehttp://play.golang.org/p/Ybsig_M8oF\u003c/a\u003e\n\u003ca href=\"http://play.golang.org/p/akqH5uMoOD\"\u003ehttp://play.golang.org/p/akqH5uMoOD\u003c/a\u003e\netc.\n\n(see also \u003ca href=\"https://golang.org/issue/7525\"\u003eissue #7525\u003c/a\u003e).\n\nIt would be nice if we specify if/how these cases are valid/invalid, or perhaps exclude\nthem more categorically. While these are all pathological cases, a clear rule would\ninform how much effort needs to go into a language implementation/compiler. At this\npoint, all three front-ends (gc, gccgo. go/types) tend to do different things.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Documentation"
		}
	],
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2016-01-07T23:49:09Z",
	"created_at": "2014-03-12T21:07:49Z",
	"updated_at": "2016-01-07T23:49:09Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
