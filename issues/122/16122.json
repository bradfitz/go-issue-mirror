{
	"id": 161099596,
	"number": 16122,
	"state": "open",
	"title": "cmd/compile: poor register allocator behavior in compression code",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n go1.6 windows/amd64 and go1.7beta1 windows/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOEXE=.exe\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOOS=windows\r\nset GOPATH=E:\\Users\\fred\\Documents\\Prog\\kanzi\\go\r\nset GORACE=\r\nset GOROOT=E:\\Program Files\\go\r\nset GOTOOLDIR=E:\\Program Files\\go\\pkg\\tool\\windows_amd64\r\nset GO15VENDOREXPERIMENT=1\r\nset CC=gcc\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\n\r\n3. What did you do?\r\nI ran \"go build TestZRLT.go\" then \"TestZRLT.exe\" both for Go 1.6 and 1.7 beta1\r\nThe source code is very simple: https://github.com/flanglet/kanzi/blob/master/go/src/kanzi/test/TestZRLT.go. \r\nIt runs a correctness and a performance test tor the Zero Run Length Transform:\r\nhttps://github.com/flanglet/kanzi/blob/master/go/src/kanzi/function/ZRLT.go.\r\n\r\n4. What did you expect to see?\r\nI expected to see no performance regression from 1.6 to 1.7beta1\r\n\r\n5. What did you see instead?\r\nZRLT encoding is much faster with 1.7beta1 but decoding is much slower.\r\n\r\nOutput for 1.6:\r\nSpeed test\r\nIterations: 50000\r\n\r\nZRLT encoding [ms]: 10694\r\nThroughput [MB/s]: 222\r\nZRLT decoding [ms]: 7419\r\nThroughput [MB/s]: 321\r\n\r\nZRLT encoding [ms]: 10753\r\nThroughput [MB/s]: 221\r\nZRLT decoding [ms]: 7472\r\nThroughput [MB/s]: 319\r\n\r\nZRLT encoding [ms]: 10724\r\nThroughput [MB/s]: 222\r\nZRLT decoding [ms]: 7393\r\nThroughput [MB/s]: 322\r\n\r\nOutput for 1.7beta1:\r\nSpeed test\r\nIterations: 50000\r\n\r\nZRLT encoding [ms]: 6834\r\nThroughput [MB/s]: 348\r\nZRLT decoding [ms]: 11560\r\nThroughput [MB/s]: 206\r\n\r\nZRLT encoding [ms]: 6828\r\nThroughput [MB/s]: 349\r\nZRLT decoding [ms]: 11589\r\nThroughput [MB/s]: 205\r\n\r\nZRLT encoding [ms]: 6790\r\nThroughput [MB/s]: 351\r\nZRLT decoding [ms]: 11558\r\nThroughput [MB/s]: 206\r\n\r\nI narrowed down the issue to the run length decoding loop:\r\n\r\n    for val \u003c= 1 {\r\n\t    runLength = (runLength \u003c\u003c 1) | int(val)\r\n\t    srcIdx++\r\n\r\n\t    if srcIdx \u003e= srcEnd {\r\n\t    \t    break\r\n\t    }\r\n\r\n\t    val = src[srcIdx]\r\n    }\r\n\r\nIf I replace 'for val \u003c= 1 {' with 'for val\u00261 == val {', the decoding becomes much faster (although not as fast as with Go 1.6)\r\n\r\nOutput for 1.7beta1 with code change:\r\n\r\nSpeed test\r\nIterations: 50000\r\n\r\nZRLT encoding [ms]: 6800\r\nThroughput [MB/s]: 350\r\nZRLT decoding [ms]: 7669\r\nThroughput [MB/s]: 310\r\n\r\nZRLT encoding [ms]: 6813\r\nThroughput [MB/s]: 349\r\nZRLT decoding [ms]: 7689\r\nThroughput [MB/s]: 310\r\n\r\nZRLT encoding [ms]: 6775\r\nThroughput [MB/s]: 351\r\nZRLT decoding [ms]: 7662\r\nThroughput [MB/s]: 311",
	"user": {
		"login": "flanglet",
		"id": 1210759,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		}
	],
	"assignee": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"created_at": "2016-06-20T00:20:30Z",
	"updated_at": "2016-06-30T18:37:02Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
