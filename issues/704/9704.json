{
	"id": 55696657,
	"number": 9704,
	"state": "open",
	"title": "runtime: steady decrease of cgocall performance",
	"body": "Running this stupid microbenchmark on linux/amd64, with different version of Go.\r\nhttp://play.golang.org/p/5U0i26sA8U\r\n\r\n```\r\npackage main\r\n\r\n// int rand() { return 42; }\r\nimport \"C\"\r\n\r\nimport \"testing\"\r\n\r\nfunc BenchmarkCgo(b *testing.B) {\r\n\tfor i := 0; i \u003c b.N; i++ {\r\n\t\tC.rand()\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\ttesting.Main(func(string, string) (bool, error) {\r\n\t\treturn true, nil\r\n\t}, nil, []testing.InternalBenchmark{\r\n\t\t{\"BenchmarkCgo\", BenchmarkCgo},\r\n\t}, nil)\r\n}\r\n```\r\n\r\n```\r\n$ go1 run cgobench.go -test.bench=.\r\ntesting: warning: no tests to run\r\nPASS\r\nBenchmarkCgo\t50000000\t        30.8 ns/op\r\n$ go112 run cgobench.go -test.bench=.\r\ntesting: warning: no tests to run\r\nPASS\r\nBenchmarkCgo\t50000000\t        40.9 ns/op\r\n$ go121 run cgobench.go -test.bench=.\r\ntesting: warning: no tests to run\r\nPASS\r\nBenchmarkCgo\t50000000\t        46.1 ns/op\r\n$ go133 run cgobench.go -test.bench=.\r\ntesting: warning: no tests to run\r\nPASS\r\nBenchmarkCgo\t50000000\t        48.3 ns/op\r\n$ go141 run cgobench.go -test.bench=.\r\ntesting: warning: no tests to run\r\nPASS\r\nBenchmarkCgo\t10000000\t       160 ns/op\r\n$ go run cgobench.go -test.bench=. # today's Go tip, f4a2617\r\ntesting: warning: no tests to run\r\nPASS\r\nBenchmarkCgo\t10000000\t       203 ns/op\r\n```\r\nWhy? Go 1.4 is much worse than any of the previous releases.\r\nAnd Go tip is even worse than Go 1.4. This might be understandable,\r\nbut I wonder why Go 1.4 is that much slower than 1.3.3?\r\n",
	"user": {
		"login": "minux",
		"id": 135652,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"created_at": "2015-01-28T00:27:11Z",
	"updated_at": "2015-08-26T19:52:13Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	}
}
