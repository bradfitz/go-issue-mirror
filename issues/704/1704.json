{
	"id": 51278192,
	"number": 1704,
	"state": "closed",
	"title": "reflect: convention for multiple packages using struct tags",
	"body": "\u003cpre\u003e== Problem ==\n\nTags may be used by multiple packages, and there's no convention today\nto enable them to namespace their use so that they can obtain the\ninformation they need while still allowing the struct tag to be used\nby other packages.\n\nThis means a struct may have to be declared twice with exactly the\nsame fields, but with differing tags, to satisfy the needs of\ndifferent packages.\n\n\n== Suggested solution ==\n\nEstablish a loose convention so that tags can optionally include\nnamespaces in the form NS(value) separated by spaces.  In the absence\nof any namespaces (no '(' in the tag string), the whole tag value\ncontinues to be taken into account.\n\nAs an example, the json package would be enhanced so that the\nmarshalling of JSON values specifically would make this:\n\n   type T struct { F int \u0026quot;BEFORE KEY(name) AFTER\u0026quot; }\n\nis equivalent to this:\n\n   type T struct { F int \u0026quot;name\u0026quot; }\n\nand this:\n\n   type T struct { F int \u0026quot;OTHER(name)\u0026quot; }\n\nis equivalent to this:\n\n   type T struct { F int \u0026quot;\u0026quot; }\n\n\n== Optional reflect enhancement ==\n\nOptionally, the reflect package could receive a new function:\n\n   func ParseTag(ns, tag string) string\n\nThis would handle the semantics defined above.\u003c/pre\u003e",
	"user": {
		"login": "niemeyer",
		"id": 378683,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:09:31Z",
	"created_at": "2011-04-14T19:41:18Z",
	"updated_at": "2016-06-24T19:27:39Z"
}
