{
	"id": 139708299,
	"number": 14737,
	"state": "closed",
	"title": "encoding/json: Given struct tags Unmarshal should be strict ",
	"body": "1. What version of Go are you using (`go version`)?\r\ngo1.6\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nUbuntu 15.10 amd64\r\n\r\n3. What did you do?\r\n\r\n```\r\npackage main\r\n\r\nimport \"fmt\"\r\nimport \"encoding/json\"\r\n\r\ntype t struct {\r\n\tTest string `json:\"test\"`\r\n}\r\n\r\nfunc main() {\r\n\tvar test t\r\n\terr := json.Unmarshal([]byte(`{\"test\":\"good\",\"TEST\":\"bad\"}`), \u0026test)\r\n\tfmt.Println(test, err)\r\n}\r\n```\r\n\r\n4. What did you expect to see?\r\n\r\nWhen a struct tag is provided the Unmarshal function shouldn't attempt to do a 'best match' against the field name and should instead only accept keys that exactly match the tag. In this case there is a leading valid field but in the case where there isn't one nothing should be parsed out. \r\n\r\n```\r\n# go run test.go\r\n# {good} \u003cnil\u003e\r\n```\r\n\r\n5. What did you see instead?\r\n\r\n```\r\n# go run test.go\r\n# {bad} \u003cnil\u003e\r\n```\r\n",
	"user": {
		"login": "rolandshoemaker",
		"id": 5080674,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-03-09T22:02:42Z",
	"created_at": "2016-03-09T21:39:07Z",
	"updated_at": "2016-03-09T22:03:18Z"
}
