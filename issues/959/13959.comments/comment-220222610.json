{
	"id": 220222610,
	"body": "This is tricky because it requires us to back up the hpack encoder state if we find out we wrote too much in `encodeHeaders`. I guess `encodeHeaders` needs to ask hpack.Encoder return a snapshot its state, then we write everything into the `bytes.Buffer` and count the size as we go. Or we need to do first pass of everything, just counting size[1], then another pass doing the encoding. \r\n\r\n[1] Remember that this isn't about the hpack-encoded bytes size, but the Sum(EachField(len(key)+len(value)+32)-ish thing:\r\n\r\n\u003e This advisory setting informs a peer of the maximum size of header list that the sender is prepared to accept, in octets. The value is based on the uncompressed size of header fields, including the length of the name and value in octets plus an overhead of 32 octets for each header field.\r\n\r\nI'm demoting this to a Go1.7Maybe.\r\n",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-19T04:04:03Z",
	"updated_at": "2016-05-19T04:04:03Z"
}
