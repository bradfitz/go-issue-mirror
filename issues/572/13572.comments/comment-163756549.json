{
	"id": 163756549,
	"body": "@robpike go/compile does support the full 32-bit range because big.Float supports a 32bit range. The main issue is input and output. Decimal output works fine since it's only needed in error messages where a rounded 6-digit result is plenty. Decimal input is also working fine. Import and export use a binary format (new form) or a textual form with binary exponent; in all these cases exponent range is irrelevant. The current go/types implementation cannot handle it, but a pending and LGTM-ed CL ( https://go-review.googlesource.com/#/c/17360/ ) fixes that as well. I believe gccgo uses a C library for constant arithmetic which takes care of it.\r\n\r\nThus, we have implementations now that are fully compliant. That said, the amount of effort (*) to get here seems incommensurable with the benefit: There's likely not a single use case (but for tests) where it matters (but I am happy to hear to the contrary from the community).\r\n\r\n(*) If only 16bit exponent implementations are required, a simple implementation might get away without the need for a (complex) floating-point library. Since such large constants are rare, representing them in full in memory is easily feasible on todays machines.",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-10T21:36:56Z",
	"updated_at": "2015-12-10T21:36:56Z"
}
