{
	"id": 236973640,
	"body": "Totally agree. mod_h2 has to translate between the worlds as there is tons of legacy stuff out there running in the server and it needs to be more strict in that. \n\n\u003e Am 02.08.2016 um 18:57 schrieb Brad Fitzpatrick \u003cnotifications@github.com\u003e:\n\u003e \n\u003e Well, let's stay constructive.\n\u003e \n\u003e Sorry, I didn't mean to be come across as adversarial or disparage either @tatsuhiro-t or nghttp2. I was just trying to argue the point that if a protocol is new and is trying to be strict (as HTTP/2 is, especially compared to super-sloppy HTTP/1), implementations of the protocol must also be super strict, especially in the early days, otherwise all the strict wording in the spec is useless and a de-facto reality emerges and all of our implementations will forever have to deal with everybody's corner cases. And I don't think we would enjoy that.\n\u003e \n\u003e I haven't looked at the nghttp2 or Apache APIs and where the responsibility boundaries are, but I'm just very anxious about the idea of a library deciding to hide garbage from upper layers, when the garbage is specified in the specs as illegal.\n\u003e \n\u003e Go's http2 package is strict by default, but the Framer has AllowIllegalReads and AllowIllegalWrites (https://godoc.org/golang.org/x/net/http2#Framer) specifically to allow people to write testing tools to generate and accept garbage. But we never hide garbage from the user. We just return errors instead, hoping that causes push-back to the other side to be stricter.\n\u003e \n\u003e â€”\n\u003e You are receiving this because you were mentioned.\n\u003e Reply to this email directly, view it on GitHub, or mute the thread.\n\u003e \n",
	"user": {
		"login": "icing",
		"id": 15102,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-08-02T17:11:49Z",
	"updated_at": "2016-08-02T17:11:49Z"
}
