{
	"id": 218655677,
	"body": "Python 2.7.8 base64 module implements decoding the same way as `encoding/base64` in Go:\r\n\r\n    \u003e\u003e\u003e base64.b64decode(\"WvLTlMrX9NpYDQlEIFlnDB==\")\r\n    'Z\\xf2\\xd3\\x94\\xca\\xd7\\xf4\\xdaX\\r\\tD Yg\\x0c'\r\n    \u003e\u003e\u003e base64.b64decode(\"WvLTlMrX9NpYDQlEIFlnDA==\")\r\n    'Z\\xf2\\xd3\\x94\\xca\\xd7\\xf4\\xdaX\\r\\tD Yg\\x0c'\r\n\r\nRFC4648 allows this. The relevant section is 3.5 (https://www.ietf.org/rfc/rfc4648.txt):\r\n\r\n\u003e The padding step in base 64 and base 32 encoding can, if improperly\r\n   implemented, lead to non-significant alterations of the encoded data.\r\n   For example, if the input is only one octet for a base 64 encoding,\r\n   then all six bits of the first symbol are used, but only the first\r\n   two bits of the next symbol are used.  These pad bits MUST be set to\r\n   zero by conforming encoders, which is described in the descriptions\r\n   on padding below.  If this property do not hold, there is no\r\n   canonical representation of base-encoded data, and multiple base-\r\n   encoded strings can be decoded to the same binary data.  If this\r\n   property (and others discussed in this document) holds, a canonical\r\n   encoding is guaranteed.\r\n\r\n  \u003e In some environments, the alteration is critical and therefore\r\n   decoders MAY chose to reject an encoding if the pad bits have not\r\n   been set to zero.  The specification referring to this may mandate a\r\n   specific behaviour.",
	"user": {
		"login": "kostya-sh",
		"id": 7126275,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-12T04:09:26Z",
	"updated_at": "2016-05-12T04:16:06Z"
}
