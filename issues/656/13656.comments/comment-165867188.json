{
	"id": 165867188,
	"body": "I agree that we should probably find a solution to this problem.  We want to make cgo easier \u0026 safer.\r\n\r\nUsing SliceHeader is ok, that \"cannot be used safely\" warning is aimed at people trying to store Go pointers in its Data field.  Storing C pointers in the Data field should be ok.  The rest of the warning is basically the same as the one for unsafe.Pointer.\r\nIt's still tricky, though, you'd have to do:\r\n\r\n    h := reflect.SliceHeader{uintptr(p), n, n}\r\n    s := *(*[]T)(unsafe.Pointer(\u0026h))\r\n\r\n(In an ideal world, SliceHeader.Data should be an unsafe.Pointer, not a uintptr.  Too late now.)\r\n\r\nI'm hesitant to put the fix in reflect, it is too heavyweight.  Maybe just something in package unsafe?\r\n\r\n    // MakeSlice makes a slice out of ptr/len/cap and stores it to s.\r\n    func MakeSlice(s, ptr unsafe.Pointer, len, cap int)",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-18T18:40:38Z",
	"updated_at": "2015-12-18T18:40:38Z"
}
