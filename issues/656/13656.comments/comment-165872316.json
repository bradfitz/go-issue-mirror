{
	"id": 165872316,
	"body": "\u003e Using SliceHeader is ok, that \"cannot be used safely\" warning is aimed at people trying to store Go pointers in its Data field.  Storing C pointers in the Data field should be ok.\r\n\r\nIf that's the case, then just a doc fix might be sufficient.  (I suggested a similar approach in some code I was reviewing and @ianlancetaylor said not to do it.)\r\n\r\n\u003e I'm hesitant to put the fix in reflect, it is too heavyweight. Maybe just something in package unsafe?\r\n\r\nMaybe?  But unsafe doesn't otherwise have anything to do with built-in data structures like slices, and it's not entirely clear to me how you'd get from that to a value of slice type.  Would you convert \"s\" to a pointer-to-slice, or to some other type (e.g. the slice itself)?  If it's a pointer-to-slice, is the slice header allocated on the Go heap?\r\n\r\nreflect.Value.Interface() at least makes the answers to those questions consistent, which is why it seems like a more natural fit to me - and `SliceAt` isn't that far off from the existing `reflect.MakeSlice` and `reflect.NewAt`.",
	"user": {
		"login": "bcmills",
		"id": 5200974,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-18T19:05:13Z",
	"updated_at": "2015-12-18T19:05:13Z"
}
