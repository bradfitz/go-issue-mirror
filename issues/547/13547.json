{
	"id": 121256418,
	"number": 13547,
	"state": "open",
	"title": "cmd/compile: escape analysis overconservative for recursive calls",
	"body": "Sample program.  Allocation in inner loop of recursive foo does not escape, but conservative assumptions (because escape analysis does not do fixed-pointer iteration) force conclusion that it does.\r\n```\r\npackage main\r\n// import \"fmt\"\r\ntype Node struct {\r\n\tnext *Node\r\n\tname string\r\n}\r\nvar sink string\r\nfunc foo(list *Node, names []string) {\r\n\tif len(names) \u003e 0 {\r\n\t\tname := names[0]\r\n\t\tfor i := 0; i \u003c len(name); i++ {\r\n\t\t\tfoo(\u0026Node{list, name[i : i+1]}, names[1:]) // need not escape\r\n\t\t}\r\n\t} else if list != nil {\r\n\t\t// fmt.Printf(\"%s\", list.name) // you don't want to to do this unless you are comparing output.\r\n\t\tsink = list.name\r\n\t\tfoo(list.next, names)\r\n\t}\r\n}\r\nfunc main() {\r\n\tnames := []string{\"ant\", \"bat\", \"cat\", \"dog\", \"emu\",\r\n\t\t\"fox\", \"gnu\", \"hyena\", \"iguana\", \"jaguar\"}\r\n\tfoo(nil, names)\r\n}\r\n```\r\n",
	"user": {
		"login": "dr2chase",
		"id": 1928999,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "NeedsFix"
		}
	],
	"comments": 2,
	"created_at": "2015-12-09T14:39:21Z",
	"updated_at": "2016-10-17T17:36:33Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
