{
	"id": 154013858,
	"number": 15629,
	"state": "open",
	"title": "os: IsPermission returns false when reading a write-only file descriptor.",
	"body": "1. What version of Go are you using (`go version`)?\r\n\r\n`go version go1.6.1 linux/amd64`\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\n\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/lib/go\"\r\nGOTOOLDIR=\"/usr/lib/go/pkg/tool/linux_amd64\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n```\r\n\r\n3. What did you do?\r\n\r\nGiven any file descriptor correctly opened with a write-only access level, reading from it correctly returns the errno `EBADF` as specified in `read(2)`: \r\n\u003e EBADF  fd is not a valid file descriptor or is not open for reading.\r\n\r\nBut `os.IsPermission()`  does not check this case and returns `false` instead of `true`.\r\n\r\nhttps://play.golang.org/p/sPZWxH5JA7\r\n\r\nThe context provided by `os.PathError` should allow to return true correctly. \r\n\r\nRegarding the case \"fd is not a valid file descriptor\", it could be excluded by also checking that the file descriptor is valid with something like `fcntl(fd, F_GETFD)` (but the fd is not in the error context). \r\n\r\n\r\n",
	"user": {
		"login": "Julio-Guerra",
		"id": 172303,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"created_at": "2016-05-10T14:01:02Z",
	"updated_at": "2016-05-10T17:51:25Z",
	"milestone": {
		"id": 1748849,
		"number": 42,
		"title": "Go1.8Maybe"
	}
}
