{
	"id": 169800148,
	"number": 16629,
	"state": "open",
	"title": "proposal: runtime garbage profile",
	"body": "For latency sensitive applications, excess garbage\u003csup\u003e1\u003c/sup\u003e can have a major impact on tail latencies. The alloc reporting feature of benchmarks is a excellent tool for identifying garbage, but cannot be used during runtime on live applications.  And heap profiling can show live objects and allocs but it is often difficult to discern garbage from regular heap allocated objects. A profile that records short lived objects and their allocation sites over a given duration could be a useful tool for identifying sources of garbage.\r\n\r\nThe memory statistics provided by the runtime package do not provide exact numbers for garbage allocations, but likely provide enough information for accurate estimation. One way to estimate garbage is by comparing memory statistics before and after each GC pass. Taking the minimum value between a) alloced objects/bytes before GC and b) freed objects/bytes after GC gives an estimate of garbage per GC. Repeating this over a long enough duration may produce a statistically accurate estimate of garbage.\r\n\r\nPlease see the [github.com/benburkert/pprof-garbage](https://godoc.org/github.com/benburkert/pprof-garbage) package proof of concept and [demo](https://play.golang.org/p/LFFUnhp5xP).\r\n\r\n1: garbage being defined as extremely short lived objects/bytes: marked as live for less than one period between GC passes.",
	"user": {
		"login": "benburkert",
		"id": 77,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Proposal"
		}
	],
	"comments": 1,
	"created_at": "2016-08-07T14:58:10Z",
	"updated_at": "2016-08-08T20:41:39Z",
	"milestone": {
		"id": 1373555,
		"number": 30,
		"title": "Proposal"
	}
}
