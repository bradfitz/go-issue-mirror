{
	"id": 222584196,
	"body": "@ChrisHines thanks for that. Those numbers seem normal. So it does seem to be a combination of Windows and GCE.\r\n\r\nI have another interesting finding. Lowering the [read/write buffer size](https://github.com/golang/go/commit/fa3543e33782fd90e0a8f36366d9889d39a7575e#diff-5b61c30f77741c29c875078c2007d0f2R505) in the throughput test appears to dramatically affect run time. Reducing it from `1\u003c\u003c16` (64kb) to `1\u003c\u003c15` (32kb) yields these results:\r\n\r\n```\r\n$ gomote run user-adg-windows-amd64-race-0 go/bin/go test -run=^$ -bench=. -v -race -cpu=4 crypto/tls\r\nBenchmarkThroughput/MaxPacket/1MB-4         \t      50\t  33806430 ns/op\t  31.02 MB/s\r\nBenchmarkThroughput/MaxPacket/2MB-4         \t      30\t  56246400 ns/op\t  37.29 MB/s\r\nBenchmarkThroughput/MaxPacket/4MB-4         \t      10\t 106243200 ns/op\t  39.48 MB/s\r\nBenchmarkThroughput/MaxPacket/8MB-4         \t       5\t 201159000 ns/op\t  41.70 MB/s\r\nBenchmarkThroughput/MaxPacket/16MB-4        \t       3\t 414036000 ns/op\t  40.52 MB/s\r\nBenchmarkThroughput/MaxPacket/32MB-4        \t       2\t 772411500 ns/op\t  43.44 MB/s\r\nBenchmarkThroughput/MaxPacket/64MB-4        \t       1\t1570212000 ns/op\t  42.74 MB/s\r\nBenchmarkThroughput/DynamicPacket/1MB-4     \t       1\t1854373500 ns/op\t   0.57 MB/s\r\nBenchmarkThroughput/DynamicPacket/2MB-4     \t       1\t2018425500 ns/op\t   1.04 MB/s\r\nBenchmarkThroughput/DynamicPacket/4MB-4     \t       1\t2045767500 ns/op\t   2.05 MB/s\r\nBenchmarkThroughput/DynamicPacket/8MB-4     \t       1\t2107287000 ns/op\t   3.98 MB/s\r\nBenchmarkThroughput/DynamicPacket/16MB-4    \t       1\t2205913500 ns/op\t   7.61 MB/s\r\nBenchmarkThroughput/DynamicPacket/32MB-4    \t       1\t2430508500 ns/op\t  13.81 MB/s\r\nBenchmarkThroughput/DynamicPacket/64MB-4    \t       1\t2810367000 ns/op\t  23.88 MB/s\r\nBenchmarkLatency/MaxPacket/200kbps-4        \t       2\t 713821500 ns/op\r\nBenchmarkLatency/MaxPacket/500kbps-4        \t       5\t 297246600 ns/op\r\nBenchmarkLatency/MaxPacket/1000kbps-4       \t      10\t 158778900 ns/op\r\nBenchmarkLatency/MaxPacket/2000kbps-4       \t      20\t  90082125 ns/op\r\nBenchmarkLatency/MaxPacket/5000kbps-4       \t      30\t  49085400 ns/op\r\nBenchmarkLatency/DynamicPacket/200kbps-4    \t      10\t 153896400 ns/op\r\nBenchmarkLatency/DynamicPacket/500kbps-4    \t      20\t  75825225 ns/op\r\nBenchmarkLatency/DynamicPacket/1000kbps-4   \t      30\t  48564600 ns/op\r\nBenchmarkLatency/DynamicPacket/2000kbps-4   \t      50\t  36755460 ns/op\r\nBenchmarkLatency/DynamicPacket/5000kbps-4   \t      50\t  28630980 ns/op\r\nPASS\r\nok  \tcrypto/tls\t47.659s\r\n```\r\n\r\nStill some slowness in the DynamicPacket benchmarks, but the others seem to have risen to normal range again.\r\n\r\nLowering it further to `1\u003c\u003c14` 16kb yields numbers in the expected range for all benchmarks:\r\n\r\n```\r\n$ gomote run user-adg-windows-amd64-race-0 go/bin/go test -run=^$ -bench=. -v -race -cpu=4 crypto/tls\r\nBenchmarkThroughput/MaxPacket/1MB-4         \t      30\t  39483150 ns/op\t  26.56 MB/s\r\nBenchmarkThroughput/MaxPacket/2MB-4         \t      20\t  69917400 ns/op\t  29.99 MB/s\r\nBenchmarkThroughput/MaxPacket/4MB-4         \t      10\t 127628550 ns/op\t  32.86 MB/s\r\nBenchmarkThroughput/MaxPacket/8MB-4         \t       5\t 248421600 ns/op\t  33.77 MB/s\r\nBenchmarkThroughput/MaxPacket/16MB-4        \t       3\t 477508500 ns/op\t  35.13 MB/s\r\nBenchmarkThroughput/MaxPacket/32MB-4        \t       2\t 908633250 ns/op\t  36.93 MB/s\r\nBenchmarkThroughput/MaxPacket/64MB-4        \t       1\t1771371000 ns/op\t  37.89 MB/s\r\nBenchmarkThroughput/DynamicPacket/1MB-4     \t      30\t  41305950 ns/op\t  25.39 MB/s\r\nBenchmarkThroughput/DynamicPacket/2MB-4     \t      20\t  70600950 ns/op\t  29.70 MB/s\r\nBenchmarkThroughput/DynamicPacket/4MB-4     \t      10\t 134561700 ns/op\t  31.17 MB/s\r\nBenchmarkThroughput/DynamicPacket/8MB-4     \t       5\t 251741700 ns/op\t  33.32 MB/s\r\nBenchmarkThroughput/DynamicPacket/16MB-4    \t       2\t 550257750 ns/op\t  30.49 MB/s\r\nBenchmarkThroughput/DynamicPacket/32MB-4    \t       2\t 980894250 ns/op\t  34.21 MB/s\r\nBenchmarkThroughput/DynamicPacket/64MB-4    \t       1\t1928587500 ns/op\t  34.80 MB/s\r\nBenchmarkLatency/MaxPacket/200kbps-4        \t       2\t 713821500 ns/op\r\nBenchmarkLatency/MaxPacket/500kbps-4        \t       5\t 298027800 ns/op\r\nBenchmarkLatency/MaxPacket/1000kbps-4       \t      10\t 159169500 ns/op\r\nBenchmarkLatency/MaxPacket/2000kbps-4       \t      20\t  90668025 ns/op\r\nBenchmarkLatency/MaxPacket/5000kbps-4       \t      30\t  49313250 ns/op\r\nBenchmarkLatency/DynamicPacket/200kbps-4    \t      10\t 154384650 ns/op\r\nBenchmarkLatency/DynamicPacket/500kbps-4    \t      20\t  77387625 ns/op\r\nBenchmarkLatency/DynamicPacket/1000kbps-4   \t      30\t  48564600 ns/op\r\nBenchmarkLatency/DynamicPacket/2000kbps-4   \t      50\t  36325800 ns/op\r\nBenchmarkLatency/DynamicPacket/5000kbps-4   \t      50\t  28787220 ns/op\r\nPASS\r\nok  \tcrypto/tls\t46.143s\r\n```\r\n\r\nSo the network stack for Windows on GCE prefers smaller buffers?\r\n\r\nI'll send a change to lower the buffer size, so that the tests run in a reasonable time, but we should find out why this is happening.\r\n",
	"user": {
		"login": "adg",
		"id": 8446613,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-31T03:21:20Z",
	"updated_at": "2016-05-31T03:21:20Z"
}
