{
	"id": 66075251,
	"body": "\u003ca id=\"c18\"\u003e\u003c/a\u003eComment 18:\n\n\u003cpre\u003eI'll throw out another approach here. It's not perfect, but maybe it'll inspire a better\nidea in someone else.\n\n`go test` knows where the actual test is; let it do the work.\n\nLet testing.T accept a filename and line range. If not present, behavior is unchanged.\nIf present, t.decorate walks up the stack until it finds a matching frame. (If no such\nframe, use current behavior.) In cmd/go, when scanning for Test*/Benchmark* function\ndeclarations, note the filename and corresponding start/end lines, use them to populate\nInternalTest, and have InternalTest populate T/B accordingly.\n\nThis does make things worse when TestFoo just wraps testFoo with minor variants. (See\ne.g. src/pkg/math/all_test.go:TestExp.) Perhaps this could be ameliorated by adding a\nmethod to t to clear the filename and line range, which could be explicitly called in\nsuch tests. Alternatively, the default could be flipped, cmd/go could gather the\nfilename and line ranges, and let individual tests turn on their usage.\n\nThis will also not likely play nicely with -cover, but we could just not generate\nfilename and line range in cover mode and fall back to the current behavior.\n\nThoughts?\u003c/pre\u003e",
	"user": {
		"login": "josharian",
		"id": 67496,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-03-25T02:59:00Z",
	"updated_at": "2014-12-08T10:26:04Z"
}
