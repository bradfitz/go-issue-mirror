{
	"id": 51288600,
	"number": 8719,
	"state": "closed",
	"title": "cmd/gc: -N flag cause return address of structure on stack instead of address of newly allocated one.",
	"body": "by **daniel.crettol**:\n\n\u003cpre\u003epackage main\n\nimport \u0026quot;fmt\u0026quot;\n\ntype A struct {\n\ti int\n}\n\nfunc new1() *A {\n\treturn \u0026amp;A{10}\n}\n\nfunc new2() *A {\n\tp := A{}\n\tp.i = 11\n\treturn \u0026amp;p\n}\n\nfunc dummy(p *A) {\n}\n\nfunc new3() *A {\n\tp := A{}\n\tp.i = 12\n\tdummy(\u0026amp;p)\n\treturn \u0026amp;p\n}\n\nfunc main() {\n\ta1 := new1()\n\tfmt.Printf(\u0026quot;a1=%p %+v\\n\u0026quot;, a1, a1)\n\n\ta2 := new2()\n\tfmt.Printf(\u0026quot;a2=%p %+v\\n\u0026quot;, a2, a2)\n\n\ta3 := new3()\n\tfmt.Printf(\u0026quot;a3=%p %+v\\n\u0026quot;, a3, a3)\n}\n\n$ go build -gcflags '-N' bugtst.go \u0026amp;\u0026amp; ./bugtst\na1=0xc208000150 \u0026amp;{i:10}\na2=0x7f31b606ddc0 \u0026amp;{i:11}\na3=0xc2080001e0 \u0026amp;{i:12}\n\n$ go build -gcflags '' bugtst.go \u0026amp;\u0026amp; ./bugtst\na1=0xc208000150 \u0026amp;{i:10}\na2=0xc2080001a8 \u0026amp;{i:11}\na3=0xc2080001e8 \u0026amp;{i:12}\n\n$ go version\ngo version go1.3.1 linux/amd64\n\nI had this pattern in a program and the struct generated by the new2 function was\ncorrupted after returned.\n\nIt seems to me that the compiler does not generate a copy of the structure when using\nthe new2 function but does it when we call the new1 and new2 function.\n\nAs the -N -L flags seems to be required to debug with gcc, it's really annoying.\n\nHappy debugging :)\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 4,
	"closed_at": "2014-12-08T10:48:19Z",
	"created_at": "2014-09-13T14:18:24Z",
	"updated_at": "2016-06-25T01:41:22Z",
	"milestone": {
		"id": 1067218,
		"number": 21,
		"title": "Go1.4"
	}
}
