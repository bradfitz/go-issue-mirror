{
	"id": 150425067,
	"number": 15409,
	"state": "open",
	"title": "cmd/link: ppc64le internal linking does not handle TOC correctly",
	"body": "The tests in misc/cgo/test fail with -linkmode=internal on ppc64le.  From https://build.golang.org/log/a5a334010e62ae540ec0ec4916a8615cae0472d7:\r\n\r\n    fatal error: unexpected signal during runtime execution\r\n    [signal 0xb code=0x1 addr=0x0 pc=0x0]\r\n\r\n    runtime stack:\r\n    runtime.throw(0x20095a, 0x2a)\r\n\t    /tmp/workdir/go/src/runtime/panic.go:566 +0x8c fp=0x3fffe2aaac68 sp=0x3fffe2aaac38\r\n    runtime.sigpanic()\r\n\t    /tmp/workdir/go/src/runtime/sigpanic_unix.go:12 +0x64 fp=0x3fffe2aaacd0 sp=0x3fffe2aaac68\r\n    invalid spdelta _cgo_wait_runtime_init_done 0x176870 0x1768a0 0x0 -1\r\n    invalid spdelta _cgo_wait_runtime_init_done 0x176870 0x1768a0 0x0 -1\r\n    _cgo_wait_runtime_init_done()\r\n\t    ?:0 +0x30 fp=0x3fffe2aaacef sp=0x3fffe2aaacf0\r\n\r\n    goroutine 1 [syscall, locked to thread]:\r\n    runtime.cgocall(0x173b80, 0xc820045e60, 0xc800000000)\r\n\t    /tmp/workdir/go/src/runtime/cgocall.go:130 +0x170 fp=0xc820045e00 sp=0xc820045db0\r\n    _/tmp/workdir/go/misc/cgo/test._Cfunc_lockOSThreadC()\r\n\t    ??:0 +0x40 fp=0xc820045e40 sp=0xc820045e00\r\n    _/tmp/workdir/go/misc/cgo/test.init.1()\r\n\t    /tmp/workdir/go/misc/cgo/test/issue3775.go:23 +0x24 fp=0xc820045e60 sp=0xc820045e40\r\n    _/tmp/workdir/go/misc/cgo/test.init()\r\n\t    _/tmp/workdir/go/misc/cgo/test/_test/_obj_test/_cgo_import.go:53 +0x470 fp=0xc820045ef8 sp=0xc820045e60\r\n    main.init()\r\n\t    _/tmp/workdir/go/misc/cgo/test/_test/_testmain.go:192 +0x88 fp=0xc820045f18 sp=0xc820045ef8\r\n    runtime.main()\r\n\t    /tmp/workdir/go/src/runtime/proc.go:177 +0x2d4 fp=0xc820045f80 sp=0xc820045f18\r\n    runtime.goexit()\r\n\t    /tmp/workdir/go/src/runtime/asm_ppc64x.s:1090 +0x4 fp=0xc820045f80 sp=0xc820045f80\r\n\r\n    goroutine 17 [syscall, locked to thread]:\r\n    runtime.goexit()\r\n\t    /tmp/workdir/go/src/runtime/asm_ppc64x.s:1090 +0x4 fp=0xc820034fb0 sp=0xc820034fb0\r\n\r\n    goroutine 2 [force gc (idle)]:\r\n    runtime.gopark(0x20e9f8, 0x2e9890, 0x1fa910, 0xf, 0x14, 0x1)\r\n\t    /tmp/workdir/go/src/runtime/proc.go:264 +0x19c fp=0xc820020708 sp=0xc8200206c8\r\n    runtime.goparkunlock(0x2e9890, 0x1fa910, 0xf, 0xc820000114, 0x1)\r\n\t    /tmp/workdir/go/src/runtime/proc.go:270 +0x58 fp=0xc820020758 sp=0xc820020708\r\n    runtime.forcegchelper()\r\n\t    /tmp/workdir/go/src/runtime/proc.go:229 +0xdc fp=0xc8200207a0 sp=0xc820020758\r\n    runtime.goexit()\r\n\t    /tmp/workdir/go/src/runtime/asm_ppc64x.s:1090 +0x4 fp=0xc8200207a0 sp=0xc8200207a0\r\n    created by runtime.init.4\r\n\t    /tmp/workdir/go/src/runtime/proc.go:218 +0x38\r\n\r\n    goroutine 3 [GC sweep wait]:\r\n    runtime.gopark(0x20e9f8, 0x2e9a60, 0x1fa13f, 0xd, 0x32e14, 0x1)\r\n\t    /tmp/workdir/go/src/runtime/proc.go:264 +0x19c fp=0xc820020ef8 sp=0xc820020eb8\r\n    runtime.goparkunlock(0x2e9a60, 0x1fa13f, 0xd, 0x14, 0x1)\r\n\t    /tmp/workdir/go/src/runtime/proc.go:270 +0x58 fp=0xc820020f48 sp=0xc820020ef8\r\n    runtime.bgsweep(0xc820052000)\r\n\t    /tmp/workdir/go/src/runtime/mgcsweep.go:63 +0xbc fp=0xc820020f98 sp=0xc820020f48\r\n    runtime.goexit()\r\n\t    /tmp/workdir/go/src/runtime/asm_ppc64x.s:1090 +0x4 fp=0xc820020f98 sp=0xc820020f98\r\n    created by runtime.gcenable\r\n\t    /tmp/workdir/go/src/runtime/mgc.go:195 +0x5c\r\n\r\n    goroutine 18 [finalizer wait]:\r\n    runtime.gopark(0x20e9f8, 0x304988, 0x1fa545, 0xe, 0x14, 0x1)\r\n\t    /tmp/workdir/go/src/runtime/proc.go:264 +0x19c fp=0xc82001c6c8 sp=0xc82001c688\r\n    runtime.goparkunlock(0x304988, 0x1fa545, 0xe, 0x14, 0x1)\r\n\t    /tmp/workdir/go/src/runtime/proc.go:270 +0x58 fp=0xc82001c718 sp=0xc82001c6c8\r\n    runtime.runfinq()\r\n\t    /tmp/workdir/go/src/runtime/mfinal.go:158 +0xc0 fp=0xc82001c7a0 sp=0xc82001c718\r\n    runtime.goexit()\r\n\t    /tmp/workdir/go/src/runtime/asm_ppc64x.s:1090 +0x4 fp=0xc82001c7a0 sp=0xc82001c7a0\r\n    created by runtime.createfing\r\n\t    /tmp/workdir/go/src/runtime/mfinal.go:139 +0x84\r\n\r\n    goroutine 19 [syscall]:\r\n    runtime.notetsleepg(0x304c00, 0xffffffffffffffff, 0x1)\r\n\t    /tmp/workdir/go/src/runtime/lock_futex.go:205 +0x60 fp=0xc82001cf00 sp=0xc82001cec0\r\n    os/signal.signal_recv(0x0)\r\n\t    /tmp/workdir/go/src/runtime/sigqueue.go:116 +0x270 fp=0xc82001cf50 sp=0xc82001cf00\r\n    os/signal.loop()\r\n\t    /tmp/workdir/go/src/os/signal/signal_unix.go:22 +0x24 fp=0xc82001cfa0 sp=0xc82001cf50\r\n    runtime.goexit()\r\n\t    /tmp/workdir/go/src/runtime/asm_ppc64x.s:1090 +0x4 fp=0xc82001cfa0 sp=0xc82001cfa0\r\n    created by os/signal.init.1\r\n\t    /tmp/workdir/go/src/os/signal/signal_unix.go:28 +0x44\r\n    exit status 2\r\n    FAIL\t_/tmp/workdir/go/misc/cgo/test\t0.009s\r\n\r\nI believe that the problem is this: the PPC ELF v2 ABI requires that every function start with a small prologue that computes the TOC pointer in r2 from the function address in r12. This computation is two instructions; in normal PPC assembler it looks like this:\r\n\r\n    0: addis 2,12,.TOC.-0b@ha\r\n    addi 2,2,.TOC.-0b@l\r\n\r\nThe symbol `.TOC.` is not defined in an object file, and is magically defined by the linker. The linker must arrange that every function in the same module (shared library or executable) compute the same value for r2.\r\n\r\nThe problem is that cmd/link is using a different value for `.TOC.` for functions defined in different object files. I haven't sorted it all out, but cmd/link seems to use a different `.TOC.` symbol for each object file, and to give them different values. This may be correct for the ELF v1 ABI; I'm not sure. It's not correct for the ELF v2 ABI used on PPC64le.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"created_at": "2016-04-22T17:15:32Z",
	"updated_at": "2016-04-23T04:22:11Z",
	"milestone": {
		"id": 1055141,
		"number": 6,
		"title": "Unplanned"
	}
}
