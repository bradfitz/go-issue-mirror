{
	"id": 139506815,
	"number": 14728,
	"state": "open",
	"title": "x/tools/cmd/eg: matches should be limited to value expressions",
	"body": "    $ cat a.go\r\n    package a\r\n    func before(x *int) int { return *x }\r\n    func after(x *int) int { return 42 }\r\n\r\n    $ cat b.go\r\n    package b\r\n    func x(p **int) {}\r\n\r\n    $ eg -t a.go b.go\r\n    === b.go (1 matches)\r\n    package b\r\n    \r\n    func x(p 42)    {}\r\n\r\nThe problem appears to be that in the type expression `**int`, the subexpression `*int` has type `*int`, so eg is deciding that it's a candidate match for the original expression.  However, `*int` is a type expression, so it doesn't make sense to replace it with a value expression like `42`.\r\n\r\nI think eg needs to make use of `go/types.TypeAndValue`'s `IsValue` method.\r\n\r\n/cc @alandonovan ",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "alandonovan",
		"id": 8433140,
		"type": "User",
		"site_admin": false
	},
	"comments": 0,
	"created_at": "2016-03-09T08:12:39Z",
	"updated_at": "2016-03-10T06:15:26Z",
	"milestone": {
		"id": 1067491,
		"number": 22,
		"title": "Unreleased"
	}
}
