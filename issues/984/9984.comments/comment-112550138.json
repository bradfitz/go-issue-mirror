{
	"id": 112550138,
	"body": "x86 is TSO so the publication barrier is a nop, or are we talking about ARM?\n\n\nOn Tue, Jun 16, 2015 at 3:34 PM, Austin Clements \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e Now that I've added the publication barrier to mallocgc (pending CL\n\u003e https://golang.org/cl/11083), I'm wondering if that's also the solution\n\u003e to the stale span problem. I may have just tied myself in knots at this\n\u003e point, but it seems like that publication barrier at the end of mallocgc\n\u003e should, in addition to ensuring GC sees an up-to-date object and heap\n\u003e bitmap after it follows a pointer to the object, also ensure it sees the\n\u003e up-to-date *mspan and mspan fields. In this case we'd need to do the\n\u003e publication barrier in the noscan path as well (the CL currently skips\n\u003e that), but that's easy enough. I believe this addresses your scenario in #9984\n\u003e (comment)\n\u003e \u003chttps://github.com/golang/go/issues/9984#issuecomment-103009836\u003e. Am I\n\u003e right?\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/9984#issuecomment-112539757\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-16T19:54:25Z",
	"updated_at": "2015-06-16T19:54:25Z"
}
