{
	"id": 110185181,
	"body": "GC bitmaps can be out of date, they just can't say an object is marked when\nit isn't.\nIsn't 2 an indication of a run of the mill race condition?\n\nOn Mon, Jun 8, 2015 at 9:51 AM, Dmitry Vyukov \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e There are two other reincarnations of the multiprocessor ordering problem:\n\u003e 1. GC bitmap. It must be visible to GC threads along with the object.\n\u003e 2. Object zeroing. At least the zero state must be visible to GC threads.\n\u003e If GC will see values from the previous life of the object, it will crash\n\u003e or retain irrelevant objects.\n\u003e I think that both cases are solvable by issuing a @StoreStore barrier\n\u003e after object initialization (both zeroing and bitmap setup). On the reader\n\u003e side there is a data dependency on the pointer value, so only a\n\u003e data-dependent barrier is enough (which is no-op on everything except\n\u003e Alpha).\n\u003e This can also probably add very bad failure modes for user code with data\n\u003e races on pointers, as visibility over bitmap won't be propagated to GC\n\u003e threads.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/9984#issuecomment-110071609\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-09T00:56:18Z",
	"updated_at": "2015-06-09T00:56:18Z"
}
