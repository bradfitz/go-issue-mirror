{
	"id": 110484586,
	"body": "I agree we need a StoreStore barrier just before gcmalloc returns the\npointer. I don't see how the GC can independently discover such a pointer\nwithout either a barrier which creates a happens-before edge or a data\ndependency which should prevent the invalid pointer.\n\n\nOn Tue, Jun 9, 2015 at 10:42 AM, Dmitry Vyukov \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e I don't follow, Rick.\n\u003e What is \"pointer returned by the allocation\"?\n\u003e\n\u003e I mean the scenario that I already described in:\n\u003e #9984 (comment)\n\u003e \u003chttps://github.com/golang/go/issues/9984#issuecomment-103009836\u003e\n\u003e\n\u003e Namely:\n\u003e Object at pointer P is free and contains garbage from the previous life.\n\u003e Thread 1 allocates P and zeroes the object at P.\n\u003e Thread 1 write pointer P into heap.\n\u003e GC thread 2 independently discovers pointer P and starts scanning it.\n\u003e Thread 2 reads a pointer from object pointed to by P.\n\u003e Now, there is nothing that guarantees that thread 2 won't see the relic\n\u003e garbage in the pointer slot.\n\u003e GC explodes on invalid pointer.\n\u003e\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/9984#issuecomment-110443455\u003e.\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-09T19:50:30Z",
	"updated_at": "2015-06-09T19:50:30Z"
}
