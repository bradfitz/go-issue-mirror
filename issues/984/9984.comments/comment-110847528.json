{
	"id": 110847528,
	"body": "Upon reflection the issue is whether the WB maintains the no black to white\ninvariant, which I think it does no matter which order we do this in. I\ndon't think we miss greying any white objects.\n\nOn Wed, Jun 10, 2015 at 9:24 AM, Rick Hudson \u003crlh@golang.org\u003e wrote:\n\n\u003e Yes that would be bad. Doing it the other way around shade then install\n\u003e would be fine.\n\u003e\n\u003e\n\u003e On Wed, Jun 10, 2015 at 2:30 AM, Dmitry Vyukov \u003cnotifications@github.com\u003e\n\u003e wrote:\n\u003e\n\u003e\u003e then any such pointer will have been marked by the write barrier that\n\u003e\u003e made the newly allocated object reachable, so it doesn't need to be marked\n\u003e\u003e by scanobject.\n\u003e\u003e\n\u003e\u003e Writebarrier writes a pointer into heap and marks the object, yes. But it\n\u003e\u003e does not do it atomically. There is a windows in which the pointer is in\n\u003e\u003e heap but the object is not marked (even on TSO).\n\u003e\u003e\n\u003e\u003e â€”\n\u003e\u003e Reply to this email directly or view it on GitHub\n\u003e\u003e \u003chttps://github.com/golang/go/issues/9984#issuecomment-110670509\u003e.\n\u003e\u003e\n\u003e\n\u003e\n",
	"user": {
		"login": "RLH",
		"id": 972447,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-06-10T17:39:31Z",
	"updated_at": "2015-06-10T17:39:31Z"
}
