{
	"id": 250297845,
	"body": "It turns out this is just an unfortunate code alignment issue, at least for TimeFormat. It's not even a data alignment issue. By (unintentionally) taking advantage of an odd property of incremental builds versus a full make.bash build, I was able to build two go1 benchmark binaries at ec9c84c where one of them was significantly slower than the build at 196df6f, while the other performed identically. The only difference between the two binaries is the size and alignment of some of the text symbols. runtime.gcController is at the exact same address in both binaries, so this only affected the text. I also built a version at ec9c84c with a patch (CL 30013) to move the new `memstats.gc_trigger` field to where the old field was removed from `gcController`, thus restoring the sizes and alignments of these two structures. This had no effect; the performance was still worse. This alone doesn't rule out cache contention, but I also observed the slow down at GOMAXPROCS=1, so it's not cache contention.\r\n\r\nThese sorts of alignment shifts happen all the time as the runtime, compiler, and common libraries change. Usually some of the shifts are helpful and others are detrimental, so they wind up cancelling out, but sometimes, by chance, you wind up with more detrimental shifts in a single change. That seems to be what's going on here. The bad news is it's not clear what we can do about it, but the good news is they cancel out in the noise over the long run. Because of this, I'm going to close this bug as resolved. However, @mvdan, if you find that this is a stable change over the longer term with other compiler and runtime changes, please ping this bug.\r\n\r\nThe process to build the two binaries was:\r\n\r\n```\r\ngit checkout ec9c84c \u0026\u0026 ./make.bash\r\n(cd ../test/bench/go1 \u0026\u0026 go test -c -o bench1)\r\ntouch runtime/mgc.go\r\n(cd ../test/bench/go1 \u0026\u0026 go test -c -o bench2)\r\n```\r\n\r\nThe following symbols differed in size (delta from first/slower to second/faster binary):\r\n\r\n```\r\n  -33 regexp/syntax.(*parser).collapse\r\n  -32 runtime.pclntab\r\n  -12 text/template.(*Template).Clone\r\n  -11 runtime.adjustframe\r\n   -3 bufio.(*Reader).ReadBytes\r\n   +3 encoding/json.(*decodeState).literalStore\r\n   +3 net/textproto.(*Reader).readContinuedLineSlice\r\n   +6 vendor/golang_org/x/net/http2/hpack.(*Decoder).parseFieldIndexed\r\n   +9 encoding/gob.(*Encoder).encodeMap\r\n```\r\n\r\nI don't believe any of these are directly involved in TimeFormat, so the effect must have been the perturbed alignment of other symbols between these.\r\n\r\n(I looked into why (*parser).collapse changed and, curiously, it's because the stack spill slots are different. It has a just large enough frame that changes a few stack-relative MOVs between the short five byte encoding and the longer eight byte encoding.)\r\n",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-09-28T20:59:12Z",
	"updated_at": "2016-09-28T20:59:12Z"
}
