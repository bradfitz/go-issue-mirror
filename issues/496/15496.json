{
	"id": 151986624,
	"number": 15496,
	"state": "closed",
	"title": "cmd/compile: bad codegen for 386 PIC code",
	"body": "1. What version of Go are you using (`go version`)? Current master cd95657\r\n2. What operating system and processor architecture are you using (`go env`)? linux/386\r\n\r\nPC-relative references in 386 code compiled with -buildmode=c-shared clobber ECX, but can occur in the middle of code sequences that are using ECX (I think because of shift instructions).\r\n\r\nFor example, heapBitsSetTypeNoScan in https://go-review.googlesource.com/#/c/22632/3 triggers this behavior, causing the runtime to crash very early because the h.bitp pointer wound up in ECX and was clobbered.\r\n\r\necx is excluded from the register allocator, but code generation can pick it before register allocation happens, and then peephole optimization can spread it to many other places.\r\n\r\nHere's an annotated heapBitsSetTypeNoScan, showing where clobbered %ecx values are being consumed. The `=\u003e` is on the line that crashes with a clobbered pointer.\r\n\r\n```\r\nDump of assembler code for function runtime.heapBitsSetTypeNoScan:\r\n   0xf7f385e0 \u003c+0\u003e:\tcall   0xf7f7c720 \u003c__x86.get_pc_thunk.cx\u003e\r\n   0xf7f385e5 \u003c+5\u003e:\tmov    0x8d9c3(%ecx),%ecx\r\n   0xf7f385eb \u003c+11\u003e:\tmov    %gs:(%ecx),%ecx\r\n   0xf7f385ee \u003c+14\u003e:\tcmp    0x8(%ecx),%esp\r\n   0xf7f385f1 \u003c+17\u003e:\tjbe    0xf7f38697 \u003cruntime.heapBitsSetTypeNoScan+183\u003e\r\n   0xf7f385f7 \u003c+23\u003e:\tsub    $0x20,%esp\r\n   0xf7f385fa \u003c+26\u003e:\tmov    0x24(%esp),%ecx       %ecx = x\r\n   0xf7f385fe \u003c+30\u003e:\txor    %ebx,%ebx             \r\n   0xf7f38600 \u003c+32\u003e:\tcall   0xf7f7c720 \u003c__x86.get_pc_thunk.cx\u003e   %ecx clobbered\r\n   0xf7f38605 \u003c+37\u003e:\tmov    0x9117b(%ecx),%ebx    %ebx = arena_start\r\n   0xf7f3860b \u003c+43\u003e:\tmov    %ecx,%ebp             SHOULD BE %ebp = x, but %ecx clobbered\r\n   0xf7f3860d \u003c+45\u003e:\tsub    %ebx,%ebp             %ebp = x - arena_start\r\n   0xf7f3860f \u003c+47\u003e:\tcall   0xf7f7c720 \u003c__x86.get_pc_thunk.cx\u003e\r\n   0xf7f38614 \u003c+52\u003e:\tmov    0x9116c(%ecx),%ebx    %ebx = arena_start\r\n   0xf7f3861a \u003c+58\u003e:\tsub    %ebx,%ecx             SHOULD BE %ecx = x - arena_start, but %ecx clobbered\r\n   0xf7f3861c \u003c+60\u003e:\tshr    $0x2,%ecx             %ecx = off = (x - arena_start)/4\r\n   0xf7f3861f \u003c+63\u003e:\txor    %ebx,%ebx             %ebx = 0\r\n   0xf7f38621 \u003c+65\u003e:\tcall   0xf7f7c720 \u003c__x86.get_pc_thunk.cx\u003e   %ecx clobbered\r\n   0xf7f38626 \u003c+70\u003e:\tmov    0x9115a(%ecx),%eax    %eax = arena_start\r\n   0xf7f3862c \u003c+76\u003e:\tmov    %ecx,%ebp             SHOULD BE %ebp = off, but %ecx clobbered\r\n   0xf7f3862e \u003c+78\u003e:\tshr    $0x2,%ebp             %ebp = off/4\r\n   0xf7f38631 \u003c+81\u003e:\tsub    %ebp,%eax             %eax = arena_start - off/4\r\n   0xf7f38633 \u003c+83\u003e:\tdec    %eax                  %eax = arena_start - off/4 - 1\r\n   0xf7f38634 \u003c+84\u003e:\tand    $0x3,%ecx             %ecx = off \u0026 3\r\n   0xf7f38637 \u003c+87\u003e:\tmov    %eax,0x18(%esp)\r\n   0xf7f3863b \u003c+91\u003e:\tmov    %ecx,0x1c(%esp)\r\n   0xf7f3863f \u003c+95\u003e:\tmov    %eax,0x8(%esp)\r\n   0xf7f38643 \u003c+99\u003e:\tmov    %ecx,0xc(%esp)\r\n   0xf7f38647 \u003c+103\u003e:\tmov    %eax,0x10(%esp)\r\n=\u003e 0xf7f3864b \u003c+107\u003e:\tmovzbl (%eax),%esi\r\n   0xf7f3864e \u003c+110\u003e:\tmov    %ecx,0x14(%esp)\r\n   0xf7f38652 \u003c+114\u003e:\tmov    $0x11,%ebx\r\n   0xf7f38657 \u003c+119\u003e:\tcmp    $0x8,%ecx\r\n   0xf7f3865a \u003c+122\u003e:\tjae    0xf7f38693 \u003cruntime.heapBitsSetTypeNoScan+179\u003e\r\n   0xf7f3865c \u003c+124\u003e:\tshl    %cl,%ebx\r\n   0xf7f3865e \u003c+126\u003e:\txor    $0xffffffff,%ebx\r\n   0xf7f38661 \u003c+129\u003e:\tand    %esi,%ebx\r\n   0xf7f38663 \u003c+131\u003e:\tmov    %bl,(%eax)\r\n   0xf7f38665 \u003c+133\u003e:\tcall   0xf7f51790 \u003cruntime.printlock\u003e\r\n   0xf7f3866a \u003c+138\u003e:\tcall   0xf7f7c720 \u003c__x86.get_pc_thunk.cx\u003e\r\n   0xf7f3866f \u003c+143\u003e:\tlea    0x45185(%ecx),%ebx\r\n   0xf7f38675 \u003c+149\u003e:\tmov    %ebx,(%esp)\r\n   0xf7f38678 \u003c+152\u003e:\tmovl   $0xc,0x4(%esp)\r\n   0xf7f38680 \u003c+160\u003e:\tcall   0xf7f52290 \u003cruntime.printstring\u003e\r\n   0xf7f38685 \u003c+165\u003e:\tcall   0xf7f51a10 \u003cruntime.printnl\u003e\r\n   0xf7f3868a \u003c+170\u003e:\tcall   0xf7f51810 \u003cruntime.printunlock\u003e\r\n   0xf7f3868f \u003c+175\u003e:\tadd    $0x20,%esp\r\n   0xf7f38692 \u003c+178\u003e:\tret    \r\n   0xf7f38693 \u003c+179\u003e:\txor    %ebx,%ebx\r\n   0xf7f38695 \u003c+181\u003e:\tjmp    0xf7f3865c \u003cruntime.heapBitsSetTypeNoScan+124\u003e\r\n   0xf7f38697 \u003c+183\u003e:\tcall   0xf7f77240 \u003cruntime.morestack_noctxt\u003e\r\n   0xf7f3869c \u003c+188\u003e:\tjmp    0xf7f385e0 \u003cruntime.heapBitsSetTypeNoScan\u003e\r\n```\r\n\r\n/cc @randall77 @mwhudson ",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"comments": 6,
	"closed_at": "2016-04-30T06:00:18Z",
	"created_at": "2016-04-29T23:15:54Z",
	"updated_at": "2016-04-30T06:52:28Z"
}
