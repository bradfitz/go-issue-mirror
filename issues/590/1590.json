{
	"id": 51278029,
	"number": 1590,
	"state": "closed",
	"title": "empty default line in select block hangs program",
	"body": "by **jakans@earthlink.net**:\n\n\u003cpre\u003eBefore filing a bug, please check whether it has been fixed since\nthe latest release: run \u0026quot;hg pull -u\u0026quot; and retry what you did to\nreproduce the problem.  Thanks.\n\nWhat steps will reproduce the problem?\n1. Uncomment the default: line in the program below.\n2. Build and run with default arguments.\n3.\n\nWhat is the expected output?\n\nProduction of output squares.png file.\n\nWhat do you see instead?\n\nProgram hangs indefinitely.\n\nWhich compiler are you using (5g, 6g, 8g, gccgo)?\n\n6g\n\nWhich operating system are you using?\n\nMac OS 10.6.6\n\nWhich revision are you using?  (hg identify)\n\nc5c62aeb6267 tip\n\nPlease provide any additional information below.\n\nI have a possible bug report, but first a quick question about\ngofmt expansion of algebraic formulas.\n\n\nThe gofmt program formats the test condition in a for statement\nwithout using spaces, whereas it makes the initial and increment\nconditions more readable with spaces.  For example:\n\nfunc dummy(x, y, z int) {\n\tfor x0 := y + 3*x - 1; x0 \u0026lt;= y*5-x+1; x0 = x0 + 5*y + z*2 {\n\t\t...\n\t}\n}\n\nIs this a deliberate decision?  Is it documented somewhere?  Is\nit because the test condition is usually simple?  I just wanted\nto confirm that the behavior is intended.\n\n\nI've written a sample program for introducing colleagues to go,\nshowing off some of its many useful features and constructs,\nespecially closures and multiprocessing using goroutines and\nchannels.  (The actual example has comments explaining each major\npoint.)  In the select block below, if I uncomment the default\nline, the program hangs.  However, the server function in\n\n\u003ca href=\"http://golang.org/doc/effective_go.html#leaky_buffer\"\u003ehttp://golang.org/doc/effective_go.html#leaky_buffer\u003c/a\u003e\n\nshows an empty default clause, which led me to believe that this\nshould be safe.  (That example has other processing in the for\nloop outside of the select, which might be relevant.)  Also, if I\nput a fmt.Print statement in the default block, it eventually\nprocesses the other cases.  Is this a bug, or is there something\nobvious I'm missing?\n\n(By the way, I put the { return } body on the same line as the if\nstatement to show my colleagues that you can type it on a single\nline (same with continue and break) and let gofmt convert it to\nthe standard form later.  It makes program entry a bit easier.  I\nmay have run across this suggestion in your documentation, but I\ndon't remember exactly where I saw it.)\n\n-----\n\n// callback.go\n\npackage main\n\nimport (\n\t\u0026quot;bufio\u0026quot;\n\t\u0026quot;flag\u0026quot;\n\t\u0026quot;image\u0026quot;\n\t\u0026quot;image/png\u0026quot;\n\t\u0026quot;os\u0026quot;\n\t\u0026quot;rand\u0026quot;\n\t\u0026quot;runtime\u0026quot;\n)\n\nfunc DrawSquare(left, top, edge int, draw func(x, y int)) {\n\n\tif draw == nil { return }\n\n\tright, bottom := left+edge, top+edge\n\n\tfor x := left; x \u0026lt;= right; x++ {\n\t\tdraw(x, top)\n\t\tdraw(x, bottom)\n\t}\n\n\tfor y := top; y \u0026lt;= bottom; y++ {\n\t\tdraw(left, y)\n\t\tdraw(right, y)\n\t}\n}\n\ntype SquareData struct {\n\tleft, top, edge int\n\tcolor           image.RGBAColor\n\tthickFrame      bool\n}\n\nfunc DrawSquareHandler(rgba *image.RGBA, queue chan *SquareData, done chan int, quit\nchan bool) {\n\n\tif rgba == nil || queue == nil || done == nil || quit == nil { return }\n\n\tfor {\n\t\tselect {\n\t\tcase req := \u0026lt;-queue:\n\t\t\tframeSquare := func(x, y int) {\n\t\t\t\tif req.thickFrame {\n\t\t\t\t\tfor x0 := x - 1; x0 \u0026lt;= x+1; x0++ {\n\t\t\t\t\t\tfor y0 := y - 1; y0 \u0026lt;= y+1; y0++ {\n\t\t\t\t\t\t\trgba.Set(x0, y0, req.color)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trgba.Set(x, y, req.color)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tDrawSquare(req.left, req.top, req.edge, frameSquare)\n\n\t\t\tdone \u0026lt;- 0\n\t\tcase \u0026lt;-quit:\n\t\t\treturn\n\t\t// default:\n\t\t\t/*\n\t\t\tuncommenting default case causes unexpected hang\n\t\t\tunless it does something like printing, in which case it\n\t\t\twill eventually allow the request queue to be processed\n\t\t\thowever, in \u003ca href=\"http://golang.org/doc/effective_go.html#leaky_buffer\"\u003ehttp://golang.org/doc/effective_go.html#leaky_buffer\u003c/a\u003e\n\t\t\tthe comment about func server says that the default case\n\t\t\tprevents the select statement from blocking\n\t\t\t*/\n\t\t}\n\t}\n}\n\nvar (\n\tpngPath  string\n\tncpu     int\n\tnsquares int\n)\n\nfunc init() {\n\tflag.StringVar(\u0026amp;pngPath, \u0026quot;o\u0026quot;, \u0026quot;squares.png\u0026quot;, \u0026quot;png output file\u0026quot;)\n\tflag.IntVar(\u0026amp;ncpu, \u0026quot;c\u0026quot;, 8, \u0026quot;number of cpus\u0026quot;)\n\tflag.IntVar(\u0026amp;nsquares, \u0026quot;n\u0026quot;, 20, \u0026quot;number of squares\u0026quot;)\n}\n\nfunc main() {\n\n\truntime.GOMAXPROCS(ncpu)\n\n\tflag.Parse()\n\n\tpngFile, _ := os.Open(pngPath, os.O_WRONLY|os.O_CREATE, 0644)\n\tif pngFile == nil { return }\n\tdefer pngFile.Close()\n\n\tpngWtr := bufio.NewWriter(pngFile)\n\tif pngWtr == nil { return }\n\tdefer pngWtr.Flush()\n\n\trgba := image.NewRGBA(900, 600)\n\tif rgba == nil { return }\n\n\tqueue := make(chan *SquareData, ncpu)\n\tdone := make(chan int, ncpu)\n\tquit := make(chan bool, ncpu)\n\n\tif queue == nil || done == nil || quit == nil { return }\n\n\tfor i := 0; i \u0026lt; ncpu; i++ {\n\t\tgo DrawSquareHandler(rgba, queue, done, quit)\n\t}\n\n\tcolors := []image.RGBAColor{\n\t\timage.RGBAColor{255, 0, 0, 255},\n\t\timage.RGBAColor{0, 255, 0, 255},\n\t\timage.RGBAColor{0, 0, 255, 255},\n\t}\n\n\tthicklines := []bool{true, false, false, true, false}\n\n\trandRange := func(low, high int) int {\n\t\treturn int(rand.Float32()*float32(high-low) + float32(low))\n\t}\n\n\tnumSquares := 0\n\tfor i := 0; i \u0026lt; nsquares; i++ {\n\t\tleft, top, edge := randRange(50, 800), randRange(50, 500), randRange(5, 50)\n\n\t\tgo func(lf, tp, ed int, cl image.RGBAColor, th bool) {\n\t\t\tqueue \u0026lt;- \u0026amp;SquareData{lf, tp, ed, cl, th}\n\t\t}(left, top, edge, colors[i%len(colors)], thicklines[i%len(thicklines)])\n\n\t\tnumSquares++\n\t}\n\n\tfor numSquares \u0026gt; 0 {\n\t\t\u0026lt;-done\n\t\tnumSquares--\n\t}\n\n\tfor i := 0; i \u0026lt; ncpu; i++ {\n\t\tquit \u0026lt;- true\n\t}\n\n\tpng.Encode(pngWtr, rgba)\n}\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 3,
	"closed_at": "2014-12-08T10:09:00Z",
	"created_at": "2011-03-08T04:35:37Z",
	"updated_at": "2016-06-24T19:26:16Z"
}
