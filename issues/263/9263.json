{
	"id": 51669967,
	"number": 9263,
	"state": "closed",
	"title": "Setting Pdeathsig while PID 1 causes all child processes to die on birth",
	"body": "Go Version: 1.3.1\r\nOS: Linux (Ubuntu Precise)\r\n\r\nI'm writing a wrapper process that configures a bunch of things, spawns a child and sends the child updates. In order to handle the possibility of my process getting a `SIGKILL` I'm setting `Pdeathsig`.\r\n\r\n```go\r\ncmd := exec.Command(\"/bin/sleep\", \"1\")\r\ncmd.SysProcAttr = syscall.SysProcAttr{Pdeathsig: syscall.SIGKILL}\r\nerr := cmd.Run()\r\nfmt.Println(err)\r\n```\r\n*Disclaimer: this code has not technically been compiled as this is being written from my home Mac*\r\n\r\nThis wrapper script will be deployed in several places, on bare-metal machines, in docker containers, in vms, etc.\r\n\r\nWhen testing everything worked as expected. Then I went to deploy to a docker container and discovered that my child process was getting `SIGKILL` as soon as I spawned it.\r\n\r\nI eventually managed to track it down to [line 140 of exec_linux](https://golang.org/src/syscall/exec_linux.go?s=4334:4395#L137). Well technically it was line 90 in go 1.3.1 but go 1.4 has the same code, just shifted down a bit.\r\n\r\nWhat is happening is in the docker container my process has PID 1. When I exec a process with `Pdeathsig` go checks if the PPID is 1 and if so it sends the signal to itself to prevent a race condition where the parent dies before the child has a chance to set `Pdeathsig`.\r\n\r\nThis is a bug. In addition to the case of a natural PPID of 1, it isn't handling subreapers. The subreaper won't have a PID of 1, instead it will have a normal PID of \u003e1. In this case exec should be sending SIGKILL to itself, but fails to.\r\n\r\nI suggest that instead of checking if PPID is 1, we instead save the PID before forking, then once we fork instead of checking if `PPID == 1` we instead check if `OriginalPid == PPID`.\r\n\r\nI've worked around this by prefacing my call to set `Pdeathsig` with an `if os.Getpid() != 1` but I feel that this is something that should ideally be fixed in future versions of Go.",
	"user": {
		"login": "tarrant",
		"id": 39023,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"assignee": {
		"login": "crawshaw",
		"id": 161319,
		"type": "User",
		"site_admin": false
	},
	"comments": 2,
	"closed_at": "2014-12-22T21:24:08Z",
	"created_at": "2014-12-11T10:27:29Z",
	"updated_at": "2016-06-25T01:56:01Z",
	"milestone": {
		"id": 905105,
		"number": 1,
		"title": "Go1.5"
	}
}
