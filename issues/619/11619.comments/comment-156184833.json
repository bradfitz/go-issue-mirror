{
	"id": 156184833,
	"body": "As a user, I admit that the lifecycle event model wasn't obvious by just looking at client code and had to check out the docs and source code. It is however pretty easy to grasp.\r\n\r\nThe good: with the way crosses work, there is no need to send fake events for intermediary stages/states that are not handled on a given platform. For example, right now on X11 the first and last lifecycle event is from *StageDead* to *StageFocussed*, yet Crosses allow the user to check that the app has reached *StageAlive* and *StageVisible* and act upon it as if they had actually been sent. Of course, the user has to understand that both stages could be crossed in a single event and should be handled in the proper order upon app startup and shutdown. Then again, it's not overly complicated.\r\n\r\nThe bad: my only gripe with it could be the wording of the API and some needed improvements to the documentation:\r\n- clarify that when calling `Crosses()`, if `s` is equal to `To` it counts as a cross for CrossOn and the same for `s` equals `From` for `CrossOff`. Rename the method to something that makes this more obvious?\r\n- \"crosse(s)\" is somewhat confusing. May be a `Transition` type instead of `Cross` and rename `CrossOn`/`CrossOff` to just `On`/`Off`. \r\n- remove documentation references to negative and positive crosses (which do not exist in the code) in favor of cross on/off.\r\n- *up* and *down* instead of *on* and *off*  (I picture the model as an ECG...)\r\n\r\nIMHO, this API provides a neat wrapper around platform specific event models (that I do not want to bother with), and it can easily be extended by adding intermediary stages should a given platform require it.\r\n\r\n",
	"user": {
		"login": "db47h",
		"id": 879556,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-12T18:00:31Z",
	"updated_at": "2015-11-12T18:00:31Z"
}
