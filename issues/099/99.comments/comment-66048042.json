{
	"id": 66048042,
	"body": "\u003ca id=\"c10\"\u003e\u003c/a\u003eComment 10 by **dsmid@clever.cz**:\n\n\u003cpre\u003e\u003e Actually, forcing your own de facto standard by force is not at all counterproductive.\n\nLet me explain.\nThis patch does not touch any current functionality. It just adds a new optional\nfeature. If you had choice, what gofmt flavour would you use supposed both are\nequally reachable ? The one than can does less or the one that can do more without\nany trade-offs ?\nNow remember that most users won't install Go from source. They'll install it as some\nkind of binary package from their OS repository. If upstream doesn't accept enhancing\nand harmless patches from community, package maintainer usually applies patches of\nhis/her choice to upstream source because he/she usually wants the users to have more\noptions, not less.\nAs a result, every distro will use slightly different Go flavour and those little\nannoying differences will make resolving bug reports very hard and it won't be clear\nif a bug is related to upstream source or applied patch.\n\nI perfectly understand Google has right to refuse any patch. The are plenty of\nreasons for not accepting a patch - bad code quality, standard coding style\nviolation, duplicated functionality, API misuse... All those reasons have one in\ncommon: they give a hint what should be made to implement desired functionality in a\nproper way.\nThe reason for not accepting this patch is: We don't want users to use such\nfunctionality.\nI think such paternalizing approach won't help Go authors to achieve their dream of\nuniform coding style. It will just produce incompatibilities without any real profit.\nDevelopers tend to stick to their habits even at the price of deviating from upstream.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2009-11-13T08:28:48Z",
	"updated_at": "2014-12-08T10:03:15Z"
}
