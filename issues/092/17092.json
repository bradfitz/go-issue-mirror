{
	"id": 176720692,
	"number": 17092,
	"state": "open",
	"title": "syscall: exec_linux.go not using cross architecture safe SYS_SETGROUPS",
	"body": "### What version of Go are you using (`go version`)?\r\ngo 1.7.1\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGOOS=linux\r\nGOARCH=arm\r\n\r\n### What did you do?\r\ngroups = []uint32{20, 21, 22}\r\ncmd.SysProcAttr.Credential = \u0026syscall.Credential{Groups: groups}\r\ncmd.Run()\r\n\r\nRun strace on the process:\r\nstrace -e trace=setgroups -e trace=setgroups32 -f {executable}\r\n\r\n### What did you expect to see?\r\nsetgroups32(3, [20, 21, 22])\r\n\r\n### What did you see instead?\r\nsetgroups(3, [20, 0, 21])\r\n\r\n### Source of problem and possible fix\r\nIt appears that syscall/linux_exec.go line 217, the RawSyscall is using SYS_SETGROUPS which on linux/arm is the 16bit GID system call. Since golang always uses 32bit GIDs, this fails. I switched this statement to SYS_SETGROUPS32, and it worked fine on my linux/arm system.\r\n\r\nPerhaps this RawSyscall should be replaced with syscall.setgroups so that the correct architecture dependent system call is used.\r\n\r\nPlease note that this is also true for the SYS_SETUID and SYS_SETGID syscalls just below this line as well. Those statements will operate correctly, unless a UID or GID \u003e= 2^16 is used. In which case it will truncate the integer and use the wrong ID instead of giving an error. However, I do not see an architecture dependent function already implemented to replace those.",
	"user": {
		"login": "celledge",
		"id": 243230,
		"type": "User",
		"site_admin": false
	},
	"comments": 4,
	"created_at": "2016-09-13T18:53:06Z",
	"updated_at": "2016-09-13T23:32:13Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
