{
	"id": 128675885,
	"number": 14092,
	"state": "closed",
	"title": "go/types: cannot find type of [...]T type literals",
	"body": "http://play.golang.org/p/eksKQzD3Km\r\n\r\nIn a composite literal expression like `[1]int{0}`, you can use `info.TypeOf` on the `[1]int` type literal subexpression to get the type `[1]int`.\r\n\r\nHowever, if you use `info.TypeOf` on the `[...]int` subexpression of `[...]int{0}`, you get `nil` instead.  I would expect that go/types should report that this `[...]int` means the type `[1]int`.\r\n\r\nAs a workaround, `info.TypeOf` *does* return the expected type when applied to the entire composite literal expression (i.e., `[...]int{0}`).\r\n\r\n/cc @griesemer @alandonovan ",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"assignee": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-08-18T17:11:25Z",
	"created_at": "2016-01-25T23:44:17Z",
	"updated_at": "2016-08-18T17:11:25Z",
	"milestone": {
		"id": 1709363,
		"number": 38,
		"title": "Go1.8"
	}
}
