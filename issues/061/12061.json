{
	"id": 99519860,
	"number": 12061,
	"state": "closed",
	"title": "runtime: consider rescanning stacks before mark termination",
	"body": "Mark termination does not have to rescan stacks that haven’t executed since the last scan and it doesn’t have to rescan above the lowest stack barrier. But a lot can happen between concurrent scan and mark termination that leaves mark termination with a lot of stack scanning work. We should think about how we can reduce this.\r\n\r\nOne way is to rescan stacks toward the end of the concurrent mark phase (perhaps as part of entering mark 2) to close the gap during which stacks can become dirty.\r\n\r\nAnother possibility (suggested by @RLH) is to rescan stacks on preemption. A potential downside of this is that a goroutine can be preempted many times during concurrent mark, and ultimately only the most recent scan matters. It may also cause us to retain more floating garbage.",
	"user": {
		"login": "aclements",
		"id": 2688315,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2015-11-04T19:23:48Z",
	"created_at": "2015-08-06T20:38:02Z",
	"updated_at": "2015-11-04T19:23:48Z",
	"milestone": {
		"id": 1182837,
		"number": 25,
		"title": "Go1.6Early"
	}
}
