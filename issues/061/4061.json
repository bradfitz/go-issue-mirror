{
	"id": 51281583,
	"number": 4061,
	"state": "closed",
	"title": "cmd/api: interfaces with unexported methods can be extended",
	"body": "\u003cpre\u003eIf I add a new method to reflect.Type the api tool rejects it:\n\n+pkg reflect, type Type interface { Align, AssignableTo, Bits, ChanDir, ConvertibleTo,\nElem, Field, FieldAlign, FieldByIndex, FieldByName, FieldByNameFunc, Implements, In,\nIsVariadic, Key, Kind, Len, Method, MethodByName, Name, NumField, NumIn, NumMethod,\nNumOut, Out, PkgPath, Size, String }\n-pkg reflect, type Type interface { Align, AssignableTo, Bits, ChanDir, Elem, Field,\nFieldAlign, FieldByIndex, FieldByName, FieldByNameFunc, Implements, In, IsVariadic, Key,\nKind, Len, Method, MethodByName, Name, NumField, NumIn, NumMethod, NumOut, Out, PkgPath,\nSize, String }\n\nHowever, this is okay as long as all the implementations in package reflect have been\nupdated to continue to implement the new interfaces, because Type has an unexported\nmethod (or more), so there is no possibility that code outside reflect is trying to\nimplement this interface and will break because of the new method. Additions are okay,\ndeletions are not.\n\nI suspect that the easiest fix is to say that for interfaces with unexported methods,\nyou list the exported ones one per line like we do for struct fields:\n\npkg reflect, type Type interface, method Align\n...\n\nAs a counter-example test case, io.Reader would continue to use the existing 1-line\nformat.\u003c/pre\u003e",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 1,
	"closed_at": "2014-12-08T10:21:34Z",
	"created_at": "2012-09-11T03:30:59Z",
	"updated_at": "2016-06-24T22:24:24Z",
	"milestone": {
		"id": 1067199,
		"number": 11,
		"title": "Go1.1"
	}
}
