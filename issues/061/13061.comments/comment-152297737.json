{
	"id": 152297737,
	"body": "I took a stab at this, but discovered the trivial fix (just don't propagate types to explicit conversion arguments) causes a regression on this test case in test/fixedbugs/bug193.go, because it no longer detects the expected errors:\r\n\r\n    func main() {\r\n            s := uint(10)\r\n            ss := 1 \u003c\u003c s\r\n            y1 := float64(ss)\r\n            y2 := float64(1 \u003c\u003c s) // ERROR \"shift\"\r\n            y3 := string(1 \u003c\u003c s)  // ERROR \"shift\"\r\n            _, _, _, _, _ = s, ss, y1, y2, y3\r\n    }\r\n\r\nI'm actually rather surprised to find out the above is not valid Go (whereas `float64(1 \u003c\u003c uint(10))` *is* valid), but it seems to be in the spec:\r\n\r\n\u003e If the left operand of a non-constant shift expression is an untyped constant, it is first converted to the type it would assume if the shift expression were replaced by its left operand alone.\r\n\r\nHrm.",
	"user": {
		"login": "mdempsky",
		"id": 38349,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-29T19:40:20Z",
	"updated_at": "2015-10-29T19:40:20Z"
}
