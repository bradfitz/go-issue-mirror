{
	"id": 214771943,
	"body": "This has been an issue since 1.5 and has been ignored since then (it has\nalways been \"we will address in release N+1\").  Kicking the can down the\nroad has proven to not be helpful.  What is nice about what Russ has\nimplemented is that the owner of such code can pick the level of\ninteroperability they desire.  They can provide the minimal:\n\n//go:binary-only-package\n\npackage mine\n\nOr they can provide more useful information:\n\n//go:binary-only-package\n\n// Package mine implements our secret Sauce.\n\npackage mine\n\n// A Value contains information about a value.\ntype Value struct {\n        Name string // name of the value\n        _    struct{}\n}\n\n// Int returns the integer value of v.\nfunc (v *Value) Int() int\n\n// Mine is a super secret function that takes\n// x and produces y using the confidential\n// Sauce function:\nfunc Mine(x Value) (y Value)\n\n\nThis will actually work with go doc:\n\n$ *go doc*\npackage mine // import \"c\"\n\nfunc Mine(x Value) (y Value)\ntype Value struct { ... }\n$ *go doc Mine*\nfunc Mine(x Value) (y Value)\n    Mine is a super secret function that takes x and produces y using the\n    confidential Sauce function:\n$ *go doc Value*\ntype Value struct {\nName string // name of the value\n// Has unexported fields.\n}\n    A Value contains information about a value.\n\n\nfunc Mine(x Value) (y Value)\nfunc (v *Value) Int() int\n\nI don't think the latter needs to be required, though I would hope most\nproducers would include more detail than less.  Perhaps someone will even\nwrite a tool that takes full source code, strips out everything not needed\nby go doc, and adds the //go:binary-only-package comment to the top.\n\nAdding checksums is interesting, but in this case I would venture to say\nthat versioning is more useful as it will immediately tell you which\nversion is more up to date.\n\nI really thank Russ for doing this as I have been one of those affected by\nthe deteriorating \"support\" for binary only packages (as a consumer, not a\nproducer).  I think he has implemented a solution that has the least impact\nand is the easiest to move forward with new features, if needed.  Once out\nthere, those who need binary only, non-open source packages will be able to\ntell us how well it is working and if there are changes that should be\nmade.  I think breaking how this works between releases is still better\nthan the status-quo.  Being called experimental is fine, as long as it\nsatisfies the primary goal (making it possible to release binary only\npackages).\n\n    -Paul\n\n\nOn Tue, Apr 26, 2016 at 7:06 AM, Russ Cox \u003cnotifications@github.com\u003e wrote:\n\n\u003e This feature is *not* intended for general use. It is intended for the\n\u003e very specific case of \"company X wants to sell company Y a binary version\n\u003e of a package (or the less commercial setting from @dave-andersen\n\u003e \u003chttps://github.com/dave-andersen\u003e: teacher X wants to give student Y a\n\u003e reference solution)\". I've heard from multiple, diverse sources that this\n\u003e is already happening today, with hacks of various kinds (see background in\n\u003e doc). We can't stop this from happening, but we *can* make sure that\n\u003e those people don't get stuck on Go 1.4 because the go command has gotten\n\u003e too good at noticing the source code is missing.\n\u003e\n\u003e To answer the question \"what about tool X that needs source?\", as\n\u003e mentioned in the doc the answer is \"tool X will not work with such\n\u003e packages, and hopefully that will help limit the use of such things.\" In\n\u003e particular this makes no sense in any open source context such as \"go get\"\n\u003e or Linux distributions, which is why for example \"go get\" will not support\n\u003e such arrangements. But again Go is used for more than just open source.\n\u003e\n\u003e I'm happy to say the details here are experimental in case other details\n\u003e arise (not that the tools are covered by the compatibility guarantee\n\u003e anyway) or somehow it's not restrictive enough and starts to be used\n\u003e inappropriately, but there is a real need here, just one felt\n\u003e disproportionally by people outside the open source community and not on\n\u003e GitHub.\n\u003e\n\u003e The IntelliJ plugin can stay as it is, or it might make sense to use\n\u003e go/types \u003chttps://goto.google.com/types\u003e reading the binaries anyway,\n\u003e depending on the exact needs of the plugin. But it's fine if it doesn't\n\u003e work with binary-only packages. The more helpful tools that don't support\n\u003e binary-only packages and discourage their use, the better. But they do need\n\u003e to work for actually building a program.\n\u003e\n\u003e â€”\n\u003e You are receiving this because you were mentioned.\n\u003e Reply to this email directly or view it on GitHub\n\u003e \u003chttps://github.com/golang/go/issues/2775#issuecomment-214756222\u003e\n\u003e\n",
	"user": {
		"login": "pborman",
		"id": 5115933,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-04-26T14:54:38Z",
	"updated_at": "2016-04-26T14:54:38Z"
}
