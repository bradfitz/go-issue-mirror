{
	"id": 214661594,
	"body": "Hi, \r\n\r\nI have a few issues with this proposal:\r\n- how will vendoring work in this context. One can argue that vendoring is already a half baked solution, but with this proposal ignoring vendoring it seems yet another burden to be solved. Concrete case: package A depends on package BinOnly, how does package C which vendors package A works?\r\n- the proposal says that code in the Go files is optional. This basically breaks any editor that has to work with source code. To examples that I have in mind are the Go plugin for IntelliJ which relies on the source code in GOPATH/src to work and the other is go-code which uses `.a` files to work. If I understand correctly, the proposal says that `.a` files are considered to be binary? If this is the case it means that the IntelliJ plugin will have to start parsing `.a` files as well, which would be ok but the do those packages include documentation for the exported types as well? Also, where's the documentation describing the `.a` file format (and please don't point me to the spurce code doing the work, that is not proper documentation / description)?\r\n- what will be the packaging for this? Like I've mentioned earlier, if this uses `.a` then some things will still be possible but if the files are going to be true compiled binaries then how does it work (with the above two concerns)\r\n- how does the binary package works for keeping it compatible between Go version? If I ship a Go 1.7 compiled binary will that work in 1.8?\r\n- this feels rushed in into 1.7. Would you consider waiting for 1.8 to have a proper discussion around it?",
	"user": {
		"login": "dlsniper",
		"id": 607868,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-04-26T08:04:19Z",
	"updated_at": "2016-04-26T08:05:01Z"
}
