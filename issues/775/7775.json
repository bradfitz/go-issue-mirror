{
	"id": 51287187,
	"number": 7775,
	"state": "closed",
	"title": "crypto/tls: Conn#Read blocks on zero length slice argument",
	"body": "by **aalevy**:\n\n\u003cpre\u003eWhat does 'go version' print?\n\ngo version devel +b3405f9c2e32 Sat Apr 12 14:56:17 2014 +1000 + linux/amd64\n\nWhat steps reproduce the problem?\nIf possible, include a link to a program on play.golang.org.\n\nExample sources files at \u003ca href=\"https://gist.github.com/alevy/10606796\"\u003ehttps://gist.github.com/alevy/10606796\u003c/a\u003e\n\n1. Generate a certificate (self signed or otherwise)\n1. Run server_net.go and connect from telnet over port 8080\n2. Run server_tls.go and connect via openssl s_client -connect localhost:8080\n\nWhat happened?\nnet.Conn#Read returns immeidately since the buffer passed in as an argument is\nzero-length (and the read Syscall returns 0 on a 0 length buffer), while tls.Conn#Read\nblocks until there is some data to read even though the buffer is 0-length \n\nWhat should have happened instead?\nThe behavior should have been the same for both -- either block for both (unreasonable\nsince the read syscall won't block), or don't block in the tls version.\n\nPlease provide any additional information below.\nThis is easy to accomplish by sticking a check for the length at the beginning of\ntls.Conn#Read (and I have a patch ready for this), but not sure this is the best place\nto do it.\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 8,
	"closed_at": "2014-12-08T10:43:07Z",
	"created_at": "2014-04-14T00:23:11Z",
	"updated_at": "2016-06-25T01:32:11Z",
	"milestone": {
		"id": 1067211,
		"number": 17,
		"title": "Go1.3"
	}
}
