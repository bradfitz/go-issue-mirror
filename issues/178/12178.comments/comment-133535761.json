{
	"id": 133535761,
	"body": "\u003e Although it's true that the ABI says that sections named \".note\" should not have any flags, the Go\r\n\u003e linker is not creating a section named \".note\". It's creating a section named \".note.go.buildid\". The\r\n\u003e ABI doesn't say anything about such a section.\r\n\r\nI think this is another one of those \"matter of interpretation due to vague or non-explicit wording in standard\" cases. For example, taking other statements in the standard into consideration:\r\n\r\n\u003e\"sh_type \r\n\u003e This member categorizes the sectionâ€™s contents and semantics.\r\n\u003e Section types and their descriptions appear below.\"\r\n...\r\n\u003e \"Section names with a dot (.) prefix are reserved for the system, although applica-\r\n\u003e tions may use these sections if their existing meanings are satisfactory.  Applica-\r\n\u003e tions may use names without the prefix to avoid conflicts with system sections.\"\r\n\r\n...one could interpret those statements to imply that sections generated by the application, if marked with SHT_NOTE, such as a .note.go.buildid are system sections since they start with a '.' prefix and while the name is not exactly \".note\", I could understand why someone would interpret that to mean that any section with type SHT_NOTE should have the attributes listed in the ABI specification.\r\n\r\nRegardless, our tentative plan for future versions of Solaris is to mimic the GNU linker's behaviour that you describe below and that I also found in an older blog post: http://www.airs.com/blog/archives/45 ...in that we'll change it to honour SHF_ALLOC for those sections.\r\n\r\n\u003e Also, the ABI defines a PT_NOTE segment. Both the GNU linker and gold will take a SHF_ALLOC \r\n\u003e SHT_NOTE section and put it into a PT_NOTE segment. Is there any way to tell the Solaris linker to \r\n\u003e create a PT_NOTE segment?\r\n\r\nThe Solaris linker will create a PT_NOTE segment regardless of whether SHF_ALLOC is set, it just ignores the SHF_ALLOC flags per the table in the ABI; from the Solaris documentation:\r\n\u003e \"The note segment captures all sections of type SHT_NOTE. The link-editor provides a PT_NOTE\r\n\u003e program header entry to reference the note segment.\"\r\n\r\nThe GNU linker appears to only create a PT_NOTE section though if SHF_ALLOC is set on a SHT_NOTE section which seems potentially at odds again with some readings of the standard.\r\n\r\nAs an example of what happens today with Go's -linkmode=external:\r\n```\r\n$ go build -ldflags -linkmode=external hello.go\r\n$ elfdump hello\r\n...\r\nProgram Header[7]:\r\n    p_vaddr:      0                   p_flags:    0\r\n    p_paddr:      0                   p_type:     [ PT_NOTE ]\r\n    p_filesz:     0x38                p_memsz:    0\r\n    p_offset:     0xbfa80             p_align:    0\r\n...\r\nSection Header[34]:  sh_name: .note.go.buildid\r\n    sh_addr:      0                   sh_flags:   0\r\n    sh_size:      0x38                sh_type:    [ SHT_NOTE ]\r\n    sh_offset:    0xbfa80             sh_entsize: 0\r\n    sh_link:      0                   sh_info:    0\r\n    sh_addralign: 0x20              \r\n...\r\n```\r\n\r\nNote the SH_OFFSET of the `.note.go.buildid` section.  That's about ~786K into the file, which is because the SHF_ALLOC on the original section is ignored.\r\n\r\nIf we apply the mapfile I showed originally with -linkmode=external:\r\n```\r\nSection Header[23]:  sh_name: .note.go.buildid\r\n    sh_addr:      0x4be700            sh_flags:   [ SHF_ALLOC ]\r\n    sh_size:      0x38                sh_type:    [ SHT_NOTE ]\r\n    sh_offset:    0xbe700             sh_entsize: 0\r\n    sh_link:      0                   sh_info:    0\r\n    sh_addralign: 0x20              \r\n```\r\n\r\n...but we don't get a PT_NOTE segment because of our override.  In talking with the local linker aliens, there doesn't seem to be any way to get the desired result (SHT_NOTE section with SHF_ALLOC set and a corresponding PT_NOTE section).  The Solaris linker makes the explicit assumption that note sections were never meant to be loaded into memory; only used for on-disk purposes.",
	"user": {
		"login": "binarycrusader",
		"id": 541114,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-21T19:19:10Z",
	"updated_at": "2015-08-21T19:33:35Z"
}
