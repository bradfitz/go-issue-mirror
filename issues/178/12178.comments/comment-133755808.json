{
	"id": 133755808,
	"body": "\u003e The specification seems to strongly imply that non-allocable sections are expected in the segments by calling some segments \"loadable\" and others not. For example, in the \"Program Header\" section of the specification (5-1), it states: \"Some entries describe process segments; others give supplementary information and do not contribute to the process image.\" That seems to pretty clearly imply that some process segments found in the program header will not be loaded into memory. Again, another one of the dark corners of the standard I think.\r\n\r\nOK, fair enough.  On GNU/Linux systems, the sense has always been that you can have a PT_LOAD segment, you can have a segment like PT_INTERP or PT_TLS that refers to in-process memory, you can have a segment ilke PT_GNU_STACK that conveys information but does not refer to any contents of the file, but you will never have a program header that refers to file contents not loaded into memory, because such a segment is not useful.  The kernel loads the PT_LOAD segments into memory, and passes them to the dynamic linker.  We never want the dynamic linker to look at anything other than what the kernel already loaded into memory, so a segment that refers to unloaded memory is useless.\r\n\r\nBut you seem to be right that the ELF ABI permits it.",
	"user": {
		"login": "ianlancetaylor",
		"id": 3194333,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-08-22T21:29:36Z",
	"updated_at": "2015-08-22T21:29:36Z"
}
