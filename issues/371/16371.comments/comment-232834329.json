{
	"id": 232834329,
	"body": "To play devil's advocate, I don't find the existing behavior surprising. Let's label some lines from 0 to 4:\r\n\r\n```\r\n0:\t{\"empty\", \u0026StructA{\r\n1:\t\tNestedB: \u0026StructB{},\r\n2:\t},                       //  \u003c- Confusion indention\r\n3:\t\t\"\",                  //  \u003c- Confusion indention\r\n4:\t}\r\n```\r\n\r\nNote that there are two open-curlies on line 0. Let's call them 0a and 0b.\r\n\r\nThe close-curly on line 2 is vertically aligned with line 0. They both have the same indentation. Note that line 0 is the one containing the matching open-curly, namely 0b. This seems consistent to me, similar to how the matching close-curly in:\r\n\r\n```\r\nfunc foo() {\r\n\tetc\r\n}\r\n```\r\n\r\nis vertically aligned with the start of the line containing the matching open-curly. Similarly for struct literals in general.\r\n\r\nAs for the \"\" on line 3, again that seems consistent to me. That is a field of the struct literal (the struct type is an anonymous struct), and the general rule is that fields are indented more than the literal itself, i.e. its defining curlies: 0a and the one on line 4.\r\n\r\nI think that gofmt is at least being self-consistent here, and applying simple rules. As for the ugliness of the gofmt'ed output, personally, I'd format it differently:\r\n\r\n```\r\ntests := []struct {\r\n\tname  string\r\n\tinput *StructA\r\n\twant  string\r\n}{{\r\n\t\"empty\",\r\n\t\u0026StructA{\r\n\t\tNestedB: \u0026StructB{},\r\n\t},\r\n\t\"\",\r\n}, {\r\n\tetc\r\n}}\r\n```\r\n\r\nEverything seems consistent to me: every close-curly that starts a line is vertically aligned with the line containing the matching open-curly. Every field of a struct literal is at equal indentation, and a greater indentation than its surrounding struct literal.",
	"user": {
		"login": "nigeltao",
		"id": 8565232,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-07-15T01:01:16Z",
	"updated_at": "2016-07-15T01:02:23Z"
}
