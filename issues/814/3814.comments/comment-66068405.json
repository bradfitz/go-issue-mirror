{
	"id": 66068405,
	"body": "\u003ca id=\"c7\"\u003e\u003c/a\u003eComment 7:\n\n\u003cpre\u003eThe spec says that an untyped constant (here 300, or 100) can be used wherever an\noperand of the respective type (in this case int8, because Four is of type int8) is used\n( \u003ca href=\"http://golang.org/ref/spec#Constant_expressions\"\u003ehttp://golang.org/ref/spec#Constant_expressions\u003c/a\u003e ).\n\nThe rules for expressions of non-constant operands (\n\u003ca href=\"http://golang.org/ref/spec#Operators\"\u003ehttp://golang.org/ref/spec#Operators\u003c/a\u003e ) refers to constant expressions again, but also\nlater says that \"if one operand is an untyped constant and the other is not\" (which is\nthe case here), then the untyped is converted to the type of the other operand (in this\ncase int8, which will fail).\n\nThus, the spec explains this scenario correctly. That said, the rules in\n\u003ca href=\"http://golang.org/ref/spec#Operators\"\u003ehttp://golang.org/ref/spec#Operators\u003c/a\u003e (\"... unless the operation involves shifts or\nuntyped constants\") are slightly confusing.\n\nAny change should look at these two sections comprehensively.\n\nPlease do not submit CLs for this - it is much easier if the Go team resolves this.\u003c/pre\u003e",
	"user": {
		"login": "griesemer",
		"id": 8528975,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2012-07-13T00:35:47Z",
	"updated_at": "2014-12-08T10:20:09Z"
}
