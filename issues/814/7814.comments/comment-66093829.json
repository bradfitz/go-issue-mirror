{
	"id": 66093829,
	"body": "\u003ca id=\"c3\"\u003e\u003c/a\u003eComment 3:\n\n\u003cpre\u003e@2: I'm using x.Op(x, y) regularly for years relying on math/big detects it properly and\nbehaves correctly in that case. Am I mistaken on this? The docs say\n\n\"\"\"\"\nMethods are typically of the form:\n\nfunc (z *Int) Op(x, y *Int) *Int\t(similar for *Rat)\n\nand implement operations z = x Op y with the result as receiver; if it is one of the\noperands it may be overwritten (and its memory reused).\n\"\"\"\"[0]\n\nThe above seems to explicitly allow using \"the same Int for result and   arguments\".\n\n  [0]: \u003ca href=\"http://golang.org/pkg/math/big/#pkg-overview\"\u003ehttp://golang.org/pkg/math/big/#pkg-overview\u003c/a\u003e\u003c/pre\u003e",
	"user": {
		"login": "cznic",
		"id": 729580,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-04-20T10:27:31Z",
	"updated_at": "2014-12-08T10:43:20Z"
}
