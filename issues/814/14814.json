{
	"id": 140613184,
	"number": 14814,
	"state": "closed",
	"title": "os.user.Lookup fails with fatal error: C malloc failed in go1.5 but worked in go1.4",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\n\r\n./go version\r\ngo version go1.5.1 linux/amd64  (Not working)\r\n\r\n./go version\r\ngo version go1.4 linux/amd64  (working)\r\n\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\ngo env\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"XXXXXXXXXXXXX:/home/dandey/bin/gopath\"\r\nGORACE=\"\"\r\nGOROOT=\"XXXXXXXXXXXXXXXXXXXX\"\r\nGOTOOLDIR=\"XXXXXXXXXXXXXXXXXXXXX\"\r\nGO15VENDOREXPERIMENT=\"\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n\r\n\r\n3. What did you do?\r\nloaded lots of internal data structs from info read from the database server (go application size is about 4gb in ram, but the server has well over 100gb ram, so the lack memory is not suspected)\r\non our proprietary application written in go.\r\nonce done all subsequent REST requests, seem to fail during authentication at the server.\r\nauthentication was done using os/user.lookup call, which fails with this call stack\r\n\r\n------------------------------------------\r\nfatal error: C malloc failed \r\n\r\ngoroutine 533 [running]: \r\nruntime.throw(0x9d2c70, 0xf) \r\n        /usr/local/go/src/runtime/panic.go:527 +0x90 fp=0xe048e0b238 sp=0xe048e0b220 \r\nruntime.cmalloc(0x400, 0xd920031ff0) \r\n        /usr/local/go/src/runtime/cgocall.go:148 +0x68 fp=0xe048e0b268 sp=0xe048e0b238 \r\nos/user._Cfunc__CMalloc(0x400, 0x400) \r\n        ??:0 +0x21 fp=0xe048e0b280 sp=0xe048e0b268 \r\nos/user.lookupUnix(0xffffffffffffffff, 0xe04d142500, 0x4, 0xe04d142701, 0x0, 0x0, 0x0) \r\n        /usr/local/go/src/os/user/lookup_unix.go:70 +0xaf fp=0xe048e0b3f0 sp=0xe048e0b280 \r\nos/user.lookup(0xe04d142500, 0x4, 0x2eaecdaf, 0x0, 0x0) \r\n        /usr/local/go/src/os/user/lookup_unix.go:43 +0x45 fp=0xe048e0b430 sp=0xe048e0b3f0 \r\nos/user.Lookup(0xe04d142500, 0x4, 0x0, 0x0, 0x0) \r\n        /usr/local/go/src/os/user/lookup.go:15 +0x37 fp=0xe048e0b460 sp=0xe048e0b430 \r\nxxxxxxxxxxx/security.ValidateOperation(0xe04d142500, 0x4, 0xe04b644ac0, 0x3, 0x0, 0x0, 0x0) \r\n        /XXXX/XXXXX/security/Authorise.go:43 +0x5a fp=0xe048e0b590 sp=0xe048e0b460 \r\nXXXXXXXXX/security.Authorise(0xe04d142500, 0x4, 0xe04b644ac0, 0x3, 0x1, 0x0, 0x0) \r\n        /XXXXXX/XXXXXXXXXX/security/Authorise.go:33 +0x247 fp=0xe048e0b628 sp=0xe048e0b590 \r\nXXXXXX.(*RouteFactory).handlerFactory.func1(0x7f5e90f4c950, 0xe04d91b550, 0xe04aa0c000) \r\n        /XXXXXXXXX/XXXXXXXXXXXXX/routes.go:320 +0xad3 fp=0xe048e0baa8 sp=0xe048e0b628 \r\nnet/http.HandlerFunc.ServeHTTP(0xe046be4280, 0x7f5e90f4c950, 0xe04d91b550, 0xe04aa0c000) \r\n        /usr/local/go/src/net/http/server.go:1422 +0x3a fp=0xe048e0bac8 sp=0xe048e0baa8 \r\n\r\n------------------------------------------\r\n\r\n**The same code when recompiled on older go 1.4 compiler works as is?**\r\n\r\n\r\n\r\n\r\n\r\n4. What did you expect to see?\r\nExpected the HTTP authentication to work, and response served\r\n\r\n5. What did you see instead?\r\ncrash on go1.5, but not in go1.4",
	"user": {
		"login": "ascesh",
		"id": 1710612,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-03-14T14:52:27Z",
	"created_at": "2016-03-14T08:57:23Z",
	"updated_at": "2016-03-14T14:52:28Z"
}
