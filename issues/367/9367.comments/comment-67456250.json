{
	"id": 67456250,
	"body": "In my experience the most beneficial of this feature would be as follows:\r\n\r\n```go\r\nvar check bool = something\r\n// ...\r\nvalue := requiredValue + int(check) * optionalValue\r\n```\r\nIE: only add `optionalValue` if `check` is true.\r\n\r\nThis would normally be expressed in go as:\r\n```go\r\nvar check bool = something\r\n// ...\r\nvalue := requiredValue\r\nif check {\r\n    value += optionalValue\r\n}\r\n```\r\n\r\nIn this situation I would argue that the later is more clear about what is happening. Also, the former would most likely require a multiplication instead the conditional branch. Only in the case where `optionalValue == 1 or -1` (ie: add or subtract 1 if boolean is set) could the multiplication be easily avoided.\r\n\r\nIf it is the case that\r\n```go \r\nvalue := required + int(check)\r\n```\r\nwould produce better code than\r\n```go\r\nvalue := required\r\nif check {\r\n    value++\r\n}\r\n```\r\nthen the optimizer should be improved. IMHO the latter is still clearer about what is happening, albeit not as much as the original example.",
	"user": {
		"login": "cookieo9",
		"id": 109270,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-12-18T08:39:27Z",
	"updated_at": "2014-12-18T08:39:27Z"
}
