{
	"id": 151975663,
	"number": 15495,
	"state": "closed",
	"title": "net: race condition in dnsclient_unix.go resolverConfig init",
	"body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n1. What version of Go are you using (`go version`)?\r\ngo version go1.6 linux/amd64\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\nGOARCH=\"arm\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGO15VENDOREXPERIMENT=\"1\"\r\nCC=\"gcc\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\n\r\n3. What did you do?\r\n\r\nWe were seeing issues where systems in the field would get stuck reporting:\r\n\r\n`dial tcp: lookup mywebsite.com on [::1]:53: read udp [::1]:50878-\u003e[::1]:53: read: connection refused`\r\n\r\neven though /etc/resolv.conf was populated with a legitimate nameserver. Restarting the application fixed the issue.\r\n\r\nWe believe this happens when net/dnsclient_unix.go `resolverConfig.init()` happens to run at the same time as /etc/resolv.conf being updated from empty to populated. There's a chance for:\r\n\r\n1. Go reads empty /etc/resolv.conf, stores in `conf.dnsConfig`\r\n2. /etc/resolv.conf gets updated\r\n3. Go stat's /etc/resolv.conf, gets the new modTime and saves to `conf.modTime`\r\n4. Go thinks there are no nameservers, and based on modTime seemingly not changing, never refreshes `conf.dnsConfig`",
	"user": {
		"login": "christievans",
		"id": 6591026,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "WaitingForInfo"
		}
	],
	"comments": 5,
	"closed_at": "2016-05-09T15:06:43Z",
	"created_at": "2016-04-29T21:49:11Z",
	"updated_at": "2016-05-09T15:06:43Z",
	"milestone": {
		"id": 1714149,
		"number": 40,
		"title": "Go1.7Maybe"
	}
}
