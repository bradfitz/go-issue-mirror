{
	"id": 66051397,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eInterpreted string literals are character sequences between double quotes \"\". The\ntext between the quotes, which may not span multiple lines, forms the value of the\nliteral, with backslash escapes interpreted as they are in character literals (except\nthat \\' is illegal and \\\" is legal). ...\n\nString literals, The Go Programming Language Specification\n\u003ca href=\"http://golang.org/doc/go_spec.html#String_literals\"\u003ehttp://golang.org/doc/go_spec.html#String_literals\u003c/a\u003e\n\nStrings can be concatenated using the + operator or the += assignment operator:\n\ns := \"hi\" + string(c)\ns += \" and good bye\"\n\nString addition creates a new string by concatenating the operands.\n\nArithmetic operators, The Go Programming Language Specification\n\u003ca href=\"http://golang.org/doc/go_spec.html#Arithmetic_operators\"\u003ehttp://golang.org/doc/go_spec.html#Arithmetic_operators\u003c/a\u003e\n\ngofmt is correct; 8g and 6g are incorrect. The specification is obtuse because it\ndoesn't tell you, under string literals, that you should use the + operator to split\nan interpreted string literal across two lines. For example,\n\ns := \"a \" +\n     \"string\"\u003c/pre\u003e",
	"user": {
		"login": "peterGo",
		"id": 4561296,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2010-05-29T13:54:58Z",
	"updated_at": "2014-12-08T10:05:59Z"
}
