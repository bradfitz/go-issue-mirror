{
	"id": 66092005,
	"body": "\u003ca id=\"c2\"\u003e\u003c/a\u003eComment 2 by **yiyu.jgl**:\n\n\u003cpre\u003eAn alternative solution is to use a special package. For example, include in your\nrepository an import.go file with:\n\n    package importPath\n    \n    import _ \"rsc.io/pdf\"\n\nWhen go get finds an importPath package, it checks that it has a single import whose\npath matches with the one defined by the directory name (or, alternatively, that the\nimported url doesn't resolve to it, as initially proposed by rsc in golang-dev). The go\ntool would otherwise ignore importPath packages, which would never be built.\n\nI think this approach has several advantages:\n\n- It doesn't require any change to the language or the compiler.\n- It is unlikely that additional info will creep into the import.go file (as with a\n.json file).\n- Vendoring becomes a matter of only rewriting import paths (current tools already work\nwith no changes!).\n- This same method could be extended to support more than one import path, although I'm\nnot sure we would want to do that.\n\nOne drawback that I see is that godoc would also need to be aware of importPath\npackages, but it won't be more difficult than making it understand the modified package\nclause.\n\nBy the way, the importPath name is of course arbitrary. I'm sure there will be some\nbetter option. My point is that it is easy to avoid conflicts with existing package\nnames (something like Path or ROOT would also work, there are more radical solutions\nsuch as \"package .\" or \"package import\" which I find less appealing because they would\nrequire a language change).\u003c/pre\u003e",
	"user": {
		"login": "gopherbot",
		"id": 8566911,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2014-04-04T14:33:47Z",
	"updated_at": "2014-12-08T10:41:25Z"
}
