{
	"id": 97671256,
	"number": 11906,
	"state": "closed",
	"title": "proposal: golang.org/x/image/math/fixed: a place for fixed-point types.",
	"body": "I propose to create a new golang.org/x/image/math/fixed package for common fixed-point types to be used by Go graphics libraries, whether on golang.org/x, github.com, or anywhere else.\r\n\r\nThis would be analogous to how golang.org/x/image/math/f64 holds common vector and matrix types for Go graphics libraries.\r\n\r\nSpecifically, the types would be:\r\n\r\n----\r\n\r\npackage fixed\r\n\r\n// Int26 is a 26.6 fixed point number.\r\ntype Int26 int32\r\n\r\n// Int52 is a 52.12 fixed point number.\r\ntype Int52 int64\r\n\r\n----\r\n\r\nThe fixed.Int26 type can be used to represent a sub-pixel position, such as by the Truetype hinting VM, and by the WebKit and Blink browser layout engines (https://trac.webkit.org/wiki/LayoutUnit and https://chromium.googlesource.com/chromium/blink.git/+/master/Source/platform/LayoutUnit.h).\r\n\r\nI used 24.8 in the first version of my Freetype port (https://code.google.com/p/freetype-go/source/browse/freetype/raster/geom.go), but in hindsight, the difference between 6 and 8 sub-pixel bits isn't noticable visually, and while the relative difference between 24 and 26 is small, the range of the fixed point type becomes more noticable when e.g. you're trying to fit a kerning cache entry into 32 bits, and only half or less of those bits are usable for the (fixed point) adjustment. The upstream C version of Freetype uses 26.6.",
	"user": {
		"login": "nigeltao",
		"id": 8565232,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		},
		{
			"name": "Proposal"
		}
	],
	"comments": 13,
	"closed_at": "2015-07-30T06:07:36Z",
	"created_at": "2015-07-28T10:33:54Z",
	"updated_at": "2016-08-05T16:11:28Z"
}
