{
	"id": 66071310,
	"body": "\u003ca id=\"c1\"\u003e\u003c/a\u003eComment 1:\n\n\u003cpre\u003eFTR, here is the profile for 'go test regexp'. The first part is race detector itself\n(23%) and the second part is various thunks (37%). If we implement custom asm thunks for\nraceread/write/funcenter/funcexit, the second part can be cut to \u003e5% I think. The custom\nthunks must do the following:\n0. For read/write check that the addr is not on stack.\n1. Extract racectx from current g.\n2. Extract caller pc from stack. \n3. Switch stack to g0.\n4. Do static call of __tsan_read/write/..., pass racectx, pc, addr.\n5. Switch stack back.\n\n    11.34%  regexp.test  regexp.test        [.] __tsan_read\n     4.03%  regexp.test  regexp.test        [.] __tsan_write\n     1.50%  regexp.test  regexp.test        [.] __tsan_func_enter\n     1.36%  regexp.test  regexp.test        [.] __tsan_func_exit\n     1.01%  regexp.test  regexp.test        [.] __tsan::Mutex::ReadLock()\n     0.79%  regexp.test  regexp.test        [.] __tsan::Mutex::ReadUnlock()\n     0.47%  regexp.test  regexp.test        [.] __tsan::SyncTab::GetAndLock(__tsan::ThreadState*, unsigned long, unsigned long, bool, bool)\n     0.40%  regexp.test  regexp.test        [.] __tsan::ThreadClock::acquire(__tsan::SyncClock const*)\n     0.38%  regexp.test  regexp.test        [.] __tsan_write_range\n     0.38%  regexp.test  regexp.test        [.] __tsan_read_range\n     0.36%  regexp.test  regexp.test        [.] __tsan::Mutex::Lock()\n     0.31%  regexp.test  regexp.test        [.] __tsan::ThreadClock::release(__tsan::SyncClock*) const\n     0.18%  regexp.test  regexp.test        [.] __tsan::Mutex::Unlock()\n     0.17%  regexp.test  regexp.test        [.] __tsan::Acquire(__tsan::ThreadState*, unsigned long, unsigned long)\n     0.12%  regexp.test  regexp.test        [.] __tsan::Release(__tsan::ThreadState*, unsigned long, unsigned long)\n     0.12%  regexp.test  regexp.test        [.] __tsan::ThreadClock::ReleaseStore(__tsan::SyncClock*) const\n     0.10%  regexp.test  regexp.test        [.] __tsan::SyncTab::PartIdx(unsigned long)\n23% total\n\n    11.23%  regexp.test  regexp.test        [.] runtime.asmcgocall\n     6.34%  regexp.test  regexp.test        [.] runtime.raceread\n     4.24%  regexp.test  regexp.test        [.] runtime.cgocall\n     2.73%  regexp.test  regexp.test        [.] runtime.racewrite\n     2.55%  regexp.test  regexp.test        [.] runtime/race.Read\n     1.73%  regexp.test  regexp.test        [.] runtime/race._Cfunc___tsan_read\n     1.32%  regexp.test  regexp.test        [.] runtime.racefuncenter\n     1.21%  regexp.test  regexp.test        [.] runtime/race.Write\n     0.82%  regexp.test  regexp.test        [.] _cgo_12e5d96e021c_Cfunc___tsan_read\n     0.75%  regexp.test  regexp.test        [.] runtime.racefuncexit\n     0.69%  regexp.test  regexp.test        [.] runtime.getcallerpc\n     0.67%  regexp.test  regexp.test        [.] runtime/race._Cfunc___tsan_write\n     0.66%  regexp.test  regexp.test        [.] runtime/race.FuncEnter\n     0.45%  regexp.test  regexp.test        [.] runtime/race._Cfunc___tsan_func_enter\n     0.44%  regexp.test  regexp.test        [.] runtime/race.FuncExit\n     0.38%  regexp.test  regexp.test        [.] _cgo_12e5d96e021c_Cfunc___tsan_write\n     0.37%  regexp.test  regexp.test        [.] runtime/race._Cfunc___tsan_func_exit\n     0.15%  regexp.test  regexp.test        [.] runtime.gentraceback\n     0.14%  regexp.test  regexp.test        [.] runtime.raceacquireg\n     0.12%  regexp.test  regexp.test        [.] _cgo_12e5d96e021c_Cfunc___tsan_func_exit\n     0.11%  regexp.test  regexp.test        [.] _cgo_12e5d96e021c_Cfunc___tsan_func_enter\n     0.07%  regexp.test  regexp.test        [.] runtime.RaceAcquire\n37% total\u003c/pre\u003e",
	"user": {
		"login": "dvyukov",
		"id": 1095328,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2013-01-31T07:18:38Z",
	"updated_at": "2014-12-08T10:22:37Z"
}
