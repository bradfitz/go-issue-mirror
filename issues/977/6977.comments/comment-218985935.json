{
	"id": 218985935,
	"body": "Just to explain how this comes up in real life: I tend to abstract away the data layer from the business layer so a) I can easy make mocks for tests, and b) I can have flexibility in changing data providers, sharding data, etc. Typical interface might be:\r\n\r\n```\r\npackage user\r\n\r\ntype Database interface {\r\n\tGetAccount(accountID uint64) (model.Account, error)\r\n}\r\n```\r\nSo then I have some other packages that want to be able to fetch accounts under some circumstances, so they say they require their Database to have all of user's Database methods:\r\n```\r\npackage hardware\r\n\r\ntype Database interface {\r\n\tuser.Database\r\n\tSaveDevice(accountID uint64, device model.Device) error\r\n}\r\n```\r\n\r\n```\r\npackage wallet\r\n\r\ntype Database interface {\r\n\tuser.Database\r\n\tReadWallet(accountID uint64) (model.Wallet, error)\r\n}\r\n```\r\nThen, I have some package that needs both of those packages, and its Database interface looks like:\r\n```\r\npackage shopping\r\n\r\ntype Database interface {\r\n\twallet.Database\r\n\tdevice.Database\r\n\tBuy(accountID uint64, deviceID uint64) error\r\n}\r\n```\r\nAnd then, kablooey: Duplicate method GetAccount(accountID uint64) (model.Account, error)",
	"user": {
		"login": "hasty",
		"id": 526455,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-05-13T08:46:24Z",
	"updated_at": "2016-05-13T08:46:24Z"
}
