{
	"id": 167150124,
	"body": "Mitigating the performance \"issue\" even further, the transformation can be still optimized quite a bit if needed. Also, one could have a significantly faster \"ValidString\" method that checks for full enforce compatibility that reduces running time by about 60-80% compared to the transformation. The advantage compared to having the faster prepare is that the user doesn't have to distinguish between these two concepts, which is worth being a bit slower for. So I don't think it will be nearly as bad as 90%. And as you said, it will probably be peanuts on the grand scheme anyway.\r\n\r\nContains vs runes.Set : another more esoteric reason I favor runes.Set is that it is more easy to make  efficient. The runes package was designed to be able to do all kinds of optimizations under the hood if the runes.Set was created with the runes package or at least knows what is going on under the hood (e.g. a runes.Set based on RangeTables can be handled differently from a runes.Set based on functions, etc. A single function/method call can be a lot of overhead when dealing with text). Granted, we could use the same mechanism for this type, but the design can be kept simpler if we return runes.Set.\r\n\r\nWill take a look at you changes soon.",
	"user": {
		"login": "mpvl",
		"id": 6445383,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-24T18:58:59Z",
	"updated_at": "2015-12-24T18:58:59Z"
}
