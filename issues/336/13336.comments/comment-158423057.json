{
	"id": 158423057,
	"body": "@mpvl Thanks for the feedback.\r\n\r\n\u003e Usage of this package should be encouraged, and putting it under the unicode directory might be hiding it too much.\r\n\r\nFair enough; I'm not sure that anyone who doesn't know what this is would use it / apply it properly anyways though, and if they know what it is they'll (probably?) look for it under this name.\r\n\r\n\u003e Similarly, the name precis may be too obscure. Perhaps \"golang.org/x/text/secure\" (secure.Identifier, secure.FreeForm would be of type secure.Profile)?. Open to suggestions, though.\r\n\r\nThat's not bad, although that might give people a false impression about what the package should be used for; some classes (FreeForm) are much more about expressiveness than security. I'd hate people to get the wrong impression from the package name (or maybe I'm overthinking it). Either name is fine by me, however; I don't have any alternative suggestions.\r\n\r\nAt least while I'm developing it separately I'll keep it as `precis`, we can change it if we merge it in later.\r\n\r\n\u003e The operations prescribed by RFC 7564 are inherently string-based, instead of rune-based:\r\n\u003e Exposing this as Transforms (with the usual helper methods) would be more appropriate.\r\n\u003e ...\r\n\u003e I would suggest not having any rune-based API for now (except for in an internal package, if needed).\r\n\r\nAbsolutely; that's actually on my radar. The current work has all been into generating the tables, and the `Valid()` methods were really just so that I could write some tests and have an easy way to test a few runes. I think I have an open issue right now for \"define an actual API\".\r\n\r\n\u003e  Tries seem a more natural data structure here. RangeTables can be used for now, but I would not expose them in the API.\r\n\r\nWill do; I wouldn't have wanted to use an internal package unless I was working on this with the aim of contributing it to the text package, but now that that's the goal I'll look into it.\r\n\r\n\u003e I'm a bit worried that this will possibly result in a third way to compare strings (collate, cases). OTOH, this clearly serves a purpose and is more appropriate than using the inherently low-level cases/width etc.\r\n\r\n\u003e The Class type should not be an integer?:\r\n\u003e Different classes may import different tables, but this design will pull all in unconditionally.\r\n\u003e We should allow for user profiles, as the standard suggests. I would make this the same type.\r\n\u003e This package may potentially pull in a huge amount of data (unicode/norm, cases, width, bidi (TODO), \u003e etc.) . The API should be designed to drop tables if not needed. (very doable.)\r\n\r\nAgreed.\r\n\r\nThanks for all your feedback. I'll start working on a proper API for the package this weekend.\r\n",
	"user": {
		"login": "SamWhited",
		"id": 512573,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-11-20T14:54:35Z",
	"updated_at": "2015-11-20T14:54:35Z"
}
