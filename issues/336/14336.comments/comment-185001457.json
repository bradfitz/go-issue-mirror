{
	"id": 185001457,
	"body": "I realize that I am just Yet Another Rando On Github (YAROG).\r\n\r\nThe entire reason I opened this issue is because as a brand-new user of the language, the experience broke any past expectations I had from an interaction between the terminal and myself. This should be cause for concern.\r\n\r\nMy experience reading the output of some of the `go help foo` commands is comparable to reading the nascent help system in a young MUD. Providing a stable textual structure used by each and every `go help foo` command will go a long way in improving the user experience. It would set clear expectations of repeatable behavior. As is, there is literally no way to know where the message began if I don't see the line where I typed the command (or use a pager). This I would consider a usability failure of Golang's terminal-based help system.\r\n\r\n@robpike scroll bars are a help? Long-lived terminal window scroll bars will not blink twice at the added vertical length of the output of something like `go help gopath`.\r\n\r\n@robpike If our argument deals with \"system tools\" vs. \"system\", I'll suggest the following separation:\r\n\r\n- Operating System\r\n- Shell\r\n- Adapter Layer\r\n- Golang\r\n\r\nIf this is an acceptable separation of concerns, then whose responsibility is it to build the adapter? The user? I would argue it is up to Golang to make itself usable. If this is not an acceptable separation of concerns, what is an acceptable separation of concerns?\r\n\r\nTo address @minux and @dominikh's note  --- Yes, `go help` or `git help`, per the age-old UNIX-like convention, would likely simply output to the terminal. Usually that command is understood to either give you the everything you need or a breakdown of further instructions for more detailed help. Based on a cursory examination, `go help` seems to fall in the latter category. My expectation is that if you've built a complex help system and you want me to go through your tool instead of my being able to discover it some other way, the least you could do is use man pages -- which have worked for decades. Also 'cause if I'm using emacs it means I can use `woman`, but that's a minor concern.",
	"user": {
		"login": "Trevoke",
		"id": 67913,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-02-17T03:36:03Z",
	"updated_at": "2016-02-17T03:51:16Z"
}
