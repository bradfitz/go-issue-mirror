{
	"id": 51285760,
	"number": 6809,
	"state": "closed",
	"title": "runtime: track time or counts goroutine entered runtime",
	"body": "\u003cpre\u003eFor debugging goroutine leaks, it would be nice if the runtime could tell me how long\neach goroutine had been stuck in its current state.\n\ne.g. a goroutine blocked on a lock or channel send/recv for hours is probably busted.\n\nCould that timestamp be kept per-G?  It's not much more memory.\n\nThe time need not be perfectly accurate, either (if getting time every entry into\nruntime is viewed as too expensive), since the point I at least care about is just\nseeing very old things.\n\nAlternatively, all of this could be done in my own program (polling every ~30 seconds)\nif I had a per-G unique value that changed whenever the goroutine state changed.  A\nper-G counter would be enough, incremented every entry to the runtime.\u003c/pre\u003e",
	"user": {
		"login": "bradfitz",
		"id": 2621,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "FrozenDueToAge"
		}
	],
	"comments": 10,
	"closed_at": "2014-12-08T10:37:52Z",
	"created_at": "2013-11-21T17:15:42Z",
	"updated_at": "2016-06-25T01:22:45Z"
}
