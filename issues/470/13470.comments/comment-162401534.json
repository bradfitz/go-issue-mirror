{
	"id": 162401534,
	"body": "The offending instruction is `testb  $0x20,0x1(%rcx,%rdx,2)`, and `%r{c,d}x` are\r\n```\r\nrcx            0x0\t0\r\nrdx            0x72\t114\r\n```\r\n(of course, `0xe5 = 0x1+0x0+0x2*0x72`). `%rcx` is the result of `__ctype_b_loc`.\r\n\r\n```\r\n   0x00007ffff5bbca44 \u003c+308\u003e:\tcallq  0x7ffff5bba3a0 \u003c__ctype_b_loc@plt\u003e\r\n   0x00007ffff5bbca49 \u003c+313\u003e:\tmov    (%rax),%rcx\r\n   0x00007ffff5bbca4c \u003c+316\u003e:\tjmp    0x7ffff5bbca54 \u003c_nss_compat_getpwuid_r+324\u003e\r\n   0x00007ffff5bbca4e \u003c+318\u003e:\txchg   %ax,%ax\r\n   0x00007ffff5bbca50 \u003c+320\u003e:\tadd    $0x1,%r15\r\n   0x00007ffff5bbca54 \u003c+324\u003e:\tmovzbl (%r15),%eax\r\n   0x00007ffff5bbca58 \u003c+328\u003e:\tmovsbq %al,%rdx\r\n=\u003e 0x00007ffff5bbca5c \u003c+332\u003e:\ttestb  $0x20,0x1(%rcx,%rdx,2)\r\n```\r\n\r\nSo to my untrained eye it looks like `__ctype_b_loc` returns null, when really it [should](https://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-PDA/LSB-PDA/baselib---ctype-b-loc.html)\r\n\r\n\u003e [...] return a pointer into an array of characters in the current locale that contains characteristics for each character in the current character set. The array shall contain a total of 384 characters, and can be indexed with any signed or unsigned char (i.e. with an index value between -128 and 255). If the application is multithreaded, the array shall be local to the current thread.\r\n\r\nAnd here's what happens inside (at this point, I think I've caught up with @mwhudson), note the `%fs` register.\r\n\r\n```\r\n000000000051e340 \u003c__ctype_b_loc\u003e:\r\n  51e340:       48 c7 c0 e0 ff ff ff    mov    $0xffffffffffffffe0,%rax\r\n  51e347:       64 48 03 04 25 00 00    add    %fs:0x0,%rax\r\n  51e34e:       00 00\r\n  51e350:       c3                      retq\r\n  51e351:       66 66 66 66 66 66 2e    data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)\r\n  51e358:       0f 1f 84 00 00 00 00\r\n  51e35f:       00\r\n\r\n000000000051e3a0 \u003c__ctype_init\u003e:\r\n  51e3a0:       48 c7 c0 a0 ff ff ff    mov    $0xffffffffffffffa0,%rax\r\n  51e3a7:       64 48 8b 00             mov    %fs:(%rax),%rax\r\n  51e3ab:       48 8b 10                mov    (%rax),%rdx\r\n  51e3ae:       48 8b 4a 40             mov    0x40(%rdx),%rcx\r\n  51e3b2:       48 c7 c2 e0 ff ff ff    mov    $0xffffffffffffffe0,%rdx\r\n  51e3b9:       48 81 c1 00 01 00 00    add    $0x100,%rcx\r\n  51e3c0:       64 48 89 0a             mov    %rcx,%fs:(%rdx)\r\n  51e3c4:       48 8b 10                mov    (%rax),%rdx\r\n  51e3c7:       48 8b 4a 48             mov    0x48(%rdx),%rcx\r\n  51e3cb:       48 c7 c2 d0 ff ff ff    mov    $0xffffffffffffffd0,%rdx\r\n  51e3d2:       48 81 c1 00 02 00 00    add    $0x200,%rcx\r\n  51e3d9:       64 48 89 0a             mov    %rcx,%fs:(%rdx)\r\n  51e3dd:       48 8b 00                mov    (%rax),%rax\r\n  51e3e0:       48 8b 50 58             mov    0x58(%rax),%rdx\r\n  51e3e4:       48 c7 c0 d8 ff ff ff    mov    $0xffffffffffffffd8,%rax\r\n  51e3eb:       48 81 c2 00 02 00 00    add    $0x200,%rdx\r\n  51e3f2:       64 48 89 10             mov    %rdx,%fs:(%rax)\r\n  51e3f6:       c3                      retq\r\n  51e3f7:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\r\n  51e3fe:       00 00\r\n```\r\n\r\nFrom the [looks of it](http://stackoverflow.com/questions/6611346/how-are-the-fs-gs-registers-used-in-linux-amd64) `%fs` has to do with thread-local storage. It's `0` when not crashing, and `99` before the segfault. Maybe `Go` accidentally clobbers something there from one thread to the other (if one sets up its TLS, the other doesn't but `%fs` gets mixed up)? Or it's not even a `Go` issue?",
	"user": {
		"login": "tschottdorf",
		"id": 5076964,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-07T03:34:30Z",
	"updated_at": "2015-12-07T05:06:17Z"
}
