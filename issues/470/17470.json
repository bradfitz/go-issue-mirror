{
	"id": 183289993,
	"number": 17470,
	"state": "closed",
	"title": "Switch case order not adhered",
	"body": "### What version of Go are you using (`go version`)?\r\ngo version go1.7 windows/amd64\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOEXE=.exe\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOOS=windows\r\nset GOPATH=D:\\Go\\\r\nset GORACE=\r\nset GOROOT=D:\\Go1.7\r\nset GOTOOLDIR=D:\\Go1.7\\pkg\\tool\\windows_amd64\r\nset CC=gcc\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\Taco\\AppData\\Local\\Temp\\go-build651913466=/tmp/go-build -gno-record-gcc-switches\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\n\r\n### What did you do?\r\nA switch statement of an integer will order the cases such that the integer is tested by increasing values. The following example would be expected to test first for `2`, then `3` and then `1`.\r\n\r\n```go\r\npackage main\r\n\r\nvar c int\r\n\r\nfunc test(i int) {\r\n\tswitch i {\r\n\tcase 2:\r\n\t\tc++\r\n\tcase 3:\r\n\t\tc++\r\n\tcase 1:\r\n\t\tc++\r\n\t}\r\n}\r\n```\r\n\r\nInstead, the ASM output shows:\r\n\r\n```asm\r\n        0x0000 00000 (test.go:5)        TEXT    \"\".test(SB), $0-8\r\n        0x0000 00000 (test.go:5)        NOP\r\n        0x0000 00000 (test.go:5)        NOP\r\n        0x0000 00000 (test.go:5)        FUNCDATA        $0, gclocals·5184031d3a32a42d85027f073f873668(SB)\r\n        0x0000 00000 (test.go:5)        FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\r\n        0x0000 00000 (test.go:11)       MOVQ    \"\".h+8(FP), AX\r\n--\u003e     0x0005 00005 (test.go:11)       CMPQ    AX, $1\r\n        0x0009 00009 (test.go:11)       JNE     29\r\n        0x000b 00011 (test.go:12)       MOVQ    \"\".c(SB), AX\r\n        0x0012 00018 (test.go:12)       INCQ    AX\r\n        0x0015 00021 (test.go:12)       MOVQ    AX, \"\".c(SB)\r\n        0x001c 00028 (test.go:14)       RET\r\n--\u003e     0x001d 00029 (test.go:7)        CMPQ    AX, $2\r\n        0x0021 00033 (test.go:7)        JNE     54\r\n        0x0023 00035 (test.go:8)        MOVQ    \"\".c(SB), AX\r\n        0x002a 00042 (test.go:8)        INCQ    AX\r\n        0x002d 00045 (test.go:8)        MOVQ    AX, \"\".c(SB)\r\n        0x0034 00052 (test.go:14)       JMP     28\r\n--\u003e     0x0036 00054 (test.go:9)        CMPQ    AX, $3\r\n        0x003a 00058 (test.go:9)        JNE     28\r\n        0x003c 00060 (test.go:10)       MOVQ    \"\".c(SB), AX\r\n        0x0043 00067 (test.go:10)       INCQ    AX\r\n        0x0046 00070 (test.go:10)       MOVQ    AX, \"\".c(SB)\r\n        0x004d 00077 (test.go:14)       JMP     28\r\n```\r\n\r\nHere `i` is tested against `1`, then `2` and then `3`. A different order in the source code will lead to the same output, it looks like the compiler orders the integer checks by increasing value. This is unexpected, because the docs say that `switch` will evaluate from top-to-bottom, left-to-right.\r\n\r\nI encountered this while rewriting `if-else` statements to `switch` statements. I saw a drop in performance because the tests were reordered. Now the most occurring case wasn't the first check...see https://github.com/tdewolff/minify/pull/102\r\n",
	"user": {
		"login": "tdewolff",
		"id": 5563166,
		"type": "User",
		"site_admin": false
	},
	"comments": 1,
	"closed_at": "2016-10-16T21:43:38Z",
	"created_at": "2016-10-16T20:38:03Z",
	"updated_at": "2016-10-16T21:43:39Z",
	"reactions": {
		"total_count": 1,
		"+1": 1
	}
}
