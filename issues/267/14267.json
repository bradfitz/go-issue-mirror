{
	"id": 132280760,
	"number": 14267,
	"state": "closed",
	"title": "cmd/compile: combine small loads",
	"body": "encoding/binary/binary.go: \r\n```\r\nfunc (littleEndian) Uint64(b []byte) uint64 {\r\n\treturn uint64(b[0]) | uint64(b[1])\u003c\u003c8 | uint64(b[2])\u003c\u003c16 | uint64(b[3])\u003c\u003c24 |\r\n\t\tuint64(b[4])\u003c\u003c32 | uint64(b[5])\u003c\u003c40 | uint64(b[6])\u003c\u003c48 | uint64(b[7])\u003c\u003c56\r\n}\r\n```\r\n\r\nIt would be nice to combine the small loads into one larger load, at least for architectures with unaligned loads.\r\n\r\nSee #14266 for the bug about combining the bounds checks.  This bug is about combining the loads themselves.  We could use rewrite rules something like:\r\n\r\n```(Or64  (Load \u003ct\u003e ptr mem) (Shl64x64 (Load \u003ct\u003e (Add64 ptr (Const64 [t.Size()])) mem) (Const64 [8*t.Size()]))) -\u003e (Load ptr mem)```\r\n\r\nThese rules would probably work independent of whether the bounds checks are fixed or not.\r\n\r\nMaybe we could do stores also.  That would require the bounds checks to go first, and the user to write to the max index first (otherwise partial writes would be observable).\r\n",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"labels": [
		{
			"name": "Performance"
		}
	],
	"comments": 5,
	"closed_at": "2016-04-23T16:01:41Z",
	"created_at": "2016-02-08T22:55:53Z",
	"updated_at": "2016-04-23T16:01:41Z",
	"milestone": {
		"id": 1414133,
		"number": 31,
		"title": "Go1.7"
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	}
}
