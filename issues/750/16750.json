{
	"id": 171533805,
	"number": 16750,
	"state": "open",
	"title": "encoding/json: marshaling nil value stored in interface value doesn't omitempty",
	"body": "1. What version of Go are you using (`go version`)?\r\n1.7, also verified with 1.6.3\r\n\r\n2. What operating system and processor architecture are you using (`go env`)?\r\ndarwin/amd64\r\n\r\n3. What did you do?\r\nI have a struct \"result\" defined with one of the members \"Err\" as an interface type \"error\". The json annotation specifies \"omitempty\".  I define another struct type concreteError which implements this interface on the pointer receiver (i.e. *concreteError implements the interface).  \r\n\r\nIf I assign a nil pointer variable to result.Err, the field is not omitted from the marshaled JSON as expected.  Instead the field is marshaled as a JSON null.  \r\n\r\nIf I assign the nil literal to result.Err, the field is omitted from the marshaled JSON as expected\r\n\r\nThis issue is clearly demonstrated here: https://play.golang.org/p/uw6jvKN-qX\r\n\r\n4. What did you expect to see?\r\nA nil interface value should be omitted from the marshaled JSON when the field is annotated with \"omitempty\"\r\n\r\n5. What did you see instead?\r\nThe nil interface value was not omitted.",
	"user": {
		"login": "jnross",
		"id": 798990,
		"type": "User",
		"site_admin": false
	},
	"comments": 3,
	"created_at": "2016-08-16T22:33:09Z",
	"updated_at": "2016-08-18T07:36:34Z"
}
