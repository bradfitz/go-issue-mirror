{
	"id": 194911844,
	"body": "This has been the behavior at least as far back as Go 1.2 (I can't run\nearlier on my Mac).\nThe docs also seem to state quite clearly that this is what happens:\n\n    To unmarshal JSON into a struct, Unmarshal matches incoming object keys\nto\n    the keys used by Marshal (either the struct field name or its tag),\n    preferring an exact match but also accepting a case-insensitive match.\n    Unmarshal will only set exported fields of the struct.\n\nI understand there are security implications if JSON is used in security\ncontexts, and I was a little surprised too, but the docs are very clear. I\ndoubt that encoding/json's behavior should be dictated by security\nconcerns. FWIW, I don't believe we should go out of our way to reject\nrepeated fields either, especially not now. I might go so far as to argue\nthat using JSON in security standards is a mistake anyway, but I won't do\nthat here.\n\nIn any event it's too late to change the defaults. If we want to support\nthe security use case, maybe we could have a UseStrictNames method on\nDecoder (like UseNumber).\n",
	"user": {
		"login": "rsc",
		"id": 104030,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-03-10T15:42:13Z",
	"updated_at": "2016-03-10T15:42:13Z"
}
