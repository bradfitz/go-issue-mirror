{
	"id": 150967859,
	"body": "If this is coming from the kernel, there will be a report in dmesg (there is on arm64 systems)\n\n\n\n\u003e On 26 Oct 2015, at 07:35, Minux Ma \u003cnotifications@github.com\u003e wrote:\n\u003e \n\u003e fatal error: unexpected signal during runtime execution\n\u003e [signal 0xb code=0x80 addr=0x0 pc=0x40f024]\n\u003e \n\u003e The code is interesting. Normally, it should 0x1 (SEGV_MAPERR).\n\u003e (The other possibilities are 2 for SEGV_ACCERR, and 3 for\n\u003e SEGV_BNDERR)\n\u003e \n\u003e code 0x80 just signifies that it's coming from kernel, but doesn't\n\u003e give a reason for the signal.\n\u003e \n\u003e And looking at the code:\n\u003e 609 if v.ptr() == nil {\n\u003e 610 systemstack(func() {\n\u003e 611 mCache_Refill(c, int32(sizeclass))\n\u003e 612 })\n\u003e 613 shouldhelpgc = true\n\u003e 614 s = c.alloc[sizeclass]\n\u003e 615 v = s.freelist\n\u003e 616 }\n\u003e 617 s.freelist = v.ptr().next\n\u003e \n\u003e v.ptr() shouldn't be nil at line 617 unless someone else is also\n\u003e modifying it. (but it's from gomcache, nobody else should be\n\u003e modifying it concurrently.\n\u003e \n\u003e Could you tell us more about the program? Does it use cgo or\n\u003e unsafe? Have you tried to run it with race detector enabled?\n\u003e â€”\n\u003e Reply to this email directly or view it on GitHub.\n\u003e \n",
	"user": {
		"login": "davecheney",
		"id": 7171,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-10-25T20:50:18Z",
	"updated_at": "2015-10-25T20:50:18Z"
}
