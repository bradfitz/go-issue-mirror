{
	"id": 177399046,
	"body": "Perhaps we're thinking about this the wrong way.  What if instead of thinking about \"what do we do at OOM\", how about \"how do we let the application figure out that it is getting close to OOM\"?\r\n\r\nI could see runtime functions something along the lines of currentMemoryInUse and maxMemoryAvailable.  Heavy-allocating goroutines could check these two functions and backoff/fail the work instead of allocating.\r\n\r\nAnother possible API would be a \"reserveMem(bytes int64) bool\" call that tells the runtime \"expect me to allocate this much\".  If the runtime thinks it will be too much, it can return false, meaning \"probably not going to be able to allocate that much, please back off\".\r\n\r\nI'm less sure how one might implement those calls, especially the \"when is the OS going to refuse my next allocation\" question.  It seems difficult in general, but we may be able to come up with something.  Maybe when reserveMem(...) is called, we ensure that we can successfully map \u0026 commit the heap space required for that much memory?\r\n",
	"user": {
		"login": "randall77",
		"id": 6889504,
		"type": "User",
		"site_admin": false
	},
	"reactions": {
		"total_count": 1,
		"+1": 1
	},
	"created_at": "2016-01-31T05:28:53Z",
	"updated_at": "2016-01-31T05:28:53Z"
}
