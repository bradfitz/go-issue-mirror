{
	"id": 229809289,
	"body": "Fundamentally, the whole point of a garbage collector is that the programmer doesn't have to worry about allocating nor freeing memory. The problem is that a garbage collector can't do anything sensible when it runs out of memory except trying a sweep. If that fails, there's no way to decide what to do since the allocation that failed could have come from anywere.\r\n\r\nThe only way to avoid this is to allocate and free the memory manually. I could imagine the unsafe package gaining a few extra functions to do this, such as unsafe.Allocate(), unsafe.Free(). ",
	"user": {
		"login": "beoran",
		"id": 71289,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2016-06-30T22:42:15Z",
	"updated_at": "2016-06-30T22:42:15Z"
}
