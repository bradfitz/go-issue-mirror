{
	"id": 163591646,
	"body": "`nil` value always has a type. If you visualize that, it makes the behavior much more clear.\r\n\r\nYour if statement, originally written as:\r\n\r\n```Go\r\nif f == nil {\r\n\tfmt.Println(\"This code will never run.\")\r\n}\r\n```\r\n\r\nIs basically doing this:\r\n\r\n```Go\r\nif (*FooImplementation)(nil) == (FooInterface)(nil) {\r\n\tfmt.Println(\"This code will never run.\")\r\n}\r\n```\r\n\r\nWhich makes a lot of sense, those two variables are not equal.\r\n\r\nA common way to resolve this issue is to change signature of `NewFoo` to return `FooInterface` instead of `*FooImplementation`:\r\n\r\n```Go\r\nfunc NewFoo() FooInterface {\r\n\tif (\"error\" == \"error\") {\r\n\t\treturn nil // Now the type is FooInterface rather than *FooImplementation.\r\n\t}\r\n\treturn \u0026FooImplementation{}\r\n}\r\n```",
	"user": {
		"login": "shurcooL",
		"id": 1924134,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-12-10T12:04:44Z",
	"updated_at": "2015-12-10T12:04:44Z"
}
