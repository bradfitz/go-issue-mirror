{
	"id": 95735215,
	"body": "The interface \"error\" is part of the language spec, not just the standard library.  E.g. it doesn't have a package and is documented in the pseudo-package \"builtin\".  The interface cancel should have the same treatment.\r\n\r\nI agree there is considerable overlap between cancellation and network contexts.  Networks contexts are, however, a proper superset of cancellation.  They add deadlines and timeouts which require a notion of time that is not universal.  They add \"values\" which provide the additional context of an RPC or networking call.  (The latter being where the name \"context\" comes from.)  These additions, while important in their domain, are not required elements of the most basic cancellation framework and should be stripped from the core language feature.\r\n\r\nIt is certainly reasonable that net/context.Context would \"derive from\" the cancel interface.  Since cancel is a proper subset of its definition any context.Context would, of course, already implement cancel even if the definition were not changed.  This provides for a convenient backward compatibility in the deployment of the new language feature.",
	"user": {
		"login": "invino4",
		"id": 11217472,
		"type": "User",
		"site_admin": false
	},
	"created_at": "2015-04-23T22:27:20Z",
	"updated_at": "2015-04-23T22:27:20Z"
}
