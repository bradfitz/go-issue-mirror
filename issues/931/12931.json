{
	"id": 111390437,
	"number": 12931,
	"state": "closed",
	"title": "runtime: broken pipe where use http client in ServeHTTP",
	"body": "I use go version go1.5.1 darwin/amd64.\r\n\r\nI write a simple http server like:\r\n\r\n    package main\r\n\r\n    import (\r\n            \"log\"\r\n            \"net/http\"\r\n            \"os\"\r\n            \"os/signal\"\r\n    )\r\n\r\n    func main() {\r\n            c := make(chan os.Signal, 1)\r\n            signal.Notify(c)\r\n            go func() {\r\n                    for s := range c {\r\n                            log.Println(\"recv signal: \", s.String())\r\n                    }\r\n            }()\r\n\r\n            http.HandleFunc(\"/hello\", func(rw http.ResponseWriter, r *http.Request) {\r\n                    resp, _ := http.Get(\"http://www.baidu.com\")\r\n                    if resp != nil \u0026\u0026 resp.Body != nil {\r\n                            resp.Body.Close()\r\n                    }\r\n                    http.Error(rw, \"ok\", http.StatusOK)\r\n            })\r\n            log.Fatal(http.ListenAndServe(\":8888\", nil))\r\n    }\r\n\r\nThen, If I curl http://127.0.0.1:8888/hello and then press Ctrl-C very quickly, the server will receive \"broken pipe\" signal. And if server receive many broken pipe signal, the process will exit.\r\n ",
	"user": {
		"login": "xlvector",
		"id": 100203,
		"type": "User",
		"site_admin": false
	},
	"comments": 9,
	"closed_at": "2015-11-23T18:45:35Z",
	"created_at": "2015-10-14T12:46:21Z",
	"updated_at": "2015-11-23T18:45:35Z",
	"milestone": {
		"id": 1096159,
		"number": 24,
		"title": "Go1.6"
	}
}
